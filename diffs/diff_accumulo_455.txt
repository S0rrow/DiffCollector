diff --git a/test/src/main/java/org/apache/accumulo/test/proxy/ProxyDurabilityIT.java b/test/src/main/java/org/apache/accumulo/test/proxy/ProxyDurabilityIT.java
index c1115abf87..7f61a08f70 100644
--- a/test/src/main/java/org/apache/accumulo/test/proxy/ProxyDurabilityIT.java
+++ b/test/src/main/java/org/apache/accumulo/test/proxy/ProxyDurabilityIT.java
@@ -16,7 +16,6 @@
  */
 package org.apache.accumulo.test.proxy;
 
-import static com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
@@ -58,18 +57,19 @@ import org.junit.Test;
 
 import com.google.common.collect.Iterators;
 import com.google.common.net.HostAndPort;
+import static com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly;
 
 public class ProxyDurabilityIT extends ConfigurableMacBase {
 
   @Override
   protected int defaultTimeoutSeconds() {
-    return 120;
+    return 60;
   }
 
   @Override
   public void configure(MiniAccumuloConfigImpl cfg, Configuration hadoopCoreSite) {
     hadoopCoreSite.set("fs.file.impl", RawLocalFileSystem.class.getName());
-    cfg.setProperty(Property.INSTANCE_ZK_TIMEOUT, "15s");
+    cfg.setProperty(Property.INSTANCE_ZK_TIMEOUT, "10s");
     cfg.setNumTservers(1);
   }
 
@@ -96,7 +96,7 @@ public class ProxyDurabilityIT extends ConfigurableMacBase {
     while (!proxyServer.isServing())
       sleepUninterruptibly(100, TimeUnit.MILLISECONDS);
     Client client = new TestProxyClient("localhost", proxyPort, protocol).proxy();
-    Map<String,String> properties = new TreeMap<>();
+    Map<String,String> properties = new TreeMap<String,String>();
     properties.put("password", ROOT_PASSWORD);
     ByteBuffer login = client.login("root", properties);
 
@@ -107,7 +107,7 @@ public class ProxyDurabilityIT extends ConfigurableMacBase {
     WriterOptions options = new WriterOptions();
     options.setDurability(Durability.NONE);
     String writer = client.createWriter(login, tableName, options);
-    Map<ByteBuffer,List<ColumnUpdate>> cells = new TreeMap<>();
+    Map<ByteBuffer,List<ColumnUpdate>> cells = new TreeMap<ByteBuffer,List<ColumnUpdate>>();
     ColumnUpdate column = new ColumnUpdate(bytes("cf"), bytes("cq"));
     column.setValue("value".getBytes());
     cells.put(bytes("row"), Collections.singletonList(column));