diff --git a/artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/cursor/PagedReferenceImpl.java b/artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/cursor/PagedReferenceImpl.java
index 964737f18c..27c6039c22 100644
--- a/artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/cursor/PagedReferenceImpl.java
+++ b/artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/cursor/PagedReferenceImpl.java
@@ -1,4 +1,4 @@
-/*
+/**
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements. See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -19,7 +19,6 @@ package org.apache.activemq.artemis.core.paging.cursor;
 import java.lang.ref.WeakReference;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import org.apache.activemq.artemis.api.core.ActiveMQException;
 import org.apache.activemq.artemis.api.core.Message;
 import org.apache.activemq.artemis.core.paging.PagedMessage;
 import org.apache.activemq.artemis.core.server.ActiveMQServerLogger;
@@ -27,8 +26,8 @@ import org.apache.activemq.artemis.core.server.MessageReference;
 import org.apache.activemq.artemis.core.server.Queue;
 import org.apache.activemq.artemis.core.server.ServerMessage;
 
-public class PagedReferenceImpl implements PagedReference {
-
+public class PagedReferenceImpl implements PagedReference
+{
    private static final boolean isTrace = ActiveMQServerLogger.LOGGER.isTraceEnabled();
 
    private final PagePosition position;
@@ -49,160 +48,168 @@ public class PagedReferenceImpl implements PagedReference {
 
    private boolean alreadyAcked;
 
-   @Override
-   public ServerMessage getMessage() throws ActiveMQException {
+   public ServerMessage getMessage()
+   {
       return getPagedMessage().getMessage();
    }
 
-   @Override
-   public synchronized PagedMessage getPagedMessage() throws ActiveMQException {
+   public synchronized PagedMessage getPagedMessage()
+   {
       PagedMessage returnMessage = message != null ? message.get() : null;
 
       // We only keep a few references on the Queue from paging...
       // Besides those references are SoftReferenced on page cache...
       // So, this will unlikely be null,
       // unless the Queue has stalled for some time after paging
-      if (returnMessage == null) {
+      if (returnMessage == null)
+      {
          // reference is gone, we will reconstruct it
          returnMessage = subscription.queryMessage(position);
-         message = new WeakReference<>(returnMessage);
+         message = new WeakReference<PagedMessage>(returnMessage);
       }
       return returnMessage;
    }
 
-   @Override
-   public PagePosition getPosition() {
+   public PagePosition getPosition()
+   {
       return position;
    }
 
    public PagedReferenceImpl(final PagePosition position,
                              final PagedMessage message,
-                             final PageSubscription subscription) {
+                             final PageSubscription subscription)
+   {
       this.position = position;
 
-      if (message == null) {
+      if (message == null)
+      {
          this.messageEstimate = -1;
       }
-      else {
+      else
+      {
          this.messageEstimate = message.getMessage().getMemoryEstimate();
       }
-      this.message = new WeakReference<>(message);
+      this.message = new WeakReference<PagedMessage>(message);
       this.subscription = subscription;
    }
 
-   @Override
-   public boolean isPaged() {
+   public boolean isPaged()
+   {
       return true;
    }
 
-   @Override
-   public void setPersistedCount(int count) {
+   public void setPersistedCount(int count)
+   {
       this.persistedCount = count;
    }
 
-   @Override
-   public int getPersistedCount() {
+   public int getPersistedCount()
+   {
       return persistedCount;
    }
 
+
    @Override
-   public int getMessageMemoryEstimate() {
-      if (messageEstimate < 0) {
-         try {
-            messageEstimate = getMessage().getMemoryEstimate();
-         }
-         catch (ActiveMQException e) {
-            ActiveMQServerLogger.LOGGER.warn(e.getMessage(), e);
-         }
+   public int getMessageMemoryEstimate()
+   {
+      if (messageEstimate < 0)
+      {
+         messageEstimate = getMessage().getMemoryEstimate();
       }
       return messageEstimate;
    }
 
+
    @Override
-   public MessageReference copy(final Queue queue) {
-      try {
-         return new PagedReferenceImpl(this.position, this.getPagedMessage(), this.subscription);
-      }
-      catch (ActiveMQException e) {
-         ActiveMQServerLogger.LOGGER.warn(e);
-         return this;
-      }
+   public MessageReference copy(final Queue queue)
+   {
+      return new PagedReferenceImpl(this.position, this.getPagedMessage(), this.subscription);
    }
 
    @Override
-   public long getScheduledDeliveryTime() {
-      if (deliveryTime == null) {
-         try {
-            ServerMessage msg = getMessage();
-            if (msg.containsProperty(Message.HDR_SCHEDULED_DELIVERY_TIME)) {
-               deliveryTime = getMessage().getLongProperty(Message.HDR_SCHEDULED_DELIVERY_TIME);
-            }
-            else {
-               deliveryTime = 0L;
-            }
+   public long getScheduledDeliveryTime()
+   {
+      if (deliveryTime == null)
+      {
+         ServerMessage msg = getMessage();
+         if (msg.containsProperty(Message.HDR_SCHEDULED_DELIVERY_TIME))
+         {
+            deliveryTime = getMessage().getLongProperty(Message.HDR_SCHEDULED_DELIVERY_TIME);
          }
-         catch (ActiveMQException e) {
-            ActiveMQServerLogger.LOGGER.warn(e.getMessage(), e);
-            return 0L;
+         else
+         {
+            deliveryTime = 0L;
          }
       }
       return deliveryTime;
    }
 
    @Override
-   public void setScheduledDeliveryTime(final long scheduledDeliveryTime) {
+   public void setScheduledDeliveryTime(final long scheduledDeliveryTime)
+   {
       deliveryTime = scheduledDeliveryTime;
    }
 
    @Override
-   public int getDeliveryCount() {
+   public int getDeliveryCount()
+   {
       return deliveryCount.get();
    }
 
    @Override
-   public void setDeliveryCount(final int deliveryCount) {
+   public void setDeliveryCount(final int deliveryCount)
+   {
       this.deliveryCount.set(deliveryCount);
    }
 
    @Override
-   public void incrementDeliveryCount() {
+   public void incrementDeliveryCount()
+   {
       deliveryCount.incrementAndGet();
-      if (isTrace) {
+      if (isTrace)
+      {
          ActiveMQServerLogger.LOGGER.trace("++deliveryCount = " + deliveryCount + " for " + this, new Exception("trace"));
       }
 
    }
 
    @Override
-   public void decrementDeliveryCount() {
+   public void decrementDeliveryCount()
+   {
       deliveryCount.decrementAndGet();
-      if (isTrace) {
+      if (isTrace)
+      {
          ActiveMQServerLogger.LOGGER.trace("--deliveryCount = " + deliveryCount + " for " + this, new Exception("trace"));
       }
    }
 
    @Override
-   public Queue getQueue() {
+   public Queue getQueue()
+   {
       return subscription.getQueue();
    }
 
    @Override
-   public void handled() {
+   public void handled()
+   {
       getQueue().referenceHandled();
    }
 
    @Override
-   public void setAlreadyAcked() {
+   public void setAlreadyAcked()
+   {
       alreadyAcked = true;
    }
 
    @Override
-   public boolean isAlreadyAcked() {
+   public boolean isAlreadyAcked()
+   {
       return alreadyAcked;
    }
 
    @Override
-   public void acknowledge() throws Exception {
+   public void acknowledge() throws Exception
+   {
       subscription.ack(this);
    }
 
@@ -210,12 +217,15 @@ public class PagedReferenceImpl implements PagedReference {
     * @see java.lang.Object#toString()
     */
    @Override
-   public String toString() {
+   public String toString()
+   {
       String msgToString;
-      try {
+      try
+      {
          msgToString = getPagedMessage().toString();
       }
-      catch (Throwable e) {
+      catch (Throwable e)
+      {
          // in case of an exception because of a missing page, we just want toString to return null
          msgToString = "error:" + e.getMessage();
       }
@@ -237,7 +247,8 @@ public class PagedReferenceImpl implements PagedReference {
     * @see org.apache.activemq.artemis.core.server.MessageReference#setConsumerId(java.lang.Long)
     */
    @Override
-   public void setConsumerId(Long consumerID) {
+   public void setConsumerId(Long consumerID)
+   {
       this.consumerId = consumerID;
    }
 
@@ -245,7 +256,8 @@ public class PagedReferenceImpl implements PagedReference {
     * @see org.apache.activemq.artemis.core.server.MessageReference#getConsumerId()
     */
    @Override
-   public Long getConsumerId() {
+   public Long getConsumerId()
+   {
       return this.consumerId;
    }
 