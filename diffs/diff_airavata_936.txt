diff --git a/modules/xbaya-gui/src/main/java/org/apache/airavata/xbaya/appwrapper/HostDescriptionDialog.java b/modules/xbaya-gui/src/main/java/org/apache/airavata/xbaya/appwrapper/HostDescriptionDialog.java
index fa9a25ae5..7921ee8b7 100644
--- a/modules/xbaya-gui/src/main/java/org/apache/airavata/xbaya/appwrapper/HostDescriptionDialog.java
+++ b/modules/xbaya-gui/src/main/java/org/apache/airavata/xbaya/appwrapper/HostDescriptionDialog.java
@@ -1,221 +1,204 @@
-/*
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- *
- */
-
+/*
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ *
+ */
+
 package org.apache.airavata.xbaya.appwrapper;
 
+import java.awt.BorderLayout;
 import java.awt.Color;
+import java.awt.FlowLayout;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 import java.awt.event.KeyAdapter;
 import java.awt.event.KeyEvent;
+import java.awt.event.WindowAdapter;
+import java.awt.event.WindowEvent;
 import java.util.regex.Pattern;
 
-import javax.swing.BorderFactory;
+import javax.swing.GroupLayout;
+import javax.swing.GroupLayout.Alignment;
 import javax.swing.JButton;
-import javax.swing.JCheckBox;
 import javax.swing.JDialog;
 import javax.swing.JLabel;
+import javax.swing.JPanel;
+import javax.swing.JTextField;
+import javax.swing.LayoutStyle.ComponentPlacement;
 
-import org.apache.airavata.common.utils.SwingUtil;
 import org.apache.airavata.commons.gfac.type.HostDescription;
 import org.apache.airavata.registry.api.Registry;
 import org.apache.airavata.registry.api.exception.RegistryException;
-import org.apache.airavata.schemas.gfac.GlobusHostType;
-import org.apache.airavata.schemas.gfac.HostDescriptionType;
-import org.apache.airavata.xbaya.XBayaEngine;
-import org.apache.airavata.xbaya.gui.GridPanel;
-import org.apache.airavata.xbaya.gui.XBayaLabel;
-import org.apache.airavata.xbaya.gui.XBayaTextField;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class HostDescriptionDialog extends JDialog {
 
-	private static final long serialVersionUID = -2910634296292034085L;
-
-	private XBayaEngine engine;
-
-    private XBayaTextField hostIdTextField;
-
-    private XBayaTextField hostAddressTextField;
-
-    private XBayaTextField globusGateKeeperTextField;
-
-    private XBayaTextField GridFTPTextField;
-
+    private static final Logger log = LoggerFactory.getLogger(HostDescriptionDialog.class);
+    
+    private static final long serialVersionUID = 1423293834766468324L;
+    private JTextField txtHostLocation;
+    private JTextField txtHostName;
     private HostDescription hostDescription;
-
-    private boolean hostCreated = false;
-
     private Registry registry;
-
-	private JCheckBox chkGobusHost;
-
-	private XBayaLabel globusGateKeeperLabel;
-
-	private XBayaLabel gridFTPLabel;
-
-    private JLabel lblError;
-
-    private String hostId;
-
     private JButton okButton;
+    private boolean hostCreated = false;
+    private JLabel lblError;
 
     /**
-     * @param engine XBaya workflow engine
-     */
-    public HostDescriptionDialog(XBayaEngine engine) {
-        this.engine = engine;
-        setRegistry(engine.getConfiguration().getJcrComponentRegistry().getRegistry());
-        initGUI();
-    }
-
-    /**
-     * Displays the dialog.
+     * Launch the application.
      */
-    public void open() {
-		setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
-		setVisible(true);
-    }
-
-    public void close() {
-    	setVisible(false);
-    }
-
-    private void ok() {
-        hostId = this.hostIdTextField.getText();
-        String hostAddress = this.hostAddressTextField.getText();
-        String globusGateKeeperEPR = this.globusGateKeeperTextField.getText();
-        String gridFTP = this.GridFTPTextField.getText();
-
-        setHostId(hostId);
-        setHostLocation(hostAddress);
-        if(isGlobusHostType()) {
-        	setGlobusGateKeeperEPR(globusGateKeeperEPR);
-        	setGridFTPEPR(gridFTP);
+    public static void main(String[] args) {
+        try {
+            HostDescriptionDialog dialog = new HostDescriptionDialog(null);
+            dialog.open();
+        } catch (Exception e) {
+            e.printStackTrace();
         }
-
-        saveHostDescription();
-        close();
     }
 
-	private boolean isGlobusHostType() {
-		return getHostDescription().getType() instanceof GlobusHostType;
-	}
-
-    private void setGlobusGateKeeperEPR(String epr) {
-        ((GlobusHostType)hostDescription.getType()).addGlobusGateKeeperEndPoint(epr);
+    public void open() {
+        setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
+        setVisible(true);
     }
 
-    private void setGridFTPEPR(String epr) {
-        ((GlobusHostType)hostDescription.getType()).addGridFTPEndPoint(epr);
+    protected HostDescriptionDialog getDialog() {
+        return this;
     }
 
     /**
-     * Initializes the GUI.
+     * Create the dialog.
      */
-    private void initGUI() {
-    	setBounds(100, 100, 400, 280);
-    	setModal(true);
-        setLocationRelativeTo(null);
-        setTitle("New Host Description");
-        this.hostIdTextField = new XBayaTextField();
-        this.hostAddressTextField = new XBayaTextField();
-        this.globusGateKeeperTextField = new XBayaTextField();
-        this.GridFTPTextField = new XBayaTextField();
-
-        XBayaLabel hostIdLabel = new XBayaLabel("Host ID", this.hostIdTextField);
-        XBayaLabel hostAddressLabel = new XBayaLabel("Host Address", this.hostAddressTextField);
-        globusGateKeeperLabel = new XBayaLabel("Globus Gate Keeper Endpoint", this.globusGateKeeperTextField);
-        gridFTPLabel = new XBayaLabel("Grid FTP Endpoint", this.GridFTPTextField);
-        chkGobusHost=new JCheckBox("Define this host as a Globus host");
-        chkGobusHost.addActionListener(new ActionListener(){
-			@Override
-			public void actionPerformed(ActionEvent arg0) {
-				updateGlobusHostTypeAndControls();
-			}
-        });
-        hostIdTextField.getSwingComponent().addKeyListener(new KeyAdapter() {
+    public HostDescriptionDialog(Registry registry) {
+        addWindowListener(new WindowAdapter() {
             @Override
-            public void keyPressed(KeyEvent e) {
+            public void windowOpened(WindowEvent arg0) {
+                String baseName = "Host";
+                int i = 1;
+                String defaultName = baseName + i;
                 try {
-                    validateDialog();
-                    setError(null);
-                } catch (Exception e1) {
-                    setError(e1.getMessage());
+                    while (getRegistry().getHostDescription(defaultName) != null) {
+                        defaultName = baseName + (++i);
+                    }
+                } catch (RegistryException e) {
+                    log.error("error", e);
                 }
+                txtHostName.setText(defaultName);
+                setHostId(txtHostName.getText());
             }
         });
-        GridPanel infoPanel1 = new GridPanel();
-        infoPanel1.add(hostIdLabel);
-        infoPanel1.add(this.hostIdTextField);
-        infoPanel1.add(hostAddressLabel);
-        infoPanel1.add(this.hostAddressTextField);
-        infoPanel1.add(chkGobusHost);
-        GridPanel infoPanel2 = new GridPanel();
-        infoPanel2.add(globusGateKeeperLabel);
-        infoPanel2.add(globusGateKeeperTextField);
-        infoPanel2.add(gridFTPLabel);
-        infoPanel2.add(GridFTPTextField);
-        SwingUtil.layoutToGrid(infoPanel1.getSwingComponent(), 2, 2, SwingUtil.WEIGHT_NONE, 1);
-        SwingUtil.layoutToGrid(infoPanel2.getSwingComponent(), 2, 2, SwingUtil.WEIGHT_NONE, 1);
-
-        GridPanel infoPanel = new GridPanel();
-
-        infoPanel.add(infoPanel1);
-        infoPanel.add(chkGobusHost);
-        infoPanel.add(infoPanel2);
-        infoPanel.getSwingComponent().setBorder(BorderFactory.createEtchedBorder());
-        SwingUtil.layoutToGrid(infoPanel.getSwingComponent(), 3, 1, SwingUtil.WEIGHT_NONE, 0);
+        setRegistry(registry);
+        initGUI();
+    }
 
-        GridPanel buttonPanel = new GridPanel();
-        lblError = new JLabel();
-        lblError.setForeground(Color.RED);
-        buttonPanel.add(lblError);
-        okButton = new JButton("OK");
-        okButton.addActionListener(new ActionListener() {
-            public void actionPerformed(ActionEvent e) {
-                ok();
+    private void initGUI() {
+        setTitle("New Host Description");
+        setBounds(100, 100, 455, 182);
+        setModal(true);
+        setLocationRelativeTo(null);
+        getContentPane().setLayout(new BorderLayout());
+        {
+            JPanel buttonPane = new JPanel();
+            buttonPane.setLayout(new FlowLayout(FlowLayout.RIGHT));
+            getContentPane().add(buttonPane, BorderLayout.SOUTH);
+            {
+                okButton = new JButton("Save");
+                okButton.addActionListener(new ActionListener() {
+                    public void actionPerformed(ActionEvent e) {
+                        saveHostDescription();
+                        close();
+                    }
+                });
+
+                lblError = new JLabel("");
+                lblError.setForeground(Color.RED);
+                buttonPane.add(lblError);
+                okButton.setEnabled(false);
+                okButton.setActionCommand("OK");
+                buttonPane.add(okButton);
+                getRootPane().setDefaultButton(okButton);
             }
-        });
-
-        buttonPanel.add(okButton);
-
-        JButton cancelButton = new JButton("Cancel");
-        cancelButton.addActionListener(new ActionListener() {
-            public void actionPerformed(ActionEvent e) {
-                close();
+            {
+                JButton cancelButton = new JButton("Cancel");
+                cancelButton.addActionListener(new ActionListener() {
+                    public void actionPerformed(ActionEvent e) {
+                        setHostCreated(false);
+                        close();
+                    }
+                });
+                cancelButton.setActionCommand("Cancel");
+                buttonPane.add(cancelButton);
             }
-        });
-        
-        buttonPanel.add(cancelButton);
-        buttonPanel.layout(1,3,SwingUtil.WEIGHT_NONE,0);
-        buttonPanel.getSwingComponent().setBorder(BorderFactory.createEtchedBorder());
-        
-        getContentPane().add(infoPanel.getSwingComponent());
-        getContentPane().add(buttonPanel.getSwingComponent());
-        
-        SwingUtil.layoutToGrid(getContentPane(), 2, 1, 0, 0);
-        
+        }
+        {
+            JPanel panel = new JPanel();
+            getContentPane().add(panel, BorderLayout.CENTER);
+            JLabel lblHostName = new JLabel("Host id");
+            JLabel lblHostLocationip = new JLabel("Host address");
+            txtHostLocation = new JTextField();
+            txtHostLocation.addKeyListener(new KeyAdapter() {
+                @Override
+                public void keyReleased(KeyEvent e) {
+                    setHostLocation(txtHostLocation.getText());
+                }
+            });
+            txtHostLocation.setColumns(10);
+            txtHostName = new JTextField();
+            txtHostName.addKeyListener(new KeyAdapter() {
+                @Override
+                public void keyReleased(KeyEvent e) {
+                    setHostId(txtHostName.getText());
+                }
+            });
+            txtHostName.setColumns(10);
+            GroupLayout gl_panel = new GroupLayout(panel);
+            gl_panel.setHorizontalGroup(gl_panel.createParallelGroup(Alignment.LEADING).addGroup(
+                    gl_panel.createSequentialGroup()
+                            .addGap(22)
+                            .addGroup(
+                                    gl_panel.createParallelGroup(Alignment.TRAILING).addComponent(lblHostName)
+                                            .addComponent(lblHostLocationip))
+                            .addGap(18)
+                            .addGroup(
+                                    gl_panel.createParallelGroup(Alignment.LEADING, false)
+                                            .addComponent(txtHostLocation)
+                                            .addComponent(txtHostName, GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE))
+                            .addGap(37)));
+            gl_panel.setVerticalGroup(gl_panel.createParallelGroup(Alignment.LEADING).addGroup(
+                    gl_panel.createSequentialGroup()
+                            .addGap(31)
+                            .addGroup(
+                                    gl_panel.createParallelGroup(Alignment.BASELINE)
+                                            .addComponent(txtHostName, GroupLayout.PREFERRED_SIZE,
+                                                    GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
+                                            .addComponent(lblHostName))
+                            .addPreferredGap(ComponentPlacement.RELATED)
+                            .addGroup(
+                                    gl_panel.createParallelGroup(Alignment.BASELINE)
+                                            .addComponent(txtHostLocation, GroupLayout.PREFERRED_SIZE,
+                                                    GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
+                                            .addComponent(lblHostLocationip)).addGap(176)));
+            gl_panel.setAutoCreateGaps(true);
+            gl_panel.setAutoCreateContainerGaps(true);
+            panel.setLayout(gl_panel);
+        }
+        setResizable(false);
         getRootPane().setDefaultButton(okButton);
-        chkGobusHost.setSelected(false);
-        updateGlobusHostTypeAndControls();
     }
 
     public String getHostId() {
@@ -228,7 +211,7 @@ public class HostDescriptionDialog extends JDialog {
     }
 
     public String getHostLocation() {
-        return getHostDescription().getType().getHostName();
+        return getHostDescription().getType().getHostAddress();
     }
 
     public void setHostLocation(String hostLocation) {
@@ -267,13 +250,8 @@ public class HostDescriptionDialog extends JDialog {
         setError(message);
     }
 
-    private void setError(String errorMessage) {
-        if (errorMessage == null || errorMessage.trim().equals("")) {
-            lblError.setText("");
-        } else {
-            lblError.setText(errorMessage.trim());
-        }
-
+    public void close() {
+        getDialog().setVisible(false);
     }
 
     public boolean isHostCreated() {
@@ -286,17 +264,24 @@ public class HostDescriptionDialog extends JDialog {
 
     public HostDescription getHostDescription() {
         if (hostDescription == null) {
-            hostDescription = new HostDescription(GlobusHostType.type);
+            hostDescription = new HostDescription();
         }
         return hostDescription;
     }
 
     public void saveHostDescription() {
-        HostDescription desc = getHostDescription();
-		getRegistry().saveHostDescription(desc);
+        getRegistry().saveHostDescription(getHostDescription());
         setHostCreated(true);
     }
 
+    private void setError(String errorMessage) {
+        if (errorMessage == null || errorMessage.trim().equals("")) {
+            lblError.setText("");
+        } else {
+            lblError.setText(errorMessage.trim());
+        }
+    }
+
     public Registry getRegistry() {
         return registry;
     }
@@ -304,16 +289,4 @@ public class HostDescriptionDialog extends JDialog {
     public void setRegistry(Registry registry) {
         this.registry = registry;
     }
-
-	private void updateGlobusHostTypeAndControls() {
-		if(chkGobusHost.isSelected()) {
-			getHostDescription().getType().changeType(GlobusHostType.type);
-		}else{
-			getHostDescription().getType().changeType(HostDescriptionType.type);
-		}
-		globusGateKeeperLabel.getSwingComponent().setEnabled(isGlobusHostType());
-		globusGateKeeperTextField.setEnabled(isGlobusHostType());
-		gridFTPLabel.getSwingComponent().setEnabled(isGlobusHostType());
-		GridFTPTextField.setEnabled(isGlobusHostType());
-	}
-}
\ No newline at end of file
+}