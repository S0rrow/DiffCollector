diff --git a/artemis-cli/src/main/java/org/apache/activemq/artemis/cli/commands/Create.java b/artemis-cli/src/main/java/org/apache/activemq/artemis/cli/commands/Create.java
index 0c558f8010..30b3d27238 100644
--- a/artemis-cli/src/main/java/org/apache/activemq/artemis/cli/commands/Create.java
+++ b/artemis-cli/src/main/java/org/apache/activemq/artemis/cli/commands/Create.java
@@ -1,4 +1,4 @@
-/*
+/**
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements. See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -21,14 +21,14 @@ import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.FileOutputStream;
-import java.io.FilenameFilter;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
-import java.io.PrintWriter;
-import java.io.StringWriter;
-import java.text.DecimalFormat;
+import java.nio.file.Files;
+import java.nio.file.attribute.PosixFilePermission;
+import java.util.Arrays;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Map;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -36,18 +36,23 @@ import java.util.regex.Pattern;
 import io.airlift.airline.Arguments;
 import io.airlift.airline.Command;
 import io.airlift.airline.Option;
-import org.apache.activemq.artemis.cli.commands.util.SyncCalculation;
-import org.apache.activemq.artemis.core.server.cluster.impl.MessageLoadBalancingType;
-import org.apache.activemq.artemis.jlibaio.LibaioContext;
-import org.apache.activemq.artemis.jlibaio.LibaioFile;
-import org.apache.activemq.artemis.utils.FileUtil;
+import org.apache.activemq.artemis.core.asyncio.impl.AsynchronousFileImpl;
+
+import static java.nio.file.attribute.PosixFilePermission.GROUP_EXECUTE;
+import static java.nio.file.attribute.PosixFilePermission.GROUP_READ;
+import static java.nio.file.attribute.PosixFilePermission.GROUP_WRITE;
+import static java.nio.file.attribute.PosixFilePermission.OTHERS_EXECUTE;
+import static java.nio.file.attribute.PosixFilePermission.OTHERS_READ;
+import static java.nio.file.attribute.PosixFilePermission.OWNER_EXECUTE;
+import static java.nio.file.attribute.PosixFilePermission.OWNER_READ;
+import static java.nio.file.attribute.PosixFilePermission.OWNER_WRITE;
 
 /**
  * CLI action that creates a broker instance directory.
  */
 @Command(name = "create", description = "creates a new broker instance")
-public class Create extends InputAbstract {
-
+public class Create extends ActionAbstract
+{
    private static final Integer DEFAULT_PORT = 61616;
 
    private static final Integer AMQP_PORT = 5672;
@@ -58,8 +63,6 @@ public class Create extends InputAbstract {
 
    private static final Integer HTTP_PORT = 8161;
 
-   private static final Integer MQTT_PORT = 1883;
-
    public static final String BIN_ARTEMIS_CMD = "bin/artemis.cmd";
    public static final String BIN_ARTEMIS_SERVICE_EXE = "bin/artemis-service.exe";
    public static final String BIN_ARTEMIS_SERVICE_XML = "bin/artemis-service.xml";
@@ -70,25 +73,15 @@ public class Create extends InputAbstract {
    public static final String ETC_LOGGING_PROPERTIES = "etc/logging.properties";
    public static final String ETC_BOOTSTRAP_XML = "etc/bootstrap.xml";
    public static final String ETC_BROKER_XML = "etc/broker.xml";
-
-   // The JAAS PropertiesLogin module uses role=user(s) syntax, but the basic security uses user=role(s) syntax so we need 2 different files here
    public static final String ETC_ARTEMIS_ROLES_PROPERTIES = "etc/artemis-roles.properties";
-   public static final String ETC_ARTEMIS_ROLES_BASIC_PROPERTIES = "etc/artemis-roles-basic.properties";
-   public static final String ETC_ARTEMIS_ROLES_JAAS_PROPERTIES = "etc/artemis-roles-jaas.properties";
-
    public static final String ETC_ARTEMIS_USERS_PROPERTIES = "etc/artemis-users.properties";
-   public static final String ETC_JAAS_BROKER_SECURITY_SETTINGS_TXT = "etc/jaas-broker-security-settings.txt";
-   public static final String ETC_BASIC_BROKER_SECURITY_SETTINGS_TXT = "etc/basic-broker-security-settings.txt";
-   public static final String ETC_LOGIN_CONFIG = "etc/login.config";
    public static final String ETC_REPLICATED_SETTINGS_TXT = "etc/replicated-settings.txt";
    public static final String ETC_SHARED_STORE_SETTINGS_TXT = "etc/shared-store-settings.txt";
    public static final String ETC_CLUSTER_SECURITY_SETTINGS_TXT = "etc/cluster-security-settings.txt";
    public static final String ETC_CLUSTER_SETTINGS_TXT = "etc/cluster-settings.txt";
    public static final String ETC_CONNECTOR_SETTINGS_TXT = "etc/connector-settings.txt";
-   public static final String ETC_BOOTSTRAP_WEB_SETTINGS_TXT = "etc/bootstrap-web-settings.txt";
-   public static final String ETC_JOURNAL_BUFFER_SETTINGS = "etc/journal-buffer-settings.txt";
 
-   @Arguments(description = "The instance directory to hold the broker's configuration and data.  Path must be writable.", required = true)
+   @Arguments(description = "The instance directory to hold the broker's configuration and data", required = true)
    File directory;
 
    @Option(name = "--host", description = "The host name of the broker (Default: 0.0.0.0 or input if clustered)")
@@ -103,30 +96,18 @@ public class Create extends InputAbstract {
    @Option(name = "--home", description = "Directory where ActiveMQ Artemis is installed")
    File home;
 
-   @Option(name = "--data", description = "Directory where ActiveMQ Data is used. Paths are relative to artemis.instance")
-   String data = "./data";
+   @Option(name = "--data", description = "Directory where ActiveMQ Data is used. Path are relative to artemis.instance/bin")
+   String data = "../data";
 
    @Option(name = "--clustered", description = "Enable clustering")
    boolean clustered = false;
 
-   @Option(name = "--max-hops", description = "Number of hops on the cluster configuration")
-   int maxHops = 0;
-
-   @Option(name = "--message-load-balancing", description = "Load balancing policy on cluster. [ON_DEMAND (default) | STRICT | OFF]")
-   MessageLoadBalancingType messageLoadBalancing = MessageLoadBalancingType.ON_DEMAND;
-
    @Option(name = "--replicated", description = "Enable broker replication")
    boolean replicated = false;
 
    @Option(name = "--shared-store", description = "Enable broker shared store")
    boolean sharedStore = false;
 
-   @Option(name = "--slave", description = "Valid for shared store or replication: this is a slave server?")
-   boolean slave;
-
-   @Option(name = "--failover-on-shutdown", description = "Valid for shared store: will shutdown trigger a failover? (Default: false)")
-   boolean failoverOnShutodwn;
-
    @Option(name = "--cluster-user", description = "The cluster user to use for clustering. (Default: input)")
    String clusterUser = null;
 
@@ -139,15 +120,9 @@ public class Create extends InputAbstract {
    @Option(name = "--java-options", description = "Extra java options to be passed to the profile")
    String javaOptions = "";
 
-   @Option(name = "--allow-anonymous", description = "Enables anonymous configuration on security, opposite of --require-login (Default: input)")
+   @Option(name = "--allow-anonymous", description = "Enables anonymous configuration on security (Default: input)")
    Boolean allowAnonymous = null;
 
-   @Option(name = "--require-login", description = "This will configure security to require user / password, opposite of --allow-anonymous")
-   Boolean requireLogin = null;
-
-   @Option(name = "--no-autotune", description = "Disable auto tuning on the journal.")
-   boolean noAutoTune;
-
    @Option(name = "--user", description = "The username (Default: input)")
    String user;
 
@@ -157,344 +132,293 @@ public class Create extends InputAbstract {
    @Option(name = "--role", description = "The name for the role created (Default: amq)")
    String role;
 
-   @Option(name = "--no-web", description = "This will remove the web server definition from bootstrap.xml")
-   boolean noWeb;
-
-   @Option(name = "--queues", description = "comma separated list of jms queues.")
-   String queues;
-
-   @Option(name = "--topics", description = "comma separated list of jms topics ")
-   String topics;
-
-   @Option(name = "--aio", description = "Force aio journal on the configuration regardless of the library being available or not.")
-   boolean forceLibaio;
-
-   @Option(name = "--broker-security", description = "Use basic, file-based security or JAAS login module for broker security (Default: basic)")
-   String brokerSecurity;
+   @Option(name = "--silent-input", description = "It will disable all the inputs, and it would make a best guess for any required input")
+   boolean silentInput;
 
    boolean IS_WINDOWS;
 
    boolean IS_CYGWIN;
 
-   public String getBrokerSecurity() {
-      if (brokerSecurity == null) {
-         brokerSecurity = "basic";
-      }
-      return brokerSecurity;
-   }
-
-   public void setBrokerSecurity(String security) {
-      this.brokerSecurity = security;
-   }
-
-   public int getMaxHops() {
-      return maxHops;
-   }
-
-   public void setMaxHops(int maxHops) {
-      this.maxHops = maxHops;
-   }
-
-   public boolean isNoWeb() {
-      return noWeb;
-   }
-
-   public void setNoWeb(boolean noWeb) {
-      this.noWeb = noWeb;
-   }
-
-   public int getPortOffset() {
+   public int getPortOffset()
+   {
       return portOffset;
    }
 
-   public void setPortOffset(int portOffset) {
+   public void setPortOffset(int portOffset)
+   {
       this.portOffset = portOffset;
    }
 
-   public MessageLoadBalancingType getMessageLoadBalancing() {
-      return messageLoadBalancing;
-   }
-
-   public void setMessageLoadBalancing(MessageLoadBalancingType messageLoadBalancing) {
-      this.messageLoadBalancing = messageLoadBalancing;
-   }
-
-   public String getJavaOptions() {
+   public String getJavaOptions()
+   {
       return javaOptions;
    }
 
-   public void setJavaOptions(String javaOptions) {
+   public void setJavaOptions(String javaOptions)
+   {
       this.javaOptions = javaOptions;
    }
 
-   public File getInstance() {
+   public File getInstance()
+   {
       return directory;
    }
 
-   public void setInstance(File directory) {
+   public void setInstance(File directory)
+   {
       this.directory = directory;
    }
 
-   public String getHost() {
-      if (host == null) {
+   public String getHost()
+   {
+      if (host == null)
+      {
          host = "0.0.0.0";
       }
       return host;
    }
 
-   public String getHostForClustered() {
-      if (getHost().equals("0.0.0.0")) {
+   public String getHostForClustered()
+   {
+      if (getHost().equals("0.0.0.0"))
+      {
          host = input("--host", "Host " + host + " is not valid for clustering, please provide a valid IP or hostname", "localhost");
       }
 
       return host;
    }
 
-   public void setHost(String host) {
+   public void setHost(String host)
+   {
       this.host = host;
    }
 
-   public boolean isForce() {
+   public boolean isForce()
+   {
       return force;
    }
 
-   public void setForce(boolean force) {
+   public void setForce(boolean force)
+   {
       this.force = force;
    }
 
-   public File getHome() {
-      if (home == null) {
-         home = new File(getBrokerHome());
+   public File getHome()
+   {
+      if (home == null)
+      {
+         home = new File(System.getProperty("artemis.home"));
       }
       return home;
    }
 
-   public void setHome(File home) {
+   public void setHome(File home)
+   {
       this.home = home;
    }
 
-   public boolean isClustered() {
+   public boolean isClustered()
+   {
       return clustered;
    }
 
-   public void setClustered(boolean clustered) {
+   public void setClustered(boolean clustered)
+   {
       this.clustered = clustered;
    }
 
-   public boolean isReplicated() {
+   public boolean isReplicated()
+   {
       return replicated;
    }
 
-   public void setReplicated(boolean replicated) {
+   public void setReplicated(boolean replicated)
+   {
       this.replicated = replicated;
    }
 
-   public boolean isSharedStore() {
+   public boolean isSharedStore()
+   {
       return sharedStore;
    }
 
-   public void setSharedStore(boolean sharedStore) {
+   public void setSharedStore(boolean sharedStore)
+   {
       this.sharedStore = sharedStore;
    }
 
-   public String getEncoding() {
+   public String getEncoding()
+   {
       return encoding;
    }
 
-   public void setEncoding(String encoding) {
+   public void setEncoding(String encoding)
+   {
       this.encoding = encoding;
    }
 
-   public String getData() {
+   public String getData()
+   {
       return data;
    }
 
-   public void setData(String data) {
+   public void setData(String data)
+   {
       this.data = data;
    }
 
-   public String getClusterUser() {
-      if (clusterUser == null) {
+   public String getClusterUser()
+   {
+      if (clusterUser == null)
+      {
          clusterUser = input("--cluster-user", "Please provide the username:", "cluster-admin");
       }
       return clusterUser;
    }
 
-   public void setClusterUser(String clusterUser) {
+   public void setClusterUser(String clusterUser)
+   {
       this.clusterUser = clusterUser;
    }
 
-   public String getClusterPassword() {
-      if (clusterPassword == null) {
+   public String getClusterPassword()
+   {
+      if (clusterPassword == null)
+      {
          clusterPassword = inputPassword("--cluster-password", "Please enter the password:", "password-admin");
       }
       return clusterPassword;
    }
 
-   public void setClusterPassword(String clusterPassword) {
+   public void setClusterPassword(String clusterPassword)
+   {
       this.clusterPassword = clusterPassword;
    }
 
-   public boolean isAllowAnonymous() {
-      if (allowAnonymous == null) {
-         String value = input("--allow-anonymous | --require-login", "Allow anonymous access? (Y/N):", "Y");
+   public boolean isAllowAnonymous()
+   {
+      if (allowAnonymous == null)
+      {
+         String value = input("--allow-anonymous", "Allow anonymous access? (Y/N):", "Y");
          allowAnonymous = Boolean.valueOf(value.toLowerCase().equals("y"));
       }
       return allowAnonymous.booleanValue();
    }
 
-   public void setAllowAnonymous(boolean allowGuest) {
+   public void setAllowAnonymous(boolean allowGuest)
+   {
       this.allowAnonymous = Boolean.valueOf(allowGuest);
    }
 
-   public Boolean getRequireLogin() {
-      if (requireLogin == null) {
-         requireLogin = !isAllowAnonymous();
-      }
-      return requireLogin;
-   }
-
-   public void setRequireLogin(Boolean requireLogin) {
-      this.requireLogin = requireLogin;
-   }
-
-   public String getPassword() {
+   public String getPassword()
+   {
 
-      if (password == null) {
+      if (password == null)
+      {
          this.password = inputPassword("--password", "Please provide the default password:", "admin");
       }
 
       return password;
    }
 
-   public void setPassword(String password) {
+   public void setPassword(String password)
+   {
       this.password = password;
    }
 
-   public String getUser() {
-      if (user == null) {
+   public String getUser()
+   {
+      if (user == null)
+      {
          user = input("--user", "Please provide the default username:", "admin");
       }
       return user;
    }
 
-   public void setUser(String user) {
+   public void setUser(String user)
+   {
       this.user = user;
    }
 
-   public String getRole() {
-      if (role == null) {
+   public String getRole()
+   {
+      if (role == null)
+      {
          role = "amq";
       }
       return role;
    }
 
-   public void setRole(String role) {
+   public void setRole(String role)
+   {
       this.role = role;
    }
 
-   public boolean isSlave() {
-      return slave;
-   }
-
-   public void setSlave(boolean slave) {
-      this.slave = slave;
-   }
-
-   public boolean isFailoverOnShutodwn() {
-      return failoverOnShutodwn;
-   }
-
-   public void setFailoverOnShutodwn(boolean failoverOnShutodwn) {
-      this.failoverOnShutodwn = failoverOnShutodwn;
-   }
-
-   public Boolean getAllowAnonymous() {
-      return allowAnonymous;
-   }
-
-   public void setAllowAnonymous(Boolean allowAnonymous) {
-      this.allowAnonymous = allowAnonymous;
-   }
-
    @Override
-   public Object execute(ActionContext context) throws Exception {
-      this.checkDirectory();
+   public Object execute(ActionContext context) throws Exception
+   {
       super.execute(context);
 
-      try {
+      if (silentInput)
+      {
+         this.disableInputs();
+      }
+
+      try
+      {
          return run(context);
       }
-      catch (Throwable e) {
+      catch (Throwable e)
+      {
          e.printStackTrace(context.err);
          throw e;
       }
    }
 
-   /**
-    * This method is made public for the testsuite
-    */
-   public InputStream openStream(String source) {
+
+   /** This method is made public for the testsuite */
+   public InputStream openStream(String source)
+   {
       return this.getClass().getResourceAsStream(source);
    }
 
-   /**
-    * Checks that the directory provided either exists and is writable or doesn't exist but can be created.
-    */
-   private void checkDirectory() {
-      if (!directory.exists()) {
-         boolean created = directory.mkdirs();
-         if (!created) {
-            throw new RuntimeException(String.format("Unable to create the path '%s'.", directory));
-         }
-      }
-      else if (!directory.canWrite()) {
-         throw new RuntimeException(String.format("The path '%s' is not writable.", directory));
-      }
-   }
 
-   public Object run(ActionContext context) throws Exception {
+   public Object run(ActionContext context) throws Exception
+   {
       IS_WINDOWS = System.getProperty("os.name").toLowerCase().trim().startsWith("win");
       IS_CYGWIN = IS_WINDOWS && "cygwin".equals(System.getenv("OSTYPE"));
 
-      // requireLogin should set alloAnonymous=false, to avoid user's questions
-      if (requireLogin != null && requireLogin.booleanValue()) {
-         allowAnonymous = Boolean.FALSE;
-      }
-
       context.out.println(String.format("Creating ActiveMQ Artemis instance at: %s", directory.getCanonicalPath()));
 
       HashMap<String, String> filters = new HashMap<String, String>();
 
-      filters.put("${master-slave}", isSlave() ? "slave" : "master");
-
-      filters.put("${failover-on-shutdown}", isFailoverOnShutodwn() ? "true" : "false");
-
-      if (replicated) {
+      if (replicated)
+      {
          clustered = true;
-         filters.put("${replicated.settings}", applyFilters(readTextFile(ETC_REPLICATED_SETTINGS_TXT), filters));
+         filters.put("${replicated.settings}", readTextFile(ETC_REPLICATED_SETTINGS_TXT));
       }
-      else {
+      else
+      {
          filters.put("${replicated.settings}", "");
       }
 
-      if (sharedStore) {
+      if (sharedStore)
+      {
          clustered = true;
-         filters.put("${shared-store.settings}", applyFilters(readTextFile(ETC_SHARED_STORE_SETTINGS_TXT), filters));
+         filters.put("${shared-store.settings}", readTextFile(ETC_SHARED_STORE_SETTINGS_TXT));
       }
-      else {
+      else
+      {
          filters.put("${shared-store.settings}", "");
       }
 
-      boolean aio;
-
-      if (IS_WINDOWS || !supportsLibaio()) {
-         aio = false;
+      if (IS_WINDOWS || !AsynchronousFileImpl.isLoaded())
+      {
          filters.put("${journal.settings}", "NIO");
       }
-      else {
-         aio = true;
-         filters.put("${journal.settings}", "ASYNCIO");
+      else
+      {
+         filters.put("${journal.settings}", "AIO");
       }
 
       filters.put("${user}", System.getProperty("user.name", ""));
@@ -502,28 +426,28 @@ public class Create extends InputAbstract {
       filters.put("${amqp.port}", String.valueOf(AMQP_PORT + portOffset));
       filters.put("${stomp.port}", String.valueOf(STOMP_PORT + portOffset));
       filters.put("${hq.port}", String.valueOf(HQ_PORT + portOffset));
-      filters.put("${mqtt.port}", String.valueOf(MQTT_PORT + portOffset));
       filters.put("${http.port}", String.valueOf(HTTP_PORT + portOffset));
       filters.put("${data.dir}", data);
-      filters.put("${max-hops}", String.valueOf(maxHops));
 
-      filters.put("${message-load-balancing}", messageLoadBalancing.toString());
       filters.put("${user}", getUser());
       filters.put("${password}", getPassword());
       filters.put("${role}", getRole());
 
-      if (clustered) {
+
+      if (clustered)
+      {
          filters.put("${host}", getHostForClustered());
          String connectorSettings = readTextFile(ETC_CONNECTOR_SETTINGS_TXT);
          connectorSettings = applyFilters(connectorSettings, filters);
 
          filters.put("${connector-config.settings}", connectorSettings);
          filters.put("${cluster-security.settings}", readTextFile(ETC_CLUSTER_SECURITY_SETTINGS_TXT));
-         filters.put("${cluster.settings}", applyFilters(readTextFile(ETC_CLUSTER_SETTINGS_TXT), filters));
+         filters.put("${cluster.settings}", readTextFile(ETC_CLUSTER_SETTINGS_TXT));
          filters.put("${cluster-user}", getClusterUser());
          filters.put("${cluster-password}", getClusterPassword());
       }
-      else {
+      else
+      {
          filters.put("${host}", getHost());
          filters.put("${connector-config.settings}", "");
          filters.put("${cluster-security.settings}", "");
@@ -532,9 +456,9 @@ public class Create extends InputAbstract {
          filters.put("${cluster-password}", "");
       }
 
-      applyJMSObjects(filters);
 
-      if (home != null) {
+      if (home != null)
+      {
          filters.put("${home}", path(home, false));
       }
       filters.put("${artemis.home}", path(getHome().toString(), false));
@@ -546,48 +470,25 @@ public class Create extends InputAbstract {
       new File(directory, "etc").mkdirs();
       new File(directory, "log").mkdirs();
       new File(directory, "tmp").mkdirs();
-      File dataFolder = new File(directory, "data");
-      dataFolder.mkdirs();
-
-      filters.put("${logmanager}", getLogManager());
+      new File(directory, "data").mkdirs();
 
-      if (javaOptions == null || javaOptions.length() == 0) {
+      if (javaOptions == null || javaOptions.length() == 0)
+      {
          javaOptions = "";
       }
 
       filters.put("${java-opts}", javaOptions);
 
-      if (isAllowAnonymous()) {
-         filters.put("${bootstrap.guest}", "default-user=\"" + getUser() + "\"");
-      }
-      else {
-         filters.put("${bootstrap.guest}", "");
-      }
-
-      if (brokerSecurity != null && brokerSecurity.equalsIgnoreCase("jaas")) {
-         filters.put("${broker-security-settings}", applyFilters(readTextFile(ETC_JAAS_BROKER_SECURITY_SETTINGS_TXT), filters));
-         filters.put("${login-config}", "-Djava.security.auth.login.config=" + path(directory, false) + "/etc/login.config");
-         write(ETC_LOGIN_CONFIG, filters, false);
-         write(ETC_ARTEMIS_ROLES_JAAS_PROPERTIES, filters, false);
-         File file = new File(directory, ETC_ARTEMIS_ROLES_JAAS_PROPERTIES);
-         file.renameTo(new File(directory, ETC_ARTEMIS_ROLES_PROPERTIES));
-      }
-      else {
-         filters.put("${broker-security-settings}", applyFilters(readTextFile(ETC_BASIC_BROKER_SECURITY_SETTINGS_TXT), filters));
-         filters.put("${login-config}", "");
-         write(ETC_ARTEMIS_ROLES_BASIC_PROPERTIES, filters, false);
-         File file = new File(directory, ETC_ARTEMIS_ROLES_BASIC_PROPERTIES);
-         file.renameTo(new File(directory, ETC_ARTEMIS_ROLES_PROPERTIES));
-      }
-
-      if (IS_WINDOWS) {
+      if (IS_WINDOWS)
+      {
          write(BIN_ARTEMIS_CMD, null, false);
          write(BIN_ARTEMIS_SERVICE_EXE);
          write(BIN_ARTEMIS_SERVICE_XML, filters, false);
          write(ETC_ARTEMIS_PROFILE_CMD, filters, false);
       }
 
-      if (!IS_WINDOWS || IS_CYGWIN) {
+      if (!IS_WINDOWS || IS_CYGWIN)
+      {
          write(BIN_ARTEMIS, null, true);
          makeExec(BIN_ARTEMIS);
          write(BIN_ARTEMIS_SERVICE, null, true);
@@ -598,17 +499,18 @@ public class Create extends InputAbstract {
 
       write(ETC_LOGGING_PROPERTIES, null, false);
 
-      if (noWeb) {
-         filters.put("${bootstrap-web-settings}", "");
+      if (isAllowAnonymous())
+      {
+         filters.put("${bootstrap.guest}", "default-user=\"" + getUser() + "\"");
       }
-      else {
-         filters.put("${bootstrap-web-settings}", applyFilters(readTextFile(ETC_BOOTSTRAP_WEB_SETTINGS_TXT), filters));
+      else
+      {
+         filters.put("${bootstrap.guest}", "");
       }
 
-      performAutoTune(filters, aio, dataFolder);
-
       write(ETC_BOOTSTRAP_XML, filters, false);
       write(ETC_BROKER_XML, filters, false);
+      write(ETC_ARTEMIS_ROLES_PROPERTIES, filters, false);
       write(ETC_ARTEMIS_USERS_PROPERTIES, filters, false);
 
       context.out.println("");
@@ -619,10 +521,12 @@ public class Create extends InputAbstract {
       File service = new File(directory, BIN_ARTEMIS_SERVICE);
       context.out.println("");
 
-      if (!IS_WINDOWS || IS_CYGWIN) {
+      if (!IS_WINDOWS || IS_CYGWIN)
+      {
 
          // Does it look like we are on a System V init system?
-         if (new File("/etc/init.d/").isDirectory()) {
+         if (new File("/etc/init.d/").isDirectory())
+         {
             context.out.println("Or you can setup the broker as system service and run it in the background:");
             context.out.println("");
             context.out.println("   sudo ln -s \"%s\" /etc/init.d/".format(service.getCanonicalPath()));
@@ -630,7 +534,8 @@ public class Create extends InputAbstract {
             context.out.println("");
 
          }
-         else {
+         else
+         {
 
             context.out.println("Or you can run the broker in the background using:");
             context.out.println("");
@@ -639,7 +544,8 @@ public class Create extends InputAbstract {
          }
       }
 
-      if (IS_WINDOWS) {
+      if (IS_WINDOWS)
+      {
          service = new File(directory, BIN_ARTEMIS_SERVICE_EXE);
          context.out.println("Or you can setup the broker as Windows service and run it in the background:");
          context.out.println("");
@@ -656,146 +562,49 @@ public class Create extends InputAbstract {
       return null;
    }
 
-   private String getLogManager() throws IOException {
-      String logManager = "";
-      File dir = new File(path(getHome().toString(), false) + "/lib");
-
-      File[] matches = dir.listFiles(new FilenameFilter() {
-         public boolean accept(File dir, String name) {
-            return name.startsWith("jboss-logmanager") && name.endsWith(".jar");
-         }
-      });
-
-      if (matches != null && matches.length > 0) {
-         logManager = matches[0].getName();
-      }
-
-      return logManager;
-   }
-
-   /**
-    * It will create the jms configurations
-    */
-   private void applyJMSObjects(HashMap<String, String> filters) {
-      StringWriter writer = new StringWriter();
-      PrintWriter printWriter = new PrintWriter(writer);
-      printWriter.println();
-
-      for (String str : getQueueList()) {
-         printWriter.println("      <queue name=\"" + str + "\"/>");
-      }
-      for (String str : getTopicList()) {
-         printWriter.println("      <topic name=\"" + str + "\"/>");
-      }
-      filters.put("${jms-list.settings}", writer.toString());
-   }
-
-   private void performAutoTune(HashMap<String, String> filters, boolean aio, File dataFolder) {
-      if (noAutoTune) {
-         filters.put("${journal-buffer.settings}", "");
-      }
-      else {
-         try {
-            int writes = 250;
-            System.out.println("");
-            System.out.println("Auto tuning journal ...");
-
-            long time = SyncCalculation.syncTest(dataFolder, 4096, writes, 5, verbose, aio);
-            long nanoseconds = SyncCalculation.toNanos(time, writes);
-            double writesPerMillisecond = (double) writes / (double) time;
-
-            String writesPerMillisecondStr = new DecimalFormat("###.##").format(writesPerMillisecond);
-
-            HashMap<String, String> syncFilter = new HashMap<String, String>();
-            syncFilter.put("${nanoseconds}", Long.toString(nanoseconds));
-            syncFilter.put("${writesPerMillisecond}", writesPerMillisecondStr);
-
-            System.out.println("done! Your system can make " + writesPerMillisecondStr +
-                                  " writes per millisecond, your journal-buffer-timeout will be " + nanoseconds);
-
-            filters.put("${journal-buffer.settings}", applyFilters(readTextFile(ETC_JOURNAL_BUFFER_SETTINGS), syncFilter));
-
-         }
-         catch (Exception e) {
-            filters.put("${journal-buffer.settings}", "");
-            e.printStackTrace();
-            System.err.println("Couldn't perform sync calculation, using default values");
-         }
-      }
-   }
-
-   private boolean supportsLibaio() {
-      if (forceLibaio) {
-         // forcing libaio
-         return true;
-      }
-      else if (LibaioContext.isLoaded()) {
-         try (LibaioContext context = new LibaioContext(1, true)) {
-            File tmpFile = new File(directory, "validateAIO.bin");
-            boolean supportsLibaio = true;
-            try {
-               LibaioFile file = context.openFile(tmpFile, true);
-               file.close();
-            }
-            catch (Exception e) {
-               supportsLibaio = false;
-            }
-            tmpFile.delete();
-            if (!supportsLibaio) {
-               System.err.println("The filesystem used on " + directory + " doesn't support libAIO and O_DIRECT files, switching journal-type to NIO");
-            }
-            return supportsLibaio;
-         }
-      }
-      else {
-         return false;
-      }
-   }
-
-   private void makeExec(String path) throws IOException {
-      FileUtil.makeExec(new File(directory, path));
-   }
-
-   private String[] getQueueList() {
-      if (queues == null) {
-         return new String[0];
-      }
-      else {
-         return queues.split(",");
-      }
-   }
-
-   private String[] getTopicList() {
-      if (topics == null) {
-         return new String[0];
+   private void makeExec(String path) throws IOException
+   {
+      try
+      {
+         File file = new File(directory, path);
+         Files.setPosixFilePermissions(file.toPath(), new HashSet<PosixFilePermission>(Arrays.asList(
+            OWNER_READ, OWNER_WRITE, OWNER_EXECUTE,
+            GROUP_READ, GROUP_WRITE, GROUP_EXECUTE,
+            OTHERS_READ, OTHERS_EXECUTE
+         )));
       }
-      else {
-         return topics.split(",");
+      catch (Throwable ignore)
+      {
+         // Our best effort was not good enough :)
       }
    }
 
-   String path(String value, boolean unixPaths) throws IOException {
+   String path(String value, boolean unixPaths) throws IOException
+   {
       return path(new File(value), unixPaths);
    }
 
-   private String path(File value, boolean unixPaths) throws IOException {
-      if (unixPaths && IS_CYGWIN) {
+   private String path(File value, boolean unixPaths) throws IOException
+   {
+      if (unixPaths && IS_CYGWIN)
+      {
          return value.getCanonicalPath();
       }
-      else {
+      else
+      {
          return value.getCanonicalPath();
       }
    }
 
-   private void write(String source, HashMap<String, String> filters, boolean unixTarget) throws IOException {
+   private void write(String source, HashMap<String, String> filters, boolean unixTarget) throws IOException
+   {
       write(source, new File(directory, source), filters, unixTarget);
    }
 
-   private void write(String source,
-                      File target,
-                      HashMap<String, String> filters,
-                      boolean unixTarget) throws IOException {
-      if (target.exists() && !force) {
+   private void write(String source, File target, HashMap<String, String> filters, boolean unixTarget) throws IOException
+   {
+      if (target.exists() && !force)
+      {
          throw new RuntimeException(String.format("The file '%s' already exists.  Use --force to overwrite.", target));
       }
 
@@ -807,49 +616,62 @@ public class Create extends InputAbstract {
       content = content.replaceAll("\\r?\\n", Matcher.quoteReplacement(separator));
       ByteArrayInputStream in = new ByteArrayInputStream(content.getBytes(encoding));
 
-      try (FileOutputStream fout = new FileOutputStream(target)) {
+      try (FileOutputStream fout = new FileOutputStream(target))
+      {
          copy(in, fout);
       }
    }
 
-   private String applyFilters(String content, HashMap<String, String> filters) throws IOException {
+   private String applyFilters(String content, HashMap<String, String> filters) throws IOException
+   {
 
-      if (filters != null) {
-         for (Map.Entry<String, String> entry : filters.entrySet()) {
+      if (filters != null)
+      {
+         for (Map.Entry<String, String> entry : filters.entrySet())
+         {
             content = replace(content, entry.getKey(), entry.getValue());
          }
       }
       return content;
    }
 
-   private String readTextFile(String source) throws IOException {
+   private String readTextFile(String source) throws IOException
+   {
       ByteArrayOutputStream out = new ByteArrayOutputStream();
-      try (InputStream in = openStream(source)) {
+      try (InputStream in = openStream(source))
+      {
          copy(in, out);
       }
       return new String(out.toByteArray(), "UTF-8");
    }
 
-   private void write(String source) throws IOException {
+   private void write(String source) throws IOException
+   {
       File target = new File(directory, source);
-      if (target.exists() && !force) {
+      if (target.exists() && !force)
+      {
          throw new RuntimeException(String.format("The file '%s' already exists.  Use --force to overwrite.", target));
       }
-      try (FileOutputStream fout = new FileOutputStream(target)) {
-         try (InputStream in = openStream(source)) {
+      try (FileOutputStream fout = new FileOutputStream(target))
+      {
+         try (InputStream in = openStream(source))
+         {
             copy(in, fout);
          }
       }
    }
 
-   private String replace(String content, String key, String value) {
+   private String replace(String content, String key, String value)
+   {
       return content.replaceAll(Pattern.quote(key), Matcher.quoteReplacement(value));
    }
 
-   private void copy(InputStream is, OutputStream os) throws IOException {
+   private void copy(InputStream is, OutputStream os) throws IOException
+   {
       byte[] buffer = new byte[1024 * 4];
       int c = is.read(buffer);
-      while (c >= 0) {
+      while (c >= 0)
+      {
          os.write(buffer, 0, c);
          c = is.read(buffer);
       }