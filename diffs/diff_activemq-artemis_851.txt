diff --git a/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/QueueControlImpl.java b/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/QueueControlImpl.java
index 4f189216d8..e678ab8b8c 100644
--- a/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/QueueControlImpl.java
+++ b/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/QueueControlImpl.java
@@ -22,6 +22,7 @@ import javax.json.JsonObjectBuilder;
 import javax.management.MBeanAttributeInfo;
 import javax.management.MBeanOperationInfo;
 import javax.management.openmbean.CompositeData;
+import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Date;
@@ -34,32 +35,35 @@ import org.apache.activemq.artemis.api.core.ActiveMQException;
 import org.apache.activemq.artemis.api.core.JsonUtil;
 import org.apache.activemq.artemis.api.core.Message;
 import org.apache.activemq.artemis.api.core.SimpleString;
+import org.apache.activemq.artemis.api.core.management.MessageCounterInfo;
 import org.apache.activemq.artemis.api.core.management.QueueControl;
 import org.apache.activemq.artemis.core.filter.Filter;
 import org.apache.activemq.artemis.core.filter.impl.FilterImpl;
 import org.apache.activemq.artemis.core.management.impl.openmbean.OpenTypeSupport;
+import org.apache.activemq.artemis.core.message.impl.CoreMessage;
 import org.apache.activemq.artemis.core.messagecounter.MessageCounter;
 import org.apache.activemq.artemis.core.messagecounter.impl.MessageCounterHelper;
 import org.apache.activemq.artemis.core.persistence.StorageManager;
 import org.apache.activemq.artemis.core.postoffice.Binding;
+import org.apache.activemq.artemis.core.postoffice.PostOffice;
+import org.apache.activemq.artemis.core.security.CheckType;
+import org.apache.activemq.artemis.core.security.SecurityAuth;
 import org.apache.activemq.artemis.core.security.SecurityStore;
 import org.apache.activemq.artemis.core.server.ActiveMQMessageBundle;
-import org.apache.activemq.artemis.core.server.ActiveMQServer;
 import org.apache.activemq.artemis.core.server.Consumer;
 import org.apache.activemq.artemis.core.server.MessageReference;
 import org.apache.activemq.artemis.core.server.Queue;
 import org.apache.activemq.artemis.core.server.ServerConsumer;
 import org.apache.activemq.artemis.core.settings.HierarchicalRepository;
 import org.apache.activemq.artemis.core.settings.impl.AddressSettings;
-import org.apache.activemq.artemis.selector.filter.Filterable;
-import org.apache.activemq.artemis.logs.AuditLogger;
+import org.apache.activemq.artemis.spi.core.protocol.RemotingConnection;
+import org.apache.activemq.artemis.utils.Base64;
 import org.apache.activemq.artemis.utils.JsonLoader;
 import org.apache.activemq.artemis.utils.collections.LinkedListIterator;
 
 public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    public static final int FLUSH_LIMIT = 500;
-
    // Constants -----------------------------------------------------
 
    // Attributes ----------------------------------------------------
@@ -68,7 +72,7 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    private final String address;
 
-   private final ActiveMQServer server;
+   private final PostOffice postOffice;
 
    private final StorageManager storageManager;
    private final SecurityStore securityStore;
@@ -107,14 +111,14 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    public QueueControlImpl(final Queue queue,
                            final String address,
-                           final ActiveMQServer server,
+                           final PostOffice postOffice,
                            final StorageManager storageManager,
                            final SecurityStore securityStore,
                            final HierarchicalRepository<AddressSettings> addressSettingsRepository) throws Exception {
       super(QueueControl.class, storageManager);
       this.queue = queue;
       this.address = address;
-      this.server = server;
+      this.postOffice = postOffice;
       this.storageManager = storageManager;
       this.securityStore = securityStore;
       this.addressSettingsRepository = addressSettingsRepository;
@@ -130,9 +134,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public String getName() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getName(queue);
-      }
       clearIO();
       try {
          return queue.getName().toString();
@@ -143,10 +144,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public String getAddress() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getAddress(queue);
-      }
-
       checkStarted();
 
       return address;
@@ -154,10 +151,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public String getFilter() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getFilter(queue);
-      }
-
       checkStarted();
 
       clearIO();
@@ -172,10 +165,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public boolean isDurable() {
-
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.isDurable(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -188,9 +177,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public String getUser() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getUser(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -205,9 +191,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public String getRoutingType() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getRoutingType(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -221,9 +204,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public boolean isTemporary() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.isTemporary(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -236,9 +216,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public long getMessageCount() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getMessageCount(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -249,23 +226,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
-   public float getProducedRate() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getProducedRate(queue);
-      }
-      checkStarted();
-
-      // This is an attribute, no need to blockOnIO
-      return queue.getRate();
-   }
-
    @Override
    public long getPersistentSize() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getPersistentSize(queue);
-      }
-
       checkStarted();
 
       clearIO();
@@ -278,9 +240,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public long getDurableMessageCount() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getDurableMessageCount(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -293,9 +252,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public long getDurablePersistentSize() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getDurablePersistSize(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -308,9 +264,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public int getConsumerCount() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getConsumerCount(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -323,9 +276,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public int getDeliveringCount() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getDeliveringCount(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -338,9 +288,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public long getDeliveringSize() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getDeliveringSize(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -353,9 +300,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public int getDurableDeliveringCount() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getDurableDeliveringCount(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -368,9 +312,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public long getDurableDeliveringSize() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getDurableDeliveringSize(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -383,9 +324,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public long getMessagesAdded() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getMessagesAdded(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -398,9 +336,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public long getMessagesAcknowledged() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getMessagesAcknowledged(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -411,26 +346,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
-   public long getAcknowledgeAttempts() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getMessagesAcknowledged(queue);
-      }
-      checkStarted();
-
-      clearIO();
-      try {
-         return queue.getAcknowledgeAttempts();
-      } finally {
-         blockOnIO();
-      }
-   }
-
    @Override
    public long getMessagesExpired() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getMessagesExpired(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -443,9 +360,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public long getMessagesKilled() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getMessagesKilled(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -458,9 +372,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public long getID() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getID(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -473,9 +384,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public long getScheduledCount() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getScheduledCount(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -488,9 +396,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public long getScheduledSize() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getScheduledSize(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -503,9 +408,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public long getDurableScheduledCount() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getDurableScheduledCount(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -518,9 +420,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public long getDurableScheduledSize() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getDurableScheduledSize(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -533,9 +432,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public String getDeadLetterAddress() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getDeadLetterAddress(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -553,9 +449,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public String getExpiryAddress() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getExpiryAddress(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -574,9 +467,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public int getMaxConsumers() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getMaxConsumers(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -589,9 +479,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public boolean isPurgeOnNoConsumers() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.isPurgeOnNoConsumers(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -602,26 +489,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
-   public boolean isConfigurationManaged() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.isConfigurationManaged(queue);
-      }
-      checkStarted();
-
-      clearIO();
-      try {
-         return queue.isConfigurationManaged();
-      } finally {
-         blockOnIO();
-      }
-   }
-
    @Override
    public boolean isExclusive() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.isExclusive(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -634,9 +503,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public boolean isLastValue() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.isLastValue(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -649,9 +515,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public Map<String, Object>[] listScheduledMessages() throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listScheduledMessages(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -665,9 +528,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public String listScheduledMessagesAsJSON() throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listScheduledMessagesAsJSON(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -694,9 +554,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public Map<String, Map<String, Object>[]> listDeliveringMessages() throws ActiveMQException {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listDeliveringMessages(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -708,18 +565,15 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
          for (Map.Entry<String, List<MessageReference>> entry : msgs.entrySet()) {
             msgRet.put(entry.getKey(), convertMessagesToMaps(entry.getValue()));
          }
-
          return msgRet;
       } finally {
          blockOnIO();
       }
+
    }
 
    @Override
    public String listDeliveringMessagesAsJSON() throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listDeliveringMessagesAsJSON(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -732,9 +586,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public Map<String, Object>[] listMessages(final String filterStr) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listMessages(queue, filterStr);
-      }
       checkStarted();
 
       clearIO();
@@ -765,9 +616,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public String listMessagesAsJSON(final String filter) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listMessagesAsJSON(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -779,9 +627,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
    }
 
    protected Map<String, Object>[] getFirstMessage() throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getFirstMessage(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -805,18 +650,11 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public String getFirstMessageAsJSON() throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getFirstMessageAsJSON(queue);
-      }
       return toJSON(getFirstMessage());
    }
 
    @Override
    public Long getFirstMessageTimestamp() throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getFirstMessageTimestamp(queue);
-      }
-
       Map<String, Object>[] _message = getFirstMessage();
       if (_message == null || _message.length == 0 || _message[0] == null) {
          return null;
@@ -830,10 +668,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public Long getFirstMessageAge() throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getFirstMessageAge(queue);
-      }
-
       Long firstMessageTimestamp = getFirstMessageTimestamp();
       if (firstMessageTimestamp == null) {
          return null;
@@ -849,113 +683,37 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public long countMessages(final String filterStr) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.countMessages(queue, filterStr);
-      }
-
-      Long value = internalCountMessages(filterStr, null).get(null);
-      return value == null ? 0 : value;
-   }
-
-   @Override
-   public String countMessages(final String filterStr, final String groupByProperty) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.countMessages(queue, filterStr, groupByProperty);
-      }
-
-      return JsonUtil.toJsonObject(internalCountMessages(filterStr, groupByProperty)).toString();
-   }
-
-   private Map<String, Long> internalCountMessages(final String filterStr, final String groupByPropertyStr) throws Exception {
       checkStarted();
 
       clearIO();
-
-      Map<String, Long> result = new HashMap<>();
       try {
          Filter filter = FilterImpl.createFilter(filterStr);
-         SimpleString groupByProperty = SimpleString.toSimpleString(groupByPropertyStr);
-         if (filter == null && groupByProperty == null) {
-            result.put(null, getMessageCount());
+         if (filter == null) {
+            return getMessageCount();
          } else {
             try (LinkedListIterator<MessageReference> iterator = queue.browserIterator()) {
+               int count = 0;
+
                try {
                   while (iterator.hasNext()) {
-                     Message message = iterator.next().getMessage();
-                     internalComputeMessage(result, filter, groupByProperty, message);
+                     MessageReference ref = iterator.next();
+                     if (filter.match(ref.getMessage())) {
+                        count++;
+                     }
                   }
                } catch (NoSuchElementException ignored) {
                   // this could happen through paging browsing
                }
+               return count;
             }
          }
-         return result;
-      } finally {
-         blockOnIO();
-      }
-   }
-
-   @Override
-   public long countDeliveringMessages(final String filterStr) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.countDeliveringMessages(queue, filterStr);
-      }
-
-      Long value = internalCountDeliveryMessages(filterStr, null).get(null);
-      return value == null ? 0 : value;
-   }
-
-   @Override
-   public String countDeliveringMessages(final String filterStr, final String groupByProperty) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.countDeliveringMessages(queue, filterStr, groupByProperty);
-      }
-
-      return JsonUtil.toJsonObject(internalCountDeliveryMessages(filterStr, groupByProperty)).toString();
-   }
-
-   private Map<String, Long> internalCountDeliveryMessages(final String filterStr, final String groupByPropertyStr) throws Exception {
-      checkStarted();
-
-      clearIO();
-
-      Map<String, Long> result = new HashMap<>();
-      try {
-         Filter filter = FilterImpl.createFilter(filterStr);
-         SimpleString groupByProperty = SimpleString.toSimpleString(groupByPropertyStr);
-         if (filter == null && groupByProperty == null) {
-            result.put(null, Long.valueOf(getDeliveringCount()));
-         } else {
-            Map<String, List<MessageReference>> deliveringMessages = queue.getDeliveringMessages();
-            deliveringMessages.forEach((s, messageReferenceList) ->
-                            messageReferenceList.forEach(messageReference ->
-                                    internalComputeMessage(result, filter, groupByProperty, messageReference.getMessage())
-                            ));
-         }
-         return result;
       } finally {
          blockOnIO();
       }
    }
 
-   private void internalComputeMessage(Map<String, Long> result, Filter filter, SimpleString groupByProperty, Message message) {
-      if (filter == null || filter.match(message)) {
-         if (groupByProperty == null) {
-            result.compute(null, (k, v) -> v == null ? 1 : ++v);
-         } else {
-            Object value = message.getObjectProperty(groupByProperty);
-            String valueStr = value == null ? null : value.toString();
-            result.compute(valueStr, (k, v) -> v == null ? 1 : ++v);
-         }
-      }
-   }
-
-
    @Override
    public boolean removeMessage(final long messageID) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.removeMessage(queue, messageID);
-      }
       checkStarted();
 
       clearIO();
@@ -975,9 +733,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public int removeMessages(final int flushLimit, final String filterStr) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.removeMessages(queue, flushLimit, filterStr);
-      }
       checkStarted();
 
       clearIO();
@@ -997,9 +752,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public boolean expireMessage(final long messageID) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.expireMessage(queue, messageID);
-      }
       checkStarted();
 
       clearIO();
@@ -1012,9 +764,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public int expireMessages(final String filterStr) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.expireMessages(queue, filterStr);
-      }
       checkStarted();
 
       clearIO();
@@ -1030,9 +779,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public boolean retryMessage(final long messageID) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.retryMessage(queue, messageID);
-      }
 
       checkStarted();
       clearIO();
@@ -1044,16 +790,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
                return message.getMessageID() == messageID;
             }
 
-            @Override
-            public boolean match(Map<String, String> map) {
-               return false;
-            }
-
-            @Override
-            public boolean match(Filterable filterable) {
-               return false;
-            }
-
             @Override
             public SimpleString getFilterString() {
                return new SimpleString("custom filter for MESSAGEID= messageID");
@@ -1068,9 +804,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public int retryMessages() throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.retryMessages(queue);
-      }
       checkStarted();
       clearIO();
 
@@ -1090,14 +823,11 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
    public boolean moveMessage(final long messageID,
                               final String otherQueueName,
                               final boolean rejectDuplicates) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.moveMessage(queue, messageID, otherQueueName, rejectDuplicates);
-      }
       checkStarted();
 
       clearIO();
       try {
-         Binding binding = server.getPostOffice().getBinding(new SimpleString(otherQueueName));
+         Binding binding = postOffice.getBinding(new SimpleString(otherQueueName));
 
          if (binding == null) {
             throw ActiveMQMessageBundle.BUNDLE.noQueueFound(otherQueueName);
@@ -1120,22 +850,20 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
                            final String filterStr,
                            final String otherQueueName,
                            final boolean rejectDuplicates) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.moveMessages(queue, flushLimit, filterStr, otherQueueName, rejectDuplicates);
-      }
       checkStarted();
 
       clearIO();
       try {
          Filter filter = FilterImpl.createFilter(filterStr);
 
-         Binding binding = server.getPostOffice().getBinding(new SimpleString(otherQueueName));
+         Binding binding = postOffice.getBinding(new SimpleString(otherQueueName));
 
          if (binding == null) {
             throw ActiveMQMessageBundle.BUNDLE.noQueueFound(otherQueueName);
          }
 
          int retValue = queue.moveReferences(flushLimit, filter, binding.getAddress(), rejectDuplicates, binding);
+
          return retValue;
       } finally {
          blockOnIO();
@@ -1152,9 +880,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public int sendMessagesToDeadLetterAddress(final String filterStr) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.sendMessagesToDeadLetterAddress(queue, filterStr);
-      }
       checkStarted();
 
       clearIO();
@@ -1174,21 +899,52 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
                              boolean durable,
                              final String user,
                              final String password) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.sendMessage(queue, null, headers, type, body, durable, user, "****");
-      }
       try {
-         return sendMessage(queue.getAddress(), server, headers, type, body, durable, user, password, queue.getID());
-      } catch (Exception e) {
+         securityStore.check(queue.getAddress(), queue.getName(), CheckType.SEND, new SecurityAuth() {
+            @Override
+            public String getUsername() {
+               return user;
+            }
+
+            @Override
+            public String getPassword() {
+               return password;
+            }
+
+            @Override
+            public RemotingConnection getRemotingConnection() {
+               return null;
+            }
+         });
+         CoreMessage message = new CoreMessage(storageManager.generateID(), 50);
+         if (headers != null) {
+            for (String header : headers.keySet()) {
+               message.putStringProperty(new SimpleString(header), new SimpleString(headers.get(header)));
+            }
+         }
+         message.setType((byte) type);
+         message.setDurable(durable);
+         message.setTimestamp(System.currentTimeMillis());
+         if (body != null) {
+            if (type == Message.TEXT_TYPE) {
+               message.getBodyBuffer().writeNullableSimpleString(new SimpleString(body));
+            } else {
+               message.getBodyBuffer().writeBytes(Base64.decode(body));
+            }
+         }
+         message.setAddress(queue.getAddress());
+         ByteBuffer buffer = ByteBuffer.allocate(8);
+         buffer.putLong(queue.getID());
+         message.putBytesProperty(Message.HDR_ROUTE_TO_IDS, buffer.array());
+         postOffice.route(message, true);
+         return "" + message.getMessageID();
+      } catch (ActiveMQException e) {
          throw new IllegalStateException(e.getMessage());
       }
    }
 
    @Override
    public boolean sendMessageToDeadLetterAddress(final long messageID) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.sendMessageToDeadLetterAddress(queue, messageID);
-      }
       checkStarted();
 
       clearIO();
@@ -1201,9 +957,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public int changeMessagesPriority(final String filterStr, final int newPriority) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.changeMessagesPriority(queue, filterStr, newPriority);
-      }
       checkStarted();
 
       clearIO();
@@ -1221,9 +974,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public boolean changeMessagePriority(final long messageID, final int newPriority) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.changeMessagePriority(queue, messageID, newPriority);
-      }
       checkStarted();
 
       clearIO();
@@ -1239,14 +989,11 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public String listMessageCounter() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listMessageCounter(queue);
-      }
       checkStarted();
 
       clearIO();
       try {
-         return counter.toJSon();
+         return MessageCounterInfo.toJSon(counter);
       } catch (Exception e) {
          throw new IllegalStateException(e);
       } finally {
@@ -1256,9 +1003,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public void resetMessageCounter() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.resetMessageCounter(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -1271,9 +1015,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public String listMessageCounterAsHTML() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listMessageCounterAsHTML(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -1286,9 +1027,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public String listMessageCounterHistory() throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listMessageCounterHistory(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -1301,9 +1039,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public String listMessageCounterHistoryAsHTML() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listMessageCounterHistoryAsHTML(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -1316,9 +1051,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public void pause() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.pause(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -1332,9 +1064,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public void pause(boolean persist) {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.pause(queue, persist);
-      }
       checkStarted();
 
       clearIO();
@@ -1346,9 +1075,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
    }
    @Override
    public void resume() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.resume(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -1361,9 +1087,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public boolean isPaused() throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.isPaused(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -1376,16 +1099,13 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public CompositeData[] browse(int page, int pageSize) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.browse(queue, page, pageSize);
-      }
       String filter = null;
       checkStarted();
 
       clearIO();
       try {
          long index = 0;
-         long start = (long) (page - 1) * pageSize;
+         long start = (page - 1) * pageSize;
          long end = Math.min(page * pageSize, queue.getMessageCount());
 
          ArrayList<CompositeData> c = new ArrayList<>();
@@ -1424,9 +1144,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
    }
    @Override
    public CompositeData[] browse(String filter) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.browse(queue, filter);
-      }
       checkStarted();
 
       clearIO();
@@ -1462,9 +1179,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public void flushExecutor() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.flushExecutor(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -1475,87 +1189,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
-   public void resetAllGroups() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.resetAllGroups(queue);
-      }
-      checkStarted();
-
-      clearIO();
-      try {
-         queue.resetAllGroups();
-      } finally {
-         blockOnIO();
-      }
-   }
-
-   @Override
-   public void resetGroup(String groupID) {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.resetGroup(queue, groupID);
-      }
-      checkStarted();
-
-      clearIO();
-      try {
-         queue.resetGroup(SimpleString.toSimpleString(groupID));
-      } finally {
-         blockOnIO();
-      }
-   }
-
-   @Override
-   public int getGroupCount() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getGroupCount(queue);
-      }
-      checkStarted();
-
-      clearIO();
-      try {
-         return queue.getGroupCount();
-      } finally {
-         blockOnIO();
-      }
-   }
-
-   @Override
-   public String listGroupsAsJSON() throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listGroupsAsJSON(queue);
-      }
-      checkStarted();
-
-      clearIO();
-      try {
-         Map<SimpleString, Consumer> groups = queue.getGroups();
-
-         JsonArrayBuilder jsonArray = JsonLoader.createArrayBuilder();
-
-         for (Map.Entry<SimpleString, Consumer> group : groups.entrySet()) {
-
-            if (group.getValue() instanceof ServerConsumer) {
-               ServerConsumer serverConsumer = (ServerConsumer) group.getValue();
-
-               JsonObjectBuilder obj = JsonLoader.createObjectBuilder().add("groupID", group.getKey().toString()).add("consumerID", serverConsumer.getID()).add("connectionID", serverConsumer.getConnectionID().toString()).add("sessionID", serverConsumer.getSessionID()).add("browseOnly", serverConsumer.isBrowseOnly()).add("creationTime", serverConsumer.getCreationTime());
-
-               jsonArray.add(obj);
-            }
-
-         }
-
-         return jsonArray.build().toString();
-      } finally {
-         blockOnIO();
-      }
-   }
-
    @Override
    public String listConsumersAsJSON() throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listConsumersAsJSON(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -1594,9 +1229,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public void resetMessagesAdded() throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.resetMessagesAdded(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -1610,9 +1242,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public void resetMessagesAcknowledged() throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.resetMessagesAcknowledged(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -1626,9 +1255,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public void resetMessagesExpired() throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.resetMessagesExpired(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -1642,9 +1268,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public void resetMessagesKilled() throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.resetMessagesKilled(queue);
-      }
       checkStarted();
 
       clearIO();
@@ -1663,7 +1286,7 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
    // Private -------------------------------------------------------
 
    private void checkStarted() {
-      if (!server.getPostOffice().isStarted()) {
+      if (!postOffice.isStarted()) {
          throw new IllegalStateException("Broker is not started. Queue can not be managed yet");
       }
    }