diff --git a/repository/src/main/java/org/apache/atlas/repository/graph/GraphToTypedInstanceMapper.java b/repository/src/main/java/org/apache/atlas/repository/graph/GraphToTypedInstanceMapper.java
index ceb601193..1fabafa39 100644
--- a/repository/src/main/java/org/apache/atlas/repository/graph/GraphToTypedInstanceMapper.java
+++ b/repository/src/main/java/org/apache/atlas/repository/graph/GraphToTypedInstanceMapper.java
@@ -17,22 +17,12 @@
  */
 package org.apache.atlas.repository.graph;
 
-import static org.apache.atlas.repository.graph.GraphHelper.string;
-
-import java.math.BigDecimal;
-import java.math.BigInteger;
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
+import com.thinkaurelius.titan.core.TitanGraph;
+import com.tinkerpop.blueprints.Direction;
+import com.tinkerpop.blueprints.Edge;
+import com.tinkerpop.blueprints.Vertex;
 import org.apache.atlas.AtlasException;
 import org.apache.atlas.repository.Constants;
-import org.apache.atlas.repository.graphdb.AtlasEdge;
-import org.apache.atlas.repository.graphdb.AtlasEdgeDirection;
-import org.apache.atlas.repository.graphdb.AtlasGraph;
-import org.apache.atlas.repository.graphdb.AtlasVertex;
 import org.apache.atlas.typesystem.ITypedInstance;
 import org.apache.atlas.typesystem.ITypedReferenceableInstance;
 import org.apache.atlas.typesystem.ITypedStruct;
@@ -48,31 +38,33 @@ import org.apache.atlas.typesystem.types.TypeSystem;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.inject.Singleton;
+import java.math.BigDecimal;
+import java.math.BigInteger;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
 
-@Singleton
 public final class GraphToTypedInstanceMapper {
 
     private static final Logger LOG = LoggerFactory.getLogger(GraphToTypedInstanceMapper.class);
     private static TypeSystem typeSystem = TypeSystem.getInstance();
-    private static final GraphHelper graphHelper = GraphHelper.getInstance();
-
-    private AtlasGraph graph;
+    private final TitanGraph titanGraph;
 
-    public GraphToTypedInstanceMapper(AtlasGraph graph) {
-        this.graph = graph;
+    public GraphToTypedInstanceMapper(TitanGraph titanGraph) {
+        this.titanGraph = titanGraph;
     }
 
-    public ITypedReferenceableInstance mapGraphToTypedInstance(String guid, AtlasVertex instanceVertex)
+    public ITypedReferenceableInstance mapGraphToTypedInstance(String guid, Vertex instanceVertex)
         throws AtlasException {
 
         LOG.debug("Mapping graph root vertex {} to typed instance for guid {}", instanceVertex, guid);
-        String typeName = GraphHelper.getSingleValuedProperty(instanceVertex, Constants.ENTITY_TYPE_PROPERTY_KEY, String.class);
+        String typeName = instanceVertex.getProperty(Constants.ENTITY_TYPE_PROPERTY_KEY);
         List<String> traits = GraphHelper.getTraitNames(instanceVertex);
-        String state = GraphHelper.getStateAsString(instanceVertex);
 
-        Id id = new Id(guid, (Integer) GraphHelper.getProperty(instanceVertex, Constants.VERSION_PROPERTY_KEY),
-                typeName, state);
+        Id id = new Id(guid, instanceVertex.<Integer>getProperty(Constants.VERSION_PROPERTY_KEY), typeName);
         LOG.debug("Created id {} for instance type {}", id, typeName);
 
         ClassType classType = typeSystem.getDataType(ClassType.class, typeName);
@@ -85,7 +77,7 @@ public final class GraphToTypedInstanceMapper {
         return typedInstance;
     }
 
-    private void mapVertexToInstanceTraits(AtlasVertex instanceVertex, ITypedReferenceableInstance typedInstance,
+    private void mapVertexToInstanceTraits(Vertex instanceVertex, ITypedReferenceableInstance typedInstance,
         List<String> traits) throws AtlasException {
         for (String traitName : traits) {
             LOG.debug("mapping trait {} to instance", traitName);
@@ -94,7 +86,7 @@ public final class GraphToTypedInstanceMapper {
         }
     }
 
-    public void mapVertexToInstance(AtlasVertex instanceVertex, ITypedInstance typedInstance,
+    public void mapVertexToInstance(Vertex instanceVertex, ITypedInstance typedInstance,
         Map<String, AttributeInfo> fields) throws AtlasException {
 
         LOG.debug("Mapping vertex {} to instance {} for fields", instanceVertex, typedInstance.getTypeName(),
@@ -104,12 +96,12 @@ public final class GraphToTypedInstanceMapper {
         }
     }
 
-    private void mapVertexToAttribute(AtlasVertex instanceVertex, ITypedInstance typedInstance,
+
+    private void mapVertexToAttribute(Vertex instanceVertex, ITypedInstance typedInstance,
         AttributeInfo attributeInfo) throws AtlasException {
         LOG.debug("Mapping attributeInfo {}", attributeInfo.name);
         final IDataType dataType = attributeInfo.dataType();
         final String vertexPropertyName = GraphHelper.getQualifiedFieldName(typedInstance, attributeInfo);
-        String relationshipLabel = GraphHelper.getEdgeLabel(typedInstance, attributeInfo);
 
         switch (dataType.getTypeCategory()) {
         case PRIMITIVE:
@@ -117,12 +109,13 @@ public final class GraphToTypedInstanceMapper {
             break;  // add only if vertex has this attribute
 
         case ENUM:
-            Object propertyValue = GraphHelper.getProperty(instanceVertex, vertexPropertyName);
-            if (propertyValue == null) {
+            if (instanceVertex.getProperty(vertexPropertyName) == null) {
                 return;
             }
 
-            typedInstance.set(attributeInfo.name, dataType.convert(propertyValue, Multiplicity.REQUIRED));
+            typedInstance.set(attributeInfo.name,
+                dataType.convert(instanceVertex.<String>getProperty(vertexPropertyName),
+                    Multiplicity.REQUIRED));
             break;
 
         case ARRAY:
@@ -134,9 +127,7 @@ public final class GraphToTypedInstanceMapper {
             break;
 
         case STRUCT:
-            ITypedStruct structInstance = mapVertexToStructInstance(instanceVertex,
-                    (StructType) attributeInfo.dataType(), relationshipLabel, null);
-            typedInstance.set(attributeInfo.name, structInstance);
+            mapVertexToStructInstance(instanceVertex, typedInstance, attributeInfo);
             break;
 
         case TRAIT:
@@ -144,9 +135,9 @@ public final class GraphToTypedInstanceMapper {
             break;
 
         case CLASS:
-            AtlasEdge nullEdge = null;
+            String relationshipLabel = GraphHelper.getEdgeLabel(typedInstance, attributeInfo);
             Object idOrInstance = mapVertexToClassReference(instanceVertex, attributeInfo, relationshipLabel,
-                attributeInfo.dataType(), nullEdge);
+                attributeInfo.dataType());
             if (idOrInstance != null) {
                 typedInstance.set(attributeInfo.name, idOrInstance);
             }
@@ -157,32 +148,26 @@ public final class GraphToTypedInstanceMapper {
         }
     }
 
-    private Object mapVertexToClassReference(AtlasVertex instanceVertex, AttributeInfo attributeInfo,
-            String relationshipLabel, IDataType dataType, AtlasEdge optionalEdge) throws AtlasException {
+    private Object mapVertexToClassReference(Vertex instanceVertex, AttributeInfo attributeInfo,
+        String relationshipLabel, IDataType dataType) throws AtlasException {
         LOG.debug("Finding edge for {} -> label {} ", instanceVertex, relationshipLabel);
-
-        AtlasEdge edge = null;
-        if (optionalEdge == null) {
-            edge = graphHelper.getEdgeForLabel(instanceVertex, relationshipLabel);
-        } else {
-            edge = optionalEdge;
-        }
-
-        if (GraphHelper.elementExists(edge)) {
-            final AtlasVertex referenceVertex = edge.getInVertex();
-            final String guid = GraphHelper.getSingleValuedProperty(referenceVertex, Constants.GUID_PROPERTY_KEY, String.class);
-            LOG.debug("Found vertex {} for label {} with guid {}", referenceVertex, relationshipLabel, guid);
-            if (attributeInfo.isComposite) {
-                //Also, when you retrieve a type's instance, you get the complete object graph of the composites
-                LOG.debug("Found composite, mapping vertex to instance");
-                return mapGraphToTypedInstance(guid, referenceVertex);
-            } else {
-                String state = GraphHelper.getStateAsString(referenceVertex);
-                Id referenceId =
-                        new Id(guid, GraphHelper.getSingleValuedProperty(referenceVertex, Constants.VERSION_PROPERTY_KEY, Integer.class),
-                                dataType.getName(), state);
-                LOG.debug("Found non-composite, adding id {} ", referenceId);
-                return referenceId;
+        Iterator<Edge> results = instanceVertex.getEdges(Direction.OUT, relationshipLabel).iterator();
+        if (results.hasNext()) {
+            final Vertex referenceVertex = results.next().getVertex(Direction.IN);
+            if (referenceVertex != null) {
+                final String guid = referenceVertex.getProperty(Constants.GUID_PROPERTY_KEY);
+                LOG.debug("Found vertex {} for label {} with guid {}", referenceVertex, relationshipLabel, guid);
+                if (attributeInfo.isComposite) {
+                    //Also, when you retrieve a type's instance, you get the complete object graph of the composites
+                    LOG.debug("Found composite, mapping vertex to instance");
+                    return mapGraphToTypedInstance(guid, referenceVertex);
+                } else {
+                    Id referenceId =
+                        new Id(guid, referenceVertex.<Integer>getProperty(Constants.VERSION_PROPERTY_KEY),
+                            dataType.getName());
+                    LOG.debug("Found non-composite, adding id {} ", referenceId);
+                    return referenceId;
+                }
             }
         }
 
@@ -190,24 +175,21 @@ public final class GraphToTypedInstanceMapper {
     }
 
     @SuppressWarnings("unchecked")
-    private void mapVertexToArrayInstance(AtlasVertex<?,?> instanceVertex, ITypedInstance typedInstance,
-            AttributeInfo attributeInfo, String propertyName) throws AtlasException {
+    private void mapVertexToArrayInstance(Vertex instanceVertex, ITypedInstance typedInstance,
+        AttributeInfo attributeInfo, String propertyName) throws AtlasException {
         LOG.debug("mapping vertex {} to array {}", instanceVertex, attributeInfo.name);
-
-        final DataTypes.ArrayType arrayType = (DataTypes.ArrayType) attributeInfo.dataType();
-        final IDataType elementType = arrayType.getElemType();
-
-        List<Object> list = GraphHelper.getArrayElementsProperty(elementType, instanceVertex, propertyName);
-
+        List list = instanceVertex.getProperty(propertyName);
         if (list == null || list.size() == 0) {
             return;
         }
+        DataTypes.ArrayType arrayType = (DataTypes.ArrayType) attributeInfo.dataType();
+        final IDataType elementType = arrayType.getElemType();
 
         String edgeLabel = GraphHelper.EDGE_LABEL_PREFIX + propertyName;
         ArrayList values = new ArrayList();
         for (int index = 0; index < list.size(); index++) {
             values.add(mapVertexToCollectionEntry(instanceVertex, attributeInfo, elementType, list.get(index),
-                    edgeLabel));
+                edgeLabel));
         }
 
         if (values.size() > 0) {
@@ -215,7 +197,7 @@ public final class GraphToTypedInstanceMapper {
         }
     }
 
-    private Object mapVertexToCollectionEntry(AtlasVertex instanceVertex, AttributeInfo attributeInfo,
+    private Object mapVertexToCollectionEntry(Vertex instanceVertex, AttributeInfo attributeInfo,
         IDataType elementType, Object value, String edgeLabel) throws AtlasException {
         switch (elementType.getTypeCategory()) {
         case PRIMITIVE:
@@ -229,10 +211,11 @@ public final class GraphToTypedInstanceMapper {
             break;
 
         case STRUCT:
-            return mapVertexToStructInstance(instanceVertex, (StructType) elementType, edgeLabel, (AtlasEdge) value);
+            return getStructInstanceFromVertex(instanceVertex, elementType, attributeInfo.name, edgeLabel,
+                (String) value);
 
         case CLASS:
-            return mapVertexToClassReference(instanceVertex, attributeInfo, edgeLabel, elementType, (AtlasEdge) value);
+            return mapVertexToClassReference(instanceVertex, attributeInfo, edgeLabel, elementType, (String) value);
 
         default:
             break;
@@ -242,21 +225,21 @@ public final class GraphToTypedInstanceMapper {
     }
 
     @SuppressWarnings("unchecked")
-    private void mapVertexToMapInstance(AtlasVertex<?,?> instanceVertex, ITypedInstance typedInstance,
-            AttributeInfo attributeInfo, final String propertyName) throws AtlasException {
+    private void mapVertexToMapInstance(Vertex instanceVertex, ITypedInstance typedInstance,
+        AttributeInfo attributeInfo, final String propertyName) throws AtlasException {
         LOG.debug("mapping vertex {} to array {}", instanceVertex, attributeInfo.name);
-        List<String> keys = GraphHelper.getListProperty(instanceVertex, propertyName);
+        List<String> keys = instanceVertex.getProperty(propertyName);
         if (keys == null || keys.size() == 0) {
             return;
         }
         DataTypes.MapType mapType = (DataTypes.MapType) attributeInfo.dataType();
         final IDataType valueType = mapType.getValueType();
 
-        HashMap<String,Object> values = new HashMap<>();
+        HashMap values = new HashMap();
         for (String key : keys) {
             final String keyPropertyName = propertyName + "." + key;
             final String edgeLabel = GraphHelper.EDGE_LABEL_PREFIX + keyPropertyName;
-            final Object keyValue = GraphHelper.getMapValueProperty(valueType, instanceVertex, keyPropertyName);
+            final Object keyValue = instanceVertex.getProperty(keyPropertyName);
             Object mapValue = mapVertexToCollectionEntry(instanceVertex, attributeInfo, valueType, keyValue, edgeLabel);
             if (mapValue != null) {
                 values.put(key, mapValue);
@@ -268,91 +251,146 @@ public final class GraphToTypedInstanceMapper {
         }
     }
 
-    private  ITypedStruct mapVertexToStructInstance(AtlasVertex instanceVertex, StructType structType,
-            String relationshipLabel, AtlasEdge optionalEdge) throws AtlasException {
-        LOG.debug("mapping {} to struct {}", string(instanceVertex), relationshipLabel);
-        ITypedStruct structInstance = null;
+    private ITypedStruct getStructInstanceFromVertex(Vertex instanceVertex, IDataType elemType,
+        String attributeName, String relationshipLabel, String edgeId) throws AtlasException {
+        LOG.debug("Finding edge for {} -> label {} ", instanceVertex, relationshipLabel);
+        for (Edge edge : instanceVertex.getEdges(Direction.OUT, relationshipLabel)) {
+            if (edgeId.equals(String.valueOf(edge.getId()))) {
+                Vertex structInstanceVertex = edge.getVertex(Direction.IN);
+                LOG.debug("mapping vertex {} to struct {}", structInstanceVertex, attributeName);
+
+                if (structInstanceVertex != null) {
+                    LOG.debug("Found struct instance vertex {}, mapping to instance {} ", structInstanceVertex,
+                        elemType.getName());
+                    StructType structType = typeSystem.getDataType(StructType.class, elemType.getName());
+                    ITypedStruct structInstance = structType.createInstance();
+                    mapVertexToInstance(structInstanceVertex, structInstance, structType.fieldMapping().fields);
+                    return structInstance;
+                }
 
-        AtlasEdge edge;
-        if (optionalEdge == null) {
-            edge = graphHelper.getEdgeForLabel(instanceVertex, relationshipLabel);
-        } else {
-            edge = optionalEdge;
+                break;
+            }
         }
 
-        if (GraphHelper.elementExists(edge)) {
+        return null;
+    }
+
+    private Object mapVertexToClassReference(Vertex instanceVertex, AttributeInfo attributeInfo,
+        String relationshipLabel, IDataType dataType, String edgeId) throws AtlasException {
+        LOG.debug("Finding edge for {} -> label {} ", instanceVertex, relationshipLabel);
+        for (Edge edge : instanceVertex.getEdges(Direction.OUT, relationshipLabel)) {
+            if (edgeId.equals(String.valueOf(edge.getId()))) {
+                final Vertex referenceVertex = edge.getVertex(Direction.IN);
+                if (referenceVertex != null) {
+                    final String guid = referenceVertex.getProperty(Constants.GUID_PROPERTY_KEY);
+                    LOG.debug("Found vertex {} for label {} with guid {}", referenceVertex, relationshipLabel,
+                        guid);
+                    if (attributeInfo.isComposite) {
+                        //Also, when you retrieve a type's instance, you get the complete object graph of the composites
+                        LOG.debug("Found composite, mapping vertex to instance");
+                        return mapGraphToTypedInstance(guid, referenceVertex);
+                    } else {
+                        Id referenceId =
+                            new Id(guid, referenceVertex.<Integer>getProperty(Constants.VERSION_PROPERTY_KEY),
+                                dataType.getName());
+                        LOG.debug("Found non-composite, adding id {} ", referenceId);
+                        return referenceId;
+                    }
+                }
+
+                break;
+            }
+        }
+
+        return null;
+    }
+
+    private void mapVertexToStructInstance(Vertex instanceVertex, ITypedInstance typedInstance,
+        AttributeInfo attributeInfo) throws AtlasException {
+        LOG.debug("mapping vertex {} to struct {}", instanceVertex, attributeInfo.name);
+        StructType structType = typeSystem.getDataType(StructType.class, attributeInfo.dataType().getName());
+        ITypedStruct structInstance = null;
+
+        String relationshipLabel = GraphHelper.getEdgeLabel(typedInstance, attributeInfo);
+        LOG.debug("Finding edge for {} -> label {} ", instanceVertex, relationshipLabel);
+        final Iterable<Edge> edges = instanceVertex.getEdges(Direction.OUT, relationshipLabel);
+        if (edges.iterator().hasNext()) {
             structInstance = structType.createInstance();
-            AtlasVertex structInstanceVertex = edge.getInVertex();
-            LOG.debug("Found struct instance {}, mapping to instance {} ", string(structInstanceVertex),
-                    structInstance.getTypeName());
-            mapVertexToInstance(structInstanceVertex, structInstance, structType.fieldMapping().fields);
+            typedInstance.set(attributeInfo.name, structInstance);
+        }
 
+        for (Edge edge : edges) {
+            final Vertex structInstanceVertex = edge.getVertex(Direction.IN);
+            if (structInstanceVertex != null) {
+                LOG.debug("Found struct instance vertex {}, mapping to instance {} ", structInstanceVertex,
+                    structInstance.getTypeName());
+                mapVertexToInstance(structInstanceVertex, structInstance, structType.fieldMapping().fields);
+                break;
+            }
         }
-        return structInstance;
     }
 
-    private void mapVertexToTraitInstance(AtlasVertex instanceVertex, ITypedReferenceableInstance typedInstance,
+    private void mapVertexToTraitInstance(Vertex instanceVertex, ITypedReferenceableInstance typedInstance,
         String traitName, TraitType traitType) throws AtlasException {
         ITypedStruct traitInstance = (ITypedStruct) typedInstance.getTrait(traitName);
 
         mapVertexToTraitInstance(instanceVertex, typedInstance.getTypeName(), traitName, traitType, traitInstance);
     }
 
-    private void mapVertexToTraitInstance(AtlasVertex<?,?> instanceVertex, String typedInstanceTypeName, String traitName,
-            TraitType traitType, ITypedStruct traitInstance) throws AtlasException {
+    private void mapVertexToTraitInstance(Vertex instanceVertex, String typedInstanceTypeName, String traitName,
+        TraitType traitType, ITypedStruct traitInstance) throws AtlasException {
         String relationshipLabel = GraphHelper.getTraitLabel(typedInstanceTypeName, traitName);
         LOG.debug("Finding edge for {} -> label {} ", instanceVertex, relationshipLabel);
-        for (AtlasEdge<?,?> edge : instanceVertex.getEdges(AtlasEdgeDirection.OUT, relationshipLabel)) {
-            final AtlasVertex<?,?> traitInstanceVertex = edge.getInVertex();
+        for (Edge edge : instanceVertex.getEdges(Direction.OUT, relationshipLabel)) {
+            final Vertex traitInstanceVertex = edge.getVertex(Direction.IN);
             if (traitInstanceVertex != null) {
                 LOG.debug("Found trait instance vertex {}, mapping to instance {} ", traitInstanceVertex,
-                        traitInstance.getTypeName());
+                    traitInstance.getTypeName());
                 mapVertexToInstance(traitInstanceVertex, traitInstance, traitType.fieldMapping().fields);
                 break;
             }
         }
     }
 
-    private void mapVertexToPrimitive(AtlasVertex<?,?> instanceVertex, ITypedInstance typedInstance,
-            AttributeInfo attributeInfo) throws AtlasException {
+    private void mapVertexToPrimitive(Vertex instanceVertex, ITypedInstance typedInstance,
+        AttributeInfo attributeInfo) throws AtlasException {
         LOG.debug("Adding primitive {} from vertex {}", attributeInfo, instanceVertex);
         final String vertexPropertyName = GraphHelper.getQualifiedFieldName(typedInstance, attributeInfo);
-        if (GraphHelper.getSingleValuedProperty(instanceVertex, vertexPropertyName, Object.class) == null) {
+        if (instanceVertex.getProperty(vertexPropertyName) == null) {
             return;
         }
 
         if (attributeInfo.dataType() == DataTypes.STRING_TYPE) {
-            typedInstance.setString(attributeInfo.name, GraphHelper.getSingleValuedProperty(instanceVertex, vertexPropertyName, String.class));
+            typedInstance.setString(attributeInfo.name, instanceVertex.<String>getProperty(vertexPropertyName));
         } else if (attributeInfo.dataType() == DataTypes.SHORT_TYPE) {
-            typedInstance.setShort(attributeInfo.name, GraphHelper.getSingleValuedProperty(instanceVertex, vertexPropertyName, Short.class));
+            typedInstance.setShort(attributeInfo.name, instanceVertex.<Short>getProperty(vertexPropertyName));
         } else if (attributeInfo.dataType() == DataTypes.INT_TYPE) {
-            typedInstance.setInt(attributeInfo.name, GraphHelper.getSingleValuedProperty(instanceVertex, vertexPropertyName, Integer.class));
+            typedInstance.setInt(attributeInfo.name, instanceVertex.<Integer>getProperty(vertexPropertyName));
         } else if (attributeInfo.dataType() == DataTypes.BIGINTEGER_TYPE) {
-            typedInstance.setBigInt(attributeInfo.name, GraphHelper.getSingleValuedProperty(instanceVertex, vertexPropertyName, BigInteger.class));
+            typedInstance.setBigInt(attributeInfo.name, instanceVertex.<BigInteger>getProperty(vertexPropertyName));
         } else if (attributeInfo.dataType() == DataTypes.BOOLEAN_TYPE) {
-            typedInstance.setBoolean(attributeInfo.name, GraphHelper.getSingleValuedProperty(instanceVertex, vertexPropertyName, Boolean.class));
+            typedInstance.setBoolean(attributeInfo.name, instanceVertex.<Boolean>getProperty(vertexPropertyName));
         } else if (attributeInfo.dataType() == DataTypes.BYTE_TYPE) {
-            typedInstance.setByte(attributeInfo.name, GraphHelper.getSingleValuedProperty(instanceVertex, vertexPropertyName, Byte.class));
+            typedInstance.setByte(attributeInfo.name, instanceVertex.<Byte>getProperty(vertexPropertyName));
         } else if (attributeInfo.dataType() == DataTypes.LONG_TYPE) {
-            typedInstance.setLong(attributeInfo.name, GraphHelper.getSingleValuedProperty(instanceVertex, vertexPropertyName, Long.class));
+            typedInstance.setLong(attributeInfo.name, instanceVertex.<Long>getProperty(vertexPropertyName));
         } else if (attributeInfo.dataType() == DataTypes.FLOAT_TYPE) {
-            typedInstance.setFloat(attributeInfo.name, GraphHelper.getSingleValuedProperty(instanceVertex, vertexPropertyName, Float.class));
+            typedInstance.setFloat(attributeInfo.name, instanceVertex.<Float>getProperty(vertexPropertyName));
         } else if (attributeInfo.dataType() == DataTypes.DOUBLE_TYPE) {
-            typedInstance.setDouble(attributeInfo.name, GraphHelper.getSingleValuedProperty(instanceVertex, vertexPropertyName, Double.class));
+            typedInstance.setDouble(attributeInfo.name, instanceVertex.<Double>getProperty(vertexPropertyName));
         } else if (attributeInfo.dataType() == DataTypes.BIGDECIMAL_TYPE) {
             typedInstance
-            .setBigDecimal(attributeInfo.name, GraphHelper.getSingleValuedProperty(instanceVertex, vertexPropertyName, BigDecimal.class));
+                .setBigDecimal(attributeInfo.name, instanceVertex.<BigDecimal>getProperty(vertexPropertyName));
         } else if (attributeInfo.dataType() == DataTypes.DATE_TYPE) {
-            final Long dateVal = GraphHelper.getSingleValuedProperty(instanceVertex, vertexPropertyName, Long.class);
+            final Long dateVal = instanceVertex.<Long>getProperty(vertexPropertyName);
             typedInstance.setDate(attributeInfo.name, new Date(dateVal));
         }
     }
 
-
     public ITypedInstance getReferredEntity(String edgeId, IDataType<?> referredType) throws AtlasException {
-        final AtlasEdge edge = graph.getEdge(edgeId);
+        final Edge edge = titanGraph.getEdge(edgeId);
         if (edge != null) {
-            final AtlasVertex referredVertex = edge.getInVertex();
+            final Vertex referredVertex = edge.getVertex(Direction.IN);
             if (referredVertex != null) {
                 switch (referredType.getTypeCategory()) {
                 case STRUCT:
@@ -365,7 +403,11 @@ public final class GraphToTypedInstanceMapper {
                     return instance;
                 case CLASS:
                     //TODO isComposite handling for class loads
-                    return GraphHelper.getIdFromVertex(referredType.getName(), referredVertex);
+                    final String guid = referredVertex.getProperty(Constants.GUID_PROPERTY_KEY);
+                    Id referenceId =
+                        new Id(guid, referredVertex.<Integer>getProperty(Constants.VERSION_PROPERTY_KEY),
+                            referredType.getName());
+                    return referenceId;
                 default:
                     throw new UnsupportedOperationException("Loading " + referredType.getTypeCategory() + " is not supported");
                 }