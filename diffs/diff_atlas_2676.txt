diff --git a/repository/src/main/java/org/apache/atlas/repository/store/bootstrap/AtlasTypeDefStoreInitializer.java b/repository/src/main/java/org/apache/atlas/repository/store/bootstrap/AtlasTypeDefStoreInitializer.java
index fa4a480bb..c8c22eb61 100644
--- a/repository/src/main/java/org/apache/atlas/repository/store/bootstrap/AtlasTypeDefStoreInitializer.java
+++ b/repository/src/main/java/org/apache/atlas/repository/store/bootstrap/AtlasTypeDefStoreInitializer.java
@@ -30,7 +30,6 @@ import org.apache.atlas.store.AtlasTypeDefStore;
 import org.apache.atlas.type.AtlasType;
 import org.apache.atlas.type.AtlasTypeRegistry;
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.collections.MapUtils;
 import org.codehaus.jackson.annotate.JsonAutoDetect;
 import org.codehaus.jackson.annotate.JsonIgnoreProperties;
 import org.codehaus.jackson.map.annotate.JsonSerialize;
@@ -86,7 +85,39 @@ public class AtlasTypeDefStoreInitializer {
                     continue;
                 }
 
-                AtlasTypesDef typesToCreate = getTypesToCreate(typesDef, typeRegistry);
+                AtlasTypesDef typesToCreate = new AtlasTypesDef();
+
+                if (CollectionUtils.isNotEmpty(typesDef.getEnumDefs())) {
+                    for (AtlasEnumDef enumDef : typesDef.getEnumDefs()) {
+                        if (!typeRegistry.isRegisteredType(enumDef.getName())) {
+                            typesToCreate.getEnumDefs().add(enumDef);
+                        }
+                    }
+                }
+
+                if (CollectionUtils.isNotEmpty(typesDef.getStructDefs())) {
+                    for (AtlasStructDef structDef : typesDef.getStructDefs()) {
+                        if (!typeRegistry.isRegisteredType(structDef.getName())) {
+                            typesToCreate.getStructDefs().add(structDef);
+                        }
+                    }
+                }
+
+                if (CollectionUtils.isNotEmpty(typesDef.getClassificationDefs())) {
+                    for (AtlasClassificationDef classificationDef : typesDef.getClassificationDefs()) {
+                        if (!typeRegistry.isRegisteredType(classificationDef.getName())) {
+                            typesToCreate.getClassificationDefs().add(classificationDef);
+                        }
+                    }
+                }
+
+                if (CollectionUtils.isNotEmpty(typesDef.getEntityDefs())) {
+                    for (AtlasEntityDef entityDef : typesDef.getEntityDefs()) {
+                        if (!typeRegistry.isRegisteredType(entityDef.getName())) {
+                            typesToCreate.getEntityDefs().add(entityDef);
+                        }
+                    }
+                }
 
                 if (typesToCreate.isEmpty()) {
                     LOG.info("No new type in file {}", typeDefFile.getAbsolutePath());
@@ -98,51 +129,13 @@ public class AtlasTypeDefStoreInitializer {
 
                 typeDefStore.createTypesDef(typesToCreate);
             } catch (Throwable t) {
-                LOG.error("error while registering types in file {}", typeDefFile.getAbsolutePath(), t);
+                LOG.error("error while registering types in file " + typeDefFile.getAbsolutePath(), t);
             }
         }
 
         applyTypePatches(typeDefStore, typeRegistry, typesDirName);
     }
 
-    public static AtlasTypesDef getTypesToCreate(AtlasTypesDef typesDef, AtlasTypeRegistry typeRegistry) {
-        AtlasTypesDef typesToCreate = new AtlasTypesDef();
-
-        if (CollectionUtils.isNotEmpty(typesDef.getEnumDefs())) {
-            for (AtlasEnumDef enumDef : typesDef.getEnumDefs()) {
-                if (!typeRegistry.isRegisteredType(enumDef.getName())) {
-                    typesToCreate.getEnumDefs().add(enumDef);
-                }
-            }
-        }
-
-        if (CollectionUtils.isNotEmpty(typesDef.getStructDefs())) {
-            for (AtlasStructDef structDef : typesDef.getStructDefs()) {
-                if (!typeRegistry.isRegisteredType(structDef.getName())) {
-                    typesToCreate.getStructDefs().add(structDef);
-                }
-            }
-        }
-
-        if (CollectionUtils.isNotEmpty(typesDef.getClassificationDefs())) {
-            for (AtlasClassificationDef classificationDef : typesDef.getClassificationDefs()) {
-                if (!typeRegistry.isRegisteredType(classificationDef.getName())) {
-                    typesToCreate.getClassificationDefs().add(classificationDef);
-                }
-            }
-        }
-
-        if (CollectionUtils.isNotEmpty(typesDef.getEntityDefs())) {
-            for (AtlasEntityDef entityDef : typesDef.getEntityDefs()) {
-                if (!typeRegistry.isRegisteredType(entityDef.getName())) {
-                    typesToCreate.getEntityDefs().add(entityDef);
-                }
-            }
-        }
-
-        return typesToCreate;
-    }
-
     private void applyTypePatches(AtlasTypeDefStore typeDefStore, AtlasTypeRegistry typeRegistry, String typesDirName) {
         String typePatchesDirName = typesDirName + File.separator + "patches";
         File   typePatchesDir     = new File(typePatchesDirName);
@@ -157,10 +150,7 @@ public class AtlasTypeDefStoreInitializer {
         // sort the files by filename
         Arrays.sort(typePatchFiles);
 
-        PatchHandler[] patchHandlers = new PatchHandler[] {
-                new AddAttributePatchHandler(typeDefStore, typeRegistry),
-                new UpdateTypeDefOptionsPatchHandler(typeDefStore, typeRegistry),
-        };
+        PatchHandler[] patchHandlers = new PatchHandler[] { new AddAttributePatchHandler(typeDefStore, typeRegistry) };
 
         Map<String, PatchHandler> patchHandlerRegistry = new HashMap<>();
 
@@ -175,8 +165,6 @@ public class AtlasTypeDefStoreInitializer {
                 continue;
             }
 
-            LOG.info("Applying patches in file {}", typePatchFile.getAbsolutePath());
-
             try {
                 String         jsonStr = new String(Files.readAllBytes(typePatchFile.toPath()), StandardCharsets.UTF_8);
                 TypeDefPatches patches = AtlasType.fromJson(jsonStr, TypeDefPatches.class);
@@ -200,11 +188,12 @@ public class AtlasTypeDefStoreInitializer {
                     try {
                         patchHandler.applyPatch(patch);
                     } catch (AtlasBaseException excp) {
-                        LOG.error("Failed to apply {} patch in file {}. Ignored", patch.getAction(), typePatchFile.getAbsolutePath(), excp);
+                        LOG.error("Failed to apply " + patch.getAction() + " patch in file " +
+                                  typePatchFile.getAbsolutePath() + ". Ignored", excp);
                     }
                 }
             } catch (Throwable t) {
-                LOG.error("Failed to apply patches in file {}. Ignored", typePatchFile.getAbsolutePath(), t);
+                LOG.error("Failed to apply patches in file " + typePatchFile.getAbsolutePath() + ". Ignored", t);
             }
         }
     }
@@ -224,7 +213,6 @@ public class AtlasTypeDefStoreInitializer {
         private String                  updateToVersion;
         private Map<String, Object>     params;
         private List<AtlasAttributeDef> attributeDefs;
-        private Map<String, String>     typeDefOptions;
 
         public String getAction() {
             return action;
@@ -273,14 +261,6 @@ public class AtlasTypeDefStoreInitializer {
         public void setAttributeDefs(List<AtlasAttributeDef> attributeDefs) {
             this.attributeDefs = attributeDefs;
         }
-
-        public Map<String, String> getTypeDefOptions() {
-            return typeDefOptions;
-        }
-
-        public void setTypeDefOptions(Map<String, String> typeDefOptions) {
-            this.typeDefOptions = typeDefOptions;
-        }
     }
 
     /**
@@ -370,80 +350,6 @@ public class AtlasTypeDefStoreInitializer {
                     updatedDef.setTypeVersion(patch.getUpdateToVersion());
 
                     typeDefStore.updateStructDefByName(typeName, updatedDef);
-                } else {
-                    throw new AtlasBaseException(AtlasErrorCode.PATCH_NOT_APPLICABLE_FOR_TYPE,
-                            patch.getAction(), typeDef.getClass().getSimpleName());
-                }
-            } else {
-                LOG.info("patch skipped: typeName={}; applyToVersion={}; updateToVersion={}",
-                        patch.getTypeName(), patch.getApplyToVersion(), patch.getUpdateToVersion());
-            }
-        }
-    }
-
-    class UpdateTypeDefOptionsPatchHandler extends PatchHandler {
-        public UpdateTypeDefOptionsPatchHandler(AtlasTypeDefStore typeDefStore, AtlasTypeRegistry typeRegistry) {
-            super(typeDefStore, typeRegistry, new String[] { "UPDATE_TYPEDEF_OPTIONS" });
-        }
-
-        @Override
-        public void applyPatch(TypeDefPatch patch) throws AtlasBaseException {
-            String           typeName = patch.getTypeName();
-            AtlasBaseTypeDef typeDef  = typeRegistry.getTypeDefByName(typeName);
-
-            if (typeDef == null) {
-                throw new AtlasBaseException(AtlasErrorCode.PATCH_FOR_UNKNOWN_TYPE, patch.getAction(), typeName);
-            }
-
-            if (MapUtils.isEmpty(patch.getTypeDefOptions())) {
-                throw new AtlasBaseException(AtlasErrorCode.PATCH_INVALID_DATA, patch.getAction(), typeName);
-            }
-
-            if (isPatchApplicable(patch, typeDef)) {
-                if (typeDef.getClass().equals(AtlasEntityDef.class)) {
-                    AtlasEntityDef updatedDef = new AtlasEntityDef((AtlasEntityDef)typeDef);
-
-                    if (updatedDef.getOptions() == null) {
-                        updatedDef.setOptions(patch.getTypeDefOptions());
-                    } else {
-                        updatedDef.getOptions().putAll(patch.getTypeDefOptions());
-                    }
-                    updatedDef.setTypeVersion(patch.getUpdateToVersion());
-
-                    typeDefStore.updateEntityDefByName(typeName, updatedDef);
-                } else if (typeDef.getClass().equals(AtlasClassificationDef.class)) {
-                    AtlasClassificationDef updatedDef = new AtlasClassificationDef((AtlasClassificationDef)typeDef);
-
-                    if (updatedDef.getOptions() == null) {
-                        updatedDef.setOptions(patch.getTypeDefOptions());
-                    } else {
-                        updatedDef.getOptions().putAll(patch.getTypeDefOptions());
-                    }
-                    updatedDef.setTypeVersion(patch.getUpdateToVersion());
-
-                    typeDefStore.updateClassificationDefByName(typeName, updatedDef);
-                } else if (typeDef.getClass().equals(AtlasStructDef.class)) {
-                    AtlasStructDef updatedDef = new AtlasStructDef((AtlasStructDef)typeDef);
-
-                    if (updatedDef.getOptions() == null) {
-                        updatedDef.setOptions(patch.getTypeDefOptions());
-                    } else {
-                        updatedDef.getOptions().putAll(patch.getTypeDefOptions());
-                    }
-                    updatedDef.setTypeVersion(patch.getUpdateToVersion());
-
-                    typeDefStore.updateStructDefByName(typeName, updatedDef);
-                } else if (typeDef.getClass().equals(AtlasEnumDef.class)) {
-                    AtlasEnumDef updatedDef = new AtlasEnumDef((AtlasEnumDef)typeDef);
-
-                    if (updatedDef.getOptions() == null) {
-                        updatedDef.setOptions(patch.getTypeDefOptions());
-                    } else {
-                        updatedDef.getOptions().putAll(patch.getTypeDefOptions());
-                    }
-                    updatedDef.setTypeVersion(patch.getUpdateToVersion());
-
-                    typeDefStore.updateEnumDefByName(typeName, updatedDef);
                 } else {
                     throw new AtlasBaseException(AtlasErrorCode.PATCH_NOT_APPLICABLE_FOR_TYPE,
                                                  patch.getAction(), typeDef.getClass().getSimpleName());