diff --git a/test/src/main/java/org/apache/accumulo/test/replication/ReplicationIT.java b/test/src/main/java/org/apache/accumulo/test/replication/ReplicationIT.java
index 467a69bc9a..b87bf044ba 100644
--- a/test/src/main/java/org/apache/accumulo/test/replication/ReplicationIT.java
+++ b/test/src/main/java/org/apache/accumulo/test/replication/ReplicationIT.java
@@ -16,7 +16,6 @@
  */
 package org.apache.accumulo.test.replication;
 
-import static com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly;
 import static java.nio.charset.StandardCharsets.UTF_8;
 
 import java.net.URI;
@@ -107,6 +106,7 @@ import com.google.common.collect.Iterables;
 import com.google.common.collect.Iterators;
 import com.google.common.collect.Multimap;
 import com.google.common.collect.Sets;
+import static com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly;
 import com.google.protobuf.TextFormat;
 
 /**
@@ -124,7 +124,7 @@ public class ReplicationIT extends ConfigurableMacBase {
   @Override
   public void configure(MiniAccumuloConfigImpl cfg, Configuration hadoopCoreSite) {
     // Run the master replication loop run frequently
-    cfg.setProperty(Property.INSTANCE_ZK_TIMEOUT, "15s");
+    cfg.setProperty(Property.INSTANCE_ZK_TIMEOUT, "10s");
     cfg.setProperty(Property.MASTER_REPLICATION_SCAN_INTERVAL, "1s");
     cfg.setProperty(Property.REPLICATION_WORK_ASSIGNMENT_SLEEP, "1s");
     cfg.setProperty(Property.TSERV_WALOG_MAX_SIZE, "1M");
@@ -134,6 +134,7 @@ public class ReplicationIT extends ConfigurableMacBase {
     cfg.setProperty(Property.REPLICATION_WORK_PROCESSOR_DELAY, "1s");
     cfg.setProperty(Property.REPLICATION_WORK_PROCESSOR_PERIOD, "1s");
     cfg.setProperty(Property.TSERV_TOTAL_MUTATION_QUEUE_MAX, "1M");
+    cfg.setProperty(Property.INSTANCE_ZK_TIMEOUT, "5s");
     cfg.setNumTservers(1);
     hadoopCoreSite.set("fs.file.impl", RawLocalFileSystem.class.getName());
   }
@@ -179,7 +180,8 @@ public class ReplicationIT extends ConfigurableMacBase {
 
         StatusSection.getFile(entry.getKey(), buff);
         String file = buff.toString();
-        String tableId = StatusSection.getTableId(entry.getKey());
+        StatusSection.getTableId(entry.getKey(), buff);
+        String tableId = buff.toString();
 
         logs.put(file, tableId);
       }
@@ -313,7 +315,7 @@ public class ReplicationIT extends ConfigurableMacBase {
     Assert.assertTrue("'root' user could not read the replication table",
         conn.securityOperations().hasTablePermission("root", ReplicationTable.NAME, TablePermission.READ));
 
-    Set<String> replRows = new HashSet<>();
+    Set<String> replRows = Sets.newHashSet();
     Scanner scanner;
     attempts = 5;
     while (replRows.isEmpty() && attempts > 0) {
@@ -333,7 +335,7 @@ public class ReplicationIT extends ConfigurableMacBase {
       }
     }
 
-    Set<String> wals = new HashSet<>();
+    Set<String> wals = Sets.newHashSet();
     attempts = 5;
     Instance i = conn.getInstance();
     ZooReaderWriter zk = new ZooReaderWriter(i.getZooKeepers(), i.getZooKeepersSessionTimeOut(), "");