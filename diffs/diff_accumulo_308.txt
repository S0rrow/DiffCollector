diff --git a/core/src/main/java/org/apache/accumulo/core/client/impl/Writer.java b/core/src/main/java/org/apache/accumulo/core/client/impl/Writer.java
index 90691ef270..b8ce516c48 100644
--- a/core/src/main/java/org/apache/accumulo/core/client/impl/Writer.java
+++ b/core/src/main/java/org/apache/accumulo/core/client/impl/Writer.java
@@ -17,7 +17,6 @@
 package org.apache.accumulo.core.client.impl;
 
 import static com.google.common.base.Preconditions.checkArgument;
-import static com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly;
 import static java.nio.charset.StandardCharsets.UTF_8;
 
 import java.util.concurrent.TimeUnit;
@@ -42,19 +41,24 @@ import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import com.google.common.net.HostAndPort;
+import static com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly;
 
 public class Writer {
 
   private static final Logger log = LoggerFactory.getLogger(Writer.class);
 
   private ClientContext context;
-  private String tableId;
+  private Text table;
 
-  public Writer(ClientContext context, String tableId) {
+  public Writer(ClientContext context, Text table) {
     checkArgument(context != null, "context is null");
-    checkArgument(tableId != null, "tableId is null");
+    checkArgument(table != null, "table is null");
     this.context = context;
-    this.tableId = tableId;
+    this.table = table;
+  }
+
+  public Writer(ClientContext context, String table) {
+    this(context, new Text(table));
   }
 
   private static void updateServer(ClientContext context, Mutation m, KeyExtent extent, HostAndPort server) throws TException, NotServingTabletException,
@@ -83,7 +87,7 @@ public class Writer {
       throw new IllegalArgumentException("Can not add empty mutations");
 
     while (true) {
-      TabletLocation tabLoc = TabletLocator.getLocator(context, tableId).locateTablet(context, new Text(m.getRow()), false, true);
+      TabletLocation tabLoc = TabletLocator.getLocator(context, table).locateTablet(context, new Text(m.getRow()), false, true);
 
       if (tabLoc == null) {
         log.trace("No tablet location found for row " + new String(m.getRow(), UTF_8));
@@ -97,15 +101,15 @@ public class Writer {
         return;
       } catch (NotServingTabletException e) {
         log.trace("Not serving tablet, server = " + parsedLocation);
-        TabletLocator.getLocator(context, tableId).invalidateCache(tabLoc.tablet_extent);
+        TabletLocator.getLocator(context, table).invalidateCache(tabLoc.tablet_extent);
       } catch (ConstraintViolationException cve) {
         log.error("error sending update to " + parsedLocation + ": " + cve);
         // probably do not need to invalidate cache, but it does not hurt
-        TabletLocator.getLocator(context, tableId).invalidateCache(tabLoc.tablet_extent);
+        TabletLocator.getLocator(context, table).invalidateCache(tabLoc.tablet_extent);
         throw cve;
       } catch (TException e) {
         log.error("error sending update to " + parsedLocation + ": " + e);
-        TabletLocator.getLocator(context, tableId).invalidateCache(tabLoc.tablet_extent);
+        TabletLocator.getLocator(context, table).invalidateCache(tabLoc.tablet_extent);
       }
 
       sleepUninterruptibly(500, TimeUnit.MILLISECONDS);