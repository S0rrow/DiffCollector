diff --git a/graphdb/common/src/main/java/org/apache/atlas/repository/graphdb/titan/query/TitanGraphQuery.java b/graphdb/common/src/main/java/org/apache/atlas/repository/graphdb/titan/query/TitanGraphQuery.java
index c38f6cc89..f23847a2f 100644
--- a/graphdb/common/src/main/java/org/apache/atlas/repository/graphdb/titan/query/TitanGraphQuery.java
+++ b/graphdb/common/src/main/java/org/apache/atlas/repository/graphdb/titan/query/TitanGraphQuery.java
@@ -17,9 +17,11 @@
  */
 package org.apache.atlas.repository.graphdb.titan.query;
 
-import com.google.common.base.Preconditions;
-import com.google.common.collect.Lists;
-import org.apache.atlas.repository.graphdb.AtlasEdge;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
 import org.apache.atlas.repository.graphdb.AtlasGraph;
 import org.apache.atlas.repository.graphdb.AtlasGraphQuery;
 import org.apache.atlas.repository.graphdb.AtlasVertex;
@@ -30,13 +32,6 @@ import org.apache.atlas.repository.graphdb.titan.query.expr.OrCondition;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Set;
-
 /**
  * Abstract implementation of AtlasGraphQuery that is used by both Titan 0.5.4
  * and Titan 1.0.0.
@@ -89,52 +84,51 @@ import java.util.Set;
  *
  *
  */
-public abstract class TitanGraphQuery<V, E> implements AtlasGraphQuery<V, E> {
+public abstract class TitanGraphQuery<V,E> implements AtlasGraphQuery<V, E> {
 
-    private static final Logger LOG = LoggerFactory.getLogger(TitanGraphQuery.class);
-    protected final AtlasGraph<V, E> graph;
-    private final OrCondition queryCondition = new OrCondition();
-    private final boolean isChildQuery;
+    private final Logger LOG = LoggerFactory.getLogger(TitanGraphQuery.class);
+    protected final AtlasGraph<V,E> graph_;
+    private final OrCondition queryCondition_ = new OrCondition();
+    private final boolean isChildQuery_;
     protected abstract NativeTitanQueryFactory<V, E> getQueryFactory();
 
     /**
-     * Creates a TitanGraphQuery.
+     * Creates a TitanGraphQuery
      *
      * @param graph
      */
-    public TitanGraphQuery(AtlasGraph<V, E> graph) {
-        this.graph = graph;
-        this.isChildQuery = false;
+    public TitanGraphQuery(AtlasGraph<V,E> graph) {
+        graph_ = graph;
+        isChildQuery_ = false;
     }
 
     /**
-     * Creates a TitanGraphQuery.
+     * Creates a TitanGraphQuery
      *
      * @param graph
      * @param isChildQuery
      */
-    public TitanGraphQuery(AtlasGraph<V, E> graph, boolean isChildQuery) {
-        this.graph = graph;
-        this.isChildQuery = isChildQuery;
+    public TitanGraphQuery(AtlasGraph<V,E> graph, boolean isChildQuery) {
+        graph_ = graph;
+        isChildQuery_ = isChildQuery;
     }
 
     @Override
     public AtlasGraphQuery<V, E> has(String propertyKey, Object value) {
-        queryCondition.andWith(new HasPredicate(propertyKey, ComparisionOperator.EQUAL, value));
+        queryCondition_.andWith(new HasPredicate(propertyKey, ComparisionOperator.EQUAL, value));
         return this;
     }
 
     @Override
     public Iterable<AtlasVertex<V, E>> vertices() {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("Executing: " + queryCondition);
-        }
-
-        // Compute the overall result by combining the results of all the AndConditions (nested within OR) together.
+        LOG.debug("Executing: " );
+        LOG.debug(queryCondition_.toString());
+        //compute the overall result by unioning the results from all of the
+        //AndConditions together.
         Set<AtlasVertex<V, E>> result = new HashSet<>();
-        for(AndCondition andExpr : queryCondition.getAndTerms()) {
-            NativeTitanGraphQuery<V, E> andQuery = andExpr.create(getQueryFactory());
-            for(AtlasVertex<V, E> vertex : andQuery.vertices()) {
+        for(AndCondition andExpr : queryCondition_.getAndTerms()) {
+            NativeTitanGraphQuery<V,E> andQuery = andExpr.create(getQueryFactory());
+            for(AtlasVertex<V,E> vertex : andQuery.vertices()) {
                 result.add(vertex);
             }
         }
@@ -142,72 +136,16 @@ public abstract class TitanGraphQuery<V, E> implements AtlasGraphQuery<V, E> {
     }
 
     @Override
-    public Iterable<AtlasEdge<V, E>> edges() {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("Executing: " + queryCondition);
-        }
-
-        // Compute the overall result by combining the results of all the AndConditions (nested within OR) together.
-        Set<AtlasEdge<V, E>> result = new HashSet<>();
-        for(AndCondition andExpr : queryCondition.getAndTerms()) {
-            NativeTitanGraphQuery<V, E> andQuery = andExpr.create(getQueryFactory());
-            for(AtlasEdge<V, E> edge : andQuery.edges()) {
-                result.add(edge);
-            }
-        }
-        return result;
-    }
-
-    @Override
-    public Iterable<AtlasVertex<V, E>> vertices(int limit) {
-        return vertices(0, limit);
-    }
-
-    @Override
-    public Iterable<AtlasVertex<V, E>> vertices(int offset, int limit) {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("Executing: " + queryCondition);
-        }
-
-        Preconditions.checkArgument(offset >= 0, "Offset must be non-negative");
-        Preconditions.checkArgument(limit >= 0, "Limit must be non-negative");
-
-        // Compute the overall result by combining the results of all the AndConditions (nested within OR) together.
-        Set<AtlasVertex<V, E>> result = new HashSet<>();
-        long resultIdx = 0;
-        for(AndCondition andExpr : queryCondition.getAndTerms()) {
-            if (result.size() == limit) {
-                break;
-            }
-
-            NativeTitanGraphQuery<V, E> andQuery = andExpr.create(getQueryFactory());
-            for(AtlasVertex<V, E> vertex : andQuery.vertices(offset + limit)) {
-                if (resultIdx >= offset) {
-                    result.add(vertex);
-
-                    if (result.size() == limit) {
-                        break;
-                    }
-                }
-
-                resultIdx++;
-            }
-        }
-
-        return result;
-    }
-
-    @Override
-    public AtlasGraphQuery<V, E> has(String propertyKey, QueryOperator operator,
+    public AtlasGraphQuery<V, E> has(String propertyKey, ComparisionOperator operator,
             Object value) {
-        queryCondition.andWith(new HasPredicate(propertyKey, operator, value));
+        queryCondition_.andWith(new HasPredicate(propertyKey, operator, value));
         return this;
     }
 
 
     @Override
-    public AtlasGraphQuery<V, E> in(String propertyKey, Collection<?> values) {
-        queryCondition.andWith(new InPredicate(propertyKey, values));
+    public AtlasGraphQuery<V, E> in(String propertyKey, Collection<? extends Object> values) {
+        queryCondition_.andWith(new InPredicate(propertyKey, values));
         return this;
     }
 
@@ -221,31 +159,31 @@ public abstract class TitanGraphQuery<V, E> implements AtlasGraphQuery<V, E> {
         OrCondition overallChildQuery = new OrCondition(false);
 
         for(AtlasGraphQuery<V, E> atlasChildQuery : childQueries) {
-            if (!atlasChildQuery.isChildQuery()) {
+            if(! atlasChildQuery.isChildQuery()) {
                 throw new IllegalArgumentException(atlasChildQuery + " is not a child query");
             }
-            TitanGraphQuery<V, E> childQuery = (TitanGraphQuery<V, E>)atlasChildQuery;
+            TitanGraphQuery<V,E> childQuery = (TitanGraphQuery<V,E>)atlasChildQuery;
             overallChildQuery.orWith(childQuery.getOrCondition());
         }
 
-        queryCondition.andWith(overallChildQuery);
+        queryCondition_.andWith(overallChildQuery);
         return this;
     }
 
     private OrCondition getOrCondition() {
-        return queryCondition;
+        return queryCondition_;
     }
 
     @Override
     public AtlasGraphQuery<V, E> addConditionsFrom(AtlasGraphQuery<V, E> otherQuery) {
 
         TitanGraphQuery<V, E> childQuery = (TitanGraphQuery<V, E>)otherQuery;
-        queryCondition.andWith(childQuery.getOrCondition());
+        queryCondition_.andWith(childQuery.getOrCondition());
         return this;
     }
 
     @Override
     public boolean isChildQuery() {
-        return isChildQuery;
+        return isChildQuery_;
     }
 }