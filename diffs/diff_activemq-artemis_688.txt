diff --git a/artemis-journal/src/main/java/org/apache/activemq/artemis/core/io/buffer/TimedBuffer.java b/artemis-journal/src/main/java/org/apache/activemq/artemis/core/io/buffer/TimedBuffer.java
index 32b15fec9d..d72717a7f6 100644
--- a/artemis-journal/src/main/java/org/apache/activemq/artemis/core/io/buffer/TimedBuffer.java
+++ b/artemis-journal/src/main/java/org/apache/activemq/artemis/core/io/buffer/TimedBuffer.java
@@ -18,25 +18,27 @@ package org.apache.activemq.artemis.core.io.buffer;
 
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
-import java.util.Collections;
+import java.util.LinkedList;
 import java.util.List;
 import java.util.Timer;
 import java.util.TimerTask;
 import java.util.concurrent.Semaphore;
 import java.util.concurrent.atomic.AtomicLong;
-import java.util.concurrent.locks.LockSupport;
 
-import io.netty.buffer.Unpooled;
 import org.apache.activemq.artemis.api.core.ActiveMQBuffer;
+import org.apache.activemq.artemis.api.core.ActiveMQBuffers;
 import org.apache.activemq.artemis.api.core.ActiveMQInterruptedException;
-import org.apache.activemq.artemis.core.buffers.impl.ChannelBufferWrapper;
 import org.apache.activemq.artemis.core.io.IOCallback;
 import org.apache.activemq.artemis.core.journal.EncodingSupport;
+import org.apache.activemq.artemis.core.journal.impl.dataformat.ByteArrayEncoding;
 import org.apache.activemq.artemis.journal.ActiveMQJournalLogger;
 
-public final class TimedBuffer {
+public class TimedBuffer {
    // Constants -----------------------------------------------------
 
+   // The number of tries on sleep before switching to spin
+   public static final int MAX_CHECKS_ON_SLEEP = 20;
+
    // Attributes ----------------------------------------------------
 
    private TimedBufferObserver bufferObserver;
@@ -56,9 +58,10 @@ public final class TimedBuffer {
 
    private List<IOCallback> callbacks;
 
-   private final int timeout;
+   private volatile int timeout;
 
-   private final AtomicLong pendingSyncs = new AtomicLong();
+   // used to measure sync requests. When a sync is requested, it shouldn't take more than timeout to happen
+   private volatile boolean pendingSync = false;
 
    private Thread timerThread;
 
@@ -73,7 +76,7 @@ public final class TimedBuffer {
 
    private final boolean logRates;
 
-   private long bytesFlushed = 0;
+   private final AtomicLong bytesFlushed = new AtomicLong(0);
 
    private final AtomicLong flushesDone = new AtomicLong(0);
 
@@ -81,6 +84,8 @@ public final class TimedBuffer {
 
    private TimerTask logRatesTimerTask;
 
+   private boolean useSleep = true;
+
    // no need to be volatile as every access is synchronized
    private boolean spinning = false;
 
@@ -99,18 +104,27 @@ public final class TimedBuffer {
          logRatesTimer = new Timer(true);
       }
       // Setting the interval for nano-sleeps
-      //prefer off heap buffer to allow further humongous allocations and reduce GC overhead
-      buffer = new ChannelBufferWrapper(Unpooled.directBuffer(size, size));
+
+      buffer = ActiveMQBuffers.fixedBuffer(bufferSize);
 
       buffer.clear();
 
       bufferLimit = 0;
 
-      callbacks = null;
+      callbacks = new ArrayList<IOCallback>();
 
       this.timeout = timeout;
    }
 
+   // for Debug purposes
+   public synchronized boolean isUseSleep() {
+      return useSleep;
+   }
+
+   public synchronized void setUseSleep(boolean useSleep) {
+      this.useSleep = useSleep;
+   }
+
    public synchronized void start() {
       if (started) {
          return;
@@ -119,7 +133,8 @@ public final class TimedBuffer {
       // Need to start with the spin limiter acquired
       try {
          spinLimiter.acquire();
-      } catch (InterruptedException e) {
+      }
+      catch (InterruptedException e) {
          throw new ActiveMQInterruptedException(e);
       }
 
@@ -158,7 +173,8 @@ public final class TimedBuffer {
       while (timerThread.isAlive()) {
          try {
             timerThread.join();
-         } catch (InterruptedException e) {
+         }
+         catch (InterruptedException e) {
             throw new ActiveMQInterruptedException(e);
          }
       }
@@ -201,7 +217,8 @@ public final class TimedBuffer {
 
          if (sizeChecked > remainingInFile) {
             return false;
-         } else {
+         }
+         else {
             // There is enough space in the file for this size
 
             // Need to re-calculate buffer limit
@@ -210,7 +227,8 @@ public final class TimedBuffer {
 
             return true;
          }
-      } else {
+      }
+      else {
          delayFlush = true;
 
          return true;
@@ -218,28 +236,7 @@ public final class TimedBuffer {
    }
 
    public synchronized void addBytes(final ActiveMQBuffer bytes, final boolean sync, final IOCallback callback) {
-      if (!started) {
-         throw new IllegalStateException("TimedBuffer is not started");
-      }
-
-      delayFlush = false;
-
-      //it doesn't modify the reader index of bytes as in the original version
-      final int readableBytes = bytes.readableBytes();
-      final int writerIndex = buffer.writerIndex();
-      buffer.setBytes(writerIndex, bytes, bytes.readerIndex(), readableBytes);
-      buffer.writerIndex(writerIndex + readableBytes);
-
-      if (callbacks == null) {
-         callbacks = new ArrayList<>();
-      }
-      callbacks.add(callback);
-
-      if (sync) {
-         final long currentPendingSyncs = pendingSyncs.get();
-         pendingSyncs.lazySet(currentPendingSyncs + 1);
-         startSpin();
-      }
+      addBytes(new ByteArrayEncoding(bytes.toByteBuffer().array()), sync, callback);
    }
 
    public synchronized void addBytes(final EncodingSupport bytes, final boolean sync, final IOCallback callback) {
@@ -251,14 +248,11 @@ public final class TimedBuffer {
 
       bytes.encode(buffer);
 
-      if (callbacks == null) {
-         callbacks = new ArrayList<>();
-      }
       callbacks.add(callback);
 
       if (sync) {
-         final long currentPendingSyncs = pendingSyncs.get();
-         pendingSyncs.lazySet(currentPendingSyncs + 1);
+         pendingSync = true;
+
          startSpin();
       }
 
@@ -272,49 +266,45 @@ public final class TimedBuffer {
     * force means the Journal is moving to a new file. Any pending write need to be done immediately
     * or data could be lost
     */
-   private void flush(final boolean force) {
+   public void flush(final boolean force) {
       synchronized (this) {
          if (!started) {
             throw new IllegalStateException("TimedBuffer is not started");
          }
 
          if ((force || !delayFlush) && buffer.writerIndex() > 0) {
-            final int pos = buffer.writerIndex();
+            int pos = buffer.writerIndex();
 
-            final ByteBuffer bufferToFlush = bufferObserver.newBuffer(bufferSize, pos);
-            //bufferObserver::newBuffer doesn't necessary return a buffer with limit == pos or limit == bufferSize!!
-            bufferToFlush.limit(pos);
-            //perform memcpy under the hood due to the off heap buffer
-            buffer.getBytes(0, bufferToFlush);
+            if (logRates) {
+               bytesFlushed.addAndGet(pos);
+            }
+
+            ByteBuffer bufferToFlush = bufferObserver.newBuffer(bufferSize, pos);
+
+            // Putting a byteArray on a native buffer is much faster, since it will do in a single native call.
+            // Using bufferToFlush.put(buffer) would make several append calls for each byte
+            // We also transfer the content of this buffer to the native file's buffer
+
+            bufferToFlush.put(buffer.toByteBuffer().array(), 0, pos);
 
-            final List<IOCallback> ioCallbacks = callbacks == null ? Collections.emptyList() : callbacks;
-            bufferObserver.flushBuffer(bufferToFlush, pendingSyncs.get() > 0, ioCallbacks);
+            bufferObserver.flushBuffer(bufferToFlush, pendingSync, callbacks);
 
             stopSpin();
 
-            pendingSyncs.lazySet(0);
+            pendingSync = false;
 
-            callbacks = null;
+            // swap the instance as the previous callback list is being used asynchronously
+            callbacks = new LinkedList<IOCallback>();
 
             buffer.clear();
 
             bufferLimit = 0;
 
-            if (logRates) {
-               logFlushed(pos);
-            }
+            flushesDone.incrementAndGet();
          }
       }
    }
 
-   private void logFlushed(int bytes) {
-      this.bytesFlushed += bytes;
-      //more lightweight than XADD if single writer
-      final long currentFlushesDone = flushesDone.get();
-      //flushesDone::lazySet write-Release bytesFlushed
-      flushesDone.lazySet(currentFlushesDone + 1L);
-   }
-
    // Package protected ---------------------------------------------
 
    // Protected -----------------------------------------------------
@@ -338,21 +328,21 @@ public final class TimedBuffer {
          if (!closed) {
             long now = System.currentTimeMillis();
 
-            final long flushesDone = TimedBuffer.this.flushesDone.get();
-            //flushesDone::get read-Acquire bytesFlushed
-            final long bytesFlushed = TimedBuffer.this.bytesFlushed;
+            long bytesF = bytesFlushed.get();
+            long flushesD = flushesDone.get();
+
             if (lastExecution != 0) {
-               final double rate = 1000 * (double) (bytesFlushed - lastBytesFlushed) / (now - lastExecution);
+               double rate = 1000 * (double) (bytesF - lastBytesFlushed) / (now - lastExecution);
                ActiveMQJournalLogger.LOGGER.writeRate(rate, (long) (rate / (1024 * 1024)));
-               final double flushRate = 1000 * (double) (flushesDone - lastFlushesDone) / (now - lastExecution);
+               double flushRate = 1000 * (double) (flushesD - lastFlushesDone) / (now - lastExecution);
                ActiveMQJournalLogger.LOGGER.flushRate(flushRate);
             }
 
             lastExecution = now;
 
-            lastBytesFlushed = bytesFlushed;
+            lastBytesFlushed = bytesF;
 
-            lastFlushesDone = flushesDone;
+            lastFlushesDone = flushesD;
          }
       }
 
@@ -368,40 +358,87 @@ public final class TimedBuffer {
 
       private volatile boolean closed = false;
 
-      @Override
+      int checks = 0;
+      int failedChecks = 0;
+      long timeBefore = 0;
+
+      final int sleepMillis = timeout / 1000000; // truncates
+      final int sleepNanos = timeout % 1000000;
+
       public void run() {
-         int waitTimes = 0;
          long lastFlushTime = 0;
-         long estimatedOptimalBatch = Runtime.getRuntime().availableProcessors();
-         final Semaphore spinLimiter = TimedBuffer.this.spinLimiter;
-         final long timeout = TimedBuffer.this.timeout;
 
          while (!closed) {
-            boolean flushed = false;
-            final long currentPendingSyncs = pendingSyncs.get();
-
-            if (currentPendingSyncs > 0) {
-               if (bufferObserver != null) {
-                  final boolean checkpoint = System.nanoTime() > lastFlushTime + timeout;
-                  if (checkpoint || currentPendingSyncs >= estimatedOptimalBatch) {
-                     flush();
-                     if (checkpoint) {
-                        estimatedOptimalBatch = currentPendingSyncs;
-                     } else {
-                        estimatedOptimalBatch = Math.max(estimatedOptimalBatch, currentPendingSyncs);
-                     }
-                     lastFlushTime = System.nanoTime();
-                     //a flush has been requested
-                     flushed = true;
-                  }
+            // We flush on the timer if there are pending syncs there and we've waited at least one
+            // timeout since the time of the last flush.
+            // Effectively flushing "resets" the timer
+            // On the timeout verification, notice that we ignore the timeout check if we are using sleep
+
+            if (pendingSync) {
+               if (isUseSleep()) {
+                  // if using sleep, we will always flush
+                  flush();
+                  lastFlushTime = System.nanoTime();
                }
+               else if (bufferObserver != null && System.nanoTime() > lastFlushTime + timeout) {
+                  // if not using flush we will spin and do the time checks manually
+                  flush();
+                  lastFlushTime = System.nanoTime();
+               }
+
             }
 
-            if (flushed) {
-               waitTimes = 0;
-            } else {
-               //instead of interruptible sleeping, perform progressive parks depending on the load
-               waitTimes = TimedBuffer.wait(waitTimes, spinLimiter);
+            sleepIfPossible();
+
+            try {
+               spinLimiter.acquire();
+
+               Thread.yield();
+
+               spinLimiter.release();
+            }
+            catch (InterruptedException e) {
+               throw new ActiveMQInterruptedException(e);
+            }
+         }
+      }
+
+      /**
+       * We will attempt to use sleep only if the system supports nano-sleep
+       * we will on that case verify up to MAX_CHECKS if nano sleep is behaving well.
+       * if more than 50% of the checks have failed we will cancel the sleep and just use regular spin
+       */
+      private void sleepIfPossible() {
+         if (isUseSleep()) {
+            if (checks < MAX_CHECKS_ON_SLEEP) {
+               timeBefore = System.nanoTime();
+            }
+
+            try {
+               sleep(sleepMillis, sleepNanos);
+            }
+            catch (InterruptedException e) {
+               throw new ActiveMQInterruptedException(e);
+            }
+            catch (Exception e) {
+               setUseSleep(false);
+               ActiveMQJournalLogger.LOGGER.warn(e.getMessage() + ", disabling sleep on TimedBuffer, using spin now", e);
+            }
+
+            if (checks < MAX_CHECKS_ON_SLEEP) {
+               long realTimeSleep = System.nanoTime() - timeBefore;
+
+               // I'm letting the real time to be up to 50% than the requested sleep.
+               if (realTimeSleep > timeout * 1.5) {
+                  failedChecks++;
+               }
+
+               if (++checks >= MAX_CHECKS_ON_SLEEP) {
+                  if (failedChecks > MAX_CHECKS_ON_SLEEP * 0.5) {
+                     ActiveMQJournalLogger.LOGGER.debug("Thread.sleep with nano seconds is not working as expected, Your kernel possibly doesn't support real time. the Journal TimedBuffer will spin for timeouts");
+                     setUseSleep(false);
+                  }
+               }
             }
          }
       }
@@ -411,33 +448,15 @@ public final class TimedBuffer {
       }
    }
 
-   private static int wait(int waitTimes, Semaphore spinLimiter) {
-      if (waitTimes < 10) {
-         //doesn't make sense to spin loop here, because of the lock around flush/addBytes operations!
-         Thread.yield();
-         waitTimes++;
-      } else if (waitTimes < 20) {
-         LockSupport.parkNanos(1L);
-         waitTimes++;
-      } else if (waitTimes < 50) {
-         LockSupport.parkNanos(10L);
-         waitTimes++;
-      } else if (waitTimes < 100) {
-         LockSupport.parkNanos(100L);
-         waitTimes++;
-      } else if (waitTimes < 1000) {
-         LockSupport.parkNanos(1000L);
-         waitTimes++;
-      } else {
-         LockSupport.parkNanos(100_000L);
-         try {
-            spinLimiter.acquire();
-            spinLimiter.release();
-         } catch (InterruptedException e) {
-            throw new ActiveMQInterruptedException(e);
-         }
-      }
-      return waitTimes;
+   /**
+    * Sub classes (tests basically) can use this to override how the sleep is being done
+    *
+    * @param sleepMillis
+    * @param sleepNanos
+    * @throws InterruptedException
+    */
+   protected void sleep(int sleepMillis, int sleepNanos) throws InterruptedException {
+      Thread.sleep(sleepMillis, sleepNanos);
    }
 
    /**
@@ -449,7 +468,8 @@ public final class TimedBuffer {
             // We acquire the spinLimiter semaphore - this prevents the timer flush thread unnecessarily spinning
             // when the buffer is inactive
             spinLimiter.acquire();
-         } catch (InterruptedException e) {
+         }
+         catch (InterruptedException e) {
             throw new ActiveMQInterruptedException(e);
          }
 