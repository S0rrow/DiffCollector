diff --git a/test/src/test/java/org/apache/accumulo/test/MultiTableBatchWriterTest.java b/test/src/test/java/org/apache/accumulo/test/MultiTableBatchWriterTest.java
index 9ee1e6e277..c5290e465d 100644
--- a/test/src/test/java/org/apache/accumulo/test/MultiTableBatchWriterTest.java
+++ b/test/src/test/java/org/apache/accumulo/test/MultiTableBatchWriterTest.java
@@ -340,8 +340,7 @@ public class MultiTableBatchWriterTest {
 
     TCredentials creds = CredentialHelper.create("root", password, instance.getInstanceID());
     MultiTableBatchWriter mtbw = new MultiTableBatchWriterImpl(instance, creds, config, 60, TimeUnit.SECONDS);
-    boolean mutationsRejected = false;
-    
+
     try {
       final String table1 = "testTableDelete_table1", table2 = "testTableDelete_table2";
 
@@ -365,27 +364,19 @@ public class MultiTableBatchWriterTest {
       m2.put("col1", "", "val1");
       m2.put("col2", "", "val2");
 
-      try {
-        bw1.addMutation(m2);
-        bw2.addMutation(m2);
-      } catch (MutationsRejectedException e) {
-        // Pass - Mutations might flush immediately
-        mutationsRejected = true;
-      }
+      bw1.addMutation(m2);
+      bw2.addMutation(m2);
 
     } finally {
       if (null != mtbw) {
         try {
-          // Mutations might have flushed before the table offline occurred
           mtbw.close();
+          Assert.fail("Should not be able to close batch writers");
         } catch (MutationsRejectedException e) {
           // Pass
-          mutationsRejected = true;
         }
       }
     }
-    
-    Assert.assertTrue("Expected mutations to be rejected.", mutationsRejected);
   }
 
   @Test
@@ -398,7 +389,6 @@ public class MultiTableBatchWriterTest {
 
     TCredentials creds = CredentialHelper.create("root", password, instance.getInstanceID());
     MultiTableBatchWriter mtbw = new MultiTableBatchWriterImpl(instance, creds, config, 60, TimeUnit.SECONDS);
-    boolean mutationsRejected = false;
 
     try {
       final String table1 = "testOfflineTable_table1", table2 = "testOfflineTable_table2";
@@ -423,26 +413,19 @@ public class MultiTableBatchWriterTest {
       m2.put("col1", "", "val1");
       m2.put("col2", "", "val2");
 
-      try {
-        bw1.addMutation(m2);
-        bw2.addMutation(m2);
-      } catch (MutationsRejectedException e) {
-        // Pass -- Mutations might flush immediately and fail because of offline table
-        mutationsRejected = true;
-      }
+      bw1.addMutation(m2);
+      bw2.addMutation(m2);
     } finally {
       if (null != mtbw) {
         try {
-          // Mutations might have flushed before the table offline occurred
           mtbw.close();
+          Assert.fail("Should not be able to close batch writers");
         } catch (MutationsRejectedException e) {
           // Pass
-          mutationsRejected = true;
         }
       }
+
     }
-    
-    Assert.assertTrue("Expected mutations to be rejected.", mutationsRejected);
   }
 
   @Test
@@ -455,7 +438,6 @@ public class MultiTableBatchWriterTest {
     
     TCredentials creds = CredentialHelper.create("root", password, instance.getInstanceID());
     MultiTableBatchWriter mtbw = new MultiTableBatchWriterImpl(instance, creds, config, 60, TimeUnit.SECONDS);
-    boolean mutationsRejected = false;
 
     try {
       final String table1 = "testOfflineTableWithCache_table1", table2 = "testOfflineTableWithCache_table2";
@@ -479,7 +461,6 @@ public class MultiTableBatchWriterTest {
         bw1 = mtbw.getBatchWriter(table1);
       } catch (TableOfflineException e) {
         // pass
-        mutationsRejected = true;
       }
 
       tops.offline(table2);
@@ -488,21 +469,17 @@ public class MultiTableBatchWriterTest {
         bw2 = mtbw.getBatchWriter(table2);
       } catch (TableOfflineException e) {
         // pass
-        mutationsRejected = true;
       }
     } finally {
       if (null != mtbw) {
         try {
-          // Mutations might have flushed before the table offline occurred
           mtbw.close();
+          Assert.fail("Expecting close on MTBW to fail due to offline tables");
         } catch (MutationsRejectedException e) {
           // Pass
-          mutationsRejected = true;
         }
       }
     }
-
-    Assert.assertTrue("Expected mutations to be rejected.", mutationsRejected);
   }
 
   @Test
@@ -515,7 +492,6 @@ public class MultiTableBatchWriterTest {
 
     TCredentials creds = CredentialHelper.create("root", password, instance.getInstanceID());
     MultiTableBatchWriter mtbw = new MultiTableBatchWriterImpl(instance, creds, config, 0, TimeUnit.SECONDS);
-    boolean mutationsRejected = false;
 
     try {
       final String table1 = "testOfflineTableWithoutCache_table1", table2 = "testOfflineTableWithoutCache_table2";
@@ -533,7 +509,6 @@ public class MultiTableBatchWriterTest {
       bw1.addMutation(m1);
       bw2.addMutation(m1);
 
-      // Mutations might or might not flush before tables goes offline
       tops.offline(table1);
       tops.offline(table2);
 
@@ -542,7 +517,6 @@ public class MultiTableBatchWriterTest {
         Assert.fail(table1 + " should be offline");
       } catch (TableOfflineException e) {
         // pass
-        mutationsRejected = true;
       }
 
       try {
@@ -550,20 +524,16 @@ public class MultiTableBatchWriterTest {
         Assert.fail(table1 + " should be offline");
       } catch (TableOfflineException e) {
         // pass
-        mutationsRejected = true;
       }
     } finally {
       if (null != mtbw) {
         try {
-          // Mutations might have flushed before the table offline occurred
           mtbw.close();
+          Assert.fail("Expecting close on MTBW to fail due to offline tables");
         } catch (MutationsRejectedException e) {
           // Pass
-          mutationsRejected = true;
         }
       }
     }
-
-    Assert.assertTrue("Expected mutations to be rejected.", mutationsRejected);
   }
 }