diff --git a/repository/src/main/java/org/apache/atlas/discovery/EntityDiscoveryService.java b/repository/src/main/java/org/apache/atlas/discovery/EntityDiscoveryService.java
index c67e34772..36fb0bcc2 100644
--- a/repository/src/main/java/org/apache/atlas/discovery/EntityDiscoveryService.java
+++ b/repository/src/main/java/org/apache/atlas/discovery/EntityDiscoveryService.java
@@ -23,13 +23,12 @@ import org.apache.atlas.AtlasErrorCode;
 import org.apache.atlas.AtlasException;
 import org.apache.atlas.SortOrder;
 import org.apache.atlas.annotation.GraphTransaction;
-import org.apache.atlas.authorize.AtlasAuthorizationUtils;
-import org.apache.atlas.authorize.AtlasSearchResultScrubRequest;
 import org.apache.atlas.exception.AtlasBaseException;
-import org.apache.atlas.model.discovery.*;
+import org.apache.atlas.model.discovery.AtlasSearchResult;
 import org.apache.atlas.model.discovery.AtlasSearchResult.AtlasFullTextResult;
 import org.apache.atlas.model.discovery.AtlasSearchResult.AtlasQueryType;
 import org.apache.atlas.model.discovery.AtlasSearchResult.AttributeSearchResult;
+import org.apache.atlas.model.discovery.SearchParameters;
 import org.apache.atlas.model.instance.AtlasEntityHeader;
 import org.apache.atlas.model.instance.AtlasObjectId;
 import org.apache.atlas.model.profile.AtlasUserSavedSearch;
@@ -39,14 +38,21 @@ import org.apache.atlas.query.QueryParams;
 import org.apache.atlas.repository.Constants;
 import org.apache.atlas.repository.graph.GraphBackedSearchIndexer;
 import org.apache.atlas.repository.graph.GraphHelper;
-import org.apache.atlas.repository.graphdb.*;
+import org.apache.atlas.repository.graphdb.AtlasGraph;
+import org.apache.atlas.repository.graphdb.AtlasIndexQuery;
 import org.apache.atlas.repository.graphdb.AtlasIndexQuery.Result;
-import org.apache.atlas.repository.store.graph.v2.AtlasGraphUtilsV2;
-import org.apache.atlas.repository.store.graph.v2.EntityGraphRetriever;
+import org.apache.atlas.repository.graphdb.AtlasVertex;
+import org.apache.atlas.repository.store.graph.v1.AtlasGraphUtilsV1;
+import org.apache.atlas.repository.store.graph.v1.EntityGraphRetriever;
 import org.apache.atlas.repository.userprofile.UserProfileService;
-import org.apache.atlas.type.*;
+import org.apache.atlas.type.AtlasArrayType;
 import org.apache.atlas.type.AtlasBuiltInTypes.AtlasObjectIdType;
+import org.apache.atlas.type.AtlasClassificationType;
+import org.apache.atlas.type.AtlasEntityType;
+import org.apache.atlas.type.AtlasMapType;
 import org.apache.atlas.type.AtlasStructType.AtlasAttribute;
+import org.apache.atlas.type.AtlasType;
+import org.apache.atlas.type.AtlasTypeRegistry;
 import org.apache.atlas.util.AtlasGremlinQueryProvider;
 import org.apache.atlas.util.AtlasGremlinQueryProvider.AtlasGremlinQuery;
 import org.apache.atlas.util.SearchTracker;
@@ -68,9 +74,12 @@ import static org.apache.atlas.AtlasErrorCode.DISCOVERY_QUERY_FAILED;
 import static org.apache.atlas.AtlasErrorCode.UNKNOWN_TYPENAME;
 import static org.apache.atlas.SortOrder.ASCENDING;
 import static org.apache.atlas.SortOrder.DESCENDING;
+import static org.apache.atlas.model.TypeCategory.ARRAY;
+import static org.apache.atlas.model.TypeCategory.MAP;
+import static org.apache.atlas.model.TypeCategory.OBJECT_ID_TYPE;
 import static org.apache.atlas.model.instance.AtlasEntity.Status.ACTIVE;
 import static org.apache.atlas.model.instance.AtlasEntity.Status.DELETED;
-import static org.apache.atlas.repository.Constants.*;
+import static org.apache.atlas.repository.graph.GraphHelper.EDGE_LABEL_PREFIX;
 import static org.apache.atlas.util.AtlasGremlinQueryProvider.AtlasGremlinQuery.*;
 
 @Component
@@ -89,13 +98,10 @@ public class EntityDiscoveryService implements AtlasDiscoveryService {
     private final int                             maxTagsLengthInIdxQuery;
     private final String                          indexSearchPrefix;
     private final UserProfileService              userProfileService;
-    private final SuggestionsProvider             suggestionsProvider;
 
     @Inject
     EntityDiscoveryService(AtlasTypeRegistry typeRegistry,
-                           AtlasGraph graph,
-                           GraphBackedSearchIndexer indexer,
-                           SearchTracker searchTracker,
+                           AtlasGraph graph, GraphBackedSearchIndexer indexer, SearchTracker searchTracker,
                            UserProfileService userProfileService) throws AtlasException {
         this.graph                    = graph;
         this.entityRetriever          = new EntityGraphRetriever(typeRegistry);
@@ -106,9 +112,8 @@ public class EntityDiscoveryService implements AtlasDiscoveryService {
         this.maxResultSetSize         = ApplicationProperties.get().getInt(Constants.INDEX_SEARCH_MAX_RESULT_SET_SIZE, 150);
         this.maxTypesLengthInIdxQuery = ApplicationProperties.get().getInt(Constants.INDEX_SEARCH_TYPES_MAX_QUERY_STR_LENGTH, 512);
         this.maxTagsLengthInIdxQuery  = ApplicationProperties.get().getInt(Constants.INDEX_SEARCH_TAGS_MAX_QUERY_STR_LENGTH, 512);
-        this.indexSearchPrefix        = AtlasGraphUtilsV2.getIndexSearchPrefix();
+        this.indexSearchPrefix        = AtlasGraphUtilsV1.getIndexSearchPrefix();
         this.userProfileService       = userProfileService;
-        this.suggestionsProvider      = new SuggestionsProviderImpl(graph);
     }
 
     @Override
@@ -131,7 +136,7 @@ public class EntityDiscoveryService implements AtlasDiscoveryService {
             if (firstElement instanceof AtlasVertex) {
                 for (Object element : queryResult) {
                     if (element instanceof AtlasVertex) {
-                        ret.addEntity(entityRetriever.toAtlasEntityHeaderWithClassifications((AtlasVertex)element));
+                        ret.addEntity(entityRetriever.toAtlasEntityHeader((AtlasVertex)element));
                     } else {
                         LOG.warn("searchUsingDslQuery({}): expected an AtlasVertex; found unexpected entry in result {}", dslQuery, element);
                     }
@@ -162,8 +167,6 @@ public class EntityDiscoveryService implements AtlasDiscoveryService {
             }
         }
 
-        scrubSearchResults(ret);
-
         return ret;
     }
 
@@ -180,8 +183,6 @@ public class EntityDiscoveryService implements AtlasDiscoveryService {
         }
         ret.setFullTextResult(getIndexQueryResults(idxQuery, params, excludeDeletedEntities));
 
-        scrubSearchResults(ret);
-
         return ret;
     }
 
@@ -407,62 +408,22 @@ public class EntityDiscoveryService implements AtlasDiscoveryService {
             }
         }
 
-        scrubSearchResults(ret);
-
-        return ret;
-    }
-
-    @Override
-    @GraphTransaction
-    public AtlasQuickSearchResult quickSearch(QuickSearchParameters quickSearchParameters) throws AtlasBaseException {
-        SearchContext searchContext = new SearchContext(createSearchParameters(quickSearchParameters),
-                                                        typeRegistry,
-                                                        graph,
-                                                        indexer.getVertexIndexKeys());
-
-        if(LOG.isDebugEnabled()) {
-            LOG.debug("Generating the search results for the query {} .", searchContext.getSearchParameters().getQuery());
-        }
-
-        AtlasSearchResult searchResult = searchWithSearchContext(searchContext);
-
-        if(LOG.isDebugEnabled()) {
-            LOG.debug("Generating the aggregated metrics for the query {} .", searchContext.getSearchParameters().getQuery());
-        }
-
-        // load the facet fields and attributes.
-        Set<String>                              aggregationFields     = getAggregationFields();
-        Set<AtlasAttribute>                      aggregationAttributes = getAggregationAtlasAttributes();
-        SearchAggregator                         searchAggregator      = new SearchAggregatorImpl(searchContext);
-        Map<String, List<AtlasAggregationEntry>> aggregatedMetrics     = searchAggregator.getAggregatedMetrics(aggregationFields, aggregationAttributes);
-        AtlasQuickSearchResult                   ret                   = new AtlasQuickSearchResult(searchResult, aggregatedMetrics);
-
         return ret;
     }
 
-    @Override
-    @GraphTransaction
-    public AtlasSuggestionsResult getSuggestions(String prefixString) {
-        return suggestionsProvider.getSuggestions(prefixString);
-    }
-
     @Override
     @GraphTransaction
     public AtlasSearchResult searchWithParameters(SearchParameters searchParameters) throws AtlasBaseException {
-        return searchWithSearchContext(new SearchContext(searchParameters, typeRegistry, graph, indexer.getVertexIndexKeys()));
-    }
-
-    private AtlasSearchResult searchWithSearchContext(SearchContext searchContext) throws AtlasBaseException {
-        SearchParameters  searchParameters = searchContext.getSearchParameters();
-        AtlasSearchResult ret              = new AtlasSearchResult(searchParameters);
-        final QueryParams params           = QueryParams.getNormalizedParams(searchParameters.getLimit(),searchParameters.getOffset());
-        String            searchID         = searchTracker.add(searchContext); // For future cancellations
-
+        AtlasSearchResult ret = new AtlasSearchResult(searchParameters);
+        final   QueryParams   params =  QueryParams.getNormalizedParams(searchParameters.getLimit(),searchParameters.getOffset());
         searchParameters.setLimit(params.limit());
         searchParameters.setOffset(params.offset());
 
+        SearchContext context  = new SearchContext(searchParameters, typeRegistry, graph, indexer.getVertexIndexKeys());
+        String        searchID = searchTracker.add(context); // For future cancellations
+
         try {
-            List<AtlasVertex> resultList = searchContext.getSearchProcessor().execute();
+            List<AtlasVertex> resultList = context.getSearchProcessor().execute();
 
             // By default any attribute that shows up in the search parameter should be sent back in the response
             // If additional values are requested then the entityAttributes will be a superset of the all search attributes
@@ -474,19 +435,15 @@ public class EntityDiscoveryService implements AtlasDiscoveryService {
                 resultAttributes.addAll(searchParameters.getAttributes());
             }
 
-            if (CollectionUtils.isNotEmpty(searchContext.getEntityAttributes())) {
-                resultAttributes.addAll(searchContext.getEntityAttributes());
+            if (CollectionUtils.isNotEmpty(context.getEntityAttributes())) {
+                resultAttributes.addAll(context.getEntityAttributes());
             }
 
-            AtlasEntityType entityType = searchContext.getEntityType();
+            AtlasEntityType entityType = context.getEntityType();
             if (entityType != null) {
                 for (String resultAttribute : resultAttributes) {
                     AtlasAttribute  attribute  = entityType.getAttribute(resultAttribute);
 
-                    if (attribute == null) {
-                        attribute = entityType.getRelationshipAttribute(resultAttribute, null);
-                    }
-
                     if (attribute != null) {
                         AtlasType attributeType = attribute.getAttributeType();
 
@@ -518,7 +475,7 @@ public class EntityDiscoveryService implements AtlasDiscoveryService {
                         AtlasObjectId objId = (AtlasObjectId) attrValue;
 
                         if (ret.getReferredEntities() == null) {
-                            ret.setReferredEntities(new HashMap<>());
+                            ret.setReferredEntities(new HashMap<String, AtlasEntityHeader>());
                         }
 
                         if (!ret.getReferredEntities().containsKey(objId.getGuid())) {
@@ -532,7 +489,7 @@ public class EntityDiscoveryService implements AtlasDiscoveryService {
                                 AtlasObjectId objId = (AtlasObjectId) obj;
 
                                 if (ret.getReferredEntities() == null) {
-                                    ret.setReferredEntities(new HashMap<>());
+                                    ret.setReferredEntities(new HashMap<String, AtlasEntityHeader>());
                                 }
 
                                 if (!ret.getReferredEntities().containsKey(objId.getGuid())) {
@@ -547,8 +504,6 @@ public class EntityDiscoveryService implements AtlasDiscoveryService {
             searchTracker.remove(searchID);
         }
 
-        scrubSearchResults(ret);
-
         return ret;
     }
 
@@ -572,13 +527,9 @@ public class EntityDiscoveryService implements AtlasDiscoveryService {
 
         AtlasAttribute attribute = entityType.getAttribute(relation);
 
-        if (attribute == null) {
-            attribute = entityType.getRelationshipAttribute(relation, null);
-        }
-
         if (attribute != null) {
-            if (attribute.isObjectRef()) {
-                relation = attribute.getRelationshipEdgeLabel();
+            if (isRelationshipAttribute(attribute)) {
+                relation = EDGE_LABEL_PREFIX + attribute.getQualifiedName();
             } else {
                 throw new AtlasBaseException(AtlasErrorCode.INVALID_RELATIONSHIP_ATTRIBUTE, relation, attribute.getTypeName());
             }
@@ -661,8 +612,6 @@ public class EntityDiscoveryService implements AtlasDiscoveryService {
             graph.releaseGremlinScriptEngine(scriptEngine);
         }
 
-        scrubSearchResults(ret);
-
         return ret;
     }
 
@@ -830,6 +779,23 @@ public class EntityDiscoveryService implements AtlasDiscoveryService {
         return "";
     }
 
+    private boolean isRelationshipAttribute(AtlasAttribute attribute) throws AtlasBaseException {
+        boolean   ret      = true;
+        AtlasType attrType = attribute.getAttributeType();
+
+        if (attrType.getTypeCategory() == ARRAY) {
+            attrType = ((AtlasArrayType) attrType).getElementType();
+        } else if (attrType.getTypeCategory() == MAP) {
+            attrType = ((AtlasMapType) attrType).getValueType();
+        }
+
+        if (attrType.getTypeCategory() != OBJECT_ID_TYPE) {
+            ret = false;
+        }
+
+        return ret;
+    }
+
     private Set<String> getEntityStates() {
         return new HashSet<>(Arrays.asList(ACTIVE.toString(), DELETED.toString()));
     }
@@ -945,21 +911,6 @@ public class EntityDiscoveryService implements AtlasDiscoveryService {
         return queryStr;
     }
 
-    public static SearchParameters createSearchParameters(QuickSearchParameters quickSearchParameters) {
-        SearchParameters searchParameters = new SearchParameters();
-
-        searchParameters.setQuery(quickSearchParameters.getQuery());
-        searchParameters.setTypeName(quickSearchParameters.getTypeName());
-        searchParameters.setExcludeDeletedEntities(quickSearchParameters.getExcludeDeletedEntities());
-        searchParameters.setIncludeSubTypes(quickSearchParameters.getIncludeSubTypes());
-        searchParameters.setLimit(quickSearchParameters.getLimit());
-        searchParameters.setOffset(quickSearchParameters.getOffset());
-        searchParameters.setEntityFilters(quickSearchParameters.getEntityFilters());
-        searchParameters.setAttributes(quickSearchParameters.getAttributes());
-
-        return searchParameters;
-    }
-
     private String escapeTypeName(String typeName) {
         String ret;
 
@@ -978,40 +929,4 @@ public class EntityDiscoveryService implements AtlasDiscoveryService {
             throw new AtlasBaseException(AtlasErrorCode.BAD_REQUEST, "invalid data");
         }
     }
-
-    private void scrubSearchResults(AtlasSearchResult result) throws AtlasBaseException {
-        AtlasAuthorizationUtils.scrubSearchResults(new AtlasSearchResultScrubRequest(typeRegistry, result));
-    }
-
-    private Set<String> getAggregationFields() {
-        Set<String> ret = new HashSet<>(); // for non-modeled attributes.
-
-        ret.add(Constants.ENTITY_TYPE_PROPERTY_KEY);
-        ret.add(Constants.STATE_PROPERTY_KEY);
-
-        return ret;
-    }
-
-    private Set<AtlasAttribute> getAggregationAtlasAttributes() {
-        Set<AtlasAttribute> ret = new HashSet<>(); // for modeled attributes, like Asset.owner
-
-        ret.add(getAtlasAttributeForAssetOwner());
-
-        return ret;
-    }
-
-    private AtlasAttribute getAtlasAttributeForAssetOwner() {
-        AtlasEntityType typeAsset = typeRegistry.getEntityTypeByName(ASSET_ENTITY_TYPE);
-        AtlasAttribute  atttOwner = typeAsset != null ? typeAsset.getAttribute(OWNER_ATTRIBUTE) : null;
-
-        if(atttOwner == null) {
-            String msg = String.format("Unable to resolve the attribute %s.%s", ASSET_ENTITY_TYPE, OWNER_ATTRIBUTE);
-
-            LOG.error(msg);
-
-            throw new RuntimeException(msg);
-        }
-
-        return atttOwner;
-    }
 }