diff --git a/modules/gfac-core/src/main/java/org/apache/airavata/core/gfac/provider/GramProvider.java b/modules/gfac-core/src/main/java/org/apache/airavata/core/gfac/provider/GramProvider.java
index 506f09c43..e7ddbe5ef 100644
--- a/modules/gfac-core/src/main/java/org/apache/airavata/core/gfac/provider/GramProvider.java
+++ b/modules/gfac-core/src/main/java/org/apache/airavata/core/gfac/provider/GramProvider.java
@@ -27,19 +27,24 @@ import java.net.URISyntaxException;
 
 import javax.xml.namespace.QName;
 
+import org.apache.airavata.commons.gfac.type.ServiceDescription;
+import org.apache.airavata.commons.gfac.type.app.GramApplicationDeployment;
 import org.apache.airavata.commons.gfac.type.app.ShellApplicationDeployment;
 import org.apache.airavata.commons.gfac.type.host.GlobusHost;
 import org.apache.airavata.commons.gfac.type.parameter.AbstractParameter;
 import org.apache.airavata.core.gfac.context.invocation.InvocationContext;
 import org.apache.airavata.core.gfac.context.security.impl.GSISecurityContext;
+import org.apache.airavata.core.gfac.exception.ExtensionException;
 import org.apache.airavata.core.gfac.exception.GfacException;
 import org.apache.airavata.core.gfac.exception.JobSubmissionFault;
 import org.apache.airavata.core.gfac.exception.ProviderException;
 import org.apache.airavata.core.gfac.exception.SecurityException;
 import org.apache.airavata.core.gfac.exception.ToolsException;
 import org.apache.airavata.core.gfac.external.GridFtp;
+import org.apache.airavata.core.gfac.notification.NotificationService;
 import org.apache.airavata.core.gfac.provider.utils.GramRSLGenerator;
 import org.apache.airavata.core.gfac.provider.utils.JobSubmissionListener;
+import org.apache.airavata.core.gfac.utils.ErrorCodes;
 import org.apache.airavata.core.gfac.utils.GfacUtils;
 import org.apache.airavata.core.gfac.utils.OutputUtils;
 import org.globus.gram.GramAttributes;
@@ -51,24 +56,11 @@ import org.ietf.jgss.GSSException;
 public class GramProvider extends AbstractProvider {
 
     public static final String MYPROXY_SECURITY_CONTEXT = "myproxy";
-    private GramJob job;
-    private String gateKeeper;
-    private JobSubmissionListener listener;
 
     public void initialize(InvocationContext invocationContext) throws ProviderException {
-    }
-
-    public void dispose(InvocationContext invocationContext) throws GfacException {
-    }
-
-    public void abort(InvocationContext invocationContext) throws GfacException {
-    }
-
-    public void makeDirectory(InvocationContext invocationContext) throws ProviderException {
-        GlobusHost host = (GlobusHost) invocationContext.getExecutionDescription().getHost();
-        ShellApplicationDeployment app = (ShellApplicationDeployment) invocationContext.getExecutionDescription()
-                .getApp();
-
+        GlobusHost host = (GlobusHost)invocationContext.getExecutionDescription().getHost();
+        ShellApplicationDeployment app = (ShellApplicationDeployment)invocationContext.getExecutionDescription().getApp();
+    	
         GridFtp ftp = new GridFtp();
 
         try {
@@ -76,7 +68,7 @@ public class GramProvider extends AbstractProvider {
                     .getSecurityContext(MYPROXY_SECURITY_CONTEXT)).getGssCredentails();
 
             String hostgridFTP = host.getGridFTPEndPoint();
-            if (host.getGridFTPEndPoint() == null) {
+            if (host.getGridFTPEndPoint() == null){
                 hostgridFTP = host.getName();
             }
 
@@ -94,158 +86,108 @@ public class GramProvider extends AbstractProvider {
             ftp.makeDir(tmpdirURI, gssCred);
             ftp.makeDir(workingDirURI, gssCred);
             ftp.makeDir(inputURI, gssCred);
-        } catch (URISyntaxException e) {
-            throw new ProviderException("URI is malformatted:" + e.getMessage(), e);
-        } catch (SecurityException e) {
-            throw new ProviderException(e.getMessage(), e);
-        } catch (ToolsException e) {
-            throw new ProviderException(e.getMessage(), e);
+            ftp.makeDir(outputURI, gssCred);
+
+        } catch (Exception e) {
+            e.printStackTrace();
         }
     }
 
-    public void setupEnvironment(InvocationContext invocationContext) throws ProviderException {
-        GlobusHost host = (GlobusHost) invocationContext.getExecutionDescription().getHost();
+    public void execute(InvocationContext invocationContext) throws ProviderException {
+    	GlobusHost host = (GlobusHost)invocationContext.getExecutionDescription().getHost();
+    	GramApplicationDeployment app = (GramApplicationDeployment)invocationContext.getExecutionDescription().getApp();
+        ServiceDescription service = invocationContext.getExecutionDescription().getService();
 
         log.info("Searching for Gate Keeper");
-        gateKeeper = host.getGlobusGateKeeperEndPoint();
-        if (gateKeeper == null) {
-            gateKeeper = host.getName();
+        String gatekeeper = host.getGlobusGateKeeperEndPoint();
+        if (gatekeeper == null) {
+        	gatekeeper = host.getName();
         }
-        log.info("Using Globus GateKeeper " + gateKeeper);
+        log.info("Using Globus GateKeeper " + gatekeeper);
+        GramJob job = null;
+        boolean jobSucsseful = false;
 
         String rsl = "";
+        int errCode = 0;
 
         try {
+            GSSCredential gssCred = ((GSISecurityContext) invocationContext
+                    .getSecurityContext(MYPROXY_SECURITY_CONTEXT)).getGssCredentails();
+
             GramAttributes jobAttr = GramRSLGenerator.configureRemoteJob(invocationContext);
             rsl = jobAttr.toRSL();
-
-            log.info("RSL = " + rsl);
-
             job = new GramJob(rsl);
-            listener = new JobSubmissionListener(job, invocationContext);
-            job.addListener(listener);
-
-        } catch (ToolsException te) {
-            throw new ProviderException(te.getMessage(), te);
-        }
-
-    }
-
-    public void executeApplication(InvocationContext invocationContext) throws ProviderException {
-        GlobusHost host = (GlobusHost) invocationContext.getExecutionDescription().getHost();
-        ShellApplicationDeployment app = (ShellApplicationDeployment) invocationContext.getExecutionDescription()
-                .getApp();
-        StringBuffer buf = new StringBuffer();
-        try {
-
-            /*
-             * Set Security
-             */
-            GSSCredential gssCred = ((GSISecurityContext) invocationContext
-                    .getSecurityContext(MYPROXY_SECURITY_CONTEXT)).getGssCredentails();
             job.setCredentials(gssCred);
 
-            log.info("Request to contact:" + gateKeeper);
+            log.info("RSL = " + rsl);
 
-            buf.append("Finished launching job, Host = ").append(host.getName()).append(" RSL = ").append(job.getRSL())
-                    .append(" working directory = ").append(app.getWorkingDir()).append(" tempDirectory = ")
-                    .append(app.getTmpDir()).append(" Globus GateKeeper cantact = ").append(gateKeeper);
-            invocationContext.getExecutionContext().getNotifier().info(this, invocationContext, buf.toString());
+            NotificationService notifier = invocationContext.getExecutionContext().getNotificationService();
+            notifier.startExecution(this, invocationContext);
+            StringBuffer buf = new StringBuffer();
 
+            JobSubmissionListener listener = new JobSubmissionListener(job, invocationContext);
+            job.addListener(listener);
+            log.info("Request to contact:" + gatekeeper);
             /*
-             * The first boolean is to specify the job is a batch job - use true
-             * for interactive and false for batch. The second boolean is to
-             * specify to use the full proxy and not delegate a limited proxy.
+             * The first boolean is to specify the job is a batch job - use true for interactive and false for batch.
+             * The second boolean is to specify to use the full proxy and not delegate a limited proxy.
              */
-            job.request(gateKeeper, false, false);
+            job.request(gatekeeper, false, false);
+
+            log.info("JobID = " + job.getIDAsString());
+
+            // Gram.request(contact, job, false, false);
+
+            buf.append("Finished launching job, Host = ")
+            		.append(host.getName())
+                    .append(" RSL = ")
+                    .append(job.getRSL())
+                    .append(" working directory = ")
+                    .append(app.getWorkingDir())
+                    .append(" tempDirectory = ")
+                    .append(app.getTmpDir())
+                    .append(" Globus GateKeeper cantact = ")
+                    .append(gatekeeper);
+            notifier.info(this, invocationContext, buf.toString());
             String gramJobid = job.getIDAsString();
-            log.info("JobID = " + gramJobid);
-            invocationContext.getExecutionContext().getNotifier().info(this, invocationContext, "JobID=" + gramJobid);
-
+            notifier.info(this, invocationContext, "JobID=" + gramJobid);
             log.info(buf.toString());
+            
+            notifier.applicationInfo(this, invocationContext, gramJobid, gatekeeper, null, null,
+                    gssCred.getName().toString(), null, job.getRSL());
 
-            invocationContext
-                    .getExecutionContext()
-                    .getNotifier()
-                    .applicationInfo(this, invocationContext, gramJobid, gateKeeper, null, null,
-                            gssCred.getName().toString(), null, job.getRSL());
-
-            /*
-             * Block untill job is done
-             */
             listener.waitFor();
-
-            /*
-             * Remove listener
-             */
             job.removeListener(listener);
 
-            /*
-             * Fail job
-             */
             int jobStatus = listener.getStatus();
             if (jobStatus == GramJob.STATUS_FAILED) {
-                int errCode = listener.getError();
-                String errorMsg = "Job " + job.getID() + " on host " + host.getName() + " Error Code = " + errCode;
-                JobSubmissionFault error = new JobSubmissionFault(this, new Exception(errorMsg), "GFAC HOST",
-                        gateKeeper, job.getRSL());
+                errCode = listener.getError();                
+                String errorMsg = "Job " + job.getID() + " on host " + host.getName() + " Error Code = " + errCode;                
+                JobSubmissionFault error = new JobSubmissionFault(this, new Exception(errorMsg), "GFAC HOST", gatekeeper, rsl);
                 if (errCode == 8) {
-                    error.setReason(JobSubmissionFault.JOB_CANCEL);
+                	error.setReason(JobSubmissionFault.JOB_CANCEL);
                 } else {
                     error.setReason(JobSubmissionFault.JOB_FAILED);
                 }
                 throw error;
             }
-
-        } catch (GramException e) {
-            JobSubmissionFault error = new JobSubmissionFault(this, e, host.getName(), gateKeeper, job.getRSL());
-            if (listener.getError() == 8) {
-                error.setReason(JobSubmissionFault.JOB_CANCEL);
-            } else {
-                error.setReason(JobSubmissionFault.JOB_FAILED);
-            }
-            throw error;
-        } catch (GSSException e) {
-            throw new ProviderException(e.getMessage(), e);
-        } catch (InterruptedException e) {
-            throw new ProviderException("Thread", e);
-        } catch (SecurityException e) {
-            throw new ProviderException(e.getMessage(), e);
-        } finally {
-            if (job != null) {
-                try {
-                    job.cancel();
-                } catch (Exception e) {
-                }
-            }
-        }
-
-    }
-
-    public void retrieveOutput(InvocationContext invocationContext) throws ProviderException {
-        GlobusHost host = (GlobusHost) invocationContext.getExecutionDescription().getHost();
-        ShellApplicationDeployment app = (ShellApplicationDeployment) invocationContext.getExecutionDescription()
-                .getApp();
-        GridFtp ftp = new GridFtp();
-
-        try {
-            GSSCredential gssCred = ((GSISecurityContext) invocationContext
-                    .getSecurityContext(MYPROXY_SECURITY_CONTEXT)).getGssCredentails();
+            notifier.finishExecution(this, invocationContext);
 
             /*
              * Stdout and Stderror
              */
+            GridFtp ftp = new GridFtp();
 
             String hostgridFTP = host.getGridFTPEndPoint();
-            if (host.getGridFTPEndPoint() == null) {
+            if (host.getGridFTPEndPoint() == null){
                 hostgridFTP = host.getName();
             }
 
             URI stdoutURI = GfacUtils.createGsiftpURI(hostgridFTP, app.getStdOut());
             URI stderrURI = GfacUtils.createGsiftpURI(hostgridFTP, app.getStdErr());
 
-            log.info("STDOUT:" + stdoutURI.toString());
-            log.info("STDERR:" + stderrURI.toString());
+            System.out.println(stdoutURI);
+            System.out.println(stderrURI);
 
             File logDir = new File("./service_logs");
             if (!logDir.exists()) {
@@ -262,15 +204,43 @@ public class GramProvider extends AbstractProvider {
             String stderr = ftp.readRemoteFile(stderrURI, gssCred, localStdErrFile);
 
             // set to context
-            OutputUtils.fillOutputFromStdout(invocationContext.<AbstractParameter> getOutput(), stdout, stderr);
-            
-        } catch (URISyntaxException e) {
-            throw new ProviderException("URI is malformatted:" + e.getMessage(), e);
+            OutputUtils.fillOutputFromStdout(invocationContext.<AbstractParameter>getOutput(), stdout, stderr);
+
+            jobSucsseful = true;
+        } catch (GramException e) {
+            JobSubmissionFault error = new JobSubmissionFault(this, e, host.getName(), gatekeeper, rsl);
+            if (errCode == 8) {
+                error.setReason(JobSubmissionFault.JOB_CANCEL);
+            } else {
+                error.setReason(JobSubmissionFault.JOB_FAILED);
+            }
+            throw error;
+        } catch (GSSException e) {
+            throw new ProviderException("GFAC HOST", e);        
+        } catch (InterruptedException e) {
+            throw new ProviderException("Thread", e);
         } catch (SecurityException e) {
-            throw new ProviderException(e.getMessage(), e);
+            throw new ProviderException(e.getMessage(), e);            
         } catch (ToolsException e) {
             throw new ProviderException(e.getMessage(), e);
+        } catch (URISyntaxException e) {
+            throw new ProviderException("URI is in the wrong format:" + e.getMessage(), e);
+        } finally {
+            if (job != null && !jobSucsseful) {
+                try {
+                    job.cancel();
+                } catch (Exception e) {
+                }
+            }
         }
+
+    }
+
+    public void dispose(InvocationContext invocationContext) throws GfacException {
+
+    }
+
+    public void abort(InvocationContext invocationContext) throws GfacException {       
     }
 
 }