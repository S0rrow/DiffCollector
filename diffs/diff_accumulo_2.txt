diff --git a/src/core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java b/src/core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java
index d205b16d9c..b7d3061073 100644
--- a/src/core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java
+++ b/src/core/src/main/java/org/apache/accumulo/core/client/admin/TableOperations.java
@@ -1,19 +1,3 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
 package org.apache.accumulo.core.client.admin;
 
 import java.io.IOException;
@@ -35,6 +19,7 @@ import org.apache.accumulo.core.security.Authorizations;
 import org.apache.accumulo.core.util.BulkImportHelper.AssignmentStats;
 import org.apache.hadoop.io.Text;
 
+
 /**
  * Provides a class for administering tables
  * 
@@ -42,9 +27,9 @@ import org.apache.hadoop.io.Text;
 
 @SuppressWarnings("deprecation")
 public interface TableOperations {
-    
+
     public SortedSet<String> list();
-    
+
     /**
      * A method to check if a table exists in Accumulo.
      * 
@@ -53,7 +38,7 @@ public interface TableOperations {
      * @return true if the table exists
      */
     public boolean exists(String tableName);
-    
+
     /**
      * Create a table with no special configuration
      * 
@@ -67,28 +52,31 @@ public interface TableOperations {
      *             if the table already exists
      */
     public void create(String tableName) throws AccumuloException, AccumuloSecurityException, TableExistsException;
-    
+ 
     /**
-     * @param tableName
-     *            the name of the table
+	 * @param tableName
+	 *            the name of the table
      * @param limitVersion
-     *            Enables/disables the versioning iterator, which will limit the number of Key versions kept.
-     * @throws AccumuloException
-     *             if a general error occurs
-     * @throws AccumuloSecurityException
-     *             if the user does not have permission
-     * @throws TableExistsException
-     *             if the table already exists
-     */
-    public void create(String tableName, boolean limitVersion) throws AccumuloException, AccumuloSecurityException, TableExistsException;
-    
-    /**
+     * 			  Enables/disables the versioning iterator, which will limit
+     * 			  the number of Key versions kept.
+	 * @throws AccumuloException
+	 *             if a general error occurs
+	 * @throws AccumuloSecurityException
+	 *             if the user does not have permission
+	 * @throws TableExistsException
+	 *             if the table already exists
+	 */
+	public void create(String tableName, boolean limitVersion) throws AccumuloException, AccumuloSecurityException, TableExistsException;
+
+	/**
      * @param tableName
      *            the name of the table
-     * @param timeType
-     *            specifies logical or real-time based time recording for entries in the table
-     * @param limitVersion
-     *            Enables/disables the versioning iterator, which will limit the number of Key versions kept.
+	 * @param timeType
+     *            specifies logical or real-time based time recording for
+     *            entries in the table
+	 * @param limitVersion
+     * 			  Enables/disables the versioning iterator, which will limit
+     * 			  the number of Key versions kept.
      * @throws AccumuloException
      *             if a general error occurs
      * @throws AccumuloSecurityException
@@ -97,23 +85,22 @@ public interface TableOperations {
      *             if the table already exists
      */
     public void create(String tableName, boolean versioningIter, TimeType timeType) throws AccumuloException, AccumuloSecurityException, TableExistsException;
-    
-    /**
-     * @param tableName
-     *            the name of the table
-     * @param aggregators
-     *            List of aggregators to add
-     * @throws AccumuloSecurityException
-     *             if insufficient permissions to do action
-     * @throws TableNotFoundException
-     *             if table does not exist
-     * @throws AccumuloException
-     *             if a general error occurs
-     * 
-     * @deprecated since 1.4 {@link #attachIterator(String, IteratorSetting)}
-     */
-    public void addAggregators(String tableName, List<? extends PerColumnIteratorConfig> aggregators) throws AccumuloSecurityException, TableNotFoundException,
-            AccumuloException;
+
+	/**
+	 * @param tableName
+	 * 			the name of the table
+	 * @param aggregators
+	 * 			List of aggregators to add
+	 * @throws AccumuloSecurityException
+	 * 			if insufficient permissions to do action
+	 * @throws TableNotFoundException
+	 * 			if table does not exist
+	 * @throws AccumuloException
+	 * 			if a general error occurs
+	 * 
+	 * @deprecated since 1.4 {@link #attachIterator(String, IteratorSetting)}
+	 */
+	public void addAggregators(String tableName, List<? extends PerColumnIteratorConfig> aggregators) throws AccumuloSecurityException, TableNotFoundException, AccumuloException;
     
     /**
      * @param tableName
@@ -128,90 +115,72 @@ public interface TableOperations {
      *             if the table does not exist
      */
     public void addSplits(String tableName, SortedSet<Text> partitionKeys) throws TableNotFoundException, AccumuloException, AccumuloSecurityException;
-    
+
     /**
      * @param tableName
      *            the name of the table
-     * @return the split points (end-row names) for the table's current split profile
-     * @throws TableNotFoundException
-     *             if the table does not exist
+     * @return the split points (end-row names) for the table's current split
+     *         profile
+     * @throws TableNotFoundException if the table does not exist
      */
     public Collection<Text> getSplits(String tableName) throws TableNotFoundException;
-    
+
     /**
      * @param tableName
      *            the name of the table
      * @param maxSplits
      *            specifies the maximum number of splits to return
-     * @return the split points (end-row names) for the table's current split profile, grouped into fewer splits so as not to exceed maxSplits
-     * @throws TableNotFoundException
+     * @return the split points (end-row names) for the table's current split
+     *         profile, grouped into fewer splits so as not to exceed maxSplits
+     * @throws TableNotFoundException 
      */
     public Collection<Text> getSplits(String tableName, int maxSplits) throws TableNotFoundException;
-    
+
     /**
-     * Finds the max row within a given range. To find the max row in a table, pass null for start and end row.
+     * Finds the max row within a given range.  To find the max row in a table, pass null for start
+     * and end row.
      * 
      * @param tableName
-     * @param auths
-     *            find the max row that can seen with these auths
-     * @param startRow
-     *            row to start looking at, null means -Infinity
-     * @param startInclusive
-     *            determines if the start row is included
-     * @param endRow
-     *            row to stop looking at, null means Infinity
-     * @param endInclusive
-     *            determines if the end row is included
+     * @param auths           find the max row that can seen with these auths
+     * @param startRow        row to start looking at, null means -Infinity
+     * @param startInclusive  determines if the start row is included
+     * @param endRow          row to stop looking at, null means Infinity
+     * @param endInclusive    determines if the end row is included
      * 
      * @return The max row in the range, or null if there is no visible data in the range.
      * 
-     * @throws AccumuloSecurityException
-     * @throws AccumuloException
-     * @throws TableNotFoundException
+     * @throws AccumuloSecurityException 
+     * @throws AccumuloException 
+     * @throws TableNotFoundException 
      */
-    public Text getMaxRow(String tableName, Authorizations auths, Text startRow, boolean startInclusive, Text endRow, boolean endInclusive)
-            throws TableNotFoundException, AccumuloException, AccumuloSecurityException;
+    public Text getMaxRow(String tableName, Authorizations auths, Text startRow, boolean startInclusive, Text endRow, boolean endInclusive) throws TableNotFoundException, AccumuloException, AccumuloSecurityException;
     
     /**
      * Merge tablets between (start, end]
-     * 
-     * @param tableName
-     *            the table to merge
-     * @param start
-     *            first tablet to be merged contains the row after this row, null means the first tablet
-     * @param end
-     *            last tablet to be merged contains this row, null means the last tablet
+     * @param tableName the table to merge
+     * @param start first tablet to be merged contains the row after this row, null means the first tablet
+     * @param end last tablet to be merged contains this row, null means the last tablet
      */
-    public void merge(String tableName, Text start, Text end) throws AccumuloException, AccumuloSecurityException, TableNotFoundException;
+    public void merge(String tableName, Text start, Text end)  throws AccumuloException, AccumuloSecurityException, TableNotFoundException;
     
     /**
      * Delete rows between (start, end]
-     * 
-     * @param tableName
-     *            the table to merge
-     * @param start
-     *            delete rows after this, null means the first row of the table
-     * @param end
-     *            last row to be deleted, inclusive, null means the last row of the table
+     * @param tableName the table to merge
+     * @param start delete rows after this, null means the first row of the table
+     * @param end last row to be deleted, inclusive, null means the last row of the table
      */
-    public void deleteRows(String tableName, Text start, Text end) throws AccumuloException, AccumuloSecurityException, TableNotFoundException;
+    public void deleteRows(String tableName, Text start, Text end)  throws AccumuloException, AccumuloSecurityException, TableNotFoundException;
     
     /**
-     * Starts a full major compaction of the tablets in the range (start, end]. The compaction is preformed even for tablets that have only one file.
+     * Starts a full major compaction of the tablets in the range (start, end].  The compaction is preformed even for tablets that have only one file.
      * 
-     * @param tableName
-     *            the table to compact
-     * @param start
-     *            first tablet to be compacted contains the row after this row, null means the first tablet in table
-     * @param end
-     *            last tablet to be merged contains this row, null means the last tablet in table
-     * @param flush
-     *            when true, table memory is flushed before compaction starts
-     * @param wait
-     *            when true, the call will not return until compactions are finished
+     * @param tableName the table to compact
+     * @param start first tablet to be compacted contains the row after this row, null means the first tablet in table
+     * @param end last tablet to be merged contains this row, null means the last tablet in table
+     * @param flush when true, table memory is flushed before compaction starts
+     * @param wait when true, the call will not return until compactions are finished
      */
-    public void compact(String tableName, Text start, Text end, boolean flush, boolean wait) throws AccumuloSecurityException, TableNotFoundException,
-            AccumuloException;
+    public void compact(String tableName, Text start, Text end, boolean flush, boolean wait) throws AccumuloSecurityException, TableNotFoundException, AccumuloException;
     
     /**
      * Delete a table
@@ -226,28 +195,20 @@ public interface TableOperations {
      *             if the table does not exist
      */
     public void delete(String tableName) throws AccumuloException, AccumuloSecurityException, TableNotFoundException;
-    
+
     /**
-     * Clone a table from an existing table. The cloned table will have the same data as the source table it was created from. After cloning, the two tables can
-     * mutate independently. Initially the cloned table should not use any extra space, however as the source table and cloned table major compact extra space
-     * will be used by the clone.
+     * Clone a table from an existing table.  The cloned table will have the same data as the source table it was created from.  After cloning, the two tables can mutate independently.  Initially the cloned table should not use any extra space, however as the source table and cloned table major compact extra space will be used by the clone.
      * 
      * Initially the cloned table is only readable and writable by the user who created it.
      * 
-     * @param srcTableName
-     *            the table to clone
-     * @param newTableName
-     *            the name of the clone
-     * @param flush
-     *            determines if memory is flushed in the source table before cloning.
-     * @param propertiesToSet
-     *            the sources tables properties are copied, this allows overriding of those properties
-     * @param propertiesToExclude
-     *            do not copy these properties from the source table, just revert to system defaults
+     * @param srcTableName the table to clone
+     * @param newTableName the name of the clone
+     * @param flush determines if memory is flushed in the source table before cloning.
+     * @param propertiesToSet the sources tables properties are copied, this allows overriding of those properties
+     * @param propertiesToExclude do not copy these properties from the source table, just revert to system defaults
      */
     
-    public void clone(String srcTableName, String newTableName, boolean flush, Map<String,String> propertiesToSet, Set<String> propertiesToExclude)
-            throws AccumuloException, AccumuloSecurityException, TableNotFoundException, TableExistsException;
+    public void clone(String srcTableName, String newTableName, boolean flush, Map<String, String> propertiesToSet, Set<String> propertiesToExclude) throws AccumuloException, AccumuloSecurityException, TableNotFoundException, TableExistsException;
     
     /**
      * Rename a table
@@ -265,8 +226,7 @@ public interface TableOperations {
      * @throws TableExistsException
      *             if the new table name already exists
      */
-    public void rename(String oldTableName, String newTableName) throws AccumuloSecurityException, TableNotFoundException, AccumuloException,
-            TableExistsException;
+    public void rename(String oldTableName, String newTableName) throws AccumuloSecurityException, TableNotFoundException, AccumuloException, TableExistsException;
     
     /**
      * Initiate a flush of a tables data that is in memory
@@ -277,7 +237,7 @@ public interface TableOperations {
      *             if a general error occurs
      * @throws AccumuloSecurityException
      *             if the user does not have permission
-     * 
+     *             
      * @deprecated As of release 1.4, replaced by {@link #flush(String, Text, Text, boolean)}
      */
     public void flush(String tableName) throws AccumuloException, AccumuloSecurityException;
@@ -288,16 +248,16 @@ public interface TableOperations {
      * @param tableName
      *            the name of the table
      * @param wait
-     *            if true the call will not return until all data present in memory when the call was is flushed if false will initiate a flush of data in
-     *            memory, but will not wait for it to complete
+     *            if true the call will not return until all data present in memory when the call was is flushed
+     *            if false will initiate a flush of data in memory, but will not wait for it to complete
      * @throws AccumuloException
      *             if a general error occurs
      * @throws AccumuloSecurityException
      *             if the user does not have permission
-     * @throws TableNotFoundException
+     * @throws TableNotFoundException 
      */
     public void flush(String tableName, Text start, Text end, boolean wait) throws AccumuloException, AccumuloSecurityException, TableNotFoundException;
-    
+
     /**
      * Sets a property on a table
      * 
@@ -313,7 +273,7 @@ public interface TableOperations {
      *             if the user does not have permission
      */
     public void setProperty(String tableName, String property, String value) throws AccumuloException, AccumuloSecurityException;
-    
+
     /**
      * Removes a property from a table
      * 
@@ -333,19 +293,22 @@ public interface TableOperations {
      * 
      * @param tableName
      *            the name of the table
-     * @return all properties visible by this table (system and per-table properties)
+     * @return all properties visible by this table (system and per-table
+     *         properties)
      * @throws TableNotFoundException
      *             if the table does not exist
      */
-    public Iterable<Entry<String,String>> getProperties(String tableName) throws AccumuloException, TableNotFoundException;
-    
+    public Iterable<Entry<String, String>> getProperties(String tableName) throws AccumuloException, TableNotFoundException;
+
     /**
-     * Sets a tables locality groups. A tables locality groups can be changed at any time.
+     * Sets a tables locality groups. A tables locality groups can be changed at
+     * any time.
      * 
      * @param tableName
      *            the name of the table
      * @param groups
-     *            mapping of locality group names to column families in the locality group
+     *            mapping of locality group names to column families in the
+     *            locality group
      * @throws AccumuloException
      *             if a general error occurs
      * @throws AccumuloSecurityException
@@ -353,22 +316,23 @@ public interface TableOperations {
      * @throws TableNotFoundException
      *             if the table does not exist
      */
-    public void setLocalityGroups(String tableName, Map<String,Set<Text>> groups) throws AccumuloException, AccumuloSecurityException, TableNotFoundException;
-    
+    public void setLocalityGroups(String tableName, Map<String, Set<Text>> groups) throws AccumuloException, AccumuloSecurityException, TableNotFoundException;
+
     /**
      * 
      * Gets the locality groups currently set for a table.
      * 
      * @param tableName
      *            the name of the table
-     * @return mapping of locality group names to column families in the locality group
+     * @return mapping of locality group names to column families in the
+     *         locality group
      * @throws AccumuloException
      *             if a general error occurs
      * @throws TableNotFoundException
      *             if the table does not exist
      */
-    public Map<String,Set<Text>> getLocalityGroups(String tableName) throws AccumuloException, TableNotFoundException;
-    
+    public Map<String, Set<Text>> getLocalityGroups(String tableName) throws AccumuloException, TableNotFoundException;
+
     /**
      * @param tableName
      *            the name of the table
@@ -376,7 +340,8 @@ public interface TableOperations {
      *            a range to split
      * @param maxSplits
      *            the maximum number of splits
-     * @return the range, split into smaller ranges that fall on boundaries of the table's split points as evenly as possible
+     * @return the range, split into smaller ranges that fall on boundaries of
+     *         the table's split points as evenly as possible
      * @throws AccumuloException
      *             if a general error occurs
      * @throws AccumuloSecurityException
@@ -384,12 +349,10 @@ public interface TableOperations {
      * @throws TableNotFoundException
      *             if the table does not exist
      */
-    public Set<Range> splitRangeByTablets(String tableName, Range range, int maxSplits) throws AccumuloException, AccumuloSecurityException,
-            TableNotFoundException;
-    
+    public Set<Range> splitRangeByTablets(String tableName, Range range, int maxSplits) throws AccumuloException, AccumuloSecurityException, TableNotFoundException;
+
     /**
      * Bulk import all the files in a directory into a table.
-     * 
      * @param tableName
      *            the name of the table
      * @param dir
@@ -406,37 +369,35 @@ public interface TableOperations {
      *             when the table no longer exists
      * 
      */
-    public void importDirectory(String tableName, String dir, String failureDir, boolean setTime) throws TableNotFoundException, IOException,
-            AccumuloException, AccumuloSecurityException;
+    public void importDirectory(String tableName, String dir, String failureDir, boolean setTime) throws  TableNotFoundException, IOException, AccumuloException, AccumuloSecurityException;
     
     /**
      * @deprecated Since 1.4
      * @see {@link TableOperations#importDirectory(String, String, String)};
      */
-    public AssignmentStats importDirectory(String tableName, String dir, String failureDir, int numThreads, int numAssignThreads, boolean disableGC)
-            throws IOException, AccumuloException, AccumuloSecurityException;
+    public AssignmentStats importDirectory(String tableName, String dir, String failureDir, int numThreads, int numAssignThreads, boolean disableGC) throws IOException, AccumuloException, AccumuloSecurityException;
     
     /**
      * 
      * @param tableName
-     *            the table to take offline
+     *             the table to take offline
      * @throws AccumuloException
      *             when there is a general accumulo error
      * @throws AccumuloSecurityException
      *             when the user does not have the proper permissions
-     * @throws TableNotFoundException
+     * @throws TableNotFoundException 
      */
     public void offline(String tableName) throws AccumuloSecurityException, AccumuloException, TableNotFoundException;
-    
+
     /**
      * 
      * @param tableName
-     *            the table to take online
+     *             the table to take online
      * @throws AccumuloException
      *             when there is a general accumulo error
      * @throws AccumuloSecurityException
      *             when the user does not have the proper permissions
-     * @throws TableNotFoundException
+     * @throws TableNotFoundException 
      */
     public void online(String tableName) throws AccumuloSecurityException, AccumuloException, TableNotFoundException;
     
@@ -449,69 +410,55 @@ public interface TableOperations {
      *             if table does not exist
      */
     public void clearLocatorCache(String tableName) throws TableNotFoundException;
-    
+
     /**
      * Get a mapping of table name to internal table id.
-     * 
      * @return the map from table name to internal table id
      */
-    public Map<String,String> tableIdMap();
+    public Map<String, String> tableIdMap();
     
     /**
      * Add an iterator to a table.
-     * 
-     * @param tableName
-     *            the name of the table
-     * @param setting
-     *            object specifying the properties of the iterator
-     * @throws AccumuloSecurityException
-     *             thrown if the user does not have the ability to set properties on the table
-     * @throws AccumuloException
-     * @throws TableNotFoundException
-     *             throw if the table no longer exists
+     * @param tableName the name of the table
+     * @param setting object specifying the properties of the iterator
+     * @throws AccumuloSecurityException thrown if the user does not have the ability to set properties on the table
+     * @throws AccumuloException 
+     * @throws TableNotFoundException throw if the table no longer exists
      */
-    public void attachIterator(String tableName, IteratorSetting setting) throws AccumuloSecurityException, AccumuloException, TableNotFoundException;
+    public void attachIterator(String tableName, IteratorSetting setting) 
+        throws AccumuloSecurityException, AccumuloException, TableNotFoundException;
     
     /**
      * Remove an iterator from a table by name.
-     * 
-     * @param tableName
-     *            the name of the table
-     * @param name
-     *            the name of the iterator
-     * @throws AccumuloSecurityException
-     *             thrown if the user does not have the ability to set properties on the table
-     * @throws AccumuloException
-     * @throws TableNotFoundException
-     *             throw if the table no longer exists
+     * @param tableName the name of the table
+     * @param name the name of the iterator
+     * @throws AccumuloSecurityException thrown if the user does not have the ability to set properties on the table
+     * @throws AccumuloException 
+     * @throws TableNotFoundException throw if the table no longer exists
      */
-    public void removeIterator(String tableName, String name) throws AccumuloSecurityException, AccumuloException, TableNotFoundException;
+    public void removeIterator(String tableName, String name)
+        throws AccumuloSecurityException, AccumuloException, TableNotFoundException;
     
     /**
      * Get the settings for an iterator
-     * 
-     * @param tableName
-     *            the name of the table
-     * @param name
-     *            the name of the iterator
+     * @param tableName the name of the table
+     * @param name the name of the iterator
      * @return the settings for this iterator
-     * @throws AccumuloSecurityException
-     *             thrown if the user does not have the ability to set properties on the table
-     * @throws AccumuloException
-     * @throws TableNotFoundException
-     *             throw if the table no longer exists
+     * @throws AccumuloSecurityException thrown if the user does not have the ability to set properties on the table
+     * @throws AccumuloException 
+     * @throws TableNotFoundException throw if the table no longer exists
      */
-    public IteratorSetting getIterator(String tableName, String name) throws AccumuloSecurityException, AccumuloException, TableNotFoundException;
+    public IteratorSetting getIterator(String tableName, String name)
+        throws AccumuloSecurityException, AccumuloException, TableNotFoundException;
     
     /**
      * Get a list of iterators for this table.
-     * 
-     * @param tableName
-     *            the name of the table
+     * @param tableName the name of the table
      * @return a set of iterator names
      * @throws AccumuloSecurityException
      * @throws AccumuloException
      * @throws TableNotFoundException
      */
-    public Set<String> getIterators(String tableName) throws AccumuloSecurityException, AccumuloException, TableNotFoundException;
+    public Set<String> getIterators(String tableName)
+        throws AccumuloSecurityException, AccumuloException, TableNotFoundException;
 }