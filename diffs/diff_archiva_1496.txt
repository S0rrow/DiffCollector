diff --git a/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/maven/archiva/webdav/ArchivaDavResource.java b/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/maven/archiva/webdav/ArchivaDavResource.java
index 846c7d6d5..0aadb3c73 100644
--- a/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/maven/archiva/webdav/ArchivaDavResource.java
+++ b/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/maven/archiva/webdav/ArchivaDavResource.java
@@ -24,7 +24,6 @@
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.util.ArrayList;
-import java.util.Calendar;
 import java.util.List;
 
 import javax.servlet.http.HttpServletResponse;
@@ -55,31 +54,20 @@
 import org.apache.jackrabbit.webdav.property.DefaultDavProperty;
 import org.apache.jackrabbit.webdav.property.ResourceType;
 import org.apache.maven.archiva.configuration.ManagedRepositoryConfiguration;
-import org.apache.maven.archiva.database.ArchivaAuditLogsDao;
-import org.apache.maven.archiva.model.ArchivaAuditLogs;
 import org.apache.maven.archiva.repository.audit.AuditEvent;
 import org.apache.maven.archiva.repository.audit.AuditListener;
-import org.apache.maven.archiva.scheduled.ArchivaTaskScheduler;
-import org.apache.maven.archiva.scheduled.tasks.RepositoryTask;
-import org.apache.maven.archiva.scheduled.tasks.TaskCreator;
+import org.apache.maven.archiva.repository.scanner.RepositoryContentConsumers;
+import org.apache.maven.archiva.security.ArchivaXworkUser;
 import org.apache.maven.archiva.webdav.util.IndexWriter;
 import org.apache.maven.archiva.webdav.util.MimeTypes;
-import org.codehaus.plexus.taskqueue.TaskQueueException;
 import org.joda.time.DateTime;
 import org.joda.time.format.DateTimeFormatter;
 import org.joda.time.format.ISODateTimeFormat;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-import javax.servlet.http.HttpServletResponse;
+import com.opensymphony.xwork.ActionContext;
 
 /**
+ * @author <a href="mailto:james@atlassian.com">James William Dumay</a> Portions from the Apache Jackrabbit Project
  */
 public class ArchivaDavResource
     implements DavResource
@@ -97,58 +85,48 @@
     private DavPropertySet properties = null;
 
     private LockManager lockManager;
-
+    
     private final DavSession session;
-
+    
     private String remoteAddr;
 
     private final ManagedRepositoryConfiguration repository;
 
+    private final RepositoryContentConsumers consumers;
+
     private final MimeTypes mimeTypes;
 
     private List<AuditListener> auditListeners;
 
-    private String principal;
-
-    public static final String COMPLIANCE_CLASS = "1, 2";
-
-    private ArchivaTaskScheduler scheduler;
-
-    private Logger log = LoggerFactory.getLogger( ArchivaDavResource.class );
-    
-    private ArchivaAuditLogsDao auditLogsDao;
-
     public ArchivaDavResource( String localResource, String logicalResource, ManagedRepositoryConfiguration repository,
                                DavSession session, ArchivaDavResourceLocator locator, DavResourceFactory factory,
                                MimeTypes mimeTypes, List<AuditListener> auditListeners,
-                               ArchivaTaskScheduler scheduler, ArchivaAuditLogsDao auditLogsDao )
+                               RepositoryContentConsumers consumers )
     {
-        this.localResource = new File( localResource );
+        this.localResource = new File( localResource ); 
         this.logicalResource = logicalResource;
         this.locator = locator;
         this.factory = factory;
         this.session = session;
-
+        
         // TODO: push into locator as well as moving any references out of the resource factory
         this.repository = repository;
-
+        
         // TODO: these should be pushed into the repository layer, along with the physical file operations in this class
         this.mimeTypes = mimeTypes;
+        this.consumers = consumers;
         this.auditListeners = auditListeners;
-        this.scheduler = scheduler;
-        this.auditLogsDao = auditLogsDao;
     }
 
     public ArchivaDavResource( String localResource, String logicalResource, ManagedRepositoryConfiguration repository,
-                               String remoteAddr, String principal, DavSession session, ArchivaDavResourceLocator locator,
+                               String remoteAddr, DavSession session, ArchivaDavResourceLocator locator,
                                DavResourceFactory factory, MimeTypes mimeTypes, List<AuditListener> auditListeners,
-                               ArchivaTaskScheduler scheduler, ArchivaAuditLogsDao auditLogsDao )
+                               RepositoryContentConsumers consumers )
     {
         this( localResource, logicalResource, repository, session, locator, factory, mimeTypes, auditListeners,
-              scheduler, auditLogsDao );
+              consumers );
 
         this.remoteAddr = remoteAddr;
-        this.principal = principal;
     }
 
     public String getComplianceClass()
@@ -206,16 +184,13 @@ public void spool( OutputContext outputContext )
         throws IOException
     {
         if ( !isCollection() )
-        {
-            outputContext.setContentLength( localResource.length() );
-            outputContext.setContentType( mimeTypes.getMimeType( localResource.getName() ) );
-        }
-
-        if ( !isCollection() && outputContext.hasStream() )
         {
             FileInputStream is = null;
             try
             {
+                outputContext.setContentLength( localResource.length() );
+                outputContext.setContentType( mimeTypes.getMimeType( localResource.getName() ) );
+
                 // Write content to stream
                 is = new FileInputStream( localResource );
                 IOUtils.copy( is, outputContext.getOutputStream() );
@@ -225,7 +200,7 @@ public void spool( OutputContext outputContext )
                 IOUtils.closeQuietly( is );
             }
         }
-        else if ( outputContext.hasStream() )
+        else
         {
             IndexWriter writer = new IndexWriter( this, localResource, logicalResource );
             writer.write( outputContext );
@@ -263,7 +238,7 @@ public MultiStatusResponse alterProperties( DavPropertySet setProperties, DavPro
         return null;
     }
 
-    @SuppressWarnings( "unchecked" )
+    @SuppressWarnings("unchecked")
     public MultiStatusResponse alterProperties( List changeList )
         throws DavException
     {
@@ -280,8 +255,7 @@ public DavResource getCollection()
             {
                 parentPath = "/";
             }
-            DavResourceLocator parentloc = locator.getFactory().createResourceLocator( locator.getPrefix(),
-                                                                                       parentPath );
+            DavResourceLocator parentloc = locator.getFactory().createResourceLocator( locator.getPrefix(), parentPath );
             try
             {
                 parent = factory.createResource( parentloc, session );
@@ -316,40 +290,30 @@ public void addMember( DavResource resource, InputContext inputContext )
             {
                 IOUtils.closeQuietly( stream );
             }
-
-            // TODO: a bad deployment shouldn't delete an existing file - do we need to write to a temporary location first?
+            
             if ( inputContext.getContentLength() != localFile.length() )
             {
                 FileUtils.deleteQuietly( localFile );
-
-                String msg =
-                    "Content Header length was " + inputContext.getContentLength() + " but was " + localFile.length();
-                log.debug( "Upload failed: " + msg );
-                throw new DavException( HttpServletResponse.SC_BAD_REQUEST, msg );
+                
+                throw new DavException( HttpServletResponse.SC_BAD_REQUEST, "Content Header length was " +
+                    inputContext.getContentLength() + " but was " + localFile.length() );
             }
-
-            queueRepositoryTask( localFile );
-
-            log.debug(
-                "File '" + resource.getDisplayName() + ( exists ? "' modified " : "' created " ) + "(current user '" +
-                    this.principal + "')" );
-
+            
+            // Just-in-time update of the index and database by executing the consumers for this artifact
+            consumers.executeConsumers( repository, localFile );
+            
             triggerAuditEvent( resource, exists ? AuditEvent.MODIFY_FILE : AuditEvent.CREATE_FILE );
         }
         else if ( !inputContext.hasStream() && isCollection() ) // New directory
         {
             localFile.mkdir();
-
-            log.debug( "Directory '" + resource.getDisplayName() + "' (current user '" + this.principal + "')" );
-
+            
             triggerAuditEvent( resource, AuditEvent.CREATE_DIR );
         }
         else
         {
-            String msg = "Could not write member " + resource.getResourcePath() + " at " + getResourcePath() +
-                " as this is not a DAV collection";
-            log.debug( msg );
-            throw new DavException( HttpServletResponse.SC_BAD_REQUEST, msg );
+            throw new DavException( HttpServletResponse.SC_BAD_REQUEST, "Could not write member " +
+                resource.getResourcePath() + " at " + getResourcePath() );
         }
     }
 
@@ -365,15 +329,13 @@ public DavResourceIterator getMembers()
                     if ( !item.startsWith( HIDDEN_PATH_PREFIX ) )
                     {
                         String path = locator.getResourcePath() + '/' + item;
-                        DavResourceLocator resourceLocator = locator.getFactory().createResourceLocator(
-                            locator.getPrefix(), path );
+                        DavResourceLocator resourceLocator =
+                            locator.getFactory().createResourceLocator( locator.getPrefix(), path );
                         DavResource resource = factory.createResource( resourceLocator, session );
-
                         if ( resource != null )
                         {
                             list.add( resource );
                         }
-                        log.debug( "Resource '" + item + "' retrieved by '" + this.principal + "'" );
                     }
                 }
                 catch ( DavException e )
@@ -389,7 +351,7 @@ public void removeMember( DavResource member )
         throws DavException
     {
         File resource = checkDavResourceIsArchivaDavResource( member ).getLocalResource();
-
+        
         if ( resource.exists() )
         {
             try
@@ -409,8 +371,6 @@ public void removeMember( DavResource member )
 
                     triggerAuditEvent( member, AuditEvent.REMOVE_FILE );
                 }
-                log.debug( ( resource.isDirectory() ? "Directory '" : "File '" ) + member.getDisplayName() +
-                    "' removed (current user '" + this.principal + "')" );
             }
             catch ( IOException e )
             {
@@ -423,8 +383,7 @@ public void removeMember( DavResource member )
         }
     }
 
-    private void triggerAuditEvent( DavResource member, String event )
-        throws DavException
+    private void triggerAuditEvent( DavResource member, String event ) throws DavException
     {
         String path = logicalResource + "/" + member.getDisplayName();
         
@@ -455,9 +414,6 @@ public void move( DavResource destination )
 
                 triggerAuditEvent( remoteAddr, locator.getRepositoryId(), logicalResource, AuditEvent.MOVE_FILE );
             }
-
-            log.debug( ( isCollection() ? "Directory '" : "File '" ) + getLocalResource().getName() + "' moved to '" +
-                destination + "' (current user '" + this.principal + "')" );
         }
         catch ( IOException e )
         {
@@ -493,8 +449,6 @@ public void copy( DavResource destination, boolean shallow )
 
                 triggerAuditEvent( remoteAddr, locator.getRepositoryId(), logicalResource, AuditEvent.COPY_FILE );
             }
-            log.debug( ( isCollection() ? "Directory '" : "File '" ) + getLocalResource().getName() + "' copied to '" +
-                destination + "' (current user '" + this.principal + "')" );
         }
         catch ( IOException e )
         {
@@ -504,41 +458,41 @@ public void copy( DavResource destination, boolean shallow )
 
     public boolean isLockable( Type type, Scope scope )
     {
-        return Type.WRITE.equals( type ) && Scope.EXCLUSIVE.equals( scope );
+        return Type.WRITE.equals(type) && Scope.EXCLUSIVE.equals(scope);
     }
 
     public boolean hasLock( Type type, Scope scope )
     {
-        return getLock( type, scope ) != null;
+        return getLock(type, scope) != null;
     }
 
     public ActiveLock getLock( Type type, Scope scope )
     {
         ActiveLock lock = null;
-        if ( exists() && Type.WRITE.equals( type ) && Scope.EXCLUSIVE.equals( scope ) )
+        if (exists() && Type.WRITE.equals(type) && Scope.EXCLUSIVE.equals(scope)) 
         {
-            lock = lockManager.getLock( type, scope, this );
+            lock = lockManager.getLock(type, scope, this);
         }
         return lock;
     }
 
     public ActiveLock[] getLocks()
     {
-        ActiveLock writeLock = getLock( Type.WRITE, Scope.EXCLUSIVE );
-        return ( writeLock != null ) ? new ActiveLock[]{writeLock} : new ActiveLock[0];
+        ActiveLock writeLock = getLock(Type.WRITE, Scope.EXCLUSIVE);
+        return (writeLock != null) ? new ActiveLock[]{writeLock} : new ActiveLock[0];
     }
 
     public ActiveLock lock( LockInfo lockInfo )
         throws DavException
     {
         ActiveLock lock = null;
-        if ( isLockable( lockInfo.getType(), lockInfo.getScope() ) )
+        if (isLockable(lockInfo.getType(), lockInfo.getScope())) 
         {
-            lock = lockManager.createLock( lockInfo, this );
+            lock = lockManager.createLock(lockInfo, this);
         }
-        else
+        else 
         {
-            throw new DavException( DavServletResponse.SC_PRECONDITION_FAILED, "Unsupported lock type or scope." );
+            throw new DavException(DavServletResponse.SC_PRECONDITION_FAILED, "Unsupported lock type or scope.");
         }
         return lock;
     }
@@ -546,18 +500,15 @@ public ActiveLock lock( LockInfo lockInfo )
     public ActiveLock refreshLock( LockInfo lockInfo, String lockToken )
         throws DavException
     {
-        if ( !exists() )
-        {
-            throw new DavException( DavServletResponse.SC_NOT_FOUND );
+        if (!exists()) {
+            throw new DavException(DavServletResponse.SC_NOT_FOUND);
         }
-        ActiveLock lock = getLock( lockInfo.getType(), lockInfo.getScope() );
-        if ( lock == null )
-        {
-            throw new DavException( DavServletResponse.SC_PRECONDITION_FAILED,
-                                    "No lock with the given type/scope present on resource " + getResourcePath() );
+        ActiveLock lock = getLock(lockInfo.getType(), lockInfo.getScope());
+        if (lock == null) {
+            throw new DavException(DavServletResponse.SC_PRECONDITION_FAILED, "No lock with the given type/scope present on resource " + getResourcePath());
         }
 
-        lock = lockManager.refreshLock( lockInfo, lockToken, this );
+        lock = lockManager.refreshLock(lockInfo, lockToken, this);
 
         return lock;
     }
@@ -565,18 +516,18 @@ public ActiveLock refreshLock( LockInfo lockInfo, String lockToken )
     public void unlock( String lockToken )
         throws DavException
     {
-        ActiveLock lock = getLock( Type.WRITE, Scope.EXCLUSIVE );
-        if ( lock == null )
+        ActiveLock lock = getLock(Type.WRITE, Scope.EXCLUSIVE);
+        if (lock == null)
         {
-            throw new DavException( HttpServletResponse.SC_PRECONDITION_FAILED );
+            throw new DavException(HttpServletResponse.SC_PRECONDITION_FAILED);
         }
-        else if ( lock.isLockedByToken( lockToken ) )
+        else if (lock.isLockedByToken(lockToken))
         {
-            lockManager.releaseLock( lockToken, this );
+            lockManager.releaseLock(lockToken, this);
         }
         else
         {
-            throw new DavException( DavServletResponse.SC_LOCKED );
+            throw new DavException(DavServletResponse.SC_LOCKED);
         }
     }
 
@@ -604,14 +555,14 @@ protected DavPropertySet initProperties()
         {
             properties = new DavPropertySet();
         }
-
+        
         if ( properties != null )
         {
             return properties;
         }
 
         DavPropertySet properties = new DavPropertySet();
-
+        
         // set (or reset) fundamental properties
         if ( getDisplayName() != null )
         {
@@ -641,9 +592,9 @@ protected DavPropertySet initProperties()
         properties.add( new DefaultDavProperty( DavPropertyName.CREATIONDATE, modifiedDate ) );
 
         properties.add( new DefaultDavProperty( DavPropertyName.GETCONTENTLENGTH, localResource.length() ) );
-
+        
         this.properties = properties;
-
+        
         return properties;
     }
 
@@ -660,49 +611,13 @@ private ArchivaDavResource checkDavResourceIsArchivaDavResource( DavResource res
 
     private void triggerAuditEvent( String remoteIP, String repositoryId, String resource, String action )
     {
-        AuditEvent event = new AuditEvent( repositoryId, principal, resource, action );
+        String activePrincipal = ArchivaXworkUser.getActivePrincipal( ActionContext.getContext().getSession() );
+        AuditEvent event = new AuditEvent( repositoryId, activePrincipal, resource, action );
         event.setRemoteIP( remoteIP );
 
         for ( AuditListener listener : auditListeners )
         {
             listener.auditEvent( event );
         }
-        
-        // identify as artifact deployment/upload
-        if( action.equals( AuditEvent.CREATE_FILE ) )
-        {
-            action = AuditEvent.UPLOAD_FILE;
-        }
-        
-        String user = principal;
-        if( principal == null )
-        {
-            user = "guest";
-        }
-        
-        ArchivaAuditLogs auditLogs = new ArchivaAuditLogs();
-        auditLogs.setArtifact( resource );
-        auditLogs.setEvent( action );
-        auditLogs.setEventDate( Calendar.getInstance().getTime() );
-        auditLogs.setRepositoryId( repositoryId );
-        auditLogs.setUsername( user );
-        
-        auditLogsDao.saveAuditLogs( auditLogs );
-    }
-
-    private void queueRepositoryTask( File localFile )
-    {
-        RepositoryTask task = TaskCreator.createRepositoryTask( repository.getId(), localFile, false, true );
-        
-        try
-        {
-            scheduler.queueRepositoryTask( task );
-        }
-        catch ( TaskQueueException e )
-        {
-            log.error(
-                "Unable to queue repository task to execute consumers on resource file ['" + localFile.getName() +
-                    "']." );
-        }
     }
 }