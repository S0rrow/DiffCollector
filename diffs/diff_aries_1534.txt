diff --git a/blueprint-core/src/main/java/org/apache/geronimo/blueprint/container/BlueprintEventDispatcher.java b/blueprint-core/src/main/java/org/apache/geronimo/blueprint/container/BlueprintEventDispatcher.java
index b1b0b8b2a..282ddf344 100644
--- a/blueprint-core/src/main/java/org/apache/geronimo/blueprint/container/BlueprintEventDispatcher.java
+++ b/blueprint-core/src/main/java/org/apache/geronimo/blueprint/container/BlueprintEventDispatcher.java
@@ -18,7 +18,6 @@
  */
 package org.apache.geronimo.blueprint.container;
 
-import java.util.Arrays;
 import java.util.Dictionary;
 import java.util.Hashtable;
 import java.util.Map;
@@ -59,16 +58,8 @@ public class BlueprintEventDispatcher implements BlueprintListener, EventConstan
     public BlueprintEventDispatcher(final BundleContext bundleContext) {
         this.states = new ConcurrentHashMap<Bundle, BlueprintEvent>();
         this.executor = Executors.newSingleThreadExecutor();
-        ServiceTracker eaTracker = null;
-        try {
-            eaTracker = new ServiceTracker(bundleContext, EventAdmin.class.getName(), null);
-        } catch (NoClassDefFoundError e) {
-            // Ignore, if the EventAdmin package is not available, just don't use it
-        }
-        this.eventAdminServiceTracker = eaTracker;
-        if (this.eventAdminServiceTracker != null) {
-            this.eventAdminServiceTracker.open();
-        }
+        this.eventAdminServiceTracker = new ServiceTracker(bundleContext, EventAdmin.class.getName(), null);
+        this.eventAdminServiceTracker.open();
         this.containerListenerTracker = new ServiceTracker(bundleContext, BlueprintListener.class.getName(), new ServiceTrackerCustomizer() {
             public Object addingService(ServiceReference reference) {
                 BlueprintListener listener = (BlueprintListener) bundleContext.getService(reference);
@@ -87,61 +78,89 @@ public class BlueprintEventDispatcher implements BlueprintListener, EventConstan
     protected void sendInitialEvents(BlueprintListener listener) {
         if (states != null) {
             for (Map.Entry<Bundle, BlueprintEvent> entry : states.entrySet()) {
-                listener.blueprintEvent(new BlueprintEvent(entry.getValue(), true));
+                listener.blueprintEvent(entry.getValue());
             }
         }
     }
 
     public void blueprintEvent(final BlueprintEvent event) {
-        if (LOGGER.isDebugEnabled()) {
-            LOGGER.debug("Sending blueprint container event {} for bundle {}", toString(event), event.getBundle().getSymbolicName());
-        }
+        LOGGER.debug("Sending blueprint container event {} for bundle {}", event, event.getBundle().getSymbolicName());
         states.put(event.getBundle(), event);
         executor.submit(new Runnable() {
             public void run() {
                 callListeners(event);
-                if (BlueprintEventDispatcher.this.eventAdminServiceTracker instanceof BlueprintListener) {
-                    ((BlueprintListener) BlueprintEventDispatcher.this.eventAdminServiceTracker).blueprintEvent(event);
-                }
+                sendEventAdmin(event);
             }
         });
     }
 
-    private String toString(BlueprintEvent event) {
-        return "BlueprintEvent[type=" + getEventType(event.getType())
-                        + (event.getDependencies() != null ? ", dependencies=" + Arrays.asList(event.getDependencies()) : "")
-                        + (event.getException() != null ? ", exception=" + event.getException().getMessage() : "")
-                        + "]";
+    private void callListeners(BlueprintEvent event) {
+        Object[] listeners = containerListenerTracker.getServices();
+        if (listeners != null) {
+            for (Object listener : listeners) {
+                ((BlueprintListener) listener).blueprintEvent(event);
+            }
+        }
     }
 
-    private String getEventType(int type) {
-        switch (type) {
+    private void sendEventAdmin(BlueprintEvent event) {
+        EventAdmin eventAdmin = getEventAdmin();
+        if (eventAdmin == null) {
+            return;
+        }
+
+        Dictionary<String,Object> props = new Hashtable<String,Object>();
+        props.put(EventConstants.TYPE, event.getType());
+        props.put(EventConstants.EVENT, event);
+        props.put(EventConstants.TIMESTAMP, event.getTimestamp());
+        props.put(EventConstants.BUNDLE, event.getBundle());
+        props.put(EventConstants.BUNDLE_SYMBOLICNAME, event.getBundle().getSymbolicName());
+        props.put(EventConstants.BUNDLE_ID, event.getBundle().getBundleId());
+        Version version = getBundleVersion(event.getBundle());
+        if (version != null) {
+            props.put(EventConstants.BUNDLE_VERSION, version);
+        }
+        props.put(EventConstants.EXTENDER_BUNDLE, event.getExtenderBundle());
+        props.put(EventConstants.EXTENDER_BUNDLE_ID, event.getExtenderBundle().getBundleId());
+        props.put(EventConstants.EXTENDER_BUNDLE_SYMBOLICNAME, event.getExtenderBundle().getSymbolicName());
+        version = getBundleVersion(event.getExtenderBundle());
+        if (version != null) {
+            props.put(EventConstants.EXTENDER_BUNDLE_VERSION, version);
+        }
+
+        if (event.getException() != null) {
+            props.put(EventConstants.EXCEPTION, event.getException());
+        }
+        if (event.getDependencies() != null) {
+            props.put(EventConstants.DEPENDENCIES, event.getDependencies());
+        }
+        String topic;
+        switch (event.getType()) {
             case BlueprintEvent.CREATING:
-                return "CREATING";
+                topic = EventConstants.TOPIC_CREATING;
+                break;
             case BlueprintEvent.CREATED:
-                return "CREATED";
+                topic = EventConstants.TOPIC_CREATED;
+                break;
             case BlueprintEvent.DESTROYING:
-                return "DESTROYING";
+                topic = EventConstants.TOPIC_DESTROYING;
+                break;
             case BlueprintEvent.DESTROYED:
-                return "DESTROYED";
+                topic = EventConstants.TOPIC_DESTROYED;
+                break;
             case BlueprintEvent.FAILURE:
-                return "FAILURE";
+                topic = EventConstants.TOPIC_FAILURE;
+                break;
             case BlueprintEvent.GRACE_PERIOD:
-                return "GRACE_PERIOD";
+                topic = EventConstants.TOPIC_GRACE_PERIOD;
+                break;
             case BlueprintEvent.WAITING:
-                return "WAITING";
+                topic = EventConstants.TOPIC_WAITING;
+                break;
             default:
-                return "UNKNOWN";
-        }
-    }
-
-    private void callListeners(BlueprintEvent event) {
-        Object[] listeners = containerListenerTracker.getServices();
-        if (listeners != null) {
-            for (Object listener : listeners) {
-                ((BlueprintListener) listener).blueprintEvent(event);
-            }
+                throw new IllegalStateException("Unknown blueprint event type: " + event.getType());
         }
+        eventAdmin.postEvent(new Event(topic, props));
     }
 
     private static Version getBundleVersion(Bundle bundle) {
@@ -150,79 +169,13 @@ public class BlueprintEventDispatcher implements BlueprintListener, EventConstan
         return (version != null) ? Version.parseVersion(version) : null;
     }
     
+    private EventAdmin getEventAdmin() {
+        return (EventAdmin)this.eventAdminServiceTracker.getService();
+    }
+
     public void destroy() {
         this.executor.shutdown();
-        if (this.eventAdminServiceTracker != null) {
-            this.eventAdminServiceTracker.close();
-        }
+        this.eventAdminServiceTracker.close();
         this.containerListenerTracker.close();
     }
-
-    static class EvenAdminDispatcher extends ServiceTracker implements BlueprintListener {
-
-        EvenAdminDispatcher(BundleContext context) {
-            super(context, EventAdmin.class.getName(), null);
-        }
-
-        public void blueprintEvent(BlueprintEvent event) {
-            EventAdmin eventAdmin = (EventAdmin) getService();
-            if (eventAdmin == null) {
-                return;
-            }
-
-            Dictionary<String,Object> props = new Hashtable<String,Object>();
-            props.put(EventConstants.TYPE, event.getType());
-            props.put(EventConstants.EVENT, event);
-            props.put(EventConstants.TIMESTAMP, event.getTimestamp());
-            props.put(EventConstants.BUNDLE, event.getBundle());
-            props.put(EventConstants.BUNDLE_SYMBOLICNAME, event.getBundle().getSymbolicName());
-            props.put(EventConstants.BUNDLE_ID, event.getBundle().getBundleId());
-            Version version = getBundleVersion(event.getBundle());
-            if (version != null) {
-                props.put(EventConstants.BUNDLE_VERSION, version);
-            }
-            props.put(EventConstants.EXTENDER_BUNDLE, event.getExtenderBundle());
-            props.put(EventConstants.EXTENDER_BUNDLE_ID, event.getExtenderBundle().getBundleId());
-            props.put(EventConstants.EXTENDER_BUNDLE_SYMBOLICNAME, event.getExtenderBundle().getSymbolicName());
-            version = getBundleVersion(event.getExtenderBundle());
-            if (version != null) {
-                props.put(EventConstants.EXTENDER_BUNDLE_VERSION, version);
-            }
-
-            if (event.getException() != null) {
-                props.put(EventConstants.EXCEPTION, event.getException());
-            }
-            if (event.getDependencies() != null) {
-                props.put(EventConstants.DEPENDENCIES, event.getDependencies());
-            }
-            String topic;
-            switch (event.getType()) {
-                case BlueprintEvent.CREATING:
-                    topic = EventConstants.TOPIC_CREATING;
-                    break;
-                case BlueprintEvent.CREATED:
-                    topic = EventConstants.TOPIC_CREATED;
-                    break;
-                case BlueprintEvent.DESTROYING:
-                    topic = EventConstants.TOPIC_DESTROYING;
-                    break;
-                case BlueprintEvent.DESTROYED:
-                    topic = EventConstants.TOPIC_DESTROYED;
-                    break;
-                case BlueprintEvent.FAILURE:
-                    topic = EventConstants.TOPIC_FAILURE;
-                    break;
-                case BlueprintEvent.GRACE_PERIOD:
-                    topic = EventConstants.TOPIC_GRACE_PERIOD;
-                    break;
-                case BlueprintEvent.WAITING:
-                    topic = EventConstants.TOPIC_WAITING;
-                    break;
-                default:
-                    throw new IllegalStateException("Unknown blueprint event type: " + event.getType());
-            }
-            eventAdmin.postEvent(new Event(topic, props));
-        }
-
-    }
 }