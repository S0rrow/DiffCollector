diff --git a/src/server/src/main/java/org/apache/accumulo/server/util/Initialize.java b/src/server/src/main/java/org/apache/accumulo/server/util/Initialize.java
index 3db6d0dc29..ca9520d99c 100644
--- a/src/server/src/main/java/org/apache/accumulo/server/util/Initialize.java
+++ b/src/server/src/main/java/org/apache/accumulo/server/util/Initialize.java
@@ -35,7 +35,7 @@ import org.apache.accumulo.core.data.Value;
 import org.apache.accumulo.core.file.FileOperations;
 import org.apache.accumulo.core.file.FileSKVWriter;
 import org.apache.accumulo.core.file.FileUtil;
-import org.apache.accumulo.core.iterators.user.VersioningIterator;
+import org.apache.accumulo.core.iterators.VersioningIterator;
 import org.apache.accumulo.core.master.state.tables.TableState;
 import org.apache.accumulo.core.master.thrift.MasterGoalState;
 import org.apache.accumulo.core.util.CachedConfiguration;
@@ -46,10 +46,8 @@ import org.apache.accumulo.server.ServerConstants;
 import org.apache.accumulo.server.client.HdfsZooInstance;
 import org.apache.accumulo.server.conf.ServerConfiguration;
 import org.apache.accumulo.server.constraints.MetadataConstraints;
-import org.apache.accumulo.server.iterators.MetadataBulkLoadFilter;
 import org.apache.accumulo.server.master.state.tables.TableManager;
 import org.apache.accumulo.server.security.SecurityConstants;
-import org.apache.accumulo.server.security.SecurityUtil;
 import org.apache.accumulo.server.security.ZKAuthenticator;
 import org.apache.accumulo.server.tabletserver.TabletTime;
 import org.apache.accumulo.server.zookeeper.IZooReaderWriter;
@@ -75,8 +73,7 @@ public class Initialize {
   private static ConsoleReader reader = null;
   
   private static ConsoleReader getConsoleReader() throws IOException {
-    if (reader == null)
-      reader = new ConsoleReader();
+    if (reader == null) reader = new ConsoleReader();
     return reader;
   }
   
@@ -94,7 +91,6 @@ public class Initialize {
     initialMetadataConf.put(Property.TABLE_ITERATOR_PREFIX.getKey() + "minc.vers.opt.maxVersions", "1");
     initialMetadataConf.put(Property.TABLE_ITERATOR_PREFIX.getKey() + "majc.vers", "10," + VersioningIterator.class.getName());
     initialMetadataConf.put(Property.TABLE_ITERATOR_PREFIX.getKey() + "majc.vers.opt.maxVersions", "1");
-    initialMetadataConf.put(Property.TABLE_ITERATOR_PREFIX.getKey() + "majc.bulkLoadFilter", "20," + MetadataBulkLoadFilter.class.getName());
     initialMetadataConf.put(Property.TABLE_FAILURES_IGNORE.getKey(), "false");
     initialMetadataConf.put(Property.TABLE_LOCALITY_GROUP_PREFIX.getKey() + "tablet",
         String.format("%s,%s", Constants.METADATA_TABLET_COLUMN_FAMILY.toString(), Constants.METADATA_CURRENT_LOCATION_COLUMN_FAMILY.toString()));
@@ -108,18 +104,12 @@ public class Initialize {
   }
   
   public static boolean doInit(Configuration conf, FileSystem fs) throws IOException {
-    if (!ServerConfiguration.getSiteConfiguration().get(Property.INSTANCE_DFS_URI).equals(""))
-      log.info("Hadoop Filesystem is " + ServerConfiguration.getSiteConfiguration().get(Property.INSTANCE_DFS_URI));
-    else
-      log.info("Hadoop Filesystem is " + FileSystem.getDefaultUri(conf));
+    if (!ServerConfiguration.getSiteConfiguration().get(Property.INSTANCE_DFS_URI).equals("")) log.info("Hadoop Filesystem is "
+        + ServerConfiguration.getSiteConfiguration().get(Property.INSTANCE_DFS_URI));
+    else log.info("Hadoop Filesystem is " + FileSystem.getDefaultUri(conf));
     
     log.info("Accumulo data dir is " + ServerConstants.getBaseDir());
     log.info("Zookeeper server is " + ServerConfiguration.getSiteConfiguration().get(Property.INSTANCE_ZK_HOST));
-    log.info("Checking if Zookeeper is available. If this hangs, then you need to make sure zookeeper is running");
-    if (!zookeeperAvailable()) {
-      log.fatal("Zookeeper needs to be up and running in order to init. Exiting ...");
-      return false;
-    }
     if (ServerConfiguration.getSiteConfiguration().get(Property.INSTANCE_SECRET).equals(Property.INSTANCE_SECRET.getDefaultValue())) {
       ConsoleReader c = getConsoleReader();
       c.beep();
@@ -129,11 +119,9 @@ public class Initialize {
       c.printNewline();
       c.printNewline();
       c.printNewline();
-      c.printString("You can change the instance secret in accumulo by using:");
-      c.printNewline();
-      c.printString("   bin/accumulo " + org.apache.accumulo.server.util.ChangeSecret.class.getName() + " oldPassword newPassword.");
-      c.printNewline();
-      c.printString("You will also need to edit your secret in your configuration file by adding the property instance.secret to your conf/accumulo-site.xml. Without this accumulo will not operate correctly");
+      c.printString("You can change the instance secret in accumulo by using: bin/accumulo "
+          + org.apache.accumulo.server.util.ChangeSecret.class.getName()
+          + " oldPassword newPassword. You will also need to edit your secret in your configuration file by adding the property instance.secret to your conf/accumulo-site.xml. Without this accumulo will not operate correctly");
       c.printNewline();
     }
     
@@ -182,20 +170,6 @@ public class Initialize {
     return true;
   }
   
-  /**
-   * @return
-   */
-  private static boolean zookeeperAvailable() {
-    IZooReaderWriter zoo = ZooReaderWriter.getInstance();
-    try {
-      return zoo.exists("/");
-    } catch (KeeperException e) {
-      return false;
-    } catch (InterruptedException e) {
-      return false;
-    }
-  }
-
   private static void initFileSystem(FileSystem fs, Configuration conf, UUID uuid) throws IOException {
     FileStatus fstat;
     
@@ -337,8 +311,7 @@ public class Initialize {
     ZooUtil.putPersistentData(zoo.getZooKeeper(), Constants.ZROOT + Constants.ZINSTANCES, new byte[0], -1, NodeExistsPolicy.SKIP, Ids.OPEN_ACL_UNSAFE);
     
     // setup instance name
-    if (clearInstanceName)
-      zoo.recursiveDelete(instanceNamePath, NodeMissingPolicy.SKIP);
+    if (clearInstanceName) zoo.recursiveDelete(instanceNamePath, NodeMissingPolicy.SKIP);
     zoo.putPersistentData(instanceNamePath, uuid.getBytes(), NodeExistsPolicy.FAIL);
     
     // setup the instance
@@ -369,19 +342,16 @@ public class Initialize {
     boolean exists = true;
     do {
       instanceName = getConsoleReader().readLine("Instance name : ");
-      if (instanceName == null)
-        System.exit(0);
+      if (instanceName == null) System.exit(0);
       instanceName = instanceName.trim();
-      if (instanceName.length() == 0)
-        continue;
+      if (instanceName.length() == 0) continue;
       instanceNamePath = Constants.ZROOT + Constants.ZINSTANCES + "/" + instanceName;
       if (clearInstanceName) {
         exists = false;
         break;
       } else if ((boolean) (exists = ZooReaderWriter.getInstance().exists(instanceNamePath))) {
         String decision = getConsoleReader().readLine("Instance name \"" + instanceName + "\" exists. Delete existing entry from zookeeper? [Y/N] : ");
-        if (decision == null)
-          System.exit(0);
+        if (decision == null) System.exit(0);
         if (decision.length() == 1 && decision.toLowerCase(Locale.ENGLISH).charAt(0) == 'y') {
           clearInstanceName = true;
           exists = false;
@@ -396,13 +366,10 @@ public class Initialize {
     String confirmpass;
     do {
       rootpass = getConsoleReader().readLine("Enter initial password for " + ROOT_USER + ": ", '*');
-      if (rootpass == null)
-        System.exit(0);
+      if (rootpass == null) System.exit(0);
       confirmpass = getConsoleReader().readLine("Confirm initial password for " + ROOT_USER + ": ", '*');
-      if (confirmpass == null)
-        System.exit(0);
-      if (!rootpass.equals(confirmpass))
-        log.error("Passwords do not match");
+      if (confirmpass == null) System.exit(0);
+      if (!rootpass.equals(confirmpass)) log.error("Passwords do not match");
     } while (!rootpass.equals(confirmpass));
     return rootpass.getBytes();
   }
@@ -414,8 +381,8 @@ public class Initialize {
   protected static void initMetadataConfig() throws IOException {
     try {
       for (Entry<String,String> entry : initialMetadataConf.entrySet())
-        if (!TablePropUtil.setTableProperty(Constants.METADATA_TABLE_ID, entry.getKey(), entry.getValue()))
-          throw new IOException("Cannot create per-table property " + entry.getKey());
+        if (!TablePropUtil.setTableProperty(Constants.METADATA_TABLE_ID, entry.getKey(), entry.getValue())) throw new IOException(
+            "Cannot create per-table property " + entry.getKey());
     } catch (Exception e) {
       log.fatal("error talking to zookeeper", e);
       throw new IOException(e);
@@ -443,17 +410,11 @@ public class Initialize {
     
     try {
       Configuration conf = CachedConfiguration.getInstance();
-      SecurityUtil.serverLogin();
-      
       FileSystem fs = FileUtil.getFileSystem(conf, ServerConfiguration.getSiteConfiguration());
-
       if (justSecurity) {
-        if (isInitialized(fs))
-          initSecurity(HdfsZooInstance.getInstance().getInstanceID(), getRootPassword());
-        else
-          log.fatal("Attempted to reset security on accumulo before it was initialized");
-      } else if (!doInit(conf, fs))
-        System.exit(-1);
+        if (isInitialized(fs)) initSecurity(HdfsZooInstance.getInstance().getInstanceID(), getRootPassword());
+        else log.fatal("Attempted to reset security on accumulo before it was initialized");
+      } else if (!doInit(conf, fs)) System.exit(-1);
     } catch (Exception e) {
       log.fatal(e, e);
       throw new RuntimeException(e);