diff --git a/hyracks/hyracks-client/src/main/java/edu/uci/ics/hyracks/client/dataset/HyracksDatasetReader.java b/hyracks/hyracks-client/src/main/java/edu/uci/ics/hyracks/client/dataset/HyracksDatasetReader.java
index 51e4950d5f..78bcf208f6 100644
--- a/hyracks/hyracks-client/src/main/java/edu/uci/ics/hyracks/client/dataset/HyracksDatasetReader.java
+++ b/hyracks/hyracks-client/src/main/java/edu/uci/ics/hyracks/client/dataset/HyracksDatasetReader.java
@@ -1,5 +1,5 @@
 /*
- * Copyright 2009-2013 by The Regents of the University of California
+ * Copyright 2009-2010 by The Regents of the University of California
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * you may obtain a copy of the License from
@@ -26,7 +26,7 @@ import java.util.logging.Logger;
 import edu.uci.ics.hyracks.api.channels.IInputChannel;
 import edu.uci.ics.hyracks.api.comm.NetworkAddress;
 import edu.uci.ics.hyracks.api.dataset.DatasetDirectoryRecord;
-import edu.uci.ics.hyracks.api.dataset.DatasetJobRecord.Status;
+import edu.uci.ics.hyracks.api.dataset.DatasetDirectoryRecord.Status;
 import edu.uci.ics.hyracks.api.dataset.IDatasetInputChannelMonitor;
 import edu.uci.ics.hyracks.api.dataset.IHyracksDatasetDirectoryServiceConnection;
 import edu.uci.ics.hyracks.api.dataset.IHyracksDatasetReader;
@@ -101,20 +101,24 @@ public class HyracksDatasetReader implements IHyracksDatasetReader {
                             knownRecords);
                     lastReadPartition = 0;
                     resultChannel = new DatasetNetworkInputChannel(netManager,
-                            getSocketAddress(knownRecords[lastReadPartition]), jobId, resultSetId, lastReadPartition,
+                            getSocketAddress(knownRecords[lastReadPartition]), jobId, lastReadPartition,
                             NUM_READ_BUFFERS);
                     lastMonitor = getMonitor(lastReadPartition);
-                    resultChannel.registerMonitor(lastMonitor);
                     resultChannel.open(datasetClientCtx);
-                } catch (Exception e) {
+                    resultChannel.registerMonitor(lastMonitor);
+                } catch (HyracksException e) {
+                    throw new HyracksDataException(e);
+                } catch (UnknownHostException e) {
                     throw new HyracksDataException(e);
+                } catch (Exception e) {
+                    // Do nothing here.
                 }
             }
         }
 
-        while (readSize <= 0 && !(isLastPartitionReadComplete())) {
+        while (readSize <= 0 && !((lastReadPartition == knownRecords.length - 1) && (lastMonitor.eosReached()))) {
             synchronized (lastMonitor) {
-                while (lastMonitor.getNFramesAvailable() <= 0 && !lastMonitor.eosReached() && !lastMonitor.failed()) {
+                while (lastMonitor.getNFramesAvailable() <= 0 && !lastMonitor.eosReached()) {
                     try {
                         lastMonitor.wait();
                     } catch (InterruptedException e) {
@@ -123,10 +127,7 @@ public class HyracksDatasetReader implements IHyracksDatasetReader {
                 }
             }
 
-            if (lastMonitor.failed()) {
-                throw new HyracksDataException("Job Failed.");
-            }
-            if (isPartitionReadComplete(lastMonitor)) {
+            if (lastMonitor.getNFramesAvailable() <= 0 && lastMonitor.eosReached()) {
                 knownRecords[lastReadPartition].readEOS();
                 if ((lastReadPartition == knownRecords.length - 1)) {
                     break;
@@ -134,17 +135,23 @@ public class HyracksDatasetReader implements IHyracksDatasetReader {
                     try {
                         lastReadPartition++;
                         while (knownRecords[lastReadPartition] == null) {
-                            knownRecords = datasetDirectoryServiceConnection.getDatasetResultLocations(jobId,
-                                    resultSetId, knownRecords);
+                            try {
+                                knownRecords = datasetDirectoryServiceConnection.getDatasetResultLocations(jobId,
+                                        resultSetId, knownRecords);
+                            } catch (Exception e) {
+                                // Do nothing here.
+                            }
                         }
 
                         resultChannel = new DatasetNetworkInputChannel(netManager,
-                                getSocketAddress(knownRecords[lastReadPartition]), jobId, resultSetId,
-                                lastReadPartition, NUM_READ_BUFFERS);
+                                getSocketAddress(knownRecords[lastReadPartition]), jobId, lastReadPartition,
+                                NUM_READ_BUFFERS);
                         lastMonitor = getMonitor(lastReadPartition);
-                        resultChannel.registerMonitor(lastMonitor);
                         resultChannel.open(datasetClientCtx);
-                    } catch (Exception e) {
+                        resultChannel.registerMonitor(lastMonitor);
+                    } catch (HyracksException e) {
+                        throw new HyracksDataException(e);
+                    } catch (UnknownHostException e) {
                         throw new HyracksDataException(e);
                     }
                 }
@@ -175,14 +182,6 @@ public class HyracksDatasetReader implements IHyracksDatasetReader {
         return false;
     }
 
-    private boolean isPartitionReadComplete(IDatasetInputChannelMonitor monitor) {
-        return (monitor.getNFramesAvailable() <= 0) && (monitor.eosReached());
-    }
-
-    private boolean isLastPartitionReadComplete() {
-        return ((lastReadPartition == knownRecords.length - 1) && isPartitionReadComplete(lastMonitor));
-    }
-
     private SocketAddress getSocketAddress(DatasetDirectoryRecord addr) throws UnknownHostException {
         NetworkAddress netAddr = addr.getNetworkAddress();
         return new InetSocketAddress(InetAddress.getByAddress(netAddr.getIpAddress()), netAddr.getPort());