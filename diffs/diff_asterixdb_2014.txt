diff --git a/hyracks/hyracks-storage-common/src/main/java/edu/uci/ics/hyracks/storage/common/buffercache/BufferCache.java b/hyracks/hyracks-storage-common/src/main/java/edu/uci/ics/hyracks/storage/common/buffercache/BufferCache.java
index 7f17f389b3..e170a95b2a 100644
--- a/hyracks/hyracks-storage-common/src/main/java/edu/uci/ics/hyracks/storage/common/buffercache/BufferCache.java
+++ b/hyracks/hyracks-storage-common/src/main/java/edu/uci/ics/hyracks/storage/common/buffercache/BufferCache.java
@@ -39,7 +39,7 @@ public class BufferCache implements IBufferCacheInternal {
 
     private static final int MIN_CLEANED_COUNT_DIFF = 3;
     private static final int PIN_MAX_WAIT_TIME = 50;
-
+    
     private final int maxOpenFiles;
 
     private final IIOManager ioManager;
@@ -48,7 +48,6 @@ public class BufferCache implements IBufferCacheInternal {
     private final CachedPage[] cachedPages;
     private final CacheBucket[] pageMap;
     private final IPageReplacementStrategy pageReplacementStrategy;
-    private final IPageCleanerPolicy pageCleanerPolicy;
     private final IFileMapManager fileMapManager;
     private final CleanerThread cleanerThread;
     private final Map<Integer, BufferedFileHandle> fileInfoMap;
@@ -56,8 +55,8 @@ public class BufferCache implements IBufferCacheInternal {
     private boolean closed;
 
     public BufferCache(IIOManager ioManager, ICacheMemoryAllocator allocator,
-            IPageReplacementStrategy pageReplacementStrategy, IPageCleanerPolicy pageCleanerPolicy,
-            IFileMapManager fileMapManager, int pageSize, int numPages, int maxOpenFiles) {
+            IPageReplacementStrategy pageReplacementStrategy, IFileMapManager fileMapManager, int pageSize,
+            int numPages, int maxOpenFiles) {
         this.ioManager = ioManager;
         this.pageSize = pageSize;
         this.numPages = numPages;
@@ -73,7 +72,6 @@ public class BufferCache implements IBufferCacheInternal {
             pageMap[i] = new CacheBucket();
         }
         this.pageReplacementStrategy = pageReplacementStrategy;
-        this.pageCleanerPolicy = pageCleanerPolicy;
         this.fileMapManager = fileMapManager;
         fileInfoMap = new HashMap<Integer, BufferedFileHandle>();
         cleanerThread = new CleanerThread();
@@ -159,7 +157,7 @@ public class BufferCache implements IBufferCacheInternal {
         return cPage;
     }
 
-    private CachedPage findPage(long dpid, boolean newPage) throws HyracksDataException {
+    private CachedPage findPage(long dpid, boolean newPage) {
         while (true) {
             int startCleanedCount = cleanerThread.cleanedCount;
 
@@ -302,7 +300,7 @@ public class BufferCache implements IBufferCacheInternal {
                 }
             }
             synchronized (cleanerThread) {
-                pageCleanerPolicy.notifyVictimNotFound(cleanerThread);
+                cleanerThread.notifyAll();
             }
             // Heuristic optimization. Check whether the cleaner thread has
             // cleaned pages since we did our last pin attempt.
@@ -504,7 +502,6 @@ public class BufferCache implements IBufferCacheInternal {
 
         public CleanerThread() {
             setPriority(MAX_PRIORITY);
-            setDaemon(true);
         }
 
         public void cleanPage(CachedPage cPage, boolean force) {
@@ -554,7 +551,6 @@ public class BufferCache implements IBufferCacheInternal {
         public synchronized void run() {
             try {
                 while (true) {
-                    pageCleanerPolicy.notifyCleanCycleStart(this);
                     for (int i = 0; i < numPages; ++i) {
                         CachedPage cPage = cachedPages[i];
                         cleanPage(cPage, false);
@@ -562,10 +558,12 @@ public class BufferCache implements IBufferCacheInternal {
                     if (shutdownStart) {
                         break;
                     }
-                    pageCleanerPolicy.notifyCleanCycleFinish(this);
+                    try {
+                        wait(1000);
+                    } catch (InterruptedException e) {
+                        e.printStackTrace();
+                    }
                 }
-            } catch (Exception e) {
-                e.printStackTrace();
             } finally {
                 shutdownComplete = true;
                 notifyAll();