diff --git a/archiva-modules/metadata/metadata-repository-api/src/main/java/org/apache/archiva/metadata/repository/DefaultMetadataResolver.java b/archiva-modules/metadata/metadata-repository-api/src/main/java/org/apache/archiva/metadata/repository/DefaultMetadataResolver.java
index f56d72c16..0c6ce56dc 100644
--- a/archiva-modules/metadata/metadata-repository-api/src/main/java/org/apache/archiva/metadata/repository/DefaultMetadataResolver.java
+++ b/archiva-modules/metadata/metadata-repository-api/src/main/java/org/apache/archiva/metadata/repository/DefaultMetadataResolver.java
@@ -19,7 +19,6 @@
  * under the License.
  */
 
-import org.apache.archiva.admin.model.RepositoryAdminException;
 import org.apache.archiva.metadata.model.ArtifactMetadata;
 import org.apache.archiva.metadata.model.ProjectMetadata;
 import org.apache.archiva.metadata.model.ProjectVersionMetadata;
@@ -31,8 +30,10 @@
 import org.apache.archiva.repository.events.RepositoryListener;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.springframework.context.ApplicationContext;
 import org.springframework.stereotype.Service;
 
+import javax.annotation.PostConstruct;
 import javax.inject.Inject;
 import javax.inject.Named;
 import java.util.ArrayList;
@@ -70,6 +71,8 @@
      * TODO: Also need to accommodate availability of proxy module
      * ... could be a different type since we need methods to modify the storage metadata, which would also allow more
      * appropriate methods to pass in the already determined repository configuration, for example, instead of the ID
+     *
+     *
      */
     @Inject
     @Named( value = "repositoryStorage#maven2" )
@@ -81,6 +84,12 @@
     @Inject
     private List<RepositoryListener> listeners;
 
+    @PostConstruct
+    private void initialize()
+    {
+        // no op
+    }
+
     public ProjectVersionMetadata resolveProjectVersion( RepositorySession session, String repoId, String namespace,
                                                          String projectId, String projectVersion )
         throws MetadataResolutionException
@@ -100,8 +109,10 @@ public ProjectVersionMetadata resolveProjectVersion( RepositorySession session,
             {
                 metadata = repositoryStorage.readProjectVersionMetadata( repoId, namespace, projectId, projectVersion );
 
-                log.debug( "Resolved project version metadata from storage: {}", metadata );
-
+                if ( log.isDebugEnabled() )
+                {
+                    log.debug( "Resolved project version metadata from storage: " + metadata );
+                }
                 // FIXME: make this a more generic post-processing that plugins can take advantage of
                 //       eg. maven projects should be able to process parent here
                 if ( !metadata.getDependencies().isEmpty() )
@@ -135,14 +146,6 @@ public ProjectVersionMetadata resolveProjectVersion( RepositorySession session,
                 }
                 throw new MetadataResolutionException( e.getMessage(), e );
             }
-            catch ( RepositoryAdminException e )
-            {
-                for ( RepositoryListener listener : listeners )
-                {
-                    listener.addArtifactProblem( session, repoId, namespace, projectId, projectVersion, e );
-                }
-                throw new MetadataResolutionException( e.getMessage(), e );
-            }
             catch ( RepositoryStorageMetadataNotFoundException e )
             {
                 for ( RepositoryListener listener : listeners )