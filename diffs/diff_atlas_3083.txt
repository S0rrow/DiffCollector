diff --git a/repository/src/main/java/org/apache/atlas/repository/impexp/AuditsWriter.java b/repository/src/main/java/org/apache/atlas/repository/impexp/AuditsWriter.java
index cc10660bf..f72de5655 100644
--- a/repository/src/main/java/org/apache/atlas/repository/impexp/AuditsWriter.java
+++ b/repository/src/main/java/org/apache/atlas/repository/impexp/AuditsWriter.java
@@ -130,10 +130,6 @@ public class AuditsWriter {
         return StringUtils.split(fullName, "$")[1];
     }
 
-    private void saveCurrentServer() throws AtlasBaseException {
-        saveServer(getCurrentClusterName(), getCurrentClusterName());
-    }
-
     private class ExportAudits {
         private AtlasExportRequest request;
         private String targetServerName;
@@ -148,10 +144,8 @@ public class AuditsWriter {
             request = result.getRequest();
             replicationOptionState = isReplicationOptionSet(request.getOptions(), optionKeyReplicatedTo);
 
-            saveCurrentServer();
+            saveServers();
 
-            targetServerFullName = getClusterNameFromOptions(request.getOptions(), optionKeyReplicatedTo);
-            targetServerName = getServerNameFromFullName(targetServerFullName);
             auditService.add(userName, getCurrentClusterName(), targetServerName,
                     ExportImportAuditEntry.OPERATION_EXPORT,
                     AtlasType.toJson(result), startTime, endTime, !entityGuids.isEmpty());
@@ -163,6 +157,16 @@ public class AuditsWriter {
             updateReplicationAttribute(replicationOptionState, targetServerName, targetServerFullName,
                     entityGuids, Constants.ATTR_NAME_REPLICATED_TO, result.getChangeMarker());
         }
+
+        private void saveServers() throws AtlasBaseException {
+            saveServer(getCurrentClusterName(), getCurrentClusterName());
+
+            targetServerFullName = getClusterNameFromOptions(request.getOptions(), optionKeyReplicatedTo);
+            targetServerName = getServerNameFromFullName(targetServerFullName);
+            if(StringUtils.isNotEmpty(targetServerName)) {
+                saveServer(targetServerName, targetServerFullName);
+            }
+        }
     }
 
     private class ImportAudits {
@@ -179,10 +183,8 @@ public class AuditsWriter {
             request = result.getRequest();
             replicationOptionState = isReplicationOptionSet(request.getOptions(), optionKeyReplicatedFrom);
 
-            saveCurrentServer();
+            saveServers();
 
-            sourceServerFullName = getClusterNameFromOptions(request.getOptions(), optionKeyReplicatedFrom);
-            sourceServerName = getServerNameFromFullName(sourceServerFullName);
             auditService.add(userName,
                     sourceServerName, getCurrentClusterName(),
                     ExportImportAuditEntry.OPERATION_IMPORT,
@@ -195,5 +197,21 @@ public class AuditsWriter {
             updateReplicationAttribute(replicationOptionState, sourceServerName, sourceServerFullName, entityGuids,
                     Constants.ATTR_NAME_REPLICATED_FROM, result.getExportResult().getChangeMarker());
         }
+
+        private void saveServers() throws AtlasBaseException {
+            saveServer(getCurrentClusterName(), getCurrentClusterName());
+
+            sourceServerFullName = getClusterNameFromOptionsState();
+            sourceServerName = getServerNameFromFullName(sourceServerFullName);
+            if(StringUtils.isNotEmpty(sourceServerName)) {
+                saveServer(sourceServerName, sourceServerFullName);
+            }
+        }
+
+        private String getClusterNameFromOptionsState() {
+            return replicationOptionState
+                    ? getClusterNameFromOptions(request.getOptions(), optionKeyReplicatedFrom)
+                    : StringUtils.EMPTY;
+        }
     }
 }