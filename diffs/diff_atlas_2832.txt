diff --git a/repository/src/main/java/org/apache/atlas/repository/store/bootstrap/AtlasTypeDefStoreInitializer.java b/repository/src/main/java/org/apache/atlas/repository/store/bootstrap/AtlasTypeDefStoreInitializer.java
index 4530f51bf..e52ac6def 100644
--- a/repository/src/main/java/org/apache/atlas/repository/store/bootstrap/AtlasTypeDefStoreInitializer.java
+++ b/repository/src/main/java/org/apache/atlas/repository/store/bootstrap/AtlasTypeDefStoreInitializer.java
@@ -23,7 +23,6 @@ import org.apache.atlas.model.typedef.AtlasBaseTypeDef;
 import org.apache.atlas.model.typedef.AtlasClassificationDef;
 import org.apache.atlas.model.typedef.AtlasEntityDef;
 import org.apache.atlas.model.typedef.AtlasEnumDef;
-import org.apache.atlas.model.typedef.AtlasEnumDef.AtlasEnumElementDef;
 import org.apache.atlas.model.typedef.AtlasStructDef;
 import org.apache.atlas.model.typedef.AtlasStructDef.AtlasAttributeDef;
 import org.apache.atlas.model.typedef.AtlasTypesDef;
@@ -31,18 +30,12 @@ import org.apache.atlas.store.AtlasTypeDefStore;
 import org.apache.atlas.type.AtlasType;
 import org.apache.atlas.type.AtlasTypeRegistry;
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.collections.MapUtils;
-import org.apache.commons.lang.ObjectUtils;
-import org.apache.commons.lang3.StringUtils;
 import org.codehaus.jackson.annotate.JsonAutoDetect;
 import org.codehaus.jackson.annotate.JsonIgnoreProperties;
 import org.codehaus.jackson.map.annotate.JsonSerialize;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.springframework.stereotype.Service;
 
-import javax.annotation.PostConstruct;
-import javax.inject.Inject;
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
 import javax.xml.bind.annotation.XmlRootElement;
@@ -61,28 +54,10 @@ import static org.codehaus.jackson.annotate.JsonAutoDetect.Visibility.PUBLIC_ONL
 /**
  * Class that handles initial loading of models and patches into typedef store
  */
-@Service
 public class AtlasTypeDefStoreInitializer {
     private static final Logger LOG = LoggerFactory.getLogger(AtlasTypeDefStoreInitializer.class);
 
-    private final AtlasTypeDefStore atlasTypeDefStore;
-    private final AtlasTypeRegistry atlasTypeRegistry;
-
-    @Inject
-    public AtlasTypeDefStoreInitializer(AtlasTypeDefStore atlasTypeDefStore, AtlasTypeRegistry atlasTypeRegistry) {
-        this.atlasTypeDefStore = atlasTypeDefStore;
-        this.atlasTypeRegistry = atlasTypeRegistry;
-    }
-
-    @PostConstruct
-    public void init() {
-        String atlasHomeDir = System.getProperty("atlas.home");
-        String typesDirName = (StringUtils.isEmpty(atlasHomeDir) ? "." : atlasHomeDir) + File.separator + "models";
-
-        initializeStore(typesDirName);
-    }
-
-    private void initializeStore(String typesDirName) {
+    public void initializeStore(AtlasTypeDefStore typeDefStore, AtlasTypeRegistry typeRegistry, String typesDirName) {
         File   typesDir     = new File(typesDirName);
         File[] typeDefFiles = typesDir.exists() ? typesDir.listFiles() : null;
 
@@ -110,158 +85,58 @@ public class AtlasTypeDefStoreInitializer {
                     continue;
                 }
 
-                AtlasTypesDef typesToCreate = getTypesToCreate(typesDef, atlasTypeRegistry);
-                AtlasTypesDef typesToUpdate = getTypesToUpdate(typesDef, atlasTypeRegistry);
-
-                if (!typesToCreate.isEmpty() || !typesToUpdate.isEmpty()) {
-                    atlasTypeDefStore.createUpdateTypesDef(typesToCreate, typesToUpdate);
-
-                    LOG.info("Created/Updated types defined in file {}", typeDefFile.getAbsolutePath());
-                } else {
-                    LOG.info("No new type in file {}", typeDefFile.getAbsolutePath());
-                }
-
-            } catch (Throwable t) {
-                LOG.error("error while registering types in file {}", typeDefFile.getAbsolutePath(), t);
-            }
-        }
-
-        applyTypePatches(typesDirName);
-    }
-
-    public static AtlasTypesDef getTypesToCreate(AtlasTypesDef typesDef, AtlasTypeRegistry typeRegistry) {
-        AtlasTypesDef typesToCreate = new AtlasTypesDef();
-
-        if (CollectionUtils.isNotEmpty(typesDef.getEnumDefs())) {
-            for (AtlasEnumDef enumDef : typesDef.getEnumDefs()) {
-                if (!typeRegistry.isRegisteredType(enumDef.getName())) {
-                    typesToCreate.getEnumDefs().add(enumDef);
-                }
-            }
-        }
-
-        if (CollectionUtils.isNotEmpty(typesDef.getStructDefs())) {
-            for (AtlasStructDef structDef : typesDef.getStructDefs()) {
-                if (!typeRegistry.isRegisteredType(structDef.getName())) {
-                    typesToCreate.getStructDefs().add(structDef);
-                }
-            }
-        }
-
-        if (CollectionUtils.isNotEmpty(typesDef.getClassificationDefs())) {
-            for (AtlasClassificationDef classificationDef : typesDef.getClassificationDefs()) {
-                if (!typeRegistry.isRegisteredType(classificationDef.getName())) {
-                    typesToCreate.getClassificationDefs().add(classificationDef);
-                }
-            }
-        }
-
-        if (CollectionUtils.isNotEmpty(typesDef.getEntityDefs())) {
-            for (AtlasEntityDef entityDef : typesDef.getEntityDefs()) {
-                if (!typeRegistry.isRegisteredType(entityDef.getName())) {
-                    typesToCreate.getEntityDefs().add(entityDef);
-                }
-            }
-        }
-
-        return typesToCreate;
-    }
-
-    public static AtlasTypesDef getTypesToUpdate(AtlasTypesDef typesDef, AtlasTypeRegistry typeRegistry) {
-        AtlasTypesDef typesToUpdate = new AtlasTypesDef();
-
-        if (CollectionUtils.isNotEmpty(typesDef.getStructDefs())) {
-            for (AtlasStructDef newStructDef : typesDef.getStructDefs()) {
-                AtlasStructDef  oldStructDef = typeRegistry.getStructDefByName(newStructDef.getName());
-
-                if (oldStructDef == null) {
-                    continue;
-                }
-
-                if (updateTypeAttributes(oldStructDef, newStructDef)) {
-                    typesToUpdate.getStructDefs().add(newStructDef);
-                }
-            }
-        }
-
-        if (CollectionUtils.isNotEmpty(typesDef.getClassificationDefs())) {
-            for (AtlasClassificationDef newClassifDef : typesDef.getClassificationDefs()) {
-                AtlasClassificationDef  oldClassifDef = typeRegistry.getClassificationDefByName(newClassifDef.getName());
+                AtlasTypesDef typesToCreate = new AtlasTypesDef();
 
-                if (oldClassifDef == null) {
-                    continue;
+                if (CollectionUtils.isNotEmpty(typesDef.getEnumDefs())) {
+                    for (AtlasEnumDef enumDef : typesDef.getEnumDefs()) {
+                        if (!typeRegistry.isRegisteredType(enumDef.getName())) {
+                            typesToCreate.getEnumDefs().add(enumDef);
+                        }
+                    }
                 }
 
-                if (updateTypeAttributes(oldClassifDef, newClassifDef)) {
-                    typesToUpdate.getClassificationDefs().add(newClassifDef);
+                if (CollectionUtils.isNotEmpty(typesDef.getStructDefs())) {
+                    for (AtlasStructDef structDef : typesDef.getStructDefs()) {
+                        if (!typeRegistry.isRegisteredType(structDef.getName())) {
+                            typesToCreate.getStructDefs().add(structDef);
+                        }
+                    }
                 }
-            }
-        }
 
-        if (CollectionUtils.isNotEmpty(typesDef.getEntityDefs())) {
-            for (AtlasEntityDef newEntityDef : typesDef.getEntityDefs()) {
-                AtlasEntityDef  oldEntityDef = typeRegistry.getEntityDefByName(newEntityDef.getName());
-
-                if (oldEntityDef == null) {
-                    continue;
+                if (CollectionUtils.isNotEmpty(typesDef.getClassificationDefs())) {
+                    for (AtlasClassificationDef classificationDef : typesDef.getClassificationDefs()) {
+                        if (!typeRegistry.isRegisteredType(classificationDef.getName())) {
+                            typesToCreate.getClassificationDefs().add(classificationDef);
+                        }
+                    }
                 }
 
-                if (updateTypeAttributes(oldEntityDef, newEntityDef)) {
-                    typesToUpdate.getEntityDefs().add(newEntityDef);
+                if (CollectionUtils.isNotEmpty(typesDef.getEntityDefs())) {
+                    for (AtlasEntityDef entityDef : typesDef.getEntityDefs()) {
+                        if (!typeRegistry.isRegisteredType(entityDef.getName())) {
+                            typesToCreate.getEntityDefs().add(entityDef);
+                        }
+                    }
                 }
-            }
-        }
 
-        if (CollectionUtils.isNotEmpty(typesDef.getEnumDefs())) {
-            for (AtlasEnumDef newEnumDef : typesDef.getEnumDefs()) {
-                AtlasEnumDef  oldEnumDef = typeRegistry.getEnumDefByName(newEnumDef.getName());
+                if (typesToCreate.isEmpty()) {
+                    LOG.info("No new type in file {}", typeDefFile.getAbsolutePath());
 
-                if (oldEnumDef == null) {
                     continue;
                 }
 
-                if (isTypeUpdateApplicable(oldEnumDef, newEnumDef)) {
-                    if (CollectionUtils.isNotEmpty(oldEnumDef.getElementDefs())) {
-                        for (AtlasEnumElementDef oldEnumElem : oldEnumDef.getElementDefs()) {
-                            if (!newEnumDef.hasElement(oldEnumElem.getValue())) {
-                                newEnumDef.addElement(oldEnumElem);
-                            }
-                        }
-                    }
-
-                    typesToUpdate.getEnumDefs().add(newEnumDef);
-                }
-            }
-        }
-
-        return typesToUpdate;
-    }
-
-    private static boolean updateTypeAttributes(AtlasStructDef oldStructDef, AtlasStructDef newStructDef) {
-        boolean ret = isTypeUpdateApplicable(oldStructDef, newStructDef);
+                LOG.info("Loading types defined in file {}", typeDefFile.getAbsolutePath());
 
-        if (ret) {
-            // make sure that all attributes in oldDef are in newDef as well
-            if (CollectionUtils.isNotEmpty(oldStructDef.getAttributeDefs())){
-                for (AtlasAttributeDef oldAttrDef : oldStructDef.getAttributeDefs()) {
-                    if (!newStructDef.hasAttribute(oldAttrDef.getName())) {
-                        newStructDef.addAttribute(oldAttrDef);
-                    }
-                }
+                typeDefStore.createTypesDef(typesDef);
+            } catch (Throwable t) {
+                LOG.error("error while registering types in file " + typeDefFile.getAbsolutePath(), t);
             }
         }
 
-        return ret;
-    }
-
-    private static boolean isTypeUpdateApplicable(AtlasBaseTypeDef oldTypeDef, AtlasBaseTypeDef newTypeDef) {
-        String oldTypeVersion = oldTypeDef.getTypeVersion();
-        String newTypeVersion = newTypeDef.getTypeVersion();
-
-        return ObjectUtils.compare(newTypeVersion, oldTypeVersion) > 0;
+        applyTypePatches(typeDefStore, typeRegistry, typesDirName);
     }
 
-    private void applyTypePatches(String typesDirName) {
+    private void applyTypePatches(AtlasTypeDefStore typeDefStore, AtlasTypeRegistry typeRegistry, String typesDirName) {
         String typePatchesDirName = typesDirName + File.separator + "patches";
         File   typePatchesDir     = new File(typePatchesDirName);
         File[] typePatchFiles     = typePatchesDir.exists() ? typePatchesDir.listFiles() : null;
@@ -275,11 +150,7 @@ public class AtlasTypeDefStoreInitializer {
         // sort the files by filename
         Arrays.sort(typePatchFiles);
 
-        PatchHandler[] patchHandlers = new PatchHandler[] {
-                new AddAttributePatchHandler(atlasTypeDefStore, atlasTypeRegistry),
-                new UpdateTypeDefOptionsPatchHandler(atlasTypeDefStore, atlasTypeRegistry),
-                new UpdateAttributePatchHandler(atlasTypeDefStore, atlasTypeRegistry)
-        };
+        PatchHandler[] patchHandlers = new PatchHandler[] { new AddAttributePatchHandler(typeDefStore, typeRegistry) };
 
         Map<String, PatchHandler> patchHandlerRegistry = new HashMap<>();
 
@@ -294,8 +165,6 @@ public class AtlasTypeDefStoreInitializer {
                 continue;
             }
 
-            LOG.info("Applying patches in file {}", typePatchFile.getAbsolutePath());
-
             try {
                 String         jsonStr = new String(Files.readAllBytes(typePatchFile.toPath()), StandardCharsets.UTF_8);
                 TypeDefPatches patches = AtlasType.fromJson(jsonStr, TypeDefPatches.class);
@@ -319,11 +188,12 @@ public class AtlasTypeDefStoreInitializer {
                     try {
                         patchHandler.applyPatch(patch);
                     } catch (AtlasBaseException excp) {
-                        LOG.error("Failed to apply {} patch in file {}. Ignored", patch.getAction(), typePatchFile.getAbsolutePath(), excp);
+                        LOG.error("Failed to apply " + patch.getAction() + " patch in file " +
+                                  typePatchFile.getAbsolutePath() + ". Ignored", excp);
                     }
                 }
             } catch (Throwable t) {
-                LOG.error("Failed to apply patches in file {}. Ignored", typePatchFile.getAbsolutePath(), t);
+                LOG.error("Failed to apply patches in file " + typePatchFile.getAbsolutePath() + ". Ignored", t);
             }
         }
     }
@@ -343,7 +213,6 @@ public class AtlasTypeDefStoreInitializer {
         private String                  updateToVersion;
         private Map<String, Object>     params;
         private List<AtlasAttributeDef> attributeDefs;
-        private Map<String, String>     typeDefOptions;
 
         public String getAction() {
             return action;
@@ -392,14 +261,6 @@ public class AtlasTypeDefStoreInitializer {
         public void setAttributeDefs(List<AtlasAttributeDef> attributeDefs) {
             this.attributeDefs = attributeDefs;
         }
-
-        public Map<String, String> getTypeDefOptions() {
-            return typeDefOptions;
-        }
-
-        public void setTypeDefOptions(Map<String, String> typeDefOptions) {
-            this.typeDefOptions = typeDefOptions;
-        }
     }
 
     /**
@@ -454,13 +315,14 @@ public class AtlasTypeDefStoreInitializer {
 
         @Override
         public void applyPatch(TypeDefPatch patch) throws AtlasBaseException {
-            String           typeName = patch.getTypeName();
-            AtlasBaseTypeDef typeDef  = typeRegistry.getTypeDefByName(typeName);
+            String typeName = patch.getTypeName();
 
-            if (typeDef == null) {
+            if (!typeRegistry.isRegisteredType(typeName)) {
                 throw new AtlasBaseException(AtlasErrorCode.PATCH_FOR_UNKNOWN_TYPE, patch.getAction(), typeName);
             }
 
+            AtlasBaseTypeDef typeDef = typeRegistry.getTypeDefByName(typeName);
+
             if (isPatchApplicable(patch, typeDef)) {
                 if (typeDef.getClass().equals(AtlasEntityDef.class)) {
                     AtlasEntityDef updatedDef = new AtlasEntityDef((AtlasEntityDef)typeDef);
@@ -489,143 +351,6 @@ public class AtlasTypeDefStoreInitializer {
                     updatedDef.setTypeVersion(patch.getUpdateToVersion());
 
                     typeDefStore.updateStructDefByName(typeName, updatedDef);
-                } else {
-                    throw new AtlasBaseException(AtlasErrorCode.PATCH_NOT_APPLICABLE_FOR_TYPE,
-                            patch.getAction(), typeDef.getClass().getSimpleName());
-                }
-            } else {
-                LOG.info("patch skipped: typeName={}; applyToVersion={}; updateToVersion={}",
-                        patch.getTypeName(), patch.getApplyToVersion(), patch.getUpdateToVersion());
-            }
-        }
-    }
-
-    class UpdateAttributePatchHandler extends PatchHandler {
-        public UpdateAttributePatchHandler(AtlasTypeDefStore typeDefStore, AtlasTypeRegistry typeRegistry) {
-            super(typeDefStore, typeRegistry, new String[] { "UPDATE_ATTRIBUTE" });
-        }
-
-        @Override
-        public void applyPatch(TypeDefPatch patch) throws AtlasBaseException {
-            String           typeName = patch.getTypeName();
-            AtlasBaseTypeDef typeDef  = typeRegistry.getTypeDefByName(typeName);
-
-            if (typeDef == null) {
-                throw new AtlasBaseException(AtlasErrorCode.PATCH_FOR_UNKNOWN_TYPE, patch.getAction(), typeName);
-            }
-
-            if (isPatchApplicable(patch, typeDef)) {
-                if (typeDef.getClass().equals(AtlasEntityDef.class)) {
-                    AtlasEntityDef updatedDef = new AtlasEntityDef((AtlasEntityDef)typeDef);
-
-                    addOrUpdateAttributes(updatedDef, patch.getAttributeDefs());
-
-                    updatedDef.setTypeVersion(patch.getUpdateToVersion());
-
-                    typeDefStore.updateEntityDefByName(typeName, updatedDef);
-                } else if (typeDef.getClass().equals(AtlasClassificationDef.class)) {
-                    AtlasClassificationDef updatedDef = new AtlasClassificationDef((AtlasClassificationDef)typeDef);
-
-                    addOrUpdateAttributes(updatedDef, patch.getAttributeDefs());
-
-                    updatedDef.setTypeVersion(patch.getUpdateToVersion());
-
-                    typeDefStore.updateClassificationDefByName(typeName, updatedDef);
-                } else if (typeDef.getClass().equals(AtlasStructDef.class)) {
-                    AtlasStructDef updatedDef = new AtlasStructDef((AtlasStructDef)typeDef);
-
-                    addOrUpdateAttributes(updatedDef, patch.getAttributeDefs());
-
-                    updatedDef.setTypeVersion(patch.getUpdateToVersion());
-
-                    typeDefStore.updateStructDefByName(typeName, updatedDef);
-
-                } else {
-                    throw new AtlasBaseException(AtlasErrorCode.PATCH_NOT_APPLICABLE_FOR_TYPE,
-                                                 patch.getAction(), typeDef.getClass().getSimpleName());
-                }
-            } else {
-                LOG.info("patch skipped: typeName={}; applyToVersion={}; updateToVersion={}",
-                          patch.getTypeName(), patch.getApplyToVersion(), patch.getUpdateToVersion());
-            }
-        }
-
-        private void addOrUpdateAttributes(AtlasStructDef structDef, List<AtlasAttributeDef> attributesToUpdate) {
-            for (AtlasAttributeDef attributeToUpdate : attributesToUpdate) {
-                String attrName = attributeToUpdate.getName();
-
-                if (structDef.hasAttribute(attrName)) {
-                    structDef.removeAttribute(attrName);
-                }
-
-                structDef.addAttribute(attributeToUpdate);
-            }
-        }
-    }
-
-    class UpdateTypeDefOptionsPatchHandler extends PatchHandler {
-        public UpdateTypeDefOptionsPatchHandler(AtlasTypeDefStore typeDefStore, AtlasTypeRegistry typeRegistry) {
-            super(typeDefStore, typeRegistry, new String[] { "UPDATE_TYPEDEF_OPTIONS" });
-        }
-
-        @Override
-        public void applyPatch(TypeDefPatch patch) throws AtlasBaseException {
-            String           typeName = patch.getTypeName();
-            AtlasBaseTypeDef typeDef  = typeRegistry.getTypeDefByName(typeName);
-
-            if (typeDef == null) {
-                throw new AtlasBaseException(AtlasErrorCode.PATCH_FOR_UNKNOWN_TYPE, patch.getAction(), typeName);
-            }
-
-            if (MapUtils.isEmpty(patch.getTypeDefOptions())) {
-                throw new AtlasBaseException(AtlasErrorCode.PATCH_INVALID_DATA, patch.getAction(), typeName);
-            }
-
-            if (isPatchApplicable(patch, typeDef)) {
-                if (typeDef.getClass().equals(AtlasEntityDef.class)) {
-                    AtlasEntityDef updatedDef = new AtlasEntityDef((AtlasEntityDef)typeDef);
-
-                    if (updatedDef.getOptions() == null) {
-                        updatedDef.setOptions(patch.getTypeDefOptions());
-                    } else {
-                        updatedDef.getOptions().putAll(patch.getTypeDefOptions());
-                    }
-                    updatedDef.setTypeVersion(patch.getUpdateToVersion());
-
-                    typeDefStore.updateEntityDefByName(typeName, updatedDef);
-                } else if (typeDef.getClass().equals(AtlasClassificationDef.class)) {
-                    AtlasClassificationDef updatedDef = new AtlasClassificationDef((AtlasClassificationDef)typeDef);
-
-                    if (updatedDef.getOptions() == null) {
-                        updatedDef.setOptions(patch.getTypeDefOptions());
-                    } else {
-                        updatedDef.getOptions().putAll(patch.getTypeDefOptions());
-                    }
-                    updatedDef.setTypeVersion(patch.getUpdateToVersion());
-
-                    typeDefStore.updateClassificationDefByName(typeName, updatedDef);
-                } else if (typeDef.getClass().equals(AtlasStructDef.class)) {
-                    AtlasStructDef updatedDef = new AtlasStructDef((AtlasStructDef)typeDef);
-
-                    if (updatedDef.getOptions() == null) {
-                        updatedDef.setOptions(patch.getTypeDefOptions());
-                    } else {
-                        updatedDef.getOptions().putAll(patch.getTypeDefOptions());
-                    }
-                    updatedDef.setTypeVersion(patch.getUpdateToVersion());
-
-                    typeDefStore.updateStructDefByName(typeName, updatedDef);
-                } else if (typeDef.getClass().equals(AtlasEnumDef.class)) {
-                    AtlasEnumDef updatedDef = new AtlasEnumDef((AtlasEnumDef)typeDef);
-
-                    if (updatedDef.getOptions() == null) {
-                        updatedDef.setOptions(patch.getTypeDefOptions());
-                    } else {
-                        updatedDef.getOptions().putAll(patch.getTypeDefOptions());
-                    }
-                    updatedDef.setTypeVersion(patch.getUpdateToVersion());
-
-                    typeDefStore.updateEnumDefByName(typeName, updatedDef);
                 } else {
                     throw new AtlasBaseException(AtlasErrorCode.PATCH_NOT_APPLICABLE_FOR_TYPE,
                                                  patch.getAction(), typeDef.getClass().getSimpleName());