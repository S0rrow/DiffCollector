diff --git a/modules/rest/client/src/main/java/org/apache/airavata/rest/client/RegistryClient.java b/modules/rest/client/src/main/java/org/apache/airavata/rest/client/RegistryClient.java
index f53872696..06eec3196 100644
--- a/modules/rest/client/src/main/java/org/apache/airavata/rest/client/RegistryClient.java
+++ b/modules/rest/client/src/main/java/org/apache/airavata/rest/client/RegistryClient.java
@@ -23,14 +23,9 @@ package org.apache.airavata.rest.client;
 
 import java.net.URI;
 import java.util.Date;
-import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
-import javax.ws.rs.core.NewCookie;
-
-import org.apache.airavata.common.utils.AiravataJobState;
-import org.apache.airavata.common.utils.AiravataJobState.State;
 import org.apache.airavata.common.utils.Version;
 import org.apache.airavata.commons.gfac.type.ApplicationDescription;
 import org.apache.airavata.commons.gfac.type.HostDescription;
@@ -39,32 +34,12 @@ import org.apache.airavata.registry.api.AiravataExperiment;
 import org.apache.airavata.registry.api.AiravataRegistry2;
 import org.apache.airavata.registry.api.AiravataUser;
 import org.apache.airavata.registry.api.ExecutionErrors.Source;
-import org.apache.airavata.registry.api.JobRequest;
 import org.apache.airavata.registry.api.PasswordCallback;
 import org.apache.airavata.registry.api.ResourceMetadata;
 import org.apache.airavata.registry.api.WorkspaceProject;
 import org.apache.airavata.registry.api.exception.RegistryException;
-import org.apache.airavata.registry.api.exception.UnimplementedRegistryOperationException;
 import org.apache.airavata.registry.api.exception.worker.ExperimentDoesNotExistsException;
-import org.apache.airavata.registry.api.workflow.ApplicationJob;
-import org.apache.airavata.registry.api.workflow.ApplicationJob.ApplicationJobStatus;
-import org.apache.airavata.registry.api.workflow.ApplicationJobExecutionError;
-import org.apache.airavata.registry.api.workflow.ApplicationJobStatusData;
-import org.apache.airavata.registry.api.workflow.ExecutionError;
-import org.apache.airavata.registry.api.workflow.ExperimentData;
-import org.apache.airavata.registry.api.workflow.ExperimentExecutionError;
-import org.apache.airavata.registry.api.workflow.NodeExecutionData;
-import org.apache.airavata.registry.api.workflow.NodeExecutionError;
-import org.apache.airavata.registry.api.workflow.NodeExecutionStatus;
-import org.apache.airavata.registry.api.workflow.WorkflowExecution;
-import org.apache.airavata.registry.api.workflow.WorkflowExecutionData;
-import org.apache.airavata.registry.api.workflow.WorkflowExecutionError;
-import org.apache.airavata.registry.api.workflow.WorkflowExecutionStatus;
-import org.apache.airavata.registry.api.workflow.WorkflowIOData;
-import org.apache.airavata.registry.api.workflow.WorkflowInstanceNode;
-import org.apache.airavata.registry.api.workflow.WorkflowNodeGramData;
-import org.apache.airavata.registry.api.workflow.WorkflowNodeIOData;
-import org.apache.airavata.registry.api.workflow.WorkflowNodeType;
+import org.apache.airavata.registry.api.workflow.*;
 import org.apache.airavata.rest.utils.CookieManager;
 
 public class RegistryClient extends AiravataRegistry2 {
@@ -80,7 +55,7 @@ public class RegistryClient extends AiravataRegistry2 {
     private ProvenanceResourceClient provenanceResourceClient;
     private PublishedWorkflowResourceClient publishedWorkflowResourceClient;
     private UserWorkflowResourceClient userWorkflowResourceClient;
-    private CredentialStoreResourceClient credentialStoreResourceClient;
+
 //    private CookieManager cookieManager = new CookieManager();
 
 
@@ -118,16 +93,10 @@ public class RegistryClient extends AiravataRegistry2 {
     public UserWorkflowResourceClient getUserWorkflowResourceClient() {
         return userWorkflowResourceClient;
     }
-    
-    public CredentialStoreResourceClient getCredentialStoreResourceClient() {
-        return credentialStoreResourceClient;
-    }
-
 
 
     @Override
     protected void initialize() {
-        CookieManager.setCookie(new NewCookie("", ""));
         String userName = getUser().getUserName();
         callback = getCallback();
         String serviceURI = getConnectionURI().toString();
@@ -155,9 +124,6 @@ public class RegistryClient extends AiravataRegistry2 {
         userWorkflowResourceClient =
                 new UserWorkflowResourceClient(
                         userName,getGateway().getGatewayName(),serviceURI,callback, CookieManager.getCookie());
-        credentialStoreResourceClient =
-                new CredentialStoreResourceClient(
-                        userName,getGateway().getGatewayName(),serviceURI,callback, CookieManager.getCookie());
     }
 
     public Object getConfiguration(String key) {
@@ -669,10 +635,6 @@ public class RegistryClient extends AiravataRegistry2 {
     public List<ExperimentData> getExperimentByUser(String user) throws RegistryException {
         return getProvenanceResourceClient().getExperimentByUser(user);
     }
-    
-    public List<ExperimentData> getExperiments(HashMap<String,String> params) throws RegistryException {
-        return null;
-    }
 
 
     public List<ExperimentData> getExperimentByUser(String user, int pageSize, int pageNo) throws RegistryException {
@@ -878,248 +840,73 @@ public class RegistryClient extends AiravataRegistry2 {
 	@Override
 	public List<ExperimentExecutionError> getExperimentExecutionErrors(
 			String experimentId) throws RegistryException {
-		return provenanceResourceClient.getExperimentExecutionErrors(experimentId);
+		// TODO Auto-generated method stub
+		return null;
 	}
 
 	@Override
 	public List<WorkflowExecutionError> getWorkflowExecutionErrors(
 			String experimentId, String workflowInstanceId)
 			throws RegistryException {
-		return provenanceResourceClient.getWorkflowExecutionErrors(experimentId, workflowInstanceId);
+		// TODO Auto-generated method stub
+		return null;
 	}
 
 	@Override
 	public List<NodeExecutionError> getNodeExecutionErrors(String experimentId,
 			String workflowInstanceId, String nodeId) throws RegistryException {
-		return getProvenanceResourceClient().getNodeExecutionErrors(experimentId, workflowInstanceId, nodeId);
+		// TODO Auto-generated method stub
+		return null;
 	}
 
 	@Override
-	public List<ApplicationJobExecutionError> getApplicationJobErrors(String experimentId,
+	public List<GFacJobExecutionError> getGFacJobErrors(String experimentId,
 			String workflowInstanceId, String nodeId, String gfacJobId)
 			throws RegistryException {
-		return getProvenanceResourceClient().getGFacJobErrors(experimentId, workflowInstanceId, nodeId, gfacJobId);
+		// TODO Auto-generated method stub
+		return null;
 	}
 
 	@Override
-	public List<ApplicationJobExecutionError> getApplicationJobErrors(String gfacJobId)
+	public List<GFacJobExecutionError> getGFacJobErrors(String gfacJobId)
 			throws RegistryException {
-		return getProvenanceResourceClient().getGFacJobErrors(gfacJobId);
+		// TODO Auto-generated method stub
+		return null;
 	}
 
 	@Override
 	public List<ExecutionError> getExecutionErrors(String experimentId,
 			String workflowInstanceId, String nodeId, String gfacJobId,
 			Source... filterBy) throws RegistryException {
-		return getProvenanceResourceClient().getExecutionErrors(experimentId, workflowInstanceId, nodeId, gfacJobId, filterBy);
-	}
-
-	@Override
-	public int addExperimentError(ExperimentExecutionError error)
-			throws RegistryException {
-		return getProvenanceResourceClient().addExperimentError(error);
-	}
-
-	@Override
-	public int addWorkflowExecutionError(WorkflowExecutionError error)
-			throws RegistryException {
-		return getProvenanceResourceClient().addWorkflowExecutionError(error);
-	}
-
-	@Override
-	public int addNodeExecutionError(NodeExecutionError error)
-			throws RegistryException {
-		return getProvenanceResourceClient().addNodeExecutionError(error);
-	}
-
-	@Override
-	public int addApplicationJobExecutionError(ApplicationJobExecutionError error)
-			throws RegistryException {
-		return getProvenanceResourceClient().addGFacJobExecutionError(error);
-	}
-
-	@Override
-	public void addApplicationJob(ApplicationJob job) throws RegistryException {
-		getProvenanceResourceClient().addApplicationJob(job);
-		
-	}
-
-	@Override
-	public void updateApplicationJob(ApplicationJob job) throws RegistryException {
-        getProvenanceResourceClient().updateApplicationJob(job);
-		
-	}
-
-	@Override
-	public void updateApplicationJobStatus(String gfacJobId, ApplicationJobStatus status, Date statusUpdateTime)
-			throws RegistryException {
-        getProvenanceResourceClient().updateApplicationJobStatus(gfacJobId, status, statusUpdateTime);
-		
-	}
-
-	@Override
-	public void updateApplicationJobData(String gfacJobId, String jobdata)
-			throws RegistryException {
-        getProvenanceResourceClient().updateApplicationJobData(gfacJobId, jobdata);
-		
-	}
-
-	@Override
-	public void updateApplicationJobSubmittedTime(String gfacJobId, Date submitted)
-			throws RegistryException {
-        getProvenanceResourceClient().updateApplicationJobSubmittedTime(gfacJobId, submitted);
-		
-	}
-
-	@Override
-	public void updateApplicationJobStatusUpdateTime(String gfacJobId, Date completed)
-			throws RegistryException {
-        getProvenanceResourceClient().updateApplicationJobCompletedTime(gfacJobId, completed);
-		
-	}
-
-	@Override
-	public void updateApplicationJobMetadata(String gfacJobId, String metadata)
-			throws RegistryException {
-        getProvenanceResourceClient().updateApplicationJobMetadata(gfacJobId, metadata);
-		
-	}
-
-	@Override
-	public ApplicationJob getApplicationJob(String gfacJobId) throws RegistryException {
-		return getProvenanceResourceClient().getApplicationJob(gfacJobId);
-	}
-
-	@Override
-	public List<ApplicationJob> getApplicationJobsForDescriptors(String serviceDescriptionId,
-			String hostDescriptionId, String applicationDescriptionId)
-			throws RegistryException {
-		return getProvenanceResourceClient().getApplicationJobsForDescriptors(serviceDescriptionId, hostDescriptionId, applicationDescriptionId);
-	}
-
-	@Override
-	public List<ApplicationJob> getApplicationJobs(String experimentId,
-			String workflowExecutionId, String nodeId) throws RegistryException {
-		return getProvenanceResourceClient().getApplicationJobs(experimentId, workflowExecutionId, nodeId);
-	}
-
-	@Override
-	public boolean isApplicationJobExists(String gfacJobId) throws RegistryException {
-		return getProvenanceResourceClient().isApplicationJobExists(gfacJobId);
-	}
-
-	@Override
-	public List<ApplicationJobStatusData> getApplicationJobStatusHistory(
-			String jobId) throws RegistryException {
-		return getProvenanceResourceClient().getApplicationJobStatusHistory(jobId);
-	}
-
-	@Override
-	public List<AiravataUser> getUsers() throws RegistryException {
-        throw new UnimplementedRegistryOperationException();
-	}
-
-	@Override
-	public boolean isCredentialExist(String gatewayId, String tokenId)
-			throws RegistryException {
-		return getCredentialStoreResourceClient().isCredentialExist(gatewayId,tokenId);
-	}
-
-	@Override
-	public String getCredentialPublicKey(String gatewayId, String tokenId)
-			throws RegistryException {
-		return getCredentialStoreResourceClient().getCredentialPublicKey(gatewayId, tokenId);
-	}
-
-	@Override
-	public String createCredential(String gatewayId, String tokenId)
-			throws RegistryException {
-		return getCredentialStoreResourceClient().createCredential(gatewayId, tokenId);
-	}
-	
-	@Override
-	public String createCredential(String gatewayId, String tokenId, String username)
-			throws RegistryException {
-		return getCredentialStoreResourceClient().createCredential(gatewayId, tokenId, username);
-	}
-
-
-    //todo implement these methods properly
-
-
-    public boolean addGFACNode(String uri, int nodeID) throws RegistryException {
-        return false;  //To change body of implemented methods use File | Settings | File Templates.
-    }
-
-    public Map<String, Integer> getGFACNodeList() throws RegistryException {
-        return null;  //To change body of implemented methods use File | Settings | File Templates.
-    }
-
-	@Override
-	public boolean storeExperiment(String userName, String experimentID,
-			String orchestratorID, State state) throws RegistryException {
 		// TODO Auto-generated method stub
-		return false;
+		return null;
 	}
 
 	@Override
-	public boolean changeStatus(String experimentID, State state, String gfacEPR)
+	public int addExperimentError(ExperimentExecutionError error)
 			throws RegistryException {
 		// TODO Auto-generated method stub
-		return false;
+		return 0;
 	}
 
 	@Override
-	public AiravataJobState getState(String experimentID)
+	public int addWorkflowExecutionError(WorkflowExecutionError error)
 			throws RegistryException {
 		// TODO Auto-generated method stub
-		return null;
-	}
-
-	@Override
-	public List<String> getAllJobsWithState(AiravataJobState state)
-			throws RuntimeException {
-		// TODO Auto-generated method stub
-		return null;
-	}
-
-	@Override
-	public List<String> getAllAcceptedJobs() throws RegistryException {
-		// TODO Auto-generated method stub
-		return null;
+		return 0;
 	}
 
 	@Override
-	public JobRequest fetchAcceptedJob(String experimentID)
+	public int addNodeExecutionError(NodeExecutionError error)
 			throws RegistryException {
 		// TODO Auto-generated method stub
-		return null;
-	}
-
-	@Override
-	public List<String> getAllHangedJobs() throws RegistryException {
-		// TODO Auto-generated method stub
-		return null;
-	}
-
-	@Override
-	public int getHangedJobCount() throws RegistryException {
-		// TODO Auto-generated method stub
 		return 0;
 	}
 
 	@Override
-	public boolean resetHangedJob(String experimentID) throws RegistryException {
-		// TODO Auto-generated method stub
-		return false;
-	}
-
-	@Override
-	public boolean changeStatus(String experimentID, State state)
+	public int addGFacJobExecutionError(GFacJobExecutionError error)
 			throws RegistryException {
 		// TODO Auto-generated method stub
-		return false;
+		return 0;
 	}
-
-    
 }