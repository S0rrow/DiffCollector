diff --git a/asterixdb/asterix-lang-sqlpp/src/main/java/org/apache/asterix/lang/sqlpp/util/FunctionMapUtil.java b/asterixdb/asterix-lang-sqlpp/src/main/java/org/apache/asterix/lang/sqlpp/util/FunctionMapUtil.java
index b220d8d5a0..777307201c 100644
--- a/asterixdb/asterix-lang-sqlpp/src/main/java/org/apache/asterix/lang/sqlpp/util/FunctionMapUtil.java
+++ b/asterixdb/asterix-lang-sqlpp/src/main/java/org/apache/asterix/lang/sqlpp/util/FunctionMapUtil.java
@@ -63,7 +63,7 @@ public class FunctionMapUtil {
      * @return true if the function signature is a SQL-92 core aggregate,
      *         false otherwise.
      */
-    public static boolean isSql92AggregateFunction(FunctionSignature signature) {
+    public static boolean isSql92AggregateFunction(FunctionSignature signature) throws CompilationException {
         IFunctionInfo finfo = FunctionUtil.getFunctionInfo(new FunctionIdentifier(FunctionConstants.ASTERIX_NS,
                 signature.getName().toLowerCase(), signature.getArity()));
         if (finfo == null) {
@@ -78,8 +78,9 @@ public class FunctionMapUtil {
      * @param fs,
      *            the SQL-92 aggregate function signature.
      * @return the SQL++ aggregate function signature.
+     * @throws CompilationException
      */
-    public static FunctionSignature sql92ToCoreAggregateFunction(FunctionSignature fs) {
+    public static FunctionSignature sql92ToCoreAggregateFunction(FunctionSignature fs) throws CompilationException {
         if (!isSql92AggregateFunction(fs)) {
             return fs;
         }
@@ -87,24 +88,6 @@ public class FunctionMapUtil {
                 fs.getArity());
     }
 
-    /**
-     * Whether a function signature is a SQL++ core aggregate function.
-     *
-     * @param fs,
-     *            the function signature.
-     * @return true if the function signature is a SQL++ core aggregate,
-     *         false otherwise.
-     */
-    public static boolean isCoreAggregateFunction(FunctionSignature fs) {
-        String internalName = getInternalCoreAggregateFunctionName(fs);
-        if (internalName != null) {
-            FunctionIdentifier fi = new FunctionIdentifier(FunctionConstants.ASTERIX_NS, internalName, fs.getArity());
-            IFunctionInfo finfo = FunctionUtil.getFunctionInfo(fi);
-            return finfo != null && BuiltinFunctions.getAggregateFunction(finfo.getFunctionIdentifier()) != null;
-        }
-        return false;
-    }
-
     /**
      * Maps a user invoked function signature to a system internal function signature.
      *
@@ -127,15 +110,11 @@ public class FunctionMapUtil {
             if (finfo != null && BuiltinFunctions.getAggregateFunction(finfo.getFunctionIdentifier()) != null) {
                 return new FunctionSignature(FunctionConstants.ASTERIX_NS, internalName, fs.getArity());
             }
-        } else if (checkSql92Aggregate) {
-            if (isSql92AggregateFunction(fs)) {
-                throw new CompilationException(ErrorCode.COMPILATION_ERROR, sourceLoc,
-                        fs.getName() + " is a SQL-92 aggregate function. The SQL++ core aggregate function "
-                                + CORE_SQL_AGGREGATE_PREFIX + fs.getName().toLowerCase()
-                                + " could potentially express the intent.");
-            } else if (getInternalWindowFunction(fs) != null) {
-                throw new CompilationException(ErrorCode.COMPILATION_UNEXPECTED_WINDOW_EXPRESSION, sourceLoc);
-            }
+        } else if (checkSql92Aggregate && isSql92AggregateFunction(fs)) {
+            throw new CompilationException(ErrorCode.COMPILATION_ERROR, sourceLoc,
+                    fs.getName() + " is a SQL-92 aggregate function. The SQL++ core aggregate function "
+                            + CORE_SQL_AGGREGATE_PREFIX + fs.getName().toLowerCase()
+                            + " could potentially express the intent.");
         }
         String mappedName = CommonFunctionMapUtil.normalizeBuiltinFunctionSignature(fs).getName();
         return new FunctionSignature(fs.getNamespace(), mappedName, fs.getArity());
@@ -181,16 +160,4 @@ public class FunctionMapUtil {
             return null;
         }
     }
-
-    /**
-     * Returns an internal implementation function for a public window function,
-     * or {@code null} if given function is not a public window function
-     * @param signature function signature
-     * @return said value
-     */
-    public static FunctionIdentifier getInternalWindowFunction(FunctionSignature signature) {
-        IFunctionInfo finfo = FunctionUtil.getFunctionInfo(new FunctionIdentifier(FunctionConstants.ASTERIX_NS,
-                signature.getName().toLowerCase(), signature.getArity()));
-        return finfo != null ? BuiltinFunctions.getWindowFunction(finfo.getFunctionIdentifier()) : null;
-    }
 }