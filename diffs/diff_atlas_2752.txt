diff --git a/graphdb/titan0/src/main/java/org/apache/atlas/repository/graphdb/titan0/Titan0Graph.java b/graphdb/titan0/src/main/java/org/apache/atlas/repository/graphdb/titan0/Titan0Graph.java
index 9624c99f0..51531edf2 100644
--- a/graphdb/titan0/src/main/java/org/apache/atlas/repository/graphdb/titan0/Titan0Graph.java
+++ b/graphdb/titan0/src/main/java/org/apache/atlas/repository/graphdb/titan0/Titan0Graph.java
@@ -19,25 +19,15 @@ package org.apache.atlas.repository.graphdb.titan0;
 
 import java.io.IOException;
 import java.io.OutputStream;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Map;
 import java.util.Set;
 
 import javax.script.Bindings;
-import javax.script.ScriptContext;
 import javax.script.ScriptEngine;
 import javax.script.ScriptEngineManager;
 import javax.script.ScriptException;
 
-import org.apache.atlas.AtlasErrorCode;
-import org.apache.atlas.exception.AtlasBaseException;
-import org.apache.atlas.groovy.GroovyExpression;
 import org.apache.atlas.repository.graphdb.AtlasEdge;
 import org.apache.atlas.repository.graphdb.AtlasGraph;
 import org.apache.atlas.repository.graphdb.AtlasGraphManagement;
@@ -47,53 +37,29 @@ import org.apache.atlas.repository.graphdb.AtlasSchemaViolationException;
 import org.apache.atlas.repository.graphdb.AtlasVertex;
 import org.apache.atlas.repository.graphdb.GremlinVersion;
 import org.apache.atlas.repository.graphdb.titan0.query.Titan0GraphQuery;
-import org.apache.atlas.repository.graphdb.utils.IteratorToIterableAdapter;
 import org.apache.atlas.typesystem.types.IDataType;
+import org.apache.atlas.utils.IteratorToIterableAdapter;
 
 import com.google.common.base.Function;
 import com.google.common.collect.Iterables;
-import com.google.common.collect.Lists;
-import com.thinkaurelius.titan.core.Cardinality;
-import com.thinkaurelius.titan.core.PropertyKey;
 import com.thinkaurelius.titan.core.SchemaViolationException;
 import com.thinkaurelius.titan.core.TitanGraph;
 import com.thinkaurelius.titan.core.TitanIndexQuery;
-import com.thinkaurelius.titan.core.schema.TitanManagement;
 import com.thinkaurelius.titan.core.util.TitanCleanup;
 import com.tinkerpop.blueprints.Edge;
 import com.tinkerpop.blueprints.Element;
 import com.tinkerpop.blueprints.Vertex;
 import com.tinkerpop.blueprints.util.io.graphson.GraphSONWriter;
 import com.tinkerpop.pipes.util.structures.Row;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 
 /**
  * Titan 0.5.4 implementation of AtlasGraph.
  */
 public class Titan0Graph implements AtlasGraph<Titan0Vertex, Titan0Edge> {
-    private static final Logger LOG = LoggerFactory.getLogger(Titan0Graph.class);
-
-    private final Set<String> multiProperties;
 
     public Titan0Graph() {
-        //determine multi-properties once at startup
-        TitanManagement mgmt = null;
-        try {
-            mgmt = Titan0GraphDatabase.getGraphInstance().getManagementSystem();
-            Iterable<PropertyKey> keys = mgmt.getRelationTypes(PropertyKey.class);
-            multiProperties = Collections.synchronizedSet(new HashSet<String>());
-            for(PropertyKey key : keys) {
-                if (key.getCardinality() != Cardinality.SINGLE) {
-                    multiProperties.add(key.getName());
-                }
-            }
-        } finally {
-            if (mgmt != null) {
-                mgmt.rollback();
-            }
-        }
+
     }
 
     @Override
@@ -108,7 +74,6 @@ public class Titan0Graph implements AtlasGraph<Titan0Vertex, Titan0Edge> {
         }
     }
 
-
     @Override
     public AtlasGraphQuery<Titan0Vertex, Titan0Edge> query() {
 
@@ -169,7 +134,7 @@ public class Titan0Graph implements AtlasGraph<Titan0Vertex, Titan0Edge> {
 
     @Override
     public AtlasGraphManagement getManagementSystem() {
-        return new Titan0GraphManagement(this, getGraph().getManagementSystem());
+        return new Titan0DatabaseManager(getGraph().getManagementSystem());
     }
 
     @Override
@@ -205,31 +170,20 @@ public class Titan0Graph implements AtlasGraph<Titan0Vertex, Titan0Edge> {
         return wrapVertices(result);
     }
 
-    private Object convertGremlinValue(Object rawValue) {
+    @Override
+    public Object getGremlinColumnValue(Object rowValue, String colName, int idx) {
+        Row<List> rV = (Row<List>) rowValue;
+        Object value = rV.getColumn(colName).get(idx);
+        return convertGremlinValue(value);
+    }
 
+    @Override
+    public Object convertGremlinValue(Object rawValue) {
         if (rawValue instanceof Vertex) {
             return GraphDbObjectFactory.createVertex(this, (Vertex) rawValue);
-        } else if (rawValue instanceof Edge) {
+        }
+        if (rawValue instanceof Edge) {
             return GraphDbObjectFactory.createEdge(this, (Edge) rawValue);
-        } else if (rawValue instanceof Row) {
-            Row rowValue = (Row)rawValue;
-            Map<String, Object> result = new HashMap<>(rowValue.size());
-            List<String> columnNames = rowValue.getColumnNames();
-            for(int i = 0; i < rowValue.size(); i++) {
-                String key = columnNames.get(i);
-                Object value = convertGremlinValue(rowValue.get(i));
-                result.put(key, value);
-            }
-            return result;
-        } else if (rawValue instanceof List) {
-            return Lists.transform((List)rawValue, new Function<Object, Object>() {
-                @Override
-                public Object apply(Object input) {
-                    return convertGremlinValue(input);
-                }
-            });
-        } else if (rawValue instanceof Collection) {
-            throw new UnsupportedOperationException("Unhandled collection type: " + rawValue.getClass());
         }
         return rawValue;
     }
@@ -240,11 +194,11 @@ public class Titan0Graph implements AtlasGraph<Titan0Vertex, Titan0Edge> {
         return GremlinVersion.TWO;
     }
 
-    private List<Object> convertPathQueryResultToList(Object rawValue) {
+    @Override
+    public List<Object> convertPathQueryResultToList(Object rawValue) {
         return (List<Object>) rawValue;
     }
 
-
     @Override
     public void clear() {
         TitanGraph graph = getGraph();
@@ -257,7 +211,7 @@ public class Titan0Graph implements AtlasGraph<Titan0Vertex, Titan0Edge> {
 
     private TitanGraph getGraph() {
         // return the singleton instance of the graph in the plugin
-        return Titan0GraphDatabase.getGraphInstance();
+        return Titan0Database.getGraphInstance();
     }
 
     @Override
@@ -265,87 +219,26 @@ public class Titan0Graph implements AtlasGraph<Titan0Vertex, Titan0Edge> {
         GraphSONWriter.outputGraph(getGraph(), os);
     }
 
+    /*
+     * (non-Javadoc)
+     *
+     * @see
+     * org.apache.atlas.repository.graphdb.AtlasGraph#executeGremlinScript(java.
+     * lang.String)
+     */
     @Override
-    public Object executeGremlinScript(String query, boolean isPath) throws AtlasBaseException {
+    public Object executeGremlinScript(String gremlinQuery) throws ScriptException {
 
-        Object result = executeGremlinScript(query);
-        return convertGremlinScriptResult(isPath, result);
-    }
-
-    private Object convertGremlinScriptResult(boolean isPath, Object result) {
-        if (isPath) {
-            List<Object> path = convertPathQueryResultToList(result);
-
-            List<Object> convertedResult = new ArrayList<>(path.size());
-            for(Object o : path) {
-                convertedResult.add(convertGremlinValue(o));
-            }
-            return convertedResult;
-        } else {
-            return convertGremlinValue(result);
-        }
-    }
-
-    @Override
-    public ScriptEngine getGremlinScriptEngine() throws AtlasBaseException {
         ScriptEngineManager manager = new ScriptEngineManager();
-        ScriptEngine        engine  = manager.getEngineByName("gremlin-groovy");
-
-        if (engine == null) {
-            throw new AtlasBaseException(AtlasErrorCode.FAILED_TO_OBTAIN_GREMLIN_SCRIPT_ENGINE, "gremlin-groovy");
-        }
-
-        //Do not cache script compilations due to memory implications
-        engine.getContext().setAttribute("#jsr223.groovy.engine.keep.globals", "phantom", ScriptContext.ENGINE_SCOPE);
-
-        return engine;
-    }
-
-    @Override
-    public void releaseGremlinScriptEngine(ScriptEngine scriptEngine) {
-        // no action needed
-    }
-
-    @Override
-    public Object executeGremlinScript(ScriptEngine scriptEngine, Map<? extends  String, ? extends  Object> userBindings, String query, boolean isPath) throws ScriptException {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("executeGremlinScript(query={}, userBindings={})", query, userBindings);
-        }
-
-        Bindings bindings = scriptEngine.createBindings();
-
-        if (userBindings != null) {
-            bindings.putAll(userBindings);
-        }
-
+        ScriptEngine engine = manager.getEngineByName("gremlin-groovy");
+        Bindings bindings = engine.createBindings();
         bindings.put("g", getGraph());
-
-        Object result = scriptEngine.eval(query, bindings);
-
-        return convertGremlinScriptResult(isPath, result);
-    }
-
-    private Object executeGremlinScript(String gremlinQuery) throws AtlasBaseException {
-        Object       result = null;
-        ScriptEngine engine = getGremlinScriptEngine();
-
-        try {
-            Bindings bindings = engine.createBindings();
-
-            bindings.put("g", getGraph());
-
-            result = engine.eval(gremlinQuery, bindings);
-        } catch (ScriptException e) {
-            throw new AtlasBaseException(AtlasErrorCode.GREMLIN_SCRIPT_EXECUTION_FAILED, gremlinQuery);
-        } finally {
-            releaseGremlinScriptEngine(engine);
-        }
-
+        Object result = engine.eval(gremlinQuery, bindings);
         return result;
     }
 
     @Override
-    public GroovyExpression generatePersisentToLogicalConversionExpression(GroovyExpression expr, IDataType<?> type) {
+    public String generatePersisentToLogicalConversionExpression(String expr, IDataType<?> type) {
 
         //nothing special needed, value is stored in required type
         return expr;
@@ -363,23 +256,23 @@ public class Titan0Graph implements AtlasGraph<Titan0Vertex, Titan0Edge> {
     }
 
     @Override
-    public GroovyExpression getInitialIndexedPredicate(GroovyExpression expr) {
-        return expr;
+    public String getInitialIndexedPredicate() {
+        return "";
     }
 
     @Override
-    public GroovyExpression addOutputTransformationPredicate(GroovyExpression expr, boolean inSelect, boolean isPath) {
-        return expr;
+    public String getOutputTransformationPredicate(boolean inSelect, boolean isPath) {
+        return "";
     }
 
     public Iterable<AtlasEdge<Titan0Vertex, Titan0Edge>> wrapEdges(Iterator<Edge> it) {
 
-        Iterable<Edge> iterable = new IteratorToIterableAdapter<>(it);
+        Iterable<Edge> iterable = new IteratorToIterableAdapter<Edge>(it);
         return wrapEdges(iterable);
     }
 
     public Iterable<AtlasVertex<Titan0Vertex, Titan0Edge>> wrapVertices(Iterator<Vertex> it) {
-        Iterable<Vertex> iterable = new IteratorToIterableAdapter<>(it);
+        Iterable<Vertex> iterable = new IteratorToIterableAdapter<Vertex>(it);
         return wrapVertices(iterable);
     }
 
@@ -396,7 +289,7 @@ public class Titan0Graph implements AtlasGraph<Titan0Vertex, Titan0Edge> {
     }
 
     public Iterable<AtlasEdge<Titan0Vertex, Titan0Edge>> wrapEdges(Iterable<Edge> it) {
-        Iterable<Edge> result = it;
+        Iterable<Edge> result = (Iterable<Edge>)it;
         return Iterables.transform(result, new Function<Edge, AtlasEdge<Titan0Vertex, Titan0Edge>>(){
 
             @Override
@@ -405,13 +298,4 @@ public class Titan0Graph implements AtlasGraph<Titan0Vertex, Titan0Edge> {
             }
         });
     }
-
-    @Override
-    public boolean isMultiProperty(String propertyName) {
-        return multiProperties.contains(propertyName);
-    }
-
-    public void addMultiProperties(Set<String> names) {
-        multiProperties.addAll(names);
-    }
 }