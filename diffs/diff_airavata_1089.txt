diff --git a/modules/gfac/gfac-impl/src/main/java/org/apache/airavata/gfac/impl/HPCRemoteCluster.java b/modules/gfac/gfac-impl/src/main/java/org/apache/airavata/gfac/impl/HPCRemoteCluster.java
index 89acfbc42..725b6d094 100644
--- a/modules/gfac/gfac-impl/src/main/java/org/apache/airavata/gfac/impl/HPCRemoteCluster.java
+++ b/modules/gfac/gfac-impl/src/main/java/org/apache/airavata/gfac/impl/HPCRemoteCluster.java
@@ -26,16 +26,11 @@ import com.jcraft.jsch.JSchException;
 import com.jcraft.jsch.Session;
 import com.jcraft.jsch.UserInfo;
 import org.apache.airavata.common.exception.AiravataException;
-import org.apache.airavata.gfac.core.GFacException;
 import org.apache.airavata.gfac.core.JobManagerConfiguration;
+import org.apache.airavata.gfac.core.SSHApiException;
 import org.apache.airavata.gfac.core.authentication.AuthenticationInfo;
 import org.apache.airavata.gfac.core.authentication.SSHKeyAuthentication;
-import org.apache.airavata.gfac.core.cluster.AbstractRemoteCluster;
-import org.apache.airavata.gfac.core.cluster.CommandInfo;
-import org.apache.airavata.gfac.core.cluster.CommandOutput;
-import org.apache.airavata.gfac.core.cluster.JobSubmissionOutput;
-import org.apache.airavata.gfac.core.cluster.RawCommandInfo;
-import org.apache.airavata.gfac.core.cluster.ServerInfo;
+import org.apache.airavata.gfac.core.cluster.*;
 import org.apache.airavata.model.status.JobStatus;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -58,7 +53,7 @@ public class HPCRemoteCluster extends AbstractRemoteCluster{
 	private Session session;
 
 	public HPCRemoteCluster(ServerInfo serverInfo, JobManagerConfiguration jobManagerConfiguration, AuthenticationInfo
-			authenticationInfo) throws AiravataException, GFacException {
+			authenticationInfo) throws AiravataException {
 		super(serverInfo, jobManagerConfiguration, authenticationInfo);
 		try {
 			if (authenticationInfo instanceof SSHKeyAuthentication) {
@@ -88,7 +83,7 @@ public class HPCRemoteCluster extends AbstractRemoteCluster{
 	}
 
 	@Override
-	public JobSubmissionOutput submitBatchJob(String jobScriptFilePath, String workingDirectory) throws GFacException {
+	public JobSubmissionOutput submitBatchJob(String jobScriptFilePath, String workingDirectory) throws SSHApiException {
 		JobSubmissionOutput jsoutput = new JobSubmissionOutput();
 		copyTo(jobScriptFilePath, workingDirectory); // scp script file to working directory
 		RawCommandInfo submitCommand = jobManagerConfiguration.getSubmitCommand(workingDirectory, jobScriptFilePath);
@@ -116,7 +111,7 @@ public class HPCRemoteCluster extends AbstractRemoteCluster{
 	}
 
 	@Override
-	public void copyTo(String localFile, String remoteFile) throws GFacException {
+	public void copyTo(String localFile, String remoteFile) throws SSHApiException {
 		int retry = 3;
 		while (retry > 0) {
 			try {
@@ -126,9 +121,13 @@ public class HPCRemoteCluster extends AbstractRemoteCluster{
 				retry = 0;
 			} catch (Exception e) {
 				retry--;
-				session = Factory.getSSHSession(authenticationInfo, serverInfo);
+				try {
+					session = Factory.getSSHSession(authenticationInfo, serverInfo);
+				} catch (AiravataException e1) {
+					throw new SSHApiException("JSch Session connection failed", e1);
+				}
 				if (retry == 0) {
-					throw new GFacException("Failed to scp localhost:" + localFile + " to " + serverInfo.getHost() +
+					throw new SSHApiException("Failed to scp localhost:" + localFile + " to " + serverInfo.getHost() +
 							":" + remoteFile, e);
 				} else {
 					log.info("Retry transfer localhost:" + localFile + " to " + serverInfo.getHost() + ":" +
@@ -139,7 +138,7 @@ public class HPCRemoteCluster extends AbstractRemoteCluster{
 	}
 
 	@Override
-	public void copyFrom(String remoteFile, String localFile) throws GFacException {
+	public void copyFrom(String remoteFile, String localFile) throws SSHApiException {
 		int retry = 3;
 		while(retry>0) {
 			try {
@@ -149,9 +148,13 @@ public class HPCRemoteCluster extends AbstractRemoteCluster{
 				retry=0;
 			} catch (Exception e) {
 				retry--;
-				session = Factory.getSSHSession(authenticationInfo, serverInfo);
+				try {
+					session = Factory.getSSHSession(authenticationInfo, serverInfo);
+				} catch (AiravataException e1) {
+					throw new SSHApiException("JSch Session connection failed", e1);
+				}
 				if (retry == 0) {
-					throw new GFacException("Failed to scp " + serverInfo.getHost() + ":" + remoteFile + " to " +
+					throw new SSHApiException("Failed to scp " + serverInfo.getHost() + ":" + remoteFile + " to " +
 							"localhost:" + localFile, e);
 				} else {
 					log.info("Retry transfer " + serverInfo.getHost() + ":" + remoteFile + "  to localhost:" + localFile);
@@ -161,11 +164,7 @@ public class HPCRemoteCluster extends AbstractRemoteCluster{
 	}
 
 	@Override
-	public void scpThirdParty(String sourceFile,
-							  String destinationFile,
-							  Session clientSession,
-							  DIRECTION direction,
-							  boolean ignoreEmptyFile) throws GFacException {
+	public void scpThirdParty(String sourceFile, String destinationFile, Session clientSession, DIRECTION direction, boolean ignoreEmptyFile) throws SSHApiException {
 		int retryCount= 0;
 		try {
 			while (retryCount < MAX_RETRY_COUNT) {
@@ -174,9 +173,9 @@ public class HPCRemoteCluster extends AbstractRemoteCluster{
 				log.info("Transferring from:" + sourceFile + " To: " + destinationFile);
 				try {
 					if (direction == DIRECTION.TO) {
-                        SSHUtils.scpThirdParty(sourceFile, session, destinationFile, clientSession, ignoreEmptyFile);
-                    } else {
                         SSHUtils.scpThirdParty(sourceFile, clientSession, destinationFile, session, ignoreEmptyFile);
+                    } else {
+                        SSHUtils.scpThirdParty(sourceFile, session, destinationFile, clientSession, ignoreEmptyFile);
                     }
 					break; // exit while loop
 				} catch (JSchException e) {
@@ -188,14 +187,14 @@ public class HPCRemoteCluster extends AbstractRemoteCluster{
 					log.error("Issue with jsch, Retry transferring from:" + sourceFile + " To: " + destinationFile, e);
 				}
 			}
-        } catch (IOException | JSchException e) {
-			throw new GFacException("Failed scp file:" + sourceFile + " to remote file "
+        } catch (IOException | AiravataException| JSchException e) {
+			throw new SSHApiException("Failed scp file:" + sourceFile + " to remote file "
 					+destinationFile , e);
 		}
 	}
 
 	@Override
-	public void makeDirectory(String directoryPath) throws GFacException {
+	public void makeDirectory(String directoryPath) throws SSHApiException {
 		int retryCount = 0;
 		try {
 			while (retryCount < MAX_RETRY_COUNT) {
@@ -215,13 +214,13 @@ public class HPCRemoteCluster extends AbstractRemoteCluster{
 					log.error("Issue with jsch, Retry creating directory: " + serverInfo.getHost() + ":" + directoryPath);
 				}
 			}
-		} catch (JSchException | IOException e) {
-			throw new GFacException("Failed to create directory " + serverInfo.getHost() + ":" + directoryPath, e);
+		} catch (JSchException | AiravataException | IOException e) {
+			throw new SSHApiException("Failed to create directory " + serverInfo.getHost() + ":" + directoryPath, e);
 		}
 	}
 
 	@Override
-	public JobStatus cancelJob(String jobId) throws GFacException {
+	public JobStatus cancelJob(String jobId) throws SSHApiException {
 		JobStatus oldStatus = getJobStatus(jobId);
 		RawCommandInfo cancelCommand = jobManagerConfiguration.getCancelCommand(jobId);
 		StandardOutReader reader = new StandardOutReader();
@@ -231,7 +230,7 @@ public class HPCRemoteCluster extends AbstractRemoteCluster{
 	}
 
 	@Override
-	public JobStatus getJobStatus(String jobId) throws GFacException {
+	public JobStatus getJobStatus(String jobId) throws SSHApiException {
 		RawCommandInfo monitorCommand = jobManagerConfiguration.getMonitorCommand(jobId);
 		StandardOutReader reader = new StandardOutReader();
 		executeCommand(monitorCommand, reader);
@@ -240,7 +239,7 @@ public class HPCRemoteCluster extends AbstractRemoteCluster{
 	}
 
 	@Override
-	public String getJobIdByJobName(String jobName, String userName) throws GFacException {
+	public String getJobIdByJobName(String jobName, String userName) throws SSHApiException {
 		RawCommandInfo jobIdMonitorCommand = jobManagerConfiguration.getJobIdMonitorCommand(jobName, userName);
 		StandardOutReader reader = new StandardOutReader();
 		executeCommand(jobIdMonitorCommand, reader);
@@ -249,7 +248,7 @@ public class HPCRemoteCluster extends AbstractRemoteCluster{
 	}
 
 	@Override
-	public void getJobStatuses(String userName, Map<String, JobStatus> jobStatusMap) throws GFacException {
+	public void getJobStatuses(String userName, Map<String, JobStatus> jobStatusMap) throws SSHApiException {
 		RawCommandInfo userBasedMonitorCommand = jobManagerConfiguration.getUserBasedMonitorCommand(userName);
 		StandardOutReader reader = new StandardOutReader();
 		executeCommand(userBasedMonitorCommand, reader);
@@ -258,55 +257,58 @@ public class HPCRemoteCluster extends AbstractRemoteCluster{
 	}
 
 	@Override
-	public List<String> listDirectory(String directoryPath) throws GFacException {
+	public List<String> listDirectory(String directoryPath) throws SSHApiException {
 		try {
 			session = Factory.getSSHSession(authenticationInfo, serverInfo);
 			log.info("Creating directory: " + serverInfo.getHost() + ":" + directoryPath);
 			return SSHUtils.listDirectory(directoryPath, session);
-		} catch (JSchException | IOException e) {
-			throw new GFacException("Failed to list directory " + serverInfo.getHost() + ":" + directoryPath, e);
+		} catch (JSchException | AiravataException | IOException e) {
+			throw new SSHApiException("Failed to list directory " + serverInfo.getHost() + ":" + directoryPath, e);
 		}
 	}
 
 	@Override
-	public boolean execute(CommandInfo commandInfo) throws GFacException {
+	public boolean execute(CommandInfo commandInfo) throws SSHApiException {
 		StandardOutReader reader = new StandardOutReader();
 		executeCommand(commandInfo, reader);
 		return true;
 	}
 
 	@Override
-	public Session getSession() throws GFacException {
-		return Factory.getSSHSession(authenticationInfo, serverInfo);
+	public Session getSession() throws SSHApiException {
+		try {
+			return Factory.getSSHSession(authenticationInfo, serverInfo);
+		} catch (AiravataException e) {
+			throw new SSHApiException("Error!",e);
+		}
 	}
 
 	@Override
-	public void disconnect() throws GFacException {
+	public void disconnect() throws SSHApiException {
 		Factory.disconnectSSHSession(serverInfo);
 	}
 
 	/**
 	 * This method return <code>true</code> if there is an error in standard output. If not return <code>false</code>
-	 *
-	 * @param reader        - command output reader
+	 * @param reader - command output reader
 	 * @param submitCommand - command which executed in remote machine.
 	 * @return command has return error or not.
 	 */
-	private void throwExceptionOnError(StandardOutReader reader, RawCommandInfo submitCommand) throws GFacException {
+	private void throwExceptionOnError(StandardOutReader reader, RawCommandInfo submitCommand) throws SSHApiException{
 		String stdErrorString = reader.getStdErrorString();
 		String command = submitCommand.getCommand().substring(submitCommand.getCommand().lastIndexOf(File.separator)
 				+ 1);
 		if (stdErrorString == null) {
 			// noting to do
-		} else if ((stdErrorString.contains(command.trim()) && !stdErrorString.contains("Warning")) || stdErrorString
+		}else if ((stdErrorString.contains(command.trim()) && !stdErrorString.contains("Warning")) || stdErrorString
 				.contains("error")) {
 			log.error("Command {} , Standard Error output {}", command, stdErrorString);
-			throw new GFacException("Error running command " + command + "  on remote cluster. StandardError: " +
+			throw new SSHApiException("Error running command " + command + "  on remote cluster. StandardError: " +
 					stdErrorString);
 		}
 	}
 
-	private void executeCommand(CommandInfo commandInfo, CommandOutput commandOutput) throws GFacException {
+	private void executeCommand(CommandInfo commandInfo, CommandOutput commandOutput) throws SSHApiException {
 		String command = commandInfo.getCommand();
 		int retryCount = 0;
 		ChannelExec channelExec = null;
@@ -331,8 +333,8 @@ public class HPCRemoteCluster extends AbstractRemoteCluster{
 					log.error("Issue with jsch, Retry executing command : " + command, e);
 				}
 			}
-		} catch (JSchException e) {
-			throw new GFacException("Unable to execute command - " + command, e);
+		} catch (JSchException | AiravataException e) {
+			throw new SSHApiException("Unable to execute command - " + command, e);
 		} finally {
 			//Only disconnecting the channel, session can be reused
 			if (channelExec != null) {