diff --git a/asterixdb/asterix-app/src/main/java/org/apache/asterix/api/http/servlet/ClusterNodeDetailsAPIServlet.java b/asterixdb/asterix-app/src/main/java/org/apache/asterix/api/http/servlet/ClusterNodeDetailsAPIServlet.java
index 5a91fee739..9cccdadcff 100644
--- a/asterixdb/asterix-app/src/main/java/org/apache/asterix/api/http/servlet/ClusterNodeDetailsAPIServlet.java
+++ b/asterixdb/asterix-app/src/main/java/org/apache/asterix/api/http/servlet/ClusterNodeDetailsAPIServlet.java
@@ -18,8 +18,6 @@
  */
 package org.apache.asterix.api.http.servlet;
 
-import static org.apache.asterix.api.http.servlet.ServletConstants.HYRACKS_CONNECTION_ATTR;
-
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.util.ArrayList;
@@ -36,11 +34,13 @@ import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 
+import static org.apache.asterix.api.http.servlet.ServletConstants.HYRACKS_CONNECTION_ATTR;
+
 public class ClusterNodeDetailsAPIServlet extends ClusterAPIServlet {
     private static final long serialVersionUID = 1L;
 
     @Override
-    protected void getUnsafe(HttpServletRequest request, HttpServletResponse response) throws IOException {
+    public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
         PrintWriter responseWriter = response.getWriter();
         ServletContext context = getServletContext();
         IHyracksClientConnection hcc = (IHyracksClientConnection) context.getAttribute(HYRACKS_CONNECTION_ATTR);
@@ -49,7 +49,7 @@ public class ClusterNodeDetailsAPIServlet extends ClusterAPIServlet {
         try {
             if (request.getPathInfo() == null) {
                 json = new JSONObject();
-                json.put("ncs", getClusterStateJSON(request, "../").getJSONArray("ncs"));
+                json.put("ncs", getClusterStateJSON(request, "").getJSONArray("ncs"));
             } else {
                 json = processNode(request, hcc);
             }
@@ -68,15 +68,11 @@ public class ClusterNodeDetailsAPIServlet extends ClusterAPIServlet {
 
     private JSONObject processNode(HttpServletRequest request, IHyracksClientConnection hcc)
             throws Exception {
-        String pathInfo = request.getPathInfo();
-        if (pathInfo.endsWith("/")) {
-            throw new IllegalArgumentException();
-        }
-        String[] parts = pathInfo.substring(1).split("/");
+        String[] parts = request.getPathInfo().substring(1).replaceAll("/+", "/").split("/");
         final String node = parts[0];
 
         if (parts.length == 1) {
-            JSONArray ncs = getClusterStateJSON(request, "../../").getJSONArray("ncs");
+            JSONArray ncs = getClusterStateJSON(request, "../").getJSONArray("ncs");
             for (int i = 0; i < ncs.length(); i++) {
                 JSONObject json = ncs.getJSONObject(i);
                 if (node.equals(json.getString("node_id"))) {
@@ -94,14 +90,9 @@ public class ClusterNodeDetailsAPIServlet extends ClusterAPIServlet {
                 case "config":
                     json = processNodeConfig(hcc, node);
                     break;
-
                 case "stats":
                     json = processNodeStats(hcc, node);
                     break;
-
-                case "threaddump":
-                    return processNodeThreadDump(hcc, node);
-
                 default:
                     throw new IllegalArgumentException();
             }
@@ -128,6 +119,10 @@ public class ClusterNodeDetailsAPIServlet extends ClusterAPIServlet {
     }
 
     private JSONObject processNodeStats(IHyracksClientConnection hcc, String node) throws Exception {
+        if ("cc".equals(node)) {
+            return new JSONObject();
+        }
+
         final String details = hcc.getNodeDetailsJSON(node, true, false);
         if (details == null) {
             throw new IllegalArgumentException();
@@ -141,55 +136,28 @@ public class ClusterNodeDetailsAPIServlet extends ClusterAPIServlet {
             keys.add((String) iter.next());
         }
 
-        final JSONArray gcNames = json.getJSONArray("gc-names");
-        final JSONArray gcCollectionTimes = json.getJSONArray("gc-collection-times");
-        final JSONArray gcCollectionCounts = json.getJSONArray("gc-collection-counts");
-
+        int gcNames = json.getJSONArray("gc-names").length();
         for (String key : keys) {
-            if (key.startsWith("gc-")) {
-                json.remove(key);
-            } else if (json.get(key) instanceof JSONArray) {
-                final JSONArray valueArray = json.getJSONArray(key);
-                // fixup an index of -1 to the final element in the array (i.e. RRD_SIZE)
-                if (index == -1) {
-                    index = valueArray.length() - 1;
+            if (key.startsWith("gc-collection-")) {
+                final JSONArray gcArray = json.getJSONArray(key);
+                for (int i = 0; i < gcNames; i++) {
+                    gcArray.put(i, gcArray.getJSONArray(i).get(index));
                 }
-                final Object value = valueArray.get(index);
-                json.remove(key);
-                json.put(key.replaceAll("s$",""), value);
+            } else if (!"node-id".equals(key) && !"gc-names".equals(key)) {
+                json.put(key, json.getJSONArray(key).get(index));
             }
         }
-        List<JSONObject> gcs = new ArrayList<>();
-
-        for (int i = 0; i < gcNames.length(); i++) {
-            JSONObject gc = new JSONObject();
-            gc.put("name", gcNames.get(i));
-            gc.put("collection-time", ((JSONArray)gcCollectionTimes.get(i)).get(index));
-            gc.put("collection-count", ((JSONArray)gcCollectionCounts.get(i)).get(index));
-            gcs.add(gc);
-        }
-        json.put("gcs", gcs);
-
         return json;
     }
 
     private JSONObject processNodeConfig(IHyracksClientConnection hcc, String node) throws Exception {
-        String config = hcc.getNodeDetailsJSON(node, false, true);
-        if (config == null) {
-            throw new IllegalArgumentException();
-        }
-        return new JSONObject(config);
-    }
-
-    private JSONObject processNodeThreadDump(IHyracksClientConnection hcc, String node) throws Exception {
         if ("cc".equals(node)) {
             return new JSONObject();
         }
-        String dump = hcc.getThreadDump(node);
-        if (dump == null) {
+        String config = hcc.getNodeDetailsJSON(node, false, true);
+        if (config == null) {
             throw new IllegalArgumentException();
         }
-        return new JSONObject(dump);
+        return new JSONObject(config);
     }
-
 }