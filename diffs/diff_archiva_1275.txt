diff --git a/maven-repository-indexer/src/main/java/org/apache/maven/repository/indexing/AbstractRepositoryIndex.java b/maven-repository-indexer/src/main/java/org/apache/maven/repository/indexing/AbstractRepositoryIndex.java
index 410c35f61..1ab604622 100644
--- a/maven-repository-indexer/src/main/java/org/apache/maven/repository/indexing/AbstractRepositoryIndex.java
+++ b/maven-repository-indexer/src/main/java/org/apache/maven/repository/indexing/AbstractRepositoryIndex.java
@@ -1,13 +1,14 @@
 package org.apache.maven.repository.indexing;
 
 /*
- * Copyright 2005-2006 The Apache Software Foundation.
+ * Copyright 2001-2005 The Apache Software Foundation.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0
+ 
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -16,14 +17,13 @@
  * limitations under the License.
  */
 
-import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.IndexWriter;
-import org.apache.maven.artifact.repository.ArtifactRepository;
-
 import java.io.File;
 import java.io.IOException;
 import java.util.Collection;
 
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.IndexWriter;
+
 /**
  * Abstract class for RepositoryIndexers
  *
@@ -32,37 +32,18 @@
 public abstract class AbstractRepositoryIndex
     implements RepositoryIndex
 {
-    private String indexPath;
-
-    private boolean indexOpen;
-
-    private IndexWriter indexWriter;
-
-    protected ArtifactRepository repository;
-
-    protected AbstractRepositoryIndex( String indexPath, ArtifactRepository repository, String[] indexFields )
-        throws RepositoryIndexException
-    {
-        this.repository = repository;
-        this.indexPath = indexPath;
-
-        try
-        {
-            validateIndex( indexFields );
-        }
-        catch ( IOException e )
-        {
-            throw new RepositoryIndexException( e );
-        }
-    }
-
+    protected String indexPath;
+    protected boolean indexOpen;
+    protected IndexReader indexReader;
+    protected IndexWriter indexWriter;
+    
     /**
      * method to encapsulate the optimize() method for lucene
      */
     public void optimize()
         throws RepositoryIndexException
     {
-        if ( !indexOpen )
+        if ( !isOpen() )
         {
             throw new RepositoryIndexException( "Unable to optimize index on a closed index" );
         }
@@ -80,17 +61,17 @@ public void optimize()
     /**
      * method used to query the index status
      *
-     * @return true if the index is open.
+     * @param true if the index is open.
      */
     public boolean isOpen()
     {
         return indexOpen;
     }
-
+    
     /**
      * method used to close all open streams to the index directory
      */
-    public void close()
+    public void close() 
         throws RepositoryIndexException
     {
         try
@@ -101,65 +82,94 @@ public void close()
                 indexWriter = null;
             }
 
+            if ( indexReader != null )
+            {
+                indexReader.close();
+                indexReader = null;
+            }
+
             indexOpen = false;
         }
-        catch ( IOException e )
+        catch ( Exception e )
         {
-            throw new RepositoryIndexException( e.getMessage(), e );
+            throw new RepositoryIndexException( e );
         }
     }
 
+    /**
+     * method for opening the index directory for indexing operations
+     */
+    public void open( String indexPath )
+        throws RepositoryIndexException
+    {
+        try
+        {
+            this.indexPath = indexPath;
+            validateIndex();
+        }
+        catch ( IOException e )
+        {
+            throw new RepositoryIndexException( e );
+        }
+    }
+    
     public String getIndexPath()
     {
         return indexPath;
     }
 
-    protected IndexWriter getIndexWriter()
+    protected void getIndexWriter()
         throws IOException
     {
         if ( indexWriter == null )
         {
             indexWriter = new IndexWriter( indexPath, getAnalyzer(), false );
         }
-        return indexWriter;
     }
 
+    protected void getIndexReader()
+        throws IOException
+    {
+        if ( indexReader == null )
+        {
+            indexReader = IndexReader.open( indexPath );
+        }
+    }
+    
     /**
      * method for validating an index directory
-     *
-     * @param indexFields
+     * 
      * @throws RepositoryIndexException if the given indexPath is not valid for this type of RepositoryIndex
      */
-    private void validateIndex( String[] indexFields )
+    protected void validateIndex()
         throws RepositoryIndexException, IOException
     {
         File indexDir = new File( indexPath );
         if ( IndexReader.indexExists( indexDir ) )
         {
-            IndexReader indexReader = IndexReader.open( indexPath );
-            try
+            getIndexReader();
+            if ( indexReader.numDocs() > 0 )
             {
-                if ( indexReader.numDocs() > 0 )
+                Collection fields = indexReader.getFieldNames();
+                String[] indexFields = getIndexFields();
+                for( int idx=0; idx<indexFields.length; idx++ )
                 {
-                    Collection fields = indexReader.getFieldNames();
-                    for ( int idx = 0; idx < indexFields.length; idx++ )
+                    if ( !fields.contains( indexFields[ idx ] ) )
                     {
-                        if ( !fields.contains( indexFields[idx] ) )
-                        {
-                            throw new RepositoryIndexException(
-                                "The Field " + indexFields[idx] + " does not exist in index " + indexPath + "." );
-                        }
+                        throw new RepositoryIndexException( "The Field " + indexFields[ idx ] + " does not exist in " +
+                                "index path " + indexPath + "." );
                     }
                 }
             }
-            finally
+            else
             {
-                indexReader.close();
+                System.out.println("Skipping index field validations for empty index." );
             }
         }
         else if ( !indexDir.exists() )
         {
             indexWriter = new IndexWriter( indexPath, getAnalyzer(), true );
+            System.out.println( "New index directory created in: " + indexDir.getAbsolutePath() );
         }
         else if ( indexDir.isDirectory() )
         {
@@ -172,9 +182,4 @@ else if ( indexDir.isDirectory() )
 
         indexOpen = true;
     }
-
-    public ArtifactRepository getRepository()
-    {
-        return repository;
-    }
 }