diff --git a/spi-fly-core/src/main/java/org/apache/aries/spifly/ConsumerHeaderProcessor.java b/spi-fly-core/src/main/java/org/apache/aries/spifly/ConsumerHeaderProcessor.java
index 573216578..057957b3b 100644
--- a/spi-fly-core/src/main/java/org/apache/aries/spifly/ConsumerHeaderProcessor.java
+++ b/spi-fly-core/src/main/java/org/apache/aries/spifly/ConsumerHeaderProcessor.java
@@ -19,10 +19,8 @@
 package org.apache.aries.spifly;
 
 import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Dictionary;
+import java.util.Collections;
 import java.util.HashSet;
-import java.util.Hashtable;
 import java.util.List;
 import java.util.ServiceLoader;
 import java.util.Set;
@@ -31,19 +29,9 @@ import org.apache.aries.spifly.HeaderParser.PathElement;
 import org.apache.aries.spifly.api.SpiFlyConstants;
 import org.apache.aries.util.manifest.ManifestHeaderProcessor;
 import org.apache.aries.util.manifest.ManifestHeaderProcessor.GenericMetadata;
-import org.osgi.framework.Filter;
-import org.osgi.framework.FrameworkUtil;
-import org.osgi.framework.InvalidSyntaxException;
 import org.osgi.framework.Version;
 
 public class ConsumerHeaderProcessor {
-    private static final Dictionary<String, String> PROCESSOR_FILTER_MATCH;
-
-    static {
-        PROCESSOR_FILTER_MATCH = new Hashtable<String, String>();
-        PROCESSOR_FILTER_MATCH.put(SpiFlyConstants.EXTENDER_CAPABILITY_NAMESPACE, SpiFlyConstants.CLIENT_EXTENDER_NAME);
-    }
-
     /**
      * Parses headers of the following syntax:
      * <ul>
@@ -72,7 +60,7 @@ public class ConsumerHeaderProcessor {
      * @param consumerHeader the <tt>SPI-Consumer</tt> header.
      * @return an instance of the {@link WeavingData} class.
      */
-    public static Set<WeavingData> processHeader(String consumerHeaderName, String consumerHeader) throws Exception {
+    public static Set<WeavingData> processHeader(String consumerHeaderName, String consumerHeader) {
         if (SpiFlyConstants.REQUIRE_CAPABILITY.equals(consumerHeaderName)) {
             return processRequireCapabilityHeader(consumerHeader);
         }
@@ -175,28 +163,24 @@ public class ConsumerHeaderProcessor {
         return weavingData;
     }
 
-    private static Set<WeavingData> processRequireCapabilityHeader(String consumerHeader) throws InvalidSyntaxException {
+    private static Set<WeavingData> processRequireCapabilityHeader(String consumerHeader) {
         Set<WeavingData> weavingData = new HashSet<WeavingData>();
 
         List<GenericMetadata> requirements = ManifestHeaderProcessor.parseRequirementString(consumerHeader);
-        GenericMetadata extenderRequirement = findRequirement(requirements, SpiFlyConstants.EXTENDER_CAPABILITY_NAMESPACE, SpiFlyConstants.CLIENT_EXTENDER_NAME);
-        Collection<GenericMetadata> serviceLoaderRequirements = findAllMetadata(requirements, SpiFlyConstants.SERVICELOADER_CAPABILITY_NAMESPACE);
+        for (GenericMetadata req : requirements) {
+            if (SpiFlyConstants.SPI_CAPABILITY_NAMESPACE.equals(req.getNamespace())) {
+                if (!"active".equals(req.getDirectives().get("effective"))) {
+                    continue;
+                }
 
-        if (extenderRequirement != null) {
-            ArgRestrictions ar = new ArgRestrictions();
-            ar.addRestriction(0, Class.class.getName());
-            MethodRestriction mr = new MethodRestriction("load", ar);
+                ArgRestrictions ar = new ArgRestrictions();
+                ar.addRestriction(0, Class.class.getName());
+                MethodRestriction mr = new MethodRestriction("load", ar);
 
-            List<BundleDescriptor> allowedBundles = new ArrayList<BundleDescriptor>();
-            for (GenericMetadata req : serviceLoaderRequirements) {
-                String slFilterString = req.getDirectives().get(SpiFlyConstants.FILTER_DIRECTIVE);
-                if (slFilterString != null) {
-                    Filter slFilter = FrameworkUtil.createFilter(slFilterString);
-                    allowedBundles.add(new BundleDescriptor(slFilter));
-                }
-            }
+                List<BundleDescriptor> allowedBundles = Collections.emptyList();
 
-            weavingData.add(createWeavingData(ServiceLoader.class.getName(), "load", mr, allowedBundles));
+                weavingData.add(createWeavingData(ServiceLoader.class.getName(), "load", mr, allowedBundles));
+            }
         }
 
         return weavingData;
@@ -216,44 +200,4 @@ public class ConsumerHeaderProcessor {
         return new WeavingData(className, methodName, argClasses, restrictions,
                 allowedBundles.size() == 0 ? null : allowedBundles);
     }
-
-    private static GenericMetadata findRequirement(List<GenericMetadata> requirements, String namespace, String type) throws InvalidSyntaxException {
-        Dictionary<String, String> nsAttr = new Hashtable<String, String>();
-        nsAttr.put(namespace, type);
-
-        for (GenericMetadata req : requirements) {
-            if (namespace.equals(req.getNamespace())) {
-                String filterString = req.getDirectives().get(SpiFlyConstants.FILTER_DIRECTIVE);
-                if (filterString != null) {
-                    Filter filter = FrameworkUtil.createFilter(filterString);
-                    if (filter.match(nsAttr)) {
-                        return req;
-                    }
-                }
-            }
-        }
-        return null;
-    }
-
-
-//    private static GenericMetadata findMetadata(List<GenericMetadata> requirements, String namespace, String type) {
-//        for (GenericMetadata req : requirements) {
-//            if (namespace.equals(req.getNamespace())) {
-//                if (type.equals(req.getAttributes().get(namespace))) {
-//                    return req;
-//                }
-//            }
-//        }
-//        return null;
-//    }
-
-    private static Collection<GenericMetadata> findAllMetadata(List<GenericMetadata> requirements, String namespace) {
-        List<GenericMetadata> reqs = new ArrayList<ManifestHeaderProcessor.GenericMetadata>();
-        for (GenericMetadata req : requirements) {
-            if (namespace.equals(req.getNamespace())) {
-                reqs.add(req);
-            }
-        }
-        return reqs;
-    }
 }