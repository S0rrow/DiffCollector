diff --git a/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/remoting/impl/netty/NettyConnection.java b/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/remoting/impl/netty/NettyConnection.java
index 497448e547..d8b2315f7f 100644
--- a/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/remoting/impl/netty/NettyConnection.java
+++ b/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/remoting/impl/netty/NettyConnection.java
@@ -16,14 +16,12 @@
  */
 package org.apache.activemq.artemis.core.remoting.impl.netty;
 
-import java.io.IOException;
-import java.io.RandomAccessFile;
 import java.net.SocketAddress;
-import java.nio.channels.FileChannel;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.locks.LockSupport;
 
 import io.netty.buffer.ByteBuf;
@@ -33,7 +31,6 @@ import io.netty.channel.ChannelFutureListener;
 import io.netty.channel.ChannelPromise;
 import io.netty.channel.EventLoop;
 import io.netty.handler.ssl.SslHandler;
-import io.netty.handler.stream.ChunkedFile;
 import org.apache.activemq.artemis.api.core.ActiveMQBuffer;
 import org.apache.activemq.artemis.api.core.ActiveMQInterruptedException;
 import org.apache.activemq.artemis.api.core.TransportConfiguration;
@@ -44,19 +41,15 @@ import org.apache.activemq.artemis.spi.core.protocol.RemotingConnection;
 import org.apache.activemq.artemis.spi.core.remoting.BaseConnectionLifeCycleListener;
 import org.apache.activemq.artemis.spi.core.remoting.Connection;
 import org.apache.activemq.artemis.spi.core.remoting.ReadyListener;
-import org.apache.activemq.artemis.utils.Env;
 import org.apache.activemq.artemis.utils.IPV6Util;
-import org.jboss.logging.Logger;
 
 public class NettyConnection implements Connection {
 
-   private static final Logger logger = Logger.getLogger(NettyConnection.class);
-
    private static final int DEFAULT_BATCH_BYTES = Integer.getInteger("io.netty.batch.bytes", 8192);
    private static final int DEFAULT_WAIT_MILLIS = 10_000;
 
    protected final Channel channel;
-   private final BaseConnectionLifeCycleListener<?> listener;
+   private final BaseConnectionLifeCycleListener listener;
    private final boolean directDeliver;
    private final Map<String, Object> configuration;
    /**
@@ -64,12 +57,19 @@ public class NettyConnection implements Connection {
     * here for when the connection (or Netty Channel) becomes available again.
     */
    private final List<ReadyListener> readyListeners = new ArrayList<>();
-   private final ThreadLocal<ArrayList<ReadyListener>> localListenersPool = new ThreadLocal<>();
+   private final ThreadLocal<ArrayList<ReadyListener>> localListenersPool = ThreadLocal.withInitial(ArrayList::new);
 
    private final boolean batchingEnabled;
    private final int writeBufferHighWaterMark;
    private final int batchLimit;
 
+   /**
+    * This counter is splitted in 2 variables to write it with less performance
+    * impact: no volatile get is required to update its value
+    */
+   private final AtomicLong pendingWritesOnEventLoopView = new AtomicLong();
+   private long pendingWritesOnEventLoop = 0;
+
    private boolean closed;
    private RemotingConnection protocolConnection;
 
@@ -77,7 +77,7 @@ public class NettyConnection implements Connection {
 
    public NettyConnection(final Map<String, Object> configuration,
                           final Channel channel,
-                          final BaseConnectionLifeCycleListener<?> listener,
+                          final BaseConnectionLifeCycleListener listener,
                           boolean batchingEnabled,
                           boolean directDeliver) {
       this.configuration = configuration;
@@ -126,6 +126,18 @@ public class NettyConnection implements Connection {
       return batchBufferSize(this.channel, this.writeBufferHighWaterMark);
    }
 
+   public final long pendingWritesOnEventLoop() {
+      final EventLoop eventLoop = channel.eventLoop();
+      final boolean inEventLoop = eventLoop.inEventLoop();
+      final long pendingWritesOnEventLoop;
+      if (inEventLoop) {
+         pendingWritesOnEventLoop = this.pendingWritesOnEventLoop;
+      } else {
+         pendingWritesOnEventLoop = pendingWritesOnEventLoopView.get();
+      }
+      return pendingWritesOnEventLoop;
+   }
+
    public final Channel getNettyChannel() {
       return channel;
    }
@@ -146,34 +158,21 @@ public class NettyConnection implements Connection {
       }
    }
 
-   @Override
-   public boolean isOpen() {
-      return channel.isOpen();
-   }
-
    @Override
    public final void fireReady(final boolean ready) {
-      ArrayList<ReadyListener> readyToCall = localListenersPool.get();
-      if (readyToCall != null) {
-         localListenersPool.set(null);
-      }
+      final ArrayList<ReadyListener> readyToCall = localListenersPool.get();
       synchronized (readyListeners) {
          this.ready = ready;
 
          if (ready) {
             final int size = this.readyListeners.size();
-            if (readyToCall != null) {
-               readyToCall.ensureCapacity(size);
-            }
+            readyToCall.ensureCapacity(size);
             try {
                for (int i = 0; i < size; i++) {
                   final ReadyListener readyListener = readyListeners.get(i);
                   if (readyListener == null) {
                      break;
                   }
-                  if (readyToCall == null) {
-                     readyToCall = new ArrayList<>(size);
-                  }
                   readyToCall.add(readyListener);
                }
             } finally {
@@ -181,23 +180,18 @@ public class NettyConnection implements Connection {
             }
          }
       }
-      if (readyToCall != null) {
-         try {
-            readyToCall.forEach(readyListener -> {
-               try {
-                  readyListener.readyForWriting();
-               } catch (Throwable logOnly) {
-                  ActiveMQClientLogger.LOGGER.failedToSetChannelReadyForWriting(logOnly);
-               }
-            });
-         } catch (Throwable t) {
-            ActiveMQClientLogger.LOGGER.failedToSetChannelReadyForWriting(t);
-         } finally {
-            readyToCall.clear();
-            if (localListenersPool.get() != null) {
-               localListenersPool.set(readyToCall);
+      try {
+         final int size = readyToCall.size();
+         for (int i = 0; i < size; i++) {
+            try {
+               final ReadyListener readyListener = readyToCall.get(i);
+               readyListener.readyForWriting();
+            } catch (Throwable logOnly) {
+               ActiveMQClientLogger.LOGGER.warn(logOnly.getMessage(), logOnly);
             }
          }
+      } finally {
+         readyToCall.clear();
       }
    }
 
@@ -207,7 +201,7 @@ public class NettyConnection implements Connection {
          try {
             channel.close();
          } catch (Throwable e) {
-            ActiveMQClientLogger.LOGGER.failedForceClose(e);
+            ActiveMQClientLogger.LOGGER.warn(e.getMessage(), e);
          }
       }
    }
@@ -240,10 +234,12 @@ public class NettyConnection implements Connection {
       boolean inEventLoop = eventLoop.inEventLoop();
       //if we are in an event loop we need to close the channel after the writes have finished
       if (!inEventLoop) {
-         closeChannel(channel, false);
+         final SslHandler sslHandler = (SslHandler) channel.pipeline().get("ssl");
+         closeSSLAndChannel(sslHandler, channel, false);
       } else {
          eventLoop.execute(() -> {
-            closeChannel(channel, true);
+            final SslHandler sslHandler = (SslHandler) channel.pipeline().get("ssl");
+            closeSSLAndChannel(sslHandler, channel, true);
          });
       }
 
@@ -258,15 +254,15 @@ public class NettyConnection implements Connection {
          return new ChannelBufferWrapper(channel.alloc().directBuffer(size), true);
       } catch (OutOfMemoryError oom) {
          final long totalPendingWriteBytes = batchBufferSize(this.channel, this.writeBufferHighWaterMark);
-         // I'm not using the ActiveMQLogger framework here, as I wanted the class name to be very specific here
-         logger.warn("Trying to allocate " + size + " bytes, System is throwing OutOfMemoryError on NettyConnection " + this + ", there are currently " + "pendingWrites: [NETTY] -> " + totalPendingWriteBytes + " causes: " + oom.getMessage(), oom);
+         ActiveMQClientLogger.LOGGER.warn("Trying to allocate " + size + " bytes, System is throwing OutOfMemoryError on NettyConnection " + this + ", there are currently " + "pendingWrites: [NETTY] -> " + totalPendingWriteBytes + "[EVENT LOOP] -> " + pendingWritesOnEventLoopView.get() + " causes: " + oom.getMessage(), oom);
          throw oom;
       }
    }
 
    @Override
    public final Object getID() {
-      return channel.id();
+      // TODO: Think of it
+      return channel.hashCode();
    }
 
    // This is called periodically to flush the batch buffer
@@ -291,27 +287,12 @@ public class NettyConnection implements Connection {
       write(buffer, flush, batched, null);
    }
 
-   private void checkConnectionState() {
-      if (this.closed || !this.channel.isActive()) {
-         throw new IllegalStateException("Connection " + getID() + " closed or disconnected");
-      }
-   }
-
    @Override
    public final boolean blockUntilWritable(final int requiredCapacity, final long timeout, final TimeUnit timeUnit) {
-      checkConnectionState();
       final boolean isAllowedToBlock = isAllowedToBlock();
       if (!isAllowedToBlock) {
-
-         if (Env.isTestEnv()) {
-            // this will only show when inside the testsuite.
-            // we may great the log for FAILURE
-            logger.warn("FAILURE! The code is using blockUntilWritable inside a Netty worker, which would block. " +
-                           "The code will probably need fixing!", new Exception("trace"));
-         }
-
-         if (logger.isDebugEnabled()) {
-            logger.debug("Calling blockUntilWritable using a thread where it's not allowed");
+         if (ActiveMQClientLogger.LOGGER.isDebugEnabled()) {
+            ActiveMQClientLogger.LOGGER.debug("Calling blockUntilWritable using a thread where it's not allowed");
          }
          return canWrite(requiredCapacity);
       } else {
@@ -327,9 +308,7 @@ public class NettyConnection implements Connection {
             parkNanos = 1000L;
          }
          boolean canWrite;
-         while (!(canWrite = canWrite(requiredCapacity)) && (System.nanoTime() - deadline) < 0) {
-            //periodically check the connection state
-            checkConnectionState();
+         while (!(canWrite = canWrite(requiredCapacity)) && System.nanoTime() < deadline) {
             LockSupport.parkNanos(parkNanos);
          }
          return canWrite;
@@ -345,7 +324,10 @@ public class NettyConnection implements Connection {
    private boolean canWrite(final int requiredCapacity) {
       //evaluate if the write request could be taken:
       //there is enough space in the write buffer?
-      final long totalPendingWrites = this.pendingWritesOnChannel();
+      //The pending writes on event loop will eventually go into the Netty write buffer, hence consider them
+      //as part of the heuristic!
+      final long pendingWritesOnEventLoop = this.pendingWritesOnEventLoop();
+      final long totalPendingWrites = pendingWritesOnEventLoop + this.pendingWritesOnChannel();
       final boolean canWrite;
       if (requiredCapacity > this.writeBufferHighWaterMark) {
          canWrite = totalPendingWrites == 0;
@@ -355,32 +337,48 @@ public class NettyConnection implements Connection {
       return canWrite;
    }
 
-   private Object getFileObject(RandomAccessFile raf, FileChannel fileChannel, long offset, int dataSize) {
-      if (channel.pipeline().get(SslHandler.class) == null) {
-         return new NonClosingDefaultFileRegion(fileChannel, offset, dataSize);
-      } else {
-         try {
-            return new ChunkedFile(raf, offset, dataSize, 8192);
-         } catch (IOException e) {
-            throw new RuntimeException(e);
-         }
-      }
-   }
-
    @Override
    public final void write(ActiveMQBuffer buffer,
                            final boolean flush,
                            final boolean batched,
                            final ChannelFutureListener futureListener) {
       final int readableBytes = buffer.readableBytes();
-      if (logger.isDebugEnabled()) {
+      if (ActiveMQClientLogger.LOGGER.isDebugEnabled()) {
          final int remainingBytes = this.writeBufferHighWaterMark - readableBytes;
          if (remainingBytes < 0) {
-            logger.debug("a write request is exceeding by " + (-remainingBytes) + " bytes the writeBufferHighWaterMark size [ " + this.writeBufferHighWaterMark + " ] : consider to set it at least of " + readableBytes + " bytes");
+            ActiveMQClientLogger.LOGGER.debug("a write request is exceeding by " + (-remainingBytes) + " bytes the writeBufferHighWaterMark size [ " + this.writeBufferHighWaterMark + " ] : consider to set it at least of " + readableBytes + " bytes");
          }
       }
       //no need to lock because the Netty's channel is thread-safe
       //and the order of write is ensured by the order of the write calls
+      final EventLoop eventLoop = channel.eventLoop();
+      final boolean inEventLoop = eventLoop.inEventLoop();
+      if (!inEventLoop) {
+         writeNotInEventLoop(buffer, flush, batched, futureListener);
+      } else {
+         // OLD COMMENT:
+         // create a task which will be picked up by the eventloop and trigger the write.
+         // This is mainly needed as this method is triggered by different threads for the same channel.
+         // if we not do this we may produce out of order writes.
+         // NOTE:
+         // the submitted task does not effect in any way the current written size in the batch
+         // until the loop will process it, leading to a longer life for the ActiveMQBuffer buffer!!!
+         // To solve it, will be necessary to manually perform the count of the current batch instead of rely on the
+         // Channel:Config::writeBufferHighWaterMark value.
+         this.pendingWritesOnEventLoop += readableBytes;
+         this.pendingWritesOnEventLoopView.lazySet(pendingWritesOnEventLoop);
+         eventLoop.execute(() -> {
+            this.pendingWritesOnEventLoop -= readableBytes;
+            this.pendingWritesOnEventLoopView.lazySet(pendingWritesOnEventLoop);
+            writeInEventLoop(buffer, flush, batched, futureListener);
+         });
+      }
+   }
+
+   private void writeNotInEventLoop(ActiveMQBuffer buffer,
+                                    final boolean flush,
+                                    final boolean batched,
+                                    final ChannelFutureListener futureListener) {
       final Channel channel = this.channel;
       final ChannelPromise promise;
       if (flush || (futureListener != null)) {
@@ -390,6 +388,7 @@ public class NettyConnection implements Connection {
       }
       final ChannelFuture future;
       final ByteBuf bytes = buffer.byteBuf();
+      final int readableBytes = bytes.readableBytes();
       assert readableBytes >= 0;
       final int writeBatchSize = this.batchLimit;
       final boolean batchingEnabled = this.batchingEnabled;
@@ -403,41 +402,33 @@ public class NettyConnection implements Connection {
       }
       if (flush) {
          //NOTE: this code path seems used only on RemotingConnection::disconnect
-         flushAndWait(channel, promise);
+         waitFor(promise, DEFAULT_WAIT_MILLIS);
       }
    }
 
-   @Override
-   public void write(RandomAccessFile raf,
-                     FileChannel fileChannel,
-                     long offset,
-                     int dataSize,
-                     final ChannelFutureListener futureListener) {
-      final int readableBytes = dataSize;
-      if (logger.isDebugEnabled()) {
-         final int remainingBytes = this.writeBufferHighWaterMark - readableBytes;
-         if (remainingBytes < 0) {
-            logger.debug("a write request is exceeding by " + (-remainingBytes) + " bytes the writeBufferHighWaterMark size [ " + this.writeBufferHighWaterMark + " ] : consider to set it at least of " + readableBytes + " bytes");
-         }
-      }
-
+   private void writeInEventLoop(ActiveMQBuffer buffer,
+                                 final boolean flush,
+                                 final boolean batched,
+                                 final ChannelFutureListener futureListener) {
       //no need to lock because the Netty's channel is thread-safe
       //and the order of write is ensured by the order of the write calls
-      final Channel channel = this.channel;
-      assert readableBytes >= 0;
-      ChannelFuture channelFuture = channel.writeAndFlush(getFileObject(raf, fileChannel, offset, dataSize));
+      final ChannelPromise promise;
       if (futureListener != null) {
-         channelFuture.addListener(futureListener);
+         promise = channel.newPromise();
+      } else {
+         promise = channel.voidPromise();
       }
-   }
-
-   private static void flushAndWait(final Channel channel, final ChannelPromise promise) {
-      if (!channel.eventLoop().inEventLoop()) {
-         waitFor(promise, DEFAULT_WAIT_MILLIS);
+      final ChannelFuture future;
+      final ByteBuf bytes = buffer.byteBuf();
+      final int readableBytes = bytes.readableBytes();
+      final int writeBatchSize = this.batchLimit;
+      if (this.batchingEnabled && batched && !flush && readableBytes < writeBatchSize) {
+         future = writeBatch(bytes, readableBytes, promise);
       } else {
-         if (logger.isDebugEnabled()) {
-            logger.debug("Calling write with flush from a thread where it's not allowed");
-         }
+         future = channel.writeAndFlush(bytes, promise);
+      }
+      if (futureListener != null) {
+         future.addListener(futureListener);
       }
    }
 
@@ -475,7 +466,6 @@ public class NettyConnection implements Connection {
       return "tcp://" + IPV6Util.encloseHost(address.toString());
    }
 
-   @Override
    public final boolean isDirectDeliver() {
       return directDeliver;
    }
@@ -500,56 +490,31 @@ public class NettyConnection implements Connection {
       return true;
    }
 
-   @Override
-   public boolean isSameTarget(TransportConfiguration... configs) {
-      boolean result = false;
-      for (TransportConfiguration cfg : configs) {
-         if (cfg == null) {
-            continue;
-         }
-         if (NettyConnectorFactory.class.getName().equals(cfg.getFactoryClassName())) {
-            if (configuration.get(TransportConstants.PORT_PROP_NAME).equals(cfg.getParams().get(TransportConstants.PORT_PROP_NAME))) {
-               //port same, check host
-               Object hostParam = configuration.get(TransportConstants.HOST_PROP_NAME);
-               if (hostParam != null) {
-                  if (hostParam.equals(cfg.getParams().get(TransportConstants.HOST_PROP_NAME))) {
-                     result = true;
-                     break;
-                  } else {
-                     //check special 'localhost' case
-                     if (isLocalhost((String) configuration.get(TransportConstants.HOST_PROP_NAME)) && isLocalhost((String) cfg.getParams().get(TransportConstants.HOST_PROP_NAME))) {
-                        result = true;
-                        break;
-                     }
-                  }
-               } else if (cfg.getParams().get(TransportConstants.HOST_PROP_NAME) == null) {
-                  result = true;
-                  break;
-               }
-            }
-         }
-      }
-      return result;
-   }
-
-   //here we consider 'localhost' is equivalent to '127.0.0.1'
-   //other values of 127.0.0.x is not and the user makes sure
-   //not to mix use of 'localhost' and '127.0.0.x'
-   private boolean isLocalhost(String hostname) {
-      return "127.0.0.1".equals(hostname) || "localhost".equals(hostname);
-   }
-
    @Override
    public final String toString() {
-      return super.toString() + "[ID=" + getID() + ", local= " + channel.localAddress() + ", remote=" + channel.remoteAddress() + "]";
+      return super.toString() + "[local= " + channel.localAddress() + ", remote=" + channel.remoteAddress() + "]";
    }
 
-   private void closeChannel(final Channel channel, boolean inEventLoop) {
+   private void closeSSLAndChannel(SslHandler sslHandler, final Channel channel, boolean inEventLoop) {
       checkFlushBatchBuffer();
-      // closing the channel results in closing any sslHandler first; SslHandler#close() was deprecated by netty
-      ChannelFuture closeFuture = channel.close();
-      if (!inEventLoop && !closeFuture.awaitUninterruptibly(DEFAULT_WAIT_MILLIS)) {
-         ActiveMQClientLogger.LOGGER.timeoutClosingNettyChannel();
+      if (sslHandler != null) {
+         try {
+            ChannelFuture sslCloseFuture = sslHandler.close();
+            sslCloseFuture.addListener(future -> channel.close());
+            if (!inEventLoop && !sslCloseFuture.awaitUninterruptibly(DEFAULT_WAIT_MILLIS)) {
+               ActiveMQClientLogger.LOGGER.timeoutClosingSSL();
+            }
+         } catch (Throwable t) {
+            // ignore
+            if (ActiveMQClientLogger.LOGGER.isTraceEnabled()) {
+               ActiveMQClientLogger.LOGGER.trace(t.getMessage(), t);
+            }
+         }
+      } else {
+         ChannelFuture closeFuture = channel.close();
+         if (!inEventLoop && !closeFuture.awaitUninterruptibly(DEFAULT_WAIT_MILLIS)) {
+            ActiveMQClientLogger.LOGGER.timeoutClosingNettyChannel();
+         }
       }
    }
 