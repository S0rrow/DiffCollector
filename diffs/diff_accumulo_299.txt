diff --git a/test/src/main/java/org/apache/accumulo/test/functional/RestartIT.java b/test/src/main/java/org/apache/accumulo/test/functional/RestartIT.java
index 38d388d640..d73bf3e95d 100644
--- a/test/src/main/java/org/apache/accumulo/test/functional/RestartIT.java
+++ b/test/src/main/java/org/apache/accumulo/test/functional/RestartIT.java
@@ -16,8 +16,6 @@
  */
 package org.apache.accumulo.test.functional;
 
-import static com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly;
-import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.junit.Assert.assertEquals;
 
 import java.io.IOException;
@@ -59,6 +57,9 @@ import org.junit.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.common.base.Charsets;
+import static com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly;
+
 public class RestartIT extends AccumuloClusterHarness {
   private static final Logger log = LoggerFactory.getLogger(RestartIT.class);
 
@@ -69,7 +70,7 @@ public class RestartIT extends AccumuloClusterHarness {
 
   @Override
   public void configureMiniCluster(MiniAccumuloConfigImpl cfg, Configuration hadoopCoreSite) {
-    cfg.setProperty(Property.INSTANCE_ZK_TIMEOUT, "15s");
+    cfg.setProperty(Property.INSTANCE_ZK_TIMEOUT, "5s");
     cfg.setProperty(Property.GC_CYCLE_DELAY, "1s");
     cfg.setProperty(Property.GC_CYCLE_START, "1s");
     hadoopCoreSite.set("fs.file.impl", RawLocalFileSystem.class.getName());
@@ -118,8 +119,8 @@ public class RestartIT extends AccumuloClusterHarness {
     final String[] args;
     if (token instanceof PasswordToken) {
       byte[] password = ((PasswordToken) token).getPassword();
-      args = new String[] {"-u", getAdminPrincipal(), "-p", new String(password, UTF_8), "-i", cluster.getInstanceName(), "-z", cluster.getZooKeepers(),
-          "--rows", "" + OPTS.rows, "--table", tableName};
+      args = new String[] {"-u", getAdminPrincipal(), "-p", new String(password, Charsets.UTF_8), "-i", cluster.getInstanceName(), "-z",
+          cluster.getZooKeepers(), "--rows", "" + OPTS.rows, "--table", tableName};
       OPTS.setPrincipal(getAdminPrincipal());
       VOPTS.setPrincipal(getAdminPrincipal());
     } else if (token instanceof KerberosToken) {
@@ -217,8 +218,8 @@ public class RestartIT extends AccumuloClusterHarness {
     final String[] args;
     if (token instanceof PasswordToken) {
       byte[] password = ((PasswordToken) token).getPassword();
-      args = new String[] {"-u", getAdminPrincipal(), "-p", new String(password, UTF_8), "-i", cluster.getInstanceName(), "-z", cluster.getZooKeepers(),
-          "--rows", Integer.toString(VOPTS.rows), "--table", tableName};
+      args = new String[] {"-u", getAdminPrincipal(), "-p", new String(password, Charsets.UTF_8), "-i", cluster.getInstanceName(), "-z",
+          cluster.getZooKeepers(), "--rows", Integer.toString(VOPTS.rows), "--table", tableName};
       OPTS.setPrincipal(getAdminPrincipal());
       VOPTS.setPrincipal(getAdminPrincipal());
     } else if (token instanceof KerberosToken) {