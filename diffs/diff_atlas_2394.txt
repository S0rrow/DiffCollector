diff --git a/webapp/src/test/java/org/apache/atlas/web/resources/EntityJerseyResourceIT.java b/webapp/src/test/java/org/apache/atlas/web/resources/EntityJerseyResourceIT.java
index a26819649..8053c9fcf 100755
--- a/webapp/src/test/java/org/apache/atlas/web/resources/EntityJerseyResourceIT.java
+++ b/webapp/src/test/java/org/apache/atlas/web/resources/EntityJerseyResourceIT.java
@@ -19,15 +19,10 @@
 package org.apache.atlas.web.resources;
 
 import com.google.common.collect.ImmutableList;
-import com.google.inject.Inject;
 import com.sun.jersey.api.client.ClientResponse;
 import com.sun.jersey.api.client.WebResource;
 import org.apache.atlas.AtlasClient;
 import org.apache.atlas.AtlasServiceException;
-import org.apache.atlas.notification.NotificationConsumer;
-import org.apache.atlas.notification.NotificationInterface;
-import org.apache.atlas.notification.NotificationModule;
-import org.apache.atlas.notification.entity.EntityNotification;
 import org.apache.atlas.typesystem.IStruct;
 import org.apache.atlas.typesystem.Referenceable;
 import org.apache.atlas.typesystem.Struct;
@@ -43,37 +38,27 @@ import org.apache.atlas.typesystem.types.EnumTypeDefinition;
 import org.apache.atlas.typesystem.types.HierarchicalTypeDefinition;
 import org.apache.atlas.typesystem.types.StructTypeDefinition;
 import org.apache.atlas.typesystem.types.TraitType;
+import org.apache.atlas.typesystem.types.TypeUtils;
 import org.apache.atlas.typesystem.types.utils.TypesUtil;
 import org.apache.atlas.web.util.Servlets;
 import org.apache.commons.lang.RandomStringUtils;
 import org.codehaus.jettison.json.JSONArray;
 import org.codehaus.jettison.json.JSONObject;
-import org.junit.AfterClass;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.testng.Assert;
 import org.testng.annotations.BeforeClass;
-import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.DataProvider;
-import org.testng.annotations.Guice;
 import org.testng.annotations.Test;
 
 import javax.ws.rs.HttpMethod;
 import javax.ws.rs.core.Response;
-import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.List;
-import java.util.Map;
 import java.util.UUID;
 
-import static org.testng.Assert.assertEquals;
-import static org.testng.Assert.assertNotNull;
-import static org.testng.Assert.fail;
-
 /**
  * Integration tests for Entity Jersey Resource.
  */
-@Guice(modules = NotificationModule.class)
 public class EntityJerseyResourceIT extends BaseResourceIT {
 
     private static final Logger LOG = LoggerFactory.getLogger(EntityJerseyResourceIT.class);
@@ -87,32 +72,11 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
     private Id tableId;
     private String traitName;
 
-    @Inject
-    private NotificationInterface notificationInterface;
-    private EntityNotificationConsumer notificationConsumer;
-
     @BeforeClass
     public void setUp() throws Exception {
         super.setUp();
 
         createTypeDefinitions();
-
-        List<NotificationConsumer<EntityNotification>> consumers =
-                notificationInterface.createConsumers(NotificationInterface.NotificationType.ENTITIES, 1);
-
-        NotificationConsumer<EntityNotification> consumer = consumers.iterator().next();
-        notificationConsumer = new EntityNotificationConsumer(consumer);
-        notificationConsumer.start();
-    }
-
-    @AfterClass
-    public void tearDown() {
-        notificationConsumer.stop();
-    }
-
-    @BeforeMethod
-    public void setupTest() {
-        notificationConsumer.reset();
     }
 
     @Test
@@ -129,7 +93,6 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
     }
 
     @Test
-    //API should accept single entity (or jsonarray of entities)
     public void testSubmitSingleEntity() throws Exception {
         Referenceable databaseInstance = new Referenceable(DATABASE_TYPE);
         databaseInstance.set("name", randomString());
@@ -149,76 +112,6 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         Assert.assertNotNull(response.get(AtlasClient.GUID));
     }
 
-    @Test
-    public void testEntityDeduping() throws Exception {
-        final Referenceable db = new Referenceable(DATABASE_TYPE);
-        final String dbName = "db" + randomString();
-        db.set("name", dbName);
-        db.set("description", randomString());
-
-        serviceClient.createEntity(db).getString(0);
-
-        waitForNotification(notificationConsumer, MAX_WAIT_TIME);
-        EntityNotification notification = notificationConsumer.getLastEntityNotification();
-        assertNotNull(notification);
-        assertEquals(notification.getEntity().get("name"), dbName);
-
-        JSONArray results =
-                serviceClient.searchByDSL(String.format("%s where name='%s'", DATABASE_TYPE, dbName));
-        assertEquals(results.length(), 1);
-
-        //create entity again shouldn't create another instance with same unique attribute value
-        notificationConsumer.reset();
-        serviceClient.createEntity(db);
-        try {
-            waitForNotification(notificationConsumer, MAX_WAIT_TIME);
-            fail("Expected time out exception");
-        } catch (Exception e) {
-            //expected timeout
-        }
-
-        results = serviceClient.searchByDSL(String.format("%s where name='%s'", DATABASE_TYPE, dbName));
-        assertEquals(results.length(), 1);
-
-        //Test the same across references
-        Referenceable table = new Referenceable(HIVE_TABLE_TYPE);
-        final String tableName = randomString();
-        table.set("name", tableName);
-        table.set("db", db);
-
-        serviceClient.createEntity(table);
-        results = serviceClient.searchByDSL(String.format("%s where name='%s'", DATABASE_TYPE, dbName));
-        assertEquals(results.length(), 1);
-    }
-
-    @Test
-    public void testEntityDefinitionAcrossTypeUpdate() throws Exception {
-        //create type
-        HierarchicalTypeDefinition<ClassType> typeDefinition = TypesUtil
-                .createClassTypeDef(randomString(), ImmutableList.<String>of(),
-                        TypesUtil.createUniqueRequiredAttrDef("name", DataTypes.STRING_TYPE));
-        serviceClient.createType(TypesSerialization.toJson(typeDefinition, false));
-
-        //create entity for the type
-        Referenceable instance = new Referenceable(typeDefinition.typeName);
-        instance.set("name", randomString());
-        String guid = serviceClient.createEntity(instance).getString(0);
-
-        //update type - add attribute
-        typeDefinition = TypesUtil.createClassTypeDef(typeDefinition.typeName, ImmutableList.<String>of(),
-                TypesUtil.createUniqueRequiredAttrDef("name", DataTypes.STRING_TYPE),
-                TypesUtil.createOptionalAttrDef("description", DataTypes.STRING_TYPE));
-        TypesDef typeDef = TypesUtil.getTypesDef(ImmutableList.<EnumTypeDefinition>of(),
-                ImmutableList.<StructTypeDefinition>of(), ImmutableList.<HierarchicalTypeDefinition<TraitType>>of(),
-                ImmutableList.of(typeDefinition));
-        serviceClient.updateType(typeDef);
-
-        //Get definition after type update - new attributes should be null
-        Referenceable entity = serviceClient.getEntity(guid);
-        Assert.assertNull(entity.get("description"));
-        Assert.assertEquals(entity.get("name"), instance.get("name"));
-    }
-
     @DataProvider
     public Object[][] invalidAttrValues() {
         return new Object[][]{{null}, {""}};
@@ -254,6 +147,7 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
 
     @Test
     public void testSubmitEntityWithBadDateFormat() throws Exception {
+
         try {
             Referenceable tableInstance = createHiveTableInstance("db" + randomString(), "table" + randomString());
             tableInstance.set("lastAccessTime", "2014-07-11");
@@ -270,7 +164,8 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         final String guid = tableId._getId();
         //add property
         String description = "bar table - new desc";
-        addProperty(guid, "description", description);
+        ClientResponse clientResponse = addProperty(guid, "description", description);
+        Assert.assertEquals(clientResponse.getStatus(), Response.Status.OK.getStatusCode());
 
         String entityRef = getEntityDefinition(getEntityDefinition(guid));
         Assert.assertNotNull(entityRef);
@@ -278,16 +173,13 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         tableInstance.set("description", description);
 
         //invalid property for the type
-        try {
-            addProperty(guid, "invalid_property", "bar table");
-            Assert.fail("Expected AtlasServiceException");
-        } catch (AtlasServiceException e) {
-            Assert.assertEquals(e.getStatus().getStatusCode(), Response.Status.BAD_REQUEST.getStatusCode());
-        }
+        clientResponse = addProperty(guid, "invalid_property", "bar table");
+        Assert.assertEquals(clientResponse.getStatus(), Response.Status.BAD_REQUEST.getStatusCode());
 
         //non-string property, update
         String currentTime = String.valueOf(System.currentTimeMillis());
-        addProperty(guid, "createTime", currentTime);
+        clientResponse = addProperty(guid, "createTime", currentTime);
+        Assert.assertEquals(clientResponse.getStatus(), Response.Status.OK.getStatusCode());
 
         entityRef = getEntityDefinition(getEntityDefinition(guid));
         Assert.assertNotNull(entityRef);
@@ -303,16 +195,12 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         Assert.fail();
     }
 
-    @Test(dependsOnMethods = "testSubmitEntity")
+    @Test(dependsOnMethods = "testSubmitEntity", expectedExceptions = IllegalArgumentException.class)
     public void testAddNullPropertyValue() throws Exception {
         final String guid = tableId._getId();
         //add property
-        try {
-            addProperty(guid, "description", null);
-            Assert.fail("Expected AtlasServiceException");
-        } catch(AtlasServiceException e) {
-            Assert.assertEquals(e.getStatus().getStatusCode(), Response.Status.BAD_REQUEST.getStatusCode());
-        }
+        addProperty(guid, "description", null);
+        Assert.fail();
     }
 
     @Test(dependsOnMethods = "testSubmitEntity")
@@ -327,7 +215,8 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
 
         //Add reference property
         final String guid = tableId._getId();
-        addProperty(guid, "db", dbId);
+        ClientResponse clientResponse = addProperty(guid, "db", dbId);
+        Assert.assertEquals(clientResponse.getStatus(), Response.Status.OK.getStatusCode());
     }
 
     @Test(dependsOnMethods = "testSubmitEntity")
@@ -348,8 +237,11 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         InstanceSerialization.fromJsonReferenceable(definition, true);
     }
 
-    private void addProperty(String guid, String property, String value) throws AtlasServiceException {
-        serviceClient.updateEntityAttribute(guid, property, value);
+    private ClientResponse addProperty(String guid, String property, String value) {
+        WebResource resource = service.path(ENTITIES).path(guid);
+
+        return resource.queryParam("property", property).queryParam("value", value).accept(Servlets.JSON_MEDIA_TYPE)
+                .type(Servlets.JSON_MEDIA_TYPE).method(HttpMethod.PUT, ClientResponse.class);
     }
 
     private ClientResponse getEntityDefinition(String guid) {
@@ -614,9 +506,10 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         HierarchicalTypeDefinition<ClassType> classTypeDefinition = TypesUtil
                 .createClassTypeDef(classType, ImmutableList.<String>of(),
                         TypesUtil.createUniqueRequiredAttrDef(attrName, DataTypes.STRING_TYPE));
-        TypesDef typesDef = TypesUtil.getTypesDef(ImmutableList.<EnumTypeDefinition>of(), ImmutableList.<StructTypeDefinition>of(),
-                ImmutableList.<HierarchicalTypeDefinition<TraitType>>of(),
-                ImmutableList.of(classTypeDefinition));
+        TypesDef typesDef = TypeUtils
+                .getTypesDef(ImmutableList.<EnumTypeDefinition>of(), ImmutableList.<StructTypeDefinition>of(),
+                        ImmutableList.<HierarchicalTypeDefinition<TraitType>>of(),
+                        ImmutableList.of(classTypeDefinition));
         createType(typesDef);
 
         Referenceable instance = new Referenceable(classType);
@@ -628,82 +521,4 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         Referenceable getReferenceable = InstanceSerialization.fromJsonReferenceable(definition, true);
         Assert.assertEquals(getReferenceable.get(attrName), attrValue);
     }
-
-    @Test(dependsOnMethods = "testSubmitEntity")
-    public void testPartialUpdate() throws Exception {
-        final List<Referenceable> columns = new ArrayList<>();
-        Map<String, Object> values = new HashMap<>();
-        values.put("name", "col1");
-        values.put("dataType", "string");
-        values.put("comment", "col1 comment");
-
-        Referenceable ref = new Referenceable(BaseResourceIT.COLUMN_TYPE, values);
-        columns.add(ref);
-        Referenceable tableUpdated = new Referenceable(BaseResourceIT.HIVE_TABLE_TYPE, new HashMap<String, Object>() {{
-            put("columns", columns);
-        }});
-
-        LOG.debug("Updating entity= " + tableUpdated);
-        serviceClient.updateEntity(tableId._getId(), tableUpdated);
-
-        ClientResponse response = getEntityDefinition(tableId._getId());
-        String definition = getEntityDefinition(response);
-        Referenceable getReferenceable = InstanceSerialization.fromJsonReferenceable(definition, true);
-        List<Referenceable> refs = (List<Referenceable>) getReferenceable.get("columns");
-
-        Assert.assertTrue(refs.get(0).equalsContents(columns.get(0)));
-
-        //Update by unique attribute
-        values.put("dataType", "int");
-        ref = new Referenceable(BaseResourceIT.COLUMN_TYPE, values);
-        columns.set(0, ref);
-        tableUpdated = new Referenceable(BaseResourceIT.HIVE_TABLE_TYPE, new HashMap<String, Object>() {{
-            put("columns", columns);
-        }});
-
-        LOG.debug("Updating entity= " + tableUpdated);
-        serviceClient.updateEntity(BaseResourceIT.HIVE_TABLE_TYPE, "name", (String) tableInstance.get("name"),
-                tableUpdated);
-
-        response = getEntityDefinition(tableId._getId());
-        definition = getEntityDefinition(response);
-        getReferenceable = InstanceSerialization.fromJsonReferenceable(definition, true);
-        refs = (List<Referenceable>) getReferenceable.get("columns");
-
-        Assert.assertTrue(refs.get(0).equalsContents(columns.get(0)));
-        Assert.assertEquals(refs.get(0).get("dataType"), "int");
-
-    }
-
-    @Test(dependsOnMethods = "testSubmitEntity")
-    public void testCompleteUpdate() throws Exception {
-        final List<Referenceable> columns = new ArrayList<>();
-        Map<String, Object> values1 = new HashMap<>();
-        values1.put("name", "col3");
-        values1.put("dataType", "string");
-        values1.put("comment", "col3 comment");
-
-        Map<String, Object> values2 = new HashMap<>();
-        values2.put("name", "col4");
-        values2.put("dataType", "string");
-        values2.put("comment", "col4 comment");
-
-        Referenceable ref1 = new Referenceable(BaseResourceIT.COLUMN_TYPE, values1);
-        Referenceable ref2 = new Referenceable(BaseResourceIT.COLUMN_TYPE, values2);
-        columns.add(ref1);
-        columns.add(ref2);
-        tableInstance.set("columns", columns);
-
-        LOG.debug("Replacing entity= " + tableInstance);
-        serviceClient.updateEntities(tableInstance);
-
-        ClientResponse response = getEntityDefinition(tableId._getId());
-        String definition = getEntityDefinition(response);
-        Referenceable getReferenceable = InstanceSerialization.fromJsonReferenceable(definition, true);
-        List<Referenceable> refs = (List<Referenceable>) getReferenceable.get("columns");
-        Assert.assertEquals(refs.size(), 2);
-
-        Assert.assertTrue(refs.get(0).equalsContents(columns.get(0)));
-        Assert.assertTrue(refs.get(1).equalsContents(columns.get(1)));
-    }
 }