diff --git a/archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/UploadAction.java b/archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/UploadAction.java
index 4454f0445..2f958a32c 100644
--- a/archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/UploadAction.java
+++ b/archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/UploadAction.java
@@ -19,26 +19,17 @@
  * under the License.
  */
 
-import com.opensymphony.xwork2.Preparable;
-import com.opensymphony.xwork2.Validateable;
-
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
-import java.text.DateFormat;
-import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Collections;
-import java.util.Date;
 import java.util.List;
-import java.util.TimeZone;
 
 import org.apache.archiva.checksum.ChecksumAlgorithm;
 import org.apache.archiva.checksum.ChecksummedFile;
-import org.apache.commons.io.FilenameUtils;
-import org.apache.commons.lang.StringUtils;
 import org.apache.maven.archiva.common.utils.VersionComparator;
 import org.apache.maven.archiva.common.utils.VersionUtil;
 import org.apache.maven.archiva.configuration.ArchivaConfiguration;
@@ -46,13 +37,11 @@
 import org.apache.maven.archiva.model.ArchivaProjectModel;
 import org.apache.maven.archiva.model.ArchivaRepositoryMetadata;
 import org.apache.maven.archiva.model.ArtifactReference;
-import org.apache.maven.archiva.model.SnapshotVersion;
 import org.apache.maven.archiva.repository.ManagedRepositoryContent;
 import org.apache.maven.archiva.repository.RepositoryContentFactory;
 import org.apache.maven.archiva.repository.RepositoryException;
 import org.apache.maven.archiva.repository.RepositoryNotFoundException;
-import org.apache.maven.archiva.repository.audit.AuditEvent;
-import org.apache.maven.archiva.repository.audit.Auditable;
+import org.apache.maven.archiva.repository.scanner.RepositoryContentConsumers;
 import org.apache.maven.archiva.repository.metadata.MetadataTools;
 import org.apache.maven.archiva.repository.metadata.RepositoryMetadataException;
 import org.apache.maven.archiva.repository.metadata.RepositoryMetadataReader;
@@ -60,31 +49,33 @@
 import org.apache.maven.archiva.repository.project.ProjectModelException;
 import org.apache.maven.archiva.repository.project.ProjectModelWriter;
 import org.apache.maven.archiva.repository.project.writers.ProjectModel400Writer;
-import org.apache.maven.archiva.repository.scanner.RepositoryContentConsumers;
-import org.apache.maven.archiva.scheduled.ArchivaTaskScheduler;
-import org.apache.maven.archiva.scheduled.tasks.RepositoryTask;
-import org.apache.maven.archiva.scheduled.tasks.TaskCreator;
-import org.apache.maven.archiva.security.AccessDeniedException;
 import org.apache.maven.archiva.security.ArchivaSecurityException;
 import org.apache.maven.archiva.security.PrincipalNotFoundException;
 import org.apache.maven.archiva.security.UserRepositories;
-import org.codehaus.plexus.taskqueue.TaskQueueException;
+import org.apache.maven.archiva.security.ArchivaXworkUser;
+import org.codehaus.plexus.xwork.action.PlexusActionSupport;
+
+import com.opensymphony.xwork.ActionContext;
+import com.opensymphony.xwork.Preparable;
+import com.opensymphony.xwork.Validateable;
 
 /**
  * Upload an artifact using Jakarta file upload in webwork. If set by the user a pom will also be generated. Metadata
  * will also be updated if one exists, otherwise it would be created.
- *
- * @plexus.component role="com.opensymphony.xwork2.Action" role-hint="uploadAction" instantiation-strategy="per-lookup"
+ * 
+ * @author <a href="mailto:wsmoak@apache.org">Wendy Smoak</a>
+ * @author <a href="mailto:oching@apache.org">Maria Odea Ching</a>
+ * @plexus.component role="com.opensymphony.xwork.Action" role-hint="uploadAction"
  */
 public class UploadAction
     extends PlexusActionSupport
-    implements Validateable, Preparable, Auditable
+    implements Validateable, Preparable
 {
     /**
-     * @plexus.requirement
-     */
-    private RepositoryContentConsumers consumers;
-
+      * @plexus.requirement
+      */
+     private RepositoryContentConsumers consumers;
+    
     /**
      * The groupId of the artifact to be deployed.
      */
@@ -115,11 +106,31 @@
      */
     private File artifactFile;
 
+    /**
+     * The content type of the artifact to be deployed.
+     */
+    private String artifactContentType;
+
+    /**
+     * The original filename of the uploaded artifact file.
+     */
+    private String artifactFilename;
+
     /**
      * The temporary file representing the pom to be deployed alongside the artifact.
      */
     private File pomFile;
 
+    /**
+     * The content type of the pom file.
+     */
+    private String pomContentType;
+
+    /**
+     * The original filename of the uploaded pom file.
+     */
+    private String pomFilename;
+
     /**
      * The repository where the artifact is to be deployed.
      */
@@ -149,16 +160,11 @@
      * @plexus.requirement
      */
     private RepositoryContentFactory repositoryFactory;
-
-    /**
-     * @plexus.requirement
-     */
-    private ArchivaTaskScheduler scheduler;
-
-    private ChecksumAlgorithm[] algorithms = new ChecksumAlgorithm[]{ChecksumAlgorithm.SHA1, ChecksumAlgorithm.MD5};
+    
+    private ChecksumAlgorithm[] algorithms = new ChecksumAlgorithm[] { ChecksumAlgorithm.SHA1, ChecksumAlgorithm.MD5 };
 
     private ProjectModelWriter pomWriter = new ProjectModel400Writer();
-
+    
     public void setArtifact( File file )
     {
         this.artifactFile = file;
@@ -166,12 +172,12 @@ public void setArtifact( File file )
 
     public void setArtifactContentType( String contentType )
     {
-        StringUtils.trim( contentType );
+        this.artifactContentType = contentType;
     }
 
     public void setArtifactFileName( String filename )
     {
-        StringUtils.trim( filename );
+        this.artifactFilename = filename;
     }
 
     public void setPom( File file )
@@ -181,12 +187,12 @@ public void setPom( File file )
 
     public void setPomContentType( String contentType )
     {
-        StringUtils.trim( contentType );
+        this.pomContentType = contentType;
     }
 
     public void setPomFileName( String filename )
     {
-        StringUtils.trim( filename );
+        this.pomFilename = filename;
     }
 
     public String getGroupId()
@@ -196,7 +202,7 @@ public String getGroupId()
 
     public void setGroupId( String groupId )
     {
-        this.groupId = StringUtils.trim( groupId );
+        this.groupId = groupId;
     }
 
     public String getArtifactId()
@@ -206,7 +212,7 @@ public String getArtifactId()
 
     public void setArtifactId( String artifactId )
     {
-        this.artifactId = StringUtils.trim( artifactId );
+        this.artifactId = artifactId;
     }
 
     public String getVersion()
@@ -216,7 +222,7 @@ public String getVersion()
 
     public void setVersion( String version )
     {
-        this.version = StringUtils.trim( version );
+        this.version = version;
     }
 
     public String getPackaging()
@@ -226,7 +232,7 @@ public String getPackaging()
 
     public void setPackaging( String packaging )
     {
-        this.packaging = StringUtils.trim( packaging );
+        this.packaging = packaging;
     }
 
     public String getClassifier()
@@ -236,7 +242,7 @@ public String getClassifier()
 
     public void setClassifier( String classifier )
     {
-        this.classifier = StringUtils.trim( classifier );
+        this.classifier = classifier;
     }
 
     public String getRepositoryId()
@@ -271,7 +277,8 @@ public void setManagedRepoIdList( List<String> managedRepoIdList )
 
     public void prepare()
     {
-        managedRepoIdList = getManagableRepos();
+        managedRepoIdList =
+            new ArrayList<String>( configuration.getConfiguration().getManagedRepositoriesAsMap().keySet() );
     }
 
     public String input()
@@ -279,21 +286,6 @@ public String input()
         return INPUT;
     }
 
-    private void reset()
-    {
-        // reset the fields so the form is clear when 
-        // the action returns to the jsp page
-        groupId = "";
-        artifactId = "";
-        version = "";
-        packaging = "";
-        classifier = "";
-        artifactFile = null;
-        pomFile = null;
-        repositoryId = "";
-        generatePom = false;
-    }
-
     public String doUpload()
     {
         try
@@ -316,46 +308,14 @@ public String doUpload()
 
             File targetPath = new File( repoConfig.getLocation(), artifactPath.substring( 0, lastIndex ) );
 
-            Date lastUpdatedTimestamp = Calendar.getInstance().getTime();
-            int newBuildNumber = -1;
-            String timestamp = null;
-
-            File metadataFile = getMetadata( targetPath.getAbsolutePath() );
-            ArchivaRepositoryMetadata metadata = getMetadata( metadataFile );
-
-            if ( VersionUtil.isSnapshot( version ) )
-            {
-                TimeZone timezone = TimeZone.getTimeZone( "UTC" );
-                DateFormat fmt = new SimpleDateFormat( "yyyyMMdd.HHmmss" );
-                fmt.setTimeZone( timezone );
-                timestamp = fmt.format( lastUpdatedTimestamp );
-                if ( metadata.getSnapshotVersion() != null )
-                {
-                    newBuildNumber = metadata.getSnapshotVersion().getBuildNumber() + 1;
-                }
-                else
-                {
-                    metadata.setSnapshotVersion( new SnapshotVersion() );
-                    newBuildNumber = 1;
-                }
-            }
-
             if ( !targetPath.exists() )
             {
                 targetPath.mkdirs();
             }
 
-            String filename = artifactPath.substring( lastIndex + 1 );
-            if ( VersionUtil.isSnapshot( version ) )
-            {
-                filename = filename.replaceAll( "SNAPSHOT", timestamp + "-" + newBuildNumber );
-            }
-
             try
             {
-                copyFile( artifactFile, targetPath, filename );
-                queueRepositoryTask( repository.getId(), repository.toFile( artifactReference ) );
-                //consumers.executeConsumers( repoConfig, repository.toFile( artifactReference ) );
+                copyFile( artifactFile, targetPath, artifactPath.substring( lastIndex + 1 ) );
             }
             catch ( IOException ie )
             {
@@ -363,20 +323,11 @@ public String doUpload()
                 return ERROR;
             }
 
-            String pomFilename = filename;
-            if ( classifier != null && !"".equals( classifier ) )
-            {
-                pomFilename = StringUtils.remove( pomFilename, "-" + classifier );
-            }
-            pomFilename = FilenameUtils.removeExtension( pomFilename ) + ".pom";
-
             if ( generatePom )
             {
                 try
                 {
-                    File generatedPomFile = createPom( targetPath, pomFilename );
-                    queueRepositoryTask( repoConfig.getId(), generatedPomFile );
-                    //consumers.executeConsumers( repoConfig, generatedPomFile );
+                    createPom( targetPath, artifactPath.substring( lastIndex + 1 ) );
                 }
                 catch ( IOException ie )
                 {
@@ -389,33 +340,36 @@ public String doUpload()
                     return ERROR;
                 }
             }
-
-            if ( pomFile != null && pomFile.length() > 0 )
+            
+            if ( pomFile != null && pomFile.length() > 0 ) 
             {
+            	
                 try
                 {
-                    copyFile( pomFile, targetPath, pomFilename );
-                    queueRepositoryTask( repoConfig.getId(), new File( targetPath, pomFilename ) );
-                    //consumers.executeConsumers( repoConfig, new File( targetPath, pomFilename ) );
+                    String targetFilename = artifactPath.substring( lastIndex + 1 ).replaceAll( packaging, "pom" );
+                    copyFile( pomFile, targetPath, targetFilename );
                 }
                 catch ( IOException ie )
                 {
                     addActionError( "Error encountered while uploading pom file: " + ie.getMessage() );
                     return ERROR;
                 }
-
+                
             }
 
-            updateMetadata( metadata, metadataFile, lastUpdatedTimestamp, timestamp, newBuildNumber );
+            updateMetadata( getMetadata( targetPath.getAbsolutePath() ) );
 
             String msg = "Artifact \'" + groupId + ":" + artifactId + ":" + version +
                 "\' was successfully deployed to repository \'" + repositoryId + "\'";
 
-            triggerAuditEvent( repositoryId, groupId + ":" + artifactId + ":" + version, AuditEvent.UPLOAD_FILE );
+            //TODO: MRM-810 (this writes to archiva.log, should be audit.log)
+            getLogger().info( msg + " by " + getPrincipal() );
 
+            //TODO: MRM-785 (success message does not display on web page)
             addActionMessage( msg );
 
-            reset();
+            consumers.executeConsumers( repoConfig, repository.toFile( artifactReference ) );
+            
             return SUCCESS;
         }
         catch ( RepositoryNotFoundException re )
@@ -430,15 +384,20 @@ public String doUpload()
         }
     }
 
+    private String getPrincipal()
+    {
+        return ArchivaXworkUser.getActivePrincipal( ActionContext.getContext().getSession() );
+    }
+
     private void copyFile( File sourceFile, File targetPath, String targetFilename )
         throws IOException
     {
         FileOutputStream out = new FileOutputStream( new File( targetPath, targetFilename ) );
-        FileInputStream input = new FileInputStream( sourceFile );
 
         try
         {
-            int i;
+            FileInputStream input = new FileInputStream( sourceFile );
+            int i = 0;
             while ( ( i = input.read() ) != -1 )
             {
                 out.write( i );
@@ -448,11 +407,10 @@ private void copyFile( File sourceFile, File targetPath, String targetFilename )
         finally
         {
             out.close();
-            input.close();
         }
     }
 
-    private File createPom( File targetPath, String filename )
+    private void createPom( File targetPath, String filename )
         throws IOException, ProjectModelException
     {
         ArchivaProjectModel projectModel = new ArchivaProjectModel();
@@ -461,44 +419,32 @@ private File createPom( File targetPath, String filename )
         projectModel.setVersion( version );
         projectModel.setPackaging( packaging );
 
-        File pomFile = new File( targetPath, filename );
-        pomWriter.write( projectModel, pomFile );
+        File pomFile = new File( targetPath, filename.replaceAll( packaging, "pom" ) );
 
-        return pomFile;
+        pomWriter.write( projectModel, pomFile );
     }
 
     private File getMetadata( String targetPath )
     {
-        String artifactPath = targetPath.substring( 0, targetPath.lastIndexOf( File.separatorChar ) );
+        String artifactPath = targetPath.substring( 0, targetPath.lastIndexOf( '/' ) );
 
         return new File( artifactPath, MetadataTools.MAVEN_METADATA );
     }
 
-    private ArchivaRepositoryMetadata getMetadata( File metadataFile )
-        throws RepositoryMetadataException
-    {
-        ArchivaRepositoryMetadata metadata = new ArchivaRepositoryMetadata();
-        if ( metadataFile.exists() )
-        {
-            metadata = RepositoryMetadataReader.read( metadataFile );
-        }
-        return metadata;
-    }
-
     /**
      * Update artifact level metadata. If it does not exist, create the metadata.
-     *
-     * @param metadata
+     * 
+     * @param metadataFile
      */
-    private void updateMetadata( ArchivaRepositoryMetadata metadata, File metadataFile, Date lastUpdatedTimestamp,
-                                 String timestamp, int buildNumber )
+    private void updateMetadata( File metadataFile )
         throws RepositoryMetadataException
     {
         List<String> availableVersions = new ArrayList<String>();
-        String latestVersion = version;
+        ArchivaRepositoryMetadata metadata = new ArchivaRepositoryMetadata();
 
         if ( metadataFile.exists() )
         {
+            metadata = RepositoryMetadataReader.read( metadataFile );
             availableVersions = metadata.getAvailableVersions();
 
             Collections.sort( availableVersions, VersionComparator.getInstance() );
@@ -508,7 +454,15 @@ private void updateMetadata( ArchivaRepositoryMetadata metadata, File metadataFi
                 availableVersions.add( version );
             }
 
-            latestVersion = availableVersions.get( availableVersions.size() - 1 );
+            String latestVersion = availableVersions.get( availableVersions.size() - 1 );
+            metadata.setLatestVersion( latestVersion );
+            metadata.setAvailableVersions( availableVersions );
+            metadata.setLastUpdatedTimestamp( Calendar.getInstance().getTime() );
+
+            if ( !VersionUtil.isSnapshot( version ) )
+            {
+                metadata.setReleasedVersion( latestVersion );
+            }
         }
         else
         {
@@ -516,37 +470,21 @@ private void updateMetadata( ArchivaRepositoryMetadata metadata, File metadataFi
 
             metadata.setGroupId( groupId );
             metadata.setArtifactId( artifactId );
-        }
-
-        if ( metadata.getGroupId() == null )
-        {
-            metadata.setGroupId( groupId );
-        }
-        if ( metadata.getArtifactId() == null )
-        {
-            metadata.setArtifactId( artifactId );
-        }
-
-        metadata.setLatestVersion( latestVersion );
-        metadata.setLastUpdatedTimestamp( lastUpdatedTimestamp );
-        metadata.setAvailableVersions( availableVersions );
-
-        if ( !VersionUtil.isSnapshot( version ) )
-        {
-            metadata.setReleasedVersion( latestVersion );
-        }
-        else
-        {
-            metadata.getSnapshotVersion().setBuildNumber( buildNumber );
+            metadata.setLatestVersion( version );
+            metadata.setLastUpdatedTimestamp( Calendar.getInstance().getTime() );
+            metadata.setAvailableVersions( availableVersions );
 
-            metadata.getSnapshotVersion().setTimestamp( timestamp );
+            if ( !VersionUtil.isSnapshot( version ) )
+            {
+                metadata.setReleasedVersion( version );
+            }
         }
 
         RepositoryMetadataWriter.write( metadata, metadataFile );
         ChecksummedFile checksum = new ChecksummedFile( metadataFile );
         checksum.fixChecksums( algorithms );
     }
-
+    
     public void validate()
     {
         try
@@ -561,11 +499,11 @@ public void validate()
             {
                 addActionError( "Please add a file to upload." );
             }
-
-            if ( version == null || !VersionUtil.isVersion( version ) )
+            
+            if ( !VersionUtil.isVersion( version ) )
             {
                 addActionError( "Invalid version." );
-            }
+            }            
         }
         catch ( PrincipalNotFoundException pe )
         {
@@ -576,42 +514,4 @@ public void validate()
             addActionError( ae.getMessage() );
         }
     }
-
-    private List<String> getManagableRepos()
-    {
-        try
-        {
-            return userRepositories.getManagableRepositoryIds( getPrincipal() );
-        }
-        catch ( PrincipalNotFoundException e )
-        {
-            log.warn( e.getMessage(), e );
-        }
-        catch ( AccessDeniedException e )
-        {
-            log.warn( e.getMessage(), e );
-            // TODO: pass this onto the screen.
-        }
-        catch ( ArchivaSecurityException e )
-        {
-            log.warn( e.getMessage(), e );
-        }
-        return Collections.emptyList();
-    }
-
-    private void queueRepositoryTask( String repositoryId, File localFile )
-    {
-        RepositoryTask task = TaskCreator.createRepositoryTask( repositoryId, localFile.getName(), localFile );
-
-        try
-        {
-            scheduler.queueRepositoryTask( task );
-        }
-        catch ( TaskQueueException e )
-        {
-            log.error(
-                "Unable to queue repository task to execute consumers on resource file ['" + localFile.getName() +
-                    "']." );
-        }
-    }
 }