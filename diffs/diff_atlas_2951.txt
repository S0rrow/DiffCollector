diff --git a/repository/src/main/java/org/apache/atlas/repository/store/graph/v1/AtlasStructDefStoreV1.java b/repository/src/main/java/org/apache/atlas/repository/store/graph/v1/AtlasStructDefStoreV1.java
index 83a6d1d62..6dfe8cf02 100644
--- a/repository/src/main/java/org/apache/atlas/repository/store/graph/v1/AtlasStructDefStoreV1.java
+++ b/repository/src/main/java/org/apache/atlas/repository/store/graph/v1/AtlasStructDefStoreV1.java
@@ -17,23 +17,23 @@
  */
 package org.apache.atlas.repository.store.graph.v1;
 
-import com.google.common.annotations.VisibleForTesting;
 import org.apache.atlas.AtlasErrorCode;
 import org.apache.atlas.exception.AtlasBaseException;
+import org.apache.atlas.model.SearchFilter;
 import org.apache.atlas.model.typedef.AtlasStructDef;
 import org.apache.atlas.model.typedef.AtlasStructDef.AtlasAttributeDef;
 import org.apache.atlas.model.typedef.AtlasStructDef.AtlasConstraintDef;
-import org.apache.atlas.v1.model.typedef.AttributeDefinition;
+import org.apache.atlas.model.typedef.AtlasStructDef.AtlasStructDefs;
 import org.apache.atlas.repository.Constants;
-import org.apache.atlas.repository.graph.GraphHelper;
 import org.apache.atlas.repository.graphdb.AtlasVertex;
+import org.apache.atlas.repository.store.graph.AtlasStructDefStore;
+import org.apache.atlas.repository.util.FilterUtil;
+import org.apache.atlas.type.AtlasArrayType;
 import org.apache.atlas.type.AtlasStructType;
-import org.apache.atlas.type.AtlasStructType.AtlasAttribute;
 import org.apache.atlas.type.AtlasType;
 import org.apache.atlas.type.AtlasTypeRegistry;
 import org.apache.atlas.type.AtlasTypeUtil;
 import org.apache.atlas.typesystem.types.DataTypes.TypeCategory;
-import org.apache.atlas.v1.model.typedef.Multiplicity;
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.lang.StringUtils;
 import org.slf4j.Logger;
@@ -46,10 +46,15 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
+import static org.apache.atlas.model.typedef.AtlasStructDef.AtlasConstraintDef.CONSTRAINT_PARAM_ON_DELETE;
+import static org.apache.atlas.model.typedef.AtlasStructDef.AtlasConstraintDef.CONSTRAINT_PARAM_VAL_CASCADE;
+import static org.apache.atlas.model.typedef.AtlasStructDef.AtlasConstraintDef.CONSTRAINT_TYPE_FOREIGN_KEY;
+import static org.apache.atlas.model.typedef.AtlasStructDef.AtlasConstraintDef.CONSTRAINT_TYPE_MAPPED_FROM_REF;
+
 /**
  * StructDef store in v1 format.
  */
-public class AtlasStructDefStoreV1 extends AtlasAbstractDefStoreV1<AtlasStructDef> {
+public class AtlasStructDefStoreV1 extends AtlasAbstractDefStoreV1 implements AtlasStructDefStore {
     private static final Logger LOG = LoggerFactory.getLogger(AtlasStructDefStoreV1.class);
 
     public AtlasStructDefStoreV1(AtlasTypeDefGraphStoreV1 typeDefStore, AtlasTypeRegistry typeRegistry) {
@@ -62,11 +67,9 @@ public class AtlasStructDefStoreV1 extends AtlasAbstractDefStoreV1<AtlasStructDe
             LOG.debug("==> AtlasStructDefStoreV1.preCreate({})", structDef);
         }
 
-        validateType(structDef);
-
         AtlasType type = typeRegistry.getType(structDef.getName());
 
-        if (type.getTypeCategory() != org.apache.atlas.model.TypeCategory.STRUCT) {
+        if (type.getTypeCategory() != AtlasType.TypeCategory.STRUCT) {
             throw new AtlasBaseException(AtlasErrorCode.TYPE_MATCH_FAILED, structDef.getName(), TypeCategory.STRUCT.name());
         }
 
@@ -88,15 +91,17 @@ public class AtlasStructDefStoreV1 extends AtlasAbstractDefStoreV1<AtlasStructDe
     }
 
     @Override
-    public AtlasStructDef create(AtlasStructDef structDef, AtlasVertex preCreateResult) throws AtlasBaseException {
+    public AtlasStructDef create(AtlasStructDef structDef, Object preCreateResult) throws AtlasBaseException {
         if (LOG.isDebugEnabled()) {
             LOG.debug("==> AtlasStructDefStoreV1.create({}, {})", structDef, preCreateResult);
         }
 
-        AtlasVertex vertex = (preCreateResult == null) ? preCreate(structDef) : preCreateResult;
+        AtlasVertex vertex;
 
-        if (CollectionUtils.isEmpty(structDef.getAttributeDefs())) {
-            throw new AtlasBaseException(AtlasErrorCode.BAD_REQUEST, "Missing attributes for structdef");
+        if (preCreateResult == null || !(preCreateResult instanceof AtlasVertex)) {
+            vertex = preCreate(structDef);
+        } else {
+            vertex = (AtlasVertex)preCreateResult;
         }
 
         AtlasStructDefStoreV1.updateVertexAddReferences(structDef, vertex, typeDefStore);
@@ -179,8 +184,6 @@ public class AtlasStructDefStoreV1 extends AtlasAbstractDefStoreV1<AtlasStructDe
             LOG.debug("==> AtlasStructDefStoreV1.update({})", structDef);
         }
 
-        validateType(structDef);
-
         AtlasStructDef ret = StringUtils.isNotBlank(structDef.getGuid()) ? updateByGuid(structDef.getGuid(), structDef)
                                                                          : updateByName(structDef.getName(), structDef);
 
@@ -197,11 +200,9 @@ public class AtlasStructDefStoreV1 extends AtlasAbstractDefStoreV1<AtlasStructDe
             LOG.debug("==> AtlasStructDefStoreV1.updateByName({}, {})", name, structDef);
         }
 
-        validateType(structDef);
-
         AtlasType type = typeRegistry.getType(structDef.getName());
 
-        if (type.getTypeCategory() != org.apache.atlas.model.TypeCategory.STRUCT) {
+        if (type.getTypeCategory() != AtlasType.TypeCategory.STRUCT) {
             throw new AtlasBaseException(AtlasErrorCode.TYPE_MATCH_FAILED, structDef.getName(), TypeCategory.STRUCT.name());
         }
 
@@ -229,11 +230,9 @@ public class AtlasStructDefStoreV1 extends AtlasAbstractDefStoreV1<AtlasStructDe
             LOG.debug("==> AtlasStructDefStoreV1.updateByGuid({})", guid);
         }
 
-        validateType(structDef);
-
         AtlasType type = typeRegistry.getTypeByGuid(guid);
 
-        if (type.getTypeCategory() != org.apache.atlas.model.TypeCategory.STRUCT) {
+        if (type.getTypeCategory() != AtlasType.TypeCategory.STRUCT) {
             throw new AtlasBaseException(AtlasErrorCode.TYPE_MATCH_FAILED, structDef.getName(), TypeCategory.STRUCT.name());
         }
 
@@ -263,10 +262,6 @@ public class AtlasStructDefStoreV1 extends AtlasAbstractDefStoreV1<AtlasStructDe
 
         AtlasVertex ret = typeDefStore.findTypeVertexByNameAndCategory(name, TypeCategory.STRUCT);
 
-        if (AtlasGraphUtilsV1.typeHasInstanceVertex(name)) {
-            throw new AtlasBaseException(AtlasErrorCode.TYPE_HAS_REFERENCES, name);
-        }
-
         if (ret == null) {
             throw new AtlasBaseException(AtlasErrorCode.TYPE_NAME_NOT_FOUND, name);
         }
@@ -281,19 +276,34 @@ public class AtlasStructDefStoreV1 extends AtlasAbstractDefStoreV1<AtlasStructDe
     }
 
     @Override
-    public AtlasVertex preDeleteByGuid(String guid) throws AtlasBaseException {
+    public void deleteByName(String name, Object preDeleteResult) throws AtlasBaseException {
         if (LOG.isDebugEnabled()) {
-            LOG.debug("==> AtlasStructDefStoreV1.preDeleteByGuid({})", guid);
+            LOG.debug("==> AtlasStructDefStoreV1.deleteByName({}, {})", name, preDeleteResult);
         }
 
-        AtlasVertex ret = typeDefStore.findTypeVertexByGuidAndCategory(guid, TypeCategory.STRUCT);
+        AtlasVertex vertex;
 
-        String typeName = AtlasGraphUtilsV1.getProperty(ret, Constants.TYPENAME_PROPERTY_KEY, String.class);
+        if (preDeleteResult == null || !(preDeleteResult instanceof AtlasVertex)) {
+            vertex = preDeleteByName(name);
+        } else {
+            vertex = (AtlasVertex)preDeleteResult;
+        }
+
+        typeDefStore.deleteTypeVertex(vertex);
 
-        if (AtlasGraphUtilsV1.typeHasInstanceVertex(typeName)) {
-            throw new AtlasBaseException(AtlasErrorCode.TYPE_HAS_REFERENCES, typeName);
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("<== AtlasStructDefStoreV1.deleteByName({}, {})", name, preDeleteResult);
+        }
+    }
+
+    @Override
+    public AtlasVertex preDeleteByGuid(String guid) throws AtlasBaseException {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("==> AtlasStructDefStoreV1.preDeleteByGuid({})", guid);
         }
 
+        AtlasVertex ret = typeDefStore.findTypeVertexByGuidAndCategory(guid, TypeCategory.STRUCT);
+
         if (ret == null) {
             throw new AtlasBaseException(AtlasErrorCode.TYPE_GUID_NOT_FOUND, guid);
         }
@@ -307,6 +317,56 @@ public class AtlasStructDefStoreV1 extends AtlasAbstractDefStoreV1<AtlasStructDe
         return ret;
     }
 
+    @Override
+    public void deleteByGuid(String guid, Object preDeleteResult) throws AtlasBaseException {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("==> AtlasStructDefStoreV1.deleteByGuid({}, {})", guid, preDeleteResult);
+        }
+
+        AtlasVertex vertex;
+
+        if (preDeleteResult == null || !(preDeleteResult instanceof AtlasVertex)) {
+            vertex = preDeleteByGuid(guid);
+        } else {
+            vertex = (AtlasVertex)preDeleteResult;
+        }
+
+        typeDefStore.deleteTypeVertex(vertex);
+
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("<== AtlasStructDefStoreV1.deleteByGuid({}, {})", guid, preDeleteResult);
+        }
+    }
+
+    @Override
+    public AtlasStructDefs search(SearchFilter filter) throws AtlasBaseException {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("==> AtlasStructDefStoreV1.search({})", filter);
+        }
+
+        List<AtlasStructDef>  structDefs = new ArrayList<>();
+        Iterator<AtlasVertex> vertices   = typeDefStore.findTypeVerticesByCategory(TypeCategory.STRUCT);
+
+        while (vertices.hasNext()) {
+            AtlasVertex    vertex    = vertices.next();
+            AtlasStructDef structDef = toStructDef(vertex);
+
+            if (structDef != null) {
+                structDefs.add(structDef);
+            }
+        }
+
+        CollectionUtils.filter(structDefs, FilterUtil.getPredicateFromSearchFilter(filter));
+
+        AtlasStructDefs ret = new AtlasStructDefs(structDefs);
+
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("<== AtlasStructDefStoreV1.search({}): {}", filter, ret);
+        }
+
+        return ret;
+    }
+
     private AtlasStructDef toStructDef(AtlasVertex vertex) throws AtlasBaseException {
         AtlasStructDef ret = null;
 
@@ -318,25 +378,17 @@ public class AtlasStructDefStoreV1 extends AtlasAbstractDefStoreV1<AtlasStructDe
     }
 
     public static void updateVertexPreCreate(AtlasStructDef structDef, AtlasStructType structType,
-                                             AtlasVertex vertex, AtlasTypeDefGraphStoreV1 typeDefStore) throws AtlasBaseException {
+                                             AtlasVertex vertex, AtlasTypeDefGraphStoreV1 typeDefStore) {
         List<String> attrNames = new ArrayList<>(structDef.getAttributeDefs().size());
 
         for (AtlasAttributeDef attributeDef : structDef.getAttributeDefs()) {
-            // Validate the mandatory features of an attribute (compatibility with legacy type system)
-            if (StringUtils.isEmpty(attributeDef.getName())) {
-                throw new AtlasBaseException(AtlasErrorCode.MISSING_MANDATORY_ATTRIBUTE, structDef.getName(), "name");
-            }
-            if (StringUtils.isEmpty(attributeDef.getTypeName())) {
-                throw new AtlasBaseException(AtlasErrorCode.MISSING_MANDATORY_ATTRIBUTE, structDef.getName(), "typeName");
-            }
-
-            String propertyKey = AtlasGraphUtilsV1.getTypeDefPropertyKey(structDef, attributeDef.getName());
+            String propertyKey = AtlasGraphUtilsV1.getPropertyKey(structDef, attributeDef.getName());
 
-            AtlasGraphUtilsV1.setProperty(vertex, propertyKey, toJsonFromAttribute(structType.getAttribute(attributeDef.getName())));
+            AtlasGraphUtilsV1.setProperty(vertex, propertyKey, toJsonFromAttributeDef(attributeDef, structType));
 
             attrNames.add(attributeDef.getName());
         }
-        AtlasGraphUtilsV1.setProperty(vertex, AtlasGraphUtilsV1.getTypeDefPropertyKey(structDef), attrNames);
+        AtlasGraphUtilsV1.setProperty(vertex, AtlasGraphUtilsV1.getPropertyKey(structDef), attrNames);
     }
 
     public static void updateVertexPreUpdate(AtlasStructDef structDef, AtlasStructType structType,
@@ -350,7 +402,7 @@ public class AtlasStructDefStoreV1 extends AtlasAbstractDefStoreV1<AtlasStructDe
             }
         }
 
-        List<String> currAttrNames = vertex.getProperty(AtlasGraphUtilsV1.getTypeDefPropertyKey(structDef), List.class);
+        List<String> currAttrNames = vertex.getProperty(AtlasGraphUtilsV1.getPropertyKey(structDef), List.class);
 
         // delete attributes that are not present in updated structDef
         if (CollectionUtils.isNotEmpty(currAttrNames)) {
@@ -364,9 +416,6 @@ public class AtlasStructDefStoreV1 extends AtlasAbstractDefStoreV1<AtlasStructDe
 
         typeDefStore.updateTypeVertex(structDef, vertex);
 
-        // Load up current struct definition for matching attributes
-        AtlasStructDef currentStructDef = toStructDef(vertex, new AtlasStructDef(), typeDefStore);
-
         // add/update attributes that are present in updated structDef
         if (CollectionUtils.isNotEmpty(structDef.getAttributeDefs())) {
             for (AtlasAttributeDef attributeDef : structDef.getAttributeDefs()) {
@@ -377,26 +426,13 @@ public class AtlasStructDefStoreV1 extends AtlasAbstractDefStoreV1<AtlasStructDe
                     }
                 }
 
-                // Validate the mandatory features of an attribute (compatibility with legacy type system)
-                if (StringUtils.isEmpty(attributeDef.getName())) {
-                    throw new AtlasBaseException(AtlasErrorCode.MISSING_MANDATORY_ATTRIBUTE, structDef.getName(), "name");
-                }
-                if (StringUtils.isEmpty(attributeDef.getTypeName())) {
-                    throw new AtlasBaseException(AtlasErrorCode.MISSING_MANDATORY_ATTRIBUTE, structDef.getName(), "typeName");
-                }
-
-                AtlasAttributeDef existingAttribute = currentStructDef.getAttribute(attributeDef.getName());
-                if (null != existingAttribute && !attributeDef.getTypeName().equals(existingAttribute.getTypeName())) {
-                    throw new AtlasBaseException(AtlasErrorCode.BAD_REQUEST, "Data type update for attribute is not supported");
-                }
-
-                String propertyKey = AtlasGraphUtilsV1.getTypeDefPropertyKey(structDef, attributeDef.getName());
+                String propertyKey = AtlasGraphUtilsV1.getPropertyKey(structDef, attributeDef.getName());
 
-                AtlasGraphUtilsV1.setProperty(vertex, propertyKey, toJsonFromAttribute(structType.getAttribute(attributeDef.getName())));
+                AtlasGraphUtilsV1.setProperty(vertex, propertyKey, toJsonFromAttributeDef(attributeDef, structType));
             }
         }
 
-        AtlasGraphUtilsV1.setProperty(vertex, AtlasGraphUtilsV1.getTypeDefPropertyKey(structDef), attrNames);
+        AtlasGraphUtilsV1.setProperty(vertex, AtlasGraphUtilsV1.getPropertyKey(structDef), attrNames);
     }
 
     public static void updateVertexAddReferences(AtlasStructDef structDef, AtlasVertex vertex,
@@ -413,12 +449,12 @@ public class AtlasStructDefStoreV1 extends AtlasAbstractDefStoreV1<AtlasStructDe
         typeDefStore.vertexToTypeDef(vertex, ret);
 
         List<AtlasAttributeDef> attributeDefs = new ArrayList<>();
-        List<String> attrNames = vertex.getProperty(AtlasGraphUtilsV1.getTypeDefPropertyKey(ret), List.class);
+        List<String> attrNames = vertex.getProperty(AtlasGraphUtilsV1.getPropertyKey(ret), List.class);
 
         if (CollectionUtils.isNotEmpty(attrNames)) {
             for (String attrName : attrNames) {
-                String propertyKey = AtlasGraphUtilsV1.getTypeDefPropertyKey(ret, attrName);
-                String attribJson  = vertex.getProperty(GraphHelper.encodePropertyKey(propertyKey), String.class);
+                String propertyKey = AtlasGraphUtilsV1.getPropertyKey(ret, attrName);
+                String attribJson  = vertex.getProperty(propertyKey, String.class);
 
                 attributeDefs.add(toAttributeDefFromJson(structDef, AtlasType.fromJson(attribJson, Map.class),
                                   typeDefStore));
@@ -450,19 +486,34 @@ public class AtlasStructDefStoreV1 extends AtlasAbstractDefStoreV1<AtlasStructDe
         }
     }
 
-    @VisibleForTesting
-    public static String toJsonFromAttribute(AtlasAttribute attribute) {
-        AtlasAttributeDef   attributeDef = attribute.getAttributeDef();
-        Map<String, Object> attribInfo   = new HashMap<>();
+    private static String toJsonFromAttributeDef(AtlasAttributeDef attributeDef, AtlasStructType structType) {
+        boolean isForeignKey      = structType.isForeignKeyAttribute(attributeDef.getName());
+        boolean isMappedFromRef   = structType.isMappedFromRefAttribute(attributeDef.getName());
+        String  reverseAttribName = null;
+
+        if (isForeignKey) { // check if the referenced entity has foreignKeyRef to this attribute
+            AtlasType attribType = structType.getAttributeType(attributeDef.getName());
+
+            if (attribType.getTypeCategory() == AtlasType.TypeCategory.ARRAY) {
+                attribType = ((AtlasArrayType)attribType).getElementType();
+            }
+
+            if (attribType.getTypeCategory() == AtlasType.TypeCategory.ENTITY) {
+                reverseAttribName = ((AtlasStructType)attribType).getMappedFromRefAttribute(structType.getTypeName(),
+                                                                                            attributeDef.getName());
+            }
+        }
+
+        boolean isComposite = isMappedFromRef || (isForeignKey && StringUtils.isBlank(reverseAttribName));
+
+        Map<String, Object> attribInfo = new HashMap<>();
 
         attribInfo.put("name", attributeDef.getName());
         attribInfo.put("dataType", attributeDef.getTypeName());
         attribInfo.put("isUnique", attributeDef.getIsUnique());
         attribInfo.put("isIndexable", attributeDef.getIsIndexable());
-        attribInfo.put("isComposite", attribute.isOwnedRef());
-        attribInfo.put("reverseAttributeName", attribute.getInverseRefAttributeName());
-        attribInfo.put("defaultValue", attributeDef.getDefaultValue());
-        attribInfo.put("description", attributeDef.getDescription());
+        attribInfo.put("isComposite", isComposite);
+        attribInfo.put("reverseAttributeName", reverseAttribName);
 
         final int lower;
         final int upper;
@@ -490,8 +541,7 @@ public class AtlasStructDefStoreV1 extends AtlasAbstractDefStoreV1<AtlasStructDe
         return AtlasType.toJson(attribInfo);
     }
 
-    @VisibleForTesting
-    public static AtlasAttributeDef toAttributeDefFromJson(AtlasStructDef           structDef,
+    private static AtlasAttributeDef toAttributeDefFromJson(AtlasStructDef           structDef,
                                                             Map                      attribInfo,
                                                             AtlasTypeDefGraphStoreV1 typeDefStore)
         throws AtlasBaseException {
@@ -501,19 +551,72 @@ public class AtlasStructDefStoreV1 extends AtlasAbstractDefStoreV1<AtlasStructDe
         ret.setTypeName((String) attribInfo.get("dataType"));
         ret.setIsUnique((Boolean) attribInfo.get("isUnique"));
         ret.setIsIndexable((Boolean) attribInfo.get("isIndexable"));
-        ret.setDefaultValue((String) attribInfo.get("defaultValue"));
-        ret.setDescription((String) attribInfo.get("description"));
 
-        if ((Boolean)attribInfo.get("isComposite")) {
-            ret.addConstraint(new AtlasConstraintDef(AtlasConstraintDef.CONSTRAINT_TYPE_OWNED_REF));
+        String attrTypeName = ret.getTypeName();
+
+        if (AtlasTypeUtil.isArrayType(attrTypeName)) {
+            Set<String> typeNames = AtlasTypeUtil.getReferencedTypeNames(ret.getTypeName());
+
+            if (typeNames.size() > 0) {
+                attrTypeName = typeNames.iterator().next();
+            }
         }
 
-        final String reverseAttributeName = (String) attribInfo.get("reverseAttributeName");
-        if (StringUtils.isNotBlank(reverseAttributeName)) {
-            ret.addConstraint(new AtlasConstraintDef(AtlasConstraintDef.CONSTRAINT_TYPE_INVERSE_REF,
-                    new HashMap<String, Object>() {{
-                        put(AtlasConstraintDef.CONSTRAINT_PARAM_ATTRIBUTE, reverseAttributeName);
-                    }}));
+        if (!AtlasTypeUtil.isBuiltInType(attrTypeName)) {
+            AtlasVertex attributeType = typeDefStore.findTypeVertexByName(attrTypeName);
+
+            // check for isComposite/reverseAttributeName for entity types
+            if (attributeType != null && typeDefStore.isTypeVertex(attributeType, TypeCategory.CLASS)) {
+                String  reverseAttribName = (String) attribInfo.get("reverseAttributeName");
+                Boolean isComposite       = (Boolean) attribInfo.get("isComposite");
+
+                if (StringUtils.isNotBlank(reverseAttribName) || isComposite) {
+                    if (AtlasTypeUtil.isMapType(attrTypeName)) {
+                        throw new AtlasBaseException(AtlasErrorCode.CONSTRAINT_NOT_SUPPORTED_ON_MAP_TYPE,
+                                structDef.getName(), ret.getName(), attrTypeName);
+                    }
+
+                    String       refAttributeName = null;
+                    List<String> attrNames        = attributeType.getProperty(
+                                                            AtlasGraphUtilsV1.getPropertyKey(attrTypeName), List.class);
+
+                    if (CollectionUtils.isNotEmpty(attrNames)) {
+                        for (String attrName : attrNames) {
+                            String attribJson = attributeType.getProperty(
+                                                AtlasGraphUtilsV1.getPropertyKey(attrTypeName, attrName), String.class);
+
+                            Map    refAttrInfo            = AtlasType.fromJson(attribJson, Map.class);
+                            String refAttribType          = (String) refAttrInfo.get("dataType");
+                            String refAttribRevAttribName = (String) refAttrInfo.get("reverseAttributeName");
+
+                            if (StringUtils.equals(refAttribType, structDef.getName()) &&
+                                StringUtils.equals(refAttribRevAttribName, ret.getName())) {
+                                refAttributeName = (String) refAttrInfo.get("name");
+
+                                break;
+                            }
+                        }
+                    }
+
+                    if (isComposite) {
+                        if (StringUtils.isNotBlank(refAttributeName)) { // ex: hive_table.columns, hive_column.table
+                            Map<String, Object> params = new HashMap<>();
+                            params.put(AtlasConstraintDef.CONSTRAINT_PARAM_REF_ATTRIBUTE, refAttributeName);
+
+                            ret.addConstraint(new AtlasConstraintDef(CONSTRAINT_TYPE_MAPPED_FROM_REF, params));
+                        } else { // ex: hive_table.partitionKeys, with no reverseAttribute-reference
+                            ret.addConstraint(new AtlasConstraintDef(CONSTRAINT_TYPE_FOREIGN_KEY));
+                        }
+                    }
+
+                    if (StringUtils.isNotBlank(reverseAttribName)) { // ex: hive_column.table
+                        Map<String, Object> params = new HashMap<>();
+                        params.put(CONSTRAINT_PARAM_ON_DELETE, CONSTRAINT_PARAM_VAL_CASCADE);
+
+                        ret.addConstraint(new AtlasConstraintDef(CONSTRAINT_TYPE_FOREIGN_KEY, params));
+                    }
+                }
+            }
         }
 
         Map     multiplicity = AtlasType.fromJson((String) attribInfo.get("multiplicity"), Map.class);
@@ -544,45 +647,4 @@ public class AtlasStructDefStoreV1 extends AtlasAbstractDefStoreV1<AtlasStructDe
 
         return ret;
     }
-
-    public static Multiplicity getMultiplicity(AtlasAttributeDef attributeDef) {
-        final int     lower;
-        final int     upper;
-        final boolean isUnique = AtlasAttributeDef.Cardinality.SET.equals(attributeDef.getCardinality());
-
-        if (attributeDef.getCardinality() == AtlasAttributeDef.Cardinality.SINGLE) {
-            lower = attributeDef.getIsOptional() ? 0 : 1;
-            upper = 1;
-        } else {
-            if(attributeDef.getIsOptional()) {
-                lower = 0;
-            } else {
-                lower = attributeDef.getValuesMinCount() < 1 ? 1 : attributeDef.getValuesMinCount();
-            }
-
-            upper = attributeDef.getValuesMaxCount() < 2 ? Integer.MAX_VALUE : attributeDef.getValuesMaxCount();
-        }
-
-        Multiplicity ret = new Multiplicity(lower, upper, isUnique);
-
-        return ret;
-    }
-
-    public static AttributeDefinition toAttributeDefinition(AtlasAttribute attribute) {
-        final AtlasAttributeDef attrDef = attribute.getAttributeDef();
-
-        AttributeDefinition ret = new AttributeDefinition();
-
-        ret.setName(attrDef.getName());
-        ret.setDataTypeName(attrDef.getTypeName());
-        ret.setMultiplicity(getMultiplicity(attrDef));
-        ret.setIsComposite(attribute.isOwnedRef());
-        ret.setIsUnique(attrDef.getIsUnique());
-        ret.setIsIndexable(attrDef.getIsIndexable());
-        ret.setReverseAttributeName(attribute.getInverseRefAttributeName());
-        ret.setDescription(attrDef.getDescription());
-        ret.setDefaultValue(attrDef.getDefaultValue());
-
-        return ret;
-    }
 }