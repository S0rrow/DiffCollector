diff --git a/webapp/src/main/java/org/apache/atlas/web/resources/ExportService.java b/webapp/src/main/java/org/apache/atlas/web/resources/ExportService.java
index 9c06b4bfb..4499b9c79 100644
--- a/webapp/src/main/java/org/apache/atlas/web/resources/ExportService.java
+++ b/webapp/src/main/java/org/apache/atlas/web/resources/ExportService.java
@@ -17,93 +17,75 @@
  */
 package org.apache.atlas.web.resources;
 
-import com.tinkerpop.gremlin.groovy.jsr223.GremlinGroovyScriptEngine;
-import org.apache.atlas.AtlasErrorCode;
-import org.apache.atlas.AtlasException;
-import org.apache.atlas.AtlasServiceException;
-import org.apache.atlas.exception.AtlasBaseException;
-import org.apache.atlas.model.impexp.AtlasExportRequest;
-import org.apache.atlas.model.impexp.AtlasExportResult;
 import org.apache.atlas.model.instance.AtlasClassification;
-import org.apache.atlas.model.instance.AtlasEntity;
 import org.apache.atlas.model.instance.AtlasObjectId;
-import org.apache.atlas.model.typedef.AtlasBaseTypeDef;
-import org.apache.atlas.model.typedef.AtlasClassificationDef;
-import org.apache.atlas.model.typedef.AtlasEntityDef;
 import org.apache.atlas.model.typedef.AtlasTypesDef;
 import org.apache.atlas.repository.graph.AtlasGraphProvider;
 import org.apache.atlas.repository.graphdb.AtlasGraph;
 import org.apache.atlas.repository.store.graph.v1.EntityGraphRetriever;
-import org.apache.atlas.type.AtlasEntityType;
-import org.apache.atlas.type.AtlasStructType.AtlasAttribute;
 import org.apache.atlas.type.AtlasTypeRegistry;
-import org.apache.atlas.type.AtlasTypeUtil;
-import org.apache.atlas.util.AtlasGremlinQueryProvider;
-import org.apache.atlas.util.AtlasGremlinQueryProvider.AtlasGremlinQuery;
+import org.apache.atlas.AtlasException;
+import org.apache.atlas.AtlasServiceException;
+import org.apache.atlas.exception.AtlasBaseException;
+import org.apache.atlas.model.instance.AtlasEntity;
+import org.apache.atlas.model.impexp.*;
+import org.apache.atlas.model.typedef.AtlasClassificationDef;
+import org.apache.atlas.model.typedef.AtlasEntityDef;
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.collections.MapUtils;
-import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import javax.script.Bindings;
-import javax.script.ScriptContext;
 import javax.script.ScriptException;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
-import static org.apache.atlas.model.impexp.AtlasExportRequest.OPTION_FETCH_TYPE;
-import static org.apache.atlas.model.impexp.AtlasExportRequest.OPTION_ATTR_MATCH_TYPE;
-import static org.apache.atlas.model.impexp.AtlasExportRequest.FETCH_TYPE_FULL;
-import static org.apache.atlas.model.impexp.AtlasExportRequest.FETCH_TYPE_CONNECTED;
-import static org.apache.atlas.model.impexp.AtlasExportRequest.MATCH_TYPE_STARTS_WITH;
-import static org.apache.atlas.model.impexp.AtlasExportRequest.MATCH_TYPE_CONTAINS;
-import static org.apache.atlas.model.impexp.AtlasExportRequest.MATCH_TYPE_MATCHES;
-import static org.apache.atlas.model.impexp.AtlasExportRequest.MATCH_TYPE_ENDS_WITH;
+import java.util.*;
+
 
 public class ExportService {
     private static final Logger LOG = LoggerFactory.getLogger(ExportService.class);
 
-    private final AtlasTypeRegistry         typeRegistry;
-    private final AtlasGraph                atlasGraph;
-    private final EntityGraphRetriever      entityGraphRetriever;
-    private final AtlasGremlinQueryProvider gremlinQueryProvider;
+    private final AtlasTypeRegistry    typeRegistry;
+    private final AtlasGraph           atlasGraph;
+    private final EntityGraphRetriever entityGraphRetriever;
+
+    public ExportService(final AtlasTypeRegistry typeRegistry) {
 
-    public ExportService(final AtlasTypeRegistry typeRegistry) throws AtlasBaseException {
         this.typeRegistry         = typeRegistry;
         this.entityGraphRetriever = new EntityGraphRetriever(this.typeRegistry);
         this.atlasGraph           = AtlasGraphProvider.getGraphInstance();
-        this.gremlinQueryProvider = AtlasGremlinQueryProvider.INSTANCE;
+    }
+
+    private class ExportContext {
+        final Map<String, Boolean> entitiesToBeProcessed = new HashMap<>();
+        final AtlasExportResult    result;
+        final ZipSink              sink;
+        long                       numOfEntitiesExported = 0;
+
+        ExportContext(AtlasExportResult result, ZipSink sink) {
+            this.result = result;
+            this.sink   = sink;
+        }
     }
 
     public AtlasExportResult run(ZipSink exportSink, AtlasExportRequest request, String userName, String hostName,
-                                 String requestingIP) throws AtlasBaseException {
-        long              startTime = System.currentTimeMillis();
-        AtlasExportResult result    = new AtlasExportResult(request, userName, hostName, requestingIP, startTime);
-        ExportContext     context   = new ExportContext(result, exportSink);
+                                 String requestingIP) throws AtlasException {
+
+        ExportContext context = new ExportContext(new AtlasExportResult(request, userName, hostName, requestingIP, System.currentTimeMillis()), exportSink);
 
         try {
             LOG.info("==> export(user={}, from={})", userName, requestingIP);
 
+            int i = 0;
             for (AtlasObjectId item : request.getItemsToExport()) {
-                processObjectId(item, context);
+                process(Integer.toString(i++), item, context);
             }
 
-            long endTime = System.currentTimeMillis();
-
             context.sink.setExportOrder(context.result.getData().getEntityCreationOrder());
             context.sink.setTypesDef(context.result.getData().getTypesDef());
-            context.result.setData(null);
-            context.result.setOperationStatus(AtlasExportResult.OperationStatus.SUCCESS);
-            context.result.incrementMeticsCounter("duration", (int) (endTime - startTime));
 
+            context.result.getData().clear();
+            context.result.setOperationStatus(AtlasExportResult.OperationStatus.SUCCESS);
             context.sink.setResult(context.result);
-        } catch(Exception ex) {
+        }
+        catch(Exception ex) {
             LOG.error("Operation failed: ", ex);
         } finally {
             LOG.info("<== export(user={}, from={}): status {}", userName, requestingIP, context.result.getOperationStatus());
@@ -112,255 +94,80 @@ public class ExportService {
         return context.result;
     }
 
-    private void processObjectId(AtlasObjectId item, ExportContext context) throws AtlasServiceException, AtlasException, AtlasBaseException {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("==> processObjectId({})", item);
-        }
-
+    private void process(String folder, AtlasObjectId item, ExportContext context) throws AtlasServiceException, AtlasException, AtlasBaseException {
         try {
-            List<AtlasEntity> entities = getStartingEntity(item, context);
-
-            for (AtlasEntity entity: entities) {
-                processEntity(entity, context, TraversalDirection.UNKNOWN);
-            }
-
-            while (!context.guidsToProcess.isEmpty()) {
-                String             guid      = context.guidsToProcess.remove(0);
-                TraversalDirection direction = context.guidDirection.get(guid);
-                AtlasEntity        entity    = entityGraphRetriever.toAtlasEntity(guid);
-
-                processEntity(entity, context, direction);
-            }
-        } catch (AtlasBaseException excp) {
-            context.result.setOperationStatus(AtlasExportResult.OperationStatus.PARTIAL_SUCCESS);
-
-            LOG.error("Fetching entity failed for: {}", item, excp);
-        }
-
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("<== processObjectId({})", item);
-        }
-    }
-
-    private List<AtlasEntity> getStartingEntity(AtlasObjectId item, ExportContext context) throws AtlasBaseException {
-        List<AtlasEntity> ret = new ArrayList<>();
-
-        if (StringUtils.isNotEmpty(item.getGuid())) {
-            AtlasEntity entity = entityGraphRetriever.toAtlasEntity(item);
-
-            if (entity != null) {
-                ret = Collections.singletonList(entity);
-            }
-        } else if (StringUtils.isNotEmpty(item.getTypeName()) && MapUtils.isNotEmpty(item.getUniqueAttributes())) {
-            String          typeName   = item.getTypeName();
-            AtlasEntityType entityType = typeRegistry.getEntityTypeByName(typeName);
-
-            if (entityType == null) {
-                throw new AtlasBaseException(AtlasErrorCode.UNKNOWN_TYPENAME, typeName);
-            }
-
-            final String queryTemplate;
-            if (StringUtils.equalsIgnoreCase(context.matchType, MATCH_TYPE_STARTS_WITH)) {
-                queryTemplate = gremlinQueryProvider.getQuery(AtlasGremlinQuery.EXPORT_TYPE_STARTS_WITH);
-            } else if (StringUtils.equalsIgnoreCase(context.matchType, MATCH_TYPE_ENDS_WITH)) {
-                queryTemplate = gremlinQueryProvider.getQuery(AtlasGremlinQuery.EXPORT_TYPE_ENDS_WITH);
-            } else if (StringUtils.equalsIgnoreCase(context.matchType, MATCH_TYPE_CONTAINS)) {
-                queryTemplate = gremlinQueryProvider.getQuery(AtlasGremlinQuery.EXPORT_TYPE_CONTAINS);
-            } else if (StringUtils.equalsIgnoreCase(context.matchType, MATCH_TYPE_MATCHES)) {
-                queryTemplate = gremlinQueryProvider.getQuery(AtlasGremlinQuery.EXPORT_TYPE_MATCHES);
-            } else { // default
-                queryTemplate = gremlinQueryProvider.getQuery(AtlasGremlinQuery.EXPORT_TYPE_DEFAULT);
-            }
+            AtlasEntity  entity = entityGraphRetriever.toAtlasEntity(item);
+            List<String> queue  = populateConnectedEntities(entity.getGuid(), context);
 
-            for (Map.Entry<String, Object> e : item.getUniqueAttributes().entrySet()) {
-                String attrName  = e.getKey();
-                Object attrValue = e.getValue();
+            process(entity, context);
 
-                AtlasAttribute attribute = entityType.getAttribute(attrName);
-
-                if (attribute == null || attrValue == null) {
+            for (String guid : queue) {
+                if(context.entitiesToBeProcessed.get(guid)) {
                     continue;
                 }
 
-                String       query = String.format(queryTemplate, typeName, attribute.getQualifiedName());
-                List<String> guids = executeGremlinQuery(query, "attrValue", attrValue.toString(), context);
-
-                if (CollectionUtils.isNotEmpty(guids)) {
-                    for (String guid : guids) {
-                        AtlasEntity entity = entityGraphRetriever.toAtlasEntity(guid);
-
-                        if (entity == null) {
-                            continue;
-                        }
-
-                        ret.add(entity);
-                    }
-                }
-
-                break;
+                process(entityGraphRetriever.toAtlasEntity(guid), context);
             }
 
-            LOG.info("export(item={}; matchType={}, fetchType={}): found {} entities", item, context.matchType, context.fetchType, ret.size());
-        }
-
-        return ret;
-    }
-
-    private void processEntity(AtlasEntity entity, ExportContext context, TraversalDirection direction) throws AtlasBaseException {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("==> processEntity({})", AtlasTypeUtil.getAtlasObjectId(entity));
-        }
-
-        if (!context.guidsProcessed.contains(entity.getGuid())) {
-            context.guidsProcessed.add(entity.getGuid());
-            context.result.getData().getEntityCreationOrder().add(entity.getGuid());
-
-            addTypesAsNeeded(entity.getTypeName(), context);
-            addClassificationsAsNeeded(entity, context);
-            addEntity(entity, context);
-
-            getConntedEntitiesBasedOnOption(entity, context, direction);
-        }
-
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("<== processEntity({})", AtlasTypeUtil.getAtlasObjectId(entity));
-        }
-    }
-
-    private void getConntedEntitiesBasedOnOption(AtlasEntity entity, ExportContext context, TraversalDirection direction) throws AtlasBaseException {
-        switch (context.fetchType) {
-            case CONNECTED:
-                getEntityGuidsForConnectedFetch(entity, context, direction);
-                break;
-
-            case FULL:
-            default:
-                getEntityGuidsForFullFetch(entity, context);
-        }
-    }
-
-    private void getEntityGuidsForConnectedFetch(AtlasEntity entity, ExportContext context, TraversalDirection direction) throws AtlasBaseException {
-        if (direction == TraversalDirection.UNKNOWN) {
-            getConnectedEntityGuids(entity, context, TraversalDirection.OUTWARD, TraversalDirection.OUTWARD);
-        } else {
-            if (isProcessEntity(entity)) {
-                direction = TraversalDirection.OUTWARD;
-            }
+            context.result.getData().getEntityCreationOrder().put(folder, queue);
+        } catch (AtlasBaseException e) {
+            context.result.setOperationStatus(AtlasExportResult.OperationStatus.PARTIAL_SUCCESS);
 
-            getConnectedEntityGuids(entity, context, direction);
+            LOG.error("Fetching entity failed for: {}", item);
         }
     }
 
-    private boolean isProcessEntity(AtlasEntity entity) throws AtlasBaseException {
-        String          typeName   = entity.getTypeName();
-        AtlasEntityType entityType = typeRegistry.getEntityTypeByName(typeName);
-
-        return entityType.isSubTypeOf(AtlasBaseTypeDef.ATLAS_TYPE_PROCESS);
+    private void process(AtlasEntity entity, ExportContext context) throws AtlasBaseException, AtlasException {
+        addTypesAsNeeded(entity.getTypeName(), context);
+        addClassificationsAsNeeded(entity, context);
+        addEntity(entity, context);
     }
 
-    private void getConnectedEntityGuids(AtlasEntity entity, ExportContext context, TraversalDirection... directions) {
-        if(directions == null) {
-            return;
-        }
-
-        try {
-            for (TraversalDirection direction : directions) {
-                String query = getQueryForTraversalDirection(direction);
-
-                if (LOG.isDebugEnabled()) {
-                    LOG.debug("==> getConnectedEntityGuids({}): guidsToProcess {} query {}", AtlasTypeUtil.getAtlasObjectId(entity), context.guidsToProcess.size(), query);
-                }
-
-                List<String> guids = executeGremlinQuery(query, entity.getGuid(), context);
-
-                if (CollectionUtils.isEmpty(guids)) {
-                    continue;
-                }
-
-                for (String guid : guids) {
-                    TraversalDirection currentDirection = context.guidDirection.get(guid);
-
-                    if (currentDirection == null) {
-                        context.guidDirection.put(guid, direction);
-
-                        if (!context.guidsToProcess.contains(guid)) {
-                            context.guidsToProcess.add(guid);
-                        }
-                    } else if (currentDirection == TraversalDirection.OUTWARD && direction == TraversalDirection.INWARD) {
-                        context.guidDirection.put(guid, direction);
-
-                        // the entity should be reprocessed to get inward entities
-                        context.guidsProcessed.remove(guid);
+    private void addEntity(AtlasEntity entity, ExportContext context) throws AtlasException, AtlasBaseException {
+        context.entitiesToBeProcessed.put(entity.getGuid(), true);
+        context.sink.add(entity);
 
-                        if (!context.guidsToProcess.contains(guid)) {
-                            context.guidsToProcess.add(guid);
-                        }
-                    }
-                }
+        context.result.incrementMeticsCounter(String.format("entity:%s", entity.getTypeName()));
+        context.result.incrementMeticsCounter("Entities");
 
-                if (LOG.isDebugEnabled()) {
-                    LOG.debug("<== getConnectedEntityGuids({}): found {} guids; guidsToProcess {}", entity.getGuid(), guids.size(), context.guidsToProcess.size());
-                }
-            }
+        context.numOfEntitiesExported++;
 
-        } catch (ScriptException e) {
-            LOG.error("Child entities could not be added for %s", entity.getGuid());
+        if (context.numOfEntitiesExported % 10 == 0) {
+            LOG.info("export(): in progress.. number of entities exported: {}", context.numOfEntitiesExported);
         }
     }
 
-    private String getQueryForTraversalDirection(TraversalDirection direction) {
-        switch (direction) {
-            case INWARD:
-                return this.gremlinQueryProvider.getQuery(AtlasGremlinQuery.EXPORT_BY_GUID_CONNECTED_IN_EDGE);
-
-            default:
-            case OUTWARD:
-                return this.gremlinQueryProvider.getQuery(AtlasGremlinQuery.EXPORT_BY_GUID_CONNECTED_OUT_EDGE);
-        }
-    }
+    private List<String> populateConnectedEntities(String startGuid, ExportContext context) {
+        final String gremlinQuery = "g.V('__guid', '%s').bothE().bothV().has('__guid').__guid.toList()";
 
-    private void getEntityGuidsForFullFetch(AtlasEntity entity, ExportContext context) {
+        Map<String, Boolean> entitiesToBeProcessed = context.entitiesToBeProcessed;
 
-        try {
-            String query = this.gremlinQueryProvider.getQuery(AtlasGremlinQuery.EXPORT_BY_GUID_FULL);
+        List<String> queue = new ArrayList<>();
 
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("==> getEntityGuidsForFullFetch({}): guidsToProcess {}", AtlasTypeUtil.getAtlasObjectId(entity), context.guidsToProcess.size());
-            }
+        entitiesToBeProcessed.put(startGuid, false);
+        queue.add(startGuid);
 
-            List<String> result = executeGremlinQuery(query, entity.getGuid(), context);
+        for (int i=0; i < queue.size(); i++) {
+            String currentGuid = queue.get(i);
 
-            if (result == null) {
-                return;
-            }
+            try {
+                List<String> result = (List<String>) atlasGraph.executeGremlinScript(
+                                                        String.format(gremlinQuery, currentGuid), false);
 
-            for (String guid : result) {
-                if (!context.guidsProcessed.contains(guid)) {
-                    if (!context.guidsToProcess.contains(guid)) {
-                        context.guidsToProcess.add(guid);
+                for (String guid : result) {
+                    if (entitiesToBeProcessed.containsKey(guid)) {
+                        continue;
                     }
 
-                    context.guidDirection.put(guid, TraversalDirection.BOTH);
+                    entitiesToBeProcessed.put(guid, false);
+                    queue.add(guid);
                 }
+            } catch (ScriptException e) {
+                LOG.error("Child entities could not be added for %s", currentGuid);
             }
-
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("<== getEntityGuidsForFullFetch({}): found {} guids; guidsToProcess {}", entity.getGuid(), result.size(), context.guidsToProcess.size());
-            }
-        } catch (ScriptException e) {
-            LOG.error("Child entities could not be added for %s", entity.getGuid());
         }
-    }
-
-    private void addEntity(AtlasEntity entity, ExportContext context) throws AtlasBaseException {
-        context.sink.add(entity);
 
-        context.result.incrementMeticsCounter(String.format("entity:%s", entity.getTypeName()));
-        context.result.incrementMeticsCounter("entities");
-
-        if (context.guidsProcessed.size() % 10 == 0) {
-            LOG.info("export(): in progress.. number of entities exported: {}", context.guidsProcessed.size());
-        }
+        return queue;
     }
 
     private void addClassificationsAsNeeded(AtlasEntity entity, ExportContext context) {
@@ -376,7 +183,7 @@ public class ExportService {
                 AtlasClassificationDef cd = typeRegistry.getClassificationDefByName(c.getTypeName());
 
                 typesDef.getClassificationDefs().add(cd);
-                result.incrementMeticsCounter("typedef:classification");
+                result.incrementMeticsCounter("Classification");
             }
         }
     }
@@ -389,111 +196,7 @@ public class ExportService {
             AtlasEntityDef typeDefinition = typeRegistry.getEntityDefByName(typeName);
 
             typesDef.getEntityDefs().add(typeDefinition);
-            result.incrementMeticsCounter("typedef:" + typeDefinition.getName());
-        }
-    }
-
-    private List<String> executeGremlinQuery(String query, String guid, ExportContext context) throws ScriptException {
-        context.bindings.put("startGuid", guid);
-        return (List<String>) atlasGraph.executeGremlinScript(context.scriptEngine,
-                context.bindings,
-                query,
-                false);
-    }
-
-    private List<String> executeGremlinQuery(String query, String parameterName, String parameterValue, ExportContext context) {
-        context.bindings.put(parameterName, parameterValue);
-        try {
-            return (List<String>) atlasGraph.executeGremlinScript(context.scriptEngine,
-                    context.bindings,
-                    query,
-                    false);
-        } catch (ScriptException e) {
-            LOG.error("Script execution failed for query: ", query, e);
-            return null;
-        }
-    }
-
-
-    private enum TraversalDirection {
-        UNKNOWN,
-        INWARD,
-        OUTWARD,
-        BOTH;
-    }
-
-
-    public enum ExportFetchType {
-        FULL(FETCH_TYPE_FULL),
-        CONNECTED(FETCH_TYPE_CONNECTED);
-
-        final String str;
-        ExportFetchType(String s) {
-            this.str = s;
-        }
-
-        public static final ExportFetchType from(String s) {
-            for (ExportFetchType b : ExportFetchType.values()) {
-                if (b.str.equalsIgnoreCase(s)) {
-                    return b;
-                }
-            }
-
-            return FULL;
-        }
-    }
-
-
-    private class ExportContext {
-        final Set<String>                     guidsProcessed = new HashSet<>();
-        final List<String>                    guidsToProcess = new ArrayList<>();
-        final Map<String, TraversalDirection> guidDirection  = new HashMap<>();
-        final AtlasExportResult               result;
-        final ZipSink                         sink;
-
-        private final GremlinGroovyScriptEngine scriptEngine;
-        private final Bindings                  bindings;
-        private final ExportFetchType fetchType;
-        private final String                    matchType;
-
-        ExportContext(AtlasExportResult result, ZipSink sink) {
-            this.result = result;
-            this.sink   = sink;
-
-            this.scriptEngine  = new GremlinGroovyScriptEngine();
-
-            //Do not cache script compilations due to memory implications
-            scriptEngine.getContext().setAttribute("#jsr223.groovy.engine.keep.globals",
-                    "phantom",
-                    ScriptContext.ENGINE_SCOPE);
-
-            bindings  = scriptEngine.getBindings(ScriptContext.ENGINE_SCOPE);
-            fetchType = getFetchType(result.getRequest());
-            matchType = getMatchType(result.getRequest());
-        }
-
-        private ExportFetchType getFetchType(AtlasExportRequest request) {
-            Object fetchOption = request.getOptions() != null ? request.getOptions().get(OPTION_FETCH_TYPE) : null;
-
-            if (fetchOption instanceof String) {
-                return ExportFetchType.from((String) fetchOption);
-            } else if (fetchOption instanceof ExportFetchType) {
-                return (ExportFetchType) fetchOption;
-            }
-
-            return ExportFetchType.FULL;
-        }
-
-        private String getMatchType(AtlasExportRequest request) {
-            String matchType = null;
-
-            if (MapUtils.isNotEmpty(request.getOptions())) {
-                if (request.getOptions().get(OPTION_ATTR_MATCH_TYPE) != null) {
-                    matchType = request.getOptions().get(OPTION_ATTR_MATCH_TYPE).toString();
-                }
-            }
-
-            return matchType;
+            result.incrementMeticsCounter("Type(s)");
         }
     }
 }