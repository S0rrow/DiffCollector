diff --git a/src/main/java/org/apache/aries/application/resolver/obr/OBRAriesResolver.java b/src/main/java/org/apache/aries/application/resolver/obr/OBRAriesResolver.java
index 43e2e5b77..7e401e8aa 100644
--- a/src/main/java/org/apache/aries/application/resolver/obr/OBRAriesResolver.java
+++ b/src/main/java/org/apache/aries/application/resolver/obr/OBRAriesResolver.java
@@ -24,9 +24,7 @@ import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
-import java.io.InputStream;
 import java.io.InputStreamReader;
-import java.io.Reader;
 import java.net.URI;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -42,27 +40,24 @@ import java.util.Set;
 
 import org.apache.aries.application.ApplicationMetadata;
 import org.apache.aries.application.Content;
-import org.apache.aries.application.InvalidAttributeException;
 import org.apache.aries.application.VersionRange;
 import org.apache.aries.application.management.AriesApplication;
+import org.apache.aries.application.management.AriesApplicationResolver;
 import org.apache.aries.application.management.BundleInfo;
+import org.apache.aries.application.management.InvalidAttributeException;
+import org.apache.aries.application.management.PlatformRepository;
+import org.apache.aries.application.management.RepositoryGenerator;
 import org.apache.aries.application.management.ResolveConstraint;
 import org.apache.aries.application.management.ResolverException;
-import org.apache.aries.application.management.spi.repository.PlatformRepository;
-import org.apache.aries.application.management.spi.resolve.AriesApplicationResolver;
 import org.apache.aries.application.modelling.ImportedBundle;
 import org.apache.aries.application.modelling.ModelledResource;
-import org.apache.aries.application.modelling.ModellingConstants;
-import org.apache.aries.application.modelling.ModellingManager;
-import org.apache.aries.application.modelling.utils.ModellingHelper;
+import org.apache.aries.application.modelling.utils.ModellingConstants;
+import org.apache.aries.application.modelling.utils.ModellingManager;
 import org.apache.aries.application.resolver.internal.MessageUtil;
 import org.apache.aries.application.resolver.obr.impl.ApplicationResourceImpl;
 import org.apache.aries.application.resolver.obr.impl.ModelledBundleResource;
 import org.apache.aries.application.resolver.obr.impl.OBRBundleInfo;
-import org.apache.aries.application.resolver.obr.impl.RepositoryGeneratorImpl;
 import org.apache.aries.application.resolver.obr.impl.ResourceWrapper;
-import org.apache.aries.application.utils.AppConstants;
-import org.apache.aries.application.utils.filesystem.IOUtils;
 import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor;
 import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor.NameValueMap;
 import org.apache.felix.bundlerepository.Capability;
@@ -78,6 +73,7 @@ import org.osgi.framework.InvalidSyntaxException;
 import org.osgi.framework.Version;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.w3c.dom.Document;
 
 /**
  * @version $Rev$ $Date$
@@ -89,23 +85,20 @@ public class OBRAriesResolver implements AriesApplicationResolver
   private final RepositoryAdmin repositoryAdmin;  
   private boolean returnOptionalResources = true;
   private PlatformRepository platformRepository;
-  private ModellingManager modellingManager;
-  private ModellingHelper modellingHelper;
-  
-  public void setModellingManager (ModellingManager m) { 
-    modellingManager = m;
-  }
-  
-  public void setModellingHelper (ModellingHelper mh) { 
-    modellingHelper = mh;
-  }
-  
   public PlatformRepository getPlatformRepository()
   {
     return platformRepository;
   }
 
- 
+  private RepositoryGenerator repositoryGenerator;
+  
+  public void setRepositoryGenerator(RepositoryGenerator rg) {
+    this.repositoryGenerator=rg;
+  }
+  
+  public RepositoryGenerator getRepositoryGenerator() {
+    return this.repositoryGenerator;
+  }
   
   public  RepositoryAdmin getRepositoryAdmin() {
     return this.repositoryAdmin;
@@ -129,146 +122,73 @@ public class OBRAriesResolver implements AriesApplicationResolver
   {
     return returnOptionalResources;
   }
-  
-  /**
-   * Resolve a list of resources from the OBR bundle repositories by OBR
-   * resolver.
-   * 
-   * @param appName - application name
-   * @param appVersion - application version
-   * @param byValueBundles - by value bundles
-   * @param inputs - other constraints
-   * @return a collection of modelled resources required by this application
-   * @throws ResolverException
-   */
-  @Override
-   public Collection<ModelledResource> resolve(String appName, String appVersion,
-      Collection<ModelledResource> byValueBundles, Collection<Content> inputs) throws ResolverException
-  {
-     log.debug(LOG_ENTRY, "resolve", new Object[]{appName, appVersion,byValueBundles, inputs});
-    Collection<ImportedBundle> importedBundles = toImportedBundle(inputs);
-    Collection<ModelledResource> toReturn = new ArrayList<ModelledResource>();
-    
-    Resolver obrResolver = getConfiguredObrResolver(appName, appVersion, byValueBundles);
-    // add a resource describing the requirements of the application metadata.
-    obrResolver.add(createApplicationResource( appName, appVersion, importedBundles));
     
-    if (obrResolver.resolve()) {
-      
-      List<Resource> requiredResources = retrieveRequiredResources(obrResolver);
-
-      if (requiredResources == null) {
-        log.debug("resolver.getRequiredResources() returned null");
-      } else {
+ 
+  @Deprecated
+  public Set<BundleInfo> resolve(AriesApplication app, ResolveConstraint... constraints) throws ResolverException
+  {
+    log.trace("resolving {}", app);
+    DataModelHelper helper = repositoryAdmin.getHelper();
 
-        for (Resource r : requiredResources) {
-          NameValueMap<String, String> attribs = new NameValueMap<String, String>();
-          attribs.put(Constants.VERSION_ATTRIBUTE, "[" + r.getVersion() + ',' + r.getVersion()
-              + "]");
-          ModelledResource modelledResourceForThisMatch = null; 
-          // OBR may give us back the global capabilities. Typically these do not have a bundle symbolic name - they're a 
-          // list of packages available in the target runtime environment. If the resource has no symbolic name, we can ignore it
-          if (r.getSymbolicName() != null) { 
-            try { 
-              modelledResourceForThisMatch = new ModelledBundleResource (r, modellingManager, modellingHelper);
-            } catch (InvalidAttributeException iax) { 
-              
-              ResolverException re = new ResolverException("Internal error occurred: " + iax.toString());
-              log.debug(LOG_EXIT, "resolve", re);
-              
-              throw re;
-            }
-            toReturn.add(modelledResourceForThisMatch);
-          }
-        }
-      }
-      log.debug(LOG_EXIT, "resolve", toReturn); 
-      return toReturn;
-    } else {
-      Reason[] reasons = obrResolver.getUnsatisfiedRequirements();
-      // let's refine the list by removing the indirect unsatisfied bundles that are caused by unsatisfied packages or other bundles
-      Map<String,Set<String>> refinedReqs = refineUnsatisfiedRequirements(obrResolver, reasons);
-      StringBuffer reqList = new StringBuffer();
-      List<String> unsatisfiedRequirements = new LinkedList<String>();
+    
+    ApplicationMetadata appMeta = app.getApplicationMetadata();
 
-      for (Map.Entry<String, Set<String>> filterEntry : refinedReqs.entrySet()) {
-        log.debug("unable to satisfied the filter , filter = " + filterEntry.getKey() + "required by "+filterEntry.getValue());
-       
-        String reason = extractConsumableMessageInfo(filterEntry.getKey(),filterEntry.getValue());
+    String appName = appMeta.getApplicationSymbolicName();
+    Version appVersion = appMeta.getApplicationVersion();
+    List<Content> appContent = appMeta.getApplicationContents();
 
-        reqList.append('\n');
-        reqList.append(reason);
-        unsatisfiedRequirements.add(reason);
+    Collection<Content> useBundleContent = appMeta.getUseBundles();
+    List<Content> contents = new ArrayList<Content>();
+    contents.addAll(appContent);
+    contents.addAll(useBundleContent);
+    if ((constraints != null ) && (constraints.length > 0 )) {
+      for (ResolveConstraint con: constraints) {
+        contents.add(ManifestHeaderProcessor.parseContent(con.getBundleName(), con.getVersionRange().toString()));
       }
-
-      ResolverException re = new ResolverException(MessageUtil.getMessage("RESOLVER_UNABLE_TO_RESOLVE", 
-          new Object[] { appName, reqList }));
-      re.setUnsatisfiedRequirements(unsatisfiedRequirements);
-      log.debug(LOG_EXIT, "resolve", re);
-      
-      throw re;
     }
-    
-  }
 
-  private Resolver getConfiguredObrResolver(String appName, String appVersion,
-      Collection<ModelledResource> byValueBundles) throws ResolverException
-  {
-    log.debug(LOG_ENTRY, "getConfiguredObrResolver", new Object[]{appName, appVersion,byValueBundles });
-    DataModelHelper helper = repositoryAdmin.getHelper();
     Repository appRepo;
-    try {      
+    try {
+      
       ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
-      RepositoryGeneratorImpl.generateRepository(repositoryAdmin, appName + "_" + appVersion, byValueBundles, bytesOut);
+      repositoryGenerator.generateRepository(appName + "_" + appVersion, toModelledResource(app.getBundleInfo()), bytesOut);
+      
       appRepo = helper.readRepository(new InputStreamReader(new ByteArrayInputStream(bytesOut.toByteArray())));
     } catch (Exception e) {
       throw new ResolverException(e);
     } 
         
     List<Repository> resolveRepos = new ArrayList<Repository>();
+    
     // add system repository
     resolveRepos.add(repositoryAdmin.getSystemRepository());
-    // add local repository if configured
-    if (!(excludeLocalRuntime())) {
-      resolveRepos.add(getLocalRepository(repositoryAdmin));
-    }
+ // add local repository
+    resolveRepos.add(getLocalRepository(repositoryAdmin));
     // add application repository
     resolveRepos.add(appRepo);
-    // Need to refresh the repositories added to repository admin 
+    // add the user-defined repositories 
+    if (platformRepository != null) {
+      Collection<URI> uris = platformRepository.getPlatformRepositoryURLs();
+      //No need to add repository admin as it does not contain bundles.
+      // Just pass to the resolver when doing resolving.
+      if ((uris != null) && (!uris.isEmpty())) {
+        for (URI uri : uris) {
+          try {
+            resolveRepos.add(helper.readRepository(uri.toString()));
+          } catch (Exception e) {
+            // no a big problem
+            log.error(MessageUtil.getMessage("RESOLVER_UNABLE_TO_READ_REPOSITORY_EXCEPTION", new Object[]{appName, uri}) );
+          }
+        }
+      }
+      // add these real repositories to the repository admin as the bundles within can be discovered when calling getBundleInfo();
+    }
     // add user-defined repositories
     Repository[] repos = repositoryAdmin.listRepositories();
     for (Repository r : repos) {
       resolveRepos.add(r);      
-    }     
+    }    
     Resolver obrResolver = repositoryAdmin.resolver(resolveRepos.toArray(new Repository[resolveRepos.size()]));
-    addPlatformRepositories (obrResolver, appName);
-    log.debug(LOG_EXIT, "getConfiguredObrResolver", obrResolver);
-    return obrResolver;
-  }
- 
-  
-  @Deprecated
-  @Override
-  public Set<BundleInfo> resolve(AriesApplication app, ResolveConstraint... constraints) throws ResolverException
-  {
-    log.trace("resolving {}", app);
-    ApplicationMetadata appMeta = app.getApplicationMetadata();
-
-    String appName = appMeta.getApplicationSymbolicName();
-    Version appVersion = appMeta.getApplicationVersion();
-    List<Content> appContent = appMeta.getApplicationContents();
-
-    Collection<Content> useBundleContent = appMeta.getUseBundles();
-    List<Content> contents = new ArrayList<Content>();
-    contents.addAll(appContent);
-    contents.addAll(useBundleContent);
-    if ((constraints != null ) && (constraints.length > 0 )) {
-      for (ResolveConstraint con: constraints) {
-        contents.add(ManifestHeaderProcessor.parseContent(con.getBundleName(), con.getVersionRange().toString()));
-      }
-    }
-
-    Resolver obrResolver = getConfiguredObrResolver(appName, appVersion.toString(), toModelledResource(app.getBundleInfo()));
     // add a resource describing the requirements of the application metadata.
     obrResolver.add(createApplicationResource( appName, appVersion, contents));
     if (obrResolver.resolve()) {
@@ -311,11 +231,20 @@ public class OBRAriesResolver implements AriesApplicationResolver
       
       throw re;
     }
+      
+  }
+  private Resource createApplicationResource( String appName, Version appVersion,
+      List<Content> appContent)
+  {
+    return new ApplicationResourceImpl(appName, appVersion, appContent);
   }
-
-  
   
-  @Override
+  private Resource createApplicationResource( String appName, String appVersion,
+      Collection<ImportedBundle> inputs)
+  {
+    return new ApplicationResourceImpl(appName, Version.parseVersion(appVersion), inputs);
+  }
+
   public BundleInfo getBundleInfo(String bundleSymbolicName, Version bundleVersion)
   {
     Map<String, String> attribs = new HashMap<String, String>();
@@ -335,53 +264,6 @@ public class OBRAriesResolver implements AriesApplicationResolver
     }
   }
 
-  /* A 'platform repository' describes capabilities of the target runtime environment
-   * These should be added to the resolver without being listed as coming from a particular 
-   * repository or bundle.  
-   */
-  private void addPlatformRepositories (Resolver obrResolver, String appName)
-  { 
-    log.debug(LOG_ENTRY, "addPlatformRepositories", new Object[]{obrResolver, appName});
-    DataModelHelper helper = repositoryAdmin.getHelper();
-    if (platformRepository != null) {
-      Collection<URI> uris = platformRepository.getPlatformRepositoryURLs();
-      if ((uris != null) && (!uris.isEmpty())) {
-        for (URI uri : uris) {
-          InputStream is = null;
-          try {
-            is = uri.toURL().openStream();
-            Reader repoReader = new InputStreamReader(is);
-            Repository aPlatformRepo = helper.readRepository(repoReader);
-            Resource resources[] = aPlatformRepo.getResources();
-            for (Resource r : resources) { 
-              Capability[] caps = r.getCapabilities();
-              for (Capability c : caps) { 
-                obrResolver.addGlobalCapability(c);
-              }
-            }
-          } catch (Exception e) {
-            // no a big problem
-            log.error(MessageUtil.getMessage("RESOLVER_UNABLE_TO_READ_REPOSITORY_EXCEPTION", new Object[]{appName, uri}) );
-          } finally { 
-            IOUtils.close(is);
-          }
-        }
-      }
-    }
-    log.debug(LOG_EXIT, "addPlatformRepositories");
-  }
-  
-  private Resource createApplicationResource( String appName, Version appVersion,
-      List<Content> appContent)
-  {
-    return new ApplicationResourceImpl(appName, appVersion, appContent);
-  }
-  
-  private Resource createApplicationResource( String appName, String appVersion,
-      Collection<ImportedBundle> inputs)
-  {
-    return new ApplicationResourceImpl(appName, Version.parseVersion(appVersion), inputs);
-  }
   
   private BundleInfo toBundleInfo(Resource resource, boolean optional) 
   {
@@ -513,7 +395,7 @@ public class OBRAriesResolver implements AriesApplicationResolver
    * @param bundlesFailing For problems with a bundle, the set of bundles that have a problem
    * @return human readable form
    */
-  private String extractConsumableMessageInfo(String filter, Set<String> bundlesFailing)
+  public String extractConsumableMessageInfo(String filter, Set<String> bundlesFailing)
   {
     log.debug(LOG_ENTRY, "extractConsumableMessageInfo", new Object[] {filter, bundlesFailing});
     
@@ -544,6 +426,9 @@ public class OBRAriesResolver implements AriesApplicationResolver
       inserts.add(filter);
     }
 
+    if (!unknownType && !customAttrs.isEmpty()) {
+      inserts.add(customAttrs);    
+    }
     if (bundlesFailing != null && bundlesFailing.size() != 0) {
       msgKey.append("_REQUIRED_BY_BUNDLE");
       if (bundlesFailing.size() == 1)
@@ -553,7 +438,6 @@ public class OBRAriesResolver implements AriesApplicationResolver
     }
     if (!unknownType && !customAttrs.isEmpty()) {
       msgKey.append("_WITH_ATTRS");
-      inserts.add(customAttrs);
     }
 
     if (!unknownType && attrs.containsKey(Constants.VERSION_ATTRIBUTE)) {
@@ -624,9 +508,9 @@ public class OBRAriesResolver implements AriesApplicationResolver
       Map.Entry<Requirement, Set<String>> entry = iterator.next();
       Requirement req = entry.getKey();
       for (Capability cap :caps) {
-        if (req.isSatisfied(cap)){ // remove the key from the map
+        if (req.isSatisfied(cap)){
+          // remove the key from the map
           iterator.remove();
-          break;
         }
       }
     }
@@ -641,7 +525,119 @@ public class OBRAriesResolver implements AriesApplicationResolver
     return result;
     }
   
- 
+  /**
+   * Resolve a list of resources from the OBR bundle repositories by OBR
+   * resolver.
+   * 
+   * @param appName - application name
+   * @param appVersion - application version
+   * @param byValueBundles - by value bundles
+   * @param inputs - other constraints
+   * @return a collection of modelled resources required by this application
+   * @throws ResolverException
+   */
+   public Collection<ModelledResource> resolve(String appName, String appVersion,
+      Collection<ModelledResource> byValueBundles, Collection<Content> inputs) throws ResolverException
+  {
+     log.debug(LOG_ENTRY, "resolve", new Object[]{appName, appVersion,byValueBundles, inputs});
+    Collection<ImportedBundle> importedBundles = toImportedBundle(inputs);
+    DataModelHelper helper = repositoryAdmin.getHelper();
+
+   
+    Collection<ModelledResource> toReturn = new ArrayList<ModelledResource>();
+    Repository appRepo;
+    try {      
+      ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
+      repositoryGenerator.generateRepository(appName + "_" + appVersion, byValueBundles, bytesOut);
+      appRepo = helper.readRepository(new InputStreamReader(new ByteArrayInputStream(bytesOut.toByteArray())));
+    } catch (Exception e) {
+      throw new ResolverException(e);
+    } 
+        
+    List<Repository> resolveRepos = new ArrayList<Repository>();
+    // add system repository
+    resolveRepos.add(repositoryAdmin.getSystemRepository());
+    // add local repository
+    resolveRepos.add(getLocalRepository(repositoryAdmin));
+    // add application repository
+    resolveRepos.add(appRepo);
+    // add the user-defined repositories 
+    if (platformRepository != null) {
+      Collection<URI> uris = platformRepository.getPlatformRepositoryURLs();
+      if ((uris != null) && (!uris.isEmpty())) {
+        for (URI uri : uris) {
+          try {
+            resolveRepos.add(helper.readRepository(uri.toString()));
+          } catch (Exception e) {
+            // no a big problem
+            log.error(MessageUtil.getMessage("RESOLVER_UNABLE_TO_READ_REPOSITORY_EXCEPTION", new Object[]{appName, uri}) );
+          }
+        }
+      }
+    }
+   // Need to refresh the repositories added to repository admin
+    
+    // add user-defined repositories
+    Repository[] repos = repositoryAdmin.listRepositories();
+    for (Repository r : repos) {
+      resolveRepos.add(r);      
+    }     
+    Resolver obrResolver = repositoryAdmin.resolver(resolveRepos.toArray(new Repository[resolveRepos.size()]));
+    // add a resource describing the requirements of the application metadata.
+    obrResolver.add(createApplicationResource( appName, appVersion, importedBundles));
+    if (obrResolver.resolve()) {
+      
+      List<Resource> requiredResources = retrieveRequiredResources(obrResolver);
+
+      if (requiredResources == null) {
+        log.debug("resolver.getRequiredResources() returned null");
+      } else {
+
+        for (Resource r : requiredResources) {
+          NameValueMap<String, String> attribs = new NameValueMap<String, String>();
+          attribs.put(Constants.VERSION_ATTRIBUTE, "[" + r.getVersion() + ',' + r.getVersion()
+              + "]");
+          ModelledResource modelledResourceForThisMatch = null; 
+          try { 
+            modelledResourceForThisMatch = new ModelledBundleResource (r);
+          } catch (InvalidAttributeException iax) { 
+            
+            ResolverException re = new ResolverException("Internal error occurred: " + iax.toString());
+            log.debug(LOG_EXIT, "resolve", re);
+            
+            throw re;
+          }
+          toReturn.add(modelledResourceForThisMatch);
+        }
+      }
+      log.debug(LOG_EXIT, "resolve", toReturn); 
+      return toReturn;
+    } else {
+      Reason[] reasons = obrResolver.getUnsatisfiedRequirements();
+      // let's refine the list by removing the indirect unsatisfied bundles that are caused by unsatisfied packages or other bundles
+      Map<String,Set<String>> refinedReqs = refineUnsatisfiedRequirements(obrResolver, reasons);
+      StringBuffer reqList = new StringBuffer();
+      List<String> unsatisfiedRequirements = new LinkedList<String>();
+
+      for (Map.Entry<String, Set<String>> filterEntry : refinedReqs.entrySet()) {
+        log.debug("unable to satisfied the filter , filter = " + filterEntry.getKey() + "required by "+filterEntry.getValue());
+       
+        String reason = extractConsumableMessageInfo(filterEntry.getKey(),filterEntry.getValue());
+
+        reqList.append('\n');
+        reqList.append(reason);
+        unsatisfiedRequirements.add(reason);
+      }
+
+      ResolverException re = new ResolverException(MessageUtil.getMessage("RESOLVER_UNABLE_TO_RESOLVE", 
+          new Object[] { appName, reqList }));
+      re.setUnsatisfiedRequirements(unsatisfiedRequirements);
+      log.debug(LOG_EXIT, "resolve", re);
+      
+      throw re;
+    }
+    
+  }
    
    private Collection<ImportedBundle> toImportedBundle(Collection<Content> content) throws ResolverException
    {
@@ -650,7 +646,7 @@ public class OBRAriesResolver implements AriesApplicationResolver
      List<ImportedBundle> result = new ArrayList<ImportedBundle>();
      for (Content c : content) {
        try {
-       result.add(modellingManager.getImportedBundle(c.getContentName(), c.getVersion().toString()));
+       result.add(ModellingManager.getImportedBundle(c.getContentName(), c.getVersion().toString()));
        } catch (InvalidAttributeException iae) {
          throw new ResolverException(iae);
        }
@@ -666,7 +662,7 @@ public class OBRAriesResolver implements AriesApplicationResolver
      if ((bundleInfos != null) && (!!!bundleInfos.isEmpty())) {
        for (BundleInfo bi : bundleInfos) {
          try {
-         result.add(modellingManager.getModelledResource(null, bi, null, null));
+         result.add(ModellingManager.getModelledResource(null, bi, null, null));
          } catch (InvalidAttributeException iae) {
            throw new ResolverException(iae);
          }
@@ -690,8 +686,5 @@ public class OBRAriesResolver implements AriesApplicationResolver
    }
    
 
-   private boolean excludeLocalRuntime() {   
-     return Boolean.parseBoolean(System.getProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP));     
-   }
 
 }