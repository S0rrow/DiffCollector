diff --git a/core/src/main/java/org/apache/accumulo/core/file/rfile/bcfile/BoundedRangeFileInputStream.java b/core/src/main/java/org/apache/accumulo/core/file/rfile/bcfile/BoundedRangeFileInputStream.java
index b182b26b5c..9522754413 100644
--- a/core/src/main/java/org/apache/accumulo/core/file/rfile/bcfile/BoundedRangeFileInputStream.java
+++ b/core/src/main/java/org/apache/accumulo/core/file/rfile/bcfile/BoundedRangeFileInputStream.java
@@ -1,13 +1,13 @@
-/*
+/**
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements. See the NOTICE file distributed with this
  * work for additional information regarding copyright ownership. The ASF
  * licenses this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- *
+ * 
  * http://www.apache.org/licenses/LICENSE-2.0
- *
+ * 
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
@@ -30,47 +30,46 @@ import org.apache.hadoop.fs.FSDataInputStream;
  * BoundedRangeFileInputStream on top of the same FSDataInputStream and they would not interfere with each other.
  */
 class BoundedRangeFileInputStream extends InputStream {
-
+  
   private FSDataInputStream in;
   private long pos;
   private long end;
   private long mark;
   private final byte[] oneByte = new byte[1];
-
+  
   /**
    * Constructor
-   *
+   * 
    * @param in
    *          The FSDataInputStream we connect to.
    * @param offset
    *          Beginning offset of the region.
    * @param length
    *          Length of the region.
-   *
+   * 
    *          The actual length of the region may be smaller if (off_begin + length) goes beyond the end of FS input stream.
    */
   public BoundedRangeFileInputStream(FSDataInputStream in, long offset, long length) {
     if (offset < 0 || length < 0) {
       throw new IndexOutOfBoundsException("Invalid offset/length: " + offset + "/" + length);
     }
-
+    
     this.in = in;
     this.pos = offset;
     this.end = offset + length;
     this.mark = -1;
   }
-
-  private void check() throws IOException {
-    if (in == null) {
-      throw new IOException("Stream closed");
-    }
-  }
-
+  
   @Override
   public int available() throws IOException {
-    return (int) (end - pos);
+    int avail = in.available();
+    if (pos + avail > end) {
+      avail = (int) (end - pos);
+    }
+    
+    return avail;
   }
-
+  
   @Override
   public int read() throws IOException {
     int ret = read(oneByte);
@@ -78,27 +77,25 @@ class BoundedRangeFileInputStream extends InputStream {
       return oneByte[0] & 0xff;
     return -1;
   }
-
+  
   @Override
   public int read(byte[] b) throws IOException {
     return read(b, 0, b.length);
   }
-
+  
   @Override
   public int read(final byte[] b, final int off, int len) throws IOException {
     if ((off | len | (off + len) | (b.length - (off + len))) < 0) {
       throw new IndexOutOfBoundsException();
     }
-
+    
     final int n = (int) Math.min(Integer.MAX_VALUE, Math.min(len, (end - pos)));
     if (n == 0)
       return -1;
     Integer ret = 0;
     final FSDataInputStream inLocal = in;
-    check(); // ensuring inLocal is not null
     synchronized (inLocal) {
-      check(); // ensuring in is not null in which case we were closed which would be followed by someone else reusing the decompressor
-      inLocal.seek(pos);
+    	inLocal.seek(pos);
       try {
         ret = AccessController.doPrivileged(new PrivilegedExceptionAction<Integer>() {
           @Override
@@ -119,7 +116,7 @@ class BoundedRangeFileInputStream extends InputStream {
     pos += ret;
     return ret;
   }
-
+  
   @Override
   /*
    * We may skip beyond the end of the file.
@@ -129,33 +126,29 @@ class BoundedRangeFileInputStream extends InputStream {
     pos += len;
     return len;
   }
-
+  
   @Override
   public void mark(int readlimit) {
     mark = pos;
   }
-
+  
   @Override
   public void reset() throws IOException {
     if (mark < 0)
       throw new IOException("Resetting to invalid mark");
     pos = mark;
   }
-
+  
   @Override
   public boolean markSupported() {
     return true;
   }
-
+  
   @Override
   public void close() {
-    final FSDataInputStream inLocal = in;
-    if (inLocal != null) {
-      // synchronize on the FSDataInputStream to ensure we block closing if in the read method
-      synchronized (inLocal) {
-        // Invalidate the state of the stream.
-        in = null;
-      }
-    }
+    // Invalidate the state of the stream.
+    in = null;
+    pos = end;
+    mark = -1;
   }
 }