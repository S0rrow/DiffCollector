diff --git a/asterixdb/asterix-lang-sqlpp/src/main/java/org/apache/asterix/lang/sqlpp/rewrites/SqlppQueryRewriter.java b/asterixdb/asterix-lang-sqlpp/src/main/java/org/apache/asterix/lang/sqlpp/rewrites/SqlppQueryRewriter.java
index 1ce5de71d5..fab5c07602 100644
--- a/asterixdb/asterix-lang-sqlpp/src/main/java/org/apache/asterix/lang/sqlpp/rewrites/SqlppQueryRewriter.java
+++ b/asterixdb/asterix-lang-sqlpp/src/main/java/org/apache/asterix/lang/sqlpp/rewrites/SqlppQueryRewriter.java
@@ -45,21 +45,16 @@ import org.apache.asterix.lang.sqlpp.clause.SelectElement;
 import org.apache.asterix.lang.sqlpp.clause.SelectRegular;
 import org.apache.asterix.lang.sqlpp.clause.SelectSetOperation;
 import org.apache.asterix.lang.sqlpp.clause.UnnestClause;
-import org.apache.asterix.lang.sqlpp.expression.CaseExpression;
 import org.apache.asterix.lang.sqlpp.expression.IndependentSubquery;
 import org.apache.asterix.lang.sqlpp.expression.SelectExpression;
 import org.apache.asterix.lang.sqlpp.parser.FunctionParser;
 import org.apache.asterix.lang.sqlpp.parser.SqlppParserFactory;
-import org.apache.asterix.lang.sqlpp.rewrites.visitor.GenerateColumnNameVisitor;
 import org.apache.asterix.lang.sqlpp.rewrites.visitor.InlineColumnAliasVisitor;
 import org.apache.asterix.lang.sqlpp.rewrites.visitor.InlineWithExpressionVisitor;
-import org.apache.asterix.lang.sqlpp.rewrites.visitor.OperatorExpressionVisitor;
-import org.apache.asterix.lang.sqlpp.rewrites.visitor.SetOperationVisitor;
 import org.apache.asterix.lang.sqlpp.rewrites.visitor.SqlppBuiltinFunctionRewriteVisitor;
 import org.apache.asterix.lang.sqlpp.rewrites.visitor.SqlppGlobalAggregationSugarVisitor;
 import org.apache.asterix.lang.sqlpp.rewrites.visitor.SqlppGroupByVisitor;
 import org.apache.asterix.lang.sqlpp.rewrites.visitor.SqlppInlineUdfsVisitor;
-import org.apache.asterix.lang.sqlpp.rewrites.visitor.SubstituteGroupbyExpressionWithVariableVisitor;
 import org.apache.asterix.lang.sqlpp.rewrites.visitor.VariableCheckAndRewriteVisitor;
 import org.apache.asterix.lang.sqlpp.struct.SetOperationRight;
 import org.apache.asterix.lang.sqlpp.util.FunctionMapUtil;
@@ -92,20 +87,14 @@ class SqlppQueryRewriter implements IQueryRewriter {
     @Override
     public void rewrite(List<FunctionDecl> declaredFunctions, Query topExpr, AqlMetadataProvider metadataProvider,
             LangRewritingContext context) throws AsterixException {
-        // Marks the current variable counter.
-        context.markCounter();
-
         // Sets up parameters.
         setup(declaredFunctions, topExpr, metadataProvider, context);
 
         // Inlines column aliases.
         inlineColumnAlias();
 
-        // Generates column names.
-        generateColumnNames();
-
-        // Substitutes group-by key expressions.
-        substituteGroupbyKeyExpression();
+        // Inlines WITH expressions.
+        inlineWithExpressions();
 
         // Rewrites SQL-92 global aggregations.
         rewriteGlobalAggregations();
@@ -113,12 +102,6 @@ class SqlppQueryRewriter implements IQueryRewriter {
         // Group-by core/sugar rewrites.
         rewriteGroupBys();
 
-        // Rewrites set operations.
-        rewriteSetOperations();
-
-        // Rewrites like/not-like expressions.
-        rewriteOperatorExpression();
-
         // Generate ids for variables (considering scopes) and replace global variable access with the dataset function.
         variableCheckAndRewrite(true);
 
@@ -130,18 +113,9 @@ class SqlppQueryRewriter implements IQueryRewriter {
         // names could be case sensitive.
         rewriteFunctionNames();
 
-        // Resets the variable counter to the previous marked value.
-        // Therefore, the variable ids in the final query plans will not be perturbed
-        // by the additon or removal of intermediate AST rewrites.
-        context.resetCounter();
-
         // Replace global variable access with the dataset function for inlined expressions.
         variableCheckAndRewrite(true);
 
-        // Inlines WITH expressions after variableCheckAndRewrite(...) so that the variable scoping for WITH
-        // expression is correct.
-        inlineWithExpressions();
-
         // Sets the var counter of the query.
         topExpr.setVarCounter(context.getVarCounter());
     }
@@ -175,58 +149,21 @@ class SqlppQueryRewriter implements IQueryRewriter {
         inlineWithExpressionVisitor.visit(topExpr, null);
     }
 
-    protected void generateColumnNames() throws AsterixException {
-        if (topExpr == null) {
-            return;
-        }
-        // Generate column names if they are missing in the user query.
-        GenerateColumnNameVisitor generateColumnNameVisitor = new GenerateColumnNameVisitor(context);
-        generateColumnNameVisitor.visit(topExpr, null);
-    }
-
-    protected void substituteGroupbyKeyExpression() throws AsterixException {
-        if (topExpr == null) {
-            return;
-        }
-        // Substitute group-by key expressions that appear in the select clause.
-        SubstituteGroupbyExpressionWithVariableVisitor substituteGbyExprVisitor =
-                new SubstituteGroupbyExpressionWithVariableVisitor(context);
-        substituteGbyExprVisitor.visit(topExpr, null);
-    }
-
-    protected void rewriteSetOperations() throws AsterixException {
-        if (topExpr == null) {
-            return;
-        }
-        // Rewrites set operation queries that contain order-by and limit clauses.
-        SetOperationVisitor setOperationVisitor = new SetOperationVisitor(context);
-        setOperationVisitor.visit(topExpr, null);
-    }
-
-    protected void rewriteOperatorExpression() throws AsterixException {
-        if (topExpr == null) {
-            return;
-        }
-        // Rewrites like/not-like/in/not-in operators into function call expressions.
-        OperatorExpressionVisitor operatorExpressionVisitor = new OperatorExpressionVisitor(context);
-        operatorExpressionVisitor.visit(topExpr, null);
-    }
-
     protected void inlineColumnAlias() throws AsterixException {
         if (topExpr == null) {
             return;
         }
         // Inline column aliases.
-        InlineColumnAliasVisitor inlineColumnAliasVisitor = new InlineColumnAliasVisitor(context);
-        inlineColumnAliasVisitor.visit(topExpr, null);
+        InlineColumnAliasVisitor inlineColumnAliasVisitor = new InlineColumnAliasVisitor();
+        inlineColumnAliasVisitor.visit(topExpr, false);
     }
 
     protected void variableCheckAndRewrite(boolean overwrite) throws AsterixException {
         if (topExpr == null) {
             return;
         }
-        VariableCheckAndRewriteVisitor variableCheckAndRewriteVisitor =
-                new VariableCheckAndRewriteVisitor(context, overwrite, metadataProvider);
+        VariableCheckAndRewriteVisitor variableCheckAndRewriteVisitor = new VariableCheckAndRewriteVisitor(context,
+                overwrite, metadataProvider);
         variableCheckAndRewriteVisitor.visit(topExpr, null);
     }
 
@@ -277,8 +214,8 @@ class SqlppQueryRewriter implements IQueryRewriter {
 
             Function function = lookupUserDefinedFunctionDecl(signature);
             if (function == null) {
-                FunctionSignature normalizedSignature =
-                        FunctionMapUtil.normalizeBuiltinFunctionSignature(signature, false);
+                FunctionSignature normalizedSignature = FunctionMapUtil.normalizeBuiltinFunctionSignature(signature,
+                        false);
                 if (AsterixBuiltinFunctions.isBuiltinCompilerFunction(normalizedSignature, includePrivateFunctions)) {
                     continue;
                 }
@@ -359,9 +296,7 @@ class SqlppQueryRewriter implements IQueryRewriter {
 
         @Override
         public Void visit(Projection projection, Void arg) throws AsterixException {
-            if (!projection.star()) {
-                projection.getExpression().accept(this, arg);
-            }
+            projection.getExpression().accept(this, arg);
             return null;
         }
 
@@ -456,18 +391,5 @@ class SqlppQueryRewriter implements IQueryRewriter {
             return null;
         }
 
-        @Override
-        public Void visit(CaseExpression caseExpression, Void arg) throws AsterixException {
-            caseExpression.getConditionExpr().accept(this, arg);
-            for (Expression expr : caseExpression.getWhenExprs()) {
-                expr.accept(this, arg);
-            }
-            for (Expression expr : caseExpression.getThenExprs()) {
-                expr.accept(this, arg);
-            }
-            caseExpression.getElseExpr().accept(this, arg);
-            return null;
-        }
-
     }
 }