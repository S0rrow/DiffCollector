diff --git a/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/QueueControlImpl.java b/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/QueueControlImpl.java
index 6ed4f5b345..7275ea4fb0 100644
--- a/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/QueueControlImpl.java
+++ b/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/QueueControlImpl.java
@@ -22,14 +22,12 @@ import javax.json.JsonObjectBuilder;
 import javax.management.MBeanAttributeInfo;
 import javax.management.MBeanOperationInfo;
 import javax.management.openmbean.CompositeData;
-import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Date;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.NoSuchElementException;
 
 import org.apache.activemq.artemis.api.core.ActiveMQException;
 import org.apache.activemq.artemis.api.core.JsonUtil;
@@ -40,7 +38,6 @@ import org.apache.activemq.artemis.api.core.management.QueueControl;
 import org.apache.activemq.artemis.core.filter.Filter;
 import org.apache.activemq.artemis.core.filter.impl.FilterImpl;
 import org.apache.activemq.artemis.core.management.impl.openmbean.OpenTypeSupport;
-import org.apache.activemq.artemis.core.message.impl.CoreMessage;
 import org.apache.activemq.artemis.core.messagecounter.MessageCounter;
 import org.apache.activemq.artemis.core.messagecounter.impl.MessageCounterHelper;
 import org.apache.activemq.artemis.core.persistence.StorageManager;
@@ -54,12 +51,15 @@ import org.apache.activemq.artemis.core.server.Consumer;
 import org.apache.activemq.artemis.core.server.MessageReference;
 import org.apache.activemq.artemis.core.server.Queue;
 import org.apache.activemq.artemis.core.server.ServerConsumer;
+import org.apache.activemq.artemis.core.server.ServerMessage;
+import org.apache.activemq.artemis.core.server.impl.ServerMessageImpl;
 import org.apache.activemq.artemis.core.settings.HierarchicalRepository;
 import org.apache.activemq.artemis.core.settings.impl.AddressSettings;
 import org.apache.activemq.artemis.spi.core.protocol.RemotingConnection;
 import org.apache.activemq.artemis.utils.Base64;
 import org.apache.activemq.artemis.utils.JsonLoader;
 import org.apache.activemq.artemis.utils.LinkedListIterator;
+import org.apache.activemq.artemis.utils.UUID;
 
 public class QueueControlImpl extends AbstractControl implements QueueControl {
 
@@ -175,19 +175,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
-   public String getRoutingType() {
-      checkStarted();
-
-      clearIO();
-      try {
-         return queue.getRoutingType().toString();
-      } finally {
-         blockOnIO();
-      }
-
-   }
-
    @Override
    public boolean isTemporary() {
       checkStarted();
@@ -343,30 +330,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
-   public int getMaxConsumers() {
-      checkStarted();
-
-      clearIO();
-      try {
-         return queue.getMaxConsumers();
-      } finally {
-         blockOnIO();
-      }
-   }
-
-   @Override
-   public boolean isPurgeOnNoConsumers() {
-      checkStarted();
-
-      clearIO();
-      try {
-         return queue.isPurgeOnNoConsumers();
-      } finally {
-         blockOnIO();
-      }
-   }
-
    @Override
    public Map<String, Object>[] listScheduledMessages() throws Exception {
       checkStarted();
@@ -447,17 +410,13 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
          Filter filter = FilterImpl.createFilter(filterStr);
          List<Map<String, Object>> messages = new ArrayList<>();
          queue.flushExecutor();
-         try (LinkedListIterator<MessageReference> iterator = queue.browserIterator()) {
-            try {
-               while (iterator.hasNext()) {
-                  MessageReference ref = iterator.next();
-                  if (filter == null || filter.match(ref.getMessage())) {
-                     Message message = ref.getMessage();
-                     messages.add(message.toMap());
-                  }
+         try (LinkedListIterator<MessageReference> iterator = queue.totalIterator()) {
+            while (iterator.hasNext()) {
+               MessageReference ref = iterator.next();
+               if (filter == null || filter.match(ref.getMessage())) {
+                  Message message = ref.getMessage();
+                  messages.add(message.toMap());
                }
-            } catch (NoSuchElementException ignored) {
-               // this could happen through paging browsing
             }
             return messages.toArray(new Map[messages.size()]);
          }
@@ -487,7 +446,7 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       try {
          List<Map<String, Object>> messages = new ArrayList<>();
          queue.flushExecutor();
-         try (LinkedListIterator<MessageReference> iterator = queue.browserIterator()) {
+         try (LinkedListIterator<MessageReference> iterator = queue.totalIterator()) {
             // returns just the first, as it's the first only
             if (iterator.hasNext()) {
                MessageReference ref = iterator.next();
@@ -540,18 +499,13 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
          if (filter == null) {
             return getMessageCount();
          } else {
-            try (LinkedListIterator<MessageReference> iterator = queue.browserIterator()) {
+            try (LinkedListIterator<MessageReference> iterator = queue.totalIterator()) {
                int count = 0;
-
-               try {
-                  while (iterator.hasNext()) {
-                     MessageReference ref = iterator.next();
-                     if (filter.match(ref.getMessage())) {
-                        count++;
-                     }
+               while (iterator.hasNext()) {
+                  MessageReference ref = iterator.next();
+                  if (filter.match(ref.getMessage())) {
+                     count++;
                   }
-               } catch (NoSuchElementException ignored) {
-                  // this could happen through paging browsing
                }
                return count;
             }
@@ -630,7 +584,7 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       try {
          Filter singleMessageFilter = new Filter() {
             @Override
-            public boolean match(Message message) {
+            public boolean match(ServerMessage message) {
                return message.getMessageID() == messageID;
             }
 
@@ -740,51 +694,40 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
    public String sendMessage(final Map<String, String> headers,
                              final int type,
                              final String body,
+                             final String userID,
                              boolean durable,
                              final String user,
                              final String password) throws Exception {
-      try {
-         securityStore.check(queue.getAddress(), CheckType.SEND, new SecurityAuth() {
-            @Override
-            public String getUsername() {
-               return user;
-            }
-
-            @Override
-            public String getPassword() {
-               return password;
-            }
+      securityStore.check(queue.getAddress(), CheckType.SEND, new SecurityAuth() {
+         @Override
+         public String getUsername() {
+            return user;
+         }
 
-            @Override
-            public RemotingConnection getRemotingConnection() {
-               return null;
-            }
-         });
-         CoreMessage message = new CoreMessage(storageManager.generateID(), 50);
-         if (headers != null) {
-            for (String header : headers.keySet()) {
-               message.putStringProperty(new SimpleString(header), new SimpleString(headers.get(header)));
-            }
+         @Override
+         public String getPassword() {
+            return password;
          }
-         message.setType((byte) type);
-         message.setDurable(durable);
-         message.setTimestamp(System.currentTimeMillis());
-         if (body != null) {
-            if (type == Message.TEXT_TYPE) {
-               message.getBodyBuffer().writeNullableSimpleString(new SimpleString(body));
-            } else {
-               message.getBodyBuffer().writeBytes(Base64.decode(body));
-            }
+
+         @Override
+         public RemotingConnection getRemotingConnection() {
+            return null;
          }
-         message.setAddress(queue.getAddress());
-         ByteBuffer buffer = ByteBuffer.allocate(8);
-         buffer.putLong(queue.getID());
-         message.putBytesProperty(Message.HDR_ROUTE_TO_IDS, buffer.array());
-         postOffice.route(message, true);
-         return "" + message.getMessageID();
-      } catch (ActiveMQException e) {
-         throw new IllegalStateException(e.getMessage());
+      });
+      ServerMessageImpl message = new ServerMessageImpl(storageManager.generateID(), 50);
+      for (String header : headers.keySet()) {
+         message.putStringProperty(new SimpleString(header), new SimpleString(headers.get(header)));
+      }
+      message.setType((byte) type);
+      message.setDurable(durable);
+      message.setTimestamp(System.currentTimeMillis());
+      message.setUserID(new UUID(UUID.TYPE_TIME_BASED, UUID.stringToBytes(userID)));
+      if (body != null) {
+         message.getBodyBuffer().writeBytes(Base64.decode(body));
       }
+      message.setAddress(queue.getAddress());
+      postOffice.route(message, null, true);
+      return "" + message.getMessageID();
    }
 
    @Override
@@ -905,18 +848,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-
-   @Override
-   public void pause(boolean persist) {
-      checkStarted();
-
-      clearIO();
-      try {
-         queue.pause(persist);
-      } finally {
-         blockOnIO();
-      }
-   }
    @Override
    public void resume() {
       checkStarted();
@@ -942,11 +873,7 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
    }
 
    @Override
-   public CompositeData[] browse() throws Exception {
-      return browse(null);
-   }
-   @Override
-   public CompositeData[] browse(String filter) throws Exception {
+   public CompositeData[] browse(String filterStr) throws Exception {
       checkStarted();
 
       clearIO();
@@ -954,21 +881,16 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
          int pageSize = addressSettingsRepository.getMatch(queue.getName().toString()).getManagementBrowsePageSize();
          int currentPageSize = 0;
          ArrayList<CompositeData> c = new ArrayList<>();
-         Filter thefilter = FilterImpl.createFilter(filter);
+         Filter filter = FilterImpl.createFilter(filterStr);
          queue.flushExecutor();
-         try (LinkedListIterator<MessageReference> iterator = queue.browserIterator()) {
-            try {
-               while (iterator.hasNext() && currentPageSize++ < pageSize) {
-                  MessageReference ref = iterator.next();
-                  if (thefilter == null || thefilter.match(ref.getMessage())) {
-                     c.add(OpenTypeSupport.convert(ref));
+         try (LinkedListIterator<MessageReference> iterator = queue.totalIterator()) {
+            while (iterator.hasNext() && currentPageSize++ < pageSize) {
+               MessageReference ref = iterator.next();
+               if (filter == null || filter.match(ref.getMessage())) {
+                  c.add(OpenTypeSupport.convert(ref));
 
-                  }
                }
-            } catch (NoSuchElementException ignored) {
-               // this could happen through paging browsing
             }
-
             CompositeData[] rc = new CompositeData[c.size()];
             c.toArray(rc);
             return rc;