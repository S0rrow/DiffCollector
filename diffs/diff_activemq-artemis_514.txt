diff --git a/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/QueueControlImpl.java b/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/QueueControlImpl.java
index b9f096418f..7d4aaaf2fd 100644
--- a/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/QueueControlImpl.java
+++ b/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/QueueControlImpl.java
@@ -17,7 +17,6 @@
 package org.apache.activemq.artemis.core.management.impl;
 
 import javax.management.MBeanOperationInfo;
-import javax.management.openmbean.CompositeData;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Date;
@@ -32,28 +31,19 @@ import org.apache.activemq.artemis.api.core.management.MessageCounterInfo;
 import org.apache.activemq.artemis.api.core.management.QueueControl;
 import org.apache.activemq.artemis.core.filter.Filter;
 import org.apache.activemq.artemis.core.filter.impl.FilterImpl;
-import org.apache.activemq.artemis.core.management.impl.openmbean.OpenTypeSupport;
 import org.apache.activemq.artemis.core.messagecounter.MessageCounter;
 import org.apache.activemq.artemis.core.messagecounter.impl.MessageCounterHelper;
 import org.apache.activemq.artemis.core.persistence.StorageManager;
 import org.apache.activemq.artemis.core.postoffice.Binding;
 import org.apache.activemq.artemis.core.postoffice.PostOffice;
-import org.apache.activemq.artemis.core.security.CheckType;
-import org.apache.activemq.artemis.core.security.SecurityAuth;
-import org.apache.activemq.artemis.core.security.SecurityStore;
-import org.apache.activemq.artemis.core.server.ActiveMQMessageBundle;
 import org.apache.activemq.artemis.core.server.Consumer;
+import org.apache.activemq.artemis.core.server.ActiveMQMessageBundle;
 import org.apache.activemq.artemis.core.server.MessageReference;
 import org.apache.activemq.artemis.core.server.Queue;
 import org.apache.activemq.artemis.core.server.ServerConsumer;
-import org.apache.activemq.artemis.core.server.ServerMessage;
-import org.apache.activemq.artemis.core.server.impl.ServerMessageImpl;
 import org.apache.activemq.artemis.core.settings.HierarchicalRepository;
 import org.apache.activemq.artemis.core.settings.impl.AddressSettings;
-import org.apache.activemq.artemis.spi.core.protocol.RemotingConnection;
-import org.apache.activemq.artemis.utils.Base64;
 import org.apache.activemq.artemis.utils.LinkedListIterator;
-import org.apache.activemq.artemis.utils.UUID;
 import org.apache.activemq.artemis.utils.json.JSONArray;
 import org.apache.activemq.artemis.utils.json.JSONException;
 import org.apache.activemq.artemis.utils.json.JSONObject;
@@ -71,8 +61,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    private final PostOffice postOffice;
 
-   private final StorageManager storageManager;
-   private final SecurityStore securityStore;
    private final HierarchicalRepository<AddressSettings> addressSettingsRepository;
 
    private MessageCounter counter;
@@ -115,14 +103,11 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
                            final String address,
                            final PostOffice postOffice,
                            final StorageManager storageManager,
-                           final SecurityStore securityStore,
                            final HierarchicalRepository<AddressSettings> addressSettingsRepository) throws Exception {
       super(QueueControl.class, storageManager);
       this.queue = queue;
       this.address = address;
       this.postOffice = postOffice;
-      this.storageManager = storageManager;
-      this.securityStore = securityStore;
       this.addressSettingsRepository = addressSettingsRepository;
    }
 
@@ -134,7 +119,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    // QueueControlMBean implementation ------------------------------
 
-   @Override
    public String getName() {
       clearIO();
       try {
@@ -145,14 +129,12 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
    public String getAddress() {
       checkStarted();
 
       return address;
    }
 
-   @Override
    public String getFilter() {
       checkStarted();
 
@@ -167,7 +149,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
    public boolean isDurable() {
       checkStarted();
 
@@ -180,7 +161,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
    public boolean isTemporary() {
       checkStarted();
 
@@ -193,7 +173,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
    public long getMessageCount() {
       checkStarted();
 
@@ -206,7 +185,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
    public int getConsumerCount() {
       checkStarted();
 
@@ -219,7 +197,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
    public int getDeliveringCount() {
       checkStarted();
 
@@ -232,7 +209,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
    public long getMessagesAdded() {
       checkStarted();
 
@@ -245,7 +221,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
    public long getMessagesAcknowledged() {
       checkStarted();
 
@@ -258,7 +233,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
    public long getID() {
       checkStarted();
 
@@ -271,7 +245,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
    public long getScheduledCount() {
       checkStarted();
 
@@ -284,7 +257,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
    public String getDeadLetterAddress() {
       checkStarted();
 
@@ -302,7 +274,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
    public String getExpiryAddress() {
       checkStarted();
 
@@ -322,7 +293,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
    public Map<String, Object>[] listScheduledMessages() throws Exception {
       checkStarted();
 
@@ -336,7 +306,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
    public String listScheduledMessagesAsJSON() throws Exception {
       checkStarted();
 
@@ -353,7 +322,7 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
     * @param refs
     * @return
     */
-   private Map<String, Object>[] convertMessagesToMaps(List<MessageReference> refs) throws ActiveMQException {
+   private Map<String, Object>[] convertMessagesToMaps(List<MessageReference> refs) {
       Map<String, Object>[] messages = new Map[refs.size()];
       int i = 0;
       for (MessageReference ref : refs) {
@@ -363,15 +332,14 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       return messages;
    }
 
-   @Override
-   public Map<String, Map<String, Object>[]> listDeliveringMessages() throws ActiveMQException {
+   public Map<String, Map<String, Object>[]> listDeliveringMessages() {
       checkStarted();
 
       clearIO();
       try {
          Map<String, List<MessageReference>> msgs = queue.getDeliveringMessages();
 
-         Map<String, Map<String, Object>[]> msgRet = new HashMap<>();
+         Map<String, Map<String, Object>[]> msgRet = new HashMap<String, Map<String, Object>[]>();
 
          for (Map.Entry<String, List<MessageReference>> entry : msgs.entrySet()) {
             msgRet.put(entry.getKey(), convertMessagesToMaps(entry.getValue()));
@@ -384,7 +352,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    }
 
-   @Override
    public String listDeliveringMessagesAsJSON() throws Exception {
       checkStarted();
 
@@ -397,14 +364,13 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
    public Map<String, Object>[] listMessages(final String filterStr) throws Exception {
       checkStarted();
 
       clearIO();
       try {
          Filter filter = FilterImpl.createFilter(filterStr);
-         List<Map<String, Object>> messages = new ArrayList<>();
+         List<Map<String, Object>> messages = new ArrayList<Map<String, Object>>();
          queue.flushExecutor();
          LinkedListIterator<MessageReference> iterator = queue.totalIterator();
          try {
@@ -429,7 +395,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
    public String listMessagesAsJSON(final String filter) throws Exception {
       checkStarted();
 
@@ -447,7 +412,7 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
       clearIO();
       try {
-         List<Map<String, Object>> messages = new ArrayList<>();
+         List<Map<String, Object>> messages = new ArrayList<Map<String, Object>>();
          queue.flushExecutor();
          LinkedListIterator<MessageReference> iterator = queue.totalIterator();
          try {
@@ -469,12 +434,10 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    }
 
-   @Override
    public String getFirstMessageAsJSON() throws Exception {
       return toJSON(getFirstMessage()).toString();
    }
 
-   @Override
    public Long getFirstMessageTimestamp() throws Exception {
       Map<String, Object>[] _message = getFirstMessage();
       if (_message == null || _message.length == 0 || _message[0] == null) {
@@ -487,7 +450,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       return (Long) message.get("timestamp");
    }
 
-   @Override
    public Long getFirstMessageAge() throws Exception {
       Long firstMessageTimestamp = getFirstMessageTimestamp();
       if (firstMessageTimestamp == null) {
@@ -497,7 +459,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       return now - firstMessageTimestamp.longValue();
    }
 
-   @Override
    public long countMessages(final String filterStr) throws Exception {
       checkStarted();
 
@@ -529,7 +490,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
    public boolean removeMessage(final long messageID) throws Exception {
       checkStarted();
 
@@ -545,12 +505,10 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
    public int removeMessages(final String filterStr) throws Exception {
       return removeMessages(FLUSH_LIMIT, filterStr);
    }
 
-   @Override
    public int removeMessages(final int flushLimit, final String filterStr) throws Exception {
       checkStarted();
 
@@ -565,7 +523,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
    public boolean expireMessage(final long messageID) throws Exception {
       checkStarted();
 
@@ -578,7 +535,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
    public int expireMessages(final String filterStr) throws Exception {
       checkStarted();
 
@@ -595,51 +551,10 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
-   public boolean retryMessage(final long messageID) throws Exception {
-
-      checkStarted();
-      clearIO();
-
-      try {
-         Filter singleMessageFilter = new Filter() {
-            @Override
-            public boolean match(ServerMessage message) {
-               return message.getMessageID() == messageID;
-            }
-
-            @Override
-            public SimpleString getFilterString() {
-               return new SimpleString("custom filter for MESSAGEID= messageID");
-            }
-         };
-
-         return queue.retryMessages(singleMessageFilter) > 0;
-      }
-      finally {
-         blockOnIO();
-      }
-   }
-
-   @Override
-   public int retryMessages() throws Exception {
-      checkStarted();
-      clearIO();
-
-      try {
-         return queue.retryMessages(null);
-      }
-      finally {
-         blockOnIO();
-      }
-   }
-
-   @Override
    public boolean moveMessage(final long messageID, final String otherQueueName) throws Exception {
       return moveMessage(messageID, otherQueueName, false);
    }
 
-   @Override
    public boolean moveMessage(final long messageID,
                               final String otherQueueName,
                               final boolean rejectDuplicates) throws Exception {
@@ -661,12 +576,10 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    }
 
-   @Override
    public int moveMessages(final String filterStr, final String otherQueueName) throws Exception {
       return moveMessages(filterStr, otherQueueName, false);
    }
 
-   @Override
    public int moveMessages(final int flushLimit,
                            final String filterStr,
                            final String otherQueueName,
@@ -693,14 +606,12 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    }
 
-   @Override
    public int moveMessages(final String filterStr,
                            final String otherQueueName,
                            final boolean rejectDuplicates) throws Exception {
       return moveMessages(FLUSH_LIMIT, filterStr, otherQueueName, rejectDuplicates);
    }
 
-   @Override
    public int sendMessagesToDeadLetterAddress(final String filterStr) throws Exception {
       checkStarted();
 
@@ -715,46 +626,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
-   public String sendMessage(final Map<String, String> headers,
-                             final int type,
-                             final String body,
-                             final String userID,
-                             boolean durable, final String user,
-                             final String password) throws Exception {
-      securityStore.check(queue.getAddress(), CheckType.SEND, new SecurityAuth() {
-         @Override
-         public String getUsername() {
-            return user;
-         }
-
-         @Override
-         public String getPassword() {
-            return password;
-         }
-
-         @Override
-         public RemotingConnection getRemotingConnection() {
-            return null;
-         }
-      });
-      ServerMessageImpl message = new ServerMessageImpl(storageManager.generateID(), 50);
-      for (String header : headers.keySet()) {
-         message.putStringProperty(new SimpleString(header), new SimpleString(headers.get(header)));
-      }
-      message.setType((byte) type);
-      message.setDurable(durable);
-      message.setTimestamp(System.currentTimeMillis());
-      message.setUserID(new UUID(UUID.TYPE_TIME_BASED, UUID.stringToBytes(userID)));
-      if (body != null) {
-         message.getBodyBuffer().writeBytes(Base64.decode(body));
-      }
-      message.setAddress(queue.getAddress());
-      postOffice.route(message, null, true);
-      return ""  + message.getMessageID();
-   }
-
-   @Override
    public boolean sendMessageToDeadLetterAddress(final long messageID) throws Exception {
       checkStarted();
 
@@ -767,7 +638,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
    public int changeMessagesPriority(final String filterStr, final int newPriority) throws Exception {
       checkStarted();
 
@@ -785,7 +655,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
    public boolean changeMessagePriority(final long messageID, final int newPriority) throws Exception {
       checkStarted();
 
@@ -801,7 +670,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
    public String listMessageCounter() {
       checkStarted();
 
@@ -817,7 +685,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
    public void resetMessageCounter() {
       checkStarted();
 
@@ -830,7 +697,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
    public String listMessageCounterAsHTML() {
       checkStarted();
 
@@ -843,7 +709,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
    public String listMessageCounterHistory() throws Exception {
       checkStarted();
 
@@ -856,7 +721,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
    public String listMessageCounterHistoryAsHTML() {
       checkStarted();
 
@@ -869,7 +733,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
    public void pause() {
       checkStarted();
 
@@ -882,7 +745,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
    public void resume() {
       checkStarted();
 
@@ -895,7 +757,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
    public boolean isPaused() throws Exception {
       checkStarted();
 
@@ -908,43 +769,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       }
    }
 
-   @Override
-   public CompositeData[] browse(String filterStr) throws Exception {
-      checkStarted();
-
-      clearIO();
-      try {
-         int pageSize = addressSettingsRepository.getMatch(queue.getName().toString()).getManagementBrowsePageSize();
-         int currentPageSize = 0;
-         ArrayList<CompositeData> c = new ArrayList<>();
-         Filter filter = FilterImpl.createFilter(filterStr);
-         queue.flushExecutor();
-         LinkedListIterator<MessageReference> iterator = queue.totalIterator();
-         try {
-            while (iterator.hasNext() && currentPageSize++ < pageSize) {
-               MessageReference ref = iterator.next();
-               if (filter == null || filter.match(ref.getMessage())) {
-                  c.add(OpenTypeSupport.convert(ref));
-
-               }
-            }
-            CompositeData[] rc = new CompositeData[c.size()];
-            c.toArray(rc);
-            return rc;
-         }
-         finally {
-            iterator.close();
-         }
-      }
-      catch (ActiveMQException e) {
-         throw new IllegalStateException(e.getMessage());
-      }
-      finally {
-         blockOnIO();
-      }
-   }
-
-   @Override
    public void flushExecutor() {
       checkStarted();
 
@@ -996,7 +820,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       return MBeanInfoHelper.getMBeanOperationsInfo(QueueControl.class);
    }
 
-   @Override
    public void resetMessagesAdded() throws Exception {
       checkStarted();
 
@@ -1010,7 +833,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    }
 
-   @Override
    public void resetMessagesAcknowledged() throws Exception {
       checkStarted();
 