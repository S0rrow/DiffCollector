diff --git a/repository/src/main/java/org/apache/atlas/query/SelectClauseComposer.java b/repository/src/main/java/org/apache/atlas/query/SelectClauseComposer.java
index b93e22343..f3f63dde0 100644
--- a/repository/src/main/java/org/apache/atlas/query/SelectClauseComposer.java
+++ b/repository/src/main/java/org/apache/atlas/query/SelectClauseComposer.java
@@ -24,10 +24,7 @@ import java.util.Map;
 import java.util.StringJoiner;
 
 class SelectClauseComposer {
-    public boolean  isSelectNoop;
-
     private String[]            labels;
-    private String[]            attributes; // Qualified names
     private String[]            items;
     private Map<String, String> itemAssignmentExprs;
 
@@ -36,6 +33,7 @@ class SelectClauseComposer {
     private int     maxIdx   = -1;
     private int     minIdx   = -1;
     private int     aggCount = 0;
+    public boolean  isSelectNoop;
 
     public SelectClauseComposer() {}
 
@@ -44,7 +42,7 @@ class SelectClauseComposer {
     }
 
     public void setItems(final String[] items) {
-        this.items = Arrays.copyOf(items, items.length);
+        this.items = items;
     }
 
     public boolean updateAsApplicable(int currentIndex, String qualifiedName) {
@@ -61,77 +59,11 @@ class SelectClauseComposer {
         } else if (currentIndex == getSumIdx()) {
             ret = assign(currentIndex, "sum", qualifiedName,
                     GremlinClause.INLINE_ASSIGNMENT, GremlinClause.INLINE_SUM);
-        } else {
-            attributes[currentIndex] = qualifiedName;
         }
 
         return ret;
     }
 
-    public String[] getAttributes() {
-        return attributes;
-    }
-
-    public void setAttributes(final String[] attributes) {
-        this.attributes = Arrays.copyOf(attributes, attributes.length);
-    }
-
-    public boolean assign(int i, String qualifiedName, GremlinClause clause) {
-        items[i] = clause.get(qualifiedName);
-        return true;
-    }
-
-    public String[] getLabels() {
-        return labels;
-    }
-
-    public void setLabels(final String[] labels) {
-        this.labels = labels;
-    }
-
-    public boolean hasAssignmentExpr() {
-        return itemAssignmentExprs != null && !itemAssignmentExprs.isEmpty();
-    }
-
-    public boolean onlyAggregators() {
-        return aggCount > 0 && aggCount == items.length;
-    }
-
-    public String getLabelHeader() {
-        return getJoinedQuotedStr(getLabels());
-    }
-
-    public String getItemsString() {
-        return String.join(",", getItems());
-    }
-
-    public String getAssignmentExprString(){
-        return String.join(" ", itemAssignmentExprs.values());
-    }
-
-    public String getItem(int i) {
-        return items[i];
-    }
-
-    public String getAttribute(int i) {
-        return attributes[i];
-    }
-
-    public String getLabel(int i) {
-        return labels[i];
-    }
-
-    public int getAttrIndex(String attr) {
-        int ret = -1;
-        for (int i = 0; i < attributes.length; i++) {
-            if (attributes[i].equals(attr)) {
-                ret = i;
-                break;
-            }
-        }
-        return ret;
-    }
-
     private boolean assign(String item, String assignExpr) {
         if (itemAssignmentExprs == null) {
             itemAssignmentExprs = new LinkedHashMap<>();
@@ -141,6 +73,11 @@ class SelectClauseComposer {
         return true;
     }
 
+    public boolean assign(int i, String qualifiedName, GremlinClause clause) {
+        items[i] = clause.get(qualifiedName);
+        return true;
+    }
+
     private boolean assign(int i, String s, String p1, GremlinClause clause) {
         items[i] = s;
         return assign(items[i], clause.get(s, p1));
@@ -188,6 +125,34 @@ class SelectClauseComposer {
         aggCount++;
     }
 
+    public String[] getLabels() {
+        return labels;
+    }
+
+    public void setLabels(final String[] labels) {
+        this.labels = labels;
+    }
+
+    public boolean hasAssignmentExpr() {
+        return itemAssignmentExprs != null && !itemAssignmentExprs.isEmpty();
+    }
+
+    public boolean onlyAggregators() {
+        return aggCount > 0 && aggCount == items.length;
+    }
+
+    public String getLabelHeader() {
+        return getJoinedQuotedStr(getLabels());
+    }
+
+    public String getItemsString() {
+        return String.join(",", getItems());
+    }
+
+    public String getAssignmentExprString(){
+        return String.join(" ", itemAssignmentExprs.values());
+    }
+
     private String getJoinedQuotedStr(String[] elements) {
         StringJoiner joiner = new StringJoiner(",");
         Arrays.stream(elements)
@@ -195,4 +160,12 @@ class SelectClauseComposer {
               .forEach(joiner::add);
         return joiner.toString();
     }
+
+    public String getItem(int i) {
+        return items[i];
+    }
+
+    public String getLabel(int i) {
+        return labels[i];
+    }
 }