diff --git a/hyracks-fullstack/hyracks/hyracks-http/src/main/java/org/apache/hyracks/http/server/ChunkedNettyOutputStream.java b/hyracks-fullstack/hyracks/hyracks-http/src/main/java/org/apache/hyracks/http/server/ChunkedNettyOutputStream.java
index 65cdd52bd5..984122bc62 100644
--- a/hyracks-fullstack/hyracks/hyracks-http/src/main/java/org/apache/hyracks/http/server/ChunkedNettyOutputStream.java
+++ b/hyracks-fullstack/hyracks/hyracks-http/src/main/java/org/apache/hyracks/http/server/ChunkedNettyOutputStream.java
@@ -20,8 +20,6 @@ package org.apache.hyracks.http.server;
 
 import java.io.IOException;
 import java.io.OutputStream;
-import java.util.logging.Level;
-import java.util.logging.Logger;
 
 import io.netty.buffer.ByteBuf;
 import io.netty.channel.ChannelHandlerContext;
@@ -30,24 +28,26 @@ import io.netty.handler.codec.http.HttpResponseStatus;
 
 public class ChunkedNettyOutputStream extends OutputStream {
 
-    private static final Logger LOGGER = Logger.getLogger(ChunkedNettyOutputStream.class.getName());
     private final ChannelHandlerContext ctx;
     private final ChunkedResponse response;
     private ByteBuf buffer;
 
-    public ChunkedNettyOutputStream(ChannelHandlerContext ctx, int chunkSize, ChunkedResponse response) {
+    public ChunkedNettyOutputStream(ChannelHandlerContext ctx, int chunkSize,
+            ChunkedResponse response) {
         this.response = response;
         this.ctx = ctx;
         buffer = ctx.alloc().buffer(chunkSize);
     }
 
     @Override
-    public void write(byte[] b, int off, int len) throws IOException {
-        if ((off < 0) || (off > b.length) || (len < 0) || ((off + len) > b.length)) {
+    public synchronized void write(byte[] b, int off, int len) {
+        if ((off < 0) || (off > b.length) || (len < 0) ||
+                ((off + len) > b.length)) {
             throw new IndexOutOfBoundsException();
         } else if (len == 0) {
             return;
         }
+
         if (len > buffer.capacity()) {
             flush();
             flush(b, off, len);
@@ -64,68 +64,45 @@ public class ChunkedNettyOutputStream extends OutputStream {
     }
 
     @Override
-    public void write(int b) throws IOException {
-        if (!buffer.isWritable()) {
+    public synchronized void write(int b) {
+        if (buffer.writableBytes() > 0) {
+            buffer.writeByte(b);
+        } else {
             flush();
+            buffer.writeByte(b);
         }
-        buffer.writeByte(b);
     }
 
     @Override
-    public void close() throws IOException {
-        if (response.isHeaderSent() || response.status() != HttpResponseStatus.OK) {
-            flush();
-            buffer.release();
-        } else {
-            response.fullReponse(buffer);
-        }
+    public synchronized void close() throws IOException {
+        flush();
+        buffer.release();
         super.close();
     }
 
     @Override
-    public void flush() throws IOException {
-        ensureWritable();
+    public synchronized void flush() {
         if (buffer.readableBytes() > 0) {
+            int size = buffer.capacity();
             if (response.status() == HttpResponseStatus.OK) {
-                int size = buffer.capacity();
-                response.beforeFlush();
+                response.flush();
                 DefaultHttpContent content = new DefaultHttpContent(buffer);
-                ctx.write(content, ctx.channel().voidPromise());
-                buffer = ctx.alloc().buffer(size);
+                ctx.write(content);
             } else {
-                ByteBuf aBuffer = ctx.alloc().buffer(buffer.readableBytes());
-                aBuffer.writeBytes(buffer);
-                response.error(aBuffer);
+                response.error(buffer);
             }
+            buffer = ctx.alloc().buffer(size);
         }
     }
 
-    private void flush(byte[] buf, int offset, int len) throws IOException {
-        ensureWritable();
+    private synchronized void flush(byte[] buf, int offset, int len) {
         ByteBuf aBuffer = ctx.alloc().buffer(len);
         aBuffer.writeBytes(buf, offset, len);
         if (response.status() == HttpResponseStatus.OK) {
-            response.beforeFlush();
-            ctx.write(new DefaultHttpContent(aBuffer), ctx.channel().voidPromise());
+            response.flush();
+            ctx.write(new DefaultHttpContent(aBuffer));
         } else {
             response.error(aBuffer);
         }
     }
-
-    private synchronized void ensureWritable() throws IOException {
-        while (!ctx.channel().isWritable()) {
-            try {
-                ctx.flush();
-                wait();
-            } catch (InterruptedException e) {
-                Thread.currentThread().interrupt();
-                LOGGER.log(Level.WARNING, "Interupted while waiting for channel to be writable", e);
-                throw new IOException(e);
-            }
-        }
-    }
-
-    public synchronized void resume() {
-        notifyAll();
-    }
 }
\ No newline at end of file