diff --git a/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/LastValueQueue.java b/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/LastValueQueue.java
index c6d5aeed1d..622cdd1d05 100644
--- a/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/LastValueQueue.java
+++ b/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/LastValueQueue.java
@@ -1,4 +1,4 @@
-/*
+/**
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements. See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -21,7 +21,6 @@ import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.Executor;
 import java.util.concurrent.ScheduledExecutorService;
 
-import org.apache.activemq.artemis.api.core.ActiveMQException;
 import org.apache.activemq.artemis.api.core.Message;
 import org.apache.activemq.artemis.api.core.SimpleString;
 import org.apache.activemq.artemis.core.filter.Filter;
@@ -43,16 +42,15 @@ import org.apache.activemq.artemis.core.settings.impl.AddressSettings;
  * This is useful for example, for stock prices, where you're only interested in the latest value
  * for a particular stock
  */
-public class LastValueQueue extends QueueImpl {
-
-   private final Map<SimpleString, HolderReference> map = new ConcurrentHashMap<>();
+public class LastValueQueue extends QueueImpl
+{
+   private final Map<SimpleString, HolderReference> map = new ConcurrentHashMap<SimpleString, HolderReference>();
 
    public LastValueQueue(final long persistenceID,
                          final SimpleString address,
                          final SimpleString name,
                          final Filter filter,
                          final PageSubscription pageSubscription,
-                         final SimpleString user,
                          final boolean durable,
                          final boolean temporary,
                          final boolean autoCreated,
@@ -60,44 +58,55 @@ public class LastValueQueue extends QueueImpl {
                          final PostOffice postOffice,
                          final StorageManager storageManager,
                          final HierarchicalRepository<AddressSettings> addressSettingsRepository,
-                         final Executor executor) {
-      super(persistenceID, address, name, filter, pageSubscription, user, durable, temporary, autoCreated, scheduledExecutor, postOffice, storageManager, addressSettingsRepository, executor);
-      new Exception("LastValueQeue " + this).toString();
+                         final Executor executor)
+   {
+      super(persistenceID,
+            address,
+            name,
+            filter,
+            pageSubscription,
+            durable,
+            temporary,
+            autoCreated,
+            scheduledExecutor,
+            postOffice,
+            storageManager,
+            addressSettingsRepository,
+            executor);
+      new Exception("LastValueQeue " + this ).toString();
    }
 
    @Override
-   public synchronized void addTail(final MessageReference ref, final boolean direct) {
-      SimpleString prop;
-
-      try {
-         prop = ref.getMessage().getSimpleStringProperty(Message.HDR_LAST_VALUE_NAME);
-      }
-      catch (ActiveMQException e) {
-         criticalError(e);
-         throw new IllegalStateException(e);
-      }
+   public synchronized void addTail(final MessageReference ref, final boolean direct)
+   {
+      SimpleString prop = ref.getMessage().getSimpleStringProperty(Message.HDR_LAST_VALUE_NAME);
 
-      if (prop != null) {
+      if (prop != null)
+      {
          HolderReference hr = map.get(prop);
 
-         if (hr != null) {
+         if (hr != null)
+         {
             // We need to overwrite the old ref with the new one and ack the old one
 
             MessageReference oldRef = hr.getReference();
 
             referenceHandled();
 
-            try {
+            try
+            {
                oldRef.acknowledge();
             }
-            catch (Exception e) {
+            catch (Exception e)
+            {
                ActiveMQServerLogger.LOGGER.errorAckingOldReference(e);
             }
 
             hr.setReference(ref);
 
          }
-         else {
+         else
+         {
             hr = new HolderReference(prop, ref);
 
             map.put(prop, hr);
@@ -105,170 +114,167 @@ public class LastValueQueue extends QueueImpl {
             super.addTail(hr, direct);
          }
       }
-      else {
+      else
+      {
          super.addTail(ref, direct);
       }
    }
 
    @Override
-   public synchronized void addHead(final MessageReference ref) {
-      try {
-         SimpleString prop = ref.getMessage().getSimpleStringProperty(Message.HDR_LAST_VALUE_NAME);
+   public synchronized void addHead(final MessageReference ref)
+   {
+      SimpleString prop = ref.getMessage().getSimpleStringProperty(Message.HDR_LAST_VALUE_NAME);
 
-         if (prop != null) {
-            HolderReference hr = map.get(prop);
+      if (prop != null)
+      {
+         HolderReference hr = map.get(prop);
 
-            if (hr != null) {
-               // We keep the current ref and ack the one we are returning
+         if (hr != null)
+         {
+            // We keep the current ref and ack the one we are returning
 
-               super.referenceHandled();
+            super.referenceHandled();
 
-               try {
-                  super.acknowledge(ref);
-               }
-               catch (Exception e) {
-                  ActiveMQServerLogger.LOGGER.errorAckingOldReference(e);
-               }
+            try
+            {
+               super.acknowledge(ref);
             }
-            else {
-               map.put(prop, (HolderReference) ref);
-
-               super.addHead(ref);
+            catch (Exception e)
+            {
+               ActiveMQServerLogger.LOGGER.errorAckingOldReference(e);
             }
          }
-         else {
+         else
+         {
+            map.put(prop, (HolderReference)ref);
+
             super.addHead(ref);
          }
       }
-      catch (ActiveMQException e) {
-         criticalError(e);
-         throw new IllegalStateException(e);
+      else
+      {
+         super.addHead(ref);
       }
    }
 
-   @Override
-   protected void refRemoved(MessageReference ref) {
-      try {
 
-         synchronized (this) {
-            SimpleString prop = ref.getMessage().getSimpleStringProperty(Message.HDR_LAST_VALUE_NAME);
+   @Override
+   protected void refRemoved(MessageReference ref)
+   {
+      synchronized (this)
+      {
+         SimpleString prop = ref.getMessage().getSimpleStringProperty(Message.HDR_LAST_VALUE_NAME);
 
-            if (prop != null) {
-               map.remove(prop);
-            }
+         if (prop != null)
+         {
+            map.remove(prop);
          }
-
-         super.refRemoved(ref);
-      }
-      catch (ActiveMQException e) {
-         criticalError(e);
-         throw new IllegalStateException(e);
       }
 
+      super.refRemoved(ref);
    }
 
-   private class HolderReference implements MessageReference {
-
+   private class HolderReference implements MessageReference
+   {
       private final SimpleString prop;
 
       private volatile MessageReference ref;
 
       private Long consumerId;
 
-      HolderReference(final SimpleString prop, final MessageReference ref) {
+      HolderReference(final SimpleString prop, final MessageReference ref)
+      {
          this.prop = prop;
 
          this.ref = ref;
       }
 
-      MessageReference getReference() {
+      MessageReference getReference()
+      {
          return ref;
       }
 
-      @Override
-      public void handled() {
+      public void handled()
+      {
          ref.handled();
          // We need to remove the entry from the map just before it gets delivered
          map.remove(prop);
       }
 
       @Override
-      public void setAlreadyAcked() {
+      public void setAlreadyAcked()
+      {
          ref.setAlreadyAcked();
       }
 
       @Override
-      public boolean isAlreadyAcked() {
+      public boolean isAlreadyAcked()
+      {
          return ref.isAlreadyAcked();
       }
 
-      void setReference(final MessageReference ref) {
+      void setReference(final MessageReference ref)
+      {
          this.ref = ref;
       }
 
-      @Override
-      public MessageReference copy(final Queue queue) {
+      public MessageReference copy(final Queue queue)
+      {
          return ref.copy(queue);
       }
 
-      @Override
-      public void decrementDeliveryCount() {
+      public void decrementDeliveryCount()
+      {
          ref.decrementDeliveryCount();
       }
 
-      @Override
-      public int getDeliveryCount() {
+      public int getDeliveryCount()
+      {
          return ref.getDeliveryCount();
       }
 
-      @Override
-      public ServerMessage getMessage() {
-         try {
-            return ref.getMessage();
-         }
-         catch (ActiveMQException e) {
-            criticalError(e);
-            throw new IllegalStateException(e);
-         }
+      public ServerMessage getMessage()
+      {
+         return ref.getMessage();
       }
 
-      @Override
-      public Queue getQueue() {
+      public Queue getQueue()
+      {
          return ref.getQueue();
       }
 
-      @Override
-      public long getScheduledDeliveryTime() {
+      public long getScheduledDeliveryTime()
+      {
          return ref.getScheduledDeliveryTime();
       }
 
-      @Override
-      public void incrementDeliveryCount() {
+      public void incrementDeliveryCount()
+      {
          ref.incrementDeliveryCount();
       }
 
-      @Override
-      public void setDeliveryCount(final int deliveryCount) {
+      public void setDeliveryCount(final int deliveryCount)
+      {
          ref.setDeliveryCount(deliveryCount);
       }
 
-      @Override
-      public void setScheduledDeliveryTime(final long scheduledDeliveryTime) {
+      public void setScheduledDeliveryTime(final long scheduledDeliveryTime)
+      {
          ref.setScheduledDeliveryTime(scheduledDeliveryTime);
       }
 
-      @Override
-      public void setPersistedCount(int count) {
+      public void setPersistedCount(int count)
+      {
          ref.setPersistedCount(count);
       }
 
-      @Override
-      public int getPersistedCount() {
+      public int getPersistedCount()
+      {
          return ref.getPersistedCount();
       }
 
-      @Override
-      public boolean isPaged() {
+      public boolean isPaged()
+      {
          return false;
       }
 
@@ -276,29 +282,25 @@ public class LastValueQueue extends QueueImpl {
        * @see org.apache.activemq.artemis.core.server.MessageReference#acknowledge(org.apache.activemq.artemis.core.server.MessageReference)
        */
       @Override
-      public void acknowledge() throws Exception {
+      public void acknowledge() throws Exception
+      {
          ref.getQueue().acknowledge(this);
       }
 
       /* (non-Javadoc)
        * @see org.apache.activemq.artemis.core.server.MessageReference#getMessageMemoryEstimate()
        */
-      @Override
-      public int getMessageMemoryEstimate() {
-         try {
-            return ref.getMessage().getMemoryEstimate();
-         }
-         catch (ActiveMQException e) {
-            criticalError(e);
-            throw new IllegalStateException(e);
-         }
+      public int getMessageMemoryEstimate()
+      {
+         return ref.getMessage().getMemoryEstimate();
       }
 
       /* (non-Javadoc)
        * @see org.apache.activemq.artemis.core.server.MessageReference#setConsumerId(java.lang.Long)
        */
       @Override
-      public void setConsumerId(Long consumerID) {
+      public void setConsumerId(Long consumerID)
+      {
          this.consumerId = consumerID;
       }
 
@@ -306,13 +308,15 @@ public class LastValueQueue extends QueueImpl {
        * @see org.apache.activemq.artemis.core.server.MessageReference#getConsumerId()
        */
       @Override
-      public Long getConsumerId() {
+      public Long getConsumerId()
+      {
          return this.consumerId;
       }
    }
 
    @Override
-   public int hashCode() {
+   public int hashCode()
+   {
       final int prime = 31;
       int result = super.hashCode();
       result = prime * result + ((map == null) ? 0 : map.hashCode());
@@ -320,23 +324,30 @@ public class LastValueQueue extends QueueImpl {
    }
 
    @Override
-   public boolean equals(Object obj) {
-      if (this == obj) {
+   public boolean equals(Object obj)
+   {
+      if (this == obj)
+      {
          return true;
       }
-      if (!super.equals(obj)) {
+      if (!super.equals(obj))
+      {
          return false;
       }
-      if (!(obj instanceof LastValueQueue)) {
+      if (!(obj instanceof LastValueQueue))
+      {
          return false;
       }
-      LastValueQueue other = (LastValueQueue) obj;
-      if (map == null) {
-         if (other.map != null) {
+      LastValueQueue other = (LastValueQueue)obj;
+      if (map == null)
+      {
+         if (other.map != null)
+         {
             return false;
          }
       }
-      else if (!map.equals(other.map)) {
+      else if (!map.equals(other.map))
+      {
          return false;
       }
       return true;