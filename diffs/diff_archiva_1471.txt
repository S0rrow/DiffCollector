diff --git a/archiva-modules/archiva-base/archiva-consumers/archiva-lucene-consumers/src/main/java/org/apache/archiva/consumers/lucene/NexusIndexerConsumer.java b/archiva-modules/archiva-base/archiva-consumers/archiva-lucene-consumers/src/main/java/org/apache/archiva/consumers/lucene/NexusIndexerConsumer.java
index 00378c706..8a34836de 100644
--- a/archiva-modules/archiva-base/archiva-consumers/archiva-lucene-consumers/src/main/java/org/apache/archiva/consumers/lucene/NexusIndexerConsumer.java
+++ b/archiva-modules/archiva-base/archiva-consumers/archiva-lucene-consumers/src/main/java/org/apache/archiva/consumers/lucene/NexusIndexerConsumer.java
@@ -24,21 +24,29 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Date;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 
+import org.apache.lucene.document.Document;
+import org.apache.lucene.index.IndexReader;
 import org.apache.maven.archiva.configuration.ManagedRepositoryConfiguration;
 import org.apache.maven.archiva.consumers.AbstractMonitoredConsumer;
 import org.apache.maven.archiva.consumers.ConsumerException;
 import org.apache.maven.archiva.consumers.KnownRepositoryContentConsumer;
 import org.apache.maven.archiva.repository.content.ManagedDefaultRepositoryContent;
-import org.apache.maven.archiva.scheduled.ArchivaTaskScheduler;
-import org.apache.maven.archiva.scheduled.tasks.ArtifactIndexingTask;
-import org.apache.maven.archiva.scheduled.tasks.TaskCreator;
-import org.codehaus.plexus.taskqueue.TaskQueueException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.sonatype.nexus.index.ArtifactContext;
+import org.sonatype.nexus.index.ArtifactContextProducer;
+import org.sonatype.nexus.index.ArtifactInfo;
+import org.sonatype.nexus.index.DefaultArtifactContextProducer;
+import org.sonatype.nexus.index.NexusIndexer;
 import org.sonatype.nexus.index.context.IndexingContext;
 import org.sonatype.nexus.index.context.UnsupportedExistingLuceneIndexException;
+import org.sonatype.nexus.index.creator.AbstractIndexCreator;
+import org.sonatype.nexus.index.creator.IndexerEngine;
+import org.sonatype.nexus.index.packer.IndexPacker;
 
 /**
  * Consumer for indexing the repository to provide search and IDE integration features.
@@ -49,17 +57,28 @@
 {
     private static final Logger log = LoggerFactory.getLogger( NexusIndexerConsumer.class );
 
-    private ManagedDefaultRepositoryContent repositoryContent;
+    private final NexusIndexer indexer;
 
-    private File managedRepository;
+    private final ArtifactContextProducer artifactContextProducer;
+
+    private final IndexPacker indexPacker;
 
-    private ArchivaTaskScheduler scheduler;
+    private ManagedDefaultRepositoryContent repositoryContent;
 
     private IndexingContext context;
 
-    public NexusIndexerConsumer( ArchivaTaskScheduler scheduler )
+    private File managedRepository;
+    
+    private IndexerEngine indexerEngine;
+    
+    private Set<String> uinfos;
+
+    public NexusIndexerConsumer( NexusIndexer indexer, IndexPacker indexPacker, IndexerEngine indexerEngine )
     {
-        this.scheduler = scheduler;
+        this.indexer = indexer;
+        this.indexPacker = indexPacker;
+        this.indexerEngine = indexerEngine;
+        this.artifactContextProducer = new DefaultArtifactContextProducer();
     }
 
     public String getDescription()
@@ -79,58 +98,107 @@ public boolean isPermanent()
 
     public void beginScan( ManagedRepositoryConfiguration repository, Date whenGathered )
         throws ConsumerException
-    {
+    {           
         managedRepository = new File( repository.getLocation() );
-
-        repositoryContent = new ManagedDefaultRepositoryContent();
-        repositoryContent.setRepository( repository );
-
-        try
+        String indexDir = repository.getIndexDir();
+        
+        File indexDirectory = null;
+        if( indexDir != null && !"".equals( indexDir ) )
         {
-            context = TaskCreator.createContext( repository );
+            //indexDirectory = new File( managedRepository, repository.getIndexDir() );
+            indexDirectory = new File( repository.getIndexDir() );
         }
-        catch ( IOException e )
+        else
         {
-            throw new ConsumerException( e.getMessage(), e );
+            indexDirectory = new File( managedRepository, ".indexer" );
         }
-        catch ( UnsupportedExistingLuceneIndexException e )
+
+        repositoryContent = new ManagedDefaultRepositoryContent();
+        repositoryContent.setRepository( repository );
+        uinfos = new HashSet<String>();
+
+        synchronized ( indexer )
         {
-            throw new ConsumerException( e.getMessage(), e );
+            try
+            {
+                context =
+                    indexer.addIndexingContext( repository.getId(), repository.getId(), managedRepository,
+                                                indexDirectory, null, null, NexusIndexer.FULL_INDEX );
+                context.setSearchable( repository.isScanned() );
+                
+                // read index to get all the artifacts already indexed
+                IndexReader r = context.getIndexReader();                
+                for ( int i = 0; i < r.numDocs(); i++ )
+                {
+                    if ( !r.isDeleted( i ) )
+                    {
+                        Document d = r.document( i );          
+                        String uinfo = d.get( ArtifactInfo.UINFO );
+          
+                        if ( uinfo != null )
+                        {
+                            uinfos.add( uinfo );
+                        }
+                    }
+                }
+                
+                indexerEngine.beginIndexing( context );
+            }
+            catch ( UnsupportedExistingLuceneIndexException e )
+            {
+                log.error( "Could not create index at " + indexDirectory.getAbsoluteFile(), e );
+            }
+            catch ( IOException e )
+            {
+                log.error( "Could not create index at " + indexDirectory.getAbsoluteFile(), e );
+            }
         }
     }
-
+    
     public void processFile( String path )
         throws ConsumerException
     {
-        File artifactFile = new File( managedRepository, path );
-
-        ArtifactIndexingTask task =
-            TaskCreator.createIndexingTask( repositoryContent.getRepository(), artifactFile,
-                                            ArtifactIndexingTask.Action.ADD, context );
-        try
-        {
-            log.debug( "Queueing indexing task + '" + task + "' to add or update the artifact in the index." );
-            scheduler.queueIndexingTask( task );
-        }
-        catch ( TaskQueueException e )
+        File artifactFile = new File( managedRepository, path );        
+        ArtifactContext artifactContext = artifactContextProducer.getArtifactContext( context, artifactFile );
+        
+        if ( artifactContext != null )
         {
-            throw new ConsumerException( e.getMessage(), e );
+            try
+            {                
+                ArtifactInfo ai = artifactContext.getArtifactInfo();                
+                String uinfo = AbstractIndexCreator.getGAV(
+                    ai.groupId, ai.artifactId, ai.version, ai.classifier, ai.packaging );
+                
+                // already indexed so update!
+                if ( uinfos.contains( uinfo ) )
+                {
+                    indexerEngine.update( context, artifactContext );
+                }
+                else
+                {
+                    indexerEngine.index( context, artifactContext );
+                }    
+            }
+            catch ( IOException e )
+            {
+                throw new ConsumerException( e.getMessage(), e );
+            }
         }
     }
 
     public void completeScan()
-    {
-        ArtifactIndexingTask task =
-            TaskCreator.createIndexingTask( repositoryContent.getRepository(), null,
-                                            ArtifactIndexingTask.Action.FINISH, context );
+    {   
+        final File indexLocation = new File( managedRepository, ".index" );
         try
         {
-            log.debug( "Queueing indexing task + '" + task + "' to finish indexing." );
-            scheduler.queueIndexingTask( task );
+            indexerEngine.endIndexing( context );            
+            indexPacker.packIndex( context, indexLocation );
+            indexer.removeIndexingContext( context, false );
+            uinfos = null;
         }
-        catch ( TaskQueueException e )
+        catch ( IOException e )
         {
-            log.error( "Error queueing task: " + task + ": " + e.getMessage(), e );
+            log.error( "Could not pack index" + indexLocation.getAbsolutePath(), e );
         }
     }
 