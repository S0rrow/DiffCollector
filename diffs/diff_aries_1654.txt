diff --git a/src/main/java/org/apache/aries/jpa/container/context/impl/ManagedPersistenceContextFactory.java b/src/main/java/org/apache/aries/jpa/container/context/impl/ManagedPersistenceContextFactory.java
index 56edb3ceb..ca027f2e7 100644
--- a/src/main/java/org/apache/aries/jpa/container/context/impl/ManagedPersistenceContextFactory.java
+++ b/src/main/java/org/apache/aries/jpa/container/context/impl/ManagedPersistenceContextFactory.java
@@ -20,9 +20,7 @@ package org.apache.aries.jpa.container.context.impl;
 
 import java.util.HashMap;
 import java.util.Map;
-import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.concurrent.atomic.AtomicLong;
-import java.util.concurrent.atomic.AtomicReference;
+import java.util.Properties;
 
 import javax.persistence.Cache;
 import javax.persistence.EntityManager;
@@ -33,8 +31,6 @@ import javax.persistence.criteria.CriteriaBuilder;
 import javax.persistence.metamodel.Metamodel;
 
 import org.apache.aries.jpa.container.context.PersistenceContextProvider;
-import org.apache.aries.jpa.container.context.impl.PersistenceContextManager.QuiesceTidyUp;
-import org.apache.aries.jpa.container.context.transaction.impl.DestroyCallback;
 import org.apache.aries.jpa.container.context.transaction.impl.JTAEntityManager;
 import org.apache.aries.jpa.container.context.transaction.impl.JTAPersistenceContextRegistry;
 import org.osgi.framework.ServiceReference;
@@ -45,10 +41,8 @@ import org.slf4j.LoggerFactory;
  * This is registered in the Service registry to be looked up by blueprint.
  * The EntityManagerFactory interface is used to ensure a shared class space
  * with the client. Only the createEntityManager() method is supported.
- * 
- * Also this class receives a callback on cleanup
  */
-public class ManagedPersistenceContextFactory implements EntityManagerFactory, DestroyCallback {
+public class ManagedPersistenceContextFactory implements EntityManagerFactory {
   /** Logger */
   private static final Logger _logger = LoggerFactory.getLogger("org.apache.aries.jpa.container.context");
   
@@ -56,15 +50,10 @@ public class ManagedPersistenceContextFactory implements EntityManagerFactory, D
   private final Map<String, Object> properties;
   private final JTAPersistenceContextRegistry registry;
   private final PersistenceContextType type;
-  private final AtomicBoolean quiesce = new AtomicBoolean(false);
-  private final AtomicLong activeCount = new AtomicLong(0);
-  private final String unitName;
-  
-  private final AtomicReference<QuiesceTidyUp> tidyUp = new AtomicReference<QuiesceTidyUp>();
-  
-  public ManagedPersistenceContextFactory(String name, ServiceReference unit,
+    
+  public ManagedPersistenceContextFactory(ServiceReference unit,
       Map<String, Object> props, JTAPersistenceContextRegistry contextRegistry) {
-      unitName = name;
+
       emf = unit;
       //Take a copy of the Map so that we don't modify the original
       properties = new HashMap<String, Object>(props);
@@ -81,7 +70,7 @@ public class ManagedPersistenceContextFactory implements EntityManagerFactory, D
     EntityManagerFactory factory = (EntityManagerFactory) emf.getBundle().getBundleContext().getService(emf);
     
     if(type == PersistenceContextType.TRANSACTION || type == null)
-      return new JTAEntityManager(factory, properties, registry, activeCount, this);
+      return new JTAEntityManager(factory, properties, registry);
     else {
       _logger.error("There is currently no support for extended scope EntityManagers");
       return null;
@@ -121,25 +110,4 @@ public class ManagedPersistenceContextFactory implements EntityManagerFactory, D
     throw new UnsupportedOperationException();
   }
 
-  /**
-   * Register an async Quiesce operation with this peristence context
-   * @param tidyUp
-   */
-  public void quiesce(QuiesceTidyUp tidyUp) {
-    this.tidyUp.set(tidyUp);
-    quiesce.set(true);
-    if(activeCount.get() == 0) {
-      tidyUp.unitQuiesced(unitName);
-    }
-  }
-
-  /**
-   * Quiesce this unit after the last context is destroyed
-   */
-  public void callback() {
-    if(quiesce.get() && activeCount.get() == 0) {
-      tidyUp.get().unitQuiesced(unitName);
-    }
-  }
-  
 }