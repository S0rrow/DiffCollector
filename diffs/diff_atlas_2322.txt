diff --git a/webapp/src/test/java/org/apache/hadoop/metadata/web/resources/HiveLineageJerseyResourceIT.java b/webapp/src/test/java/org/apache/hadoop/metadata/web/resources/HiveLineageJerseyResourceIT.java
index b1fc9e8c8..4c0cba41e 100644
--- a/webapp/src/test/java/org/apache/hadoop/metadata/web/resources/HiveLineageJerseyResourceIT.java
+++ b/webapp/src/test/java/org/apache/hadoop/metadata/web/resources/HiveLineageJerseyResourceIT.java
@@ -46,6 +46,7 @@ import org.testng.annotations.Test;
 import javax.ws.rs.HttpMethod;
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.Response;
+import java.util.ArrayList;
 import java.util.List;
 
 /**
@@ -53,8 +54,6 @@ import java.util.List;
  */
 public class HiveLineageJerseyResourceIT extends BaseResourceIT {
 
-    private static final String BASE_URI = "api/metadata/lineage/hive/table/";
-
     @BeforeClass
     public void setUp() throws Exception {
         super.setUp();
@@ -64,46 +63,10 @@ public class HiveLineageJerseyResourceIT extends BaseResourceIT {
     }
 
     @Test
-    public void testInputsGraph() throws Exception {
-        WebResource resource = service
-                .path(BASE_URI)
-                .path("sales_fact_monthly_mv")
-                .path("inputs")
-                .path("graph");
-
-        ClientResponse clientResponse = resource
-                .accept(MediaType.APPLICATION_JSON)
-                .type(MediaType.APPLICATION_JSON)
-                .method(HttpMethod.GET, ClientResponse.class);
-        Assert.assertEquals(clientResponse.getStatus(), Response.Status.OK.getStatusCode());
-
-        String responseAsString = clientResponse.getEntity(String.class);
-        Assert.assertNotNull(responseAsString);
-        System.out.println("inputs graph = " + responseAsString);
-
-        JSONObject response = new JSONObject(responseAsString);
-        Assert.assertNotNull(response.get(MetadataServiceClient.REQUEST_ID));
-
-        JSONObject results = response.getJSONObject(MetadataServiceClient.RESULTS);
-        Assert.assertNotNull(results);
-
-        JSONObject values = results.getJSONObject("values");
-        Assert.assertNotNull(values);
-
-        final JSONObject vertices = values.getJSONObject("vertices");
-        Assert.assertEquals(vertices.length(), 4);
-
-        final JSONObject edges = values.getJSONObject("edges");
-        Assert.assertEquals(edges.length(), 4);
-    }
-
-    @Test
-    public void testOutputsGraph() throws Exception {
+    public void testInputs() throws Exception {
         WebResource resource = service
-                .path(BASE_URI)
-                .path("sales_fact")
-                .path("outputs")
-                .path("graph");
+                .path("api/metadata/lineage/hive/inputs")
+                .path("sales_fact_monthly_mv");
 
         ClientResponse clientResponse = resource
                 .accept(MediaType.APPLICATION_JSON)
@@ -113,7 +76,7 @@ public class HiveLineageJerseyResourceIT extends BaseResourceIT {
 
         String responseAsString = clientResponse.getEntity(String.class);
         Assert.assertNotNull(responseAsString);
-        System.out.println("outputs graph= " + responseAsString);
+        System.out.println("inputs = " + responseAsString);
 
         JSONObject response = new JSONObject(responseAsString);
         Assert.assertNotNull(response.get(MetadataServiceClient.REQUEST_ID));
@@ -121,22 +84,15 @@ public class HiveLineageJerseyResourceIT extends BaseResourceIT {
         JSONObject results = response.getJSONObject(MetadataServiceClient.RESULTS);
         Assert.assertNotNull(results);
 
-        JSONObject values = results.getJSONObject("values");
-        Assert.assertNotNull(values);
-
-        final JSONObject vertices = values.getJSONObject("vertices");
-        Assert.assertEquals(vertices.length(), 3);
-
-        final JSONObject edges = values.getJSONObject("edges");
-        Assert.assertEquals(edges.length(), 4);
+        JSONArray rows = results.getJSONArray("rows");
+        Assert.assertTrue(rows.length() > 0);
     }
 
     @Test
-    public void testSchema() throws Exception {
+    public void testOutputs() throws Exception {
         WebResource resource = service
-                .path(BASE_URI)
-                .path("sales_fact")
-                .path("schema");
+                .path("api/metadata/lineage/hive/outputs")
+                .path("sales_fact");
 
         ClientResponse clientResponse = resource
                 .accept(MediaType.APPLICATION_JSON)
@@ -146,7 +102,7 @@ public class HiveLineageJerseyResourceIT extends BaseResourceIT {
 
         String responseAsString = clientResponse.getEntity(String.class);
         Assert.assertNotNull(responseAsString);
-        System.out.println("schema = " + responseAsString);
+        System.out.println("outputs = " + responseAsString);
 
         JSONObject response = new JSONObject(responseAsString);
         Assert.assertNotNull(response.get(MetadataServiceClient.REQUEST_ID));
@@ -155,45 +111,7 @@ public class HiveLineageJerseyResourceIT extends BaseResourceIT {
         Assert.assertNotNull(results);
 
         JSONArray rows = results.getJSONArray("rows");
-        Assert.assertEquals(rows.length(), 4);
-
-        for (int index = 0; index < rows.length(); index++) {
-            final JSONObject row = rows.getJSONObject(index);
-            Assert.assertNotNull(row.getString("name"));
-            Assert.assertNotNull(row.getString("comment"));
-            Assert.assertNotNull(row.getString("dataType"));
-            Assert.assertEquals(row.getString("$typeName$"), "hive_column");
-        }
-    }
-
-    @Test
-    public void testSchemaForEmptyTable() throws Exception {
-        WebResource resource = service
-                .path(BASE_URI)
-                .path("")
-                .path("schema");
-
-        ClientResponse clientResponse = resource
-                .accept(MediaType.APPLICATION_JSON)
-                .type(MediaType.APPLICATION_JSON)
-                .method(HttpMethod.GET, ClientResponse.class);
-        Assert.assertEquals(clientResponse.getStatus(),
-                Response.Status.NOT_FOUND.getStatusCode());
-    }
-
-    @Test
-    public void testSchemaForInvalidTable() throws Exception {
-        WebResource resource = service
-                .path(BASE_URI)
-                .path("blah")
-                .path("schema");
-
-        ClientResponse clientResponse = resource
-                .accept(MediaType.APPLICATION_JSON)
-                .type(MediaType.APPLICATION_JSON)
-                .method(HttpMethod.GET, ClientResponse.class);
-        Assert.assertEquals(clientResponse.getStatus(),
-                Response.Status.BAD_REQUEST.getStatusCode());
+        Assert.assertTrue(rows.length() > 0);
     }
 
     private void setUpTypes() throws Exception {
@@ -201,47 +119,33 @@ public class HiveLineageJerseyResourceIT extends BaseResourceIT {
         createType(typesDef);
     }
 
-    private static final String DATABASE_TYPE = "hive_db";
     private static final String HIVE_TABLE_TYPE = "hive_table";
-    private static final String COLUMN_TYPE = "hive_column";
     private static final String HIVE_PROCESS_TYPE = "hive_process";
 
     private TypesDef createTypeDefinitions() {
-        HierarchicalTypeDefinition<ClassType> dbClsDef
-                = TypesUtil.createClassTypeDef(DATABASE_TYPE, null,
-                attrDef("name", DataTypes.STRING_TYPE),
-                attrDef("description", DataTypes.STRING_TYPE),
-                attrDef("locationUri", DataTypes.STRING_TYPE),
-                attrDef("owner", DataTypes.STRING_TYPE),
-                attrDef("createTime", DataTypes.INT_TYPE)
-        );
-
-        HierarchicalTypeDefinition<ClassType> columnClsDef =
-                TypesUtil.createClassTypeDef(COLUMN_TYPE, null,
-                        attrDef("name", DataTypes.STRING_TYPE),
-                        attrDef("dataType", DataTypes.STRING_TYPE),
-                        attrDef("comment", DataTypes.STRING_TYPE)
-                );
-
         HierarchicalTypeDefinition<ClassType> tblClsDef =
-                TypesUtil.createClassTypeDef(HIVE_TABLE_TYPE, ImmutableList.of("DataSet"),
+                TypesUtil.createClassTypeDef(HIVE_TABLE_TYPE, null,
+                        attrDef("name", DataTypes.STRING_TYPE),
+                        attrDef("description", DataTypes.STRING_TYPE),
                         attrDef("owner", DataTypes.STRING_TYPE),
                         attrDef("createTime", DataTypes.INT_TYPE),
                         attrDef("lastAccessTime", DataTypes.INT_TYPE),
                         attrDef("tableType", DataTypes.STRING_TYPE),
-                        attrDef("temporary", DataTypes.BOOLEAN_TYPE),
-                        new AttributeDefinition("db", DATABASE_TYPE,
-                                Multiplicity.REQUIRED, false, null),
-                        new AttributeDefinition("columns",
-                                DataTypes.arrayTypeName(COLUMN_TYPE),
-                                Multiplicity.COLLECTION, true, null)
+                        attrDef("temporary", DataTypes.BOOLEAN_TYPE)
                 );
 
         HierarchicalTypeDefinition<ClassType> loadProcessClsDef =
-                TypesUtil.createClassTypeDef(HIVE_PROCESS_TYPE, ImmutableList.of("Process"),
+                TypesUtil.createClassTypeDef(HIVE_PROCESS_TYPE, null,
+                        attrDef("name", DataTypes.STRING_TYPE),
                         attrDef("userName", DataTypes.STRING_TYPE),
                         attrDef("startTime", DataTypes.INT_TYPE),
                         attrDef("endTime", DataTypes.INT_TYPE),
+                        new AttributeDefinition("inputTables",
+                                DataTypes.arrayTypeName(HIVE_TABLE_TYPE),
+                                Multiplicity.COLLECTION, false, null),
+                        new AttributeDefinition("outputTables",
+                                DataTypes.arrayTypeName(HIVE_TABLE_TYPE),
+                                Multiplicity.COLLECTION, false, null),
                         attrDef("queryText", DataTypes.STRING_TYPE, Multiplicity.REQUIRED),
                         attrDef("queryPlan", DataTypes.STRING_TYPE, Multiplicity.REQUIRED),
                         attrDef("queryId", DataTypes.STRING_TYPE, Multiplicity.REQUIRED),
@@ -260,15 +164,11 @@ public class HiveLineageJerseyResourceIT extends BaseResourceIT {
         HierarchicalTypeDefinition<TraitType> etlTraitDef =
                 TypesUtil.createTraitTypeDef("ETL", null);
 
-
-        HierarchicalTypeDefinition<TraitType> piiTraitDef =
-                TypesUtil.createTraitTypeDef("PII", null);
-
         return TypeUtils.getTypesDef(
                 ImmutableList.<EnumTypeDefinition>of(),
                 ImmutableList.<StructTypeDefinition>of(),
-                ImmutableList.of(dimTraitDef, factTraitDef, metricTraitDef, etlTraitDef, piiTraitDef),
-                ImmutableList.of(dbClsDef, columnClsDef, tblClsDef, loadProcessClsDef)
+                ImmutableList.of(dimTraitDef, factTraitDef, metricTraitDef, etlTraitDef),
+                ImmutableList.of(tblClsDef, loadProcessClsDef)
         );
     }
 
@@ -288,77 +188,36 @@ public class HiveLineageJerseyResourceIT extends BaseResourceIT {
     }
 
     private void setupInstances() throws Exception {
-        Id salesDB = database(
-                "Sales", "Sales Database", "John ETL", "hdfs://host:8000/apps/warehouse/sales");
-
-        List<Referenceable> salesFactColumns = ImmutableList.of(
-                column("time_id", "int", "time id"),
-                column("product_id", "int", "product id"),
-                column("customer_id", "int", "customer id", "PII"),
-                column("sales", "double", "product id", "Metric")
-        );
+        Referenceable salesFact = table("sales_fact", "sales fact table",
+                "Joe", "Managed", "Fact");
 
-        Id salesFact = table("sales_fact", "sales fact table",
-                salesDB, "Joe", "Managed", salesFactColumns, "Fact");
-
-        List<Referenceable> timeDimColumns = ImmutableList.of(
-                column("time_id", "int", "time id"),
-                column("dayOfYear", "int", "day Of Year"),
-                column("weekDay", "int", "week Day")
-        );
+        Referenceable timeDim = table("time_dim", "time dimension table",
+                "John Doe", "External", "Dimension");
 
-        Id timeDim = table("time_dim", "time dimension table",
-                salesDB, "John Doe", "External", timeDimColumns, "Dimension");
-
-        Id reportingDB = database("Reporting", "reporting database", "Jane BI",
-                "hdfs://host:8000/apps/warehouse/reporting");
-
-        Id salesFactDaily = table("sales_fact_daily_mv",
+        Referenceable salesFactDaily = table("sales_fact_daily_mv",
                 "sales fact daily materialized view",
-                reportingDB, "Joe BI", "Managed", salesFactColumns, "Metric");
+                "Joe BI", "Managed", "Metric");
 
-        loadProcess("loadSalesDaily", "John ETL",
+        Referenceable loadSalesFactDaily = loadProcess("loadSalesDaily", "John ETL",
                 ImmutableList.of(salesFact, timeDim), ImmutableList.of(salesFactDaily),
                 "create table as select ", "plan", "id", "graph",
                 "ETL");
+        System.out.println("added loadSalesFactDaily = " + loadSalesFactDaily);
 
-        Id salesFactMonthly = table("sales_fact_monthly_mv",
+        Referenceable salesFactMonthly = table("sales_fact_monthly_mv",
                 "sales fact monthly materialized view",
-                reportingDB, "Jane BI", "Managed", salesFactColumns, "Metric");
+                "Jane BI", "Managed", "Metric");
 
-        loadProcess("loadSalesMonthly", "John ETL",
+        Referenceable loadSalesFactMonthly = loadProcess("loadSalesMonthly", "John ETL",
                 ImmutableList.of(salesFactDaily), ImmutableList.of(salesFactMonthly),
                 "create table as select ", "plan", "id", "graph",
                 "ETL");
+        System.out.println("added loadSalesFactMonthly = " + loadSalesFactMonthly);
     }
 
-    Id database(String name, String description,
-                String owner, String locationUri,
-                String... traitNames) throws Exception {
-        Referenceable referenceable = new Referenceable(DATABASE_TYPE, traitNames);
-        referenceable.set("name", name);
-        referenceable.set("description", description);
-        referenceable.set("owner", owner);
-        referenceable.set("locationUri", locationUri);
-        referenceable.set("createTime", System.currentTimeMillis());
-
-        return createInstance(referenceable);
-    }
-
-    Referenceable column(String name, String dataType, String comment,
-                         String... traitNames) throws Exception {
-        Referenceable referenceable = new Referenceable(COLUMN_TYPE, traitNames);
-        referenceable.set("name", name);
-        referenceable.set("dataType", dataType);
-        referenceable.set("comment", comment);
-
-        return referenceable;
-    }
-
-    Id table(String name, String description, Id dbId,
-             String owner, String tableType,
-             List<Referenceable> columns,
-             String... traitNames) throws Exception {
+    Referenceable table(String name, String description,
+                        String owner, String tableType,
+                        String... traitNames) throws Exception {
         Referenceable referenceable = new Referenceable(HIVE_TABLE_TYPE, traitNames);
         referenceable.set("name", name);
         referenceable.set("description", description);
@@ -368,26 +227,32 @@ public class HiveLineageJerseyResourceIT extends BaseResourceIT {
         referenceable.set("lastAccessTime", System.currentTimeMillis());
         referenceable.set("retention", System.currentTimeMillis());
 
-        referenceable.set("db", dbId);
-        referenceable.set("columns", columns);
-
         return createInstance(referenceable);
     }
 
-    Id loadProcess(String name, String user,
-                   List<Id> inputTables,
-                   List<Id> outputTables,
-                   String queryText, String queryPlan,
-                   String queryId, String queryGraph,
-                   String... traitNames) throws Exception {
+    Referenceable loadProcess(String name, String user,
+                              List<Referenceable> inputTables,
+                              List<Referenceable> outputTables,
+                              String queryText, String queryPlan,
+                              String queryId, String queryGraph,
+                              String... traitNames) throws Exception {
         Referenceable referenceable = new Referenceable(HIVE_PROCESS_TYPE, traitNames);
         referenceable.set("name", name);
         referenceable.set("user", user);
         referenceable.set("startTime", System.currentTimeMillis());
         referenceable.set("endTime", System.currentTimeMillis() + 10000);
 
-        referenceable.set("inputs", inputTables);
-        referenceable.set("outputs", outputTables);
+        ArrayList<Id> inputTableIds = new ArrayList<>();
+        for (Referenceable inputTable : inputTables) {
+            inputTableIds.add(inputTable.getId());
+        }
+        referenceable.set("inputTables", inputTableIds);
+
+        ArrayList<Id> outputTableIds = new ArrayList<>();
+        for (Referenceable outputTable : outputTables) {
+            outputTableIds.add(outputTable.getId());
+        }
+        referenceable.set("outputTables", outputTableIds);
 
         referenceable.set("queryText", queryText);
         referenceable.set("queryPlan", queryPlan);
@@ -396,4 +261,4 @@ public class HiveLineageJerseyResourceIT extends BaseResourceIT {
 
         return createInstance(referenceable);
     }
-}
+}
\ No newline at end of file