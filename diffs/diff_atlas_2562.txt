diff --git a/repository/src/main/java/org/apache/atlas/discovery/graph/DefaultGraphPersistenceStrategy.java b/repository/src/main/java/org/apache/atlas/discovery/graph/DefaultGraphPersistenceStrategy.java
index 1133b489f..90718edfd 100755
--- a/repository/src/main/java/org/apache/atlas/discovery/graph/DefaultGraphPersistenceStrategy.java
+++ b/repository/src/main/java/org/apache/atlas/discovery/graph/DefaultGraphPersistenceStrategy.java
@@ -18,10 +18,9 @@
 
 package org.apache.atlas.discovery.graph;
 
-import java.util.List;
-
-import javax.inject.Inject;
-
+import com.google.common.collect.ImmutableCollection;
+import com.google.common.collect.ImmutableList;
+import com.thinkaurelius.titan.core.TitanVertex;
 import org.apache.atlas.AtlasException;
 import org.apache.atlas.query.Expressions;
 import org.apache.atlas.query.GraphPersistenceStrategies;
@@ -30,12 +29,8 @@ import org.apache.atlas.query.IntSequence;
 import org.apache.atlas.query.TypeUtils;
 import org.apache.atlas.repository.Constants;
 import org.apache.atlas.repository.MetadataRepository;
-import org.apache.atlas.repository.RepositoryException;
 import org.apache.atlas.repository.graph.GraphBackedMetadataRepository;
 import org.apache.atlas.repository.graph.GraphHelper;
-import org.apache.atlas.repository.graphdb.AtlasGraph;
-import org.apache.atlas.repository.graphdb.AtlasVertex;
-import org.apache.atlas.repository.graphdb.GremlinVersion;
 import org.apache.atlas.typesystem.ITypedReferenceableInstance;
 import org.apache.atlas.typesystem.ITypedStruct;
 import org.apache.atlas.typesystem.persistence.Id;
@@ -49,8 +44,8 @@ import org.apache.atlas.typesystem.types.TypeSystem;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.common.collect.ImmutableCollection;
-import com.google.common.collect.ImmutableList;
+import javax.inject.Inject;
+import java.util.List;
 
 /**
  * Default implementation of GraphPersistenceStrategy.
@@ -100,8 +95,8 @@ public class DefaultGraphPersistenceStrategy implements GraphPersistenceStrategi
     }
 
     @Override
-    public List<String> traitNames(AtlasVertex AtlasVertex) {
-        return GraphHelper.getTraitNames(AtlasVertex);
+    public List<String> traitNames(TitanVertex vertex) {
+        return GraphHelper.getTraitNames(vertex);
     }
 
     @Override
@@ -110,7 +105,7 @@ public class DefaultGraphPersistenceStrategy implements GraphPersistenceStrategi
     }
 
     @Override
-    public Id getIdFromVertex(String dataTypeName, AtlasVertex vertex) {
+    public Id getIdFromVertex(String dataTypeName, TitanVertex vertex) {
         return GraphHelper.getIdFromVertex(dataTypeName, vertex);
     }
 
@@ -138,19 +133,16 @@ public class DefaultGraphPersistenceStrategy implements GraphPersistenceStrategi
                 break;
 
             case STRUCT:
-                AtlasVertex structVertex = (AtlasVertex) value;
+                TitanVertex structVertex = (TitanVertex) value;
                 StructType structType = (StructType) dataType;
                 ITypedStruct structInstance = structType.createInstance();
 
                 TypeSystem.IdType idType = TypeSystem.getInstance().getIdType();
 
                 if (dataType.getName().equals(idType.getName())) {
-                    structInstance.set(idType.typeNameAttrName(), GraphHelper.getSingleValuedProperty(structVertex, typeAttributeName(), String.class));
-                    structInstance.set(idType.idAttrName(), GraphHelper.getSingleValuedProperty(structVertex, idAttributeName(), String.class));
-                    String stateValue = GraphHelper.getSingleValuedProperty(structVertex, stateAttributeName(), String.class);
-                    if (stateValue != null) {
-                        structInstance.set(idType.stateAttrName(), stateValue);
-                    }
+                    structInstance.set(idType.typeNameAttrName(), structVertex.getProperty(typeAttributeName()));
+                    structInstance.set(idType.idAttrName(), structVertex.getProperty(idAttributeName()));
+
                 } else {
                     metadataRepository.getGraphToInstanceMapper()
                         .mapVertexToInstance(structVertex, structInstance, structType.fieldMapping().fields);
@@ -158,7 +150,7 @@ public class DefaultGraphPersistenceStrategy implements GraphPersistenceStrategi
                 return dataType.convert(structInstance, Multiplicity.OPTIONAL);
 
             case TRAIT:
-                AtlasVertex traitVertex = (AtlasVertex) value;
+                TitanVertex traitVertex = (TitanVertex) value;
                 TraitType traitType = (TraitType) dataType;
                 ITypedStruct traitInstance = traitType.createInstance();
                 // todo - this is not right, we should load the Instance associated with this
@@ -170,9 +162,9 @@ public class DefaultGraphPersistenceStrategy implements GraphPersistenceStrategi
                 break;
 
             case CLASS:
-                AtlasVertex classVertex = (AtlasVertex) value;
+                TitanVertex classVertex = (TitanVertex) value;
                 ITypedReferenceableInstance classInstance = metadataRepository.getGraphToInstanceMapper()
-                    .mapGraphToTypedInstance(GraphHelper.getSingleValuedProperty(classVertex, Constants.GUID_PROPERTY_KEY, String.class),
+                    .mapGraphToTypedInstance(classVertex.<String>getProperty(Constants.GUID_PROPERTY_KEY),
                         classVertex);
                 return dataType.convert(classInstance, Multiplicity.OPTIONAL);
 
@@ -215,11 +207,6 @@ public class DefaultGraphPersistenceStrategy implements GraphPersistenceStrategi
     public String gremlinCompOp(Expressions.ComparisonExpression op) {
         return GraphPersistenceStrategies$class.gremlinCompOp(this, op);
     }
-    
-    @Override
-    public String gremlinPrimitiveOp(Expressions.ComparisonExpression op) {
-        return GraphPersistenceStrategies$class.gremlinPrimitiveOp(this, op);
-    }
 
     @Override
     public String loopObjectExpression(IDataType<?> dataType) {
@@ -241,11 +228,6 @@ public class DefaultGraphPersistenceStrategy implements GraphPersistenceStrategi
         return metadataRepository.getIdAttributeName();
     }
 
-    @Override
-    public String stateAttributeName() {
-        return metadataRepository.getStateAttributeName();
-    }
-
     @Override
     public scala.collection.Seq<String> typeTestExpression(String typeName, IntSequence intSeq) {
         return GraphPersistenceStrategies$class.typeTestExpression(this, typeName, intSeq);
@@ -260,30 +242,5 @@ public class DefaultGraphPersistenceStrategy implements GraphPersistenceStrategi
     public boolean addGraphVertexPrefix(scala.collection.Traversable<String> preStatements) {
         return GraphPersistenceStrategies$class.addGraphVertexPrefix(this, preStatements);
     }
-    
-    @Override
-    public GremlinVersion getSupportedGremlinVersion() {
-        return GraphPersistenceStrategies$class.getSupportedGremlinVersion(this);
-    }
-
-    @Override
-    public String generatePersisentToLogicalConversionExpression(String expr, IDataType<?> t) {
-        return GraphPersistenceStrategies$class.generatePersisentToLogicalConversionExpression(this,expr, t);
-    }
-
-    @Override
-    public String initialQueryCondition() {
-        return GraphPersistenceStrategies$class.initialQueryCondition(this);
-    }
-
-    @Override
-    public boolean isPropertyValueConversionNeeded(IDataType<?> t) {
-        return GraphPersistenceStrategies$class.isPropertyValueConversionNeeded(this, t);
-    }
-
-    @Override
-    public AtlasGraph getGraph() throws RepositoryException {
-        return metadataRepository.getGraph();
-    }
 
 }