diff --git a/artemis-commons/src/main/java/org/apache/activemq/artemis/core/server/ActiveMQScheduledComponent.java b/artemis-commons/src/main/java/org/apache/activemq/artemis/core/server/ActiveMQScheduledComponent.java
index 2ccea9feb6..d891dd5e5d 100644
--- a/artemis-commons/src/main/java/org/apache/activemq/artemis/core/server/ActiveMQScheduledComponent.java
+++ b/artemis-commons/src/main/java/org/apache/activemq/artemis/core/server/ActiveMQScheduledComponent.java
@@ -37,8 +37,6 @@ public abstract class ActiveMQScheduledComponent implements ActiveMQComponent, R
    private static final Logger logger = Logger.getLogger(ActiveMQScheduledComponent.class);
    private ScheduledExecutorService scheduledExecutorService;
    private boolean startedOwnScheduler;
-
-   /** initialDelay < 0 would mean no initial delay, use the period instead */
    private long initialDelay;
    private long period;
    private long millisecondsPeriod;
@@ -75,28 +73,6 @@ public abstract class ActiveMQScheduledComponent implements ActiveMQComponent, R
       this.onDemand = onDemand;
    }
 
-   /**
-    * It creates a scheduled component that can trigger {@link #run()} with a fixed {@code checkPeriod} on a configured {@code executor}.
-    *
-    * @param scheduledExecutorService the {@link ScheduledExecutorService} that periodically trigger {@link #run()} on the configured {@code executor}
-    * @param initialDelay             the time to delay first execution
-    * @param checkPeriod              the delay between the termination of one execution and the start of the next
-    * @param timeUnit                 the time unit of the {@code initialDelay} and {@code checkPeriod} parameters
-    * @param onDemand                 if {@code true} the task won't be scheduled on {@link #start()}, {@code false} otherwise
-    */
-   public ActiveMQScheduledComponent(ScheduledExecutorService scheduledExecutorService,
-                                     long initialDelay,
-                                     long checkPeriod,
-                                     TimeUnit timeUnit,
-                                     boolean onDemand) {
-      this.executor = null;
-      this.scheduledExecutorService = scheduledExecutorService;
-      this.initialDelay = initialDelay;
-      this.period = checkPeriod;
-      this.timeUnit = timeUnit;
-      this.onDemand = onDemand;
-   }
-
    /**
     * It creates a scheduled component that can trigger {@link #run()} with a fixed {@code checkPeriod} on a configured {@code executor}.
     *
@@ -114,7 +90,7 @@ public abstract class ActiveMQScheduledComponent implements ActiveMQComponent, R
                                      long checkPeriod,
                                      TimeUnit timeUnit,
                                      boolean onDemand) {
-      this(scheduledExecutorService, executor, -1, checkPeriod, timeUnit, onDemand);
+      this(scheduledExecutorService, executor, checkPeriod, checkPeriod, timeUnit, onDemand);
    }
 
    /**
@@ -168,7 +144,7 @@ public abstract class ActiveMQScheduledComponent implements ActiveMQComponent, R
       this.millisecondsPeriod = timeUnit.convert(period, TimeUnit.MILLISECONDS);
 
       if (period >= 0) {
-         future = scheduledExecutorService.scheduleWithFixedDelay(runForScheduler, initialDelay >= 0 ? initialDelay : period, period, timeUnit);
+         future = scheduledExecutorService.scheduleWithFixedDelay(runForScheduler, initialDelay, period, timeUnit);
       } else {
          logger.tracef("did not start scheduled executor on %s because period was configured as %d", this, period);
       }
@@ -210,13 +186,6 @@ public abstract class ActiveMQScheduledComponent implements ActiveMQComponent, R
       return this;
    }
 
-   public synchronized ActiveMQScheduledComponent setPeriod(long period, TimeUnit unit) {
-      this.period = period;
-      this.timeUnit = unit;
-      restartIfNeeded();
-      return this;
-   }
-
    public long getInitialDelay() {
       return initialDelay;
    }