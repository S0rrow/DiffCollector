diff --git a/archiva-base/archiva-converter/src/main/java/org/apache/maven/archiva/converter/legacy/LegacyConverterArtifactConsumer.java b/archiva-base/archiva-converter/src/main/java/org/apache/maven/archiva/converter/legacy/LegacyConverterArtifactConsumer.java
index 6194ff50c..03e9d47d0 100644
--- a/archiva-base/archiva-converter/src/main/java/org/apache/maven/archiva/converter/legacy/LegacyConverterArtifactConsumer.java
+++ b/archiva-base/archiva-converter/src/main/java/org/apache/maven/archiva/converter/legacy/LegacyConverterArtifactConsumer.java
@@ -19,22 +19,14 @@
  * under the License.
  */
 
-import org.apache.maven.archiva.consumers.AbstractMonitoredConsumer;
-import org.apache.maven.archiva.consumers.ConsumerException;
-import org.apache.maven.archiva.consumers.RepositoryContentConsumer;
-import org.apache.maven.archiva.model.ArchivaRepository;
-import org.apache.maven.archiva.model.ArtifactReference;
-import org.apache.maven.archiva.repository.layout.BidirectionalRepositoryLayout;
-import org.apache.maven.archiva.repository.layout.LayoutException;
+import org.apache.maven.archiva.common.utils.BaseFile;
+import org.apache.maven.archiva.consumers.GenericArtifactConsumer;
+import org.apache.maven.archiva.converter.ConversionListener;
+import org.apache.maven.archiva.converter.RepositoryConversionException;
+import org.apache.maven.archiva.converter.RepositoryConverter;
 import org.apache.maven.artifact.Artifact;
-import org.apache.maven.artifact.converter.ArtifactConversionException;
-import org.apache.maven.artifact.converter.ArtifactConverter;
-import org.apache.maven.artifact.factory.ArtifactFactory;
 import org.apache.maven.artifact.repository.ArtifactRepository;
 
-import java.util.ArrayList;
-import java.util.List;
-
 /**
  * LegacyConverterArtifactConsumer - convert artifacts as they are found
  * into the destination repository. 
@@ -42,117 +34,72 @@
  * @author <a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>
  * @version $Id$
  * 
- * @plexus.component role="org.apache.maven.archiva.consumers.RepositoryContentConsumer"
- *     role-hint="artifact-legacy-to-default-converter"
+ * @plexus.component role="org.apache.maven.archiva.common.consumers.Consumers"
+ *     role-hint="legacy-converter"
  *     instantiation-strategy="per-lookup"
  */
 public class LegacyConverterArtifactConsumer
-    extends AbstractMonitoredConsumer
-    implements RepositoryContentConsumer
+    extends GenericArtifactConsumer
 {
-    /**
-     * @plexus.requirement role-hint="legacy-to-default"
-     */
-    private ArtifactConverter artifactConverter;
-
     /**
      * @plexus.requirement
      */
-    private ArtifactFactory artifactFactory;
-
-    /**
-     * @plexus.requirement role-hint="legacy"
-     */
-    private BidirectionalRepositoryLayout bidirectionalLayout;
+    private RepositoryConverter repositoryConverter;
 
     private ArtifactRepository destinationRepository;
 
-    private List includes;
-
-    private List excludes;
-
-    public LegacyConverterArtifactConsumer()
-    {
-        includes = new ArrayList();
-        includes.add( "**/*.jar" );
-        includes.add( "**/*.ear" );
-        includes.add( "**/*.war" );
-    }
-
-    public void beginScan( ArchivaRepository repository )
-        throws ConsumerException
-    {
-
-    }
-
-    public void completeScan()
-    {
-
-    }
-
-    public List getExcludes()
-    {
-        return excludes;
-    }
-
-    public List getIncludes()
-    {
-        return includes;
-    }
-
-    public void processFile( String path )
-        throws ConsumerException
+    public void processArtifact( Artifact artifact, BaseFile file )
     {
         try
         {
-            ArtifactReference reference = bidirectionalLayout.toArtifactReference( path );
-            Artifact artifact = artifactFactory.createArtifact( reference.getGroupId(), reference.getArtifactId(),
-                                                                reference.getVersion(), reference.getClassifier(),
-                                                                reference.getType() );
-            artifactConverter.convert( artifact, destinationRepository );
+            repositoryConverter.convert( artifact, destinationRepository );
         }
-        catch ( LayoutException e )
+        catch ( RepositoryConversionException e )
         {
-            getLogger().warn( "Unable to convert artifact: " + path + " : " + e.getMessage(), e );
-        }
-        catch ( ArtifactConversionException e )
-        {
-            getLogger().warn( "Unable to convert artifact: " + path + " : " + e.getMessage(), e );
+            getLogger().error(
+                               "Unable to convert artifact " + artifact + " to destination repository "
+                                   + destinationRepository, e );
         }
     }
 
-    public String getDescription()
+    public void processFileProblem( BaseFile path, String message )
     {
-        return "Legacy Artifact to Default Artifact Converter";
+        getLogger().error( "Artifact Build Failure on " + path + " : " + message );
+        // TODO: report this to the ConversionListener?
     }
 
-    public String getId()
+    public ArtifactRepository getDestinationRepository()
     {
-        return "artifact-legacy-to-default-converter";
+        return destinationRepository;
     }
 
-    public boolean isPermanent()
+    public void setDestinationRepository( ArtifactRepository destinationRepository )
     {
-        return false;
+        this.destinationRepository = destinationRepository;
     }
-
-    public void setExcludes( List excludes )
+    
+    public String getName()
     {
-        this.excludes = excludes;
+        return "Legacy Artifact Converter Consumer";
     }
-
-    public void setIncludes( List includes )
-    {
-        this.includes = includes;
-    }
-
-    public ArtifactRepository getDestinationRepository()
+    
+    /**
+     * Add a listener to the conversion process.
+     * 
+     * @param listener the listener to add.
+     */
+    public void addConversionListener( ConversionListener listener )
     {
-        return destinationRepository;
+        repositoryConverter.addConversionListener( listener );
     }
 
-    public void setDestinationRepository( ArtifactRepository destinationRepository )
+    /**
+     * Remove a listener from the conversion process.
+     * 
+     * @param listener the listener to remove.
+     */
+    public void removeConversionListener( ConversionListener listener )
     {
-        this.destinationRepository = destinationRepository;
-    }
+        repositoryConverter.removeConversionListener( listener );
+    }    
 }