diff --git a/jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentImpl.java b/jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentImpl.java
index 0861a47b1..32cc18d52 100644
--- a/jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentImpl.java
+++ b/jmx/jmx-core/src/main/java/org/apache/aries/jmx/agent/JMXAgentImpl.java
@@ -16,11 +16,11 @@
  */
 package org.apache.aries.jmx.agent;
 
-import java.util.HashMap;
-import java.util.Map;
+import java.util.HashSet;
+import java.util.Set;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
-import java.util.concurrent.TimeUnit;
+
 import javax.management.InstanceAlreadyExistsException;
 import javax.management.InstanceNotFoundException;
 import javax.management.MBeanRegistrationException;
@@ -39,7 +39,6 @@ import org.apache.aries.jmx.framework.BundleStateMBeanHandler;
 import org.apache.aries.jmx.framework.FrameworkMBeanHandler;
 import org.apache.aries.jmx.framework.PackageStateMBeanHandler;
 import org.apache.aries.jmx.framework.ServiceStateMBeanHandler;
-import org.apache.aries.jmx.framework.wiring.BundleWiringStateMBeanHandler;
 import org.apache.aries.jmx.permissionadmin.PermissionAdminMBeanHandler;
 import org.apache.aries.jmx.provisioning.ProvisioningServiceMBeanHandler;
 import org.apache.aries.jmx.useradmin.UserAdminMBeanHandler;
@@ -51,9 +50,9 @@ import org.osgi.util.tracker.ServiceTracker;
  * <p>
  * Represent agent for MBeanServers registered in ServiceRegistry. Providing registration and unregistration methods.
  * </p>
- *
+ * 
  * @see JMXAgent
- *
+ * 
  * @version $Rev$ $Date$
  */
 public class JMXAgentImpl implements JMXAgent {
@@ -62,7 +61,7 @@ public class JMXAgentImpl implements JMXAgent {
     /**
      * {@link MBeanHandler} store.
      */
-    private Map<MBeanHandler, Boolean> mbeansHandlers;
+    private Set<MBeanHandler> mbeansHandlers;
     private JMXAgentContext agentContext;
     private Logger logger;
 
@@ -73,48 +72,45 @@ public class JMXAgentImpl implements JMXAgent {
 
     /**
      * Constructs new JMXAgent.
-     *
+     * 
      * @param logger @see org.apache.aries.jmx.Logger
      */
     public JMXAgentImpl(Logger logger) {
         this.logger = logger;
-        this.mbeansHandlers = new HashMap<MBeanHandler, Boolean>();
+        this.mbeansHandlers = new HashSet<MBeanHandler>();
         this.registrationExecutor = Executors.newSingleThreadExecutor(new JMXThreadFactory("JMX OSGi Agent"));
     }
 
     /**
      * @see org.apache.aries.jmx.agent.JMXAgent#start()
      */
-    public synchronized void start() {
+    public void start() {
         logger.log(LogService.LOG_INFO, "Starting JMX OSGi agent");
         BundleContext bc = agentContext.getBundleContext();
         MBeanHandler frameworkHandler = new FrameworkMBeanHandler(bc, logger);
-        mbeansHandlers.put(frameworkHandler, Boolean.FALSE);
         frameworkHandler.open();
+        mbeansHandlers.add(frameworkHandler);
         MBeanHandler bundleStateHandler = new BundleStateMBeanHandler(bc, logger);
-        mbeansHandlers.put(bundleStateHandler, Boolean.FALSE);
         bundleStateHandler.open();
-        MBeanHandler revisionsStateHandler = new BundleWiringStateMBeanHandler(bc, logger);
-        mbeansHandlers.put(revisionsStateHandler, Boolean.FALSE);
-        revisionsStateHandler.open();
+        mbeansHandlers.add(bundleStateHandler);
         MBeanHandler serviceStateHandler = new ServiceStateMBeanHandler(bc, logger);
-        mbeansHandlers.put(serviceStateHandler, Boolean.FALSE);
         serviceStateHandler.open();
+        mbeansHandlers.add(serviceStateHandler);
         MBeanHandler packageStateHandler = new PackageStateMBeanHandler(bc, logger);
-        mbeansHandlers.put(packageStateHandler, Boolean.FALSE);
         packageStateHandler.open();
+        mbeansHandlers.add(packageStateHandler);
         MBeanHandler permissionAdminHandler = new PermissionAdminMBeanHandler(agentContext);
-        mbeansHandlers.put(permissionAdminHandler, Boolean.FALSE);
         permissionAdminHandler.open();
+        mbeansHandlers.add(permissionAdminHandler);
         MBeanHandler userAdminHandler = new UserAdminMBeanHandler(agentContext);
-        mbeansHandlers.put(userAdminHandler, Boolean.FALSE);
         userAdminHandler.open();
+        mbeansHandlers.add(userAdminHandler);
         MBeanHandler configAdminHandler = new ConfigurationAdminMBeanHandler(agentContext);
-        mbeansHandlers.put(configAdminHandler, Boolean.FALSE);
         configAdminHandler.open();
+        mbeansHandlers.add(configAdminHandler);
         MBeanHandler provServiceHandler = new ProvisioningServiceMBeanHandler(agentContext);
-        mbeansHandlers.put(provServiceHandler, Boolean.FALSE);
         provServiceHandler.open();
+        mbeansHandlers.add(provServiceHandler);
         mbeanServiceTracker = new MBeanServiceTracker(agentContext);
         mbeanServiceTracker.open();
     }
@@ -122,69 +118,69 @@ public class JMXAgentImpl implements JMXAgent {
     /**
      * @see org.apache.aries.jmx.agent.JMXAgent#registerMBeans(javax.management.MBeanServer)
      */
-    public synchronized void registerMBeans(final MBeanServer server) {
-        for (MBeanHandler mbeanHandler : mbeansHandlers.keySet()) {
-            if (mbeansHandlers.get(mbeanHandler) == Boolean.FALSE) {
-                String name = mbeanHandler.getName();
-                StandardMBean mbean = mbeanHandler.getMbean();
-                if (mbean != null) {
-                    try {
-                        logger.log(LogService.LOG_INFO, "Registering " + mbean.getMBeanInterface().getName()
-                                + " to MBeanServer " + server + " with name " + name);
-                        server.registerMBean(mbean, new ObjectName(name));
-                        mbeansHandlers.put(mbeanHandler, Boolean.TRUE);
-                    } catch (InstanceAlreadyExistsException e) {
-                        logger.log(LogService.LOG_ERROR, "MBean is already registered", e);
-                    } catch (MBeanRegistrationException e) {
-                        logger.log(LogService.LOG_ERROR, "Can't register MBean", e);
-                    } catch (NotCompliantMBeanException e) {
-                        logger.log(LogService.LOG_ERROR, "MBean is not compliant MBean", e);
-                    } catch (MalformedObjectNameException e) {
-                        logger.log(LogService.LOG_ERROR, "Try to register with no valid objectname", e);
-                    } catch (NullPointerException e) {
-                        logger.log(LogService.LOG_ERROR, "Name of objectname can't be null", e);
-                    }
+    public void registerMBeans(final MBeanServer server) {
+        for (MBeanHandler mbeanHandler : mbeansHandlers) {
+            String name = mbeanHandler.getName();
+            StandardMBean mbean = mbeanHandler.getMbean();
+            if (mbean != null) {
+                try {
+                    logger.log(LogService.LOG_INFO, "Registering " + mbean.getMBeanInterface().getName()
+                            + " to MBeanServer " + server + " with name " + name);
+                    server.registerMBean(mbean, new ObjectName(name));
+                } catch (InstanceAlreadyExistsException e) {
+                    logger.log(LogService.LOG_ERROR, "MBean is already registered", e);
+                } catch (MBeanRegistrationException e) {
+                    logger.log(LogService.LOG_ERROR, "Can't register MBean", e);
+                } catch (NotCompliantMBeanException e) {
+                    logger.log(LogService.LOG_ERROR, "MBean is not compliant MBean", e);
+                } catch (MalformedObjectNameException e) {
+                    logger.log(LogService.LOG_ERROR, "Try to register with no valid objectname", e);
+                } catch (NullPointerException e) {
+                    logger.log(LogService.LOG_ERROR, "Name of objectname can't be null", e);
                 }
             }
         }
+
     }
 
     /**
      * @see org.apache.aries.jmx.agent.JMXAgent#unregisterMBeans(javax.management.MBeanServer)
      */
-    public synchronized void unregisterMBeans(final MBeanServer server) {
-        for (MBeanHandler mBeanHandler : mbeansHandlers.keySet()) {
-            if (mbeansHandlers.get(mBeanHandler) == Boolean.TRUE) {
-                try
-                {
-                   String name = mBeanHandler.getName();
-                   StandardMBean mbean = mBeanHandler.getMbean();
-                   if (mbean != null) {
-                       logger.log(LogService.LOG_INFO, "Unregistering " + mbean.getMBeanInterface().getName()
-                             + " to MBeanServer " + server + " with name " + name);
-                       server.unregisterMBean(new ObjectName(name));
-                       mbeansHandlers.put(mBeanHandler, Boolean.FALSE);
-                   }
-                } catch (MBeanRegistrationException e) {
-                   logger.log(LogService.LOG_ERROR, "Can't unregister MBean", e);
-                } catch (InstanceNotFoundException e) {
-                   logger.log(LogService.LOG_ERROR, "MBean doesn't exist in the repository", e);
-                } catch (MalformedObjectNameException e) {
-                   logger.log(LogService.LOG_ERROR, "Try to unregister with no valid objectname", e);
-                } catch (NullPointerException e) {
-                   logger.log(LogService.LOG_ERROR, "Name of objectname can't be null ", e);
-                } catch (Exception e) {
-                   logger.log(LogService.LOG_ERROR, "Cannot unregister MBean: " + mBeanHandler, e);
-                }
-            }
+    public void unregisterMBeans(final MBeanServer server) {
+        for (MBeanHandler mBeanHandler : mbeansHandlers) {
+            try
+            {
+               String name = mBeanHandler.getName();
+               StandardMBean mbean = mBeanHandler.getMbean();
+               if (mbean != null) {
+                   logger.log(LogService.LOG_INFO, "Unregistering " + mbean.getMBeanInterface().getName()
+                         + " to MBeanServer " + server + " with name " + name);
+                   server.unregisterMBean(new ObjectName(name));
+               }
+            } catch (MBeanRegistrationException e) {
+               logger.log(LogService.LOG_ERROR, "Can't unregister MBean", e);
+            } catch (InstanceNotFoundException e) {
+               logger.log(LogService.LOG_ERROR, "Mbena doesn't exist in the repository", e);
+            } catch (MalformedObjectNameException e) {
+               logger.log(LogService.LOG_ERROR, "Try to unregister with no valid objectname", e);
+            } catch (NullPointerException e) {
+               logger.log(LogService.LOG_ERROR, "Name of objectname can't be null ", e);
+            } catch (Exception e) {
+               logger.log(LogService.LOG_ERROR, "Cannot unregister MBean: " + mBeanHandler, e);
+            } 
         }
     }
 
     /**
      * @see org.apache.aries.jmx.agent.JMXAgent#registerMBean(org.apache.aries.jmx.MBeanHandler)
      */
-    public synchronized void registerMBean(final MBeanHandler mBeanHandler) {
+    public void registerMBean(final MBeanHandler mBeanHandler) {
         Object[] servers = getMBeanServers();
+        if (servers == null) {
+            logger.log(LogService.LOG_WARNING, "There are no MBean servers registred, can't register MBeans");
+            return;
+        }
+
         for (Object server : servers) {
             String name = mBeanHandler.getName();
             StandardMBean mbean = mBeanHandler.getMbean();
@@ -193,7 +189,6 @@ public class JMXAgentImpl implements JMXAgent {
                         + " to MBeanServer " + server + " with name " + name);
                 ((MBeanServer) server).registerMBean(mbean, new ObjectName(name));
 
-                mbeansHandlers.put(mBeanHandler, Boolean.TRUE);
             } catch (InstanceAlreadyExistsException e) {
                 logger.log(LogService.LOG_ERROR, "MBean is already registered", e);
             } catch (MBeanRegistrationException e) {
@@ -209,41 +204,16 @@ public class JMXAgentImpl implements JMXAgent {
                 return;
             }
         }
-    }
 
-    /**
-     * @see org.apache.aries.jmx.agent.JMXAgent#unregisterMBean(org.apache.aries.jmx.MBeanHandler)
-     */
-    public synchronized void unregisterMBean(final MBeanHandler mBeanHandler) {
-        Object[] servers = getMBeanServers();
-        for (Object server : servers) {
-            String name = mBeanHandler.getName();
-            try {
-                logger.log(LogService.LOG_INFO, "Unregistering mbean " + " to MBeanServer " + server + " with name "
-                        + name);
-                ((MBeanServer) server).unregisterMBean(new ObjectName(name));
-                mbeansHandlers.put(mBeanHandler, Boolean.FALSE);
-            } catch (MBeanRegistrationException e) {
-                logger.log(LogService.LOG_ERROR, "Can't register MBean", e);
-            } catch (InstanceNotFoundException e) {
-                logger.log(LogService.LOG_ERROR, "MBean doesn't exist in the repository", e);
-            } catch (MalformedObjectNameException e) {
-                logger.log(LogService.LOG_ERROR, "Try to register with no valid objectname, Stopping registration", e);
-                return;
-            } catch (NullPointerException e) {
-                logger.log(LogService.LOG_ERROR, "Name of objectname can't be null, Stopping registration", e);
-                return;
-            }
-
-        }
     }
 
     /**
      * @see org.apache.aries.jmx.agent.JMXAgent#unregisterMBean(java.lang.String)
      */
-    public synchronized void unregisterMBean(final String name) {
+    public void unregisterMBean(final String name) {
         Object[] servers = getMBeanServers();
         for (Object server : servers) {
+
             try {
                 logger.log(LogService.LOG_INFO, "Unregistering mbean " + " to MBeanServer " + server + " with name "
                         + name);
@@ -251,7 +221,7 @@ public class JMXAgentImpl implements JMXAgent {
             } catch (MBeanRegistrationException e) {
                 logger.log(LogService.LOG_ERROR, "Can't register MBean", e);
             } catch (InstanceNotFoundException e) {
-                logger.log(LogService.LOG_ERROR, "MBean doesn't exist in the repository", e);
+                logger.log(LogService.LOG_ERROR, "Mbena doesn't exist in the repository", e);
             } catch (MalformedObjectNameException e) {
                 logger.log(LogService.LOG_ERROR, "Try to register with no valid objectname, Stopping registration", e);
                 return;
@@ -259,6 +229,7 @@ public class JMXAgentImpl implements JMXAgent {
                 logger.log(LogService.LOG_ERROR, "Name of objectname can't be null, Stopping registration", e);
                 return;
             }
+
         }
     }
 
@@ -267,19 +238,12 @@ public class JMXAgentImpl implements JMXAgent {
      */
     public void stop() {
         logger.log(LogService.LOG_INFO, "Stopping JMX OSGi agent");
-        synchronized (this) {
-            mbeanServiceTracker.close();
-            for (MBeanHandler mBeanHandler : mbeansHandlers.keySet()) {
-                mBeanHandler.close();
-            }
+        mbeanServiceTracker.close();
+        for (MBeanHandler mBeanHandler : mbeansHandlers) {
+            mBeanHandler.close();
         }
         if (registrationExecutor != null && !registrationExecutor.isShutdown()) {
             registrationExecutor.shutdown();
-            try {
-                registrationExecutor.awaitTermination(5 * 60, TimeUnit.SECONDS);
-            } catch (InterruptedException e) {
-                logger.log(LogService.LOG_WARNING, "Interrupted while waiting for executor shutdown", e);
-            }
         }
     }
 
@@ -299,12 +263,11 @@ public class JMXAgentImpl implements JMXAgent {
 
     /**
      * Gets all MBeanServers from MBeanServiceTracker.
-     *
+     * 
      * @return array of MBean servers.
      */
     private Object[] getMBeanServers() {
-        Object[] servers = mbeanServiceTracker.getServices();
-        return servers != null ? servers : new Object[0];
+        return mbeanServiceTracker.getServices();
     }
 
     /**