diff --git a/src/core/src/main/java/org/apache/accumulo/core/client/mapreduce/AccumuloOutputFormat.java b/src/core/src/main/java/org/apache/accumulo/core/client/mapreduce/AccumuloOutputFormat.java
index 6daa10a0a1..02cac78b9b 100644
--- a/src/core/src/main/java/org/apache/accumulo/core/client/mapreduce/AccumuloOutputFormat.java
+++ b/src/core/src/main/java/org/apache/accumulo/core/client/mapreduce/AccumuloOutputFormat.java
@@ -30,7 +30,6 @@ import org.apache.accumulo.core.client.MutationsRejectedException;
 import org.apache.accumulo.core.client.TableExistsException;
 import org.apache.accumulo.core.client.TableNotFoundException;
 import org.apache.accumulo.core.client.ZooKeeperInstance;
-import org.apache.accumulo.core.client.mock.MockInstance;
 import org.apache.accumulo.core.data.ColumnUpdate;
 import org.apache.accumulo.core.data.KeyExtent;
 import org.apache.accumulo.core.data.Mutation;
@@ -73,7 +72,6 @@ public class AccumuloOutputFormat extends OutputFormat<Text,Mutation> {
   
   private static final String INSTANCE_NAME = PREFIX + ".instanceName";
   private static final String ZOOKEEPERS = PREFIX + ".zooKeepers";
-  private static final String MOCK = ".useMockInstance";
   
   private static final String CREATETABLES = PREFIX + ".createtables";
   private static final String LOGLEVEL = PREFIX + ".loglevel";
@@ -104,22 +102,19 @@ public class AccumuloOutputFormat extends OutputFormat<Text,Mutation> {
    */
   public static void setOutputInfo(JobContext job, String user, byte[] passwd, boolean createTables, String defaultTable) {
     Configuration conf = job.getConfiguration();
-    if (conf.getBoolean(OUTPUT_INFO_HAS_BEEN_SET, false))
-      throw new IllegalStateException("Output info can only be set once per job");
+    if (conf.getBoolean(OUTPUT_INFO_HAS_BEEN_SET, false)) throw new IllegalStateException("Output info can only be set once per job");
     conf.setBoolean(OUTPUT_INFO_HAS_BEEN_SET, true);
     
     ArgumentChecker.notNull(user, passwd);
     conf.set(USERNAME, user);
     conf.set(PASSWORD, new String(Base64.encodeBase64(passwd)));
     conf.setBoolean(CREATETABLES, createTables);
-    if (defaultTable != null)
-      conf.set(DEFAULT_TABLE_NAME, defaultTable);
+    if (defaultTable != null) conf.set(DEFAULT_TABLE_NAME, defaultTable);
   }
   
   public static void setZooKeeperInstance(JobContext job, String instanceName, String zooKeepers) {
     Configuration conf = job.getConfiguration();
-    if (conf.getBoolean(INSTANCE_HAS_BEEN_SET, false))
-      throw new IllegalStateException("Instance info can only be set once per job");
+    if (conf.getBoolean(INSTANCE_HAS_BEEN_SET, false)) throw new IllegalStateException("Instance info can only be set once per job");
     conf.setBoolean(INSTANCE_HAS_BEEN_SET, true);
     
     ArgumentChecker.notNull(instanceName, zooKeepers);
@@ -127,13 +122,6 @@ public class AccumuloOutputFormat extends OutputFormat<Text,Mutation> {
     conf.set(ZOOKEEPERS, zooKeepers);
   }
   
-  public static void setMockInstance(JobContext job, String instanceName) {
-    Configuration conf = job.getConfiguration();
-    conf.setBoolean(INSTANCE_HAS_BEEN_SET, true);
-    conf.setBoolean(MOCK, true);
-    conf.set(INSTANCE_NAME, instanceName);
-  }
-  
   public static void setMaxMutationBufferSize(JobContext job, long numberOfBytes) {
     job.getConfiguration().setLong(MAX_MUTATION_BUFFER_SIZE, numberOfBytes);
   }
@@ -177,8 +165,6 @@ public class AccumuloOutputFormat extends OutputFormat<Text,Mutation> {
   
   protected static Instance getInstance(JobContext job) {
     Configuration conf = job.getConfiguration();
-    if (conf.getBoolean(MOCK, false))
-      return new MockInstance(conf.get(INSTANCE_NAME));
     return new ZooKeeperInstance(conf.get(INSTANCE_NAME), conf.get(ZOOKEEPERS));
   }
   
@@ -195,8 +181,7 @@ public class AccumuloOutputFormat extends OutputFormat<Text,Mutation> {
   }
   
   protected static Level getLogLevel(JobContext job) {
-    if (job.getConfiguration().get(LOGLEVEL) != null)
-      return Level.toLevel(job.getConfiguration().getInt(LOGLEVEL, Level.INFO.toInt()));
+    if (job.getConfiguration().get(LOGLEVEL) != null) return Level.toLevel(job.getConfiguration().getInt(LOGLEVEL, Level.INFO.toInt()));
     return null;
   }
   
@@ -219,13 +204,11 @@ public class AccumuloOutputFormat extends OutputFormat<Text,Mutation> {
     
     AccumuloRecordWriter(TaskAttemptContext attempt) throws AccumuloException, AccumuloSecurityException {
       Level l = getLogLevel(attempt);
-      if (l != null)
-        log.setLevel(getLogLevel(attempt));
+      if (l != null) log.setLevel(getLogLevel(attempt));
       this.simulate = getSimulationMode(attempt);
       this.createTables = canCreateTables(attempt);
       
-      if (simulate)
-        log.info("Simulating output only. No writes to tables will occur");
+      if (simulate) log.info("Simulating output only. No writes to tables will occur");
       
       this.bws = new HashMap<Text,BatchWriter>();
       
@@ -244,26 +227,22 @@ public class AccumuloOutputFormat extends OutputFormat<Text,Mutation> {
      */
     @Override
     public void write(Text table, Mutation mutation) throws IOException {
-      if (table == null || table.toString().isEmpty())
-        table = this.defaultTableName;
+      if (table == null || table.toString().isEmpty()) table = this.defaultTableName;
       
-      if (!simulate && table == null)
-        throw new IOException("No table or default table specified. Try simulation mode next time");
+      if (!simulate && table == null) throw new IOException("No table or default table specified. Try simulation mode next time");
       
       ++mutCount;
       valCount += mutation.size();
       printMutation(table, mutation);
       
-      if (simulate)
-        return;
+      if (simulate) return;
       
-      if (!bws.containsKey(table))
-        try {
-          addTable(table);
-        } catch (Exception e) {
-          e.printStackTrace();
-          throw new IOException(e);
-        }
+      if (!bws.containsKey(table)) try {
+        addTable(table);
+      } catch (Exception e) {
+        e.printStackTrace();
+        throw new IOException(e);
+      }
       
       try {
         bws.get(table).addMutation(mutation);
@@ -304,8 +283,7 @@ public class AccumuloOutputFormat extends OutputFormat<Text,Mutation> {
         throw e;
       }
       
-      if (bw != null)
-        bws.put(tableName, bw);
+      if (bw != null) bws.put(tableName, bw);
     }
     
     private int printMutation(Text table, Mutation m) {
@@ -323,10 +301,8 @@ public class AccumuloOutputFormat extends OutputFormat<Text,Mutation> {
     private String hexDump(byte[] ba) {
       StringBuilder sb = new StringBuilder();
       for (byte b : ba) {
-        if ((b > 0x20) && (b < 0x7e))
-          sb.append((char) b);
-        else
-          sb.append(String.format("x%02x", b));
+        if ((b > 0x20) && (b < 0x7e)) sb.append((char) b);
+        else sb.append(String.format("x%02x", b));
       }
       return sb.toString();
     }
@@ -334,8 +310,7 @@ public class AccumuloOutputFormat extends OutputFormat<Text,Mutation> {
     @Override
     public void close(TaskAttemptContext attempt) throws IOException, InterruptedException {
       log.debug("mutations written: " + mutCount + ", values written: " + valCount);
-      if (simulate)
-        return;
+      if (simulate) return;
       
       try {
         mtbw.close();
@@ -359,14 +334,11 @@ public class AccumuloOutputFormat extends OutputFormat<Text,Mutation> {
   @Override
   public void checkOutputSpecs(JobContext job) throws IOException {
     Configuration conf = job.getConfiguration();
-    if (!conf.getBoolean(OUTPUT_INFO_HAS_BEEN_SET, false))
-      throw new IOException("Output info has not been set.");
-    if (!conf.getBoolean(INSTANCE_HAS_BEEN_SET, false))
-      throw new IOException("Instance info has not been set.");
+    if (!conf.getBoolean(OUTPUT_INFO_HAS_BEEN_SET, false)) throw new IOException("Output info has not been set.");
+    if (!conf.getBoolean(INSTANCE_HAS_BEEN_SET, false)) throw new IOException("Instance info has not been set.");
     try {
       Connector c = getInstance(job).getConnector(getUsername(job), getPassword(job));
-      if (!c.securityOperations().authenticateUser(getUsername(job), getPassword(job)))
-        throw new IOException("Unable to authenticate user");
+      if (!c.securityOperations().authenticateUser(getUsername(job), getPassword(job))) throw new IOException("Unable to authenticate user");
     } catch (AccumuloException e) {
       throw new IOException(e);
     } catch (AccumuloSecurityException e) {