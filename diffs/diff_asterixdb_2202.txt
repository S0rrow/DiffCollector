diff --git a/asterixdb/asterix-app/src/main/java/org/apache/asterix/hyracks/bootstrap/CCApplicationEntryPoint.java b/asterixdb/asterix-app/src/main/java/org/apache/asterix/hyracks/bootstrap/CCApplicationEntryPoint.java
index 54f2c06ae7..b77544e986 100644
--- a/asterixdb/asterix-app/src/main/java/org/apache/asterix/hyracks/bootstrap/CCApplicationEntryPoint.java
+++ b/asterixdb/asterix-app/src/main/java/org/apache/asterix/hyracks/bootstrap/CCApplicationEntryPoint.java
@@ -18,146 +18,113 @@
  */
 package org.apache.asterix.hyracks.bootstrap;
 
-import static org.apache.asterix.api.http.servlet.ServletConstants.ASTERIX_APP_CONTEXT_INFO_ATTR;
-import static org.apache.asterix.api.http.servlet.ServletConstants.HYRACKS_CONNECTION_ATTR;
-
-import java.util.Arrays;
+import java.util.ArrayList;
 import java.util.List;
-import java.util.concurrent.ConcurrentMap;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import org.apache.asterix.active.ActiveLifecycleListener;
-import org.apache.asterix.api.http.server.ApiServlet;
-import org.apache.asterix.api.http.server.ClusterApiServlet;
-import org.apache.asterix.api.http.server.ClusterControllerDetailsApiServlet;
-import org.apache.asterix.api.http.server.ConnectorApiServlet;
-import org.apache.asterix.api.http.server.DdlApiServlet;
-import org.apache.asterix.api.http.server.DiagnosticsApiServlet;
-import org.apache.asterix.api.http.server.FeedServlet;
-import org.apache.asterix.api.http.server.FullApiServlet;
-import org.apache.asterix.api.http.server.NodeControllerDetailsApiServlet;
-import org.apache.asterix.api.http.server.QueryApiServlet;
-import org.apache.asterix.api.http.server.QueryResultApiServlet;
-import org.apache.asterix.api.http.server.QueryServiceServlet;
-import org.apache.asterix.api.http.server.QueryStatusApiServlet;
-import org.apache.asterix.api.http.server.QueryWebInterfaceServlet;
-import org.apache.asterix.api.http.server.ShutdownApiServlet;
-import org.apache.asterix.api.http.server.UpdateApiServlet;
-import org.apache.asterix.api.http.server.VersionApiServlet;
-import org.apache.asterix.api.http.servlet.ServletConstants;
-import org.apache.asterix.app.cc.CCExtensionManager;
-import org.apache.asterix.app.cc.ResourceIdManager;
+import javax.servlet.Servlet;
+
+import org.apache.asterix.api.http.servlet.APIServlet;
+import org.apache.asterix.api.http.servlet.AQLAPIServlet;
+import org.apache.asterix.api.http.servlet.ClusterAPIServlet;
+import org.apache.asterix.api.http.servlet.ConnectorAPIServlet;
+import org.apache.asterix.api.http.servlet.DDLAPIServlet;
+import org.apache.asterix.api.http.servlet.FeedServlet;
+import org.apache.asterix.api.http.servlet.QueryAPIServlet;
+import org.apache.asterix.api.http.servlet.QueryResultAPIServlet;
+import org.apache.asterix.api.http.servlet.QueryServiceServlet;
+import org.apache.asterix.api.http.servlet.QueryStatusAPIServlet;
+import org.apache.asterix.api.http.servlet.ShutdownAPIServlet;
+import org.apache.asterix.api.http.servlet.UpdateAPIServlet;
+import org.apache.asterix.api.http.servlet.VersionAPIServlet;
+import org.apache.asterix.app.external.ActiveLifecycleListener;
 import org.apache.asterix.app.external.ExternalLibraryUtils;
-import org.apache.asterix.app.replication.FaultToleranceStrategyFactory;
 import org.apache.asterix.common.api.AsterixThreadFactory;
-import org.apache.asterix.common.config.AsterixExtension;
-import org.apache.asterix.common.config.AsterixProperties;
-import org.apache.asterix.common.config.ClusterProperties;
-import org.apache.asterix.common.config.ExternalProperties;
-import org.apache.asterix.common.config.MetadataProperties;
-import org.apache.asterix.common.context.IStorageComponentProvider;
+import org.apache.asterix.common.api.IClusterManagementWork.ClusterState;
+import org.apache.asterix.common.config.AsterixExternalProperties;
+import org.apache.asterix.common.config.AsterixMetadataProperties;
 import org.apache.asterix.common.library.ILibraryManager;
-import org.apache.asterix.common.messaging.api.ICCMessageBroker;
-import org.apache.asterix.common.replication.IFaultToleranceStrategy;
-import org.apache.asterix.common.replication.IReplicationStrategy;
-import org.apache.asterix.common.utils.Servlets;
+import org.apache.asterix.common.utils.ServletUtil.Servlets;
+import org.apache.asterix.compiler.provider.AqlCompilationProvider;
+import org.apache.asterix.compiler.provider.SqlppCompilationProvider;
+import org.apache.asterix.event.service.ILookupService;
 import org.apache.asterix.external.library.ExternalLibraryManager;
-import org.apache.asterix.file.StorageComponentProvider;
 import org.apache.asterix.messaging.CCMessageBroker;
 import org.apache.asterix.metadata.MetadataManager;
 import org.apache.asterix.metadata.api.IAsterixStateProxy;
 import org.apache.asterix.metadata.bootstrap.AsterixStateProxy;
-import org.apache.asterix.metadata.cluster.ClusterManagerProvider;
-import org.apache.asterix.runtime.job.resource.JobCapacityController;
-import org.apache.asterix.runtime.utils.AppContextInfo;
-import org.apache.asterix.translator.IStatementExecutorFactory;
+import org.apache.asterix.metadata.cluster.ClusterManager;
+import org.apache.asterix.om.util.AsterixAppContextInfo;
+import org.apache.asterix.om.util.AsterixClusterProperties;
 import org.apache.hyracks.api.application.ICCApplicationContext;
+import org.apache.hyracks.api.application.ICCApplicationEntryPoint;
 import org.apache.hyracks.api.client.HyracksConnection;
 import org.apache.hyracks.api.client.IHyracksClientConnection;
-import org.apache.hyracks.api.config.IConfigManager;
-import org.apache.hyracks.api.job.resource.IJobCapacityController;
 import org.apache.hyracks.api.lifecycle.LifeCycleComponentManager;
+import org.apache.hyracks.api.messages.IMessageBroker;
 import org.apache.hyracks.control.cc.ClusterControllerService;
-import org.apache.hyracks.control.common.controllers.CCConfig;
-import org.apache.hyracks.http.api.IServlet;
-import org.apache.hyracks.http.server.HttpServer;
-import org.apache.hyracks.http.server.WebManager;
-import org.apache.hyracks.util.file.FileUtil;
+import org.eclipse.jetty.server.Server;
+import org.eclipse.jetty.servlet.ServletContextHandler;
+import org.eclipse.jetty.servlet.ServletHolder;
+
+import static org.apache.asterix.api.http.servlet.ServletConstants.ASTERIX_BUILD_PROP_ATTR;
+import static org.apache.asterix.api.http.servlet.ServletConstants.HYRACKS_CONNECTION_ATTR;
 
-public class CCApplicationEntryPoint extends org.apache.hyracks.control.cc.CCApplicationEntryPoint {
+public class CCApplicationEntryPoint implements ICCApplicationEntryPoint {
 
     private static final Logger LOGGER = Logger.getLogger(CCApplicationEntryPoint.class.getName());
+
+    private List<Server> servers;
+
     private static IAsterixStateProxy proxy;
     protected ICCApplicationContext appCtx;
-    protected CCExtensionManager ccExtensionManager;
-    protected IStorageComponentProvider componentProvider;
-    private IJobCapacityController jobCapacityController;
-    protected WebManager webManager;
-
-    public CCApplicationEntryPoint() {
-        CCConfig.defaultDir = FileUtil.joinPath(System.getProperty("java.io.tmpdir"), "asterixdb");
-    }
 
     @Override
     public void start(ICCApplicationContext ccAppCtx, String[] args) throws Exception {
-        if (args.length > 0) {
-            throw new IllegalArgumentException("Unrecognized argument(s): " + Arrays.toString(args));
-        }
-        final ClusterControllerService controllerService = (ClusterControllerService) ccAppCtx.getControllerService();
-        ICCMessageBroker messageBroker = new CCMessageBroker(controllerService);
+        IMessageBroker messageBroker = new CCMessageBroker((ClusterControllerService) ccAppCtx.getControllerService());
         this.appCtx = ccAppCtx;
 
         if (LOGGER.isLoggable(Level.INFO)) {
             LOGGER.info("Starting Asterix cluster controller");
         }
 
-        appCtx.setThreadFactory(new AsterixThreadFactory(appCtx.getThreadFactory(), new LifeCycleComponentManager()));
+        appCtx.setThreadFactory(new AsterixThreadFactory(new LifeCycleComponentManager()));
+        GlobalRecoveryManager.INSTANCE = new GlobalRecoveryManager((HyracksConnection) getNewHyracksClientConnection());
         ILibraryManager libraryManager = new ExternalLibraryManager();
-        ResourceIdManager resourceIdManager = new ResourceIdManager();
-        IReplicationStrategy repStrategy = ClusterProperties.INSTANCE.getReplicationStrategy();
-        IFaultToleranceStrategy ftStrategy = FaultToleranceStrategyFactory
-                .create(ClusterProperties.INSTANCE.getCluster(), repStrategy, messageBroker);
         ExternalLibraryUtils.setUpExternaLibraries(libraryManager, false);
-        componentProvider = new StorageComponentProvider();
-        GlobalRecoveryManager.instantiate((HyracksConnection) getNewHyracksClientConnection(), componentProvider);
-        AppContextInfo.initialize(appCtx, getNewHyracksClientConnection(), libraryManager, resourceIdManager,
-                () -> MetadataManager.INSTANCE, GlobalRecoveryManager.instance(), ftStrategy);
-        ccExtensionManager = new CCExtensionManager(getExtensions());
-        AppContextInfo.INSTANCE.setExtensionManager(ccExtensionManager);
-        final CCConfig ccConfig = controllerService.getCCConfig();
-        if (System.getProperty("java.rmi.server.hostname") == null) {
-            System.setProperty("java.rmi.server.hostname", ccConfig.getClusterListenAddress());
-        }
-        MetadataProperties metadataProperties = AppContextInfo.INSTANCE.getMetadataProperties();
+        AsterixAppContextInfo.initialize(appCtx, getNewHyracksClientConnection(), GlobalRecoveryManager.INSTANCE,
+                libraryManager);
 
-        setAsterixStateProxy(AsterixStateProxy.registerRemoteObject(metadataProperties.getMetadataCallbackPort()));
+        proxy = AsterixStateProxy.registerRemoteObject();
         appCtx.setDistributedState(proxy);
 
-        MetadataManager.initialize(proxy, metadataProperties);
+        AsterixMetadataProperties metadataProperties = AsterixAppContextInfo.getInstance().getMetadataProperties();
+        MetadataManager.INSTANCE = new MetadataManager(proxy, metadataProperties);
+
+        AsterixAppContextInfo.getInstance().getCCApplicationContext()
+                .addJobLifecycleListener(ActiveLifecycleListener.INSTANCE);
 
-        AppContextInfo.INSTANCE.getCCApplicationContext().addJobLifecycleListener(ActiveLifecycleListener.INSTANCE);
+        servers = configureServers();
+
+        for (Server server : servers) {
+            server.start();
+        }
+
+        ClusterManager.INSTANCE.registerSubscriber(GlobalRecoveryManager.INSTANCE);
 
-        // create event loop groups
-        webManager = new WebManager();
-        configureServers();
-        webManager.start();
-        ClusterManagerProvider.getClusterManager().registerSubscriber(GlobalRecoveryManager.instance());
         ccAppCtx.addClusterLifecycleListener(ClusterLifecycleListener.INSTANCE);
         ccAppCtx.setMessageBroker(messageBroker);
-
-        jobCapacityController = new JobCapacityController(controllerService.getResourceManager());
     }
 
-    protected List<AsterixExtension> getExtensions() {
-        return AppContextInfo.INSTANCE.getExtensionProperties().getExtensions();
-    }
+    protected List<Server> configureServers() throws Exception {
+        AsterixExternalProperties externalProperties = AsterixAppContextInfo.getInstance().getExternalProperties();
 
-    protected void configureServers() throws Exception {
-        webManager.add(setupWebServer(AppContextInfo.INSTANCE.getExternalProperties()));
-        webManager.add(setupJSONAPIServer(AppContextInfo.INSTANCE.getExternalProperties()));
-        webManager.add(setupFeedServer(AppContextInfo.INSTANCE.getExternalProperties()));
-        webManager.add(setupQueryWebServer(AppContextInfo.INSTANCE.getExternalProperties()));
+        List<Server> serverList = new ArrayList<>();
+        serverList.add(setupWebServer(externalProperties));
+        serverList.add(setupJSONAPIServer(externalProperties));
+        serverList.add(setupFeedServer(externalProperties));
+        return serverList;
     }
 
     @Override
@@ -167,7 +134,14 @@ public class CCApplicationEntryPoint extends org.apache.hyracks.control.cc.CCApp
             LOGGER.info("Stopping Asterix cluster controller");
         }
         AsterixStateProxy.unregisterRemoteObject();
-        webManager.stop();
+        // Stop servers
+        for (Server server : servers) {
+            server.stop();
+        }
+        // Make sure servers are stopped before proceeding
+        for (Server server : servers) {
+            server.join();
+        }
     }
 
     protected IHyracksClientConnection getNewHyracksClientConnection() throws Exception {
@@ -176,147 +150,126 @@ public class CCApplicationEntryPoint extends org.apache.hyracks.control.cc.CCApp
         return new HyracksConnection(strIP, port);
     }
 
-    protected HttpServer setupWebServer(ExternalProperties externalProperties) throws Exception {
-        HttpServer webServer = new HttpServer(webManager.getBosses(), webManager.getWorkers(),
-                externalProperties.getWebInterfacePort());
+    protected Server setupWebServer(AsterixExternalProperties externalProperties) throws Exception {
+
+        Server webServer = new Server(externalProperties.getWebInterfacePort());
+
+        ServletContextHandler context = new ServletContextHandler(ServletContextHandler.SESSIONS);
+        context.setContextPath("/");
+
         IHyracksClientConnection hcc = getNewHyracksClientConnection();
-        webServer.setAttribute(HYRACKS_CONNECTION_ATTR, hcc);
-        webServer.addServlet(new ApiServlet(webServer.ctx(), new String[] { "/*" },
-                ccExtensionManager.getAqlCompilationProvider(), ccExtensionManager.getSqlppCompilationProvider(),
-                getStatementExecutorFactory(), componentProvider));
+        context.setAttribute(HYRACKS_CONNECTION_ATTR, hcc);
+
+        webServer.setHandler(context);
+        context.addServlet(new ServletHolder(new APIServlet()), "/*");
+
         return webServer;
     }
 
-    protected HttpServer setupJSONAPIServer(ExternalProperties externalProperties) throws Exception {
-        HttpServer jsonAPIServer =
-                new HttpServer(webManager.getBosses(), webManager.getWorkers(), externalProperties.getAPIServerPort());
+    protected Server setupJSONAPIServer(AsterixExternalProperties externalProperties) throws Exception {
+        Server jsonAPIServer = new Server(externalProperties.getAPIServerPort());
+
+        ServletContextHandler context = new ServletContextHandler(ServletContextHandler.SESSIONS);
+        context.setContextPath("/");
+
         IHyracksClientConnection hcc = getNewHyracksClientConnection();
-        jsonAPIServer.setAttribute(HYRACKS_CONNECTION_ATTR, hcc);
-        jsonAPIServer.setAttribute(ASTERIX_APP_CONTEXT_INFO_ATTR, AppContextInfo.INSTANCE);
-        jsonAPIServer.setAttribute(ServletConstants.EXECUTOR_SERVICE,
-                ((ClusterControllerService) appCtx.getControllerService()).getExecutor());
+        context.setAttribute(HYRACKS_CONNECTION_ATTR, hcc);
+        context.setAttribute(ASTERIX_BUILD_PROP_ATTR, AsterixAppContextInfo.getInstance());
+
+        jsonAPIServer.setHandler(context);
 
         // AQL rest APIs.
-        addServlet(jsonAPIServer, Servlets.AQL_QUERY);
-        addServlet(jsonAPIServer, Servlets.AQL_UPDATE);
-        addServlet(jsonAPIServer, Servlets.AQL_DDL);
-        addServlet(jsonAPIServer, Servlets.AQL);
+        addServlet(context, Servlets.AQL_QUERY);
+        addServlet(context, Servlets.AQL_UPDATE);
+        addServlet(context, Servlets.AQL_DDL);
+        addServlet(context, Servlets.AQL);
 
-        // SQL+x+ rest APIs.
-        addServlet(jsonAPIServer, Servlets.SQLPP_QUERY);
-        addServlet(jsonAPIServer, Servlets.SQLPP_UPDATE);
-        addServlet(jsonAPIServer, Servlets.SQLPP_DDL);
-        addServlet(jsonAPIServer, Servlets.SQLPP);
+        // SQL++ rest APIs.
+        addServlet(context, Servlets.SQLPP_QUERY);
+        addServlet(context, Servlets.SQLPP_UPDATE);
+        addServlet(context, Servlets.SQLPP_DDL);
+        addServlet(context, Servlets.SQLPP);
 
         // Other APIs.
-        addServlet(jsonAPIServer, Servlets.QUERY_STATUS);
-        addServlet(jsonAPIServer, Servlets.QUERY_RESULT);
-        addServlet(jsonAPIServer, Servlets.QUERY_SERVICE);
-        addServlet(jsonAPIServer, Servlets.CONNECTOR);
-        addServlet(jsonAPIServer, Servlets.SHUTDOWN);
-        addServlet(jsonAPIServer, Servlets.VERSION);
-        addServlet(jsonAPIServer, Servlets.CLUSTER_STATE);
-        addServlet(jsonAPIServer, Servlets.CLUSTER_STATE_NODE_DETAIL); // must not precede add of CLUSTER_STATE
-        addServlet(jsonAPIServer, Servlets.CLUSTER_STATE_CC_DETAIL); // must not precede add of CLUSTER_STATE
-        addServlet(jsonAPIServer, Servlets.DIAGNOSTICS);
-        return jsonAPIServer;
-    }
+        addServlet(context, Servlets.QUERY_STATUS);
+        addServlet(context, Servlets.QUERY_RESULT);
+        addServlet(context, Servlets.QUERY_SERVICE);
+        addServlet(context, Servlets.CONNECTOR);
+        addServlet(context, Servlets.SHUTDOWN);
+        addServlet(context, Servlets.VERSION);
+        addServlet(context, Servlets.CLUSTER_STATE);
 
-    protected void addServlet(HttpServer server, String path) {
-        server.addServlet(createServlet(server.ctx(), path, path));
+        return jsonAPIServer;
     }
 
-    protected HttpServer setupQueryWebServer(ExternalProperties externalProperties) throws Exception {
-        HttpServer queryWebServer = new HttpServer(webManager.getBosses(), webManager.getWorkers(),
-                externalProperties.getQueryWebInterfacePort());
-        IHyracksClientConnection hcc = getNewHyracksClientConnection();
-        queryWebServer.setAttribute(HYRACKS_CONNECTION_ATTR, hcc);
-        queryWebServer.addServlet(new QueryWebInterfaceServlet(queryWebServer.ctx(), new String[] { "/*" }));
-        return queryWebServer;
+    protected void addServlet(ServletContextHandler context, Servlet servlet, String path) {
+        context.addServlet(new ServletHolder(servlet), path);
     }
 
-    protected HttpServer setupFeedServer(ExternalProperties externalProperties) throws Exception {
-        HttpServer feedServer = new HttpServer(webManager.getBosses(), webManager.getWorkers(),
-                externalProperties.getFeedServerPort());
-        feedServer.setAttribute(HYRACKS_CONNECTION_ATTR, getNewHyracksClientConnection());
-        feedServer.addServlet(new FeedServlet(feedServer.ctx(), new String[] { "/" }));
-        return feedServer;
+    protected void addServlet(ServletContextHandler context, Servlets key) {
+        addServlet(context, createServlet(key), key.getPath());
     }
 
-    protected IServlet createServlet(ConcurrentMap<String, Object> ctx, String key, String... paths) {
+    private Servlet createServlet(Servlets key) {
         switch (key) {
-            case Servlets.AQL:
-                return new FullApiServlet(ctx, paths, ccExtensionManager.getAqlCompilationProvider(),
-                        getStatementExecutorFactory(), componentProvider);
-            case Servlets.AQL_QUERY:
-                return new QueryApiServlet(ctx, paths, ccExtensionManager.getAqlCompilationProvider(),
-                        getStatementExecutorFactory(), componentProvider);
-            case Servlets.AQL_UPDATE:
-                return new UpdateApiServlet(ctx, paths, ccExtensionManager.getAqlCompilationProvider(),
-                        getStatementExecutorFactory(), componentProvider);
-            case Servlets.AQL_DDL:
-                return new DdlApiServlet(ctx, paths, ccExtensionManager.getAqlCompilationProvider(),
-                        getStatementExecutorFactory(), componentProvider);
-            case Servlets.SQLPP:
-                return new FullApiServlet(ctx, paths, ccExtensionManager.getSqlppCompilationProvider(),
-                        getStatementExecutorFactory(), componentProvider);
-            case Servlets.SQLPP_QUERY:
-                return new QueryApiServlet(ctx, paths, ccExtensionManager.getSqlppCompilationProvider(),
-                        getStatementExecutorFactory(), componentProvider);
-            case Servlets.SQLPP_UPDATE:
-                return new UpdateApiServlet(ctx, paths, ccExtensionManager.getSqlppCompilationProvider(),
-                        getStatementExecutorFactory(), componentProvider);
-            case Servlets.SQLPP_DDL:
-                return new DdlApiServlet(ctx, paths, ccExtensionManager.getSqlppCompilationProvider(),
-                        getStatementExecutorFactory(), componentProvider);
-            case Servlets.QUERY_STATUS:
-                return new QueryStatusApiServlet(ctx, paths);
-            case Servlets.QUERY_RESULT:
-                return new QueryResultApiServlet(ctx, paths);
-            case Servlets.QUERY_SERVICE:
-                return new QueryServiceServlet(ctx, paths, ccExtensionManager.getSqlppCompilationProvider(),
-                        getStatementExecutorFactory(), componentProvider);
-            case Servlets.CONNECTOR:
-                return new ConnectorApiServlet(ctx, paths);
-            case Servlets.SHUTDOWN:
-                return new ShutdownApiServlet(ctx, paths);
-            case Servlets.VERSION:
-                return new VersionApiServlet(ctx, paths);
-            case Servlets.CLUSTER_STATE:
-                return new ClusterApiServlet(ctx, paths);
-            case Servlets.CLUSTER_STATE_NODE_DETAIL:
-                return new NodeControllerDetailsApiServlet(ctx, paths);
-            case Servlets.CLUSTER_STATE_CC_DETAIL:
-                return new ClusterControllerDetailsApiServlet(ctx, paths);
-            case Servlets.DIAGNOSTICS:
-                return new DiagnosticsApiServlet(ctx, paths);
+            case AQL:
+                return new AQLAPIServlet(new AqlCompilationProvider());
+            case AQL_QUERY:
+                return new QueryAPIServlet(new AqlCompilationProvider());
+            case AQL_UPDATE:
+                return new UpdateAPIServlet(new AqlCompilationProvider());
+            case AQL_DDL:
+                return new DDLAPIServlet(new AqlCompilationProvider());
+            case SQLPP:
+                return new AQLAPIServlet(new SqlppCompilationProvider());
+            case SQLPP_QUERY:
+                return new QueryAPIServlet(new SqlppCompilationProvider());
+            case SQLPP_UPDATE:
+                return new UpdateAPIServlet(new SqlppCompilationProvider());
+            case SQLPP_DDL:
+                return new DDLAPIServlet(new SqlppCompilationProvider());
+            case QUERY_STATUS:
+                return new QueryStatusAPIServlet();
+            case QUERY_RESULT:
+                return new QueryResultAPIServlet();
+            case QUERY_SERVICE:
+                return new QueryServiceServlet();
+            case CONNECTOR:
+                return new ConnectorAPIServlet();
+            case SHUTDOWN:
+                return new ShutdownAPIServlet();
+            case VERSION:
+                return new VersionAPIServlet();
+            case CLUSTER_STATE:
+                return new ClusterAPIServlet();
             default:
                 throw new IllegalStateException(String.valueOf(key));
         }
     }
 
-    private IStatementExecutorFactory getStatementExecutorFactory() {
-        return ccExtensionManager.getStatementExecutorFactory(
-                ((ClusterControllerService) appCtx.getControllerService()).getExecutorService());
-    }
+    protected Server setupFeedServer(AsterixExternalProperties externalProperties) throws Exception {
+        Server feedServer = new Server(externalProperties.getFeedServerPort());
 
-    @Override
-    public void startupCompleted() throws Exception {
-        ClusterManagerProvider.getClusterManager().notifyStartupCompleted();
-    }
+        ServletContextHandler context = new ServletContextHandler(ServletContextHandler.SESSIONS);
+        context.setContextPath("/");
 
-    @Override
-    public IJobCapacityController getJobCapacityController() {
-        return jobCapacityController;
-    }
+        IHyracksClientConnection hcc = getNewHyracksClientConnection();
+        context.setAttribute(HYRACKS_CONNECTION_ATTR, hcc);
 
-    @Override
-    public void registerConfig(IConfigManager configManager) {
-        super.registerConfig(configManager);
-        AsterixProperties.registerConfigOptions(configManager);
+        feedServer.setHandler(context);
+        context.addServlet(new ServletHolder(new FeedServlet()), "/");
+
+        return feedServer;
     }
 
-    public static synchronized void setAsterixStateProxy(IAsterixStateProxy proxy) {
-        org.apache.asterix.hyracks.bootstrap.CCApplicationEntryPoint.proxy = proxy;
+    @Override
+    public void startupCompleted() throws Exception {
+        // Notify Zookeeper that the startup is complete
+        ILookupService zookeeperService = ClusterManager.getLookupService();
+        if (zookeeperService != null) {
+            // Our asterix app runtimes tests don't use zookeeper
+            zookeeperService.reportClusterState(AsterixClusterProperties.INSTANCE.getCluster().getInstanceName(),
+                    ClusterState.ACTIVE);
+        }
     }
 }