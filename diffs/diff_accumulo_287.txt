diff --git a/server/base/src/main/java/org/apache/accumulo/server/util/RpcWrapper.java b/server/base/src/main/java/org/apache/accumulo/server/util/RpcWrapper.java
index aafe37cfff..02bd1ef727 100644
--- a/server/base/src/main/java/org/apache/accumulo/server/util/RpcWrapper.java
+++ b/server/base/src/main/java/org/apache/accumulo/server/util/RpcWrapper.java
@@ -19,18 +19,11 @@ package org.apache.accumulo.server.util;
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.Method;
 import java.lang.reflect.Proxy;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Set;
 
 import org.apache.accumulo.trace.instrument.thrift.RpcServerInvocationHandler;
 import org.apache.accumulo.trace.instrument.thrift.TraceWrap;
-import org.apache.thrift.ProcessFunction;
 import org.apache.thrift.TApplicationException;
-import org.apache.thrift.TBase;
 import org.apache.thrift.TException;
-import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 /**
@@ -38,90 +31,32 @@ import org.slf4j.LoggerFactory;
  * {@link TException} only, by wrapping {@link RuntimeException} and {@link Error} as {@link TException}, so it doesn't just close the connection and look like
  * a network issue, but informs the client that a {@link TApplicationException} had occurred, as it did in Thrift 0.9.0. This performs similar functions as
  * {@link TraceWrap}, but with the additional action of translating exceptions. See also ACCUMULO-1691 and ACCUMULO-2950.
- *
- * ACCUMULO-4065 found that the above exception-wrapping is not appropriate for Thrift's implementation of oneway methods. Oneway methods are defined as
- * a method which the client does not wait for it to return. Normally, this is acceptable as these methods are void. Therefore, if another client reuses
- * the connection to send a new RPC, there is no "extra" data sitting on the InputStream from the Socket (that the server sent). However, the implementation
- * of a oneway method <em>does</em> send a response to the client when the implementation throws a {@link TException}. This message showing up on the client's
- * InputStream causes future use of the Thrift Connection to become unusable. As long as the Thrift implementation sends a message back when oneway methods
- * throw a {@link TException}, we much make sure that we don't re-wrap-and-throw any exceptions as {@link TException}s.
- *
+ * 
  * @since 1.6.1
  */
 public class RpcWrapper {
-  private static final Logger log = LoggerFactory.getLogger(RpcWrapper.class);
-
-  public static <T> T service(final T instance, @SuppressWarnings("rawtypes") final Map<String,ProcessFunction<T,? extends TBase>> processorView) {
-    final Set<String> onewayMethods = getOnewayMethods(processorView);
-    log.debug("Found oneway Thrift methods: " + onewayMethods);
-
-    InvocationHandler handler = getInvocationHandler(instance, onewayMethods);
-
-    @SuppressWarnings("unchecked")
-    T proxiedInstance = (T) Proxy.newProxyInstance(instance.getClass().getClassLoader(), instance.getClass().getInterfaces(), handler);
-    return proxiedInstance;
-  }
-
-  protected static <T> RpcServerInvocationHandler<T> getInvocationHandler(final T instance, final Set<String> onewayMethods) {
-    return new RpcServerInvocationHandler<T>(instance) {
-      private final Logger log = LoggerFactory.getLogger(instance.getClass());
 
+  public static <T> T service(final T instance) {
+    InvocationHandler handler = new RpcServerInvocationHandler<T>(instance) {
       @Override
       public Object invoke(Object obj, Method method, Object[] args) throws Throwable {
-        // e.g. ThriftClientHandler.flush(TInfo, TCredentials, ...)
         try {
           return super.invoke(obj, method, args);
         } catch (RuntimeException e) {
           String msg = e.getMessage();
-          log.error(msg, e);
-          if (onewayMethods.contains(method.getName())) {
-            throw e;
-          }
+          LoggerFactory.getLogger(instance.getClass()).error(msg, e);
           throw new TException(msg);
         } catch (Error e) {
           String msg = e.getMessage();
-          log.error(msg, e);
-          if (onewayMethods.contains(method.getName())) {
-            throw e;
-          }
+          LoggerFactory.getLogger(instance.getClass()).error(msg, e);
           throw new TException(msg);
         }
       }
     };
-  }
 
-  protected static <T> Set<String> getOnewayMethods(@SuppressWarnings("rawtypes") Map<String,ProcessFunction<T,? extends TBase>> processorView) {
-    // Get a handle on the isOnewayMethod and make it accessible
-    final Method isOnewayMethod;
-    try {
-      isOnewayMethod = ProcessFunction.class.getDeclaredMethod("isOneway");
-    } catch (NoSuchMethodException e) {
-      throw new RuntimeException("Could not access isOneway method", e);
-    } catch (SecurityException e) {
-      throw new RuntimeException("Could not access isOneway method", e);
-    }
-    // In java7, this appears to be copying the method, but it's trivial for us to return the object to how it was before.
-    final boolean accessible = isOnewayMethod.isAccessible();
-    isOnewayMethod.setAccessible(true);
-
-    try {
-      final Set<String> onewayMethods = new HashSet<String>();
-      for (@SuppressWarnings("rawtypes") Entry<String,ProcessFunction<T,? extends TBase>> entry : processorView.entrySet()) {
-        try {
-          if ((Boolean) isOnewayMethod.invoke(entry.getValue())) {
-            onewayMethods.add(entry.getKey());
-          }
-        } catch (RuntimeException e) {
-          throw e;
-        } catch (Exception e) {
-          throw new RuntimeException(e);
-        }
-      }
-
-      return onewayMethods;
-    } finally {
-      // Reset it back to how it was.
-      isOnewayMethod.setAccessible(accessible);
-    }
+    @SuppressWarnings("unchecked")
+    T proxiedInstance = (T) Proxy.newProxyInstance(instance.getClass().getClassLoader(), instance.getClass().getInterfaces(), handler);
+    return proxiedInstance;
   }
+
 }