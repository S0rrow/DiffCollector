diff --git a/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/ProxiedDavServer.java b/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/ProxiedDavServer.java
index bdf8fa97f..428e4898c 100644
--- a/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/ProxiedDavServer.java
+++ b/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/ProxiedDavServer.java
@@ -19,6 +19,9 @@
  * under the License.
  */
 
+import org.apache.maven.archiva.configuration.ArchivaConfiguration;
+import org.apache.maven.archiva.configuration.Configuration;
+import org.apache.maven.archiva.configuration.ManagedRepositoryConfiguration;
 import org.apache.maven.archiva.model.ArtifactReference;
 import org.apache.maven.archiva.model.ProjectReference;
 import org.apache.maven.archiva.model.VersionedReference;
@@ -29,6 +32,8 @@
 import org.apache.maven.archiva.repository.RepositoryException;
 import org.apache.maven.archiva.repository.RepositoryNotFoundException;
 import org.apache.maven.archiva.repository.content.RepositoryRequest;
+import org.apache.maven.archiva.repository.layout.BidirectionalRepositoryLayout;
+import org.apache.maven.archiva.repository.layout.BidirectionalRepositoryLayoutFactory;
 import org.apache.maven.archiva.repository.layout.LayoutException;
 import org.apache.maven.archiva.repository.metadata.MetadataTools;
 import org.apache.maven.archiva.repository.metadata.RepositoryMetadataException;
@@ -36,7 +41,6 @@
 import org.apache.maven.model.Model;
 import org.apache.maven.model.Relocation;
 import org.apache.maven.model.io.xpp3.MavenXpp3Reader;
-import org.codehaus.plexus.util.xml.pull.XmlPullParserException;
 import org.codehaus.plexus.webdav.AbstractDavServerComponent;
 import org.codehaus.plexus.webdav.DavServerComponent;
 import org.codehaus.plexus.webdav.DavServerException;
@@ -47,7 +51,6 @@
 import java.io.FileNotFoundException;
 import java.io.FileReader;
 import java.io.IOException;
-import java.io.PrintWriter;
 
 import javax.servlet.ServletConfig;
 import javax.servlet.ServletException;
@@ -133,70 +136,11 @@ public void init( ServletConfig servletConfig )
     public void process( DavServerRequest request, HttpServletResponse response )
         throws DavServerException, ServletException, IOException
     {
-        boolean isGet = WebdavMethodUtil.isReadMethod( request.getRequest().getMethod() );
-        boolean isPut = WebdavMethodUtil.isWriteMethod( request.getRequest().getMethod() );
-        
-        if ( isGet )
+        if ( WebdavMethodUtil.isReadMethod( request.getRequest().getMethod() ) )
         {
-            // Default behaviour is to treat the resource natively.
-            String resource = request.getLogicalResource();
-            File resourceFile = new File( managedRepository.getRepoRoot(), resource );
-
-            // If this a directory resource, then we are likely browsing.
-            if ( resourceFile.exists() && resourceFile.isDirectory() )
-            {
-                // TODO: [MRM-440] - If webdav URL lacks a trailing /, navigating to all links in the listing return 404.
-                // TODO: Issue redirect with proper pathing.
-                
-                // Process the request.
-                davServer.process( request, response );
-                
-                // All done.
-                return;
-            }
-
-            // At this point the incoming request can either be in default or legacy layout format.
-            try
-            {
-                // Perform an adjustment of the resource to the managed repository expected path.
-                resource = repositoryRequest.toNativePath( request.getLogicalResource(), managedRepository );
-                resourceFile = new File( managedRepository.getRepoRoot(), resource );
-
-                // Adjust the pathInfo resource to be in the format that the dav server impl expects.
-                request.getRequest().setPathInfo( resource );
-
-                // Attempt to fetch the resource from any defined proxy.
-                fetchContentFromProxies( request, resource );
-            }
-            catch ( LayoutException e )
-            {
-                // Invalid resource, pass it on.
-                respondResourceMissing( request, response, e );
-
-                // All done.
-                return;
-            }
-
-            if ( resourceFile.exists() )
-            {
-                // [MRM-503] - Metadata file need Pragma:no-cache response header.
-                if ( request.getLogicalResource().endsWith( "/maven-metadata.xml" ) )
-                {
-                    response.addHeader( "Pragma", "no-cache" );
-                    response.addHeader( "Cache-Control", "no-cache" );
-                }
-
-                // TODO: [MRM-524] determine http caching options for other types of files (artifacts, sha1, md5, snapshots)
-
-                davServer.process( request, response );
-            }
-            else
-            {
-                respondResourceMissing( request, response, null );
-            }
+            fetchContentFromProxies( request );
         }
-
-        if ( isPut )
+        else
         {
             /* Create parent directories that don't exist when writing a file
              * This actually makes this implementation not compliant to the
@@ -211,81 +155,73 @@ public void process( DavServerRequest request, HttpServletResponse response )
             {
                 new File( rootDirectory, request.getLogicalResource() ).getParentFile().mkdirs();
             }
-            
-            // Allow the dav server to process the put request.
-            davServer.process( request, response );
-            
-            // All done.
-            return;
         }
-    }
 
-    private void respondResourceMissing( DavServerRequest request, HttpServletResponse response, Throwable t )
-    {
-        response.setStatus( HttpServletResponse.SC_NOT_FOUND );
-
-        try
+        // [MRM-503] - Metadata file need Pragma:no-cache response header.
+        if ( request.getLogicalResource().endsWith( "/maven-metadata.xml" ) )
         {
-            StringBuffer missingUrl = new StringBuffer();
-            missingUrl.append( request.getRequest().getScheme() ).append( "://" );
-            missingUrl.append( request.getRequest().getServerName() ).append( ":" );
-            missingUrl.append( request.getRequest().getServerPort() );
-            missingUrl.append( request.getRequest().getServletPath() );
-
-            String message = "Error 404 Not Found";
-
-            PrintWriter out = new PrintWriter( response.getOutputStream() );
-
-            response.setContentType( "text/html; charset=\"UTF-8\"" );
-
-            out.println( "<html>" );
-            out.println( "<head><title>" + message + "</title></head>" );
-            out.println( "<body>" );
-
-            out.print( "<p><h1>" );
-            out.print( message );
-            out.println( "</h1></p>" );
-
-            out.print( "<p>The following resource does not exist: <a href=\"" );
-            out.print( missingUrl.toString() );
-            out.println( "\">" );
-            out.print( missingUrl.toString() );
-            out.println( "</a></p>" );
-            
-            if ( t != null )
-            {
-                out.println( "<pre>" );
-                t.printStackTrace( out );
-                out.println( "</pre>" );
-            }
+            response.addHeader( "Pragma", "no-cache" );
+            response.addHeader( "Cache-Control", "no-cache" );
+        }
 
-            out.println( "</body></html>" );
+        // TODO: [MRM-524] determine http caching options for other types of files (artifacts, sha1, md5, snapshots)
 
-            out.flush();
-        }
-        catch ( IOException e )
-        {
-            e.printStackTrace();
-        }
+        davServer.process( request, response );
     }
 
-    private void fetchContentFromProxies( DavServerRequest request, String resource )
+    private void fetchContentFromProxies( DavServerRequest request )
         throws ServletException
     {
-        if ( repositoryRequest.isSupportFile( resource ) )
+        String resource = request.getLogicalResource();
+
+        if ( resource.endsWith( ".sha1" ) || resource.endsWith( ".md5" ) )
         {
             // Checksums are fetched with artifact / metadata.
-            
-            // Need to adjust the path for the checksum resource.
             return;
         }
 
         // Is it a Metadata resource?
-        if ( repositoryRequest.isDefault( resource ) && repositoryRequest.isMetadata( resource ) )
+        if ( resource.endsWith( "/" + MetadataTools.MAVEN_METADATA ) )
         {
-            if ( fetchMetadataFromProxies( request, resource ) )
+            ProjectReference project;
+            VersionedReference versioned;
+
+            try
             {
-                return;
+
+                versioned = metadataTools.toVersionedReference( resource );
+                if ( versioned != null )
+                {
+                    connectors.fetchFromProxies( managedRepository, versioned );
+                    request.getRequest().setPathInfo( metadataTools.toPath( versioned ) );
+                    return;
+                }
+            }
+            catch ( RepositoryMetadataException e )
+            {
+                /* eat it */
+            }
+            catch ( ProxyException e )
+            {
+                throw new ServletException( "Unable to fetch versioned metadata resource.", e );
+            }
+
+            try
+            {
+                project = metadataTools.toProjectReference( resource );
+                if ( project != null )
+                {
+                    connectors.fetchFromProxies( managedRepository, project );
+                    request.getRequest().setPathInfo( metadataTools.toPath( project ) );
+                }
+            }
+            catch ( RepositoryMetadataException e )
+            {
+                /* eat it */
+            }
+            catch ( ProxyException e )
+            {
+                throw new ServletException( "Unable to fetch project metadata resource.", e );
             }
         }
 
@@ -316,52 +252,6 @@ private void fetchContentFromProxies( DavServerRequest request, String resource
         }
     }
 
-    private boolean fetchMetadataFromProxies( DavServerRequest request, String resource )
-        throws ServletException
-    {
-        ProjectReference project;
-        VersionedReference versioned;
-
-        try
-        {
-
-            versioned = metadataTools.toVersionedReference( resource );
-            if ( versioned != null )
-            {
-                connectors.fetchFromProxies( managedRepository, versioned );
-                return true;
-            }
-        }
-        catch ( RepositoryMetadataException e )
-        {
-            /* eat it */
-        }
-        catch ( ProxyException e )
-        {
-            throw new ServletException( "Unable to fetch versioned metadata resource.", e );
-        }
-
-        try
-        {
-            project = metadataTools.toProjectReference( resource );
-            if ( project != null )
-            {
-                connectors.fetchFromProxies( managedRepository, project );
-                return true;
-            }
-        }
-        catch ( RepositoryMetadataException e )
-        {
-            /* eat it */
-        }
-        catch ( ProxyException e )
-        {
-            throw new ServletException( "Unable to fetch project metadata resource.", e );
-        }
-        
-        return false;
-    }
-
     /**
      * A relocation capable client will request the POM prior to the artifact,
      * and will then read meta-data and do client side relocation. A simplier
@@ -392,12 +282,6 @@ protected void applyServerSideRelocation( ArtifactReference artifact )
 
         // Open and read the POM from the managed repo
         File pom = managedRepository.toFile( pomReference );
-        
-        if( !pom.exists() )
-        {
-            return;
-        }
-        
         try
         {
             Model model = new MavenXpp3Reader().read( new FileReader( pom ) );
@@ -427,22 +311,11 @@ protected void applyServerSideRelocation( ArtifactReference artifact )
         {
             // Artifact has no POM in repo : ignore
         }
-        catch ( IOException e )
-        {
-            // Unable to read POM : ignore.
-        }
-        catch ( XmlPullParserException e )
+        catch ( Exception e )
         {
-            // Invalid POM : ignore
+            // invalid POM : ignore
         }
     }
-    
-    @Override
-    public void setUseIndexHtml( boolean useIndexHtml )
-    {
-        super.setUseIndexHtml( useIndexHtml );
-        davServer.setUseIndexHtml( useIndexHtml );
-    }
 
     public ManagedRepositoryContent getRepository()
     {