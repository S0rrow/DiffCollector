diff --git a/test/src/main/java/org/apache/accumulo/test/continuous/ContinuousBatchWalker.java b/test/src/main/java/org/apache/accumulo/test/continuous/ContinuousBatchWalker.java
index 73fe806317..dc77f37cc3 100644
--- a/test/src/main/java/org/apache/accumulo/test/continuous/ContinuousBatchWalker.java
+++ b/test/src/main/java/org/apache/accumulo/test/continuous/ContinuousBatchWalker.java
@@ -16,8 +16,6 @@
  */
 package org.apache.accumulo.test.continuous;
 
-import static com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly;
-
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.Iterator;
@@ -41,6 +39,7 @@ import org.apache.hadoop.io.Text;
 
 import com.beust.jcommander.Parameter;
 import com.beust.jcommander.validators.PositiveInteger;
+import static com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly;
 
 public class ContinuousBatchWalker {
 
@@ -69,7 +68,7 @@ public class ContinuousBatchWalker {
       bs.setTimeout(bsOpts.scanTimeout, TimeUnit.MILLISECONDS);
 
       Set<Text> batch = getBatch(scanner, opts.min, opts.max, scanOpts.scanBatchSize, r);
-      List<Range> ranges = new ArrayList<>(batch.size());
+      List<Range> ranges = new ArrayList<Range>(batch.size());
 
       for (Text row : batch) {
         ranges.add(new Range(row));
@@ -85,7 +84,7 @@ public class ContinuousBatchWalker {
   private static void runBatchScan(int batchSize, BatchScanner bs, Set<Text> batch, List<Range> ranges) {
     bs.setRanges(ranges);
 
-    Set<Text> rowsSeen = new HashSet<>();
+    Set<Text> rowsSeen = new HashSet<Text>();
 
     int count = 0;
 
@@ -105,8 +104,8 @@ public class ContinuousBatchWalker {
     long t2 = System.currentTimeMillis();
 
     if (!rowsSeen.equals(batch)) {
-      HashSet<Text> copy1 = new HashSet<>(rowsSeen);
-      HashSet<Text> copy2 = new HashSet<>(batch);
+      HashSet<Text> copy1 = new HashSet<Text>(rowsSeen);
+      HashSet<Text> copy2 = new HashSet<Text>(batch);
 
       copy1.removeAll(batch);
       copy2.removeAll(rowsSeen);
@@ -134,7 +133,7 @@ public class ContinuousBatchWalker {
     }
   }
 
-  private static HashSet<Text> rowsToQuery = new HashSet<>();
+  private static HashSet<Text> rowsToQuery = new HashSet<Text>();
 
   private static Set<Text> getBatch(Scanner scanner, long min, long max, int batchSize, Random r) {
 
@@ -161,7 +160,7 @@ public class ContinuousBatchWalker {
       sleepUninterruptibly(100, TimeUnit.MILLISECONDS);
     }
 
-    HashSet<Text> ret = new HashSet<>();
+    HashSet<Text> ret = new HashSet<Text>();
 
     Iterator<Text> iter = rowsToQuery.iterator();
 