diff --git a/test/src/test/java/org/apache/accumulo/test/functional/KerberosProxyIT.java b/test/src/test/java/org/apache/accumulo/test/functional/KerberosProxyIT.java
index fda35861a5..e4c46d6cf4 100644
--- a/test/src/test/java/org/apache/accumulo/test/functional/KerberosProxyIT.java
+++ b/test/src/test/java/org/apache/accumulo/test/functional/KerberosProxyIT.java
@@ -22,7 +22,6 @@ import static org.junit.Assert.assertTrue;
 
 import java.io.File;
 import java.io.FileWriter;
-import java.io.IOException;
 import java.net.ConnectException;
 import java.net.InetAddress;
 import java.nio.ByteBuffer;
@@ -32,7 +31,6 @@ import java.util.List;
 import java.util.Map;
 import java.util.Properties;
 
-import org.apache.accumulo.cluster.ClusterUser;
 import org.apache.accumulo.core.client.security.tokens.KerberosToken;
 import org.apache.accumulo.core.client.security.tokens.PasswordToken;
 import org.apache.accumulo.core.conf.Property;
@@ -44,7 +42,6 @@ import org.apache.accumulo.harness.TestingKdc;
 import org.apache.accumulo.minicluster.impl.MiniAccumuloClusterImpl;
 import org.apache.accumulo.minicluster.impl.MiniAccumuloConfigImpl;
 import org.apache.accumulo.proxy.Proxy;
-import org.apache.accumulo.proxy.ProxyServer;
 import org.apache.accumulo.proxy.thrift.AccumuloProxy;
 import org.apache.accumulo.proxy.thrift.AccumuloProxy.Client;
 import org.apache.accumulo.proxy.thrift.AccumuloSecurityException;
@@ -63,15 +60,11 @@ import org.apache.thrift.protocol.TCompactProtocol;
 import org.apache.thrift.transport.TSaslClientTransport;
 import org.apache.thrift.transport.TSocket;
 import org.apache.thrift.transport.TTransportException;
-import org.hamcrest.Description;
-import org.hamcrest.TypeSafeMatcher;
 import org.junit.After;
 import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.BeforeClass;
-import org.junit.Rule;
 import org.junit.Test;
-import org.junit.rules.ExpectedException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -81,19 +74,11 @@ import org.slf4j.LoggerFactory;
 public class KerberosProxyIT extends AccumuloIT {
   private static final Logger log = LoggerFactory.getLogger(KerberosProxyIT.class);
 
-  @Rule
-  public ExpectedException thrown = ExpectedException.none();
-
   private static TestingKdc kdc;
   private static String krbEnabledForITs = null;
   private static File proxyKeytab;
   private static String hostname, proxyPrimary, proxyPrincipal;
 
-  @Override
-  protected int defaultTimeoutSeconds() {
-    return 60 * 5;
-  }
-
   @BeforeClass
   public static void startKdc() throws Exception {
     kdc = new TestingKdc();
@@ -139,7 +124,7 @@ public class KerberosProxyIT extends AccumuloIT {
         cfg.setNumTservers(1);
         Map<String,String> siteCfg = cfg.getSiteConfig();
         // Allow the proxy to impersonate the client user, but no one else
-        siteCfg.put(Property.INSTANCE_RPC_SASL_PROXYUSERS.getKey() + proxyPrincipal + ".users", kdc.getRootUser().getPrincipal());
+        siteCfg.put(Property.INSTANCE_RPC_SASL_PROXYUSERS.getKey() + proxyPrincipal + ".users", kdc.getClientPrincipal());
         siteCfg.put(Property.INSTANCE_RPC_SASL_PROXYUSERS.getKey() + proxyPrincipal + ".hosts", "*");
         cfg.setSiteConfig(siteCfg);
       }
@@ -178,19 +163,9 @@ public class KerberosProxyIT extends AccumuloIT {
     UserGroupInformation.setConfiguration(conf);
 
     boolean success = false;
-    ClusterUser rootUser = kdc.getRootUser();
+    UserGroupInformation.loginUserFromKeytab(kdc.getClientPrincipal(), kdc.getClientKeytab().getAbsolutePath());
+    UserGroupInformation ugi = UserGroupInformation.getCurrentUser();
     for (int i = 0; i < 10 && !success; i++) {
-
-      UserGroupInformation ugi;
-      try {
-        UserGroupInformation.loginUserFromKeytab(rootUser.getPrincipal(), rootUser.getKeytab().getAbsolutePath());
-        ugi = UserGroupInformation.getCurrentUser();
-      } catch (IOException ex) {
-        log.info("Login as root is failing", ex);
-        Thread.sleep(1000);
-        continue;
-      }
-
       TSocket socket = new TSocket(hostname, proxyPort);
       log.info("Connecting to proxy with server primary '" + proxyPrimary + "' running on " + hostname);
       TSaslClientTransport transport = new TSaslClientTransport("GSSAPI", null, proxyPrimary, hostname, Collections.singletonMap("javax.security.sasl.qop",
@@ -235,8 +210,7 @@ public class KerberosProxyIT extends AccumuloIT {
 
   @Test
   public void testProxyClient() throws Exception {
-    ClusterUser rootUser = kdc.getRootUser();
-    UserGroupInformation.loginUserFromKeytab(rootUser.getPrincipal(), rootUser.getKeytab().getAbsolutePath());
+    UserGroupInformation.loginUserFromKeytab(kdc.getClientPrincipal(), kdc.getClientKeytab().getAbsolutePath());
     UserGroupInformation ugi = UserGroupInformation.getCurrentUser();
 
     TSocket socket = new TSocket(hostname, proxyPort);
@@ -253,7 +227,7 @@ public class KerberosProxyIT extends AccumuloIT {
     Client client = factory.getClient(new TCompactProtocol(ugiTransport), new TCompactProtocol(ugiTransport));
 
     // Will fail if the proxy can impersonate the client
-    ByteBuffer login = client.login(rootUser.getPrincipal(), Collections.<String,String> emptyMap());
+    ByteBuffer login = client.login(kdc.getClientPrincipal(), Collections.<String,String> emptyMap());
 
     // For all of the below actions, the proxy user doesn't have permission to do any of them, but the client user does.
     // The fact that any of them actually run tells us that impersonation is working.
@@ -310,7 +284,7 @@ public class KerberosProxyIT extends AccumuloIT {
     ugiTransport.close();
   }
 
-  @Test
+  @Test(expected = AccumuloSecurityException.class)
   public void testDisallowedClientForImpersonation() throws Exception {
     String user = testName.getMethodName();
     File keytab = new File(kdc.getKeytabDir(), user + ".keytab");
@@ -322,16 +296,6 @@ public class KerberosProxyIT extends AccumuloIT {
 
     log.info("Logged in as " + ugi);
 
-    // Expect an AccumuloSecurityException
-    thrown.expect(AccumuloSecurityException.class);
-    // Error msg would look like:
-    //
-    // org.apache.accumulo.core.client.AccumuloSecurityException: Error BAD_CREDENTIALS for user Principal in credentials object should match kerberos
-    // principal.
-    // Expected 'proxy/hw10447.local@EXAMPLE.COM' but was 'testDisallowedClientForImpersonation@EXAMPLE.COM' - Username or Password is Invalid)
-    thrown.expect(new ThriftExceptionMatchesPattern(".*Error BAD_CREDENTIALS.*"));
-    thrown.expect(new ThriftExceptionMatchesPattern(".*Expected '" + proxyPrincipal + "' but was '" + kdc.qualifyUser(user) + "'.*"));
-
     TSocket socket = new TSocket(hostname, proxyPort);
     log.info("Connecting to proxy with server primary '" + proxyPrimary + "' running on " + hostname);
 
@@ -357,13 +321,8 @@ public class KerberosProxyIT extends AccumuloIT {
     }
   }
 
-  @Test
+  @Test(expected = AccumuloSecurityException.class)
   public void testMismatchPrincipals() throws Exception {
-    ClusterUser rootUser = kdc.getRootUser();
-    // Should get an AccumuloSecurityException and the given message
-    thrown.expect(AccumuloSecurityException.class);
-    thrown.expect(new ThriftExceptionMatchesPattern(ProxyServer.RPC_ACCUMULO_PRINCIPAL_MISMATCH_MSG));
-
     // Make a new user
     String user = testName.getMethodName();
     File keytab = new File(kdc.getKeytabDir(), user + ".keytab");
@@ -393,34 +352,11 @@ public class KerberosProxyIT extends AccumuloIT {
     // The proxy needs to recognize that the requested principal isn't the same as the SASL principal and fail
     // Accumulo should let this through -- we need to rely on the proxy to dump me before talking to accumulo
     try {
-      client.login(rootUser.getPrincipal(), Collections.<String,String> emptyMap());
+      client.login(kdc.getClientPrincipal(), Collections.<String,String> emptyMap());
     } finally {
       if (null != ugiTransport) {
         ugiTransport.close();
       }
     }
   }
-
-  private static class ThriftExceptionMatchesPattern extends TypeSafeMatcher<AccumuloSecurityException> {
-    private String pattern;
-
-    public ThriftExceptionMatchesPattern(String pattern) {
-      this.pattern = pattern;
-    }
-
-    @Override
-    protected boolean matchesSafely(AccumuloSecurityException item) {
-      return item.isSetMsg() && item.msg.matches(pattern);
-    }
-
-    @Override
-    public void describeTo(Description description) {
-      description.appendText("matches pattern ").appendValue(pattern);
-    }
-
-    @Override
-    protected void describeMismatchSafely(AccumuloSecurityException item, Description mismatchDescription) {
-      mismatchDescription.appendText("does not match");
-    }
-  }
 }