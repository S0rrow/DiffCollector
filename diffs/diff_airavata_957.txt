diff --git a/modules/gfac-core/src/main/java/org/apache/airavata/core/gfac/provider/impl/GramProvider.java b/modules/gfac-core/src/main/java/org/apache/airavata/core/gfac/provider/impl/GramProvider.java
index 68fbed2c8..3535879f4 100644
--- a/modules/gfac-core/src/main/java/org/apache/airavata/core/gfac/provider/impl/GramProvider.java
+++ b/modules/gfac-core/src/main/java/org/apache/airavata/core/gfac/provider/impl/GramProvider.java
@@ -26,9 +26,7 @@ import java.net.MalformedURLException;
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.net.URL;
-import java.util.Arrays;
 import java.util.Iterator;
-import java.util.List;
 import java.util.Map;
 
 import org.apache.airavata.common.workflow.execution.context.WorkflowContextHeaderBuilder;
@@ -302,23 +300,8 @@ public class GramProvider extends AbstractProvider {
 
                     String stdout = ftp.readRemoteFile(stdoutURI, gssCred, localStdOutFile);
                     String stderr = ftp.readRemoteFile(stderrURI, gssCred, localStdErrFile);
-                    Map<String,?> stringMap = null;
-                    // This is to handle exception during the output parsing.
-                    try{
-                         stringMap = OutputUtils.fillOutputFromStdout(invocationContext.<ActualParameter>getOutput(), stdout);
-                    }catch(Exception e){
-                        int errCode = listener.getError();
-                            String errorMsg = "Job " + job.getID() + " on host " + host.getHostAddress();
-                            JobSubmissionFault error = new JobSubmissionFault(this, new Exception(errorMsg), "GFAC HOST",
-                                    gateKeeper, job.getRSL());
-                            if (errCode == 8) {
-                                error.setReason(JobSubmissionFault.JOB_CANCEL);
-                            } else {
-                                error.setReason(JobSubmissionFault.JOB_FAILED + " With Null Output Value :");
-                            }
-                            invocationContext.getExecutionContext().getNotifier().executionFail(invocationContext,error,errorMsg);
-                            throw error;
-                    }
+                    Map<String, ?> stringMap = OutputUtils.fillOutputFromStdout(invocationContext.<ActualParameter>getOutput(), stdout);
+
                     MessageContext<Object> input = invocationContext.getOutput();
                     for (Iterator<String> iterator = input.getNames(); iterator.hasNext(); ) {
                         String paramName = iterator.next();
@@ -362,6 +345,8 @@ public class GramProvider extends AbstractProvider {
              */
             throw pe;
 
+        } catch (XmlException e) {
+            throw new ProviderException("Cannot read output:" + e.getMessage(), e);
         } catch (IOException e) {
             throw new ProviderException(e.getMessage(), e);
         } catch (SecurityException e) {
@@ -441,51 +426,30 @@ public class GramProvider extends AbstractProvider {
             ActualParameter actualParameter = (ActualParameter) input
                     .getValue(paramName);
             //TODO: Review this with type
-            GlobusHostType host = (GlobusHostType) invocationContext.getExecutionDescription().getHost().getType();
-            GridFtp ftp = new GridFtp();
-            gssContext = (GSISecurityContext) invocationContext.getSecurityContext(MYPROXY_SECURITY_CONTEXT);
-            GSSCredential gssCred = null;
-            try {
-                gssCred = gssContext.getGssCredentails();
-            } catch (SecurityException e) {
-                e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
-            }
-            try {
-                if ("URI".equals(actualParameter.getType().getType().toString())) {
-                    for (String endpoint : host.getGridFTPEndPointArray()) {
-                        ((URIParameterType) actualParameter.getType()).setValue(stageInputFiles(outputFileStagingPath,
-                                paramValue, actualParameter, ftp, gssCred, endpoint));
-                    }
-                } else if ("URIArray".equals(actualParameter.getType().getType().toString())) {
-                    List<String> split = Arrays.asList(paramValue.split(","));
-                    StringBuffer stringBuffer = new StringBuffer("");
+            if ("URI".equals(actualParameter.getType().getType().toString())) {
+                try {
+                    GlobusHostType host = (GlobusHostType) invocationContext.getExecutionDescription().getHost().getType();
+                    GridFtp ftp = new GridFtp();
+                    gssContext = (GSISecurityContext) invocationContext.getSecurityContext(MYPROXY_SECURITY_CONTEXT);
+                    GSSCredential gssCred = gssContext.getGssCredentails();
                     for (String endpoint : host.getGridFTPEndPointArray()) {
-                        for (String paramValueEach : split) {
-                            stringBuffer.append(stageInputFiles(outputFileStagingPath, paramValueEach, actualParameter, ftp, gssCred, endpoint));
-                            if (split.size() != split.indexOf(paramValueEach) - 1) {
-                                stringBuffer.append(",");
-                            }
-                        }
-                        ((URIParameterType) actualParameter.getType()).setValue(stringBuffer.toString());
+                        URI srcURI = GfacUtils.createGsiftpURI(endpoint, paramValue);
+                        String fileName = new File(srcURI.getPath()).getName();
+                        File outputFile = new File(outputFileStagingPath + File.separator + fileName);
+                        ftp.readRemoteFile(srcURI,
+                                gssCred, outputFile);
+                        ((URIParameterType) actualParameter.getType()).setValue(outputFileStagingPath + File.separator + fileName);
                     }
-
+                } catch (URISyntaxException e) {
+                    throw new ProviderException(e.getMessage(), e);
+                } catch (ToolsException e) {
+                    throw new ProviderException(e.getMessage(), e);
+                } catch (SecurityException e) {
+                    throw new ProviderException(e.getMessage(), e);
                 }
-            } catch (URISyntaxException e) {
-                throw new ProviderException(e.getMessage(), e);
-            } catch (ToolsException e) {
-                throw new ProviderException(e.getMessage(), e);
             }
             outputNew.add(paramName, actualParameter);
         }
         invocationContext.setOutput(outputNew);
     }
-
-    private String stageInputFiles(String outputFileStagingPath, String paramValue, ActualParameter actualParameter, GridFtp ftp, GSSCredential gssCred, String endpoint) throws URISyntaxException, ToolsException {
-        URI srcURI = GfacUtils.createGsiftpURI(endpoint, paramValue);
-        String fileName = new File(srcURI.getPath()).getName();
-        File outputFile = new File(outputFileStagingPath + File.separator + fileName);
-        ftp.readRemoteFile(srcURI,
-                gssCred, outputFile);
-        return outputFileStagingPath + File.separator + fileName;
-    }
 }