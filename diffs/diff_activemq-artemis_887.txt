diff --git a/artemis-server/src/main/java/org/apache/activemq/artemis/core/replication/ReplicatedJournal.java b/artemis-server/src/main/java/org/apache/activemq/artemis/core/replication/ReplicatedJournal.java
index e66e9b3ad4..ab33e19238 100644
--- a/artemis-server/src/main/java/org/apache/activemq/artemis/core/replication/ReplicatedJournal.java
+++ b/artemis-server/src/main/java/org/apache/activemq/artemis/core/replication/ReplicatedJournal.java
@@ -19,22 +19,19 @@ package org.apache.activemq.artemis.core.replication;
 import java.util.List;
 import java.util.Map;
 
-import org.apache.activemq.artemis.core.io.SequentialFileFactory;
 import org.apache.activemq.artemis.core.journal.EncodingSupport;
 import org.apache.activemq.artemis.core.journal.IOCompletion;
 import org.apache.activemq.artemis.core.journal.Journal;
 import org.apache.activemq.artemis.core.journal.JournalLoadInformation;
 import org.apache.activemq.artemis.core.journal.LoaderCallback;
-import org.apache.activemq.artemis.core.persistence.Persister;
 import org.apache.activemq.artemis.core.journal.PreparedTransactionInfo;
 import org.apache.activemq.artemis.core.journal.RecordInfo;
+import org.apache.activemq.artemis.core.io.SequentialFileFactory;
 import org.apache.activemq.artemis.core.journal.TransactionFailureCallback;
 import org.apache.activemq.artemis.core.journal.impl.JournalFile;
 import org.apache.activemq.artemis.core.journal.impl.dataformat.ByteArrayEncoding;
 import org.apache.activemq.artemis.core.persistence.OperationContext;
 import org.apache.activemq.artemis.core.replication.ReplicationManager.ADD_OPERATION_TYPE;
-import org.apache.activemq.artemis.utils.collections.SparseArrayLinkedList;
-import org.jboss.logging.Logger;
 
 /**
  * Used by the {@link org.apache.activemq.artemis.core.persistence.impl.journal.JournalStorageManager} to replicate journal calls.
@@ -46,7 +43,11 @@ import org.jboss.logging.Logger;
  */
 public class ReplicatedJournal implements Journal {
 
-   private static final Logger log = Logger.getLogger(ReplicatedJournal.class);
+   private static final boolean trace = false;
+
+   private static void trace(final String message) {
+      System.out.println("ReplicatedJournal::" + message);
+   }
 
    private final ReplicationManager replicationManager;
 
@@ -63,11 +64,6 @@ public class ReplicatedJournal implements Journal {
       this.replicationManager = replicationManager;
    }
 
-   @Override
-   public void flush() throws Exception {
-
-   }
-
    /**
     * @param id
     * @param recordType
@@ -76,7 +72,6 @@ public class ReplicatedJournal implements Journal {
     * @throws Exception
     * @see org.apache.activemq.artemis.core.journal.Journal#appendAddRecord(long, byte, byte[], boolean)
     */
-   @Override
    public void appendAddRecord(final long id,
                                final byte recordType,
                                final byte[] record,
@@ -84,17 +79,15 @@ public class ReplicatedJournal implements Journal {
       this.appendAddRecord(id, recordType, new ByteArrayEncoding(record), sync);
    }
 
-   @Override
    public void appendAddRecord(final long id,
                                final byte recordType,
-                               Persister persister,
-                               final Object record,
+                               final EncodingSupport record,
                                final boolean sync) throws Exception {
-      if (log.isTraceEnabled()) {
-         log.trace("Append record id = " + id + " recordType = " + recordType);
+      if (ReplicatedJournal.trace) {
+         ReplicatedJournal.trace("Append record id = " + id + " recordType = " + recordType);
       }
-      replicationManager.appendUpdateRecord(journalID, ADD_OPERATION_TYPE.ADD, id, recordType, persister, record);
-      localJournal.appendAddRecord(id, recordType, persister, record, sync);
+      replicationManager.appendUpdateRecord(journalID, ADD_OPERATION_TYPE.ADD, id, recordType, record);
+      localJournal.appendAddRecord(id, recordType, record, sync);
    }
 
    /**
@@ -105,18 +98,16 @@ public class ReplicatedJournal implements Journal {
     * @throws Exception
     * @see org.apache.activemq.artemis.core.journal.Journal#appendAddRecord(long, byte, org.apache.activemq.artemis.core.journal.EncodingSupport, boolean)
     */
-   @Override
    public void appendAddRecord(final long id,
                                final byte recordType,
-                               Persister persister,
-                               final Object record,
+                               final EncodingSupport record,
                                final boolean sync,
                                final IOCompletion completionCallback) throws Exception {
-      if (log.isTraceEnabled()) {
-         log.trace("Append record id = " + id + " recordType = " + recordType);
+      if (ReplicatedJournal.trace) {
+         ReplicatedJournal.trace("Append record id = " + id + " recordType = " + recordType);
       }
-      replicationManager.appendUpdateRecord(journalID, ADD_OPERATION_TYPE.ADD, id, recordType, persister, record);
-      localJournal.appendAddRecord(id, recordType, persister, record, sync, completionCallback);
+      replicationManager.appendUpdateRecord(journalID, ADD_OPERATION_TYPE.ADD, id, recordType, record);
+      localJournal.appendAddRecord(id, recordType, record, sync, completionCallback);
    }
 
    /**
@@ -127,7 +118,6 @@ public class ReplicatedJournal implements Journal {
     * @throws Exception
     * @see org.apache.activemq.artemis.core.journal.Journal#appendAddRecordTransactional(long, long, byte, byte[])
     */
-   @Override
    public void appendAddRecordTransactional(final long txID,
                                             final long id,
                                             final byte recordType,
@@ -143,17 +133,15 @@ public class ReplicatedJournal implements Journal {
     * @throws Exception
     * @see org.apache.activemq.artemis.core.journal.Journal#appendAddRecordTransactional(long, long, byte, org.apache.activemq.artemis.core.journal.EncodingSupport)
     */
-   @Override
    public void appendAddRecordTransactional(final long txID,
                                             final long id,
                                             final byte recordType,
-                                            final Persister persister,
-                                            final Object record) throws Exception {
-      if (log.isTraceEnabled()) {
-         log.trace("Append record txID=" + id + " recordType = " + recordType);
+                                            final EncodingSupport record) throws Exception {
+      if (ReplicatedJournal.trace) {
+         ReplicatedJournal.trace("Append record TXid = " + id + " recordType = " + recordType);
       }
-      replicationManager.appendAddRecordTransactional(journalID, ADD_OPERATION_TYPE.ADD, txID, id, recordType, persister, record);
-      localJournal.appendAddRecordTransactional(txID, id, recordType, persister, record);
+      replicationManager.appendAddRecordTransactional(journalID, ADD_OPERATION_TYPE.ADD, txID, id, recordType, record);
+      localJournal.appendAddRecordTransactional(txID, id, recordType, record);
    }
 
    /**
@@ -162,31 +150,28 @@ public class ReplicatedJournal implements Journal {
     * @throws Exception
     * @see org.apache.activemq.artemis.core.journal.Journal#appendCommitRecord(long, boolean)
     */
-   @Override
    public void appendCommitRecord(final long txID, final boolean sync) throws Exception {
-      if (log.isTraceEnabled()) {
-         log.trace("AppendCommit txID=" + txID);
+      if (ReplicatedJournal.trace) {
+         ReplicatedJournal.trace("AppendCommit " + txID);
       }
       replicationManager.appendCommitRecord(journalID, txID, sync, true);
       localJournal.appendCommitRecord(txID, sync);
    }
 
-   @Override
    public void appendCommitRecord(final long txID, final boolean sync, final IOCompletion callback) throws Exception {
-      if (log.isTraceEnabled()) {
-         log.trace("AppendCommit " + txID);
+      if (ReplicatedJournal.trace) {
+         ReplicatedJournal.trace("AppendCommit " + txID);
       }
       replicationManager.appendCommitRecord(journalID, txID, sync, true);
       localJournal.appendCommitRecord(txID, sync, callback);
    }
 
-   @Override
    public void appendCommitRecord(long txID,
                                   boolean sync,
                                   IOCompletion callback,
                                   boolean lineUpContext) throws Exception {
-      if (log.isTraceEnabled()) {
-         log.trace("AppendCommit " + txID);
+      if (ReplicatedJournal.trace) {
+         ReplicatedJournal.trace("AppendCommit " + txID);
       }
       replicationManager.appendCommitRecord(journalID, txID, sync, lineUpContext);
       localJournal.appendCommitRecord(txID, sync, callback, lineUpContext);
@@ -200,49 +185,24 @@ public class ReplicatedJournal implements Journal {
     */
    @Override
    public void appendDeleteRecord(final long id, final boolean sync) throws Exception {
-      if (log.isTraceEnabled()) {
-         log.trace("AppendDelete " + id);
+      if (ReplicatedJournal.trace) {
+         ReplicatedJournal.trace("AppendDelete " + id);
       }
       replicationManager.appendDeleteRecord(journalID, id);
       localJournal.appendDeleteRecord(id, sync);
    }
 
-   /**
-    * @param id
-    * @param sync
-    * @throws Exception
-    * @see org.apache.activemq.artemis.core.journal.Journal#appendDeleteRecord(long, boolean)
-    */
-   @Override
-   public boolean tryAppendDeleteRecord(final long id, final boolean sync) throws Exception {
-      if (log.isTraceEnabled()) {
-         log.trace("AppendDelete " + id);
-      }
-      replicationManager.appendDeleteRecord(journalID, id);
-      return localJournal.tryAppendDeleteRecord(id, sync);
-   }
-
    @Override
    public void appendDeleteRecord(final long id,
                                   final boolean sync,
                                   final IOCompletion completionCallback) throws Exception {
-      if (log.isTraceEnabled()) {
-         log.trace("AppendDelete " + id);
+      if (ReplicatedJournal.trace) {
+         ReplicatedJournal.trace("AppendDelete " + id);
       }
       replicationManager.appendDeleteRecord(journalID, id);
       localJournal.appendDeleteRecord(id, sync, completionCallback);
    }
 
-   @Override
-   public boolean tryAppendDeleteRecord(final long id,
-                                  final boolean sync,
-                                  final IOCompletion completionCallback) throws Exception {
-      if (log.isTraceEnabled()) {
-         log.trace("AppendDelete " + id);
-      }
-      replicationManager.appendDeleteRecord(journalID, id);
-      return localJournal.tryAppendDeleteRecord(id, sync, completionCallback);
-   }
    /**
     * @param txID
     * @param id
@@ -250,7 +210,6 @@ public class ReplicatedJournal implements Journal {
     * @throws Exception
     * @see org.apache.activemq.artemis.core.journal.Journal#appendDeleteRecordTransactional(long, long, byte[])
     */
-   @Override
    public void appendDeleteRecordTransactional(final long txID, final long id, final byte[] record) throws Exception {
       this.appendDeleteRecordTransactional(txID, id, new ByteArrayEncoding(record));
    }
@@ -262,12 +221,11 @@ public class ReplicatedJournal implements Journal {
     * @throws Exception
     * @see org.apache.activemq.artemis.core.journal.Journal#appendDeleteRecordTransactional(long, long, org.apache.activemq.artemis.core.journal.EncodingSupport)
     */
-   @Override
    public void appendDeleteRecordTransactional(final long txID,
                                                final long id,
                                                final EncodingSupport record) throws Exception {
-      if (log.isTraceEnabled()) {
-         log.trace("AppendDelete txID=" + txID + " id=" + id);
+      if (ReplicatedJournal.trace) {
+         ReplicatedJournal.trace("AppendDelete txID=" + txID + " id=" + id);
       }
       replicationManager.appendDeleteRecordTransactional(journalID, txID, id, record);
       localJournal.appendDeleteRecordTransactional(txID, id, record);
@@ -279,10 +237,9 @@ public class ReplicatedJournal implements Journal {
     * @throws Exception
     * @see org.apache.activemq.artemis.core.journal.Journal#appendDeleteRecordTransactional(long, long)
     */
-   @Override
    public void appendDeleteRecordTransactional(final long txID, final long id) throws Exception {
-      if (log.isTraceEnabled()) {
-         log.trace("AppendDelete (noencoding) txID=" + txID + " id=" + id);
+      if (ReplicatedJournal.trace) {
+         ReplicatedJournal.trace("AppendDelete (noencoding) txID=" + txID + " id=" + id);
       }
       replicationManager.appendDeleteRecordTransactional(journalID, txID, id);
       localJournal.appendDeleteRecordTransactional(txID, id);
@@ -295,7 +252,6 @@ public class ReplicatedJournal implements Journal {
     * @throws Exception
     * @see org.apache.activemq.artemis.core.journal.Journal#appendPrepareRecord(long, byte[], boolean)
     */
-   @Override
    public void appendPrepareRecord(final long txID, final byte[] transactionData, final boolean sync) throws Exception {
       this.appendPrepareRecord(txID, new ByteArrayEncoding(transactionData), sync);
    }
@@ -307,12 +263,11 @@ public class ReplicatedJournal implements Journal {
     * @throws Exception
     * @see org.apache.activemq.artemis.core.journal.Journal#appendPrepareRecord(long, org.apache.activemq.artemis.core.journal.EncodingSupport, boolean)
     */
-   @Override
    public void appendPrepareRecord(final long txID,
                                    final EncodingSupport transactionData,
                                    final boolean sync) throws Exception {
-      if (log.isTraceEnabled()) {
-         log.trace("AppendPrepare txID=" + txID);
+      if (ReplicatedJournal.trace) {
+         ReplicatedJournal.trace("AppendPrepare txID=" + txID);
       }
       replicationManager.appendPrepareRecord(journalID, txID, transactionData);
       localJournal.appendPrepareRecord(txID, transactionData, sync);
@@ -323,8 +278,8 @@ public class ReplicatedJournal implements Journal {
                                    final EncodingSupport transactionData,
                                    final boolean sync,
                                    final IOCompletion callback) throws Exception {
-      if (log.isTraceEnabled()) {
-         log.trace("AppendPrepare txID=" + txID);
+      if (ReplicatedJournal.trace) {
+         ReplicatedJournal.trace("AppendPrepare txID=" + txID);
       }
       replicationManager.appendPrepareRecord(journalID, txID, transactionData);
       localJournal.appendPrepareRecord(txID, transactionData, sync, callback);
@@ -336,19 +291,17 @@ public class ReplicatedJournal implements Journal {
     * @throws Exception
     * @see org.apache.activemq.artemis.core.journal.Journal#appendRollbackRecord(long, boolean)
     */
-   @Override
    public void appendRollbackRecord(final long txID, final boolean sync) throws Exception {
-      if (log.isTraceEnabled()) {
-         log.trace("AppendRollback " + txID);
+      if (ReplicatedJournal.trace) {
+         ReplicatedJournal.trace("AppendRollback " + txID);
       }
       replicationManager.appendRollbackRecord(journalID, txID);
       localJournal.appendRollbackRecord(txID, sync);
    }
 
-   @Override
    public void appendRollbackRecord(final long txID, final boolean sync, final IOCompletion callback) throws Exception {
-      if (log.isTraceEnabled()) {
-         log.trace("AppendRollback " + txID);
+      if (ReplicatedJournal.trace) {
+         ReplicatedJournal.trace("AppendRollback " + txID);
       }
       replicationManager.appendRollbackRecord(journalID, txID);
       localJournal.appendRollbackRecord(txID, sync, callback);
@@ -362,7 +315,6 @@ public class ReplicatedJournal implements Journal {
     * @throws Exception
     * @see org.apache.activemq.artemis.core.journal.Journal#appendUpdateRecord(long, byte, byte[], boolean)
     */
-   @Override
    public void appendUpdateRecord(final long id,
                                   final byte recordType,
                                   final byte[] record,
@@ -370,15 +322,6 @@ public class ReplicatedJournal implements Journal {
       this.appendUpdateRecord(id, recordType, new ByteArrayEncoding(record), sync);
    }
 
-   @Override
-   public boolean tryAppendUpdateRecord(final long id,
-                                     final byte recordType,
-                                     final byte[] record,
-                                     final boolean sync) throws Exception {
-
-      return this.tryAppendUpdateRecord(id, recordType, new ByteArrayEncoding(record), sync);
-   }
-
    /**
     * @param id
     * @param recordType
@@ -390,55 +333,26 @@ public class ReplicatedJournal implements Journal {
    @Override
    public void appendUpdateRecord(final long id,
                                   final byte recordType,
-                                  final Persister persister,
-                                  final Object record,
+                                  final EncodingSupport record,
                                   final boolean sync) throws Exception {
-      if (log.isTraceEnabled()) {
-         log.trace("AppendUpdateRecord id = " + id + " , recordType = " + recordType);
+      if (ReplicatedJournal.trace) {
+         ReplicatedJournal.trace("AppendUpdateRecord id = " + id + " , recordType = " + recordType);
       }
-      replicationManager.appendUpdateRecord(journalID, ADD_OPERATION_TYPE.UPDATE, id, recordType, persister, record);
-      localJournal.appendUpdateRecord(id, recordType, persister, record, sync);
-   }
-
-   @Override
-   public boolean tryAppendUpdateRecord(final long id,
-                                  final byte recordType,
-                                  final Persister persister,
-                                  final Object record,
-                                  final boolean sync) throws Exception {
-      if (log.isTraceEnabled()) {
-         log.trace("AppendUpdateRecord id = " + id + " , recordType = " + recordType);
-      }
-      replicationManager.appendUpdateRecord(journalID, ADD_OPERATION_TYPE.UPDATE, id, recordType, persister, record);
-      return localJournal.tryAppendUpdateRecord(id, recordType, persister, record, sync);
+      replicationManager.appendUpdateRecord(journalID, ADD_OPERATION_TYPE.UPDATE, id, recordType, record);
+      localJournal.appendUpdateRecord(id, recordType, record, sync);
    }
 
    @Override
    public void appendUpdateRecord(final long id,
                                   final byte journalRecordType,
-                                  final Persister persister,
-                                  final Object record,
-                                  final boolean sync,
-                                  final IOCompletion completionCallback) throws Exception {
-      if (log.isTraceEnabled()) {
-         log.trace("AppendUpdateRecord id = " + id + " , recordType = " + journalRecordType);
-      }
-      replicationManager.appendUpdateRecord(journalID, ADD_OPERATION_TYPE.UPDATE, id, journalRecordType, persister, record);
-      localJournal.appendUpdateRecord(id, journalRecordType, persister, record, sync, completionCallback);
-   }
-
-   @Override
-   public boolean tryAppendUpdateRecord(final long id,
-                                  final byte journalRecordType,
-                                  final Persister persister,
-                                  final Object record,
+                                  final EncodingSupport record,
                                   final boolean sync,
                                   final IOCompletion completionCallback) throws Exception {
-      if (log.isTraceEnabled()) {
-         log.trace("AppendUpdateRecord id = " + id + " , recordType = " + journalRecordType);
+      if (ReplicatedJournal.trace) {
+         ReplicatedJournal.trace("AppendUpdateRecord id = " + id + " , recordType = " + journalRecordType);
       }
-      replicationManager.appendUpdateRecord(journalID, ADD_OPERATION_TYPE.UPDATE, id, journalRecordType, persister, record);
-      return localJournal.tryAppendUpdateRecord(id, journalRecordType, persister, record, sync, completionCallback);
+      replicationManager.appendUpdateRecord(journalID, ADD_OPERATION_TYPE.UPDATE, id, journalRecordType, record);
+      localJournal.appendUpdateRecord(id, journalRecordType, record, sync, completionCallback);
    }
 
    /**
@@ -449,7 +363,6 @@ public class ReplicatedJournal implements Journal {
     * @throws Exception
     * @see org.apache.activemq.artemis.core.journal.Journal#appendUpdateRecordTransactional(long, long, byte, byte[])
     */
-   @Override
    public void appendUpdateRecordTransactional(final long txID,
                                                final long id,
                                                final byte recordType,
@@ -465,17 +378,15 @@ public class ReplicatedJournal implements Journal {
     * @throws Exception
     * @see org.apache.activemq.artemis.core.journal.Journal#appendUpdateRecordTransactional(long, long, byte, org.apache.activemq.artemis.core.journal.EncodingSupport)
     */
-   @Override
    public void appendUpdateRecordTransactional(final long txID,
                                                final long id,
                                                final byte recordType,
-                                               final Persister persister,
-                                               final Object record) throws Exception {
-      if (log.isTraceEnabled()) {
-         log.trace("AppendUpdateRecord txid=" + txID + " id = " + id + " , recordType = " + recordType);
+                                               final EncodingSupport record) throws Exception {
+      if (ReplicatedJournal.trace) {
+         ReplicatedJournal.trace("AppendUpdateRecord txid=" + txID + " id = " + id + " , recordType = " + recordType);
       }
-      replicationManager.appendAddRecordTransactional(journalID, ADD_OPERATION_TYPE.UPDATE, txID, id, recordType, persister, record);
-      localJournal.appendUpdateRecordTransactional(txID, id, recordType, persister, record);
+      replicationManager.appendAddRecordTransactional(journalID, ADD_OPERATION_TYPE.UPDATE, txID, id, recordType, record);
+      localJournal.appendUpdateRecordTransactional(txID, id, recordType, record);
    }
 
    /**
@@ -485,27 +396,10 @@ public class ReplicatedJournal implements Journal {
     * @throws Exception
     * @see org.apache.activemq.artemis.core.journal.Journal#load(java.util.List, java.util.List, org.apache.activemq.artemis.core.journal.TransactionFailureCallback)
     */
-   @Override
    public JournalLoadInformation load(final List<RecordInfo> committedRecords,
                                       final List<PreparedTransactionInfo> preparedTransactions,
-                                      final TransactionFailureCallback transactionFailure,
-                                      final boolean fixbadTX) throws Exception {
-      return localJournal.load(committedRecords, preparedTransactions, transactionFailure, fixbadTX);
-   }
-
-   /**
-    * @param committedRecords
-    * @param preparedTransactions
-    * @param transactionFailure
-    * @throws Exception
-    * @see org.apache.activemq.artemis.core.journal.Journal#load(java.util.List, java.util.List, org.apache.activemq.artemis.core.journal.TransactionFailureCallback)
-    */
-   @Override
-   public JournalLoadInformation load(final SparseArrayLinkedList<RecordInfo> committedRecords,
-                                      final List<PreparedTransactionInfo> preparedTransactions,
-                                      final TransactionFailureCallback transactionFailure,
-                                      final boolean fixbadTX) throws Exception {
-      return localJournal.load(committedRecords, preparedTransactions, transactionFailure, fixbadTX);
+                                      final TransactionFailureCallback transactionFailure) throws Exception {
+      return localJournal.load(committedRecords, preparedTransactions, transactionFailure);
    }
 
    /**
@@ -513,16 +407,22 @@ public class ReplicatedJournal implements Journal {
     * @throws Exception
     * @see org.apache.activemq.artemis.core.journal.Journal#load(org.apache.activemq.artemis.core.journal.LoaderCallback)
     */
-   @Override
    public JournalLoadInformation load(final LoaderCallback reloadManager) throws Exception {
       return localJournal.load(reloadManager);
    }
 
+   /**
+    * @param pages
+    * @see org.apache.activemq.artemis.core.journal.Journal#perfBlast(int)
+    */
+   public void perfBlast(final int pages) {
+      localJournal.perfBlast(pages);
+   }
+
    /**
     * @throws Exception
     * @see org.apache.activemq.artemis.core.server.ActiveMQComponent#start()
     */
-   @Override
    public void start() throws Exception {
       localJournal.start();
    }
@@ -531,17 +431,14 @@ public class ReplicatedJournal implements Journal {
     * @throws Exception
     * @see org.apache.activemq.artemis.core.server.ActiveMQComponent#stop()
     */
-   @Override
    public void stop() throws Exception {
       localJournal.stop();
    }
 
-   @Override
    public int getAlignment() throws Exception {
       return localJournal.getAlignment();
    }
 
-   @Override
    public boolean isStarted() {
       return localJournal.isStarted();
    }
@@ -551,22 +448,18 @@ public class ReplicatedJournal implements Journal {
       return localJournal.loadInternalOnly();
    }
 
-   @Override
    public int getNumberOfRecords() {
       return localJournal.getNumberOfRecords();
    }
 
-   @Override
    public void runDirectJournalBlast() throws Exception {
       localJournal.runDirectJournalBlast();
    }
 
-   @Override
    public int getUserVersion() {
       return localJournal.getUserVersion();
    }
 
-   @Override
    public void lineUpContext(IOCompletion callback) {
       ((OperationContext) callback).replicationLineUp();
       localJournal.lineUpContext(callback);
@@ -593,8 +486,8 @@ public class ReplicatedJournal implements Journal {
    }
 
    @Override
-   public void forceMoveNextFile() throws Exception {
-      localJournal.forceMoveNextFile();
+   public void forceMoveNextFile() {
+      throw new UnsupportedOperationException();
    }
 
    @Override
@@ -607,7 +500,6 @@ public class ReplicatedJournal implements Journal {
       throw new UnsupportedOperationException();
    }
 
-   @Override
    public int getFileSize() {
       return localJournal.getFileSize();
    }
@@ -626,9 +518,4 @@ public class ReplicatedJournal implements Journal {
    public void replicationSyncFinished() {
       throw new UnsupportedOperationException("should never get called");
    }
-
-   @Override
-   public long getMaxRecordSize() {
-      return localJournal.getMaxRecordSize();
-   }
 }