diff --git a/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java b/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java
index a252cadebd..ff8e9e62e9 100644
--- a/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java
+++ b/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java
@@ -30,7 +30,6 @@ import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Map.Entry;
-import java.util.Properties;
 import java.util.Set;
 import java.util.TreeMap;
 import java.util.UUID;
@@ -55,7 +54,6 @@ import org.apache.accumulo.core.data.Key;
 import org.apache.accumulo.core.data.Value;
 import org.apache.accumulo.core.data.thrift.TConstraintViolationSummary;
 import org.apache.accumulo.core.security.AuditLevel;
-import org.apache.accumulo.core.security.handler.Authenticator;
 import org.apache.accumulo.core.tabletserver.thrift.ConstraintViolationException;
 import org.apache.accumulo.core.trace.DistributedTrace;
 import org.apache.accumulo.core.util.BadArgumentException;
@@ -93,7 +91,6 @@ import org.apache.accumulo.core.util.shell.commands.EGrepCommand;
 import org.apache.accumulo.core.util.shell.commands.ExecfileCommand;
 import org.apache.accumulo.core.util.shell.commands.ExitCommand;
 import org.apache.accumulo.core.util.shell.commands.ExportTableCommand;
-import org.apache.accumulo.core.util.shell.commands.FateCommand;
 import org.apache.accumulo.core.util.shell.commands.FlushCommand;
 import org.apache.accumulo.core.util.shell.commands.FormatterCommand;
 import org.apache.accumulo.core.util.shell.commands.GetAuthsCommand;
@@ -247,28 +244,17 @@ public class Shell extends ShellOptions {
     String sysUser = System.getProperty("user.name");
     if (sysUser == null)
       sysUser = "root";
-    String user = cl.getOptionValue(usernameOption.getOpt());
-    String principal = cl.getOptionValue(principalOption.getOpt(), sysUser);
+    String user = cl.getOptionValue(usernameOption.getOpt(), sysUser);
     
     String passw = cl.getOptionValue(passwOption.getOpt(), null);
     tabCompletion = !cl.hasOption(tabCompleteOption.getLongOpt());
-    String[] loginOptions = cl.getOptionValues(loginOption.getOpt());
     
     // Use a fake (Mock), ZK, or HdfsZK Accumulo instance
     setInstance(cl);
     
     // process default parameters if unspecified
+    byte[] pass;
     try {
-      if (loginOptions != null) {
-        Properties props = new Properties();
-        for (String loginOption : loginOptions)
-          for (String lo : loginOption.split(",")) {
-            String[] split = lo.split("=");
-            props.put(split[0], split[1]);
-          }
-        this.token = instance.getAuthenticator().login(props);
-      }
-
       if (!cl.hasOption(fakeOption.getLongOpt())) {
         DistributedTrace.enable(instance, new ZooReader(instance.getZooKeepers(), instance.getZooKeepersSessionTimeOut()), "shell", InetAddress.getLocalHost()
             .getHostName());
@@ -281,45 +267,19 @@ public class Shell extends ShellOptions {
         }
       });
       
-      if (passw != null) {
-        this.token = new PasswordToken(passw);
-      }
-      
-      if (this.token == null) {
-        List<Set<Authenticator.AuthProperty>> loginList = instance.getAuthenticator().getProperties();
-        int loginMethod = 0;
-        if (loginList.size() > 1) {
-          System.out.println("Please select your preferred login method: ");
-          int i = 0;
-          for (Set<Authenticator.AuthProperty> set : loginList) {
-            System.out.println(i + " " + set);
-            i++;
-          }
-          loginMethod = Integer.parseInt(reader.readLine());
-        }
-        Set<Authenticator.AuthProperty> chosenMethod = loginList.get(loginMethod);
-        Properties props = new Properties();
-        for (Authenticator.AuthProperty prop : chosenMethod) {
-          String value;
-          if (prop.getMask())
-            value = readMaskedLine("Enter " + prop + ": ", '*');
-          else
-            value = reader.readLine("Enter " + prop + ": ");
-          props.setProperty(prop.getKey(), value);
-        }
-        this.token = instance.getAuthenticator().login(props);
-      }
-      if (this.token == null) {
+      if (passw == null)
+        passw = readMaskedLine("Enter current password for '" + user + "'@'" + instance.getInstanceName() + "': ", '*');
+      if (passw == null) {
         reader.printNewline();
         configError = true;
         return true;
       } // user canceled
       
+      pass = passw.getBytes();
       this.setTableName("");
       this.principal = user;
-      if (this.principal == null)
-        this.principal = principal;
-      connector = instance.getConnector(this.principal, token);
+      this.token = new PasswordToken(pass);
+      connector = instance.getConnector(principal, token);
       
     } catch (Exception e) {
       printException(e);
@@ -352,8 +312,8 @@ public class Shell extends ShellOptions {
     Command[] otherCommands = {new HiddenCommand()};
     Command[] permissionsCommands = {new GrantCommand(), new RevokeCommand(), new SystemPermissionsCommand(), new TablePermissionsCommand(),
         new UserPermissionsCommand()};
-    Command[] stateCommands = {new AuthenticateCommand(), new ClsCommand(), new ClearCommand(), new FateCommand(), new NoTableCommand(), new SleepCommand(),
-        new TableCommand(), new UserCommand(), new WhoAmICommand()};
+    Command[] stateCommands = {new AuthenticateCommand(), new ClsCommand(), new ClearCommand(), new NoTableCommand(), new SleepCommand(), new TableCommand(),
+        new UserCommand(), new WhoAmICommand()};
     Command[] tableCommands = {new CloneTableCommand(), new ConfigCommand(), new CreateTableCommand(), new DeleteTableCommand(), new DropTableCommand(),
         new DUCommand(), new ExportTableCommand(), new ImportTableCommand(), new OfflineCommand(), new OnlineCommand(), new RenameTableCommand(),
         new TablesCommand()};
@@ -413,10 +373,6 @@ public class Shell extends ShellOptions {
     return connector;
   }
   
-  public Instance getInstance() {
-    return instance;
-  }
-  
   public static void main(String args[]) throws IOException {
     Shell shell = new Shell();
     shell.config(args);
@@ -449,12 +405,8 @@ public class Shell extends ShellOptions {
     
     if (execFile != null) {
       java.util.Scanner scanner = new java.util.Scanner(new File(execFile));
-      try {
-        while (scanner.hasNextLine())
-          execCommand(scanner.nextLine(), true, isVerbose());
-      } finally {
-        scanner.close();
-      }
+      while (scanner.hasNextLine())
+        execCommand(scanner.nextLine(), true, isVerbose());
     } else if (execCommand != null) {
       for (String command : execCommand.split("\n")) {
         execCommand(command, true, isVerbose());
@@ -524,7 +476,6 @@ public class Shell extends ShellOptions {
     return connector.whoami() + "@" + connector.getInstance().getInstanceName() + (getTableName().isEmpty() ? "" : " ") + getTableName() + "> ";
   }
   
-  @SuppressWarnings("deprecation")
   public void execCommand(String input, boolean ignoreAuthTimeout, boolean echoPrompt) throws IOException {
     audit.log(AuditLevel.AUDIT, getDefaultPrompt() + input);
     if (echoPrompt) {
@@ -829,7 +780,7 @@ public class Shell extends ShellOptions {
       writer.close();
     }
   };
-
+  
   public final void printLines(Iterator<String> lines, boolean paginate) throws IOException {
     printLines(lines, paginate, null);
   }
@@ -1002,6 +953,7 @@ public class Shell extends ShellOptions {
     return token;
   }
   
+  
   /**
    * Return the formatter for the current table.
    * 