diff --git a/repository/src/main/java/org/apache/atlas/repository/store/graph/v1/AtlasClassificationDefStoreV1.java b/repository/src/main/java/org/apache/atlas/repository/store/graph/v1/AtlasClassificationDefStoreV1.java
index 43f93d410..9afccbeb7 100644
--- a/repository/src/main/java/org/apache/atlas/repository/store/graph/v1/AtlasClassificationDefStoreV1.java
+++ b/repository/src/main/java/org/apache/atlas/repository/store/graph/v1/AtlasClassificationDefStoreV1.java
@@ -18,7 +18,6 @@
 package org.apache.atlas.repository.store.graph.v1;
 
 
-import org.apache.atlas.AtlasErrorCode;
 import org.apache.atlas.exception.AtlasBaseException;
 import org.apache.atlas.model.SearchFilter;
 import org.apache.atlas.model.typedef.AtlasClassificationDef;
@@ -27,82 +26,76 @@ import org.apache.atlas.repository.Constants;
 import org.apache.atlas.repository.graphdb.AtlasVertex;
 import org.apache.atlas.repository.store.graph.AtlasClassificationDefStore;
 import org.apache.atlas.repository.util.FilterUtil;
-import org.apache.atlas.type.AtlasClassificationType;
-import org.apache.atlas.type.AtlasType;
-import org.apache.atlas.type.AtlasTypeRegistry;
 import org.apache.atlas.typesystem.types.DataTypes.TypeCategory;
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import sun.security.provider.certpath.Vertex;
+
 import java.util.ArrayList;
 import java.util.Iterator;
+import java.util.LinkedList;
 import java.util.List;
 
 /**
  * ClassificationDef store in v1 format.
  */
-public class AtlasClassificationDefStoreV1 extends AtlasAbstractDefStoreV1 implements AtlasClassificationDefStore {
+public class AtlasClassificationDefStoreV1 implements AtlasClassificationDefStore {
     private static final Logger LOG = LoggerFactory.getLogger(AtlasClassificationDefStoreV1.class);
 
-    public AtlasClassificationDefStoreV1(AtlasTypeDefGraphStoreV1 typeDefStore, AtlasTypeRegistry typeRegistry) {
-        super(typeDefStore, typeRegistry);
+    private final AtlasTypeDefGraphStoreV1 typeDefStore;
+
+    public AtlasClassificationDefStoreV1(AtlasTypeDefGraphStoreV1 typeDefStore) {
+        super();
+
+        this.typeDefStore = typeDefStore;
     }
 
     @Override
-    public AtlasVertex preCreate(AtlasClassificationDef classificationDef) throws AtlasBaseException {
+    public AtlasClassificationDef create(AtlasClassificationDef classificationDef) throws AtlasBaseException {
         if (LOG.isDebugEnabled()) {
-            LOG.debug("==> AtlasClassificationDefStoreV1.preCreate({})", classificationDef);
+            LOG.debug("==> AtlasClassificationDefStoreV1.create({})", classificationDef);
         }
 
-        AtlasType type = typeRegistry.getType(classificationDef.getName());
+        AtlasVertex vertex = typeDefStore.findTypeVertexByName(classificationDef.getName());
 
-        if (type.getTypeCategory() != AtlasType.TypeCategory.CLASSIFICATION) {
-            throw new AtlasBaseException(AtlasErrorCode.TYPE_MATCH_FAILED, classificationDef.getName(), TypeCategory.TRAIT.name());
+        if (vertex != null) {
+            throw new AtlasBaseException(classificationDef.getName() + ": type already exists");
         }
 
-        AtlasVertex ret = typeDefStore.findTypeVertexByName(classificationDef.getName());
-
-        if (ret != null) {
-            throw new AtlasBaseException(AtlasErrorCode.TYPE_ALREADY_EXISTS, classificationDef.getName());
-        }
+        vertex = typeDefStore.createTypeVertex(classificationDef);
 
-        ret = typeDefStore.createTypeVertex(classificationDef);
+        toVertex(classificationDef, vertex);
 
-        updateVertexPreCreate(classificationDef, (AtlasClassificationType)type, ret);
+        AtlasClassificationDef ret = toClassificationDef(vertex);
 
         if (LOG.isDebugEnabled()) {
-            LOG.debug("<== AtlasClassificationDefStoreV1.preCreate({}): {}", classificationDef, ret);
+            LOG.debug("<== AtlasClassificationDefStoreV1.create({}): {}", classificationDef, ret);
         }
 
         return ret;
     }
 
     @Override
-    public AtlasClassificationDef create(AtlasClassificationDef classificationDef, Object preCreateResult)
-        throws AtlasBaseException {
+    public List<AtlasClassificationDef> create(List<AtlasClassificationDef> classificationDefs) throws AtlasBaseException {
         if (LOG.isDebugEnabled()) {
-            LOG.debug("==> AtlasClassificationDefStoreV1.create({}, {})", classificationDef, preCreateResult);
-        }
-
-        AtlasVertex vertex;
-
-        if (preCreateResult == null || !(preCreateResult instanceof AtlasVertex)) {
-            vertex = preCreate(classificationDef);
-        } else {
-            vertex = (AtlasVertex)preCreateResult;
+            LOG.debug("==> AtlasClassificationDefStoreV1.create({})", classificationDefs);
+        }
+        List<AtlasClassificationDef> classificationDefList = new LinkedList<>();
+        for (AtlasClassificationDef structDef : classificationDefs) {
+            try {
+                AtlasClassificationDef atlasClassificationDef = create(structDef);
+                classificationDefList.add(atlasClassificationDef);
+            } catch (AtlasBaseException baseException) {
+                LOG.error("Failed to create {}", structDef);
+                LOG.error("Exception: {}", baseException);
+            }
         }
-
-        updateVertexAddReferences(classificationDef, vertex);
-
-        AtlasClassificationDef ret = toClassificationDef(vertex);
-
         if (LOG.isDebugEnabled()) {
-            LOG.debug("<== AtlasClassificationDefStoreV1.create({}, {}): {}", classificationDef, preCreateResult, ret);
+            LOG.debug("<== AtlasClassificationDefStoreV1.create({}, {})", classificationDefs, classificationDefList);
         }
-
-        return ret;
+        return classificationDefList;
     }
 
     @Override
@@ -111,17 +104,17 @@ public class AtlasClassificationDefStoreV1 extends AtlasAbstractDefStoreV1 imple
             LOG.debug("==> AtlasClassificationDefStoreV1.getAll()");
         }
 
-        List<AtlasClassificationDef> ret = new ArrayList<>();
-
-        Iterator<AtlasVertex> vertices = typeDefStore.findTypeVerticesByCategory(TypeCategory.TRAIT);
-        while (vertices.hasNext()) {
-            ret.add(toClassificationDef(vertices.next()));
+        List<AtlasClassificationDef> classificationDefs = new LinkedList<>();
+        Iterator<AtlasVertex> verticesByCategory = typeDefStore.findTypeVerticesByCategory(TypeCategory.TRAIT);
+        while (verticesByCategory.hasNext()) {
+            AtlasClassificationDef classificationDef = toClassificationDef(verticesByCategory.next());
+            classificationDefs.add(classificationDef);
         }
 
         if (LOG.isDebugEnabled()) {
-            LOG.debug("<== AtlasClassificationDefStoreV1.getAll(): count={}", ret.size());
+            LOG.debug("<== AtlasClassificationDefStoreV1.getAll()");
         }
-        return ret;
+        return classificationDefs;
     }
 
     @Override
@@ -133,7 +126,7 @@ public class AtlasClassificationDefStoreV1 extends AtlasAbstractDefStoreV1 imple
         AtlasVertex vertex = typeDefStore.findTypeVertexByNameAndCategory(name, TypeCategory.TRAIT);
 
         if (vertex == null) {
-            throw new AtlasBaseException(AtlasErrorCode.TYPE_NAME_NOT_FOUND, name);
+            throw new AtlasBaseException("no classificationDef exists with name " + name);
         }
 
         vertex.getProperty(Constants.TYPE_CATEGORY_PROPERTY_KEY, TypeCategory.class);
@@ -156,7 +149,7 @@ public class AtlasClassificationDefStoreV1 extends AtlasAbstractDefStoreV1 imple
         AtlasVertex vertex = typeDefStore.findTypeVertexByGuidAndCategory(guid, TypeCategory.TRAIT);
 
         if (vertex == null) {
-            throw new AtlasBaseException(AtlasErrorCode.TYPE_GUID_NOT_FOUND, guid);
+            throw new AtlasBaseException("no classificationDef exists with guid " + guid);
         }
 
         AtlasClassificationDef ret = toClassificationDef(vertex);
@@ -169,42 +162,18 @@ public class AtlasClassificationDefStoreV1 extends AtlasAbstractDefStoreV1 imple
     }
 
     @Override
-    public AtlasClassificationDef update(AtlasClassificationDef classifiDef) throws AtlasBaseException {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("==> AtlasClassificationDefStoreV1.update({})", classifiDef);
-        }
-
-        AtlasClassificationDef ret = StringUtils.isNotBlank(classifiDef.getGuid())
-                  ? updateByGuid(classifiDef.getGuid(), classifiDef) : updateByName(classifiDef.getName(), classifiDef);
-
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("<== AtlasClassificationDefStoreV1.update({}): {}", classifiDef, ret);
-        }
-
-        return ret;
-    }
-
-    @Override
-    public AtlasClassificationDef updateByName(String name, AtlasClassificationDef classificationDef)
-        throws AtlasBaseException {
+    public AtlasClassificationDef updateByName(String name, AtlasClassificationDef classificationDef) throws AtlasBaseException {
         if (LOG.isDebugEnabled()) {
             LOG.debug("==> AtlasClassificationDefStoreV1.updateByName({}, {})", name, classificationDef);
         }
 
-        AtlasType type = typeRegistry.getType(classificationDef.getName());
-
-        if (type.getTypeCategory() != AtlasType.TypeCategory.CLASSIFICATION) {
-            throw new AtlasBaseException(AtlasErrorCode.TYPE_MATCH_FAILED, classificationDef.getName(), TypeCategory.TRAIT.name());
-        }
-
         AtlasVertex vertex = typeDefStore.findTypeVertexByNameAndCategory(name, TypeCategory.TRAIT);
 
         if (vertex == null) {
-            throw new AtlasBaseException(AtlasErrorCode.TYPE_NAME_NOT_FOUND, name);
+            throw new AtlasBaseException("no classificationDef exists with name " + name);
         }
 
-        updateVertexPreUpdate(classificationDef, (AtlasClassificationType)type, vertex);
-        updateVertexAddReferences(classificationDef, vertex);
+        toVertex(classificationDef, vertex);
 
         AtlasClassificationDef ret = toClassificationDef(vertex);
 
@@ -221,20 +190,13 @@ public class AtlasClassificationDefStoreV1 extends AtlasAbstractDefStoreV1 imple
             LOG.debug("==> AtlasClassificationDefStoreV1.updateByGuid({})", guid);
         }
 
-        AtlasType type = typeRegistry.getTypeByGuid(guid);
-
-        if (type.getTypeCategory() != AtlasType.TypeCategory.CLASSIFICATION) {
-            throw new AtlasBaseException(AtlasErrorCode.TYPE_MATCH_FAILED, classificationDef.getName(), TypeCategory.TRAIT.name());
-        }
-
         AtlasVertex vertex = typeDefStore.findTypeVertexByGuidAndCategory(guid, TypeCategory.TRAIT);
 
         if (vertex == null) {
-            throw new AtlasBaseException(AtlasErrorCode.TYPE_GUID_NOT_FOUND, guid);
+            throw new AtlasBaseException("no classificationDef exists with guid " + guid);
         }
 
-        updateVertexPreUpdate(classificationDef, (AtlasClassificationType)type, vertex);
-        updateVertexAddReferences(classificationDef, vertex);
+        toVertex(classificationDef, vertex);
 
         AtlasClassificationDef ret = toClassificationDef(vertex);
 
@@ -246,38 +208,39 @@ public class AtlasClassificationDefStoreV1 extends AtlasAbstractDefStoreV1 imple
     }
 
     @Override
-    public AtlasVertex preDeleteByName(String name) throws AtlasBaseException {
+    public List<AtlasClassificationDef> update(List<AtlasClassificationDef> classificationDefs) throws AtlasBaseException {
         if (LOG.isDebugEnabled()) {
-            LOG.debug("==> AtlasClassificationDefStoreV1.preDeleteByName({})", name);
+            LOG.debug("==> AtlasClassificationDefStoreV1.update({})", classificationDefs);
         }
 
-        AtlasVertex ret = typeDefStore.findTypeVertexByNameAndCategory(name, TypeCategory.TRAIT);
+        List<AtlasClassificationDef> updatedClassificationDefs = new ArrayList<>();
 
-        if (ret == null) {
-            throw new AtlasBaseException(AtlasErrorCode.TYPE_NAME_NOT_FOUND, name);
+        for (AtlasClassificationDef classificationDef : classificationDefs) {
+            try {
+                AtlasClassificationDef updatedDef = updateByName(classificationDef.getName(), classificationDef);
+                updatedClassificationDefs.add(updatedDef);
+            } catch (AtlasBaseException ex) {
+                LOG.error("Failed to update {}", classificationDef);
+            }
         }
 
-        typeDefStore.deleteTypeVertexOutEdges(ret);
-
         if (LOG.isDebugEnabled()) {
-            LOG.debug("<== AtlasClassificationDefStoreV1.preDeleteByName({}): ret=", name, ret);
+            LOG.debug("<== AtlasClassificationDefStoreV1.update({}): {}", classificationDefs, updatedClassificationDefs);
         }
 
-        return ret;
+        return updatedClassificationDefs;
     }
 
     @Override
-    public void deleteByName(String name, Object preDeleteResult) throws AtlasBaseException {
+    public void deleteByName(String name) throws AtlasBaseException {
         if (LOG.isDebugEnabled()) {
             LOG.debug("==> AtlasClassificationDefStoreV1.deleteByName({})", name);
         }
 
-        AtlasVertex vertex;
+        AtlasVertex vertex = typeDefStore.findTypeVertexByNameAndCategory(name, TypeCategory.TRAIT);
 
-        if (preDeleteResult == null || !(preDeleteResult instanceof AtlasVertex)) {
-            vertex = preDeleteByName(name);
-        } else {
-            vertex = (AtlasVertex)preDeleteResult;
+        if (vertex == null) {
+            throw new AtlasBaseException("no classificationDef exists with name " + name);
         }
 
         typeDefStore.deleteTypeVertex(vertex);
@@ -288,38 +251,34 @@ public class AtlasClassificationDefStoreV1 extends AtlasAbstractDefStoreV1 imple
     }
 
     @Override
-    public AtlasVertex preDeleteByGuid(String guid) throws AtlasBaseException {
+    public void deleteByNames(List<String> names) throws AtlasBaseException {
         if (LOG.isDebugEnabled()) {
-            LOG.debug("==> AtlasClassificationDefStoreV1.preDeleteByGuid({})", guid);
+            LOG.debug("==> AtlasClassificationDefStoreV1.deleteByNames({})", names);
         }
 
-        AtlasVertex ret = typeDefStore.findTypeVertexByGuidAndCategory(guid, TypeCategory.TRAIT);
-
-        if (ret == null) {
-            throw new AtlasBaseException(AtlasErrorCode.TYPE_GUID_NOT_FOUND, guid);
+        for (String name : names) {
+            try {
+                deleteByName(name);
+            } catch (AtlasBaseException ex) {
+                LOG.error("Failed to delete {}", name);
+            }
         }
 
-        typeDefStore.deleteTypeVertexOutEdges(ret);
-
         if (LOG.isDebugEnabled()) {
-            LOG.debug("<== AtlasClassificationDefStoreV1.preDeleteByGuid({}): ret=", guid, ret);
+            LOG.debug("<== AtlasClassificationDefStoreV1.deleteByNames({})", names);
         }
-
-        return ret;
     }
 
     @Override
-    public void deleteByGuid(String guid, Object preDeleteResult) throws AtlasBaseException {
+    public void deleteByGuid(String guid) throws AtlasBaseException {
         if (LOG.isDebugEnabled()) {
             LOG.debug("==> AtlasClassificationDefStoreV1.deleteByGuid({})", guid);
         }
 
-        AtlasVertex vertex;
+        AtlasVertex vertex = typeDefStore.findTypeVertexByGuidAndCategory(guid, TypeCategory.TRAIT);
 
-        if (preDeleteResult == null || !(preDeleteResult instanceof AtlasVertex)) {
-            vertex = preDeleteByGuid(guid);
-        } else {
-            vertex = (AtlasVertex)preDeleteResult;
+        if (vertex == null) {
+            throw new AtlasBaseException("no classificationDef exists with guid " + guid);
         }
 
         typeDefStore.deleteTypeVertex(vertex);
@@ -329,57 +288,66 @@ public class AtlasClassificationDefStoreV1 extends AtlasAbstractDefStoreV1 imple
         }
     }
 
+    @Override
+    public void deleteByGuids(List<String> guids) throws AtlasBaseException {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("==> AtlasClassificationDefStoreV1.deleteByGuids({})", guids);
+        }
+
+        for (String guid : guids) {
+            try {
+                deleteByGuid(guid);
+            } catch (AtlasBaseException ex) {
+                LOG.error("Failed to delete {}", guid);
+            }
+        }
+
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("<== AtlasClassificationDefStoreV1.deleteByGuids({})", guids);
+        }
+
+    }
+
     @Override
     public AtlasClassificationDefs search(SearchFilter filter) throws AtlasBaseException {
         if (LOG.isDebugEnabled()) {
             LOG.debug("==> AtlasClassificationDefStoreV1.search({})", filter);
         }
 
-        List<AtlasClassificationDef> classificationDefs = new ArrayList<>();
-        Iterator<AtlasVertex>        vertices           = typeDefStore.findTypeVerticesByCategory(TypeCategory.TRAIT);
+        List<AtlasClassificationDef> classificationDefs = new ArrayList<AtlasClassificationDef>();
+
+        Iterator<AtlasVertex> vertices = typeDefStore.findTypeVerticesByCategory(TypeCategory.TRAIT);
 
         while(vertices.hasNext()) {
-            AtlasVertex            vertex            = vertices.next();
+            AtlasVertex       vertex  = vertices.next();
             AtlasClassificationDef classificationDef = toClassificationDef(vertex);
 
             if (classificationDef != null) {
-                classificationDefs.add(classificationDef);
+                classificationDefs.add(classificationDef); // TODO: add only if this passes filter
             }
         }
 
         if (CollectionUtils.isNotEmpty(classificationDefs)) {
             CollectionUtils.filter(classificationDefs, FilterUtil.getPredicateFromSearchFilter(filter));
+        }
 
-            AtlasClassificationDefs ret = new AtlasClassificationDefs(classificationDefs);
 
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("<== AtlasClassificationDefStoreV1.search({}): {}", filter, ret);
-            }
-            return ret;
-        } else {
-            throw new AtlasBaseException(AtlasErrorCode.NO_SEARCH_RESULTS);
-        }
-    }
+        AtlasClassificationDefs ret = new AtlasClassificationDefs(classificationDefs);
 
-    private void updateVertexPreCreate(AtlasClassificationDef  classificationDef,
-                                       AtlasClassificationType classificationType,
-                                       AtlasVertex             vertex) {
-        AtlasStructDefStoreV1.updateVertexPreCreate(classificationDef, classificationType, vertex, typeDefStore);
-    }
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("<== AtlasClassificationDefStoreV1.search({}): {}", filter, ret);
+        }
 
-    private void updateVertexPreUpdate(AtlasClassificationDef  classificationDef,
-                                       AtlasClassificationType classificationType,
-                                       AtlasVertex             vertex) throws AtlasBaseException {
-        AtlasStructDefStoreV1.updateVertexPreUpdate(classificationDef, classificationType, vertex, typeDefStore);
+        return ret;
     }
 
-    private void updateVertexAddReferences(AtlasClassificationDef classificationDef, AtlasVertex vertex) throws AtlasBaseException {
-        AtlasStructDefStoreV1.updateVertexAddReferences(classificationDef, vertex, typeDefStore);
+    private void toVertex(AtlasClassificationDef classificationDef, AtlasVertex vertex) {
+        AtlasStructDefStoreV1.toVertex(classificationDef, vertex, typeDefStore);
 
-        typeDefStore.createSuperTypeEdges(vertex, classificationDef.getSuperTypes(), TypeCategory.TRAIT);
+        typeDefStore.createSuperTypeEdges(vertex, classificationDef.getSuperTypes());
     }
 
-    private AtlasClassificationDef toClassificationDef(AtlasVertex vertex) throws AtlasBaseException {
+    private AtlasClassificationDef toClassificationDef(AtlasVertex vertex) {
         AtlasClassificationDef ret = null;
 
         if (vertex != null && typeDefStore.isTypeVertex(vertex, TypeCategory.TRAIT)) {