diff --git a/graphdb/janus/src/main/java/org/apache/atlas/repository/graphdb/janus/AtlasJanusGraphManagement.java b/graphdb/janus/src/main/java/org/apache/atlas/repository/graphdb/janus/AtlasJanusGraphManagement.java
index cf1965b2f..036c566f7 100644
--- a/graphdb/janus/src/main/java/org/apache/atlas/repository/graphdb/janus/AtlasJanusGraphManagement.java
+++ b/graphdb/janus/src/main/java/org/apache/atlas/repository/graphdb/janus/AtlasJanusGraphManagement.java
@@ -25,7 +25,6 @@ import org.janusgraph.core.schema.Mapping;
 import org.janusgraph.core.schema.PropertyKeyMaker;
 import org.janusgraph.core.schema.JanusGraphIndex;
 import org.janusgraph.core.schema.JanusGraphManagement;
-import org.janusgraph.core.schema.JanusGraphManagement.IndexBuilder;
 import org.janusgraph.graphdb.internal.Token;
 import org.apache.atlas.repository.graphdb.AtlasCardinality;
 import org.apache.atlas.repository.graphdb.AtlasEdgeLabel;
@@ -34,6 +33,7 @@ import org.apache.atlas.repository.graphdb.AtlasGraphManagement;
 import org.apache.atlas.repository.graphdb.AtlasPropertyKey;
 import org.apache.commons.lang.StringUtils;
 import org.apache.tinkerpop.gremlin.structure.Edge;
+import org.apache.tinkerpop.gremlin.structure.Element;
 import org.apache.tinkerpop.gremlin.structure.Vertex;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -46,52 +46,50 @@ import java.util.Set;
  * Janus implementation of AtlasGraphManagement.
  */
 public class AtlasJanusGraphManagement implements AtlasGraphManagement {
-    private static final Logger LOG            = LoggerFactory.getLogger(AtlasJanusGraphManagement.class);
+
+    private static final Logger LOG = LoggerFactory.getLogger(AtlasJanusGraphManagement.class);
+
     private static final char[] RESERVED_CHARS = { '{', '}', '"', '$', Token.SEPARATOR_CHAR };
 
-    private AtlasJanusGraph      graph;
+    private AtlasJanusGraph graph;
     private JanusGraphManagement management;
-    private Set<String>          newMultProperties = new HashSet<>();
+
+    private Set<String> newMultProperties = new HashSet<>();
 
     public AtlasJanusGraphManagement(AtlasJanusGraph graph, JanusGraphManagement managementSystem) {
         this.management = managementSystem;
-        this.graph      = graph;
+        this.graph = graph;
     }
 
     @Override
-    public void createVertexMixedIndex(String indexName, String backingIndex, List<AtlasPropertyKey> propertyKeys) {
-        IndexBuilder indexBuilder = management.buildIndex(indexName, Vertex.class);
+    public void createVertexIndex(String propertyName, String backingIndex, List<AtlasPropertyKey> propertyKeys) {
 
+        JanusGraphManagement.IndexBuilder indexBuilder = management.buildIndex(propertyName, Vertex.class);
         for (AtlasPropertyKey key : propertyKeys) {
             PropertyKey janusKey = AtlasJanusObjectFactory.createPropertyKey(key);
             indexBuilder.addKey(janusKey);
         }
-
         indexBuilder.buildMixedIndex(backingIndex);
     }
 
     @Override
-    public void createEdgeMixedIndex(String indexName, String backingIndex, List<AtlasPropertyKey> propertyKeys) {
-        IndexBuilder indexBuilder = management.buildIndex(indexName, Edge.class);
+    public void createEdgeIndex(String index, String backingIndex) {
+        buildMixedIndex(index, Edge.class, backingIndex);
+    }
 
-        for (AtlasPropertyKey key : propertyKeys) {
-            PropertyKey janusKey = AtlasJanusObjectFactory.createPropertyKey(key);
-            indexBuilder.addKey(janusKey);
-        }
+    private void buildMixedIndex(String index, Class<? extends Element> janusClass, String backingIndex) {
 
-        indexBuilder.buildMixedIndex(backingIndex);
+        management.buildIndex(index, janusClass).buildMixedIndex(backingIndex);
     }
 
     @Override
-    public void createFullTextMixedIndex(String indexName, String backingIndex, List<AtlasPropertyKey> propertyKeys) {
-        IndexBuilder indexBuilder = management.buildIndex(indexName, Vertex.class);
+    public void createFullTextIndex(String indexName, AtlasPropertyKey propertyKey, String backingIndex) {
 
-        for (AtlasPropertyKey key : propertyKeys) {
-            PropertyKey janusKey = AtlasJanusObjectFactory.createPropertyKey(key);
-            indexBuilder.addKey(janusKey, org.janusgraph.core.schema.Parameter.of("mapping", Mapping.TEXT));
-        }
+        PropertyKey fullText = AtlasJanusObjectFactory.createPropertyKey(propertyKey);
 
-        indexBuilder.buildMixedIndex(backingIndex);
+        management.buildIndex(indexName, Vertex.class)
+                .addKey(fullText, org.janusgraph.core.schema.Parameter.of("mapping", Mapping.TEXT))
+                .buildMixedIndex(backingIndex);
     }
 
     @Override
@@ -116,28 +114,25 @@ public class AtlasJanusGraphManagement implements AtlasGraphManagement {
         //for some reason, name checking was removed from StandardPropertyKeyMaker.make()
         //in Janus.  For consistency, do the check here.
         Preconditions.checkArgument(StringUtils.isNotBlank(name), "Need to specify name");
-
         for (char c : RESERVED_CHARS) {
-            Preconditions.checkArgument(name.indexOf(c) < 0, "Name can not contains reserved character %s: %s", c, name);
+            Preconditions.checkArgument(name.indexOf(c) < 0, "Name can not contains reserved character %s: %s", c,
+                    name);
         }
 
     }
 
     @Override
     public AtlasPropertyKey makePropertyKey(String propertyName, Class propertyClass, AtlasCardinality cardinality) {
+
         if (cardinality.isMany()) {
             newMultProperties.add(propertyName);
         }
-
         PropertyKeyMaker propertyKeyBuilder = management.makePropertyKey(propertyName).dataType(propertyClass);
-
         if (cardinality != null) {
             Cardinality janusCardinality = AtlasJanusObjectFactory.createCardinality(cardinality);
             propertyKeyBuilder.cardinality(janusCardinality);
         }
-
         PropertyKey propertyKey = propertyKeyBuilder.make();
-
         return GraphDbObjectFactory.createPropertyKey(propertyKey);
     }
 
@@ -156,7 +151,6 @@ public class AtlasJanusGraphManagement implements AtlasGraphManagement {
 
         for (int i = 0;; i++) {
             String deletedKeyName = janusPropertyKey + "_deleted_" + i;
-
             if (null == management.getPropertyKey(deletedKeyName)) {
                 management.changeName(janusPropertyKey, deletedKeyName);
                 break;
@@ -167,7 +161,6 @@ public class AtlasJanusGraphManagement implements AtlasGraphManagement {
     @Override
     public AtlasPropertyKey getPropertyKey(String propertyName) {
         checkName(propertyName);
-
         return GraphDbObjectFactory.createPropertyKey(management.getPropertyKey(propertyName));
     }
 
@@ -176,50 +169,37 @@ public class AtlasJanusGraphManagement implements AtlasGraphManagement {
         return GraphDbObjectFactory.createEdgeLabel(management.getEdgeLabel(label));
     }
 
-    @Override
-    public void addMixedIndex(String indexName, AtlasPropertyKey propertyKey) {
-        PropertyKey     janusKey    = AtlasJanusObjectFactory.createPropertyKey(propertyKey);
-        JanusGraphIndex vertexIndex = management.getGraphIndex(indexName);
-
-        management.addIndexKey(vertexIndex, janusKey);
-    }
-
-    @Override
-    public AtlasGraphIndex getGraphIndex(String indexName) {
-        JanusGraphIndex index = management.getGraphIndex(indexName);
-
-        return GraphDbObjectFactory.createGraphIndex(index);
-    }
-
-    @Override
-    public void createVertexCompositeIndex(String propertyName, boolean isUnique, List<AtlasPropertyKey> propertyKeys) {
-        IndexBuilder indexBuilder = management.buildIndex(propertyName, Vertex.class);
+    public void createExactMatchVertexIndex(String propertyName, boolean enforceUniqueness,
+                                      List<AtlasPropertyKey> propertyKeys) {
 
+        JanusGraphManagement.IndexBuilder indexBuilder = management.buildIndex(propertyName, Vertex.class);
         for (AtlasPropertyKey key : propertyKeys) {
             PropertyKey janusKey = AtlasJanusObjectFactory.createPropertyKey(key);
             indexBuilder.addKey(janusKey);
         }
-
-        if (isUnique) {
+        if (enforceUniqueness) {
             indexBuilder.unique();
         }
-
         indexBuilder.buildCompositeIndex();
     }
 
     @Override
-    public void createEdgeCompositeIndex(String propertyName, boolean isUnique, List<AtlasPropertyKey> propertyKeys) {
-        IndexBuilder indexBuilder = management.buildIndex(propertyName, Edge.class);
-
-        for (AtlasPropertyKey key : propertyKeys) {
-            PropertyKey janusKey = AtlasJanusObjectFactory.createPropertyKey(key);
-            indexBuilder.addKey(janusKey);
-        }
+    public void addVertexIndexKey(String indexName, AtlasPropertyKey propertyKey) {
+        PropertyKey janusKey = AtlasJanusObjectFactory.createPropertyKey(propertyKey);
+        JanusGraphIndex vertexIndex = management.getGraphIndex(indexName);
+        management.addIndexKey(vertexIndex, janusKey);
+    }
 
-        if (isUnique) {
-            indexBuilder.unique();
-        }
+    @Override
+    public AtlasGraphIndex getGraphIndex(String indexName) {
+        JanusGraphIndex index = management.getGraphIndex(indexName);
+        return GraphDbObjectFactory.createGraphIndex(index);
+    }
 
-        indexBuilder.buildCompositeIndex();
+    @Override
+    public void createExactMatchIndex(String propertyName, boolean isUnique,
+            List<AtlasPropertyKey> propertyKeys) {
+        createExactMatchVertexIndex(propertyName, isUnique, propertyKeys);
     }
-}
\ No newline at end of file
+
+}