diff --git a/airavata-services/services-security/src/main/java/org/apache/airavata/service/security/KeyCloakSecurityManager.java b/airavata-services/services-security/src/main/java/org/apache/airavata/service/security/KeyCloakSecurityManager.java
index 50145ecfc..d912afc98 100644
--- a/airavata-services/services-security/src/main/java/org/apache/airavata/service/security/KeyCloakSecurityManager.java
+++ b/airavata-services/services-security/src/main/java/org/apache/airavata/service/security/KeyCloakSecurityManager.java
@@ -31,31 +31,16 @@ import org.apache.airavata.model.appcatalog.gatewaygroups.GatewayGroups;
 import org.apache.airavata.model.appcatalog.gatewayprofile.GatewayResourceProfile;
 import org.apache.airavata.model.credential.store.PasswordCredential;
 import org.apache.airavata.model.security.AuthzToken;
-import org.apache.airavata.model.workspace.Gateway;
 import org.apache.airavata.registry.api.RegistryService;
 import org.apache.airavata.registry.api.client.RegistryServiceClientFactory;
 import org.apache.airavata.registry.api.exception.RegistryServiceException;
 import org.apache.airavata.security.AiravataSecurityException;
 import org.apache.airavata.security.util.TrustStoreManager;
-import org.apache.airavata.service.security.authzcache.AuthzCacheEntry;
-import org.apache.airavata.service.security.authzcache.AuthzCacheIndex;
-import org.apache.airavata.service.security.authzcache.AuthzCacheManager;
-import org.apache.airavata.service.security.authzcache.AuthzCacheManagerFactory;
-import org.apache.airavata.service.security.authzcache.AuthzCachedStatus;
+import org.apache.airavata.service.security.authzcache.*;
 import org.apache.airavata.sharing.registry.client.SharingRegistryServiceClientFactory;
 import org.apache.airavata.sharing.registry.models.SharingRegistryException;
 import org.apache.airavata.sharing.registry.models.UserGroup;
 import org.apache.airavata.sharing.registry.service.cpi.SharingRegistryService;
-import org.apache.http.Consts;
-import org.apache.http.HttpHeaders;
-import org.apache.http.NameValuePair;
-import org.apache.http.client.entity.UrlEncodedFormEntity;
-import org.apache.http.client.methods.CloseableHttpResponse;
-import org.apache.http.client.methods.HttpPost;
-import org.apache.http.impl.client.CloseableHttpClient;
-import org.apache.http.impl.client.HttpClients;
-import org.apache.http.message.BasicNameValuePair;
-import org.apache.http.util.EntityUtils;
 import org.apache.thrift.TException;
 import org.json.JSONArray;
 import org.json.JSONObject;
@@ -63,13 +48,9 @@ import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import java.io.BufferedReader;
-import java.io.IOException;
 import java.io.InputStreamReader;
 import java.net.HttpURLConnection;
 import java.net.URL;
-import java.nio.charset.StandardCharsets;
-import java.util.ArrayList;
-import java.util.Base64;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -275,25 +256,6 @@ public class KeyCloakSecurityManager implements AiravataSecurityManager {
         }
     }
 
-    @Override
-    public AuthzToken getUserManagementServiceAccountAuthzToken(String gatewayId) throws AiravataSecurityException {
-        try {
-            initServiceClients();
-            Gateway gateway = registryServiceClient.getGateway(gatewayId);
-            String tokenURL = getTokenEndpoint(gatewayId);
-            JSONObject clientCredentials = getClientCredentials(tokenURL, gateway.getOauthClientId(), gateway.getOauthClientSecret());
-            String accessToken = clientCredentials.getString("access_token");
-            AuthzToken authzToken = new AuthzToken(accessToken);
-            authzToken.putToClaimsMap(Constants.GATEWAY_ID, gatewayId);
-            authzToken.putToClaimsMap(Constants.USER_NAME, gateway.getOauthClientId());
-            return authzToken;
-        } catch (Exception e) {
-            throw new AiravataSecurityException(e);
-        } finally {
-            closeServiceClients();
-        }
-    }
-
     private GatewayGroupMembership getGatewayGroupMembership(String username, String token, String gatewayId) throws Exception {
         validateToken(username, token, gatewayId);
         GatewayGroups gatewayGroups = getGatewayGroups(gatewayId);
@@ -398,42 +360,6 @@ public class KeyCloakSecurityManager implements AiravataSecurityManager {
         return tokenInfo.get("access_token").toString();
     }
 
-    private String getTokenEndpoint(String gatewayId) throws Exception {
-        String openIdConnectUrl = getOpenIDConfigurationUrl(gatewayId);
-        JSONObject openIdConnectConfig = new JSONObject(getFromUrl(openIdConnectUrl, null));
-        return openIdConnectConfig.getString("token_endpoint");
-    }
-
-    private JSONObject getClientCredentials(String tokenURL, String clientId, String clientSecret) throws ApplicationSettingsException, AiravataSecurityException {
-
-        CloseableHttpClient httpClient = HttpClients.createSystem();
-
-        HttpPost httpPost = new HttpPost(tokenURL);
-        String encoded = Base64.getEncoder().encodeToString((clientId+":"+clientSecret).getBytes(StandardCharsets.UTF_8));
-        httpPost.setHeader(HttpHeaders.AUTHORIZATION, "Basic " + encoded);
-        List<NameValuePair> formParams = new ArrayList<>();
-        formParams.add(new BasicNameValuePair("grant_type", "client_credentials"));
-        UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formParams, Consts.UTF_8);
-        httpPost.setEntity(entity);
-        try {
-            CloseableHttpResponse response = httpClient.execute(httpPost);
-            try {
-                String responseBody = EntityUtils.toString(response.getEntity());
-                JSONObject tokenInfo = new JSONObject(responseBody);
-                return tokenInfo;
-            } finally {
-                response.close();
-            }
-        } catch (IOException e) {
-            throw new RuntimeException(e);
-        } finally {
-            try {
-                httpClient.close();
-            } catch (IOException e) {
-                throw new RuntimeException(e);
-            }
-        }
-    }
 
     private boolean hasPermission(GatewayGroupMembership gatewayGroupMembership, String apiMethod) {
 
@@ -509,15 +435,4 @@ public class KeyCloakSecurityManager implements AiravataSecurityManager {
             throw new TException("Unable to create sharing registry client...", e);
         }
     }
-
-    public static void main(String[] args) throws AiravataSecurityException, ApplicationSettingsException {
-        ServerSettings.setSetting("trust.store", "./modules/configuration/server/src/main/resources/client_truststore.jks");
-        ServerSettings.setSetting("trust.store.password", "airavata");
-        KeyCloakSecurityManager keyCloakSecurityManager = new KeyCloakSecurityManager();
-        final String tokenURL = "...";
-        final String clientId = "...";
-        final String clientSecret = "...";
-        JSONObject jsonObject = keyCloakSecurityManager.getClientCredentials(tokenURL, clientId, clientSecret);
-        System.out.println("access_token=" + jsonObject.getString("access_token"));
-    }
 }
\ No newline at end of file