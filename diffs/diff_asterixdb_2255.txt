diff --git a/asterixdb/asterix-lang-sqlpp/src/main/java/org/apache/asterix/lang/sqlpp/util/FunctionMapUtil.java b/asterixdb/asterix-lang-sqlpp/src/main/java/org/apache/asterix/lang/sqlpp/util/FunctionMapUtil.java
index beb031aef0..6d199954a9 100644
--- a/asterixdb/asterix-lang-sqlpp/src/main/java/org/apache/asterix/lang/sqlpp/util/FunctionMapUtil.java
+++ b/asterixdb/asterix-lang-sqlpp/src/main/java/org/apache/asterix/lang/sqlpp/util/FunctionMapUtil.java
@@ -18,56 +18,48 @@
  */
 package org.apache.asterix.lang.sqlpp.util;
 
-import java.util.ArrayList;
-import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
 
-import org.apache.asterix.common.exceptions.CompilationException;
-import org.apache.asterix.common.exceptions.ErrorCode;
+import org.apache.asterix.common.exceptions.AsterixException;
 import org.apache.asterix.common.functions.FunctionConstants;
 import org.apache.asterix.common.functions.FunctionSignature;
-import org.apache.asterix.lang.common.expression.CallExpr;
-import org.apache.asterix.lang.common.expression.ListConstructor;
-import org.apache.asterix.lang.common.util.CommonFunctionMapUtil;
 import org.apache.asterix.lang.common.util.FunctionUtil;
-import org.apache.asterix.om.functions.BuiltinFunctions;
+import org.apache.asterix.om.functions.AsterixBuiltinFunctions;
 import org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;
 import org.apache.hyracks.algebricks.core.algebra.functions.IFunctionInfo;
-import org.apache.hyracks.api.exceptions.SourceLocation;
 
 public class FunctionMapUtil {
 
-    public static final String CONCAT = "concat";
     private final static String CORE_AGGREGATE_PREFIX = "coll_";
-    private final static String CORE_SQL_AGGREGATE_PREFIX = "array_";
-    private final static String INTERNAL_SQL_AGGREGATE_PREFIX = "sql-";
+    private final static String SQL_PREFIX = "sql-";
 
-    // Maps from a variable-arg SQL function names to an internal list-arg function name.
-    private static final Map<String, String> LIST_INPUT_FUNCTION_MAP = new HashMap<>();
+    // Maps from a SQL function name to an AQL function name (i.e., AsterixDB internal name).
+    private static final Map<String, String> FUNCTION_NAME_MAP = new HashMap<>();
 
     static {
-        LIST_INPUT_FUNCTION_MAP.put(CONCAT, BuiltinFunctions.STRING_CONCAT.getName());
-        LIST_INPUT_FUNCTION_MAP.put("greatest", CORE_SQL_AGGREGATE_PREFIX + "max");
-        LIST_INPUT_FUNCTION_MAP.put("least", CORE_SQL_AGGREGATE_PREFIX + "min");
+        FUNCTION_NAME_MAP.put("ceil", "ceiling"); //SQL: ceil,  AQL: ceiling
+        FUNCTION_NAME_MAP.put("length", "string-length"); // SQL: length,  AQL: string-length
+        FUNCTION_NAME_MAP.put("lower", "lowercase"); // SQL: lower, AQL: lowercase
+        FUNCTION_NAME_MAP.put("substr", "substring"); // SQL: substr,  AQL: substring
+        FUNCTION_NAME_MAP.put("upper", "uppercase"); //SQL: upper, AQL: uppercase
     }
 
     /**
      * Whether a function signature is a SQL-92 core aggregate function.
      *
-     * @param signature
-     *            ,
+     * @param fs,
      *            the function signature.
      * @return true if the function signature is a SQL-92 core aggregate,
      *         false otherwise.
      */
-    public static boolean isSql92AggregateFunction(FunctionSignature signature) throws CompilationException {
+    public static boolean isSql92AggregateFunction(FunctionSignature signature) throws AsterixException {
         IFunctionInfo finfo = FunctionUtil.getFunctionInfo(new FunctionIdentifier(FunctionConstants.ASTERIX_NS,
                 signature.getName().toLowerCase(), signature.getArity()));
         if (finfo == null) {
             return false;
         }
-        return BuiltinFunctions.getAggregateFunction(finfo.getFunctionIdentifier()) != null;
+        return AsterixBuiltinFunctions.getAggregateFunction(finfo.getFunctionIdentifier()) != null;
     }
 
     /**
@@ -80,19 +72,15 @@ public class FunctionMapUtil {
      */
     public static boolean isCoreAggregateFunction(FunctionSignature fs) {
         String name = fs.getName().toLowerCase();
-        boolean coreAgg = name.startsWith(CORE_AGGREGATE_PREFIX);
-        boolean coreSqlAgg = name.startsWith(CORE_SQL_AGGREGATE_PREFIX);
-        if (!coreAgg && !coreSqlAgg) {
+        if (!name.startsWith(CORE_AGGREGATE_PREFIX)) {
             return false;
         }
-        String internalName = coreAgg ? name.substring(CORE_AGGREGATE_PREFIX.length())
-                : (INTERNAL_SQL_AGGREGATE_PREFIX + name.substring(CORE_SQL_AGGREGATE_PREFIX.length()));
-        IFunctionInfo finfo = FunctionUtil
-                .getFunctionInfo(new FunctionIdentifier(FunctionConstants.ASTERIX_NS, internalName, fs.getArity()));
+        IFunctionInfo finfo = FunctionUtil.getFunctionInfo(new FunctionIdentifier(FunctionConstants.ASTERIX_NS,
+                name.substring(CORE_AGGREGATE_PREFIX.length()), fs.getArity()));
         if (finfo == null) {
             return false;
         }
-        return BuiltinFunctions.getAggregateFunction(finfo.getFunctionIdentifier()) != null;
+        return AsterixBuiltinFunctions.getAggregateFunction(finfo.getFunctionIdentifier()) != null;
     }
 
     /**
@@ -101,13 +89,13 @@ public class FunctionMapUtil {
      * @param fs,
      *            the SQL-92 aggregate function signature.
      * @return the SQL++ aggregate function signature.
-     * @throws CompilationException
+     * @throws AsterixException
      */
-    public static FunctionSignature sql92ToCoreAggregateFunction(FunctionSignature fs) throws CompilationException {
+    public static FunctionSignature sql92ToCoreAggregateFunction(FunctionSignature fs) throws AsterixException {
         if (!isSql92AggregateFunction(fs)) {
             return fs;
         }
-        return new FunctionSignature(FunctionConstants.ASTERIX_NS, CORE_SQL_AGGREGATE_PREFIX + fs.getName(),
+        return new FunctionSignature(fs.getNamespace(), CORE_AGGREGATE_PREFIX + SQL_PREFIX + fs.getName(),
                 fs.getArity());
     }
 
@@ -116,59 +104,49 @@ public class FunctionMapUtil {
      *
      * @param fs,
      *            the user typed function.
-     * @param sourceLoc
      * @return the system internal function.
      */
-    public static FunctionSignature normalizeBuiltinFunctionSignature(FunctionSignature fs, boolean checkSql92Aggregate,
-            SourceLocation sourceLoc) throws CompilationException {
+    public static FunctionSignature normalizeBuiltinFunctionSignature(FunctionSignature fs, boolean checkSql92Aggregate)
+            throws AsterixException {
+        String mappedName = internalizeBuiltinScalarFunctionName(fs.getName());
         if (isCoreAggregateFunction(fs)) {
-            return internalizeCoreAggregateFunctionName(fs);
+            mappedName = internalizeCoreAggregateFunctionName(mappedName);
         } else if (checkSql92Aggregate && isSql92AggregateFunction(fs)) {
-            throw new CompilationException(ErrorCode.COMPILATION_ERROR, sourceLoc,
-                    fs.getName() + " is a SQL-92 aggregate function. The SQL++ core aggregate function "
-                            + CORE_SQL_AGGREGATE_PREFIX + fs.getName().toLowerCase()
-                            + " could potentially express the intent.");
+            throw new AsterixException(fs.getName()
+                    + " is a SQL-92 aggregate function. The SQL++ core aggregate function " + CORE_AGGREGATE_PREFIX
+                    + fs.getName().toLowerCase() + " could potentially express the intent.");
         }
-        String mappedName = CommonFunctionMapUtil.normalizeBuiltinFunctionSignature(fs).getName();
         return new FunctionSignature(fs.getNamespace(), mappedName, fs.getArity());
     }
 
     /**
-     * Rewrites a variable-arg, user-surface function call into an internal, list-arg function.
+     * Removes the "coll_" prefix for user-facing SQL++ core aggregate function names.
      *
-     * @param callExpr
-     *            The input call expression.
-     * @return a new call expression that calls the corresponding AsterixDB internal function.
+     * @param name,
+     *            the name of a user-facing SQL++ core aggregate function name.
+     * @return the AsterixDB internal function name for the aggregate function.
+     * @throws AsterixException
      */
-    public static CallExpr normalizedListInputFunctions(CallExpr callExpr) {
-        FunctionSignature fs = callExpr.getFunctionSignature();
-        String internalFuncName = LIST_INPUT_FUNCTION_MAP.get(fs.getName().toLowerCase());
-        if (internalFuncName == null) {
-            return callExpr;
-        }
-        callExpr.setFunctionSignature(new FunctionSignature(FunctionConstants.ASTERIX_NS, internalFuncName, 1));
-        ListConstructor listConstr =
-                new ListConstructor(ListConstructor.Type.ORDERED_LIST_CONSTRUCTOR, callExpr.getExprList());
-        listConstr.setSourceLocation(callExpr.getSourceLocation());
-        callExpr.setExprList(new ArrayList<>(Collections.singletonList(listConstr)));
-        return callExpr;
+    private static String internalizeCoreAggregateFunctionName(String name) throws AsterixException {
+        String lowerCaseName = name.toLowerCase();
+        return lowerCaseName.substring(CORE_AGGREGATE_PREFIX.length());
     }
 
     /**
-     * Removes the "array_" prefix for user-facing SQL++ core aggregate function names.
+     * Note: function name normalization can ONLY be called
+     * after all user-defined functions (by either "DECLARE FUNCTION" or "CREATE FUNCTION")
+     * are inlined, because user-defined function names are case-sensitive.
      *
-     * @param fs,
-     *            a user-facing SQL++ core aggregate function signature.
-     * @return the AsterixDB internal function signature for the aggregate function.
-     * @throws CompilationException
+     * @param name
+     *            the user-input function name in the query.
+     * @return the mapped internal name.
      */
-    private static FunctionSignature internalizeCoreAggregateFunctionName(FunctionSignature fs)
-            throws CompilationException {
-        String name = fs.getName().toLowerCase();
-        boolean coreAgg = name.startsWith(CORE_AGGREGATE_PREFIX);
-        String lowerCaseName = coreAgg ? name.substring(CORE_AGGREGATE_PREFIX.length())
-                : (INTERNAL_SQL_AGGREGATE_PREFIX + name.substring(CORE_SQL_AGGREGATE_PREFIX.length()));
-        return new FunctionSignature(FunctionConstants.ASTERIX_NS, lowerCaseName, fs.getArity());
+    private static String internalizeBuiltinScalarFunctionName(String name) {
+        String lowerCaseName = name.toLowerCase();
+        String mappedName = FUNCTION_NAME_MAP.get(lowerCaseName);
+        if (mappedName != null) {
+            return mappedName;
+        }
+        return lowerCaseName;
     }
-
 }