diff --git a/src/main/java/org/apache/aries/application/resolver/obr/impl/RequirementImpl.java b/src/main/java/org/apache/aries/application/resolver/obr/impl/RequirementImpl.java
index b6e071bbc..9d72e9832 100644
--- a/src/main/java/org/apache/aries/application/resolver/obr/impl/RequirementImpl.java
+++ b/src/main/java/org/apache/aries/application/resolver/obr/impl/RequirementImpl.java
@@ -20,35 +20,18 @@
 
 package org.apache.aries.application.resolver.obr.impl;
 
-import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
-import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
-
-import java.util.Arrays;
-import java.util.Hashtable;
-import java.util.List;
-import java.util.Map;
-
-import org.apache.aries.application.modelling.Consumer;
-import org.apache.aries.application.utils.FilterUtils;
-import org.apache.aries.application.utils.manifest.ManifestHeaderProcessor;
-import org.apache.felix.bundlerepository.Capability;
-import org.apache.felix.bundlerepository.Property;
-import org.apache.felix.bundlerepository.Requirement;
 import org.osgi.framework.Filter;
-import org.osgi.framework.FrameworkUtil;
-import org.osgi.framework.InvalidSyntaxException;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import org.osgi.service.obr.Capability;
+import org.osgi.service.obr.Requirement;
 
+/**
+ * @version $Rev$ $Date$
+ */
 public class RequirementImpl implements Requirement
 {
 
-
-  private final Logger logger = LoggerFactory.getLogger(RequirementImpl.class);
-  private final Consumer consumer;
-
   private final String name;
-  private final String filter;
+  private final Filter filter;
   private final boolean multiple;
   private final boolean optional;
   private final boolean extend;
@@ -57,125 +40,45 @@ public class RequirementImpl implements Requirement
   public RequirementImpl(String name, Filter filter, boolean multiple, boolean optional, boolean extend, String comment)
   {
     this.name = name;
-    this.filter = filter.toString();
+    this.filter = filter;
     this.multiple = multiple;
     this.optional = optional;
     this.extend = extend;
     this.comment = comment;
-    this.consumer = null;
-  }
-
-  public RequirementImpl(Consumer consumer) {
-    this.consumer = consumer;
-    this.name = getName();
-    this.filter= getFilter();
-    this.multiple= isMultiple();
-    this.optional= isOptional();
-    this.extend = false;
-    this.comment = getComment();
-
   }
 
-
-
-  public String getComment()
+  public String getName()
   {
-
-    logger.debug(LOG_ENTRY,"getComment" );
-    if (consumer!= null) {
-      String cleanFilter = FilterUtils.removeMandatoryFilterToken(consumer.getAttributeFilter());
-      Map<String, String> atts = ManifestHeaderProcessor.parseFilter(cleanFilter);
-      String comment = "Requires " + consumer.getType().toString() + " with attributes " + atts;
-      logger.debug(LOG_EXIT,"getComment", comment );
-      return comment;
-    } else {
-      logger.debug(LOG_EXIT,"getComment", this.comment );
-      return this.comment;
-    }
+    return name;
   }
 
-
   public String getFilter()
   {
-    String result;
-    if (consumer != null) {
-      result = consumer.getAttributeFilter();
-    } else {
-      result = this.filter;
-    }
-    return result;
+    return filter.toString();
   }
 
-
-  public String getName()
+  public boolean isMultiple()
   {
-
-    String result;
-    if (consumer != null) {
-      result = consumer.getType().toString();
-    } else {
-      result = this.name;
-    }
-    return result;
+    return multiple;
   }
 
-
-  public boolean isExtend()
+  public boolean isOptional()
   {
-    return this.extend;
+    return optional;
   }
 
-
-  public boolean isMultiple()
+  public boolean isExtend()
   {
-    boolean result;
-    if (consumer != null ) {
-      result = consumer.isMultiple();
-    } else {
-      result = this.multiple;
-    }
-    return result;
+    return extend;
   }
 
-
-  public boolean isOptional()
+  public String getComment()
   {
-    boolean result;
-    if (consumer != null) {
-      result = consumer.isOptional();
-    } else {
-      result = this.optional;
-    }
-    return result;
+    return comment;
   }
 
-  @SuppressWarnings("unchecked")
-
-  public boolean isSatisfied(Capability cap)
+  public boolean isSatisfied(Capability capability)
   {
-   
-    logger.debug(LOG_ENTRY,"isSatisfied", cap );
-    boolean result = false;
-
-    String name = getName();
-    if (name.equals(cap.getName())) {
-      String filterToCreate = getFilter();
-      try {
-        Filter f = FrameworkUtil.createFilter(FilterUtils.removeMandatoryFilterToken(filterToCreate));
-        Hashtable<String, Object> hash = new Hashtable<String, Object>();
-        List<Property> props = Arrays.asList(cap.getProperties());
-        if ((props != null) && (!!!props.isEmpty())) {
-          for (Property prop : props) {
-            hash.put(prop.getName(), prop.getValue());
-          }
-        }
-
-        result = f.match(hash);
-      } catch (InvalidSyntaxException e) {
-        logger.error(e.getMessage());
-      }
-    }
-    logger.debug(LOG_EXIT,"isSatisfied", result );
-    return result;
+    return filter.match(new MapToDictionary(capability.getProperties()));
   }
 }