diff --git a/airavata-api/airavata-api-stubs/src/main/java/org/apache/airavata/api/Airavata.java b/airavata-api/airavata-api-stubs/src/main/java/org/apache/airavata/api/Airavata.java
index 1dd601958..7c4eafa66 100644
--- a/airavata-api/airavata-api-stubs/src/main/java/org/apache/airavata/api/Airavata.java
+++ b/airavata-api/airavata-api-stubs/src/main/java/org/apache/airavata/api/Airavata.java
@@ -57,55 +57,6 @@ import org.slf4j.LoggerFactory;
      */
     public String GetAPIVersion() throws org.apache.thrift.TException;
 
-    /**
-     * Create a Project
-     * 
-     * 
-     * @param project
-     * @param userName
-     */
-    public String createProject(org.apache.airavata.model.workspace.Project project, String userName) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException;
-
-    /**
-     * Update a Project
-     * 
-     * 
-     * @param project
-     */
-    public void updateProject(org.apache.airavata.model.workspace.Project project) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException;
-
-    /**
-     * Get a Project by ID
-     * 
-     * 
-     * @param projectId
-     */
-    public org.apache.airavata.model.workspace.Project getProject(String projectId) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException;
-
-    /**
-     * Get all Project by user
-     * 
-     * 
-     * @param userName
-     */
-    public List<org.apache.airavata.model.workspace.Project> getAllUserProjects(String userName) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException;
-
-    /**
-     * Get all Experiments within a Project
-     * 
-     * 
-     * @param projectId
-     */
-    public List<org.apache.airavata.model.workspace.experiment.Experiment> getAllExperimentsInProject(String projectId) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException;
-
-    /**
-     * Get all Experiments by user
-     * 
-     * 
-     * @param userName
-     */
-    public List<org.apache.airavata.model.workspace.experiment.Experiment> getAllUserExperiments(String userName) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException;
-
     /**
      * Create an experiment for the specified user belonging to the gateway. The gateway identity is not explicitly passed
      *   but inferred from the authentication header. This experiment is just a persistent place holder. The client
@@ -282,7 +233,7 @@ import org.slf4j.LoggerFactory;
 
     public List<org.apache.airavata.model.workspace.experiment.DataObjectType> getExperimentOutputs(String airavataExperimentId) throws org.apache.thrift.TException;
 
-    public Map<String,org.apache.airavata.model.workspace.experiment.JobStatus> getJobStatuses(String airavataExperimentId) throws org.apache.thrift.TException;
+    public org.apache.airavata.model.workspace.experiment.TaskStatus getJobStatus(String resourceJobId) throws org.apache.thrift.TException;
 
     /**
      * Clone an specified experiment with a new name. A copy of the experiment configuration is made and is persisted with new metadata.
@@ -365,24 +316,14 @@ import org.slf4j.LoggerFactory;
      */
     public void terminateExperiment(String airavataExperimentId) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException;
 
+    public String createProject(String projectName, String userName) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException;
+
   }
 
   public interface AsyncIface {
 
     public void GetAPIVersion(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void createProject(org.apache.airavata.model.workspace.Project project, String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
-
-    public void updateProject(org.apache.airavata.model.workspace.Project project, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
-
-    public void getProject(String projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
-
-    public void getAllUserProjects(String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
-
-    public void getAllExperimentsInProject(String projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
-
-    public void getAllUserExperiments(String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
-
     public void createExperiment(org.apache.airavata.model.workspace.experiment.Experiment experiment, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
     public void getExperiment(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
@@ -399,12 +340,14 @@ import org.slf4j.LoggerFactory;
 
     public void getExperimentOutputs(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
-    public void getJobStatuses(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
+    public void getJobStatus(String resourceJobId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
     public void cloneExperiment(String airavataExperimentIdToBeCloned, org.apache.airavata.model.workspace.experiment.Experiment updatedExperiment, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
     public void terminateExperiment(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
 
+    public void createProject(String projectName, String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
+
   }
 
   public static class Client extends org.apache.thrift.TServiceClient implements Iface {
@@ -449,196 +392,6 @@ import org.slf4j.LoggerFactory;
       throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetAPIVersion failed: unknown result");
     }
 
-    public String createProject(org.apache.airavata.model.workspace.Project project, String userName) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException
-    {
-      send_createProject(project, userName);
-      return recv_createProject();
-    }
-
-    public void send_createProject(org.apache.airavata.model.workspace.Project project, String userName) throws org.apache.thrift.TException
-    {
-      createProject_args args = new createProject_args();
-      args.setProject(project);
-      args.setUserName(userName);
-      sendBase("createProject", args);
-    }
-
-    public String recv_createProject() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException
-    {
-      createProject_result result = new createProject_result();
-      receiveBase(result, "createProject");
-      if (result.isSetSuccess()) {
-        return result.success;
-      }
-      if (result.ire != null) {
-        throw result.ire;
-      }
-      if (result.ace != null) {
-        throw result.ace;
-      }
-      if (result.ase != null) {
-        throw result.ase;
-      }
-      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createProject failed: unknown result");
-    }
-
-    public void updateProject(org.apache.airavata.model.workspace.Project project) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException
-    {
-      send_updateProject(project);
-      recv_updateProject();
-    }
-
-    public void send_updateProject(org.apache.airavata.model.workspace.Project project) throws org.apache.thrift.TException
-    {
-      updateProject_args args = new updateProject_args();
-      args.setProject(project);
-      sendBase("updateProject", args);
-    }
-
-    public void recv_updateProject() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException
-    {
-      updateProject_result result = new updateProject_result();
-      receiveBase(result, "updateProject");
-      if (result.ire != null) {
-        throw result.ire;
-      }
-      if (result.ace != null) {
-        throw result.ace;
-      }
-      if (result.ase != null) {
-        throw result.ase;
-      }
-      return;
-    }
-
-    public org.apache.airavata.model.workspace.Project getProject(String projectId) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException
-    {
-      send_getProject(projectId);
-      return recv_getProject();
-    }
-
-    public void send_getProject(String projectId) throws org.apache.thrift.TException
-    {
-      getProject_args args = new getProject_args();
-      args.setProjectId(projectId);
-      sendBase("getProject", args);
-    }
-
-    public org.apache.airavata.model.workspace.Project recv_getProject() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException
-    {
-      getProject_result result = new getProject_result();
-      receiveBase(result, "getProject");
-      if (result.isSetSuccess()) {
-        return result.success;
-      }
-      if (result.ire != null) {
-        throw result.ire;
-      }
-      if (result.ace != null) {
-        throw result.ace;
-      }
-      if (result.ase != null) {
-        throw result.ase;
-      }
-      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProject failed: unknown result");
-    }
-
-    public List<org.apache.airavata.model.workspace.Project> getAllUserProjects(String userName) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException
-    {
-      send_getAllUserProjects(userName);
-      return recv_getAllUserProjects();
-    }
-
-    public void send_getAllUserProjects(String userName) throws org.apache.thrift.TException
-    {
-      getAllUserProjects_args args = new getAllUserProjects_args();
-      args.setUserName(userName);
-      sendBase("getAllUserProjects", args);
-    }
-
-    public List<org.apache.airavata.model.workspace.Project> recv_getAllUserProjects() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException
-    {
-      getAllUserProjects_result result = new getAllUserProjects_result();
-      receiveBase(result, "getAllUserProjects");
-      if (result.isSetSuccess()) {
-        return result.success;
-      }
-      if (result.ire != null) {
-        throw result.ire;
-      }
-      if (result.ace != null) {
-        throw result.ace;
-      }
-      if (result.ase != null) {
-        throw result.ase;
-      }
-      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllUserProjects failed: unknown result");
-    }
-
-    public List<org.apache.airavata.model.workspace.experiment.Experiment> getAllExperimentsInProject(String projectId) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException
-    {
-      send_getAllExperimentsInProject(projectId);
-      return recv_getAllExperimentsInProject();
-    }
-
-    public void send_getAllExperimentsInProject(String projectId) throws org.apache.thrift.TException
-    {
-      getAllExperimentsInProject_args args = new getAllExperimentsInProject_args();
-      args.setProjectId(projectId);
-      sendBase("getAllExperimentsInProject", args);
-    }
-
-    public List<org.apache.airavata.model.workspace.experiment.Experiment> recv_getAllExperimentsInProject() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException
-    {
-      getAllExperimentsInProject_result result = new getAllExperimentsInProject_result();
-      receiveBase(result, "getAllExperimentsInProject");
-      if (result.isSetSuccess()) {
-        return result.success;
-      }
-      if (result.ire != null) {
-        throw result.ire;
-      }
-      if (result.ace != null) {
-        throw result.ace;
-      }
-      if (result.ase != null) {
-        throw result.ase;
-      }
-      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllExperimentsInProject failed: unknown result");
-    }
-
-    public List<org.apache.airavata.model.workspace.experiment.Experiment> getAllUserExperiments(String userName) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException
-    {
-      send_getAllUserExperiments(userName);
-      return recv_getAllUserExperiments();
-    }
-
-    public void send_getAllUserExperiments(String userName) throws org.apache.thrift.TException
-    {
-      getAllUserExperiments_args args = new getAllUserExperiments_args();
-      args.setUserName(userName);
-      sendBase("getAllUserExperiments", args);
-    }
-
-    public List<org.apache.airavata.model.workspace.experiment.Experiment> recv_getAllUserExperiments() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException
-    {
-      getAllUserExperiments_result result = new getAllUserExperiments_result();
-      receiveBase(result, "getAllUserExperiments");
-      if (result.isSetSuccess()) {
-        return result.success;
-      }
-      if (result.ire != null) {
-        throw result.ire;
-      }
-      if (result.ace != null) {
-        throw result.ace;
-      }
-      if (result.ase != null) {
-        throw result.ase;
-      }
-      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllUserExperiments failed: unknown result");
-    }
-
     public String createExperiment(org.apache.airavata.model.workspace.experiment.Experiment experiment) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException
     {
       send_createExperiment(experiment);
@@ -872,27 +625,27 @@ import org.slf4j.LoggerFactory;
       throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getExperimentOutputs failed: unknown result");
     }
 
-    public Map<String,org.apache.airavata.model.workspace.experiment.JobStatus> getJobStatuses(String airavataExperimentId) throws org.apache.thrift.TException
+    public org.apache.airavata.model.workspace.experiment.TaskStatus getJobStatus(String resourceJobId) throws org.apache.thrift.TException
     {
-      send_getJobStatuses(airavataExperimentId);
-      return recv_getJobStatuses();
+      send_getJobStatus(resourceJobId);
+      return recv_getJobStatus();
     }
 
-    public void send_getJobStatuses(String airavataExperimentId) throws org.apache.thrift.TException
+    public void send_getJobStatus(String resourceJobId) throws org.apache.thrift.TException
     {
-      getJobStatuses_args args = new getJobStatuses_args();
-      args.setAiravataExperimentId(airavataExperimentId);
-      sendBase("getJobStatuses", args);
+      getJobStatus_args args = new getJobStatus_args();
+      args.setResourceJobId(resourceJobId);
+      sendBase("getJobStatus", args);
     }
 
-    public Map<String,org.apache.airavata.model.workspace.experiment.JobStatus> recv_getJobStatuses() throws org.apache.thrift.TException
+    public org.apache.airavata.model.workspace.experiment.TaskStatus recv_getJobStatus() throws org.apache.thrift.TException
     {
-      getJobStatuses_result result = new getJobStatuses_result();
-      receiveBase(result, "getJobStatuses");
+      getJobStatus_result result = new getJobStatus_result();
+      receiveBase(result, "getJobStatus");
       if (result.isSetSuccess()) {
         return result.success;
       }
-      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getJobStatuses failed: unknown result");
+      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getJobStatus failed: unknown result");
     }
 
     public String cloneExperiment(String airavataExperimentIdToBeCloned, org.apache.airavata.model.workspace.experiment.Experiment updatedExperiment) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException
@@ -963,6 +716,42 @@ import org.slf4j.LoggerFactory;
       return;
     }
 
+    public String createProject(String projectName, String userName) throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException
+    {
+      send_createProject(projectName, userName);
+      return recv_createProject();
+    }
+
+    public void send_createProject(String projectName, String userName) throws org.apache.thrift.TException
+    {
+      createProject_args args = new createProject_args();
+      args.setProjectName(projectName);
+      args.setUserName(userName);
+      sendBase("createProject", args);
+    }
+
+    public String recv_createProject() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException
+    {
+      createProject_result result = new createProject_result();
+      receiveBase(result, "createProject");
+      if (result.isSetSuccess()) {
+        return result.success;
+      }
+      if (result.ire != null) {
+        throw result.ire;
+      }
+      if (result.enf != null) {
+        throw result.enf;
+      }
+      if (result.ace != null) {
+        throw result.ace;
+      }
+      if (result.ase != null) {
+        throw result.ase;
+      }
+      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createProject failed: unknown result");
+    }
+
   }
   public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
     public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
@@ -1010,27 +799,24 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    public void createProject(org.apache.airavata.model.workspace.Project project, String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
+    public void createExperiment(org.apache.airavata.model.workspace.experiment.Experiment experiment, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
-      createProject_call method_call = new createProject_call(project, userName, resultHandler, this, ___protocolFactory, ___transport);
+      createExperiment_call method_call = new createExperiment_call(experiment, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
       ___manager.call(method_call);
     }
 
-    public static class createProject_call extends org.apache.thrift.async.TAsyncMethodCall {
-      private org.apache.airavata.model.workspace.Project project;
-      private String userName;
-      public createProject_call(org.apache.airavata.model.workspace.Project project, String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+    public static class createExperiment_call extends org.apache.thrift.async.TAsyncMethodCall {
+      private org.apache.airavata.model.workspace.experiment.Experiment experiment;
+      public createExperiment_call(org.apache.airavata.model.workspace.experiment.Experiment experiment, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
-        this.project = project;
-        this.userName = userName;
+        this.experiment = experiment;
       }
 
       public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
-        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createProject", org.apache.thrift.protocol.TMessageType.CALL, 0));
-        createProject_args args = new createProject_args();
-        args.setProject(project);
-        args.setUserName(userName);
+        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createExperiment", org.apache.thrift.protocol.TMessageType.CALL, 0));
+        createExperiment_args args = new createExperiment_args();
+        args.setExperiment(experiment);
         args.write(prot);
         prot.writeMessageEnd();
       }
@@ -1041,283 +827,91 @@ import org.slf4j.LoggerFactory;
         }
         org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
         org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
-        return (new Client(prot)).recv_createProject();
+        return (new Client(prot)).recv_createExperiment();
       }
     }
 
-    public void updateProject(org.apache.airavata.model.workspace.Project project, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
+    public void getExperiment(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
-      updateProject_call method_call = new updateProject_call(project, resultHandler, this, ___protocolFactory, ___transport);
+      getExperiment_call method_call = new getExperiment_call(airavataExperimentId, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
       ___manager.call(method_call);
     }
 
-    public static class updateProject_call extends org.apache.thrift.async.TAsyncMethodCall {
-      private org.apache.airavata.model.workspace.Project project;
-      public updateProject_call(org.apache.airavata.model.workspace.Project project, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+    public static class getExperiment_call extends org.apache.thrift.async.TAsyncMethodCall {
+      private String airavataExperimentId;
+      public getExperiment_call(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
-        this.project = project;
+        this.airavataExperimentId = airavataExperimentId;
       }
 
       public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
-        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateProject", org.apache.thrift.protocol.TMessageType.CALL, 0));
-        updateProject_args args = new updateProject_args();
-        args.setProject(project);
+        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getExperiment", org.apache.thrift.protocol.TMessageType.CALL, 0));
+        getExperiment_args args = new getExperiment_args();
+        args.setAiravataExperimentId(airavataExperimentId);
         args.write(prot);
         prot.writeMessageEnd();
       }
 
-      public void getResult() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException {
+      public org.apache.airavata.model.workspace.experiment.Experiment getResult() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException {
         if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
           throw new IllegalStateException("Method call not finished!");
         }
         org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
         org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
-        (new Client(prot)).recv_updateProject();
+        return (new Client(prot)).recv_getExperiment();
       }
     }
 
-    public void getProject(String projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
+    public void updateExperiment(String airavataExperimentId, org.apache.airavata.model.workspace.experiment.Experiment experiment, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
-      getProject_call method_call = new getProject_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
+      updateExperiment_call method_call = new updateExperiment_call(airavataExperimentId, experiment, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
       ___manager.call(method_call);
     }
 
-    public static class getProject_call extends org.apache.thrift.async.TAsyncMethodCall {
-      private String projectId;
-      public getProject_call(String projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+    public static class updateExperiment_call extends org.apache.thrift.async.TAsyncMethodCall {
+      private String airavataExperimentId;
+      private org.apache.airavata.model.workspace.experiment.Experiment experiment;
+      public updateExperiment_call(String airavataExperimentId, org.apache.airavata.model.workspace.experiment.Experiment experiment, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
-        this.projectId = projectId;
+        this.airavataExperimentId = airavataExperimentId;
+        this.experiment = experiment;
       }
 
       public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
-        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProject", org.apache.thrift.protocol.TMessageType.CALL, 0));
-        getProject_args args = new getProject_args();
-        args.setProjectId(projectId);
+        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateExperiment", org.apache.thrift.protocol.TMessageType.CALL, 0));
+        updateExperiment_args args = new updateExperiment_args();
+        args.setAiravataExperimentId(airavataExperimentId);
+        args.setExperiment(experiment);
         args.write(prot);
         prot.writeMessageEnd();
       }
 
-      public org.apache.airavata.model.workspace.Project getResult() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException {
+      public void getResult() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException {
         if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
           throw new IllegalStateException("Method call not finished!");
         }
         org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
         org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
-        return (new Client(prot)).recv_getProject();
+        (new Client(prot)).recv_updateExperiment();
       }
     }
 
-    public void getAllUserProjects(String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
+    public void updateExperimentConfiguration(String airavataExperimentId, org.apache.airavata.model.workspace.experiment.UserConfigurationData userConfiguration, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
-      getAllUserProjects_call method_call = new getAllUserProjects_call(userName, resultHandler, this, ___protocolFactory, ___transport);
+      updateExperimentConfiguration_call method_call = new updateExperimentConfiguration_call(airavataExperimentId, userConfiguration, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
       ___manager.call(method_call);
     }
 
-    public static class getAllUserProjects_call extends org.apache.thrift.async.TAsyncMethodCall {
-      private String userName;
-      public getAllUserProjects_call(String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+    public static class updateExperimentConfiguration_call extends org.apache.thrift.async.TAsyncMethodCall {
+      private String airavataExperimentId;
+      private org.apache.airavata.model.workspace.experiment.UserConfigurationData userConfiguration;
+      public updateExperimentConfiguration_call(String airavataExperimentId, org.apache.airavata.model.workspace.experiment.UserConfigurationData userConfiguration, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
-        this.userName = userName;
-      }
-
-      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
-        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllUserProjects", org.apache.thrift.protocol.TMessageType.CALL, 0));
-        getAllUserProjects_args args = new getAllUserProjects_args();
-        args.setUserName(userName);
-        args.write(prot);
-        prot.writeMessageEnd();
-      }
-
-      public List<org.apache.airavata.model.workspace.Project> getResult() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException {
-        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
-          throw new IllegalStateException("Method call not finished!");
-        }
-        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
-        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
-        return (new Client(prot)).recv_getAllUserProjects();
-      }
-    }
-
-    public void getAllExperimentsInProject(String projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
-      checkReady();
-      getAllExperimentsInProject_call method_call = new getAllExperimentsInProject_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
-      this.___currentMethod = method_call;
-      ___manager.call(method_call);
-    }
-
-    public static class getAllExperimentsInProject_call extends org.apache.thrift.async.TAsyncMethodCall {
-      private String projectId;
-      public getAllExperimentsInProject_call(String projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
-        super(client, protocolFactory, transport, resultHandler, false);
-        this.projectId = projectId;
-      }
-
-      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
-        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllExperimentsInProject", org.apache.thrift.protocol.TMessageType.CALL, 0));
-        getAllExperimentsInProject_args args = new getAllExperimentsInProject_args();
-        args.setProjectId(projectId);
-        args.write(prot);
-        prot.writeMessageEnd();
-      }
-
-      public List<org.apache.airavata.model.workspace.experiment.Experiment> getResult() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException {
-        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
-          throw new IllegalStateException("Method call not finished!");
-        }
-        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
-        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
-        return (new Client(prot)).recv_getAllExperimentsInProject();
-      }
-    }
-
-    public void getAllUserExperiments(String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
-      checkReady();
-      getAllUserExperiments_call method_call = new getAllUserExperiments_call(userName, resultHandler, this, ___protocolFactory, ___transport);
-      this.___currentMethod = method_call;
-      ___manager.call(method_call);
-    }
-
-    public static class getAllUserExperiments_call extends org.apache.thrift.async.TAsyncMethodCall {
-      private String userName;
-      public getAllUserExperiments_call(String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
-        super(client, protocolFactory, transport, resultHandler, false);
-        this.userName = userName;
-      }
-
-      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
-        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllUserExperiments", org.apache.thrift.protocol.TMessageType.CALL, 0));
-        getAllUserExperiments_args args = new getAllUserExperiments_args();
-        args.setUserName(userName);
-        args.write(prot);
-        prot.writeMessageEnd();
-      }
-
-      public List<org.apache.airavata.model.workspace.experiment.Experiment> getResult() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException {
-        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
-          throw new IllegalStateException("Method call not finished!");
-        }
-        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
-        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
-        return (new Client(prot)).recv_getAllUserExperiments();
-      }
-    }
-
-    public void createExperiment(org.apache.airavata.model.workspace.experiment.Experiment experiment, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
-      checkReady();
-      createExperiment_call method_call = new createExperiment_call(experiment, resultHandler, this, ___protocolFactory, ___transport);
-      this.___currentMethod = method_call;
-      ___manager.call(method_call);
-    }
-
-    public static class createExperiment_call extends org.apache.thrift.async.TAsyncMethodCall {
-      private org.apache.airavata.model.workspace.experiment.Experiment experiment;
-      public createExperiment_call(org.apache.airavata.model.workspace.experiment.Experiment experiment, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
-        super(client, protocolFactory, transport, resultHandler, false);
-        this.experiment = experiment;
-      }
-
-      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
-        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createExperiment", org.apache.thrift.protocol.TMessageType.CALL, 0));
-        createExperiment_args args = new createExperiment_args();
-        args.setExperiment(experiment);
-        args.write(prot);
-        prot.writeMessageEnd();
-      }
-
-      public String getResult() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException {
-        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
-          throw new IllegalStateException("Method call not finished!");
-        }
-        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
-        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
-        return (new Client(prot)).recv_createExperiment();
-      }
-    }
-
-    public void getExperiment(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
-      checkReady();
-      getExperiment_call method_call = new getExperiment_call(airavataExperimentId, resultHandler, this, ___protocolFactory, ___transport);
-      this.___currentMethod = method_call;
-      ___manager.call(method_call);
-    }
-
-    public static class getExperiment_call extends org.apache.thrift.async.TAsyncMethodCall {
-      private String airavataExperimentId;
-      public getExperiment_call(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
-        super(client, protocolFactory, transport, resultHandler, false);
-        this.airavataExperimentId = airavataExperimentId;
-      }
-
-      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
-        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getExperiment", org.apache.thrift.protocol.TMessageType.CALL, 0));
-        getExperiment_args args = new getExperiment_args();
-        args.setAiravataExperimentId(airavataExperimentId);
-        args.write(prot);
-        prot.writeMessageEnd();
-      }
-
-      public org.apache.airavata.model.workspace.experiment.Experiment getResult() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException {
-        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
-          throw new IllegalStateException("Method call not finished!");
-        }
-        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
-        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
-        return (new Client(prot)).recv_getExperiment();
-      }
-    }
-
-    public void updateExperiment(String airavataExperimentId, org.apache.airavata.model.workspace.experiment.Experiment experiment, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
-      checkReady();
-      updateExperiment_call method_call = new updateExperiment_call(airavataExperimentId, experiment, resultHandler, this, ___protocolFactory, ___transport);
-      this.___currentMethod = method_call;
-      ___manager.call(method_call);
-    }
-
-    public static class updateExperiment_call extends org.apache.thrift.async.TAsyncMethodCall {
-      private String airavataExperimentId;
-      private org.apache.airavata.model.workspace.experiment.Experiment experiment;
-      public updateExperiment_call(String airavataExperimentId, org.apache.airavata.model.workspace.experiment.Experiment experiment, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
-        super(client, protocolFactory, transport, resultHandler, false);
-        this.airavataExperimentId = airavataExperimentId;
-        this.experiment = experiment;
-      }
-
-      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
-        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateExperiment", org.apache.thrift.protocol.TMessageType.CALL, 0));
-        updateExperiment_args args = new updateExperiment_args();
-        args.setAiravataExperimentId(airavataExperimentId);
-        args.setExperiment(experiment);
-        args.write(prot);
-        prot.writeMessageEnd();
-      }
-
-      public void getResult() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException {
-        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
-          throw new IllegalStateException("Method call not finished!");
-        }
-        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
-        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
-        (new Client(prot)).recv_updateExperiment();
-      }
-    }
-
-    public void updateExperimentConfiguration(String airavataExperimentId, org.apache.airavata.model.workspace.experiment.UserConfigurationData userConfiguration, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
-      checkReady();
-      updateExperimentConfiguration_call method_call = new updateExperimentConfiguration_call(airavataExperimentId, userConfiguration, resultHandler, this, ___protocolFactory, ___transport);
-      this.___currentMethod = method_call;
-      ___manager.call(method_call);
-    }
-
-    public static class updateExperimentConfiguration_call extends org.apache.thrift.async.TAsyncMethodCall {
-      private String airavataExperimentId;
-      private org.apache.airavata.model.workspace.experiment.UserConfigurationData userConfiguration;
-      public updateExperimentConfiguration_call(String airavataExperimentId, org.apache.airavata.model.workspace.experiment.UserConfigurationData userConfiguration, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
-        super(client, protocolFactory, transport, resultHandler, false);
-        this.airavataExperimentId = airavataExperimentId;
-        this.userConfiguration = userConfiguration;
+        this.airavataExperimentId = airavataExperimentId;
+        this.userConfiguration = userConfiguration;
       }
 
       public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
@@ -1473,35 +1067,35 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    public void getJobStatuses(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
+    public void getJobStatus(String resourceJobId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
       checkReady();
-      getJobStatuses_call method_call = new getJobStatuses_call(airavataExperimentId, resultHandler, this, ___protocolFactory, ___transport);
+      getJobStatus_call method_call = new getJobStatus_call(resourceJobId, resultHandler, this, ___protocolFactory, ___transport);
       this.___currentMethod = method_call;
       ___manager.call(method_call);
     }
 
-    public static class getJobStatuses_call extends org.apache.thrift.async.TAsyncMethodCall {
-      private String airavataExperimentId;
-      public getJobStatuses_call(String airavataExperimentId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+    public static class getJobStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
+      private String resourceJobId;
+      public getJobStatus_call(String resourceJobId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
         super(client, protocolFactory, transport, resultHandler, false);
-        this.airavataExperimentId = airavataExperimentId;
+        this.resourceJobId = resourceJobId;
       }
 
       public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
-        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getJobStatuses", org.apache.thrift.protocol.TMessageType.CALL, 0));
-        getJobStatuses_args args = new getJobStatuses_args();
-        args.setAiravataExperimentId(airavataExperimentId);
+        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getJobStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
+        getJobStatus_args args = new getJobStatus_args();
+        args.setResourceJobId(resourceJobId);
         args.write(prot);
         prot.writeMessageEnd();
       }
 
-      public Map<String,org.apache.airavata.model.workspace.experiment.JobStatus> getResult() throws org.apache.thrift.TException {
+      public org.apache.airavata.model.workspace.experiment.TaskStatus getResult() throws org.apache.thrift.TException {
         if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
           throw new IllegalStateException("Method call not finished!");
         }
         org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
         org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
-        return (new Client(prot)).recv_getJobStatuses();
+        return (new Client(prot)).recv_getJobStatus();
       }
     }
 
@@ -1572,6 +1166,41 @@ import org.slf4j.LoggerFactory;
       }
     }
 
+    public void createProject(String projectName, String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
+      checkReady();
+      createProject_call method_call = new createProject_call(projectName, userName, resultHandler, this, ___protocolFactory, ___transport);
+      this.___currentMethod = method_call;
+      ___manager.call(method_call);
+    }
+
+    public static class createProject_call extends org.apache.thrift.async.TAsyncMethodCall {
+      private String projectName;
+      private String userName;
+      public createProject_call(String projectName, String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
+        super(client, protocolFactory, transport, resultHandler, false);
+        this.projectName = projectName;
+        this.userName = userName;
+      }
+
+      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
+        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createProject", org.apache.thrift.protocol.TMessageType.CALL, 0));
+        createProject_args args = new createProject_args();
+        args.setProjectName(projectName);
+        args.setUserName(userName);
+        args.write(prot);
+        prot.writeMessageEnd();
+      }
+
+      public String getResult() throws org.apache.airavata.api.error.InvalidRequestException, org.apache.airavata.api.error.ExperimentNotFoundException, org.apache.airavata.api.error.AiravataClientException, org.apache.airavata.api.error.AiravataSystemException, org.apache.thrift.TException {
+        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
+          throw new IllegalStateException("Method call not finished!");
+        }
+        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
+        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
+        return (new Client(prot)).recv_createProject();
+      }
+    }
+
   }
 
   public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
@@ -1586,12 +1215,6 @@ import org.slf4j.LoggerFactory;
 
     private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
       processMap.put("GetAPIVersion", new GetAPIVersion());
-      processMap.put("createProject", new createProject());
-      processMap.put("updateProject", new updateProject());
-      processMap.put("getProject", new getProject());
-      processMap.put("getAllUserProjects", new getAllUserProjects());
-      processMap.put("getAllExperimentsInProject", new getAllExperimentsInProject());
-      processMap.put("getAllUserExperiments", new getAllUserExperiments());
       processMap.put("createExperiment", new createExperiment());
       processMap.put("getExperiment", new getExperiment());
       processMap.put("updateExperiment", new updateExperiment());
@@ -1600,9 +1223,10 @@ import org.slf4j.LoggerFactory;
       processMap.put("launchExperiment", new launchExperiment());
       processMap.put("getExperimentStatus", new getExperimentStatus());
       processMap.put("getExperimentOutputs", new getExperimentOutputs());
-      processMap.put("getJobStatuses", new getJobStatuses());
+      processMap.put("getJobStatus", new getJobStatus());
       processMap.put("cloneExperiment", new cloneExperiment());
       processMap.put("terminateExperiment", new terminateExperiment());
+      processMap.put("createProject", new createProject());
       return processMap;
     }
 
@@ -1626,23 +1250,23 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    public static class createProject<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createProject_args> {
-      public createProject() {
-        super("createProject");
+    public static class createExperiment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createExperiment_args> {
+      public createExperiment() {
+        super("createExperiment");
       }
 
-      public createProject_args getEmptyArgsInstance() {
-        return new createProject_args();
+      public createExperiment_args getEmptyArgsInstance() {
+        return new createExperiment_args();
       }
 
       protected boolean isOneway() {
         return false;
       }
 
-      public createProject_result getResult(I iface, createProject_args args) throws org.apache.thrift.TException {
-        createProject_result result = new createProject_result();
+      public createExperiment_result getResult(I iface, createExperiment_args args) throws org.apache.thrift.TException {
+        createExperiment_result result = new createExperiment_result();
         try {
-          result.success = iface.createProject(args.project, args.userName);
+          result.success = iface.createExperiment(args.experiment);
         } catch (org.apache.airavata.api.error.InvalidRequestException ire) {
           result.ire = ire;
         } catch (org.apache.airavata.api.error.AiravataClientException ace) {
@@ -1654,25 +1278,27 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    public static class updateProject<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateProject_args> {
-      public updateProject() {
-        super("updateProject");
+    public static class getExperiment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getExperiment_args> {
+      public getExperiment() {
+        super("getExperiment");
       }
 
-      public updateProject_args getEmptyArgsInstance() {
-        return new updateProject_args();
+      public getExperiment_args getEmptyArgsInstance() {
+        return new getExperiment_args();
       }
 
       protected boolean isOneway() {
         return false;
       }
 
-      public updateProject_result getResult(I iface, updateProject_args args) throws org.apache.thrift.TException {
-        updateProject_result result = new updateProject_result();
+      public getExperiment_result getResult(I iface, getExperiment_args args) throws org.apache.thrift.TException {
+        getExperiment_result result = new getExperiment_result();
         try {
-          iface.updateProject(args.project);
+          result.success = iface.getExperiment(args.airavataExperimentId);
         } catch (org.apache.airavata.api.error.InvalidRequestException ire) {
           result.ire = ire;
+        } catch (org.apache.airavata.api.error.ExperimentNotFoundException enf) {
+          result.enf = enf;
         } catch (org.apache.airavata.api.error.AiravataClientException ace) {
           result.ace = ace;
         } catch (org.apache.airavata.api.error.AiravataSystemException ase) {
@@ -1682,25 +1308,27 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    public static class getProject<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProject_args> {
-      public getProject() {
-        super("getProject");
+    public static class updateExperiment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateExperiment_args> {
+      public updateExperiment() {
+        super("updateExperiment");
       }
 
-      public getProject_args getEmptyArgsInstance() {
-        return new getProject_args();
+      public updateExperiment_args getEmptyArgsInstance() {
+        return new updateExperiment_args();
       }
 
       protected boolean isOneway() {
         return false;
       }
 
-      public getProject_result getResult(I iface, getProject_args args) throws org.apache.thrift.TException {
-        getProject_result result = new getProject_result();
+      public updateExperiment_result getResult(I iface, updateExperiment_args args) throws org.apache.thrift.TException {
+        updateExperiment_result result = new updateExperiment_result();
         try {
-          result.success = iface.getProject(args.projectId);
+          iface.updateExperiment(args.airavataExperimentId, args.experiment);
         } catch (org.apache.airavata.api.error.InvalidRequestException ire) {
           result.ire = ire;
+        } catch (org.apache.airavata.api.error.ExperimentNotFoundException enf) {
+          result.enf = enf;
         } catch (org.apache.airavata.api.error.AiravataClientException ace) {
           result.ace = ace;
         } catch (org.apache.airavata.api.error.AiravataSystemException ase) {
@@ -1710,185 +1338,13 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    public static class getAllUserProjects<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllUserProjects_args> {
-      public getAllUserProjects() {
-        super("getAllUserProjects");
+    public static class updateExperimentConfiguration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateExperimentConfiguration_args> {
+      public updateExperimentConfiguration() {
+        super("updateExperimentConfiguration");
       }
 
-      public getAllUserProjects_args getEmptyArgsInstance() {
-        return new getAllUserProjects_args();
-      }
-
-      protected boolean isOneway() {
-        return false;
-      }
-
-      public getAllUserProjects_result getResult(I iface, getAllUserProjects_args args) throws org.apache.thrift.TException {
-        getAllUserProjects_result result = new getAllUserProjects_result();
-        try {
-          result.success = iface.getAllUserProjects(args.userName);
-        } catch (org.apache.airavata.api.error.InvalidRequestException ire) {
-          result.ire = ire;
-        } catch (org.apache.airavata.api.error.AiravataClientException ace) {
-          result.ace = ace;
-        } catch (org.apache.airavata.api.error.AiravataSystemException ase) {
-          result.ase = ase;
-        }
-        return result;
-      }
-    }
-
-    public static class getAllExperimentsInProject<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllExperimentsInProject_args> {
-      public getAllExperimentsInProject() {
-        super("getAllExperimentsInProject");
-      }
-
-      public getAllExperimentsInProject_args getEmptyArgsInstance() {
-        return new getAllExperimentsInProject_args();
-      }
-
-      protected boolean isOneway() {
-        return false;
-      }
-
-      public getAllExperimentsInProject_result getResult(I iface, getAllExperimentsInProject_args args) throws org.apache.thrift.TException {
-        getAllExperimentsInProject_result result = new getAllExperimentsInProject_result();
-        try {
-          result.success = iface.getAllExperimentsInProject(args.projectId);
-        } catch (org.apache.airavata.api.error.InvalidRequestException ire) {
-          result.ire = ire;
-        } catch (org.apache.airavata.api.error.AiravataClientException ace) {
-          result.ace = ace;
-        } catch (org.apache.airavata.api.error.AiravataSystemException ase) {
-          result.ase = ase;
-        }
-        return result;
-      }
-    }
-
-    public static class getAllUserExperiments<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllUserExperiments_args> {
-      public getAllUserExperiments() {
-        super("getAllUserExperiments");
-      }
-
-      public getAllUserExperiments_args getEmptyArgsInstance() {
-        return new getAllUserExperiments_args();
-      }
-
-      protected boolean isOneway() {
-        return false;
-      }
-
-      public getAllUserExperiments_result getResult(I iface, getAllUserExperiments_args args) throws org.apache.thrift.TException {
-        getAllUserExperiments_result result = new getAllUserExperiments_result();
-        try {
-          result.success = iface.getAllUserExperiments(args.userName);
-        } catch (org.apache.airavata.api.error.InvalidRequestException ire) {
-          result.ire = ire;
-        } catch (org.apache.airavata.api.error.AiravataClientException ace) {
-          result.ace = ace;
-        } catch (org.apache.airavata.api.error.AiravataSystemException ase) {
-          result.ase = ase;
-        }
-        return result;
-      }
-    }
-
-    public static class createExperiment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createExperiment_args> {
-      public createExperiment() {
-        super("createExperiment");
-      }
-
-      public createExperiment_args getEmptyArgsInstance() {
-        return new createExperiment_args();
-      }
-
-      protected boolean isOneway() {
-        return false;
-      }
-
-      public createExperiment_result getResult(I iface, createExperiment_args args) throws org.apache.thrift.TException {
-        createExperiment_result result = new createExperiment_result();
-        try {
-          result.success = iface.createExperiment(args.experiment);
-        } catch (org.apache.airavata.api.error.InvalidRequestException ire) {
-          result.ire = ire;
-        } catch (org.apache.airavata.api.error.AiravataClientException ace) {
-          result.ace = ace;
-        } catch (org.apache.airavata.api.error.AiravataSystemException ase) {
-          result.ase = ase;
-        }
-        return result;
-      }
-    }
-
-    public static class getExperiment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getExperiment_args> {
-      public getExperiment() {
-        super("getExperiment");
-      }
-
-      public getExperiment_args getEmptyArgsInstance() {
-        return new getExperiment_args();
-      }
-
-      protected boolean isOneway() {
-        return false;
-      }
-
-      public getExperiment_result getResult(I iface, getExperiment_args args) throws org.apache.thrift.TException {
-        getExperiment_result result = new getExperiment_result();
-        try {
-          result.success = iface.getExperiment(args.airavataExperimentId);
-        } catch (org.apache.airavata.api.error.InvalidRequestException ire) {
-          result.ire = ire;
-        } catch (org.apache.airavata.api.error.ExperimentNotFoundException enf) {
-          result.enf = enf;
-        } catch (org.apache.airavata.api.error.AiravataClientException ace) {
-          result.ace = ace;
-        } catch (org.apache.airavata.api.error.AiravataSystemException ase) {
-          result.ase = ase;
-        }
-        return result;
-      }
-    }
-
-    public static class updateExperiment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateExperiment_args> {
-      public updateExperiment() {
-        super("updateExperiment");
-      }
-
-      public updateExperiment_args getEmptyArgsInstance() {
-        return new updateExperiment_args();
-      }
-
-      protected boolean isOneway() {
-        return false;
-      }
-
-      public updateExperiment_result getResult(I iface, updateExperiment_args args) throws org.apache.thrift.TException {
-        updateExperiment_result result = new updateExperiment_result();
-        try {
-          iface.updateExperiment(args.airavataExperimentId, args.experiment);
-        } catch (org.apache.airavata.api.error.InvalidRequestException ire) {
-          result.ire = ire;
-        } catch (org.apache.airavata.api.error.ExperimentNotFoundException enf) {
-          result.enf = enf;
-        } catch (org.apache.airavata.api.error.AiravataClientException ace) {
-          result.ace = ace;
-        } catch (org.apache.airavata.api.error.AiravataSystemException ase) {
-          result.ase = ase;
-        }
-        return result;
-      }
-    }
-
-    public static class updateExperimentConfiguration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateExperimentConfiguration_args> {
-      public updateExperimentConfiguration() {
-        super("updateExperimentConfiguration");
-      }
-
-      public updateExperimentConfiguration_args getEmptyArgsInstance() {
-        return new updateExperimentConfiguration_args();
+      public updateExperimentConfiguration_args getEmptyArgsInstance() {
+        return new updateExperimentConfiguration_args();
       }
 
       protected boolean isOneway() {
@@ -2002,22 +1458,22 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    public static class getJobStatuses<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getJobStatuses_args> {
-      public getJobStatuses() {
-        super("getJobStatuses");
+    public static class getJobStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getJobStatus_args> {
+      public getJobStatus() {
+        super("getJobStatus");
       }
 
-      public getJobStatuses_args getEmptyArgsInstance() {
-        return new getJobStatuses_args();
+      public getJobStatus_args getEmptyArgsInstance() {
+        return new getJobStatus_args();
       }
 
       protected boolean isOneway() {
         return false;
       }
 
-      public getJobStatuses_result getResult(I iface, getJobStatuses_args args) throws org.apache.thrift.TException {
-        getJobStatuses_result result = new getJobStatuses_result();
-        result.success = iface.getJobStatuses(args.airavataExperimentId);
+      public getJobStatus_result getResult(I iface, getJobStatus_args args) throws org.apache.thrift.TException {
+        getJobStatus_result result = new getJobStatus_result();
+        result.success = iface.getJobStatus(args.resourceJobId);
         return result;
       }
     }
@@ -2082,6 +1538,36 @@ import org.slf4j.LoggerFactory;
       }
     }
 
+    public static class createProject<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createProject_args> {
+      public createProject() {
+        super("createProject");
+      }
+
+      public createProject_args getEmptyArgsInstance() {
+        return new createProject_args();
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public createProject_result getResult(I iface, createProject_args args) throws org.apache.thrift.TException {
+        createProject_result result = new createProject_result();
+        try {
+          result.success = iface.createProject(args.projectName, args.userName);
+        } catch (org.apache.airavata.api.error.InvalidRequestException ire) {
+          result.ire = ire;
+        } catch (org.apache.airavata.api.error.ExperimentNotFoundException enf) {
+          result.enf = enf;
+        } catch (org.apache.airavata.api.error.AiravataClientException ace) {
+          result.ace = ace;
+        } catch (org.apache.airavata.api.error.AiravataSystemException ase) {
+          result.ase = ase;
+        }
+        return result;
+      }
+    }
+
   }
 
   public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
@@ -2096,12 +1582,6 @@ import org.slf4j.LoggerFactory;
 
     private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
       processMap.put("GetAPIVersion", new GetAPIVersion());
-      processMap.put("createProject", new createProject());
-      processMap.put("updateProject", new updateProject());
-      processMap.put("getProject", new getProject());
-      processMap.put("getAllUserProjects", new getAllUserProjects());
-      processMap.put("getAllExperimentsInProject", new getAllExperimentsInProject());
-      processMap.put("getAllUserExperiments", new getAllUserExperiments());
       processMap.put("createExperiment", new createExperiment());
       processMap.put("getExperiment", new getExperiment());
       processMap.put("updateExperiment", new updateExperiment());
@@ -2110,9 +1590,10 @@ import org.slf4j.LoggerFactory;
       processMap.put("launchExperiment", new launchExperiment());
       processMap.put("getExperimentStatus", new getExperimentStatus());
       processMap.put("getExperimentOutputs", new getExperimentOutputs());
-      processMap.put("getJobStatuses", new getJobStatuses());
+      processMap.put("getJobStatus", new getJobStatus());
       processMap.put("cloneExperiment", new cloneExperiment());
       processMap.put("terminateExperiment", new terminateExperiment());
+      processMap.put("createProject", new createProject());
       return processMap;
     }
 
@@ -2167,20 +1648,20 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    public static class createProject<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createProject_args, String> {
-      public createProject() {
-        super("createProject");
+    public static class createExperiment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createExperiment_args, String> {
+      public createExperiment() {
+        super("createExperiment");
       }
 
-      public createProject_args getEmptyArgsInstance() {
-        return new createProject_args();
+      public createExperiment_args getEmptyArgsInstance() {
+        return new createExperiment_args();
       }
 
       public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
         final org.apache.thrift.AsyncProcessFunction fcall = this;
         return new AsyncMethodCallback<String>() { 
           public void onComplete(String o) {
-            createProject_result result = new createProject_result();
+            createExperiment_result result = new createExperiment_result();
             result.success = o;
             try {
               fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
@@ -2193,7 +1674,7 @@ import org.slf4j.LoggerFactory;
           public void onError(Exception e) {
             byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
             org.apache.thrift.TBase msg;
-            createProject_result result = new createProject_result();
+            createExperiment_result result = new createExperiment_result();
             if (e instanceof org.apache.airavata.api.error.InvalidRequestException) {
                         result.ire = (org.apache.airavata.api.error.InvalidRequestException) e;
                         result.setIreIsSet(true);
@@ -2229,25 +1710,26 @@ import org.slf4j.LoggerFactory;
         return false;
       }
 
-      public void start(I iface, createProject_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
-        iface.createProject(args.project, args.userName,resultHandler);
+      public void start(I iface, createExperiment_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
+        iface.createExperiment(args.experiment,resultHandler);
       }
     }
 
-    public static class updateProject<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateProject_args, Void> {
-      public updateProject() {
-        super("updateProject");
+    public static class getExperiment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getExperiment_args, org.apache.airavata.model.workspace.experiment.Experiment> {
+      public getExperiment() {
+        super("getExperiment");
       }
 
-      public updateProject_args getEmptyArgsInstance() {
-        return new updateProject_args();
+      public getExperiment_args getEmptyArgsInstance() {
+        return new getExperiment_args();
       }
 
-      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+      public AsyncMethodCallback<org.apache.airavata.model.workspace.experiment.Experiment> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
         final org.apache.thrift.AsyncProcessFunction fcall = this;
-        return new AsyncMethodCallback<Void>() { 
-          public void onComplete(Void o) {
-            updateProject_result result = new updateProject_result();
+        return new AsyncMethodCallback<org.apache.airavata.model.workspace.experiment.Experiment>() { 
+          public void onComplete(org.apache.airavata.model.workspace.experiment.Experiment o) {
+            getExperiment_result result = new getExperiment_result();
+            result.success = o;
             try {
               fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
               return;
@@ -2259,12 +1741,17 @@ import org.slf4j.LoggerFactory;
           public void onError(Exception e) {
             byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
             org.apache.thrift.TBase msg;
-            updateProject_result result = new updateProject_result();
+            getExperiment_result result = new getExperiment_result();
             if (e instanceof org.apache.airavata.api.error.InvalidRequestException) {
                         result.ire = (org.apache.airavata.api.error.InvalidRequestException) e;
                         result.setIreIsSet(true);
                         msg = result;
             }
+            else             if (e instanceof org.apache.airavata.api.error.ExperimentNotFoundException) {
+                        result.enf = (org.apache.airavata.api.error.ExperimentNotFoundException) e;
+                        result.setEnfIsSet(true);
+                        msg = result;
+            }
             else             if (e instanceof org.apache.airavata.api.error.AiravataClientException) {
                         result.ace = (org.apache.airavata.api.error.AiravataClientException) e;
                         result.setAceIsSet(true);
@@ -2295,26 +1782,25 @@ import org.slf4j.LoggerFactory;
         return false;
       }
 
-      public void start(I iface, updateProject_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
-        iface.updateProject(args.project,resultHandler);
+      public void start(I iface, getExperiment_args args, org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.model.workspace.experiment.Experiment> resultHandler) throws TException {
+        iface.getExperiment(args.airavataExperimentId,resultHandler);
       }
     }
 
-    public static class getProject<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProject_args, org.apache.airavata.model.workspace.Project> {
-      public getProject() {
-        super("getProject");
+    public static class updateExperiment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateExperiment_args, Void> {
+      public updateExperiment() {
+        super("updateExperiment");
       }
 
-      public getProject_args getEmptyArgsInstance() {
-        return new getProject_args();
+      public updateExperiment_args getEmptyArgsInstance() {
+        return new updateExperiment_args();
       }
 
-      public AsyncMethodCallback<org.apache.airavata.model.workspace.Project> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
         final org.apache.thrift.AsyncProcessFunction fcall = this;
-        return new AsyncMethodCallback<org.apache.airavata.model.workspace.Project>() { 
-          public void onComplete(org.apache.airavata.model.workspace.Project o) {
-            getProject_result result = new getProject_result();
-            result.success = o;
+        return new AsyncMethodCallback<Void>() { 
+          public void onComplete(Void o) {
+            updateExperiment_result result = new updateExperiment_result();
             try {
               fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
               return;
@@ -2326,12 +1812,17 @@ import org.slf4j.LoggerFactory;
           public void onError(Exception e) {
             byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
             org.apache.thrift.TBase msg;
-            getProject_result result = new getProject_result();
+            updateExperiment_result result = new updateExperiment_result();
             if (e instanceof org.apache.airavata.api.error.InvalidRequestException) {
                         result.ire = (org.apache.airavata.api.error.InvalidRequestException) e;
                         result.setIreIsSet(true);
                         msg = result;
             }
+            else             if (e instanceof org.apache.airavata.api.error.ExperimentNotFoundException) {
+                        result.enf = (org.apache.airavata.api.error.ExperimentNotFoundException) e;
+                        result.setEnfIsSet(true);
+                        msg = result;
+            }
             else             if (e instanceof org.apache.airavata.api.error.AiravataClientException) {
                         result.ace = (org.apache.airavata.api.error.AiravataClientException) e;
                         result.setAceIsSet(true);
@@ -2362,26 +1853,25 @@ import org.slf4j.LoggerFactory;
         return false;
       }
 
-      public void start(I iface, getProject_args args, org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.model.workspace.Project> resultHandler) throws TException {
-        iface.getProject(args.projectId,resultHandler);
+      public void start(I iface, updateExperiment_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
+        iface.updateExperiment(args.airavataExperimentId, args.experiment,resultHandler);
       }
     }
 
-    public static class getAllUserProjects<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllUserProjects_args, List<org.apache.airavata.model.workspace.Project>> {
-      public getAllUserProjects() {
-        super("getAllUserProjects");
+    public static class updateExperimentConfiguration<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateExperimentConfiguration_args, Void> {
+      public updateExperimentConfiguration() {
+        super("updateExperimentConfiguration");
       }
 
-      public getAllUserProjects_args getEmptyArgsInstance() {
-        return new getAllUserProjects_args();
+      public updateExperimentConfiguration_args getEmptyArgsInstance() {
+        return new updateExperimentConfiguration_args();
       }
 
-      public AsyncMethodCallback<List<org.apache.airavata.model.workspace.Project>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
         final org.apache.thrift.AsyncProcessFunction fcall = this;
-        return new AsyncMethodCallback<List<org.apache.airavata.model.workspace.Project>>() { 
-          public void onComplete(List<org.apache.airavata.model.workspace.Project> o) {
-            getAllUserProjects_result result = new getAllUserProjects_result();
-            result.success = o;
+        return new AsyncMethodCallback<Void>() { 
+          public void onComplete(Void o) {
+            updateExperimentConfiguration_result result = new updateExperimentConfiguration_result();
             try {
               fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
               return;
@@ -2393,23 +1883,57 @@ import org.slf4j.LoggerFactory;
           public void onError(Exception e) {
             byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
             org.apache.thrift.TBase msg;
-            getAllUserProjects_result result = new getAllUserProjects_result();
-            if (e instanceof org.apache.airavata.api.error.InvalidRequestException) {
-                        result.ire = (org.apache.airavata.api.error.InvalidRequestException) e;
-                        result.setIreIsSet(true);
-                        msg = result;
-            }
-            else             if (e instanceof org.apache.airavata.api.error.AiravataClientException) {
-                        result.ace = (org.apache.airavata.api.error.AiravataClientException) e;
-                        result.setAceIsSet(true);
-                        msg = result;
+            updateExperimentConfiguration_result result = new updateExperimentConfiguration_result();
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
             }
-            else             if (e instanceof org.apache.airavata.api.error.AiravataSystemException) {
-                        result.ase = (org.apache.airavata.api.error.AiravataSystemException) e;
-                        result.setAseIsSet(true);
-                        msg = result;
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
             }
-             else 
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, updateExperimentConfiguration_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
+        iface.updateExperimentConfiguration(args.airavataExperimentId, args.userConfiguration,resultHandler);
+      }
+    }
+
+    public static class updateResourceScheduleing<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateResourceScheduleing_args, Void> {
+      public updateResourceScheduleing() {
+        super("updateResourceScheduleing");
+      }
+
+      public updateResourceScheduleing_args getEmptyArgsInstance() {
+        return new updateResourceScheduleing_args();
+      }
+
+      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<Void>() { 
+          public void onComplete(Void o) {
+            updateResourceScheduleing_result result = new updateResourceScheduleing_result();
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
+            }
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            updateResourceScheduleing_result result = new updateResourceScheduleing_result();
             {
               msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
               msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
@@ -2429,26 +1953,25 @@ import org.slf4j.LoggerFactory;
         return false;
       }
 
-      public void start(I iface, getAllUserProjects_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.apache.airavata.model.workspace.Project>> resultHandler) throws TException {
-        iface.getAllUserProjects(args.userName,resultHandler);
+      public void start(I iface, updateResourceScheduleing_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
+        iface.updateResourceScheduleing(args.airavataExperimentId, args.resourceScheduling,resultHandler);
       }
     }
 
-    public static class getAllExperimentsInProject<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllExperimentsInProject_args, List<org.apache.airavata.model.workspace.experiment.Experiment>> {
-      public getAllExperimentsInProject() {
-        super("getAllExperimentsInProject");
+    public static class launchExperiment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, launchExperiment_args, Void> {
+      public launchExperiment() {
+        super("launchExperiment");
       }
 
-      public getAllExperimentsInProject_args getEmptyArgsInstance() {
-        return new getAllExperimentsInProject_args();
+      public launchExperiment_args getEmptyArgsInstance() {
+        return new launchExperiment_args();
       }
 
-      public AsyncMethodCallback<List<org.apache.airavata.model.workspace.experiment.Experiment>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
         final org.apache.thrift.AsyncProcessFunction fcall = this;
-        return new AsyncMethodCallback<List<org.apache.airavata.model.workspace.experiment.Experiment>>() { 
-          public void onComplete(List<org.apache.airavata.model.workspace.experiment.Experiment> o) {
-            getAllExperimentsInProject_result result = new getAllExperimentsInProject_result();
-            result.success = o;
+        return new AsyncMethodCallback<Void>() { 
+          public void onComplete(Void o) {
+            launchExperiment_result result = new launchExperiment_result();
             try {
               fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
               return;
@@ -2460,12 +1983,17 @@ import org.slf4j.LoggerFactory;
           public void onError(Exception e) {
             byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
             org.apache.thrift.TBase msg;
-            getAllExperimentsInProject_result result = new getAllExperimentsInProject_result();
+            launchExperiment_result result = new launchExperiment_result();
             if (e instanceof org.apache.airavata.api.error.InvalidRequestException) {
                         result.ire = (org.apache.airavata.api.error.InvalidRequestException) e;
                         result.setIreIsSet(true);
                         msg = result;
             }
+            else             if (e instanceof org.apache.airavata.api.error.ExperimentNotFoundException) {
+                        result.enf = (org.apache.airavata.api.error.ExperimentNotFoundException) e;
+                        result.setEnfIsSet(true);
+                        msg = result;
+            }
             else             if (e instanceof org.apache.airavata.api.error.AiravataClientException) {
                         result.ace = (org.apache.airavata.api.error.AiravataClientException) e;
                         result.setAceIsSet(true);
@@ -2496,25 +2024,25 @@ import org.slf4j.LoggerFactory;
         return false;
       }
 
-      public void start(I iface, getAllExperimentsInProject_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.apache.airavata.model.workspace.experiment.Experiment>> resultHandler) throws TException {
-        iface.getAllExperimentsInProject(args.projectId,resultHandler);
+      public void start(I iface, launchExperiment_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
+        iface.launchExperiment(args.airavataExperimentId, args.airavataCredStoreToken,resultHandler);
       }
     }
 
-    public static class getAllUserExperiments<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllUserExperiments_args, List<org.apache.airavata.model.workspace.experiment.Experiment>> {
-      public getAllUserExperiments() {
-        super("getAllUserExperiments");
+    public static class getExperimentStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getExperimentStatus_args, org.apache.airavata.model.workspace.experiment.ExperimentStatus> {
+      public getExperimentStatus() {
+        super("getExperimentStatus");
       }
 
-      public getAllUserExperiments_args getEmptyArgsInstance() {
-        return new getAllUserExperiments_args();
+      public getExperimentStatus_args getEmptyArgsInstance() {
+        return new getExperimentStatus_args();
       }
 
-      public AsyncMethodCallback<List<org.apache.airavata.model.workspace.experiment.Experiment>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+      public AsyncMethodCallback<org.apache.airavata.model.workspace.experiment.ExperimentStatus> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
         final org.apache.thrift.AsyncProcessFunction fcall = this;
-        return new AsyncMethodCallback<List<org.apache.airavata.model.workspace.experiment.Experiment>>() { 
-          public void onComplete(List<org.apache.airavata.model.workspace.experiment.Experiment> o) {
-            getAllUserExperiments_result result = new getAllUserExperiments_result();
+        return new AsyncMethodCallback<org.apache.airavata.model.workspace.experiment.ExperimentStatus>() { 
+          public void onComplete(org.apache.airavata.model.workspace.experiment.ExperimentStatus o) {
+            getExperimentStatus_result result = new getExperimentStatus_result();
             result.success = o;
             try {
               fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
@@ -2527,12 +2055,17 @@ import org.slf4j.LoggerFactory;
           public void onError(Exception e) {
             byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
             org.apache.thrift.TBase msg;
-            getAllUserExperiments_result result = new getAllUserExperiments_result();
+            getExperimentStatus_result result = new getExperimentStatus_result();
             if (e instanceof org.apache.airavata.api.error.InvalidRequestException) {
                         result.ire = (org.apache.airavata.api.error.InvalidRequestException) e;
                         result.setIreIsSet(true);
                         msg = result;
             }
+            else             if (e instanceof org.apache.airavata.api.error.ExperimentNotFoundException) {
+                        result.enf = (org.apache.airavata.api.error.ExperimentNotFoundException) e;
+                        result.setEnfIsSet(true);
+                        msg = result;
+            }
             else             if (e instanceof org.apache.airavata.api.error.AiravataClientException) {
                         result.ace = (org.apache.airavata.api.error.AiravataClientException) e;
                         result.setAceIsSet(true);
@@ -2563,25 +2096,25 @@ import org.slf4j.LoggerFactory;
         return false;
       }
 
-      public void start(I iface, getAllUserExperiments_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.apache.airavata.model.workspace.experiment.Experiment>> resultHandler) throws TException {
-        iface.getAllUserExperiments(args.userName,resultHandler);
+      public void start(I iface, getExperimentStatus_args args, org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.model.workspace.experiment.ExperimentStatus> resultHandler) throws TException {
+        iface.getExperimentStatus(args.airavataExperimentId,resultHandler);
       }
     }
 
-    public static class createExperiment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createExperiment_args, String> {
-      public createExperiment() {
-        super("createExperiment");
+    public static class getExperimentOutputs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getExperimentOutputs_args, List<org.apache.airavata.model.workspace.experiment.DataObjectType>> {
+      public getExperimentOutputs() {
+        super("getExperimentOutputs");
       }
 
-      public createExperiment_args getEmptyArgsInstance() {
-        return new createExperiment_args();
+      public getExperimentOutputs_args getEmptyArgsInstance() {
+        return new getExperimentOutputs_args();
       }
 
-      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+      public AsyncMethodCallback<List<org.apache.airavata.model.workspace.experiment.DataObjectType>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
         final org.apache.thrift.AsyncProcessFunction fcall = this;
-        return new AsyncMethodCallback<String>() { 
-          public void onComplete(String o) {
-            createExperiment_result result = new createExperiment_result();
+        return new AsyncMethodCallback<List<org.apache.airavata.model.workspace.experiment.DataObjectType>>() { 
+          public void onComplete(List<org.apache.airavata.model.workspace.experiment.DataObjectType> o) {
+            getExperimentOutputs_result result = new getExperimentOutputs_result();
             result.success = o;
             try {
               fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
@@ -2594,23 +2127,58 @@ import org.slf4j.LoggerFactory;
           public void onError(Exception e) {
             byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
             org.apache.thrift.TBase msg;
-            createExperiment_result result = new createExperiment_result();
-            if (e instanceof org.apache.airavata.api.error.InvalidRequestException) {
-                        result.ire = (org.apache.airavata.api.error.InvalidRequestException) e;
-                        result.setIreIsSet(true);
-                        msg = result;
+            getExperimentOutputs_result result = new getExperimentOutputs_result();
+            {
+              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
+              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
             }
-            else             if (e instanceof org.apache.airavata.api.error.AiravataClientException) {
-                        result.ace = (org.apache.airavata.api.error.AiravataClientException) e;
-                        result.setAceIsSet(true);
-                        msg = result;
+            try {
+              fcall.sendResponse(fb,msg,msgType,seqid);
+              return;
+            } catch (Exception ex) {
+              LOGGER.error("Exception writing to internal frame buffer", ex);
             }
-            else             if (e instanceof org.apache.airavata.api.error.AiravataSystemException) {
-                        result.ase = (org.apache.airavata.api.error.AiravataSystemException) e;
-                        result.setAseIsSet(true);
-                        msg = result;
+            fb.close();
+          }
+        };
+      }
+
+      protected boolean isOneway() {
+        return false;
+      }
+
+      public void start(I iface, getExperimentOutputs_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.apache.airavata.model.workspace.experiment.DataObjectType>> resultHandler) throws TException {
+        iface.getExperimentOutputs(args.airavataExperimentId,resultHandler);
+      }
+    }
+
+    public static class getJobStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getJobStatus_args, org.apache.airavata.model.workspace.experiment.TaskStatus> {
+      public getJobStatus() {
+        super("getJobStatus");
+      }
+
+      public getJobStatus_args getEmptyArgsInstance() {
+        return new getJobStatus_args();
+      }
+
+      public AsyncMethodCallback<org.apache.airavata.model.workspace.experiment.TaskStatus> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+        final org.apache.thrift.AsyncProcessFunction fcall = this;
+        return new AsyncMethodCallback<org.apache.airavata.model.workspace.experiment.TaskStatus>() { 
+          public void onComplete(org.apache.airavata.model.workspace.experiment.TaskStatus o) {
+            getJobStatus_result result = new getJobStatus_result();
+            result.success = o;
+            try {
+              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
+              return;
+            } catch (Exception e) {
+              LOGGER.error("Exception writing to internal frame buffer", e);
             }
-             else 
+            fb.close();
+          }
+          public void onError(Exception e) {
+            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
+            org.apache.thrift.TBase msg;
+            getJobStatus_result result = new getJobStatus_result();
             {
               msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
               msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
@@ -2630,25 +2198,25 @@ import org.slf4j.LoggerFactory;
         return false;
       }
 
-      public void start(I iface, createExperiment_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
-        iface.createExperiment(args.experiment,resultHandler);
+      public void start(I iface, getJobStatus_args args, org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.model.workspace.experiment.TaskStatus> resultHandler) throws TException {
+        iface.getJobStatus(args.resourceJobId,resultHandler);
       }
     }
 
-    public static class getExperiment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getExperiment_args, org.apache.airavata.model.workspace.experiment.Experiment> {
-      public getExperiment() {
-        super("getExperiment");
+    public static class cloneExperiment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cloneExperiment_args, String> {
+      public cloneExperiment() {
+        super("cloneExperiment");
       }
 
-      public getExperiment_args getEmptyArgsInstance() {
-        return new getExperiment_args();
+      public cloneExperiment_args getEmptyArgsInstance() {
+        return new cloneExperiment_args();
       }
 
-      public AsyncMethodCallback<org.apache.airavata.model.workspace.experiment.Experiment> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
         final org.apache.thrift.AsyncProcessFunction fcall = this;
-        return new AsyncMethodCallback<org.apache.airavata.model.workspace.experiment.Experiment>() { 
-          public void onComplete(org.apache.airavata.model.workspace.experiment.Experiment o) {
-            getExperiment_result result = new getExperiment_result();
+        return new AsyncMethodCallback<String>() { 
+          public void onComplete(String o) {
+            cloneExperiment_result result = new cloneExperiment_result();
             result.success = o;
             try {
               fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
@@ -2661,7 +2229,7 @@ import org.slf4j.LoggerFactory;
           public void onError(Exception e) {
             byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
             org.apache.thrift.TBase msg;
-            getExperiment_result result = new getExperiment_result();
+            cloneExperiment_result result = new cloneExperiment_result();
             if (e instanceof org.apache.airavata.api.error.InvalidRequestException) {
                         result.ire = (org.apache.airavata.api.error.InvalidRequestException) e;
                         result.setIreIsSet(true);
@@ -2702,25 +2270,25 @@ import org.slf4j.LoggerFactory;
         return false;
       }
 
-      public void start(I iface, getExperiment_args args, org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.model.workspace.experiment.Experiment> resultHandler) throws TException {
-        iface.getExperiment(args.airavataExperimentId,resultHandler);
+      public void start(I iface, cloneExperiment_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
+        iface.cloneExperiment(args.airavataExperimentIdToBeCloned, args.updatedExperiment,resultHandler);
       }
     }
 
-    public static class updateExperiment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateExperiment_args, Void> {
-      public updateExperiment() {
-        super("updateExperiment");
+    public static class terminateExperiment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, terminateExperiment_args, Void> {
+      public terminateExperiment() {
+        super("terminateExperiment");
       }
 
-      public updateExperiment_args getEmptyArgsInstance() {
-        return new updateExperiment_args();
+      public terminateExperiment_args getEmptyArgsInstance() {
+        return new terminateExperiment_args();
       }
 
       public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
         final org.apache.thrift.AsyncProcessFunction fcall = this;
         return new AsyncMethodCallback<Void>() { 
           public void onComplete(Void o) {
-            updateExperiment_result result = new updateExperiment_result();
+            terminateExperiment_result result = new terminateExperiment_result();
             try {
               fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
               return;
@@ -2732,7 +2300,7 @@ import org.slf4j.LoggerFactory;
           public void onError(Exception e) {
             byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
             org.apache.thrift.TBase msg;
-            updateExperiment_result result = new updateExperiment_result();
+            terminateExperiment_result result = new terminateExperiment_result();
             if (e instanceof org.apache.airavata.api.error.InvalidRequestException) {
                         result.ire = (org.apache.airavata.api.error.InvalidRequestException) e;
                         result.setIreIsSet(true);
@@ -2773,25 +2341,26 @@ import org.slf4j.LoggerFactory;
         return false;
       }
 
-      public void start(I iface, updateExperiment_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
-        iface.updateExperiment(args.airavataExperimentId, args.experiment,resultHandler);
+      public void start(I iface, terminateExperiment_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
+        iface.terminateExperiment(args.airavataExperimentId,resultHandler);
       }
     }
 
-    public static class updateExperimentConfiguration<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateExperimentConfiguration_args, Void> {
-      public updateExperimentConfiguration() {
-        super("updateExperimentConfiguration");
+    public static class createProject<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createProject_args, String> {
+      public createProject() {
+        super("createProject");
       }
 
-      public updateExperimentConfiguration_args getEmptyArgsInstance() {
-        return new updateExperimentConfiguration_args();
+      public createProject_args getEmptyArgsInstance() {
+        return new createProject_args();
       }
 
-      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
+      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
         final org.apache.thrift.AsyncProcessFunction fcall = this;
-        return new AsyncMethodCallback<Void>() { 
-          public void onComplete(Void o) {
-            updateExperimentConfiguration_result result = new updateExperimentConfiguration_result();
+        return new AsyncMethodCallback<String>() { 
+          public void onComplete(String o) {
+            createProject_result result = new createProject_result();
+            result.success = o;
             try {
               fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
               return;
@@ -2803,7 +2372,28 @@ import org.slf4j.LoggerFactory;
           public void onError(Exception e) {
             byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
             org.apache.thrift.TBase msg;
-            updateExperimentConfiguration_result result = new updateExperimentConfiguration_result();
+            createProject_result result = new createProject_result();
+            if (e instanceof org.apache.airavata.api.error.InvalidRequestException) {
+                        result.ire = (org.apache.airavata.api.error.InvalidRequestException) e;
+                        result.setIreIsSet(true);
+                        msg = result;
+            }
+            else             if (e instanceof org.apache.airavata.api.error.ExperimentNotFoundException) {
+                        result.enf = (org.apache.airavata.api.error.ExperimentNotFoundException) e;
+                        result.setEnfIsSet(true);
+                        msg = result;
+            }
+            else             if (e instanceof org.apache.airavata.api.error.AiravataClientException) {
+                        result.ace = (org.apache.airavata.api.error.AiravataClientException) e;
+                        result.setAceIsSet(true);
+                        msg = result;
+            }
+            else             if (e instanceof org.apache.airavata.api.error.AiravataSystemException) {
+                        result.ase = (org.apache.airavata.api.error.AiravataSystemException) e;
+                        result.setAseIsSet(true);
+                        msg = result;
+            }
+             else 
             {
               msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
               msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
@@ -2823,5160 +2413,27 @@ import org.slf4j.LoggerFactory;
         return false;
       }
 
-      public void start(I iface, updateExperimentConfiguration_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
-        iface.updateExperimentConfiguration(args.airavataExperimentId, args.userConfiguration,resultHandler);
+      public void start(I iface, createProject_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
+        iface.createProject(args.projectName, args.userName,resultHandler);
       }
     }
 
-    public static class updateResourceScheduleing<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateResourceScheduleing_args, Void> {
-      public updateResourceScheduleing() {
-        super("updateResourceScheduleing");
-      }
+  }
 
-      public updateResourceScheduleing_args getEmptyArgsInstance() {
-        return new updateResourceScheduleing_args();
-      }
+  public static class GetAPIVersion_args implements org.apache.thrift.TBase<GetAPIVersion_args, GetAPIVersion_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetAPIVersion_args>   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAPIVersion_args");
 
-      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
-        final org.apache.thrift.AsyncProcessFunction fcall = this;
-        return new AsyncMethodCallback<Void>() { 
-          public void onComplete(Void o) {
-            updateResourceScheduleing_result result = new updateResourceScheduleing_result();
-            try {
-              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
-              return;
-            } catch (Exception e) {
-              LOGGER.error("Exception writing to internal frame buffer", e);
-            }
-            fb.close();
-          }
-          public void onError(Exception e) {
-            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
-            org.apache.thrift.TBase msg;
-            updateResourceScheduleing_result result = new updateResourceScheduleing_result();
-            {
-              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
-              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
-            }
-            try {
-              fcall.sendResponse(fb,msg,msgType,seqid);
-              return;
-            } catch (Exception ex) {
-              LOGGER.error("Exception writing to internal frame buffer", ex);
-            }
-            fb.close();
-          }
-        };
-      }
-
-      protected boolean isOneway() {
-        return false;
-      }
-
-      public void start(I iface, updateResourceScheduleing_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
-        iface.updateResourceScheduleing(args.airavataExperimentId, args.resourceScheduling,resultHandler);
-      }
-    }
-
-    public static class launchExperiment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, launchExperiment_args, Void> {
-      public launchExperiment() {
-        super("launchExperiment");
-      }
-
-      public launchExperiment_args getEmptyArgsInstance() {
-        return new launchExperiment_args();
-      }
-
-      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
-        final org.apache.thrift.AsyncProcessFunction fcall = this;
-        return new AsyncMethodCallback<Void>() { 
-          public void onComplete(Void o) {
-            launchExperiment_result result = new launchExperiment_result();
-            try {
-              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
-              return;
-            } catch (Exception e) {
-              LOGGER.error("Exception writing to internal frame buffer", e);
-            }
-            fb.close();
-          }
-          public void onError(Exception e) {
-            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
-            org.apache.thrift.TBase msg;
-            launchExperiment_result result = new launchExperiment_result();
-            if (e instanceof org.apache.airavata.api.error.InvalidRequestException) {
-                        result.ire = (org.apache.airavata.api.error.InvalidRequestException) e;
-                        result.setIreIsSet(true);
-                        msg = result;
-            }
-            else             if (e instanceof org.apache.airavata.api.error.ExperimentNotFoundException) {
-                        result.enf = (org.apache.airavata.api.error.ExperimentNotFoundException) e;
-                        result.setEnfIsSet(true);
-                        msg = result;
-            }
-            else             if (e instanceof org.apache.airavata.api.error.AiravataClientException) {
-                        result.ace = (org.apache.airavata.api.error.AiravataClientException) e;
-                        result.setAceIsSet(true);
-                        msg = result;
-            }
-            else             if (e instanceof org.apache.airavata.api.error.AiravataSystemException) {
-                        result.ase = (org.apache.airavata.api.error.AiravataSystemException) e;
-                        result.setAseIsSet(true);
-                        msg = result;
-            }
-             else 
-            {
-              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
-              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
-            }
-            try {
-              fcall.sendResponse(fb,msg,msgType,seqid);
-              return;
-            } catch (Exception ex) {
-              LOGGER.error("Exception writing to internal frame buffer", ex);
-            }
-            fb.close();
-          }
-        };
-      }
-
-      protected boolean isOneway() {
-        return false;
-      }
-
-      public void start(I iface, launchExperiment_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
-        iface.launchExperiment(args.airavataExperimentId, args.airavataCredStoreToken,resultHandler);
-      }
-    }
-
-    public static class getExperimentStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getExperimentStatus_args, org.apache.airavata.model.workspace.experiment.ExperimentStatus> {
-      public getExperimentStatus() {
-        super("getExperimentStatus");
-      }
-
-      public getExperimentStatus_args getEmptyArgsInstance() {
-        return new getExperimentStatus_args();
-      }
-
-      public AsyncMethodCallback<org.apache.airavata.model.workspace.experiment.ExperimentStatus> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
-        final org.apache.thrift.AsyncProcessFunction fcall = this;
-        return new AsyncMethodCallback<org.apache.airavata.model.workspace.experiment.ExperimentStatus>() { 
-          public void onComplete(org.apache.airavata.model.workspace.experiment.ExperimentStatus o) {
-            getExperimentStatus_result result = new getExperimentStatus_result();
-            result.success = o;
-            try {
-              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
-              return;
-            } catch (Exception e) {
-              LOGGER.error("Exception writing to internal frame buffer", e);
-            }
-            fb.close();
-          }
-          public void onError(Exception e) {
-            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
-            org.apache.thrift.TBase msg;
-            getExperimentStatus_result result = new getExperimentStatus_result();
-            if (e instanceof org.apache.airavata.api.error.InvalidRequestException) {
-                        result.ire = (org.apache.airavata.api.error.InvalidRequestException) e;
-                        result.setIreIsSet(true);
-                        msg = result;
-            }
-            else             if (e instanceof org.apache.airavata.api.error.ExperimentNotFoundException) {
-                        result.enf = (org.apache.airavata.api.error.ExperimentNotFoundException) e;
-                        result.setEnfIsSet(true);
-                        msg = result;
-            }
-            else             if (e instanceof org.apache.airavata.api.error.AiravataClientException) {
-                        result.ace = (org.apache.airavata.api.error.AiravataClientException) e;
-                        result.setAceIsSet(true);
-                        msg = result;
-            }
-            else             if (e instanceof org.apache.airavata.api.error.AiravataSystemException) {
-                        result.ase = (org.apache.airavata.api.error.AiravataSystemException) e;
-                        result.setAseIsSet(true);
-                        msg = result;
-            }
-             else 
-            {
-              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
-              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
-            }
-            try {
-              fcall.sendResponse(fb,msg,msgType,seqid);
-              return;
-            } catch (Exception ex) {
-              LOGGER.error("Exception writing to internal frame buffer", ex);
-            }
-            fb.close();
-          }
-        };
-      }
-
-      protected boolean isOneway() {
-        return false;
-      }
-
-      public void start(I iface, getExperimentStatus_args args, org.apache.thrift.async.AsyncMethodCallback<org.apache.airavata.model.workspace.experiment.ExperimentStatus> resultHandler) throws TException {
-        iface.getExperimentStatus(args.airavataExperimentId,resultHandler);
-      }
-    }
-
-    public static class getExperimentOutputs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getExperimentOutputs_args, List<org.apache.airavata.model.workspace.experiment.DataObjectType>> {
-      public getExperimentOutputs() {
-        super("getExperimentOutputs");
-      }
-
-      public getExperimentOutputs_args getEmptyArgsInstance() {
-        return new getExperimentOutputs_args();
-      }
-
-      public AsyncMethodCallback<List<org.apache.airavata.model.workspace.experiment.DataObjectType>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
-        final org.apache.thrift.AsyncProcessFunction fcall = this;
-        return new AsyncMethodCallback<List<org.apache.airavata.model.workspace.experiment.DataObjectType>>() { 
-          public void onComplete(List<org.apache.airavata.model.workspace.experiment.DataObjectType> o) {
-            getExperimentOutputs_result result = new getExperimentOutputs_result();
-            result.success = o;
-            try {
-              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
-              return;
-            } catch (Exception e) {
-              LOGGER.error("Exception writing to internal frame buffer", e);
-            }
-            fb.close();
-          }
-          public void onError(Exception e) {
-            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
-            org.apache.thrift.TBase msg;
-            getExperimentOutputs_result result = new getExperimentOutputs_result();
-            {
-              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
-              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
-            }
-            try {
-              fcall.sendResponse(fb,msg,msgType,seqid);
-              return;
-            } catch (Exception ex) {
-              LOGGER.error("Exception writing to internal frame buffer", ex);
-            }
-            fb.close();
-          }
-        };
-      }
-
-      protected boolean isOneway() {
-        return false;
-      }
-
-      public void start(I iface, getExperimentOutputs_args args, org.apache.thrift.async.AsyncMethodCallback<List<org.apache.airavata.model.workspace.experiment.DataObjectType>> resultHandler) throws TException {
-        iface.getExperimentOutputs(args.airavataExperimentId,resultHandler);
-      }
-    }
-
-    public static class getJobStatuses<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getJobStatuses_args, Map<String,org.apache.airavata.model.workspace.experiment.JobStatus>> {
-      public getJobStatuses() {
-        super("getJobStatuses");
-      }
-
-      public getJobStatuses_args getEmptyArgsInstance() {
-        return new getJobStatuses_args();
-      }
-
-      public AsyncMethodCallback<Map<String,org.apache.airavata.model.workspace.experiment.JobStatus>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
-        final org.apache.thrift.AsyncProcessFunction fcall = this;
-        return new AsyncMethodCallback<Map<String,org.apache.airavata.model.workspace.experiment.JobStatus>>() { 
-          public void onComplete(Map<String,org.apache.airavata.model.workspace.experiment.JobStatus> o) {
-            getJobStatuses_result result = new getJobStatuses_result();
-            result.success = o;
-            try {
-              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
-              return;
-            } catch (Exception e) {
-              LOGGER.error("Exception writing to internal frame buffer", e);
-            }
-            fb.close();
-          }
-          public void onError(Exception e) {
-            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
-            org.apache.thrift.TBase msg;
-            getJobStatuses_result result = new getJobStatuses_result();
-            {
-              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
-              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
-            }
-            try {
-              fcall.sendResponse(fb,msg,msgType,seqid);
-              return;
-            } catch (Exception ex) {
-              LOGGER.error("Exception writing to internal frame buffer", ex);
-            }
-            fb.close();
-          }
-        };
-      }
-
-      protected boolean isOneway() {
-        return false;
-      }
-
-      public void start(I iface, getJobStatuses_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,org.apache.airavata.model.workspace.experiment.JobStatus>> resultHandler) throws TException {
-        iface.getJobStatuses(args.airavataExperimentId,resultHandler);
-      }
-    }
-
-    public static class cloneExperiment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cloneExperiment_args, String> {
-      public cloneExperiment() {
-        super("cloneExperiment");
-      }
-
-      public cloneExperiment_args getEmptyArgsInstance() {
-        return new cloneExperiment_args();
-      }
-
-      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
-        final org.apache.thrift.AsyncProcessFunction fcall = this;
-        return new AsyncMethodCallback<String>() { 
-          public void onComplete(String o) {
-            cloneExperiment_result result = new cloneExperiment_result();
-            result.success = o;
-            try {
-              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
-              return;
-            } catch (Exception e) {
-              LOGGER.error("Exception writing to internal frame buffer", e);
-            }
-            fb.close();
-          }
-          public void onError(Exception e) {
-            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
-            org.apache.thrift.TBase msg;
-            cloneExperiment_result result = new cloneExperiment_result();
-            if (e instanceof org.apache.airavata.api.error.InvalidRequestException) {
-                        result.ire = (org.apache.airavata.api.error.InvalidRequestException) e;
-                        result.setIreIsSet(true);
-                        msg = result;
-            }
-            else             if (e instanceof org.apache.airavata.api.error.ExperimentNotFoundException) {
-                        result.enf = (org.apache.airavata.api.error.ExperimentNotFoundException) e;
-                        result.setEnfIsSet(true);
-                        msg = result;
-            }
-            else             if (e instanceof org.apache.airavata.api.error.AiravataClientException) {
-                        result.ace = (org.apache.airavata.api.error.AiravataClientException) e;
-                        result.setAceIsSet(true);
-                        msg = result;
-            }
-            else             if (e instanceof org.apache.airavata.api.error.AiravataSystemException) {
-                        result.ase = (org.apache.airavata.api.error.AiravataSystemException) e;
-                        result.setAseIsSet(true);
-                        msg = result;
-            }
-             else 
-            {
-              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
-              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
-            }
-            try {
-              fcall.sendResponse(fb,msg,msgType,seqid);
-              return;
-            } catch (Exception ex) {
-              LOGGER.error("Exception writing to internal frame buffer", ex);
-            }
-            fb.close();
-          }
-        };
-      }
-
-      protected boolean isOneway() {
-        return false;
-      }
-
-      public void start(I iface, cloneExperiment_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
-        iface.cloneExperiment(args.airavataExperimentIdToBeCloned, args.updatedExperiment,resultHandler);
-      }
-    }
-
-    public static class terminateExperiment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, terminateExperiment_args, Void> {
-      public terminateExperiment() {
-        super("terminateExperiment");
-      }
-
-      public terminateExperiment_args getEmptyArgsInstance() {
-        return new terminateExperiment_args();
-      }
-
-      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
-        final org.apache.thrift.AsyncProcessFunction fcall = this;
-        return new AsyncMethodCallback<Void>() { 
-          public void onComplete(Void o) {
-            terminateExperiment_result result = new terminateExperiment_result();
-            try {
-              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
-              return;
-            } catch (Exception e) {
-              LOGGER.error("Exception writing to internal frame buffer", e);
-            }
-            fb.close();
-          }
-          public void onError(Exception e) {
-            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
-            org.apache.thrift.TBase msg;
-            terminateExperiment_result result = new terminateExperiment_result();
-            if (e instanceof org.apache.airavata.api.error.InvalidRequestException) {
-                        result.ire = (org.apache.airavata.api.error.InvalidRequestException) e;
-                        result.setIreIsSet(true);
-                        msg = result;
-            }
-            else             if (e instanceof org.apache.airavata.api.error.ExperimentNotFoundException) {
-                        result.enf = (org.apache.airavata.api.error.ExperimentNotFoundException) e;
-                        result.setEnfIsSet(true);
-                        msg = result;
-            }
-            else             if (e instanceof org.apache.airavata.api.error.AiravataClientException) {
-                        result.ace = (org.apache.airavata.api.error.AiravataClientException) e;
-                        result.setAceIsSet(true);
-                        msg = result;
-            }
-            else             if (e instanceof org.apache.airavata.api.error.AiravataSystemException) {
-                        result.ase = (org.apache.airavata.api.error.AiravataSystemException) e;
-                        result.setAseIsSet(true);
-                        msg = result;
-            }
-             else 
-            {
-              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
-              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
-            }
-            try {
-              fcall.sendResponse(fb,msg,msgType,seqid);
-              return;
-            } catch (Exception ex) {
-              LOGGER.error("Exception writing to internal frame buffer", ex);
-            }
-            fb.close();
-          }
-        };
-      }
-
-      protected boolean isOneway() {
-        return false;
-      }
-
-      public void start(I iface, terminateExperiment_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
-        iface.terminateExperiment(args.airavataExperimentId,resultHandler);
-      }
-    }
-
-  }
-
-  public static class GetAPIVersion_args implements org.apache.thrift.TBase<GetAPIVersion_args, GetAPIVersion_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetAPIVersion_args>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAPIVersion_args");
-
-
-    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
-    static {
-      schemes.put(StandardScheme.class, new GetAPIVersion_argsStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new GetAPIVersion_argsTupleSchemeFactory());
-    }
-
-
-    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
-    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-;
-
-      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
-
-      static {
-        for (_Fields field : EnumSet.allOf(_Fields.class)) {
-          byName.put(field.getFieldName(), field);
-        }
-      }
-
-      /**
-       * Find the _Fields constant that matches fieldId, or null if its not found.
-       */
-      public static _Fields findByThriftId(int fieldId) {
-        switch(fieldId) {
-          default:
-            return null;
-        }
-      }
-
-      /**
-       * Find the _Fields constant that matches fieldId, throwing an exception
-       * if it is not found.
-       */
-      public static _Fields findByThriftIdOrThrow(int fieldId) {
-        _Fields fields = findByThriftId(fieldId);
-        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
-        return fields;
-      }
-
-      /**
-       * Find the _Fields constant that matches name, or null if its not found.
-       */
-      public static _Fields findByName(String name) {
-        return byName.get(name);
-      }
-
-      private final short _thriftId;
-      private final String _fieldName;
-
-      _Fields(short thriftId, String fieldName) {
-        _thriftId = thriftId;
-        _fieldName = fieldName;
-      }
-
-      public short getThriftFieldId() {
-        return _thriftId;
-      }
-
-      public String getFieldName() {
-        return _fieldName;
-      }
-    }
-    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
-    static {
-      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-      metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAPIVersion_args.class, metaDataMap);
-    }
-
-    public GetAPIVersion_args() {
-    }
-
-    /**
-     * Performs a deep copy on <i>other</i>.
-     */
-    public GetAPIVersion_args(GetAPIVersion_args other) {
-    }
-
-    public GetAPIVersion_args deepCopy() {
-      return new GetAPIVersion_args(this);
-    }
-
-    @Override
-    public void clear() {
-    }
-
-    public void setFieldValue(_Fields field, Object value) {
-      switch (field) {
-      }
-    }
-
-    public Object getFieldValue(_Fields field) {
-      switch (field) {
-      }
-      throw new IllegalStateException();
-    }
-
-    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
-    public boolean isSet(_Fields field) {
-      if (field == null) {
-        throw new IllegalArgumentException();
-      }
-
-      switch (field) {
-      }
-      throw new IllegalStateException();
-    }
-
-    @Override
-    public boolean equals(Object that) {
-      if (that == null)
-        return false;
-      if (that instanceof GetAPIVersion_args)
-        return this.equals((GetAPIVersion_args)that);
-      return false;
-    }
-
-    public boolean equals(GetAPIVersion_args that) {
-      if (that == null)
-        return false;
-
-      return true;
-    }
-
-    @Override
-    public int hashCode() {
-      return 0;
-    }
-
-    @Override
-    public int compareTo(GetAPIVersion_args other) {
-      if (!getClass().equals(other.getClass())) {
-        return getClass().getName().compareTo(other.getClass().getName());
-      }
-
-      int lastComparison = 0;
-
-      return 0;
-    }
-
-    public _Fields fieldForId(int fieldId) {
-      return _Fields.findByThriftId(fieldId);
-    }
-
-    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
-      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
-    }
-
-    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
-      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
-    }
-
-    @Override
-    public String toString() {
-      StringBuilder sb = new StringBuilder("GetAPIVersion_args(");
-      boolean first = true;
-
-      sb.append(")");
-      return sb.toString();
-    }
-
-    public void validate() throws org.apache.thrift.TException {
-      // check for required fields
-      // check for sub-struct validity
-    }
-
-    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
-      try {
-        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
-      } catch (org.apache.thrift.TException te) {
-        throw new java.io.IOException(te);
-      }
-    }
-
-    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
-      try {
-        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
-      } catch (org.apache.thrift.TException te) {
-        throw new java.io.IOException(te);
-      }
-    }
-
-    private static class GetAPIVersion_argsStandardSchemeFactory implements SchemeFactory {
-      public GetAPIVersion_argsStandardScheme getScheme() {
-        return new GetAPIVersion_argsStandardScheme();
-      }
-    }
-
-    private static class GetAPIVersion_argsStandardScheme extends StandardScheme<GetAPIVersion_args> {
-
-      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAPIVersion_args struct) throws org.apache.thrift.TException {
-        org.apache.thrift.protocol.TField schemeField;
-        iprot.readStructBegin();
-        while (true)
-        {
-          schemeField = iprot.readFieldBegin();
-          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
-            break;
-          }
-          switch (schemeField.id) {
-            default:
-              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-          }
-          iprot.readFieldEnd();
-        }
-        iprot.readStructEnd();
-
-        // check for required fields of primitive type, which can't be checked in the validate method
-        struct.validate();
-      }
-
-      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAPIVersion_args struct) throws org.apache.thrift.TException {
-        struct.validate();
-
-        oprot.writeStructBegin(STRUCT_DESC);
-        oprot.writeFieldStop();
-        oprot.writeStructEnd();
-      }
-
-    }
-
-    private static class GetAPIVersion_argsTupleSchemeFactory implements SchemeFactory {
-      public GetAPIVersion_argsTupleScheme getScheme() {
-        return new GetAPIVersion_argsTupleScheme();
-      }
-    }
-
-    private static class GetAPIVersion_argsTupleScheme extends TupleScheme<GetAPIVersion_args> {
-
-      @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, GetAPIVersion_args struct) throws org.apache.thrift.TException {
-        TTupleProtocol oprot = (TTupleProtocol) prot;
-      }
-
-      @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, GetAPIVersion_args struct) throws org.apache.thrift.TException {
-        TTupleProtocol iprot = (TTupleProtocol) prot;
-      }
-    }
-
-  }
-
-  public static class GetAPIVersion_result implements org.apache.thrift.TBase<GetAPIVersion_result, GetAPIVersion_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetAPIVersion_result>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAPIVersion_result");
-
-    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
-
-    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
-    static {
-      schemes.put(StandardScheme.class, new GetAPIVersion_resultStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new GetAPIVersion_resultTupleSchemeFactory());
-    }
-
-    public String success; // required
-
-    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
-    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      SUCCESS((short)0, "success");
-
-      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
-
-      static {
-        for (_Fields field : EnumSet.allOf(_Fields.class)) {
-          byName.put(field.getFieldName(), field);
-        }
-      }
-
-      /**
-       * Find the _Fields constant that matches fieldId, or null if its not found.
-       */
-      public static _Fields findByThriftId(int fieldId) {
-        switch(fieldId) {
-          case 0: // SUCCESS
-            return SUCCESS;
-          default:
-            return null;
-        }
-      }
-
-      /**
-       * Find the _Fields constant that matches fieldId, throwing an exception
-       * if it is not found.
-       */
-      public static _Fields findByThriftIdOrThrow(int fieldId) {
-        _Fields fields = findByThriftId(fieldId);
-        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
-        return fields;
-      }
-
-      /**
-       * Find the _Fields constant that matches name, or null if its not found.
-       */
-      public static _Fields findByName(String name) {
-        return byName.get(name);
-      }
-
-      private final short _thriftId;
-      private final String _fieldName;
-
-      _Fields(short thriftId, String fieldName) {
-        _thriftId = thriftId;
-        _fieldName = fieldName;
-      }
-
-      public short getThriftFieldId() {
-        return _thriftId;
-      }
-
-      public String getFieldName() {
-        return _fieldName;
-      }
-    }
-
-    // isset id assignments
-    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
-    static {
-      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
-      metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAPIVersion_result.class, metaDataMap);
-    }
-
-    public GetAPIVersion_result() {
-    }
-
-    public GetAPIVersion_result(
-      String success)
-    {
-      this();
-      this.success = success;
-    }
-
-    /**
-     * Performs a deep copy on <i>other</i>.
-     */
-    public GetAPIVersion_result(GetAPIVersion_result other) {
-      if (other.isSetSuccess()) {
-        this.success = other.success;
-      }
-    }
-
-    public GetAPIVersion_result deepCopy() {
-      return new GetAPIVersion_result(this);
-    }
-
-    @Override
-    public void clear() {
-      this.success = null;
-    }
-
-    public String getSuccess() {
-      return this.success;
-    }
-
-    public GetAPIVersion_result setSuccess(String success) {
-      this.success = success;
-      return this;
-    }
-
-    public void unsetSuccess() {
-      this.success = null;
-    }
-
-    /** Returns true if field success is set (has been assigned a value) and false otherwise */
-    public boolean isSetSuccess() {
-      return this.success != null;
-    }
-
-    public void setSuccessIsSet(boolean value) {
-      if (!value) {
-        this.success = null;
-      }
-    }
-
-    public void setFieldValue(_Fields field, Object value) {
-      switch (field) {
-      case SUCCESS:
-        if (value == null) {
-          unsetSuccess();
-        } else {
-          setSuccess((String)value);
-        }
-        break;
-
-      }
-    }
-
-    public Object getFieldValue(_Fields field) {
-      switch (field) {
-      case SUCCESS:
-        return getSuccess();
-
-      }
-      throw new IllegalStateException();
-    }
-
-    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
-    public boolean isSet(_Fields field) {
-      if (field == null) {
-        throw new IllegalArgumentException();
-      }
-
-      switch (field) {
-      case SUCCESS:
-        return isSetSuccess();
-      }
-      throw new IllegalStateException();
-    }
-
-    @Override
-    public boolean equals(Object that) {
-      if (that == null)
-        return false;
-      if (that instanceof GetAPIVersion_result)
-        return this.equals((GetAPIVersion_result)that);
-      return false;
-    }
-
-    public boolean equals(GetAPIVersion_result that) {
-      if (that == null)
-        return false;
-
-      boolean this_present_success = true && this.isSetSuccess();
-      boolean that_present_success = true && that.isSetSuccess();
-      if (this_present_success || that_present_success) {
-        if (!(this_present_success && that_present_success))
-          return false;
-        if (!this.success.equals(that.success))
-          return false;
-      }
-
-      return true;
-    }
-
-    @Override
-    public int hashCode() {
-      return 0;
-    }
-
-    @Override
-    public int compareTo(GetAPIVersion_result other) {
-      if (!getClass().equals(other.getClass())) {
-        return getClass().getName().compareTo(other.getClass().getName());
-      }
-
-      int lastComparison = 0;
-
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      return 0;
-    }
-
-    public _Fields fieldForId(int fieldId) {
-      return _Fields.findByThriftId(fieldId);
-    }
-
-    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
-      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
-    }
-
-    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
-      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
-      }
-
-    @Override
-    public String toString() {
-      StringBuilder sb = new StringBuilder("GetAPIVersion_result(");
-      boolean first = true;
-
-      sb.append("success:");
-      if (this.success == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.success);
-      }
-      first = false;
-      sb.append(")");
-      return sb.toString();
-    }
-
-    public void validate() throws org.apache.thrift.TException {
-      // check for required fields
-      // check for sub-struct validity
-    }
-
-    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
-      try {
-        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
-      } catch (org.apache.thrift.TException te) {
-        throw new java.io.IOException(te);
-      }
-    }
-
-    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
-      try {
-        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
-      } catch (org.apache.thrift.TException te) {
-        throw new java.io.IOException(te);
-      }
-    }
-
-    private static class GetAPIVersion_resultStandardSchemeFactory implements SchemeFactory {
-      public GetAPIVersion_resultStandardScheme getScheme() {
-        return new GetAPIVersion_resultStandardScheme();
-      }
-    }
-
-    private static class GetAPIVersion_resultStandardScheme extends StandardScheme<GetAPIVersion_result> {
-
-      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAPIVersion_result struct) throws org.apache.thrift.TException {
-        org.apache.thrift.protocol.TField schemeField;
-        iprot.readStructBegin();
-        while (true)
-        {
-          schemeField = iprot.readFieldBegin();
-          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
-            break;
-          }
-          switch (schemeField.id) {
-            case 0: // SUCCESS
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
-                struct.success = iprot.readString();
-                struct.setSuccessIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
-            default:
-              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-          }
-          iprot.readFieldEnd();
-        }
-        iprot.readStructEnd();
-
-        // check for required fields of primitive type, which can't be checked in the validate method
-        struct.validate();
-      }
-
-      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAPIVersion_result struct) throws org.apache.thrift.TException {
-        struct.validate();
-
-        oprot.writeStructBegin(STRUCT_DESC);
-        if (struct.success != null) {
-          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-          oprot.writeString(struct.success);
-          oprot.writeFieldEnd();
-        }
-        oprot.writeFieldStop();
-        oprot.writeStructEnd();
-      }
-
-    }
-
-    private static class GetAPIVersion_resultTupleSchemeFactory implements SchemeFactory {
-      public GetAPIVersion_resultTupleScheme getScheme() {
-        return new GetAPIVersion_resultTupleScheme();
-      }
-    }
-
-    private static class GetAPIVersion_resultTupleScheme extends TupleScheme<GetAPIVersion_result> {
-
-      @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, GetAPIVersion_result struct) throws org.apache.thrift.TException {
-        TTupleProtocol oprot = (TTupleProtocol) prot;
-        BitSet optionals = new BitSet();
-        if (struct.isSetSuccess()) {
-          optionals.set(0);
-        }
-        oprot.writeBitSet(optionals, 1);
-        if (struct.isSetSuccess()) {
-          oprot.writeString(struct.success);
-        }
-      }
-
-      @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, GetAPIVersion_result struct) throws org.apache.thrift.TException {
-        TTupleProtocol iprot = (TTupleProtocol) prot;
-        BitSet incoming = iprot.readBitSet(1);
-        if (incoming.get(0)) {
-          struct.success = iprot.readString();
-          struct.setSuccessIsSet(true);
-        }
-      }
-    }
-
-  }
-
-  public static class createProject_args implements org.apache.thrift.TBase<createProject_args, createProject_args._Fields>, java.io.Serializable, Cloneable, Comparable<createProject_args>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createProject_args");
-
-    private static final org.apache.thrift.protocol.TField PROJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("project", org.apache.thrift.protocol.TType.STRUCT, (short)1);
-    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);
-
-    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
-    static {
-      schemes.put(StandardScheme.class, new createProject_argsStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new createProject_argsTupleSchemeFactory());
-    }
-
-    public org.apache.airavata.model.workspace.Project project; // required
-    public String userName; // required
-
-    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
-    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      PROJECT((short)1, "project"),
-      USER_NAME((short)2, "userName");
-
-      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
-
-      static {
-        for (_Fields field : EnumSet.allOf(_Fields.class)) {
-          byName.put(field.getFieldName(), field);
-        }
-      }
-
-      /**
-       * Find the _Fields constant that matches fieldId, or null if its not found.
-       */
-      public static _Fields findByThriftId(int fieldId) {
-        switch(fieldId) {
-          case 1: // PROJECT
-            return PROJECT;
-          case 2: // USER_NAME
-            return USER_NAME;
-          default:
-            return null;
-        }
-      }
-
-      /**
-       * Find the _Fields constant that matches fieldId, throwing an exception
-       * if it is not found.
-       */
-      public static _Fields findByThriftIdOrThrow(int fieldId) {
-        _Fields fields = findByThriftId(fieldId);
-        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
-        return fields;
-      }
-
-      /**
-       * Find the _Fields constant that matches name, or null if its not found.
-       */
-      public static _Fields findByName(String name) {
-        return byName.get(name);
-      }
-
-      private final short _thriftId;
-      private final String _fieldName;
-
-      _Fields(short thriftId, String fieldName) {
-        _thriftId = thriftId;
-        _fieldName = fieldName;
-      }
-
-      public short getThriftFieldId() {
-        return _thriftId;
-      }
-
-      public String getFieldName() {
-        return _fieldName;
-      }
-    }
-
-    // isset id assignments
-    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
-    static {
-      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.PROJECT, new org.apache.thrift.meta_data.FieldMetaData("project", org.apache.thrift.TFieldRequirementType.REQUIRED, 
-          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.Project.class)));
-      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
-      metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createProject_args.class, metaDataMap);
-    }
-
-    public createProject_args() {
-    }
-
-    public createProject_args(
-      org.apache.airavata.model.workspace.Project project,
-      String userName)
-    {
-      this();
-      this.project = project;
-      this.userName = userName;
-    }
-
-    /**
-     * Performs a deep copy on <i>other</i>.
-     */
-    public createProject_args(createProject_args other) {
-      if (other.isSetProject()) {
-        this.project = new org.apache.airavata.model.workspace.Project(other.project);
-      }
-      if (other.isSetUserName()) {
-        this.userName = other.userName;
-      }
-    }
-
-    public createProject_args deepCopy() {
-      return new createProject_args(this);
-    }
-
-    @Override
-    public void clear() {
-      this.project = null;
-      this.userName = null;
-    }
-
-    public org.apache.airavata.model.workspace.Project getProject() {
-      return this.project;
-    }
-
-    public createProject_args setProject(org.apache.airavata.model.workspace.Project project) {
-      this.project = project;
-      return this;
-    }
-
-    public void unsetProject() {
-      this.project = null;
-    }
-
-    /** Returns true if field project is set (has been assigned a value) and false otherwise */
-    public boolean isSetProject() {
-      return this.project != null;
-    }
-
-    public void setProjectIsSet(boolean value) {
-      if (!value) {
-        this.project = null;
-      }
-    }
-
-    public String getUserName() {
-      return this.userName;
-    }
-
-    public createProject_args setUserName(String userName) {
-      this.userName = userName;
-      return this;
-    }
-
-    public void unsetUserName() {
-      this.userName = null;
-    }
-
-    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
-    public boolean isSetUserName() {
-      return this.userName != null;
-    }
-
-    public void setUserNameIsSet(boolean value) {
-      if (!value) {
-        this.userName = null;
-      }
-    }
-
-    public void setFieldValue(_Fields field, Object value) {
-      switch (field) {
-      case PROJECT:
-        if (value == null) {
-          unsetProject();
-        } else {
-          setProject((org.apache.airavata.model.workspace.Project)value);
-        }
-        break;
-
-      case USER_NAME:
-        if (value == null) {
-          unsetUserName();
-        } else {
-          setUserName((String)value);
-        }
-        break;
-
-      }
-    }
-
-    public Object getFieldValue(_Fields field) {
-      switch (field) {
-      case PROJECT:
-        return getProject();
-
-      case USER_NAME:
-        return getUserName();
-
-      }
-      throw new IllegalStateException();
-    }
-
-    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
-    public boolean isSet(_Fields field) {
-      if (field == null) {
-        throw new IllegalArgumentException();
-      }
-
-      switch (field) {
-      case PROJECT:
-        return isSetProject();
-      case USER_NAME:
-        return isSetUserName();
-      }
-      throw new IllegalStateException();
-    }
-
-    @Override
-    public boolean equals(Object that) {
-      if (that == null)
-        return false;
-      if (that instanceof createProject_args)
-        return this.equals((createProject_args)that);
-      return false;
-    }
-
-    public boolean equals(createProject_args that) {
-      if (that == null)
-        return false;
-
-      boolean this_present_project = true && this.isSetProject();
-      boolean that_present_project = true && that.isSetProject();
-      if (this_present_project || that_present_project) {
-        if (!(this_present_project && that_present_project))
-          return false;
-        if (!this.project.equals(that.project))
-          return false;
-      }
-
-      boolean this_present_userName = true && this.isSetUserName();
-      boolean that_present_userName = true && that.isSetUserName();
-      if (this_present_userName || that_present_userName) {
-        if (!(this_present_userName && that_present_userName))
-          return false;
-        if (!this.userName.equals(that.userName))
-          return false;
-      }
-
-      return true;
-    }
-
-    @Override
-    public int hashCode() {
-      return 0;
-    }
-
-    @Override
-    public int compareTo(createProject_args other) {
-      if (!getClass().equals(other.getClass())) {
-        return getClass().getName().compareTo(other.getClass().getName());
-      }
-
-      int lastComparison = 0;
-
-      lastComparison = Boolean.valueOf(isSetProject()).compareTo(other.isSetProject());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetProject()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.project, other.project);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetUserName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      return 0;
-    }
-
-    public _Fields fieldForId(int fieldId) {
-      return _Fields.findByThriftId(fieldId);
-    }
-
-    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
-      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
-    }
-
-    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
-      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
-    }
-
-    @Override
-    public String toString() {
-      StringBuilder sb = new StringBuilder("createProject_args(");
-      boolean first = true;
-
-      sb.append("project:");
-      if (this.project == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.project);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("userName:");
-      if (this.userName == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.userName);
-      }
-      first = false;
-      sb.append(")");
-      return sb.toString();
-    }
-
-    public void validate() throws org.apache.thrift.TException {
-      // check for required fields
-      if (project == null) {
-        throw new org.apache.thrift.protocol.TProtocolException("Required field 'project' was not present! Struct: " + toString());
-      }
-      if (userName == null) {
-        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userName' was not present! Struct: " + toString());
-      }
-      // check for sub-struct validity
-      if (project != null) {
-        project.validate();
-      }
-    }
-
-    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
-      try {
-        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
-      } catch (org.apache.thrift.TException te) {
-        throw new java.io.IOException(te);
-      }
-    }
-
-    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
-      try {
-        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
-      } catch (org.apache.thrift.TException te) {
-        throw new java.io.IOException(te);
-      }
-    }
-
-    private static class createProject_argsStandardSchemeFactory implements SchemeFactory {
-      public createProject_argsStandardScheme getScheme() {
-        return new createProject_argsStandardScheme();
-      }
-    }
-
-    private static class createProject_argsStandardScheme extends StandardScheme<createProject_args> {
-
-      public void read(org.apache.thrift.protocol.TProtocol iprot, createProject_args struct) throws org.apache.thrift.TException {
-        org.apache.thrift.protocol.TField schemeField;
-        iprot.readStructBegin();
-        while (true)
-        {
-          schemeField = iprot.readFieldBegin();
-          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
-            break;
-          }
-          switch (schemeField.id) {
-            case 1: // PROJECT
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.project = new org.apache.airavata.model.workspace.Project();
-                struct.project.read(iprot);
-                struct.setProjectIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
-            case 2: // USER_NAME
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
-                struct.userName = iprot.readString();
-                struct.setUserNameIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
-            default:
-              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-          }
-          iprot.readFieldEnd();
-        }
-        iprot.readStructEnd();
-
-        // check for required fields of primitive type, which can't be checked in the validate method
-        struct.validate();
-      }
-
-      public void write(org.apache.thrift.protocol.TProtocol oprot, createProject_args struct) throws org.apache.thrift.TException {
-        struct.validate();
-
-        oprot.writeStructBegin(STRUCT_DESC);
-        if (struct.project != null) {
-          oprot.writeFieldBegin(PROJECT_FIELD_DESC);
-          struct.project.write(oprot);
-          oprot.writeFieldEnd();
-        }
-        if (struct.userName != null) {
-          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
-          oprot.writeString(struct.userName);
-          oprot.writeFieldEnd();
-        }
-        oprot.writeFieldStop();
-        oprot.writeStructEnd();
-      }
-
-    }
-
-    private static class createProject_argsTupleSchemeFactory implements SchemeFactory {
-      public createProject_argsTupleScheme getScheme() {
-        return new createProject_argsTupleScheme();
-      }
-    }
-
-    private static class createProject_argsTupleScheme extends TupleScheme<createProject_args> {
-
-      @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, createProject_args struct) throws org.apache.thrift.TException {
-        TTupleProtocol oprot = (TTupleProtocol) prot;
-        struct.project.write(oprot);
-        oprot.writeString(struct.userName);
-      }
-
-      @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, createProject_args struct) throws org.apache.thrift.TException {
-        TTupleProtocol iprot = (TTupleProtocol) prot;
-        struct.project = new org.apache.airavata.model.workspace.Project();
-        struct.project.read(iprot);
-        struct.setProjectIsSet(true);
-        struct.userName = iprot.readString();
-        struct.setUserNameIsSet(true);
-      }
-    }
-
-  }
-
-  public static class createProject_result implements org.apache.thrift.TBase<createProject_result, createProject_result._Fields>, java.io.Serializable, Cloneable, Comparable<createProject_result>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createProject_result");
-
-    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
-    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
-    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
-    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);
-
-    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
-    static {
-      schemes.put(StandardScheme.class, new createProject_resultStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new createProject_resultTupleSchemeFactory());
-    }
-
-    public String success; // required
-    public org.apache.airavata.api.error.InvalidRequestException ire; // required
-    public org.apache.airavata.api.error.AiravataClientException ace; // required
-    public org.apache.airavata.api.error.AiravataSystemException ase; // required
-
-    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
-    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      SUCCESS((short)0, "success"),
-      IRE((short)1, "ire"),
-      ACE((short)2, "ace"),
-      ASE((short)3, "ase");
-
-      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
-
-      static {
-        for (_Fields field : EnumSet.allOf(_Fields.class)) {
-          byName.put(field.getFieldName(), field);
-        }
-      }
-
-      /**
-       * Find the _Fields constant that matches fieldId, or null if its not found.
-       */
-      public static _Fields findByThriftId(int fieldId) {
-        switch(fieldId) {
-          case 0: // SUCCESS
-            return SUCCESS;
-          case 1: // IRE
-            return IRE;
-          case 2: // ACE
-            return ACE;
-          case 3: // ASE
-            return ASE;
-          default:
-            return null;
-        }
-      }
-
-      /**
-       * Find the _Fields constant that matches fieldId, throwing an exception
-       * if it is not found.
-       */
-      public static _Fields findByThriftIdOrThrow(int fieldId) {
-        _Fields fields = findByThriftId(fieldId);
-        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
-        return fields;
-      }
-
-      /**
-       * Find the _Fields constant that matches name, or null if its not found.
-       */
-      public static _Fields findByName(String name) {
-        return byName.get(name);
-      }
-
-      private final short _thriftId;
-      private final String _fieldName;
-
-      _Fields(short thriftId, String fieldName) {
-        _thriftId = thriftId;
-        _fieldName = fieldName;
-      }
-
-      public short getThriftFieldId() {
-        return _thriftId;
-      }
-
-      public String getFieldName() {
-        return _fieldName;
-      }
-    }
-
-    // isset id assignments
-    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
-    static {
-      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
-      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
-      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
-      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
-      metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createProject_result.class, metaDataMap);
-    }
-
-    public createProject_result() {
-    }
-
-    public createProject_result(
-      String success,
-      org.apache.airavata.api.error.InvalidRequestException ire,
-      org.apache.airavata.api.error.AiravataClientException ace,
-      org.apache.airavata.api.error.AiravataSystemException ase)
-    {
-      this();
-      this.success = success;
-      this.ire = ire;
-      this.ace = ace;
-      this.ase = ase;
-    }
-
-    /**
-     * Performs a deep copy on <i>other</i>.
-     */
-    public createProject_result(createProject_result other) {
-      if (other.isSetSuccess()) {
-        this.success = other.success;
-      }
-      if (other.isSetIre()) {
-        this.ire = new org.apache.airavata.api.error.InvalidRequestException(other.ire);
-      }
-      if (other.isSetAce()) {
-        this.ace = new org.apache.airavata.api.error.AiravataClientException(other.ace);
-      }
-      if (other.isSetAse()) {
-        this.ase = new org.apache.airavata.api.error.AiravataSystemException(other.ase);
-      }
-    }
-
-    public createProject_result deepCopy() {
-      return new createProject_result(this);
-    }
-
-    @Override
-    public void clear() {
-      this.success = null;
-      this.ire = null;
-      this.ace = null;
-      this.ase = null;
-    }
-
-    public String getSuccess() {
-      return this.success;
-    }
-
-    public createProject_result setSuccess(String success) {
-      this.success = success;
-      return this;
-    }
-
-    public void unsetSuccess() {
-      this.success = null;
-    }
-
-    /** Returns true if field success is set (has been assigned a value) and false otherwise */
-    public boolean isSetSuccess() {
-      return this.success != null;
-    }
-
-    public void setSuccessIsSet(boolean value) {
-      if (!value) {
-        this.success = null;
-      }
-    }
-
-    public org.apache.airavata.api.error.InvalidRequestException getIre() {
-      return this.ire;
-    }
-
-    public createProject_result setIre(org.apache.airavata.api.error.InvalidRequestException ire) {
-      this.ire = ire;
-      return this;
-    }
-
-    public void unsetIre() {
-      this.ire = null;
-    }
-
-    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
-    public boolean isSetIre() {
-      return this.ire != null;
-    }
-
-    public void setIreIsSet(boolean value) {
-      if (!value) {
-        this.ire = null;
-      }
-    }
-
-    public org.apache.airavata.api.error.AiravataClientException getAce() {
-      return this.ace;
-    }
-
-    public createProject_result setAce(org.apache.airavata.api.error.AiravataClientException ace) {
-      this.ace = ace;
-      return this;
-    }
-
-    public void unsetAce() {
-      this.ace = null;
-    }
-
-    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
-    public boolean isSetAce() {
-      return this.ace != null;
-    }
-
-    public void setAceIsSet(boolean value) {
-      if (!value) {
-        this.ace = null;
-      }
-    }
-
-    public org.apache.airavata.api.error.AiravataSystemException getAse() {
-      return this.ase;
-    }
-
-    public createProject_result setAse(org.apache.airavata.api.error.AiravataSystemException ase) {
-      this.ase = ase;
-      return this;
-    }
-
-    public void unsetAse() {
-      this.ase = null;
-    }
-
-    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
-    public boolean isSetAse() {
-      return this.ase != null;
-    }
-
-    public void setAseIsSet(boolean value) {
-      if (!value) {
-        this.ase = null;
-      }
-    }
-
-    public void setFieldValue(_Fields field, Object value) {
-      switch (field) {
-      case SUCCESS:
-        if (value == null) {
-          unsetSuccess();
-        } else {
-          setSuccess((String)value);
-        }
-        break;
-
-      case IRE:
-        if (value == null) {
-          unsetIre();
-        } else {
-          setIre((org.apache.airavata.api.error.InvalidRequestException)value);
-        }
-        break;
-
-      case ACE:
-        if (value == null) {
-          unsetAce();
-        } else {
-          setAce((org.apache.airavata.api.error.AiravataClientException)value);
-        }
-        break;
-
-      case ASE:
-        if (value == null) {
-          unsetAse();
-        } else {
-          setAse((org.apache.airavata.api.error.AiravataSystemException)value);
-        }
-        break;
-
-      }
-    }
-
-    public Object getFieldValue(_Fields field) {
-      switch (field) {
-      case SUCCESS:
-        return getSuccess();
-
-      case IRE:
-        return getIre();
-
-      case ACE:
-        return getAce();
-
-      case ASE:
-        return getAse();
-
-      }
-      throw new IllegalStateException();
-    }
-
-    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
-    public boolean isSet(_Fields field) {
-      if (field == null) {
-        throw new IllegalArgumentException();
-      }
-
-      switch (field) {
-      case SUCCESS:
-        return isSetSuccess();
-      case IRE:
-        return isSetIre();
-      case ACE:
-        return isSetAce();
-      case ASE:
-        return isSetAse();
-      }
-      throw new IllegalStateException();
-    }
-
-    @Override
-    public boolean equals(Object that) {
-      if (that == null)
-        return false;
-      if (that instanceof createProject_result)
-        return this.equals((createProject_result)that);
-      return false;
-    }
-
-    public boolean equals(createProject_result that) {
-      if (that == null)
-        return false;
-
-      boolean this_present_success = true && this.isSetSuccess();
-      boolean that_present_success = true && that.isSetSuccess();
-      if (this_present_success || that_present_success) {
-        if (!(this_present_success && that_present_success))
-          return false;
-        if (!this.success.equals(that.success))
-          return false;
-      }
-
-      boolean this_present_ire = true && this.isSetIre();
-      boolean that_present_ire = true && that.isSetIre();
-      if (this_present_ire || that_present_ire) {
-        if (!(this_present_ire && that_present_ire))
-          return false;
-        if (!this.ire.equals(that.ire))
-          return false;
-      }
-
-      boolean this_present_ace = true && this.isSetAce();
-      boolean that_present_ace = true && that.isSetAce();
-      if (this_present_ace || that_present_ace) {
-        if (!(this_present_ace && that_present_ace))
-          return false;
-        if (!this.ace.equals(that.ace))
-          return false;
-      }
-
-      boolean this_present_ase = true && this.isSetAse();
-      boolean that_present_ase = true && that.isSetAse();
-      if (this_present_ase || that_present_ase) {
-        if (!(this_present_ase && that_present_ase))
-          return false;
-        if (!this.ase.equals(that.ase))
-          return false;
-      }
-
-      return true;
-    }
-
-    @Override
-    public int hashCode() {
-      return 0;
-    }
-
-    @Override
-    public int compareTo(createProject_result other) {
-      if (!getClass().equals(other.getClass())) {
-        return getClass().getName().compareTo(other.getClass().getName());
-      }
-
-      int lastComparison = 0;
-
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetIre()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetAce()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetAse()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      return 0;
-    }
-
-    public _Fields fieldForId(int fieldId) {
-      return _Fields.findByThriftId(fieldId);
-    }
-
-    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
-      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
-    }
-
-    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
-      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
-      }
-
-    @Override
-    public String toString() {
-      StringBuilder sb = new StringBuilder("createProject_result(");
-      boolean first = true;
-
-      sb.append("success:");
-      if (this.success == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.success);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("ire:");
-      if (this.ire == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.ire);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("ace:");
-      if (this.ace == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.ace);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("ase:");
-      if (this.ase == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.ase);
-      }
-      first = false;
-      sb.append(")");
-      return sb.toString();
-    }
-
-    public void validate() throws org.apache.thrift.TException {
-      // check for required fields
-      // check for sub-struct validity
-    }
-
-    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
-      try {
-        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
-      } catch (org.apache.thrift.TException te) {
-        throw new java.io.IOException(te);
-      }
-    }
-
-    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
-      try {
-        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
-      } catch (org.apache.thrift.TException te) {
-        throw new java.io.IOException(te);
-      }
-    }
-
-    private static class createProject_resultStandardSchemeFactory implements SchemeFactory {
-      public createProject_resultStandardScheme getScheme() {
-        return new createProject_resultStandardScheme();
-      }
-    }
-
-    private static class createProject_resultStandardScheme extends StandardScheme<createProject_result> {
-
-      public void read(org.apache.thrift.protocol.TProtocol iprot, createProject_result struct) throws org.apache.thrift.TException {
-        org.apache.thrift.protocol.TField schemeField;
-        iprot.readStructBegin();
-        while (true)
-        {
-          schemeField = iprot.readFieldBegin();
-          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
-            break;
-          }
-          switch (schemeField.id) {
-            case 0: // SUCCESS
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
-                struct.success = iprot.readString();
-                struct.setSuccessIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
-            case 1: // IRE
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
-                struct.ire.read(iprot);
-                struct.setIreIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
-            case 2: // ACE
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.ace = new org.apache.airavata.api.error.AiravataClientException();
-                struct.ace.read(iprot);
-                struct.setAceIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
-            case 3: // ASE
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
-                struct.ase.read(iprot);
-                struct.setAseIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
-            default:
-              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-          }
-          iprot.readFieldEnd();
-        }
-        iprot.readStructEnd();
-
-        // check for required fields of primitive type, which can't be checked in the validate method
-        struct.validate();
-      }
-
-      public void write(org.apache.thrift.protocol.TProtocol oprot, createProject_result struct) throws org.apache.thrift.TException {
-        struct.validate();
-
-        oprot.writeStructBegin(STRUCT_DESC);
-        if (struct.success != null) {
-          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-          oprot.writeString(struct.success);
-          oprot.writeFieldEnd();
-        }
-        if (struct.ire != null) {
-          oprot.writeFieldBegin(IRE_FIELD_DESC);
-          struct.ire.write(oprot);
-          oprot.writeFieldEnd();
-        }
-        if (struct.ace != null) {
-          oprot.writeFieldBegin(ACE_FIELD_DESC);
-          struct.ace.write(oprot);
-          oprot.writeFieldEnd();
-        }
-        if (struct.ase != null) {
-          oprot.writeFieldBegin(ASE_FIELD_DESC);
-          struct.ase.write(oprot);
-          oprot.writeFieldEnd();
-        }
-        oprot.writeFieldStop();
-        oprot.writeStructEnd();
-      }
-
-    }
-
-    private static class createProject_resultTupleSchemeFactory implements SchemeFactory {
-      public createProject_resultTupleScheme getScheme() {
-        return new createProject_resultTupleScheme();
-      }
-    }
-
-    private static class createProject_resultTupleScheme extends TupleScheme<createProject_result> {
-
-      @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, createProject_result struct) throws org.apache.thrift.TException {
-        TTupleProtocol oprot = (TTupleProtocol) prot;
-        BitSet optionals = new BitSet();
-        if (struct.isSetSuccess()) {
-          optionals.set(0);
-        }
-        if (struct.isSetIre()) {
-          optionals.set(1);
-        }
-        if (struct.isSetAce()) {
-          optionals.set(2);
-        }
-        if (struct.isSetAse()) {
-          optionals.set(3);
-        }
-        oprot.writeBitSet(optionals, 4);
-        if (struct.isSetSuccess()) {
-          oprot.writeString(struct.success);
-        }
-        if (struct.isSetIre()) {
-          struct.ire.write(oprot);
-        }
-        if (struct.isSetAce()) {
-          struct.ace.write(oprot);
-        }
-        if (struct.isSetAse()) {
-          struct.ase.write(oprot);
-        }
-      }
-
-      @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, createProject_result struct) throws org.apache.thrift.TException {
-        TTupleProtocol iprot = (TTupleProtocol) prot;
-        BitSet incoming = iprot.readBitSet(4);
-        if (incoming.get(0)) {
-          struct.success = iprot.readString();
-          struct.setSuccessIsSet(true);
-        }
-        if (incoming.get(1)) {
-          struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
-          struct.ire.read(iprot);
-          struct.setIreIsSet(true);
-        }
-        if (incoming.get(2)) {
-          struct.ace = new org.apache.airavata.api.error.AiravataClientException();
-          struct.ace.read(iprot);
-          struct.setAceIsSet(true);
-        }
-        if (incoming.get(3)) {
-          struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
-          struct.ase.read(iprot);
-          struct.setAseIsSet(true);
-        }
-      }
-    }
-
-  }
-
-  public static class updateProject_args implements org.apache.thrift.TBase<updateProject_args, updateProject_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateProject_args>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProject_args");
-
-    private static final org.apache.thrift.protocol.TField PROJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("project", org.apache.thrift.protocol.TType.STRUCT, (short)1);
-
-    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
-    static {
-      schemes.put(StandardScheme.class, new updateProject_argsStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new updateProject_argsTupleSchemeFactory());
-    }
-
-    public org.apache.airavata.model.workspace.Project project; // required
-
-    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
-    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      PROJECT((short)1, "project");
-
-      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
-
-      static {
-        for (_Fields field : EnumSet.allOf(_Fields.class)) {
-          byName.put(field.getFieldName(), field);
-        }
-      }
-
-      /**
-       * Find the _Fields constant that matches fieldId, or null if its not found.
-       */
-      public static _Fields findByThriftId(int fieldId) {
-        switch(fieldId) {
-          case 1: // PROJECT
-            return PROJECT;
-          default:
-            return null;
-        }
-      }
-
-      /**
-       * Find the _Fields constant that matches fieldId, throwing an exception
-       * if it is not found.
-       */
-      public static _Fields findByThriftIdOrThrow(int fieldId) {
-        _Fields fields = findByThriftId(fieldId);
-        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
-        return fields;
-      }
-
-      /**
-       * Find the _Fields constant that matches name, or null if its not found.
-       */
-      public static _Fields findByName(String name) {
-        return byName.get(name);
-      }
-
-      private final short _thriftId;
-      private final String _fieldName;
-
-      _Fields(short thriftId, String fieldName) {
-        _thriftId = thriftId;
-        _fieldName = fieldName;
-      }
-
-      public short getThriftFieldId() {
-        return _thriftId;
-      }
-
-      public String getFieldName() {
-        return _fieldName;
-      }
-    }
-
-    // isset id assignments
-    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
-    static {
-      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.PROJECT, new org.apache.thrift.meta_data.FieldMetaData("project", org.apache.thrift.TFieldRequirementType.REQUIRED, 
-          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.Project.class)));
-      metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProject_args.class, metaDataMap);
-    }
-
-    public updateProject_args() {
-    }
-
-    public updateProject_args(
-      org.apache.airavata.model.workspace.Project project)
-    {
-      this();
-      this.project = project;
-    }
-
-    /**
-     * Performs a deep copy on <i>other</i>.
-     */
-    public updateProject_args(updateProject_args other) {
-      if (other.isSetProject()) {
-        this.project = new org.apache.airavata.model.workspace.Project(other.project);
-      }
-    }
-
-    public updateProject_args deepCopy() {
-      return new updateProject_args(this);
-    }
-
-    @Override
-    public void clear() {
-      this.project = null;
-    }
-
-    public org.apache.airavata.model.workspace.Project getProject() {
-      return this.project;
-    }
-
-    public updateProject_args setProject(org.apache.airavata.model.workspace.Project project) {
-      this.project = project;
-      return this;
-    }
-
-    public void unsetProject() {
-      this.project = null;
-    }
-
-    /** Returns true if field project is set (has been assigned a value) and false otherwise */
-    public boolean isSetProject() {
-      return this.project != null;
-    }
-
-    public void setProjectIsSet(boolean value) {
-      if (!value) {
-        this.project = null;
-      }
-    }
-
-    public void setFieldValue(_Fields field, Object value) {
-      switch (field) {
-      case PROJECT:
-        if (value == null) {
-          unsetProject();
-        } else {
-          setProject((org.apache.airavata.model.workspace.Project)value);
-        }
-        break;
-
-      }
-    }
-
-    public Object getFieldValue(_Fields field) {
-      switch (field) {
-      case PROJECT:
-        return getProject();
-
-      }
-      throw new IllegalStateException();
-    }
-
-    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
-    public boolean isSet(_Fields field) {
-      if (field == null) {
-        throw new IllegalArgumentException();
-      }
-
-      switch (field) {
-      case PROJECT:
-        return isSetProject();
-      }
-      throw new IllegalStateException();
-    }
-
-    @Override
-    public boolean equals(Object that) {
-      if (that == null)
-        return false;
-      if (that instanceof updateProject_args)
-        return this.equals((updateProject_args)that);
-      return false;
-    }
-
-    public boolean equals(updateProject_args that) {
-      if (that == null)
-        return false;
-
-      boolean this_present_project = true && this.isSetProject();
-      boolean that_present_project = true && that.isSetProject();
-      if (this_present_project || that_present_project) {
-        if (!(this_present_project && that_present_project))
-          return false;
-        if (!this.project.equals(that.project))
-          return false;
-      }
-
-      return true;
-    }
-
-    @Override
-    public int hashCode() {
-      return 0;
-    }
-
-    @Override
-    public int compareTo(updateProject_args other) {
-      if (!getClass().equals(other.getClass())) {
-        return getClass().getName().compareTo(other.getClass().getName());
-      }
-
-      int lastComparison = 0;
-
-      lastComparison = Boolean.valueOf(isSetProject()).compareTo(other.isSetProject());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetProject()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.project, other.project);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      return 0;
-    }
-
-    public _Fields fieldForId(int fieldId) {
-      return _Fields.findByThriftId(fieldId);
-    }
-
-    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
-      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
-    }
-
-    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
-      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
-    }
-
-    @Override
-    public String toString() {
-      StringBuilder sb = new StringBuilder("updateProject_args(");
-      boolean first = true;
-
-      sb.append("project:");
-      if (this.project == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.project);
-      }
-      first = false;
-      sb.append(")");
-      return sb.toString();
-    }
-
-    public void validate() throws org.apache.thrift.TException {
-      // check for required fields
-      if (project == null) {
-        throw new org.apache.thrift.protocol.TProtocolException("Required field 'project' was not present! Struct: " + toString());
-      }
-      // check for sub-struct validity
-      if (project != null) {
-        project.validate();
-      }
-    }
-
-    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
-      try {
-        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
-      } catch (org.apache.thrift.TException te) {
-        throw new java.io.IOException(te);
-      }
-    }
-
-    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
-      try {
-        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
-      } catch (org.apache.thrift.TException te) {
-        throw new java.io.IOException(te);
-      }
-    }
-
-    private static class updateProject_argsStandardSchemeFactory implements SchemeFactory {
-      public updateProject_argsStandardScheme getScheme() {
-        return new updateProject_argsStandardScheme();
-      }
-    }
-
-    private static class updateProject_argsStandardScheme extends StandardScheme<updateProject_args> {
-
-      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProject_args struct) throws org.apache.thrift.TException {
-        org.apache.thrift.protocol.TField schemeField;
-        iprot.readStructBegin();
-        while (true)
-        {
-          schemeField = iprot.readFieldBegin();
-          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
-            break;
-          }
-          switch (schemeField.id) {
-            case 1: // PROJECT
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.project = new org.apache.airavata.model.workspace.Project();
-                struct.project.read(iprot);
-                struct.setProjectIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
-            default:
-              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-          }
-          iprot.readFieldEnd();
-        }
-        iprot.readStructEnd();
-
-        // check for required fields of primitive type, which can't be checked in the validate method
-        struct.validate();
-      }
-
-      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProject_args struct) throws org.apache.thrift.TException {
-        struct.validate();
-
-        oprot.writeStructBegin(STRUCT_DESC);
-        if (struct.project != null) {
-          oprot.writeFieldBegin(PROJECT_FIELD_DESC);
-          struct.project.write(oprot);
-          oprot.writeFieldEnd();
-        }
-        oprot.writeFieldStop();
-        oprot.writeStructEnd();
-      }
-
-    }
-
-    private static class updateProject_argsTupleSchemeFactory implements SchemeFactory {
-      public updateProject_argsTupleScheme getScheme() {
-        return new updateProject_argsTupleScheme();
-      }
-    }
-
-    private static class updateProject_argsTupleScheme extends TupleScheme<updateProject_args> {
-
-      @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, updateProject_args struct) throws org.apache.thrift.TException {
-        TTupleProtocol oprot = (TTupleProtocol) prot;
-        struct.project.write(oprot);
-      }
-
-      @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, updateProject_args struct) throws org.apache.thrift.TException {
-        TTupleProtocol iprot = (TTupleProtocol) prot;
-        struct.project = new org.apache.airavata.model.workspace.Project();
-        struct.project.read(iprot);
-        struct.setProjectIsSet(true);
-      }
-    }
-
-  }
-
-  public static class updateProject_result implements org.apache.thrift.TBase<updateProject_result, updateProject_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateProject_result>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProject_result");
-
-    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
-    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
-    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);
-
-    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
-    static {
-      schemes.put(StandardScheme.class, new updateProject_resultStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new updateProject_resultTupleSchemeFactory());
-    }
-
-    public org.apache.airavata.api.error.InvalidRequestException ire; // required
-    public org.apache.airavata.api.error.AiravataClientException ace; // required
-    public org.apache.airavata.api.error.AiravataSystemException ase; // required
-
-    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
-    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      IRE((short)1, "ire"),
-      ACE((short)2, "ace"),
-      ASE((short)3, "ase");
-
-      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
-
-      static {
-        for (_Fields field : EnumSet.allOf(_Fields.class)) {
-          byName.put(field.getFieldName(), field);
-        }
-      }
-
-      /**
-       * Find the _Fields constant that matches fieldId, or null if its not found.
-       */
-      public static _Fields findByThriftId(int fieldId) {
-        switch(fieldId) {
-          case 1: // IRE
-            return IRE;
-          case 2: // ACE
-            return ACE;
-          case 3: // ASE
-            return ASE;
-          default:
-            return null;
-        }
-      }
-
-      /**
-       * Find the _Fields constant that matches fieldId, throwing an exception
-       * if it is not found.
-       */
-      public static _Fields findByThriftIdOrThrow(int fieldId) {
-        _Fields fields = findByThriftId(fieldId);
-        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
-        return fields;
-      }
-
-      /**
-       * Find the _Fields constant that matches name, or null if its not found.
-       */
-      public static _Fields findByName(String name) {
-        return byName.get(name);
-      }
-
-      private final short _thriftId;
-      private final String _fieldName;
-
-      _Fields(short thriftId, String fieldName) {
-        _thriftId = thriftId;
-        _fieldName = fieldName;
-      }
-
-      public short getThriftFieldId() {
-        return _thriftId;
-      }
-
-      public String getFieldName() {
-        return _fieldName;
-      }
-    }
-
-    // isset id assignments
-    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
-    static {
-      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
-      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
-      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
-      metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProject_result.class, metaDataMap);
-    }
-
-    public updateProject_result() {
-    }
-
-    public updateProject_result(
-      org.apache.airavata.api.error.InvalidRequestException ire,
-      org.apache.airavata.api.error.AiravataClientException ace,
-      org.apache.airavata.api.error.AiravataSystemException ase)
-    {
-      this();
-      this.ire = ire;
-      this.ace = ace;
-      this.ase = ase;
-    }
-
-    /**
-     * Performs a deep copy on <i>other</i>.
-     */
-    public updateProject_result(updateProject_result other) {
-      if (other.isSetIre()) {
-        this.ire = new org.apache.airavata.api.error.InvalidRequestException(other.ire);
-      }
-      if (other.isSetAce()) {
-        this.ace = new org.apache.airavata.api.error.AiravataClientException(other.ace);
-      }
-      if (other.isSetAse()) {
-        this.ase = new org.apache.airavata.api.error.AiravataSystemException(other.ase);
-      }
-    }
-
-    public updateProject_result deepCopy() {
-      return new updateProject_result(this);
-    }
-
-    @Override
-    public void clear() {
-      this.ire = null;
-      this.ace = null;
-      this.ase = null;
-    }
-
-    public org.apache.airavata.api.error.InvalidRequestException getIre() {
-      return this.ire;
-    }
-
-    public updateProject_result setIre(org.apache.airavata.api.error.InvalidRequestException ire) {
-      this.ire = ire;
-      return this;
-    }
-
-    public void unsetIre() {
-      this.ire = null;
-    }
-
-    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
-    public boolean isSetIre() {
-      return this.ire != null;
-    }
-
-    public void setIreIsSet(boolean value) {
-      if (!value) {
-        this.ire = null;
-      }
-    }
-
-    public org.apache.airavata.api.error.AiravataClientException getAce() {
-      return this.ace;
-    }
-
-    public updateProject_result setAce(org.apache.airavata.api.error.AiravataClientException ace) {
-      this.ace = ace;
-      return this;
-    }
-
-    public void unsetAce() {
-      this.ace = null;
-    }
-
-    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
-    public boolean isSetAce() {
-      return this.ace != null;
-    }
-
-    public void setAceIsSet(boolean value) {
-      if (!value) {
-        this.ace = null;
-      }
-    }
-
-    public org.apache.airavata.api.error.AiravataSystemException getAse() {
-      return this.ase;
-    }
-
-    public updateProject_result setAse(org.apache.airavata.api.error.AiravataSystemException ase) {
-      this.ase = ase;
-      return this;
-    }
-
-    public void unsetAse() {
-      this.ase = null;
-    }
-
-    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
-    public boolean isSetAse() {
-      return this.ase != null;
-    }
-
-    public void setAseIsSet(boolean value) {
-      if (!value) {
-        this.ase = null;
-      }
-    }
-
-    public void setFieldValue(_Fields field, Object value) {
-      switch (field) {
-      case IRE:
-        if (value == null) {
-          unsetIre();
-        } else {
-          setIre((org.apache.airavata.api.error.InvalidRequestException)value);
-        }
-        break;
-
-      case ACE:
-        if (value == null) {
-          unsetAce();
-        } else {
-          setAce((org.apache.airavata.api.error.AiravataClientException)value);
-        }
-        break;
-
-      case ASE:
-        if (value == null) {
-          unsetAse();
-        } else {
-          setAse((org.apache.airavata.api.error.AiravataSystemException)value);
-        }
-        break;
-
-      }
-    }
-
-    public Object getFieldValue(_Fields field) {
-      switch (field) {
-      case IRE:
-        return getIre();
-
-      case ACE:
-        return getAce();
-
-      case ASE:
-        return getAse();
-
-      }
-      throw new IllegalStateException();
-    }
-
-    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
-    public boolean isSet(_Fields field) {
-      if (field == null) {
-        throw new IllegalArgumentException();
-      }
-
-      switch (field) {
-      case IRE:
-        return isSetIre();
-      case ACE:
-        return isSetAce();
-      case ASE:
-        return isSetAse();
-      }
-      throw new IllegalStateException();
-    }
-
-    @Override
-    public boolean equals(Object that) {
-      if (that == null)
-        return false;
-      if (that instanceof updateProject_result)
-        return this.equals((updateProject_result)that);
-      return false;
-    }
-
-    public boolean equals(updateProject_result that) {
-      if (that == null)
-        return false;
-
-      boolean this_present_ire = true && this.isSetIre();
-      boolean that_present_ire = true && that.isSetIre();
-      if (this_present_ire || that_present_ire) {
-        if (!(this_present_ire && that_present_ire))
-          return false;
-        if (!this.ire.equals(that.ire))
-          return false;
-      }
-
-      boolean this_present_ace = true && this.isSetAce();
-      boolean that_present_ace = true && that.isSetAce();
-      if (this_present_ace || that_present_ace) {
-        if (!(this_present_ace && that_present_ace))
-          return false;
-        if (!this.ace.equals(that.ace))
-          return false;
-      }
-
-      boolean this_present_ase = true && this.isSetAse();
-      boolean that_present_ase = true && that.isSetAse();
-      if (this_present_ase || that_present_ase) {
-        if (!(this_present_ase && that_present_ase))
-          return false;
-        if (!this.ase.equals(that.ase))
-          return false;
-      }
-
-      return true;
-    }
-
-    @Override
-    public int hashCode() {
-      return 0;
-    }
-
-    @Override
-    public int compareTo(updateProject_result other) {
-      if (!getClass().equals(other.getClass())) {
-        return getClass().getName().compareTo(other.getClass().getName());
-      }
-
-      int lastComparison = 0;
-
-      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetIre()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetAce()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetAse()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      return 0;
-    }
-
-    public _Fields fieldForId(int fieldId) {
-      return _Fields.findByThriftId(fieldId);
-    }
-
-    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
-      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
-    }
-
-    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
-      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
-      }
-
-    @Override
-    public String toString() {
-      StringBuilder sb = new StringBuilder("updateProject_result(");
-      boolean first = true;
-
-      sb.append("ire:");
-      if (this.ire == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.ire);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("ace:");
-      if (this.ace == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.ace);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("ase:");
-      if (this.ase == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.ase);
-      }
-      first = false;
-      sb.append(")");
-      return sb.toString();
-    }
-
-    public void validate() throws org.apache.thrift.TException {
-      // check for required fields
-      // check for sub-struct validity
-    }
-
-    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
-      try {
-        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
-      } catch (org.apache.thrift.TException te) {
-        throw new java.io.IOException(te);
-      }
-    }
-
-    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
-      try {
-        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
-      } catch (org.apache.thrift.TException te) {
-        throw new java.io.IOException(te);
-      }
-    }
-
-    private static class updateProject_resultStandardSchemeFactory implements SchemeFactory {
-      public updateProject_resultStandardScheme getScheme() {
-        return new updateProject_resultStandardScheme();
-      }
-    }
-
-    private static class updateProject_resultStandardScheme extends StandardScheme<updateProject_result> {
-
-      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProject_result struct) throws org.apache.thrift.TException {
-        org.apache.thrift.protocol.TField schemeField;
-        iprot.readStructBegin();
-        while (true)
-        {
-          schemeField = iprot.readFieldBegin();
-          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
-            break;
-          }
-          switch (schemeField.id) {
-            case 1: // IRE
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
-                struct.ire.read(iprot);
-                struct.setIreIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
-            case 2: // ACE
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.ace = new org.apache.airavata.api.error.AiravataClientException();
-                struct.ace.read(iprot);
-                struct.setAceIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
-            case 3: // ASE
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
-                struct.ase.read(iprot);
-                struct.setAseIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
-            default:
-              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-          }
-          iprot.readFieldEnd();
-        }
-        iprot.readStructEnd();
-
-        // check for required fields of primitive type, which can't be checked in the validate method
-        struct.validate();
-      }
-
-      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProject_result struct) throws org.apache.thrift.TException {
-        struct.validate();
-
-        oprot.writeStructBegin(STRUCT_DESC);
-        if (struct.ire != null) {
-          oprot.writeFieldBegin(IRE_FIELD_DESC);
-          struct.ire.write(oprot);
-          oprot.writeFieldEnd();
-        }
-        if (struct.ace != null) {
-          oprot.writeFieldBegin(ACE_FIELD_DESC);
-          struct.ace.write(oprot);
-          oprot.writeFieldEnd();
-        }
-        if (struct.ase != null) {
-          oprot.writeFieldBegin(ASE_FIELD_DESC);
-          struct.ase.write(oprot);
-          oprot.writeFieldEnd();
-        }
-        oprot.writeFieldStop();
-        oprot.writeStructEnd();
-      }
-
-    }
-
-    private static class updateProject_resultTupleSchemeFactory implements SchemeFactory {
-      public updateProject_resultTupleScheme getScheme() {
-        return new updateProject_resultTupleScheme();
-      }
-    }
-
-    private static class updateProject_resultTupleScheme extends TupleScheme<updateProject_result> {
-
-      @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, updateProject_result struct) throws org.apache.thrift.TException {
-        TTupleProtocol oprot = (TTupleProtocol) prot;
-        BitSet optionals = new BitSet();
-        if (struct.isSetIre()) {
-          optionals.set(0);
-        }
-        if (struct.isSetAce()) {
-          optionals.set(1);
-        }
-        if (struct.isSetAse()) {
-          optionals.set(2);
-        }
-        oprot.writeBitSet(optionals, 3);
-        if (struct.isSetIre()) {
-          struct.ire.write(oprot);
-        }
-        if (struct.isSetAce()) {
-          struct.ace.write(oprot);
-        }
-        if (struct.isSetAse()) {
-          struct.ase.write(oprot);
-        }
-      }
-
-      @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, updateProject_result struct) throws org.apache.thrift.TException {
-        TTupleProtocol iprot = (TTupleProtocol) prot;
-        BitSet incoming = iprot.readBitSet(3);
-        if (incoming.get(0)) {
-          struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
-          struct.ire.read(iprot);
-          struct.setIreIsSet(true);
-        }
-        if (incoming.get(1)) {
-          struct.ace = new org.apache.airavata.api.error.AiravataClientException();
-          struct.ace.read(iprot);
-          struct.setAceIsSet(true);
-        }
-        if (incoming.get(2)) {
-          struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
-          struct.ase.read(iprot);
-          struct.setAseIsSet(true);
-        }
-      }
-    }
-
-  }
-
-  public static class getProject_args implements org.apache.thrift.TBase<getProject_args, getProject_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProject_args>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProject_args");
-
-    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.STRING, (short)1);
-
-    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
-    static {
-      schemes.put(StandardScheme.class, new getProject_argsStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new getProject_argsTupleSchemeFactory());
-    }
-
-    public String projectId; // required
-
-    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
-    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      PROJECT_ID((short)1, "projectId");
-
-      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
-
-      static {
-        for (_Fields field : EnumSet.allOf(_Fields.class)) {
-          byName.put(field.getFieldName(), field);
-        }
-      }
-
-      /**
-       * Find the _Fields constant that matches fieldId, or null if its not found.
-       */
-      public static _Fields findByThriftId(int fieldId) {
-        switch(fieldId) {
-          case 1: // PROJECT_ID
-            return PROJECT_ID;
-          default:
-            return null;
-        }
-      }
-
-      /**
-       * Find the _Fields constant that matches fieldId, throwing an exception
-       * if it is not found.
-       */
-      public static _Fields findByThriftIdOrThrow(int fieldId) {
-        _Fields fields = findByThriftId(fieldId);
-        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
-        return fields;
-      }
-
-      /**
-       * Find the _Fields constant that matches name, or null if its not found.
-       */
-      public static _Fields findByName(String name) {
-        return byName.get(name);
-      }
-
-      private final short _thriftId;
-      private final String _fieldName;
-
-      _Fields(short thriftId, String fieldName) {
-        _thriftId = thriftId;
-        _fieldName = fieldName;
-      }
-
-      public short getThriftFieldId() {
-        return _thriftId;
-      }
-
-      public String getFieldName() {
-        return _fieldName;
-      }
-    }
-
-    // isset id assignments
-    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
-    static {
-      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
-      metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProject_args.class, metaDataMap);
-    }
-
-    public getProject_args() {
-    }
-
-    public getProject_args(
-      String projectId)
-    {
-      this();
-      this.projectId = projectId;
-    }
-
-    /**
-     * Performs a deep copy on <i>other</i>.
-     */
-    public getProject_args(getProject_args other) {
-      if (other.isSetProjectId()) {
-        this.projectId = other.projectId;
-      }
-    }
-
-    public getProject_args deepCopy() {
-      return new getProject_args(this);
-    }
-
-    @Override
-    public void clear() {
-      this.projectId = null;
-    }
-
-    public String getProjectId() {
-      return this.projectId;
-    }
-
-    public getProject_args setProjectId(String projectId) {
-      this.projectId = projectId;
-      return this;
-    }
-
-    public void unsetProjectId() {
-      this.projectId = null;
-    }
-
-    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
-    public boolean isSetProjectId() {
-      return this.projectId != null;
-    }
-
-    public void setProjectIdIsSet(boolean value) {
-      if (!value) {
-        this.projectId = null;
-      }
-    }
-
-    public void setFieldValue(_Fields field, Object value) {
-      switch (field) {
-      case PROJECT_ID:
-        if (value == null) {
-          unsetProjectId();
-        } else {
-          setProjectId((String)value);
-        }
-        break;
-
-      }
-    }
-
-    public Object getFieldValue(_Fields field) {
-      switch (field) {
-      case PROJECT_ID:
-        return getProjectId();
-
-      }
-      throw new IllegalStateException();
-    }
-
-    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
-    public boolean isSet(_Fields field) {
-      if (field == null) {
-        throw new IllegalArgumentException();
-      }
-
-      switch (field) {
-      case PROJECT_ID:
-        return isSetProjectId();
-      }
-      throw new IllegalStateException();
-    }
-
-    @Override
-    public boolean equals(Object that) {
-      if (that == null)
-        return false;
-      if (that instanceof getProject_args)
-        return this.equals((getProject_args)that);
-      return false;
-    }
-
-    public boolean equals(getProject_args that) {
-      if (that == null)
-        return false;
-
-      boolean this_present_projectId = true && this.isSetProjectId();
-      boolean that_present_projectId = true && that.isSetProjectId();
-      if (this_present_projectId || that_present_projectId) {
-        if (!(this_present_projectId && that_present_projectId))
-          return false;
-        if (!this.projectId.equals(that.projectId))
-          return false;
-      }
-
-      return true;
-    }
-
-    @Override
-    public int hashCode() {
-      return 0;
-    }
-
-    @Override
-    public int compareTo(getProject_args other) {
-      if (!getClass().equals(other.getClass())) {
-        return getClass().getName().compareTo(other.getClass().getName());
-      }
-
-      int lastComparison = 0;
-
-      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetProjectId()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      return 0;
-    }
-
-    public _Fields fieldForId(int fieldId) {
-      return _Fields.findByThriftId(fieldId);
-    }
-
-    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
-      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
-    }
-
-    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
-      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
-    }
-
-    @Override
-    public String toString() {
-      StringBuilder sb = new StringBuilder("getProject_args(");
-      boolean first = true;
-
-      sb.append("projectId:");
-      if (this.projectId == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.projectId);
-      }
-      first = false;
-      sb.append(")");
-      return sb.toString();
-    }
-
-    public void validate() throws org.apache.thrift.TException {
-      // check for required fields
-      if (projectId == null) {
-        throw new org.apache.thrift.protocol.TProtocolException("Required field 'projectId' was not present! Struct: " + toString());
-      }
-      // check for sub-struct validity
-    }
-
-    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
-      try {
-        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
-      } catch (org.apache.thrift.TException te) {
-        throw new java.io.IOException(te);
-      }
-    }
-
-    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
-      try {
-        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
-      } catch (org.apache.thrift.TException te) {
-        throw new java.io.IOException(te);
-      }
-    }
-
-    private static class getProject_argsStandardSchemeFactory implements SchemeFactory {
-      public getProject_argsStandardScheme getScheme() {
-        return new getProject_argsStandardScheme();
-      }
-    }
-
-    private static class getProject_argsStandardScheme extends StandardScheme<getProject_args> {
-
-      public void read(org.apache.thrift.protocol.TProtocol iprot, getProject_args struct) throws org.apache.thrift.TException {
-        org.apache.thrift.protocol.TField schemeField;
-        iprot.readStructBegin();
-        while (true)
-        {
-          schemeField = iprot.readFieldBegin();
-          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
-            break;
-          }
-          switch (schemeField.id) {
-            case 1: // PROJECT_ID
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
-                struct.projectId = iprot.readString();
-                struct.setProjectIdIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
-            default:
-              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-          }
-          iprot.readFieldEnd();
-        }
-        iprot.readStructEnd();
-
-        // check for required fields of primitive type, which can't be checked in the validate method
-        struct.validate();
-      }
-
-      public void write(org.apache.thrift.protocol.TProtocol oprot, getProject_args struct) throws org.apache.thrift.TException {
-        struct.validate();
-
-        oprot.writeStructBegin(STRUCT_DESC);
-        if (struct.projectId != null) {
-          oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
-          oprot.writeString(struct.projectId);
-          oprot.writeFieldEnd();
-        }
-        oprot.writeFieldStop();
-        oprot.writeStructEnd();
-      }
-
-    }
-
-    private static class getProject_argsTupleSchemeFactory implements SchemeFactory {
-      public getProject_argsTupleScheme getScheme() {
-        return new getProject_argsTupleScheme();
-      }
-    }
-
-    private static class getProject_argsTupleScheme extends TupleScheme<getProject_args> {
-
-      @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, getProject_args struct) throws org.apache.thrift.TException {
-        TTupleProtocol oprot = (TTupleProtocol) prot;
-        oprot.writeString(struct.projectId);
-      }
-
-      @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, getProject_args struct) throws org.apache.thrift.TException {
-        TTupleProtocol iprot = (TTupleProtocol) prot;
-        struct.projectId = iprot.readString();
-        struct.setProjectIdIsSet(true);
-      }
-    }
-
-  }
-
-  public static class getProject_result implements org.apache.thrift.TBase<getProject_result, getProject_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProject_result>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProject_result");
-
-    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
-    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
-    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
-    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);
-
-    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
-    static {
-      schemes.put(StandardScheme.class, new getProject_resultStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new getProject_resultTupleSchemeFactory());
-    }
-
-    public org.apache.airavata.model.workspace.Project success; // required
-    public org.apache.airavata.api.error.InvalidRequestException ire; // required
-    public org.apache.airavata.api.error.AiravataClientException ace; // required
-    public org.apache.airavata.api.error.AiravataSystemException ase; // required
-
-    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
-    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      SUCCESS((short)0, "success"),
-      IRE((short)1, "ire"),
-      ACE((short)2, "ace"),
-      ASE((short)3, "ase");
-
-      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
-
-      static {
-        for (_Fields field : EnumSet.allOf(_Fields.class)) {
-          byName.put(field.getFieldName(), field);
-        }
-      }
-
-      /**
-       * Find the _Fields constant that matches fieldId, or null if its not found.
-       */
-      public static _Fields findByThriftId(int fieldId) {
-        switch(fieldId) {
-          case 0: // SUCCESS
-            return SUCCESS;
-          case 1: // IRE
-            return IRE;
-          case 2: // ACE
-            return ACE;
-          case 3: // ASE
-            return ASE;
-          default:
-            return null;
-        }
-      }
-
-      /**
-       * Find the _Fields constant that matches fieldId, throwing an exception
-       * if it is not found.
-       */
-      public static _Fields findByThriftIdOrThrow(int fieldId) {
-        _Fields fields = findByThriftId(fieldId);
-        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
-        return fields;
-      }
-
-      /**
-       * Find the _Fields constant that matches name, or null if its not found.
-       */
-      public static _Fields findByName(String name) {
-        return byName.get(name);
-      }
-
-      private final short _thriftId;
-      private final String _fieldName;
-
-      _Fields(short thriftId, String fieldName) {
-        _thriftId = thriftId;
-        _fieldName = fieldName;
-      }
-
-      public short getThriftFieldId() {
-        return _thriftId;
-      }
-
-      public String getFieldName() {
-        return _fieldName;
-      }
-    }
-
-    // isset id assignments
-    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
-    static {
-      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.Project.class)));
-      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
-      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
-      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
-      metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProject_result.class, metaDataMap);
-    }
-
-    public getProject_result() {
-    }
-
-    public getProject_result(
-      org.apache.airavata.model.workspace.Project success,
-      org.apache.airavata.api.error.InvalidRequestException ire,
-      org.apache.airavata.api.error.AiravataClientException ace,
-      org.apache.airavata.api.error.AiravataSystemException ase)
-    {
-      this();
-      this.success = success;
-      this.ire = ire;
-      this.ace = ace;
-      this.ase = ase;
-    }
-
-    /**
-     * Performs a deep copy on <i>other</i>.
-     */
-    public getProject_result(getProject_result other) {
-      if (other.isSetSuccess()) {
-        this.success = new org.apache.airavata.model.workspace.Project(other.success);
-      }
-      if (other.isSetIre()) {
-        this.ire = new org.apache.airavata.api.error.InvalidRequestException(other.ire);
-      }
-      if (other.isSetAce()) {
-        this.ace = new org.apache.airavata.api.error.AiravataClientException(other.ace);
-      }
-      if (other.isSetAse()) {
-        this.ase = new org.apache.airavata.api.error.AiravataSystemException(other.ase);
-      }
-    }
-
-    public getProject_result deepCopy() {
-      return new getProject_result(this);
-    }
-
-    @Override
-    public void clear() {
-      this.success = null;
-      this.ire = null;
-      this.ace = null;
-      this.ase = null;
-    }
-
-    public org.apache.airavata.model.workspace.Project getSuccess() {
-      return this.success;
-    }
-
-    public getProject_result setSuccess(org.apache.airavata.model.workspace.Project success) {
-      this.success = success;
-      return this;
-    }
-
-    public void unsetSuccess() {
-      this.success = null;
-    }
-
-    /** Returns true if field success is set (has been assigned a value) and false otherwise */
-    public boolean isSetSuccess() {
-      return this.success != null;
-    }
-
-    public void setSuccessIsSet(boolean value) {
-      if (!value) {
-        this.success = null;
-      }
-    }
-
-    public org.apache.airavata.api.error.InvalidRequestException getIre() {
-      return this.ire;
-    }
-
-    public getProject_result setIre(org.apache.airavata.api.error.InvalidRequestException ire) {
-      this.ire = ire;
-      return this;
-    }
-
-    public void unsetIre() {
-      this.ire = null;
-    }
-
-    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
-    public boolean isSetIre() {
-      return this.ire != null;
-    }
-
-    public void setIreIsSet(boolean value) {
-      if (!value) {
-        this.ire = null;
-      }
-    }
-
-    public org.apache.airavata.api.error.AiravataClientException getAce() {
-      return this.ace;
-    }
-
-    public getProject_result setAce(org.apache.airavata.api.error.AiravataClientException ace) {
-      this.ace = ace;
-      return this;
-    }
-
-    public void unsetAce() {
-      this.ace = null;
-    }
-
-    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
-    public boolean isSetAce() {
-      return this.ace != null;
-    }
-
-    public void setAceIsSet(boolean value) {
-      if (!value) {
-        this.ace = null;
-      }
-    }
-
-    public org.apache.airavata.api.error.AiravataSystemException getAse() {
-      return this.ase;
-    }
-
-    public getProject_result setAse(org.apache.airavata.api.error.AiravataSystemException ase) {
-      this.ase = ase;
-      return this;
-    }
-
-    public void unsetAse() {
-      this.ase = null;
-    }
-
-    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
-    public boolean isSetAse() {
-      return this.ase != null;
-    }
-
-    public void setAseIsSet(boolean value) {
-      if (!value) {
-        this.ase = null;
-      }
-    }
-
-    public void setFieldValue(_Fields field, Object value) {
-      switch (field) {
-      case SUCCESS:
-        if (value == null) {
-          unsetSuccess();
-        } else {
-          setSuccess((org.apache.airavata.model.workspace.Project)value);
-        }
-        break;
-
-      case IRE:
-        if (value == null) {
-          unsetIre();
-        } else {
-          setIre((org.apache.airavata.api.error.InvalidRequestException)value);
-        }
-        break;
-
-      case ACE:
-        if (value == null) {
-          unsetAce();
-        } else {
-          setAce((org.apache.airavata.api.error.AiravataClientException)value);
-        }
-        break;
-
-      case ASE:
-        if (value == null) {
-          unsetAse();
-        } else {
-          setAse((org.apache.airavata.api.error.AiravataSystemException)value);
-        }
-        break;
-
-      }
-    }
-
-    public Object getFieldValue(_Fields field) {
-      switch (field) {
-      case SUCCESS:
-        return getSuccess();
-
-      case IRE:
-        return getIre();
-
-      case ACE:
-        return getAce();
-
-      case ASE:
-        return getAse();
-
-      }
-      throw new IllegalStateException();
-    }
-
-    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
-    public boolean isSet(_Fields field) {
-      if (field == null) {
-        throw new IllegalArgumentException();
-      }
-
-      switch (field) {
-      case SUCCESS:
-        return isSetSuccess();
-      case IRE:
-        return isSetIre();
-      case ACE:
-        return isSetAce();
-      case ASE:
-        return isSetAse();
-      }
-      throw new IllegalStateException();
-    }
-
-    @Override
-    public boolean equals(Object that) {
-      if (that == null)
-        return false;
-      if (that instanceof getProject_result)
-        return this.equals((getProject_result)that);
-      return false;
-    }
-
-    public boolean equals(getProject_result that) {
-      if (that == null)
-        return false;
-
-      boolean this_present_success = true && this.isSetSuccess();
-      boolean that_present_success = true && that.isSetSuccess();
-      if (this_present_success || that_present_success) {
-        if (!(this_present_success && that_present_success))
-          return false;
-        if (!this.success.equals(that.success))
-          return false;
-      }
-
-      boolean this_present_ire = true && this.isSetIre();
-      boolean that_present_ire = true && that.isSetIre();
-      if (this_present_ire || that_present_ire) {
-        if (!(this_present_ire && that_present_ire))
-          return false;
-        if (!this.ire.equals(that.ire))
-          return false;
-      }
-
-      boolean this_present_ace = true && this.isSetAce();
-      boolean that_present_ace = true && that.isSetAce();
-      if (this_present_ace || that_present_ace) {
-        if (!(this_present_ace && that_present_ace))
-          return false;
-        if (!this.ace.equals(that.ace))
-          return false;
-      }
-
-      boolean this_present_ase = true && this.isSetAse();
-      boolean that_present_ase = true && that.isSetAse();
-      if (this_present_ase || that_present_ase) {
-        if (!(this_present_ase && that_present_ase))
-          return false;
-        if (!this.ase.equals(that.ase))
-          return false;
-      }
-
-      return true;
-    }
-
-    @Override
-    public int hashCode() {
-      return 0;
-    }
-
-    @Override
-    public int compareTo(getProject_result other) {
-      if (!getClass().equals(other.getClass())) {
-        return getClass().getName().compareTo(other.getClass().getName());
-      }
-
-      int lastComparison = 0;
-
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetIre()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetAce()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetAse()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      return 0;
-    }
-
-    public _Fields fieldForId(int fieldId) {
-      return _Fields.findByThriftId(fieldId);
-    }
-
-    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
-      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
-    }
-
-    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
-      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
-      }
-
-    @Override
-    public String toString() {
-      StringBuilder sb = new StringBuilder("getProject_result(");
-      boolean first = true;
-
-      sb.append("success:");
-      if (this.success == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.success);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("ire:");
-      if (this.ire == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.ire);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("ace:");
-      if (this.ace == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.ace);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("ase:");
-      if (this.ase == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.ase);
-      }
-      first = false;
-      sb.append(")");
-      return sb.toString();
-    }
-
-    public void validate() throws org.apache.thrift.TException {
-      // check for required fields
-      // check for sub-struct validity
-      if (success != null) {
-        success.validate();
-      }
-    }
-
-    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
-      try {
-        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
-      } catch (org.apache.thrift.TException te) {
-        throw new java.io.IOException(te);
-      }
-    }
-
-    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
-      try {
-        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
-      } catch (org.apache.thrift.TException te) {
-        throw new java.io.IOException(te);
-      }
-    }
-
-    private static class getProject_resultStandardSchemeFactory implements SchemeFactory {
-      public getProject_resultStandardScheme getScheme() {
-        return new getProject_resultStandardScheme();
-      }
-    }
-
-    private static class getProject_resultStandardScheme extends StandardScheme<getProject_result> {
-
-      public void read(org.apache.thrift.protocol.TProtocol iprot, getProject_result struct) throws org.apache.thrift.TException {
-        org.apache.thrift.protocol.TField schemeField;
-        iprot.readStructBegin();
-        while (true)
-        {
-          schemeField = iprot.readFieldBegin();
-          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
-            break;
-          }
-          switch (schemeField.id) {
-            case 0: // SUCCESS
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.success = new org.apache.airavata.model.workspace.Project();
-                struct.success.read(iprot);
-                struct.setSuccessIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
-            case 1: // IRE
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
-                struct.ire.read(iprot);
-                struct.setIreIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
-            case 2: // ACE
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.ace = new org.apache.airavata.api.error.AiravataClientException();
-                struct.ace.read(iprot);
-                struct.setAceIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
-            case 3: // ASE
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
-                struct.ase.read(iprot);
-                struct.setAseIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
-            default:
-              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-          }
-          iprot.readFieldEnd();
-        }
-        iprot.readStructEnd();
-
-        // check for required fields of primitive type, which can't be checked in the validate method
-        struct.validate();
-      }
-
-      public void write(org.apache.thrift.protocol.TProtocol oprot, getProject_result struct) throws org.apache.thrift.TException {
-        struct.validate();
-
-        oprot.writeStructBegin(STRUCT_DESC);
-        if (struct.success != null) {
-          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-          struct.success.write(oprot);
-          oprot.writeFieldEnd();
-        }
-        if (struct.ire != null) {
-          oprot.writeFieldBegin(IRE_FIELD_DESC);
-          struct.ire.write(oprot);
-          oprot.writeFieldEnd();
-        }
-        if (struct.ace != null) {
-          oprot.writeFieldBegin(ACE_FIELD_DESC);
-          struct.ace.write(oprot);
-          oprot.writeFieldEnd();
-        }
-        if (struct.ase != null) {
-          oprot.writeFieldBegin(ASE_FIELD_DESC);
-          struct.ase.write(oprot);
-          oprot.writeFieldEnd();
-        }
-        oprot.writeFieldStop();
-        oprot.writeStructEnd();
-      }
-
-    }
-
-    private static class getProject_resultTupleSchemeFactory implements SchemeFactory {
-      public getProject_resultTupleScheme getScheme() {
-        return new getProject_resultTupleScheme();
-      }
-    }
-
-    private static class getProject_resultTupleScheme extends TupleScheme<getProject_result> {
-
-      @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, getProject_result struct) throws org.apache.thrift.TException {
-        TTupleProtocol oprot = (TTupleProtocol) prot;
-        BitSet optionals = new BitSet();
-        if (struct.isSetSuccess()) {
-          optionals.set(0);
-        }
-        if (struct.isSetIre()) {
-          optionals.set(1);
-        }
-        if (struct.isSetAce()) {
-          optionals.set(2);
-        }
-        if (struct.isSetAse()) {
-          optionals.set(3);
-        }
-        oprot.writeBitSet(optionals, 4);
-        if (struct.isSetSuccess()) {
-          struct.success.write(oprot);
-        }
-        if (struct.isSetIre()) {
-          struct.ire.write(oprot);
-        }
-        if (struct.isSetAce()) {
-          struct.ace.write(oprot);
-        }
-        if (struct.isSetAse()) {
-          struct.ase.write(oprot);
-        }
-      }
-
-      @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, getProject_result struct) throws org.apache.thrift.TException {
-        TTupleProtocol iprot = (TTupleProtocol) prot;
-        BitSet incoming = iprot.readBitSet(4);
-        if (incoming.get(0)) {
-          struct.success = new org.apache.airavata.model.workspace.Project();
-          struct.success.read(iprot);
-          struct.setSuccessIsSet(true);
-        }
-        if (incoming.get(1)) {
-          struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
-          struct.ire.read(iprot);
-          struct.setIreIsSet(true);
-        }
-        if (incoming.get(2)) {
-          struct.ace = new org.apache.airavata.api.error.AiravataClientException();
-          struct.ace.read(iprot);
-          struct.setAceIsSet(true);
-        }
-        if (incoming.get(3)) {
-          struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
-          struct.ase.read(iprot);
-          struct.setAseIsSet(true);
-        }
-      }
-    }
-
-  }
-
-  public static class getAllUserProjects_args implements org.apache.thrift.TBase<getAllUserProjects_args, getAllUserProjects_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllUserProjects_args>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllUserProjects_args");
-
-    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);
-
-    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
-    static {
-      schemes.put(StandardScheme.class, new getAllUserProjects_argsStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new getAllUserProjects_argsTupleSchemeFactory());
-    }
-
-    public String userName; // required
-
-    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
-    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      USER_NAME((short)1, "userName");
-
-      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
-
-      static {
-        for (_Fields field : EnumSet.allOf(_Fields.class)) {
-          byName.put(field.getFieldName(), field);
-        }
-      }
-
-      /**
-       * Find the _Fields constant that matches fieldId, or null if its not found.
-       */
-      public static _Fields findByThriftId(int fieldId) {
-        switch(fieldId) {
-          case 1: // USER_NAME
-            return USER_NAME;
-          default:
-            return null;
-        }
-      }
-
-      /**
-       * Find the _Fields constant that matches fieldId, throwing an exception
-       * if it is not found.
-       */
-      public static _Fields findByThriftIdOrThrow(int fieldId) {
-        _Fields fields = findByThriftId(fieldId);
-        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
-        return fields;
-      }
-
-      /**
-       * Find the _Fields constant that matches name, or null if its not found.
-       */
-      public static _Fields findByName(String name) {
-        return byName.get(name);
-      }
-
-      private final short _thriftId;
-      private final String _fieldName;
-
-      _Fields(short thriftId, String fieldName) {
-        _thriftId = thriftId;
-        _fieldName = fieldName;
-      }
-
-      public short getThriftFieldId() {
-        return _thriftId;
-      }
-
-      public String getFieldName() {
-        return _fieldName;
-      }
-    }
-
-    // isset id assignments
-    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
-    static {
-      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
-      metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllUserProjects_args.class, metaDataMap);
-    }
-
-    public getAllUserProjects_args() {
-    }
-
-    public getAllUserProjects_args(
-      String userName)
-    {
-      this();
-      this.userName = userName;
-    }
-
-    /**
-     * Performs a deep copy on <i>other</i>.
-     */
-    public getAllUserProjects_args(getAllUserProjects_args other) {
-      if (other.isSetUserName()) {
-        this.userName = other.userName;
-      }
-    }
-
-    public getAllUserProjects_args deepCopy() {
-      return new getAllUserProjects_args(this);
-    }
-
-    @Override
-    public void clear() {
-      this.userName = null;
-    }
-
-    public String getUserName() {
-      return this.userName;
-    }
-
-    public getAllUserProjects_args setUserName(String userName) {
-      this.userName = userName;
-      return this;
-    }
-
-    public void unsetUserName() {
-      this.userName = null;
-    }
-
-    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
-    public boolean isSetUserName() {
-      return this.userName != null;
-    }
-
-    public void setUserNameIsSet(boolean value) {
-      if (!value) {
-        this.userName = null;
-      }
-    }
-
-    public void setFieldValue(_Fields field, Object value) {
-      switch (field) {
-      case USER_NAME:
-        if (value == null) {
-          unsetUserName();
-        } else {
-          setUserName((String)value);
-        }
-        break;
-
-      }
-    }
-
-    public Object getFieldValue(_Fields field) {
-      switch (field) {
-      case USER_NAME:
-        return getUserName();
-
-      }
-      throw new IllegalStateException();
-    }
-
-    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
-    public boolean isSet(_Fields field) {
-      if (field == null) {
-        throw new IllegalArgumentException();
-      }
-
-      switch (field) {
-      case USER_NAME:
-        return isSetUserName();
-      }
-      throw new IllegalStateException();
-    }
-
-    @Override
-    public boolean equals(Object that) {
-      if (that == null)
-        return false;
-      if (that instanceof getAllUserProjects_args)
-        return this.equals((getAllUserProjects_args)that);
-      return false;
-    }
-
-    public boolean equals(getAllUserProjects_args that) {
-      if (that == null)
-        return false;
-
-      boolean this_present_userName = true && this.isSetUserName();
-      boolean that_present_userName = true && that.isSetUserName();
-      if (this_present_userName || that_present_userName) {
-        if (!(this_present_userName && that_present_userName))
-          return false;
-        if (!this.userName.equals(that.userName))
-          return false;
-      }
-
-      return true;
-    }
-
-    @Override
-    public int hashCode() {
-      return 0;
-    }
-
-    @Override
-    public int compareTo(getAllUserProjects_args other) {
-      if (!getClass().equals(other.getClass())) {
-        return getClass().getName().compareTo(other.getClass().getName());
-      }
-
-      int lastComparison = 0;
-
-      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetUserName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      return 0;
-    }
-
-    public _Fields fieldForId(int fieldId) {
-      return _Fields.findByThriftId(fieldId);
-    }
-
-    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
-      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
-    }
-
-    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
-      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
-    }
-
-    @Override
-    public String toString() {
-      StringBuilder sb = new StringBuilder("getAllUserProjects_args(");
-      boolean first = true;
-
-      sb.append("userName:");
-      if (this.userName == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.userName);
-      }
-      first = false;
-      sb.append(")");
-      return sb.toString();
-    }
-
-    public void validate() throws org.apache.thrift.TException {
-      // check for required fields
-      if (userName == null) {
-        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userName' was not present! Struct: " + toString());
-      }
-      // check for sub-struct validity
-    }
-
-    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
-      try {
-        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
-      } catch (org.apache.thrift.TException te) {
-        throw new java.io.IOException(te);
-      }
-    }
-
-    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
-      try {
-        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
-      } catch (org.apache.thrift.TException te) {
-        throw new java.io.IOException(te);
-      }
-    }
-
-    private static class getAllUserProjects_argsStandardSchemeFactory implements SchemeFactory {
-      public getAllUserProjects_argsStandardScheme getScheme() {
-        return new getAllUserProjects_argsStandardScheme();
-      }
-    }
-
-    private static class getAllUserProjects_argsStandardScheme extends StandardScheme<getAllUserProjects_args> {
-
-      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllUserProjects_args struct) throws org.apache.thrift.TException {
-        org.apache.thrift.protocol.TField schemeField;
-        iprot.readStructBegin();
-        while (true)
-        {
-          schemeField = iprot.readFieldBegin();
-          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
-            break;
-          }
-          switch (schemeField.id) {
-            case 1: // USER_NAME
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
-                struct.userName = iprot.readString();
-                struct.setUserNameIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
-            default:
-              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-          }
-          iprot.readFieldEnd();
-        }
-        iprot.readStructEnd();
-
-        // check for required fields of primitive type, which can't be checked in the validate method
-        struct.validate();
-      }
-
-      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllUserProjects_args struct) throws org.apache.thrift.TException {
-        struct.validate();
-
-        oprot.writeStructBegin(STRUCT_DESC);
-        if (struct.userName != null) {
-          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
-          oprot.writeString(struct.userName);
-          oprot.writeFieldEnd();
-        }
-        oprot.writeFieldStop();
-        oprot.writeStructEnd();
-      }
-
-    }
-
-    private static class getAllUserProjects_argsTupleSchemeFactory implements SchemeFactory {
-      public getAllUserProjects_argsTupleScheme getScheme() {
-        return new getAllUserProjects_argsTupleScheme();
-      }
-    }
-
-    private static class getAllUserProjects_argsTupleScheme extends TupleScheme<getAllUserProjects_args> {
-
-      @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, getAllUserProjects_args struct) throws org.apache.thrift.TException {
-        TTupleProtocol oprot = (TTupleProtocol) prot;
-        oprot.writeString(struct.userName);
-      }
-
-      @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, getAllUserProjects_args struct) throws org.apache.thrift.TException {
-        TTupleProtocol iprot = (TTupleProtocol) prot;
-        struct.userName = iprot.readString();
-        struct.setUserNameIsSet(true);
-      }
-    }
-
-  }
-
-  public static class getAllUserProjects_result implements org.apache.thrift.TBase<getAllUserProjects_result, getAllUserProjects_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllUserProjects_result>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllUserProjects_result");
-
-    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
-    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
-    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
-    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);
-
-    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
-    static {
-      schemes.put(StandardScheme.class, new getAllUserProjects_resultStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new getAllUserProjects_resultTupleSchemeFactory());
-    }
-
-    public List<org.apache.airavata.model.workspace.Project> success; // required
-    public org.apache.airavata.api.error.InvalidRequestException ire; // required
-    public org.apache.airavata.api.error.AiravataClientException ace; // required
-    public org.apache.airavata.api.error.AiravataSystemException ase; // required
-
-    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
-    @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      SUCCESS((short)0, "success"),
-      IRE((short)1, "ire"),
-      ACE((short)2, "ace"),
-      ASE((short)3, "ase");
-
-      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
-
-      static {
-        for (_Fields field : EnumSet.allOf(_Fields.class)) {
-          byName.put(field.getFieldName(), field);
-        }
-      }
-
-      /**
-       * Find the _Fields constant that matches fieldId, or null if its not found.
-       */
-      public static _Fields findByThriftId(int fieldId) {
-        switch(fieldId) {
-          case 0: // SUCCESS
-            return SUCCESS;
-          case 1: // IRE
-            return IRE;
-          case 2: // ACE
-            return ACE;
-          case 3: // ASE
-            return ASE;
-          default:
-            return null;
-        }
-      }
-
-      /**
-       * Find the _Fields constant that matches fieldId, throwing an exception
-       * if it is not found.
-       */
-      public static _Fields findByThriftIdOrThrow(int fieldId) {
-        _Fields fields = findByThriftId(fieldId);
-        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
-        return fields;
-      }
-
-      /**
-       * Find the _Fields constant that matches name, or null if its not found.
-       */
-      public static _Fields findByName(String name) {
-        return byName.get(name);
-      }
-
-      private final short _thriftId;
-      private final String _fieldName;
-
-      _Fields(short thriftId, String fieldName) {
-        _thriftId = thriftId;
-        _fieldName = fieldName;
-      }
-
-      public short getThriftFieldId() {
-        return _thriftId;
-      }
-
-      public String getFieldName() {
-        return _fieldName;
-      }
-    }
-
-    // isset id assignments
-    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
-    static {
-      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
-              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.Project.class))));
-      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
-      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
-      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
-      metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllUserProjects_result.class, metaDataMap);
-    }
-
-    public getAllUserProjects_result() {
-    }
-
-    public getAllUserProjects_result(
-      List<org.apache.airavata.model.workspace.Project> success,
-      org.apache.airavata.api.error.InvalidRequestException ire,
-      org.apache.airavata.api.error.AiravataClientException ace,
-      org.apache.airavata.api.error.AiravataSystemException ase)
-    {
-      this();
-      this.success = success;
-      this.ire = ire;
-      this.ace = ace;
-      this.ase = ase;
-    }
-
-    /**
-     * Performs a deep copy on <i>other</i>.
-     */
-    public getAllUserProjects_result(getAllUserProjects_result other) {
-      if (other.isSetSuccess()) {
-        List<org.apache.airavata.model.workspace.Project> __this__success = new ArrayList<org.apache.airavata.model.workspace.Project>(other.success.size());
-        for (org.apache.airavata.model.workspace.Project other_element : other.success) {
-          __this__success.add(new org.apache.airavata.model.workspace.Project(other_element));
-        }
-        this.success = __this__success;
-      }
-      if (other.isSetIre()) {
-        this.ire = new org.apache.airavata.api.error.InvalidRequestException(other.ire);
-      }
-      if (other.isSetAce()) {
-        this.ace = new org.apache.airavata.api.error.AiravataClientException(other.ace);
-      }
-      if (other.isSetAse()) {
-        this.ase = new org.apache.airavata.api.error.AiravataSystemException(other.ase);
-      }
-    }
-
-    public getAllUserProjects_result deepCopy() {
-      return new getAllUserProjects_result(this);
-    }
-
-    @Override
-    public void clear() {
-      this.success = null;
-      this.ire = null;
-      this.ace = null;
-      this.ase = null;
-    }
-
-    public int getSuccessSize() {
-      return (this.success == null) ? 0 : this.success.size();
-    }
-
-    public java.util.Iterator<org.apache.airavata.model.workspace.Project> getSuccessIterator() {
-      return (this.success == null) ? null : this.success.iterator();
-    }
-
-    public void addToSuccess(org.apache.airavata.model.workspace.Project elem) {
-      if (this.success == null) {
-        this.success = new ArrayList<org.apache.airavata.model.workspace.Project>();
-      }
-      this.success.add(elem);
-    }
-
-    public List<org.apache.airavata.model.workspace.Project> getSuccess() {
-      return this.success;
-    }
-
-    public getAllUserProjects_result setSuccess(List<org.apache.airavata.model.workspace.Project> success) {
-      this.success = success;
-      return this;
-    }
-
-    public void unsetSuccess() {
-      this.success = null;
-    }
-
-    /** Returns true if field success is set (has been assigned a value) and false otherwise */
-    public boolean isSetSuccess() {
-      return this.success != null;
-    }
-
-    public void setSuccessIsSet(boolean value) {
-      if (!value) {
-        this.success = null;
-      }
-    }
-
-    public org.apache.airavata.api.error.InvalidRequestException getIre() {
-      return this.ire;
-    }
-
-    public getAllUserProjects_result setIre(org.apache.airavata.api.error.InvalidRequestException ire) {
-      this.ire = ire;
-      return this;
-    }
-
-    public void unsetIre() {
-      this.ire = null;
-    }
-
-    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
-    public boolean isSetIre() {
-      return this.ire != null;
-    }
-
-    public void setIreIsSet(boolean value) {
-      if (!value) {
-        this.ire = null;
-      }
-    }
-
-    public org.apache.airavata.api.error.AiravataClientException getAce() {
-      return this.ace;
-    }
-
-    public getAllUserProjects_result setAce(org.apache.airavata.api.error.AiravataClientException ace) {
-      this.ace = ace;
-      return this;
-    }
-
-    public void unsetAce() {
-      this.ace = null;
-    }
-
-    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
-    public boolean isSetAce() {
-      return this.ace != null;
-    }
-
-    public void setAceIsSet(boolean value) {
-      if (!value) {
-        this.ace = null;
-      }
-    }
-
-    public org.apache.airavata.api.error.AiravataSystemException getAse() {
-      return this.ase;
-    }
-
-    public getAllUserProjects_result setAse(org.apache.airavata.api.error.AiravataSystemException ase) {
-      this.ase = ase;
-      return this;
-    }
-
-    public void unsetAse() {
-      this.ase = null;
-    }
-
-    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
-    public boolean isSetAse() {
-      return this.ase != null;
-    }
-
-    public void setAseIsSet(boolean value) {
-      if (!value) {
-        this.ase = null;
-      }
-    }
-
-    public void setFieldValue(_Fields field, Object value) {
-      switch (field) {
-      case SUCCESS:
-        if (value == null) {
-          unsetSuccess();
-        } else {
-          setSuccess((List<org.apache.airavata.model.workspace.Project>)value);
-        }
-        break;
-
-      case IRE:
-        if (value == null) {
-          unsetIre();
-        } else {
-          setIre((org.apache.airavata.api.error.InvalidRequestException)value);
-        }
-        break;
-
-      case ACE:
-        if (value == null) {
-          unsetAce();
-        } else {
-          setAce((org.apache.airavata.api.error.AiravataClientException)value);
-        }
-        break;
-
-      case ASE:
-        if (value == null) {
-          unsetAse();
-        } else {
-          setAse((org.apache.airavata.api.error.AiravataSystemException)value);
-        }
-        break;
-
-      }
-    }
-
-    public Object getFieldValue(_Fields field) {
-      switch (field) {
-      case SUCCESS:
-        return getSuccess();
-
-      case IRE:
-        return getIre();
-
-      case ACE:
-        return getAce();
-
-      case ASE:
-        return getAse();
-
-      }
-      throw new IllegalStateException();
-    }
-
-    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
-    public boolean isSet(_Fields field) {
-      if (field == null) {
-        throw new IllegalArgumentException();
-      }
-
-      switch (field) {
-      case SUCCESS:
-        return isSetSuccess();
-      case IRE:
-        return isSetIre();
-      case ACE:
-        return isSetAce();
-      case ASE:
-        return isSetAse();
-      }
-      throw new IllegalStateException();
-    }
-
-    @Override
-    public boolean equals(Object that) {
-      if (that == null)
-        return false;
-      if (that instanceof getAllUserProjects_result)
-        return this.equals((getAllUserProjects_result)that);
-      return false;
-    }
-
-    public boolean equals(getAllUserProjects_result that) {
-      if (that == null)
-        return false;
-
-      boolean this_present_success = true && this.isSetSuccess();
-      boolean that_present_success = true && that.isSetSuccess();
-      if (this_present_success || that_present_success) {
-        if (!(this_present_success && that_present_success))
-          return false;
-        if (!this.success.equals(that.success))
-          return false;
-      }
-
-      boolean this_present_ire = true && this.isSetIre();
-      boolean that_present_ire = true && that.isSetIre();
-      if (this_present_ire || that_present_ire) {
-        if (!(this_present_ire && that_present_ire))
-          return false;
-        if (!this.ire.equals(that.ire))
-          return false;
-      }
-
-      boolean this_present_ace = true && this.isSetAce();
-      boolean that_present_ace = true && that.isSetAce();
-      if (this_present_ace || that_present_ace) {
-        if (!(this_present_ace && that_present_ace))
-          return false;
-        if (!this.ace.equals(that.ace))
-          return false;
-      }
-
-      boolean this_present_ase = true && this.isSetAse();
-      boolean that_present_ase = true && that.isSetAse();
-      if (this_present_ase || that_present_ase) {
-        if (!(this_present_ase && that_present_ase))
-          return false;
-        if (!this.ase.equals(that.ase))
-          return false;
-      }
-
-      return true;
-    }
-
-    @Override
-    public int hashCode() {
-      return 0;
-    }
-
-    @Override
-    public int compareTo(getAllUserProjects_result other) {
-      if (!getClass().equals(other.getClass())) {
-        return getClass().getName().compareTo(other.getClass().getName());
-      }
-
-      int lastComparison = 0;
-
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetIre()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetAce()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetAse()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      return 0;
-    }
-
-    public _Fields fieldForId(int fieldId) {
-      return _Fields.findByThriftId(fieldId);
-    }
-
-    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
-      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
-    }
-
-    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
-      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
-      }
-
-    @Override
-    public String toString() {
-      StringBuilder sb = new StringBuilder("getAllUserProjects_result(");
-      boolean first = true;
-
-      sb.append("success:");
-      if (this.success == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.success);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("ire:");
-      if (this.ire == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.ire);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("ace:");
-      if (this.ace == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.ace);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("ase:");
-      if (this.ase == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.ase);
-      }
-      first = false;
-      sb.append(")");
-      return sb.toString();
-    }
-
-    public void validate() throws org.apache.thrift.TException {
-      // check for required fields
-      // check for sub-struct validity
-    }
-
-    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
-      try {
-        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
-      } catch (org.apache.thrift.TException te) {
-        throw new java.io.IOException(te);
-      }
-    }
-
-    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
-      try {
-        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
-      } catch (org.apache.thrift.TException te) {
-        throw new java.io.IOException(te);
-      }
-    }
-
-    private static class getAllUserProjects_resultStandardSchemeFactory implements SchemeFactory {
-      public getAllUserProjects_resultStandardScheme getScheme() {
-        return new getAllUserProjects_resultStandardScheme();
-      }
-    }
-
-    private static class getAllUserProjects_resultStandardScheme extends StandardScheme<getAllUserProjects_result> {
-
-      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllUserProjects_result struct) throws org.apache.thrift.TException {
-        org.apache.thrift.protocol.TField schemeField;
-        iprot.readStructBegin();
-        while (true)
-        {
-          schemeField = iprot.readFieldBegin();
-          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
-            break;
-          }
-          switch (schemeField.id) {
-            case 0: // SUCCESS
-              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
-                {
-                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
-                  struct.success = new ArrayList<org.apache.airavata.model.workspace.Project>(_list0.size);
-                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
-                  {
-                    org.apache.airavata.model.workspace.Project _elem2;
-                    _elem2 = new org.apache.airavata.model.workspace.Project();
-                    _elem2.read(iprot);
-                    struct.success.add(_elem2);
-                  }
-                  iprot.readListEnd();
-                }
-                struct.setSuccessIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
-            case 1: // IRE
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
-                struct.ire.read(iprot);
-                struct.setIreIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
-            case 2: // ACE
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.ace = new org.apache.airavata.api.error.AiravataClientException();
-                struct.ace.read(iprot);
-                struct.setAceIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
-            case 3: // ASE
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
-                struct.ase.read(iprot);
-                struct.setAseIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
-            default:
-              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-          }
-          iprot.readFieldEnd();
-        }
-        iprot.readStructEnd();
-
-        // check for required fields of primitive type, which can't be checked in the validate method
-        struct.validate();
-      }
-
-      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllUserProjects_result struct) throws org.apache.thrift.TException {
-        struct.validate();
-
-        oprot.writeStructBegin(STRUCT_DESC);
-        if (struct.success != null) {
-          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-          {
-            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (org.apache.airavata.model.workspace.Project _iter3 : struct.success)
-            {
-              _iter3.write(oprot);
-            }
-            oprot.writeListEnd();
-          }
-          oprot.writeFieldEnd();
-        }
-        if (struct.ire != null) {
-          oprot.writeFieldBegin(IRE_FIELD_DESC);
-          struct.ire.write(oprot);
-          oprot.writeFieldEnd();
-        }
-        if (struct.ace != null) {
-          oprot.writeFieldBegin(ACE_FIELD_DESC);
-          struct.ace.write(oprot);
-          oprot.writeFieldEnd();
-        }
-        if (struct.ase != null) {
-          oprot.writeFieldBegin(ASE_FIELD_DESC);
-          struct.ase.write(oprot);
-          oprot.writeFieldEnd();
-        }
-        oprot.writeFieldStop();
-        oprot.writeStructEnd();
-      }
-
-    }
-
-    private static class getAllUserProjects_resultTupleSchemeFactory implements SchemeFactory {
-      public getAllUserProjects_resultTupleScheme getScheme() {
-        return new getAllUserProjects_resultTupleScheme();
-      }
-    }
-
-    private static class getAllUserProjects_resultTupleScheme extends TupleScheme<getAllUserProjects_result> {
-
-      @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, getAllUserProjects_result struct) throws org.apache.thrift.TException {
-        TTupleProtocol oprot = (TTupleProtocol) prot;
-        BitSet optionals = new BitSet();
-        if (struct.isSetSuccess()) {
-          optionals.set(0);
-        }
-        if (struct.isSetIre()) {
-          optionals.set(1);
-        }
-        if (struct.isSetAce()) {
-          optionals.set(2);
-        }
-        if (struct.isSetAse()) {
-          optionals.set(3);
-        }
-        oprot.writeBitSet(optionals, 4);
-        if (struct.isSetSuccess()) {
-          {
-            oprot.writeI32(struct.success.size());
-            for (org.apache.airavata.model.workspace.Project _iter4 : struct.success)
-            {
-              _iter4.write(oprot);
-            }
-          }
-        }
-        if (struct.isSetIre()) {
-          struct.ire.write(oprot);
-        }
-        if (struct.isSetAce()) {
-          struct.ace.write(oprot);
-        }
-        if (struct.isSetAse()) {
-          struct.ase.write(oprot);
-        }
-      }
-
-      @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, getAllUserProjects_result struct) throws org.apache.thrift.TException {
-        TTupleProtocol iprot = (TTupleProtocol) prot;
-        BitSet incoming = iprot.readBitSet(4);
-        if (incoming.get(0)) {
-          {
-            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<org.apache.airavata.model.workspace.Project>(_list5.size);
-            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
-            {
-              org.apache.airavata.model.workspace.Project _elem7;
-              _elem7 = new org.apache.airavata.model.workspace.Project();
-              _elem7.read(iprot);
-              struct.success.add(_elem7);
-            }
-          }
-          struct.setSuccessIsSet(true);
-        }
-        if (incoming.get(1)) {
-          struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
-          struct.ire.read(iprot);
-          struct.setIreIsSet(true);
-        }
-        if (incoming.get(2)) {
-          struct.ace = new org.apache.airavata.api.error.AiravataClientException();
-          struct.ace.read(iprot);
-          struct.setAceIsSet(true);
-        }
-        if (incoming.get(3)) {
-          struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
-          struct.ase.read(iprot);
-          struct.setAseIsSet(true);
-        }
-      }
-    }
-
-  }
-
-  public static class getAllExperimentsInProject_args implements org.apache.thrift.TBase<getAllExperimentsInProject_args, getAllExperimentsInProject_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllExperimentsInProject_args>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllExperimentsInProject_args");
-
-    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.STRING, (short)1);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new getAllExperimentsInProject_argsStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new getAllExperimentsInProject_argsTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new GetAPIVersion_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new GetAPIVersion_argsTupleSchemeFactory());
     }
 
-    public String projectId; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      PROJECT_ID((short)1, "projectId");
+;
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -7991,8 +2448,6 @@ import org.slf4j.LoggerFactory;
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
-          case 1: // PROJECT_ID
-            return PROJECT_ID;
           default:
             return null;
         }
@@ -8031,87 +2486,37 @@ import org.slf4j.LoggerFactory;
         return _fieldName;
       }
     }
-
-    // isset id assignments
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllExperimentsInProject_args.class, metaDataMap);
-    }
-
-    public getAllExperimentsInProject_args() {
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAPIVersion_args.class, metaDataMap);
     }
 
-    public getAllExperimentsInProject_args(
-      String projectId)
-    {
-      this();
-      this.projectId = projectId;
+    public GetAPIVersion_args() {
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public getAllExperimentsInProject_args(getAllExperimentsInProject_args other) {
-      if (other.isSetProjectId()) {
-        this.projectId = other.projectId;
-      }
+    public GetAPIVersion_args(GetAPIVersion_args other) {
     }
 
-    public getAllExperimentsInProject_args deepCopy() {
-      return new getAllExperimentsInProject_args(this);
+    public GetAPIVersion_args deepCopy() {
+      return new GetAPIVersion_args(this);
     }
 
     @Override
     public void clear() {
-      this.projectId = null;
-    }
-
-    public String getProjectId() {
-      return this.projectId;
-    }
-
-    public getAllExperimentsInProject_args setProjectId(String projectId) {
-      this.projectId = projectId;
-      return this;
-    }
-
-    public void unsetProjectId() {
-      this.projectId = null;
-    }
-
-    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
-    public boolean isSetProjectId() {
-      return this.projectId != null;
-    }
-
-    public void setProjectIdIsSet(boolean value) {
-      if (!value) {
-        this.projectId = null;
-      }
     }
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
-      case PROJECT_ID:
-        if (value == null) {
-          unsetProjectId();
-        } else {
-          setProjectId((String)value);
-        }
-        break;
-
       }
     }
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
-      case PROJECT_ID:
-        return getProjectId();
-
       }
       throw new IllegalStateException();
     }
@@ -8123,8 +2528,6 @@ import org.slf4j.LoggerFactory;
       }
 
       switch (field) {
-      case PROJECT_ID:
-        return isSetProjectId();
       }
       throw new IllegalStateException();
     }
@@ -8133,24 +2536,15 @@ import org.slf4j.LoggerFactory;
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof getAllExperimentsInProject_args)
-        return this.equals((getAllExperimentsInProject_args)that);
+      if (that instanceof GetAPIVersion_args)
+        return this.equals((GetAPIVersion_args)that);
       return false;
     }
 
-    public boolean equals(getAllExperimentsInProject_args that) {
+    public boolean equals(GetAPIVersion_args that) {
       if (that == null)
         return false;
 
-      boolean this_present_projectId = true && this.isSetProjectId();
-      boolean that_present_projectId = true && that.isSetProjectId();
-      if (this_present_projectId || that_present_projectId) {
-        if (!(this_present_projectId && that_present_projectId))
-          return false;
-        if (!this.projectId.equals(that.projectId))
-          return false;
-      }
-
       return true;
     }
 
@@ -8160,23 +2554,13 @@ import org.slf4j.LoggerFactory;
     }
 
     @Override
-    public int compareTo(getAllExperimentsInProject_args other) {
+    public int compareTo(GetAPIVersion_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
 
-      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetProjectId()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
       return 0;
     }
 
@@ -8194,25 +2578,15 @@ import org.slf4j.LoggerFactory;
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("getAllExperimentsInProject_args(");
+      StringBuilder sb = new StringBuilder("GetAPIVersion_args(");
       boolean first = true;
 
-      sb.append("projectId:");
-      if (this.projectId == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.projectId);
-      }
-      first = false;
       sb.append(")");
       return sb.toString();
     }
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
-      if (projectId == null) {
-        throw new org.apache.thrift.protocol.TProtocolException("Required field 'projectId' was not present! Struct: " + toString());
-      }
       // check for sub-struct validity
     }
 
@@ -8232,15 +2606,15 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    private static class getAllExperimentsInProject_argsStandardSchemeFactory implements SchemeFactory {
-      public getAllExperimentsInProject_argsStandardScheme getScheme() {
-        return new getAllExperimentsInProject_argsStandardScheme();
+    private static class GetAPIVersion_argsStandardSchemeFactory implements SchemeFactory {
+      public GetAPIVersion_argsStandardScheme getScheme() {
+        return new GetAPIVersion_argsStandardScheme();
       }
     }
 
-    private static class getAllExperimentsInProject_argsStandardScheme extends StandardScheme<getAllExperimentsInProject_args> {
+    private static class GetAPIVersion_argsStandardScheme extends StandardScheme<GetAPIVersion_args> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllExperimentsInProject_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAPIVersion_args struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -8250,14 +2624,6 @@ import org.slf4j.LoggerFactory;
             break;
           }
           switch (schemeField.id) {
-            case 1: // PROJECT_ID
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
-                struct.projectId = iprot.readString();
-                struct.setProjectIdIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
             default:
               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
           }
@@ -8269,70 +2635,53 @@ import org.slf4j.LoggerFactory;
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllExperimentsInProject_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAPIVersion_args struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        if (struct.projectId != null) {
-          oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
-          oprot.writeString(struct.projectId);
-          oprot.writeFieldEnd();
-        }
         oprot.writeFieldStop();
         oprot.writeStructEnd();
       }
 
     }
 
-    private static class getAllExperimentsInProject_argsTupleSchemeFactory implements SchemeFactory {
-      public getAllExperimentsInProject_argsTupleScheme getScheme() {
-        return new getAllExperimentsInProject_argsTupleScheme();
+    private static class GetAPIVersion_argsTupleSchemeFactory implements SchemeFactory {
+      public GetAPIVersion_argsTupleScheme getScheme() {
+        return new GetAPIVersion_argsTupleScheme();
       }
     }
 
-    private static class getAllExperimentsInProject_argsTupleScheme extends TupleScheme<getAllExperimentsInProject_args> {
+    private static class GetAPIVersion_argsTupleScheme extends TupleScheme<GetAPIVersion_args> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, getAllExperimentsInProject_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, GetAPIVersion_args struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
-        oprot.writeString(struct.projectId);
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, getAllExperimentsInProject_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, GetAPIVersion_args struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
-        struct.projectId = iprot.readString();
-        struct.setProjectIdIsSet(true);
       }
     }
 
   }
 
-  public static class getAllExperimentsInProject_result implements org.apache.thrift.TBase<getAllExperimentsInProject_result, getAllExperimentsInProject_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllExperimentsInProject_result>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllExperimentsInProject_result");
+  public static class GetAPIVersion_result implements org.apache.thrift.TBase<GetAPIVersion_result, GetAPIVersion_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetAPIVersion_result>   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAPIVersion_result");
 
-    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
-    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
-    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
-    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);
+    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new getAllExperimentsInProject_resultStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new getAllExperimentsInProject_resultTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new GetAPIVersion_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new GetAPIVersion_resultTupleSchemeFactory());
     }
 
-    public List<org.apache.airavata.model.workspace.experiment.Experiment> success; // required
-    public org.apache.airavata.api.error.InvalidRequestException ire; // required
-    public org.apache.airavata.api.error.AiravataClientException ace; // required
-    public org.apache.airavata.api.error.AiravataSystemException ase; // required
+    public String success; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      SUCCESS((short)0, "success"),
-      IRE((short)1, "ire"),
-      ACE((short)2, "ace"),
-      ASE((short)3, "ase");
+      SUCCESS((short)0, "success");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -8349,12 +2698,6 @@ import org.slf4j.LoggerFactory;
         switch(fieldId) {
           case 0: // SUCCESS
             return SUCCESS;
-          case 1: // IRE
-            return IRE;
-          case 2: // ACE
-            return ACE;
-          case 3: // ASE
-            return ASE;
           default:
             return null;
         }
@@ -8399,176 +2742,60 @@ import org.slf4j.LoggerFactory;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
-              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.Experiment.class))));
-      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
-      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
-      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllExperimentsInProject_result.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAPIVersion_result.class, metaDataMap);
     }
 
-    public getAllExperimentsInProject_result() {
+    public GetAPIVersion_result() {
     }
 
-    public getAllExperimentsInProject_result(
-      List<org.apache.airavata.model.workspace.experiment.Experiment> success,
-      org.apache.airavata.api.error.InvalidRequestException ire,
-      org.apache.airavata.api.error.AiravataClientException ace,
-      org.apache.airavata.api.error.AiravataSystemException ase)
+    public GetAPIVersion_result(
+      String success)
     {
       this();
       this.success = success;
-      this.ire = ire;
-      this.ace = ace;
-      this.ase = ase;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public getAllExperimentsInProject_result(getAllExperimentsInProject_result other) {
+    public GetAPIVersion_result(GetAPIVersion_result other) {
       if (other.isSetSuccess()) {
-        List<org.apache.airavata.model.workspace.experiment.Experiment> __this__success = new ArrayList<org.apache.airavata.model.workspace.experiment.Experiment>(other.success.size());
-        for (org.apache.airavata.model.workspace.experiment.Experiment other_element : other.success) {
-          __this__success.add(new org.apache.airavata.model.workspace.experiment.Experiment(other_element));
-        }
-        this.success = __this__success;
-      }
-      if (other.isSetIre()) {
-        this.ire = new org.apache.airavata.api.error.InvalidRequestException(other.ire);
-      }
-      if (other.isSetAce()) {
-        this.ace = new org.apache.airavata.api.error.AiravataClientException(other.ace);
-      }
-      if (other.isSetAse()) {
-        this.ase = new org.apache.airavata.api.error.AiravataSystemException(other.ase);
+        this.success = other.success;
       }
     }
 
-    public getAllExperimentsInProject_result deepCopy() {
-      return new getAllExperimentsInProject_result(this);
+    public GetAPIVersion_result deepCopy() {
+      return new GetAPIVersion_result(this);
     }
 
     @Override
     public void clear() {
       this.success = null;
-      this.ire = null;
-      this.ace = null;
-      this.ase = null;
-    }
-
-    public int getSuccessSize() {
-      return (this.success == null) ? 0 : this.success.size();
     }
 
-    public java.util.Iterator<org.apache.airavata.model.workspace.experiment.Experiment> getSuccessIterator() {
-      return (this.success == null) ? null : this.success.iterator();
-    }
-
-    public void addToSuccess(org.apache.airavata.model.workspace.experiment.Experiment elem) {
-      if (this.success == null) {
-        this.success = new ArrayList<org.apache.airavata.model.workspace.experiment.Experiment>();
-      }
-      this.success.add(elem);
-    }
-
-    public List<org.apache.airavata.model.workspace.experiment.Experiment> getSuccess() {
+    public String getSuccess() {
       return this.success;
     }
 
-    public getAllExperimentsInProject_result setSuccess(List<org.apache.airavata.model.workspace.experiment.Experiment> success) {
+    public GetAPIVersion_result setSuccess(String success) {
       this.success = success;
       return this;
     }
 
     public void unsetSuccess() {
-      this.success = null;
-    }
-
-    /** Returns true if field success is set (has been assigned a value) and false otherwise */
-    public boolean isSetSuccess() {
-      return this.success != null;
-    }
-
-    public void setSuccessIsSet(boolean value) {
-      if (!value) {
-        this.success = null;
-      }
-    }
-
-    public org.apache.airavata.api.error.InvalidRequestException getIre() {
-      return this.ire;
-    }
-
-    public getAllExperimentsInProject_result setIre(org.apache.airavata.api.error.InvalidRequestException ire) {
-      this.ire = ire;
-      return this;
-    }
-
-    public void unsetIre() {
-      this.ire = null;
-    }
-
-    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
-    public boolean isSetIre() {
-      return this.ire != null;
-    }
-
-    public void setIreIsSet(boolean value) {
-      if (!value) {
-        this.ire = null;
-      }
-    }
-
-    public org.apache.airavata.api.error.AiravataClientException getAce() {
-      return this.ace;
-    }
-
-    public getAllExperimentsInProject_result setAce(org.apache.airavata.api.error.AiravataClientException ace) {
-      this.ace = ace;
-      return this;
-    }
-
-    public void unsetAce() {
-      this.ace = null;
-    }
-
-    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
-    public boolean isSetAce() {
-      return this.ace != null;
-    }
-
-    public void setAceIsSet(boolean value) {
-      if (!value) {
-        this.ace = null;
-      }
-    }
-
-    public org.apache.airavata.api.error.AiravataSystemException getAse() {
-      return this.ase;
-    }
-
-    public getAllExperimentsInProject_result setAse(org.apache.airavata.api.error.AiravataSystemException ase) {
-      this.ase = ase;
-      return this;
-    }
-
-    public void unsetAse() {
-      this.ase = null;
+      this.success = null;
     }
 
-    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
-    public boolean isSetAse() {
-      return this.ase != null;
+    /** Returns true if field success is set (has been assigned a value) and false otherwise */
+    public boolean isSetSuccess() {
+      return this.success != null;
     }
 
-    public void setAseIsSet(boolean value) {
+    public void setSuccessIsSet(boolean value) {
       if (!value) {
-        this.ase = null;
+        this.success = null;
       }
     }
 
@@ -8578,31 +2805,7 @@ import org.slf4j.LoggerFactory;
         if (value == null) {
           unsetSuccess();
         } else {
-          setSuccess((List<org.apache.airavata.model.workspace.experiment.Experiment>)value);
-        }
-        break;
-
-      case IRE:
-        if (value == null) {
-          unsetIre();
-        } else {
-          setIre((org.apache.airavata.api.error.InvalidRequestException)value);
-        }
-        break;
-
-      case ACE:
-        if (value == null) {
-          unsetAce();
-        } else {
-          setAce((org.apache.airavata.api.error.AiravataClientException)value);
-        }
-        break;
-
-      case ASE:
-        if (value == null) {
-          unsetAse();
-        } else {
-          setAse((org.apache.airavata.api.error.AiravataSystemException)value);
+          setSuccess((String)value);
         }
         break;
 
@@ -8614,15 +2817,6 @@ import org.slf4j.LoggerFactory;
       case SUCCESS:
         return getSuccess();
 
-      case IRE:
-        return getIre();
-
-      case ACE:
-        return getAce();
-
-      case ASE:
-        return getAse();
-
       }
       throw new IllegalStateException();
     }
@@ -8636,12 +2830,6 @@ import org.slf4j.LoggerFactory;
       switch (field) {
       case SUCCESS:
         return isSetSuccess();
-      case IRE:
-        return isSetIre();
-      case ACE:
-        return isSetAce();
-      case ASE:
-        return isSetAse();
       }
       throw new IllegalStateException();
     }
@@ -8650,12 +2838,12 @@ import org.slf4j.LoggerFactory;
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof getAllExperimentsInProject_result)
-        return this.equals((getAllExperimentsInProject_result)that);
+      if (that instanceof GetAPIVersion_result)
+        return this.equals((GetAPIVersion_result)that);
       return false;
     }
 
-    public boolean equals(getAllExperimentsInProject_result that) {
+    public boolean equals(GetAPIVersion_result that) {
       if (that == null)
         return false;
 
@@ -8668,33 +2856,6 @@ import org.slf4j.LoggerFactory;
           return false;
       }
 
-      boolean this_present_ire = true && this.isSetIre();
-      boolean that_present_ire = true && that.isSetIre();
-      if (this_present_ire || that_present_ire) {
-        if (!(this_present_ire && that_present_ire))
-          return false;
-        if (!this.ire.equals(that.ire))
-          return false;
-      }
-
-      boolean this_present_ace = true && this.isSetAce();
-      boolean that_present_ace = true && that.isSetAce();
-      if (this_present_ace || that_present_ace) {
-        if (!(this_present_ace && that_present_ace))
-          return false;
-        if (!this.ace.equals(that.ace))
-          return false;
-      }
-
-      boolean this_present_ase = true && this.isSetAse();
-      boolean that_present_ase = true && that.isSetAse();
-      if (this_present_ase || that_present_ase) {
-        if (!(this_present_ase && that_present_ase))
-          return false;
-        if (!this.ase.equals(that.ase))
-          return false;
-      }
-
       return true;
     }
 
@@ -8704,7 +2865,7 @@ import org.slf4j.LoggerFactory;
     }
 
     @Override
-    public int compareTo(getAllExperimentsInProject_result other) {
+    public int compareTo(GetAPIVersion_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
@@ -8721,36 +2882,6 @@ import org.slf4j.LoggerFactory;
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetIre()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetAce()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetAse()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
       return 0;
     }
 
@@ -8768,7 +2899,7 @@ import org.slf4j.LoggerFactory;
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("getAllExperimentsInProject_result(");
+      StringBuilder sb = new StringBuilder("GetAPIVersion_result(");
       boolean first = true;
 
       sb.append("success:");
@@ -8778,30 +2909,6 @@ import org.slf4j.LoggerFactory;
         sb.append(this.success);
       }
       first = false;
-      if (!first) sb.append(", ");
-      sb.append("ire:");
-      if (this.ire == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.ire);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("ace:");
-      if (this.ace == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.ace);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("ase:");
-      if (this.ase == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.ase);
-      }
-      first = false;
       sb.append(")");
       return sb.toString();
     }
@@ -8827,15 +2934,15 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    private static class getAllExperimentsInProject_resultStandardSchemeFactory implements SchemeFactory {
-      public getAllExperimentsInProject_resultStandardScheme getScheme() {
-        return new getAllExperimentsInProject_resultStandardScheme();
+    private static class GetAPIVersion_resultStandardSchemeFactory implements SchemeFactory {
+      public GetAPIVersion_resultStandardScheme getScheme() {
+        return new GetAPIVersion_resultStandardScheme();
       }
     }
 
-    private static class getAllExperimentsInProject_resultStandardScheme extends StandardScheme<getAllExperimentsInProject_result> {
+    private static class GetAPIVersion_resultStandardScheme extends StandardScheme<GetAPIVersion_result> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllExperimentsInProject_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAPIVersion_result struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -8846,51 +2953,13 @@ import org.slf4j.LoggerFactory;
           }
           switch (schemeField.id) {
             case 0: // SUCCESS
-              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
-                {
-                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
-                  struct.success = new ArrayList<org.apache.airavata.model.workspace.experiment.Experiment>(_list8.size);
-                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
-                  {
-                    org.apache.airavata.model.workspace.experiment.Experiment _elem10;
-                    _elem10 = new org.apache.airavata.model.workspace.experiment.Experiment();
-                    _elem10.read(iprot);
-                    struct.success.add(_elem10);
-                  }
-                  iprot.readListEnd();
-                }
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
+                struct.success = iprot.readString();
                 struct.setSuccessIsSet(true);
               } else { 
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
               }
               break;
-            case 1: // IRE
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
-                struct.ire.read(iprot);
-                struct.setIreIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
-            case 2: // ACE
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.ace = new org.apache.airavata.api.error.AiravataClientException();
-                struct.ace.read(iprot);
-                struct.setAceIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
-            case 3: // ASE
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
-                struct.ase.read(iprot);
-                struct.setAseIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
             default:
               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
           }
@@ -8902,35 +2971,13 @@ import org.slf4j.LoggerFactory;
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllExperimentsInProject_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAPIVersion_result struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
         if (struct.success != null) {
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-          {
-            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (org.apache.airavata.model.workspace.experiment.Experiment _iter11 : struct.success)
-            {
-              _iter11.write(oprot);
-            }
-            oprot.writeListEnd();
-          }
-          oprot.writeFieldEnd();
-        }
-        if (struct.ire != null) {
-          oprot.writeFieldBegin(IRE_FIELD_DESC);
-          struct.ire.write(oprot);
-          oprot.writeFieldEnd();
-        }
-        if (struct.ace != null) {
-          oprot.writeFieldBegin(ACE_FIELD_DESC);
-          struct.ace.write(oprot);
-          oprot.writeFieldEnd();
-        }
-        if (struct.ase != null) {
-          oprot.writeFieldBegin(ASE_FIELD_DESC);
-          struct.ase.write(oprot);
+          oprot.writeString(struct.success);
           oprot.writeFieldEnd();
         }
         oprot.writeFieldStop();
@@ -8939,105 +2986,56 @@ import org.slf4j.LoggerFactory;
 
     }
 
-    private static class getAllExperimentsInProject_resultTupleSchemeFactory implements SchemeFactory {
-      public getAllExperimentsInProject_resultTupleScheme getScheme() {
-        return new getAllExperimentsInProject_resultTupleScheme();
+    private static class GetAPIVersion_resultTupleSchemeFactory implements SchemeFactory {
+      public GetAPIVersion_resultTupleScheme getScheme() {
+        return new GetAPIVersion_resultTupleScheme();
       }
     }
 
-    private static class getAllExperimentsInProject_resultTupleScheme extends TupleScheme<getAllExperimentsInProject_result> {
+    private static class GetAPIVersion_resultTupleScheme extends TupleScheme<GetAPIVersion_result> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, getAllExperimentsInProject_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, GetAPIVersion_result struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         BitSet optionals = new BitSet();
         if (struct.isSetSuccess()) {
           optionals.set(0);
         }
-        if (struct.isSetIre()) {
-          optionals.set(1);
-        }
-        if (struct.isSetAce()) {
-          optionals.set(2);
-        }
-        if (struct.isSetAse()) {
-          optionals.set(3);
-        }
-        oprot.writeBitSet(optionals, 4);
+        oprot.writeBitSet(optionals, 1);
         if (struct.isSetSuccess()) {
-          {
-            oprot.writeI32(struct.success.size());
-            for (org.apache.airavata.model.workspace.experiment.Experiment _iter12 : struct.success)
-            {
-              _iter12.write(oprot);
-            }
-          }
-        }
-        if (struct.isSetIre()) {
-          struct.ire.write(oprot);
-        }
-        if (struct.isSetAce()) {
-          struct.ace.write(oprot);
-        }
-        if (struct.isSetAse()) {
-          struct.ase.write(oprot);
+          oprot.writeString(struct.success);
         }
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, getAllExperimentsInProject_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, GetAPIVersion_result struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
-        BitSet incoming = iprot.readBitSet(4);
+        BitSet incoming = iprot.readBitSet(1);
         if (incoming.get(0)) {
-          {
-            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<org.apache.airavata.model.workspace.experiment.Experiment>(_list13.size);
-            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
-            {
-              org.apache.airavata.model.workspace.experiment.Experiment _elem15;
-              _elem15 = new org.apache.airavata.model.workspace.experiment.Experiment();
-              _elem15.read(iprot);
-              struct.success.add(_elem15);
-            }
-          }
+          struct.success = iprot.readString();
           struct.setSuccessIsSet(true);
         }
-        if (incoming.get(1)) {
-          struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
-          struct.ire.read(iprot);
-          struct.setIreIsSet(true);
-        }
-        if (incoming.get(2)) {
-          struct.ace = new org.apache.airavata.api.error.AiravataClientException();
-          struct.ace.read(iprot);
-          struct.setAceIsSet(true);
-        }
-        if (incoming.get(3)) {
-          struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
-          struct.ase.read(iprot);
-          struct.setAseIsSet(true);
-        }
       }
     }
 
   }
 
-  public static class getAllUserExperiments_args implements org.apache.thrift.TBase<getAllUserExperiments_args, getAllUserExperiments_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllUserExperiments_args>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllUserExperiments_args");
+  public static class createExperiment_args implements org.apache.thrift.TBase<createExperiment_args, createExperiment_args._Fields>, java.io.Serializable, Cloneable, Comparable<createExperiment_args>   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createExperiment_args");
 
-    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);
+    private static final org.apache.thrift.protocol.TField EXPERIMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("experiment", org.apache.thrift.protocol.TType.STRUCT, (short)1);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new getAllUserExperiments_argsStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new getAllUserExperiments_argsTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new createExperiment_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new createExperiment_argsTupleSchemeFactory());
     }
 
-    public String userName; // required
+    public org.apache.airavata.model.workspace.experiment.Experiment experiment; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      USER_NAME((short)1, "userName");
+      EXPERIMENT((short)1, "experiment");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -9052,8 +3050,8 @@ import org.slf4j.LoggerFactory;
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
-          case 1: // USER_NAME
-            return USER_NAME;
+          case 1: // EXPERIMENT
+            return EXPERIMENT;
           default:
             return null;
         }
@@ -9097,71 +3095,71 @@ import org.slf4j.LoggerFactory;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
+      tmpMap.put(_Fields.EXPERIMENT, new org.apache.thrift.meta_data.FieldMetaData("experiment", org.apache.thrift.TFieldRequirementType.REQUIRED, 
+          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.Experiment.class)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllUserExperiments_args.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createExperiment_args.class, metaDataMap);
     }
 
-    public getAllUserExperiments_args() {
+    public createExperiment_args() {
     }
 
-    public getAllUserExperiments_args(
-      String userName)
+    public createExperiment_args(
+      org.apache.airavata.model.workspace.experiment.Experiment experiment)
     {
       this();
-      this.userName = userName;
+      this.experiment = experiment;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public getAllUserExperiments_args(getAllUserExperiments_args other) {
-      if (other.isSetUserName()) {
-        this.userName = other.userName;
+    public createExperiment_args(createExperiment_args other) {
+      if (other.isSetExperiment()) {
+        this.experiment = new org.apache.airavata.model.workspace.experiment.Experiment(other.experiment);
       }
     }
 
-    public getAllUserExperiments_args deepCopy() {
-      return new getAllUserExperiments_args(this);
+    public createExperiment_args deepCopy() {
+      return new createExperiment_args(this);
     }
 
     @Override
     public void clear() {
-      this.userName = null;
+      this.experiment = null;
     }
 
-    public String getUserName() {
-      return this.userName;
+    public org.apache.airavata.model.workspace.experiment.Experiment getExperiment() {
+      return this.experiment;
     }
 
-    public getAllUserExperiments_args setUserName(String userName) {
-      this.userName = userName;
+    public createExperiment_args setExperiment(org.apache.airavata.model.workspace.experiment.Experiment experiment) {
+      this.experiment = experiment;
       return this;
     }
 
-    public void unsetUserName() {
-      this.userName = null;
+    public void unsetExperiment() {
+      this.experiment = null;
     }
 
-    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
-    public boolean isSetUserName() {
-      return this.userName != null;
+    /** Returns true if field experiment is set (has been assigned a value) and false otherwise */
+    public boolean isSetExperiment() {
+      return this.experiment != null;
     }
 
-    public void setUserNameIsSet(boolean value) {
+    public void setExperimentIsSet(boolean value) {
       if (!value) {
-        this.userName = null;
+        this.experiment = null;
       }
     }
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
-      case USER_NAME:
+      case EXPERIMENT:
         if (value == null) {
-          unsetUserName();
+          unsetExperiment();
         } else {
-          setUserName((String)value);
+          setExperiment((org.apache.airavata.model.workspace.experiment.Experiment)value);
         }
         break;
 
@@ -9170,8 +3168,8 @@ import org.slf4j.LoggerFactory;
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
-      case USER_NAME:
-        return getUserName();
+      case EXPERIMENT:
+        return getExperiment();
 
       }
       throw new IllegalStateException();
@@ -9184,8 +3182,8 @@ import org.slf4j.LoggerFactory;
       }
 
       switch (field) {
-      case USER_NAME:
-        return isSetUserName();
+      case EXPERIMENT:
+        return isSetExperiment();
       }
       throw new IllegalStateException();
     }
@@ -9194,21 +3192,21 @@ import org.slf4j.LoggerFactory;
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof getAllUserExperiments_args)
-        return this.equals((getAllUserExperiments_args)that);
+      if (that instanceof createExperiment_args)
+        return this.equals((createExperiment_args)that);
       return false;
     }
 
-    public boolean equals(getAllUserExperiments_args that) {
+    public boolean equals(createExperiment_args that) {
       if (that == null)
         return false;
 
-      boolean this_present_userName = true && this.isSetUserName();
-      boolean that_present_userName = true && that.isSetUserName();
-      if (this_present_userName || that_present_userName) {
-        if (!(this_present_userName && that_present_userName))
+      boolean this_present_experiment = true && this.isSetExperiment();
+      boolean that_present_experiment = true && that.isSetExperiment();
+      if (this_present_experiment || that_present_experiment) {
+        if (!(this_present_experiment && that_present_experiment))
           return false;
-        if (!this.userName.equals(that.userName))
+        if (!this.experiment.equals(that.experiment))
           return false;
       }
 
@@ -9221,19 +3219,19 @@ import org.slf4j.LoggerFactory;
     }
 
     @Override
-    public int compareTo(getAllUserExperiments_args other) {
+    public int compareTo(createExperiment_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
 
-      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
+      lastComparison = Boolean.valueOf(isSetExperiment()).compareTo(other.isSetExperiment());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      if (isSetUserName()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
+      if (isSetExperiment()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experiment, other.experiment);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -9255,14 +3253,14 @@ import org.slf4j.LoggerFactory;
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("getAllUserExperiments_args(");
+      StringBuilder sb = new StringBuilder("createExperiment_args(");
       boolean first = true;
 
-      sb.append("userName:");
-      if (this.userName == null) {
+      sb.append("experiment:");
+      if (this.experiment == null) {
         sb.append("null");
       } else {
-        sb.append(this.userName);
+        sb.append(this.experiment);
       }
       first = false;
       sb.append(")");
@@ -9271,10 +3269,13 @@ import org.slf4j.LoggerFactory;
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
-      if (userName == null) {
-        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userName' was not present! Struct: " + toString());
+      if (experiment == null) {
+        throw new org.apache.thrift.protocol.TProtocolException("Required field 'experiment' was not present! Struct: " + toString());
       }
       // check for sub-struct validity
+      if (experiment != null) {
+        experiment.validate();
+      }
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -9293,15 +3294,15 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    private static class getAllUserExperiments_argsStandardSchemeFactory implements SchemeFactory {
-      public getAllUserExperiments_argsStandardScheme getScheme() {
-        return new getAllUserExperiments_argsStandardScheme();
+    private static class createExperiment_argsStandardSchemeFactory implements SchemeFactory {
+      public createExperiment_argsStandardScheme getScheme() {
+        return new createExperiment_argsStandardScheme();
       }
     }
 
-    private static class getAllUserExperiments_argsStandardScheme extends StandardScheme<getAllUserExperiments_args> {
+    private static class createExperiment_argsStandardScheme extends StandardScheme<createExperiment_args> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllUserExperiments_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, createExperiment_args struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -9311,10 +3312,11 @@ import org.slf4j.LoggerFactory;
             break;
           }
           switch (schemeField.id) {
-            case 1: // USER_NAME
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
-                struct.userName = iprot.readString();
-                struct.setUserNameIsSet(true);
+            case 1: // EXPERIMENT
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.experiment = new org.apache.airavata.model.workspace.experiment.Experiment();
+                struct.experiment.read(iprot);
+                struct.setExperimentIsSet(true);
               } else { 
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
               }
@@ -9330,13 +3332,13 @@ import org.slf4j.LoggerFactory;
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllUserExperiments_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, createExperiment_args struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        if (struct.userName != null) {
-          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
-          oprot.writeString(struct.userName);
+        if (struct.experiment != null) {
+          oprot.writeFieldBegin(EXPERIMENT_FIELD_DESC);
+          struct.experiment.write(oprot);
           oprot.writeFieldEnd();
         }
         oprot.writeFieldStop();
@@ -9345,45 +3347,46 @@ import org.slf4j.LoggerFactory;
 
     }
 
-    private static class getAllUserExperiments_argsTupleSchemeFactory implements SchemeFactory {
-      public getAllUserExperiments_argsTupleScheme getScheme() {
-        return new getAllUserExperiments_argsTupleScheme();
+    private static class createExperiment_argsTupleSchemeFactory implements SchemeFactory {
+      public createExperiment_argsTupleScheme getScheme() {
+        return new createExperiment_argsTupleScheme();
       }
     }
 
-    private static class getAllUserExperiments_argsTupleScheme extends TupleScheme<getAllUserExperiments_args> {
+    private static class createExperiment_argsTupleScheme extends TupleScheme<createExperiment_args> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, getAllUserExperiments_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, createExperiment_args struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
-        oprot.writeString(struct.userName);
+        struct.experiment.write(oprot);
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, getAllUserExperiments_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, createExperiment_args struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
-        struct.userName = iprot.readString();
-        struct.setUserNameIsSet(true);
+        struct.experiment = new org.apache.airavata.model.workspace.experiment.Experiment();
+        struct.experiment.read(iprot);
+        struct.setExperimentIsSet(true);
       }
     }
 
   }
 
-  public static class getAllUserExperiments_result implements org.apache.thrift.TBase<getAllUserExperiments_result, getAllUserExperiments_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllUserExperiments_result>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllUserExperiments_result");
+  public static class createExperiment_result implements org.apache.thrift.TBase<createExperiment_result, createExperiment_result._Fields>, java.io.Serializable, Cloneable, Comparable<createExperiment_result>   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createExperiment_result");
 
-    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
+    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
     private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
     private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
     private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new getAllUserExperiments_resultStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new getAllUserExperiments_resultTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new createExperiment_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new createExperiment_resultTupleSchemeFactory());
     }
 
-    public List<org.apache.airavata.model.workspace.experiment.Experiment> success; // required
+    public String success; // required
     public org.apache.airavata.api.error.InvalidRequestException ire; // required
     public org.apache.airavata.api.error.AiravataClientException ace; // required
     public org.apache.airavata.api.error.AiravataSystemException ase; // required
@@ -9460,8 +3463,7 @@ import org.slf4j.LoggerFactory;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
-              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.Experiment.class))));
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
       tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
       tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
@@ -9469,14 +3471,14 @@ import org.slf4j.LoggerFactory;
       tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllUserExperiments_result.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createExperiment_result.class, metaDataMap);
     }
 
-    public getAllUserExperiments_result() {
+    public createExperiment_result() {
     }
 
-    public getAllUserExperiments_result(
-      List<org.apache.airavata.model.workspace.experiment.Experiment> success,
+    public createExperiment_result(
+      String success,
       org.apache.airavata.api.error.InvalidRequestException ire,
       org.apache.airavata.api.error.AiravataClientException ace,
       org.apache.airavata.api.error.AiravataSystemException ase)
@@ -9491,13 +3493,9 @@ import org.slf4j.LoggerFactory;
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public getAllUserExperiments_result(getAllUserExperiments_result other) {
+    public createExperiment_result(createExperiment_result other) {
       if (other.isSetSuccess()) {
-        List<org.apache.airavata.model.workspace.experiment.Experiment> __this__success = new ArrayList<org.apache.airavata.model.workspace.experiment.Experiment>(other.success.size());
-        for (org.apache.airavata.model.workspace.experiment.Experiment other_element : other.success) {
-          __this__success.add(new org.apache.airavata.model.workspace.experiment.Experiment(other_element));
-        }
-        this.success = __this__success;
+        this.success = other.success;
       }
       if (other.isSetIre()) {
         this.ire = new org.apache.airavata.api.error.InvalidRequestException(other.ire);
@@ -9510,8 +3508,8 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    public getAllUserExperiments_result deepCopy() {
-      return new getAllUserExperiments_result(this);
+    public createExperiment_result deepCopy() {
+      return new createExperiment_result(this);
     }
 
     @Override
@@ -9522,26 +3520,11 @@ import org.slf4j.LoggerFactory;
       this.ase = null;
     }
 
-    public int getSuccessSize() {
-      return (this.success == null) ? 0 : this.success.size();
-    }
-
-    public java.util.Iterator<org.apache.airavata.model.workspace.experiment.Experiment> getSuccessIterator() {
-      return (this.success == null) ? null : this.success.iterator();
-    }
-
-    public void addToSuccess(org.apache.airavata.model.workspace.experiment.Experiment elem) {
-      if (this.success == null) {
-        this.success = new ArrayList<org.apache.airavata.model.workspace.experiment.Experiment>();
-      }
-      this.success.add(elem);
-    }
-
-    public List<org.apache.airavata.model.workspace.experiment.Experiment> getSuccess() {
+    public String getSuccess() {
       return this.success;
     }
 
-    public getAllUserExperiments_result setSuccess(List<org.apache.airavata.model.workspace.experiment.Experiment> success) {
+    public createExperiment_result setSuccess(String success) {
       this.success = success;
       return this;
     }
@@ -9565,7 +3548,7 @@ import org.slf4j.LoggerFactory;
       return this.ire;
     }
 
-    public getAllUserExperiments_result setIre(org.apache.airavata.api.error.InvalidRequestException ire) {
+    public createExperiment_result setIre(org.apache.airavata.api.error.InvalidRequestException ire) {
       this.ire = ire;
       return this;
     }
@@ -9589,7 +3572,7 @@ import org.slf4j.LoggerFactory;
       return this.ace;
     }
 
-    public getAllUserExperiments_result setAce(org.apache.airavata.api.error.AiravataClientException ace) {
+    public createExperiment_result setAce(org.apache.airavata.api.error.AiravataClientException ace) {
       this.ace = ace;
       return this;
     }
@@ -9613,7 +3596,7 @@ import org.slf4j.LoggerFactory;
       return this.ase;
     }
 
-    public getAllUserExperiments_result setAse(org.apache.airavata.api.error.AiravataSystemException ase) {
+    public createExperiment_result setAse(org.apache.airavata.api.error.AiravataSystemException ase) {
       this.ase = ase;
       return this;
     }
@@ -9639,7 +3622,7 @@ import org.slf4j.LoggerFactory;
         if (value == null) {
           unsetSuccess();
         } else {
-          setSuccess((List<org.apache.airavata.model.workspace.experiment.Experiment>)value);
+          setSuccess((String)value);
         }
         break;
 
@@ -9711,12 +3694,12 @@ import org.slf4j.LoggerFactory;
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof getAllUserExperiments_result)
-        return this.equals((getAllUserExperiments_result)that);
+      if (that instanceof createExperiment_result)
+        return this.equals((createExperiment_result)that);
       return false;
     }
 
-    public boolean equals(getAllUserExperiments_result that) {
+    public boolean equals(createExperiment_result that) {
       if (that == null)
         return false;
 
@@ -9765,7 +3748,7 @@ import org.slf4j.LoggerFactory;
     }
 
     @Override
-    public int compareTo(getAllUserExperiments_result other) {
+    public int compareTo(createExperiment_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
@@ -9829,7 +3812,7 @@ import org.slf4j.LoggerFactory;
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("getAllUserExperiments_result(");
+      StringBuilder sb = new StringBuilder("createExperiment_result(");
       boolean first = true;
 
       sb.append("success:");
@@ -9888,15 +3871,15 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    private static class getAllUserExperiments_resultStandardSchemeFactory implements SchemeFactory {
-      public getAllUserExperiments_resultStandardScheme getScheme() {
-        return new getAllUserExperiments_resultStandardScheme();
+    private static class createExperiment_resultStandardSchemeFactory implements SchemeFactory {
+      public createExperiment_resultStandardScheme getScheme() {
+        return new createExperiment_resultStandardScheme();
       }
     }
 
-    private static class getAllUserExperiments_resultStandardScheme extends StandardScheme<getAllUserExperiments_result> {
+    private static class createExperiment_resultStandardScheme extends StandardScheme<createExperiment_result> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllUserExperiments_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, createExperiment_result struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -9907,19 +3890,8 @@ import org.slf4j.LoggerFactory;
           }
           switch (schemeField.id) {
             case 0: // SUCCESS
-              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
-                {
-                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
-                  struct.success = new ArrayList<org.apache.airavata.model.workspace.experiment.Experiment>(_list16.size);
-                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
-                  {
-                    org.apache.airavata.model.workspace.experiment.Experiment _elem18;
-                    _elem18 = new org.apache.airavata.model.workspace.experiment.Experiment();
-                    _elem18.read(iprot);
-                    struct.success.add(_elem18);
-                  }
-                  iprot.readListEnd();
-                }
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
+                struct.success = iprot.readString();
                 struct.setSuccessIsSet(true);
               } else { 
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
@@ -9963,20 +3935,13 @@ import org.slf4j.LoggerFactory;
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllUserExperiments_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, createExperiment_result struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
         if (struct.success != null) {
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-          {
-            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (org.apache.airavata.model.workspace.experiment.Experiment _iter19 : struct.success)
-            {
-              _iter19.write(oprot);
-            }
-            oprot.writeListEnd();
-          }
+          oprot.writeString(struct.success);
           oprot.writeFieldEnd();
         }
         if (struct.ire != null) {
@@ -10000,16 +3965,16 @@ import org.slf4j.LoggerFactory;
 
     }
 
-    private static class getAllUserExperiments_resultTupleSchemeFactory implements SchemeFactory {
-      public getAllUserExperiments_resultTupleScheme getScheme() {
-        return new getAllUserExperiments_resultTupleScheme();
+    private static class createExperiment_resultTupleSchemeFactory implements SchemeFactory {
+      public createExperiment_resultTupleScheme getScheme() {
+        return new createExperiment_resultTupleScheme();
       }
     }
 
-    private static class getAllUserExperiments_resultTupleScheme extends TupleScheme<getAllUserExperiments_result> {
+    private static class createExperiment_resultTupleScheme extends TupleScheme<createExperiment_result> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, getAllUserExperiments_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, createExperiment_result struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         BitSet optionals = new BitSet();
         if (struct.isSetSuccess()) {
@@ -10026,13 +3991,7 @@ import org.slf4j.LoggerFactory;
         }
         oprot.writeBitSet(optionals, 4);
         if (struct.isSetSuccess()) {
-          {
-            oprot.writeI32(struct.success.size());
-            for (org.apache.airavata.model.workspace.experiment.Experiment _iter20 : struct.success)
-            {
-              _iter20.write(oprot);
-            }
-          }
+          oprot.writeString(struct.success);
         }
         if (struct.isSetIre()) {
           struct.ire.write(oprot);
@@ -10046,21 +4005,11 @@ import org.slf4j.LoggerFactory;
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, getAllUserExperiments_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, createExperiment_result struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
         BitSet incoming = iprot.readBitSet(4);
         if (incoming.get(0)) {
-          {
-            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<org.apache.airavata.model.workspace.experiment.Experiment>(_list21.size);
-            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
-            {
-              org.apache.airavata.model.workspace.experiment.Experiment _elem23;
-              _elem23 = new org.apache.airavata.model.workspace.experiment.Experiment();
-              _elem23.read(iprot);
-              struct.success.add(_elem23);
-            }
-          }
+          struct.success = iprot.readString();
           struct.setSuccessIsSet(true);
         }
         if (incoming.get(1)) {
@@ -10083,22 +4032,22 @@ import org.slf4j.LoggerFactory;
 
   }
 
-  public static class createExperiment_args implements org.apache.thrift.TBase<createExperiment_args, createExperiment_args._Fields>, java.io.Serializable, Cloneable, Comparable<createExperiment_args>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createExperiment_args");
+  public static class getExperiment_args implements org.apache.thrift.TBase<getExperiment_args, getExperiment_args._Fields>, java.io.Serializable, Cloneable, Comparable<getExperiment_args>   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExperiment_args");
 
-    private static final org.apache.thrift.protocol.TField EXPERIMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("experiment", org.apache.thrift.protocol.TType.STRUCT, (short)1);
+    private static final org.apache.thrift.protocol.TField AIRAVATA_EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataExperimentId", org.apache.thrift.protocol.TType.STRING, (short)1);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new createExperiment_argsStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new createExperiment_argsTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new getExperiment_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new getExperiment_argsTupleSchemeFactory());
     }
 
-    public org.apache.airavata.model.workspace.experiment.Experiment experiment; // required
+    public String airavataExperimentId; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      EXPERIMENT((short)1, "experiment");
+      AIRAVATA_EXPERIMENT_ID((short)1, "airavataExperimentId");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -10113,8 +4062,8 @@ import org.slf4j.LoggerFactory;
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
-          case 1: // EXPERIMENT
-            return EXPERIMENT;
+          case 1: // AIRAVATA_EXPERIMENT_ID
+            return AIRAVATA_EXPERIMENT_ID;
           default:
             return null;
         }
@@ -10158,71 +4107,71 @@ import org.slf4j.LoggerFactory;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.EXPERIMENT, new org.apache.thrift.meta_data.FieldMetaData("experiment", org.apache.thrift.TFieldRequirementType.REQUIRED, 
-          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.Experiment.class)));
+      tmpMap.put(_Fields.AIRAVATA_EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("airavataExperimentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createExperiment_args.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExperiment_args.class, metaDataMap);
     }
 
-    public createExperiment_args() {
+    public getExperiment_args() {
     }
 
-    public createExperiment_args(
-      org.apache.airavata.model.workspace.experiment.Experiment experiment)
+    public getExperiment_args(
+      String airavataExperimentId)
     {
       this();
-      this.experiment = experiment;
+      this.airavataExperimentId = airavataExperimentId;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public createExperiment_args(createExperiment_args other) {
-      if (other.isSetExperiment()) {
-        this.experiment = new org.apache.airavata.model.workspace.experiment.Experiment(other.experiment);
+    public getExperiment_args(getExperiment_args other) {
+      if (other.isSetAiravataExperimentId()) {
+        this.airavataExperimentId = other.airavataExperimentId;
       }
     }
 
-    public createExperiment_args deepCopy() {
-      return new createExperiment_args(this);
+    public getExperiment_args deepCopy() {
+      return new getExperiment_args(this);
     }
 
     @Override
     public void clear() {
-      this.experiment = null;
+      this.airavataExperimentId = null;
     }
 
-    public org.apache.airavata.model.workspace.experiment.Experiment getExperiment() {
-      return this.experiment;
+    public String getAiravataExperimentId() {
+      return this.airavataExperimentId;
     }
-
-    public createExperiment_args setExperiment(org.apache.airavata.model.workspace.experiment.Experiment experiment) {
-      this.experiment = experiment;
+
+    public getExperiment_args setAiravataExperimentId(String airavataExperimentId) {
+      this.airavataExperimentId = airavataExperimentId;
       return this;
     }
 
-    public void unsetExperiment() {
-      this.experiment = null;
+    public void unsetAiravataExperimentId() {
+      this.airavataExperimentId = null;
     }
 
-    /** Returns true if field experiment is set (has been assigned a value) and false otherwise */
-    public boolean isSetExperiment() {
-      return this.experiment != null;
+    /** Returns true if field airavataExperimentId is set (has been assigned a value) and false otherwise */
+    public boolean isSetAiravataExperimentId() {
+      return this.airavataExperimentId != null;
     }
 
-    public void setExperimentIsSet(boolean value) {
+    public void setAiravataExperimentIdIsSet(boolean value) {
       if (!value) {
-        this.experiment = null;
+        this.airavataExperimentId = null;
       }
     }
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
-      case EXPERIMENT:
+      case AIRAVATA_EXPERIMENT_ID:
         if (value == null) {
-          unsetExperiment();
+          unsetAiravataExperimentId();
         } else {
-          setExperiment((org.apache.airavata.model.workspace.experiment.Experiment)value);
+          setAiravataExperimentId((String)value);
         }
         break;
 
@@ -10231,8 +4180,8 @@ import org.slf4j.LoggerFactory;
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
-      case EXPERIMENT:
-        return getExperiment();
+      case AIRAVATA_EXPERIMENT_ID:
+        return getAiravataExperimentId();
 
       }
       throw new IllegalStateException();
@@ -10245,8 +4194,8 @@ import org.slf4j.LoggerFactory;
       }
 
       switch (field) {
-      case EXPERIMENT:
-        return isSetExperiment();
+      case AIRAVATA_EXPERIMENT_ID:
+        return isSetAiravataExperimentId();
       }
       throw new IllegalStateException();
     }
@@ -10255,21 +4204,21 @@ import org.slf4j.LoggerFactory;
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof createExperiment_args)
-        return this.equals((createExperiment_args)that);
+      if (that instanceof getExperiment_args)
+        return this.equals((getExperiment_args)that);
       return false;
     }
 
-    public boolean equals(createExperiment_args that) {
+    public boolean equals(getExperiment_args that) {
       if (that == null)
         return false;
 
-      boolean this_present_experiment = true && this.isSetExperiment();
-      boolean that_present_experiment = true && that.isSetExperiment();
-      if (this_present_experiment || that_present_experiment) {
-        if (!(this_present_experiment && that_present_experiment))
+      boolean this_present_airavataExperimentId = true && this.isSetAiravataExperimentId();
+      boolean that_present_airavataExperimentId = true && that.isSetAiravataExperimentId();
+      if (this_present_airavataExperimentId || that_present_airavataExperimentId) {
+        if (!(this_present_airavataExperimentId && that_present_airavataExperimentId))
           return false;
-        if (!this.experiment.equals(that.experiment))
+        if (!this.airavataExperimentId.equals(that.airavataExperimentId))
           return false;
       }
 
@@ -10282,19 +4231,19 @@ import org.slf4j.LoggerFactory;
     }
 
     @Override
-    public int compareTo(createExperiment_args other) {
+    public int compareTo(getExperiment_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
 
-      lastComparison = Boolean.valueOf(isSetExperiment()).compareTo(other.isSetExperiment());
+      lastComparison = Boolean.valueOf(isSetAiravataExperimentId()).compareTo(other.isSetAiravataExperimentId());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      if (isSetExperiment()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experiment, other.experiment);
+      if (isSetAiravataExperimentId()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataExperimentId, other.airavataExperimentId);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -10316,14 +4265,14 @@ import org.slf4j.LoggerFactory;
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("createExperiment_args(");
+      StringBuilder sb = new StringBuilder("getExperiment_args(");
       boolean first = true;
 
-      sb.append("experiment:");
-      if (this.experiment == null) {
+      sb.append("airavataExperimentId:");
+      if (this.airavataExperimentId == null) {
         sb.append("null");
       } else {
-        sb.append(this.experiment);
+        sb.append(this.airavataExperimentId);
       }
       first = false;
       sb.append(")");
@@ -10332,13 +4281,10 @@ import org.slf4j.LoggerFactory;
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
-      if (experiment == null) {
-        throw new org.apache.thrift.protocol.TProtocolException("Required field 'experiment' was not present! Struct: " + toString());
+      if (airavataExperimentId == null) {
+        throw new org.apache.thrift.protocol.TProtocolException("Required field 'airavataExperimentId' was not present! Struct: " + toString());
       }
       // check for sub-struct validity
-      if (experiment != null) {
-        experiment.validate();
-      }
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -10357,15 +4303,15 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    private static class createExperiment_argsStandardSchemeFactory implements SchemeFactory {
-      public createExperiment_argsStandardScheme getScheme() {
-        return new createExperiment_argsStandardScheme();
+    private static class getExperiment_argsStandardSchemeFactory implements SchemeFactory {
+      public getExperiment_argsStandardScheme getScheme() {
+        return new getExperiment_argsStandardScheme();
       }
     }
 
-    private static class createExperiment_argsStandardScheme extends StandardScheme<createExperiment_args> {
+    private static class getExperiment_argsStandardScheme extends StandardScheme<getExperiment_args> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, createExperiment_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, getExperiment_args struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -10375,11 +4321,10 @@ import org.slf4j.LoggerFactory;
             break;
           }
           switch (schemeField.id) {
-            case 1: // EXPERIMENT
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.experiment = new org.apache.airavata.model.workspace.experiment.Experiment();
-                struct.experiment.read(iprot);
-                struct.setExperimentIsSet(true);
+            case 1: // AIRAVATA_EXPERIMENT_ID
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
+                struct.airavataExperimentId = iprot.readString();
+                struct.setAiravataExperimentIdIsSet(true);
               } else { 
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
               }
@@ -10395,13 +4340,13 @@ import org.slf4j.LoggerFactory;
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, createExperiment_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, getExperiment_args struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        if (struct.experiment != null) {
-          oprot.writeFieldBegin(EXPERIMENT_FIELD_DESC);
-          struct.experiment.write(oprot);
+        if (struct.airavataExperimentId != null) {
+          oprot.writeFieldBegin(AIRAVATA_EXPERIMENT_ID_FIELD_DESC);
+          oprot.writeString(struct.airavataExperimentId);
           oprot.writeFieldEnd();
         }
         oprot.writeFieldStop();
@@ -10410,47 +4355,48 @@ import org.slf4j.LoggerFactory;
 
     }
 
-    private static class createExperiment_argsTupleSchemeFactory implements SchemeFactory {
-      public createExperiment_argsTupleScheme getScheme() {
-        return new createExperiment_argsTupleScheme();
+    private static class getExperiment_argsTupleSchemeFactory implements SchemeFactory {
+      public getExperiment_argsTupleScheme getScheme() {
+        return new getExperiment_argsTupleScheme();
       }
     }
 
-    private static class createExperiment_argsTupleScheme extends TupleScheme<createExperiment_args> {
+    private static class getExperiment_argsTupleScheme extends TupleScheme<getExperiment_args> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, createExperiment_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, getExperiment_args struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
-        struct.experiment.write(oprot);
+        oprot.writeString(struct.airavataExperimentId);
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, createExperiment_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, getExperiment_args struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
-        struct.experiment = new org.apache.airavata.model.workspace.experiment.Experiment();
-        struct.experiment.read(iprot);
-        struct.setExperimentIsSet(true);
+        struct.airavataExperimentId = iprot.readString();
+        struct.setAiravataExperimentIdIsSet(true);
       }
     }
 
   }
 
-  public static class createExperiment_result implements org.apache.thrift.TBase<createExperiment_result, createExperiment_result._Fields>, java.io.Serializable, Cloneable, Comparable<createExperiment_result>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createExperiment_result");
+  public static class getExperiment_result implements org.apache.thrift.TBase<getExperiment_result, getExperiment_result._Fields>, java.io.Serializable, Cloneable, Comparable<getExperiment_result>   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExperiment_result");
 
-    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
+    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
     private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
-    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)2);
-    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);
+    private static final org.apache.thrift.protocol.TField ENF_FIELD_DESC = new org.apache.thrift.protocol.TField("enf", org.apache.thrift.protocol.TType.STRUCT, (short)2);
+    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)3);
+    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)4);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new createExperiment_resultStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new createExperiment_resultTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new getExperiment_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new getExperiment_resultTupleSchemeFactory());
     }
 
-    public String success; // required
+    public org.apache.airavata.model.workspace.experiment.Experiment success; // required
     public org.apache.airavata.api.error.InvalidRequestException ire; // required
+    public org.apache.airavata.api.error.ExperimentNotFoundException enf; // required
     public org.apache.airavata.api.error.AiravataClientException ace; // required
     public org.apache.airavata.api.error.AiravataSystemException ase; // required
 
@@ -10458,8 +4404,9 @@ import org.slf4j.LoggerFactory;
     @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
       SUCCESS((short)0, "success"),
       IRE((short)1, "ire"),
-      ACE((short)2, "ace"),
-      ASE((short)3, "ase");
+      ENF((short)2, "enf"),
+      ACE((short)3, "ace"),
+      ASE((short)4, "ase");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -10478,9 +4425,11 @@ import org.slf4j.LoggerFactory;
             return SUCCESS;
           case 1: // IRE
             return IRE;
-          case 2: // ACE
+          case 2: // ENF
+            return ENF;
+          case 3: // ACE
             return ACE;
-          case 3: // ASE
+          case 4: // ASE
             return ASE;
           default:
             return null;
@@ -10526,29 +4475,33 @@ import org.slf4j.LoggerFactory;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
+          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.Experiment.class)));
       tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
+      tmpMap.put(_Fields.ENF, new org.apache.thrift.meta_data.FieldMetaData("enf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
       tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
       tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createExperiment_result.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExperiment_result.class, metaDataMap);
     }
 
-    public createExperiment_result() {
+    public getExperiment_result() {
     }
 
-    public createExperiment_result(
-      String success,
+    public getExperiment_result(
+      org.apache.airavata.model.workspace.experiment.Experiment success,
       org.apache.airavata.api.error.InvalidRequestException ire,
+      org.apache.airavata.api.error.ExperimentNotFoundException enf,
       org.apache.airavata.api.error.AiravataClientException ace,
       org.apache.airavata.api.error.AiravataSystemException ase)
     {
       this();
       this.success = success;
       this.ire = ire;
+      this.enf = enf;
       this.ace = ace;
       this.ase = ase;
     }
@@ -10556,13 +4509,16 @@ import org.slf4j.LoggerFactory;
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public createExperiment_result(createExperiment_result other) {
+    public getExperiment_result(getExperiment_result other) {
       if (other.isSetSuccess()) {
-        this.success = other.success;
+        this.success = new org.apache.airavata.model.workspace.experiment.Experiment(other.success);
       }
       if (other.isSetIre()) {
         this.ire = new org.apache.airavata.api.error.InvalidRequestException(other.ire);
       }
+      if (other.isSetEnf()) {
+        this.enf = new org.apache.airavata.api.error.ExperimentNotFoundException(other.enf);
+      }
       if (other.isSetAce()) {
         this.ace = new org.apache.airavata.api.error.AiravataClientException(other.ace);
       }
@@ -10571,23 +4527,24 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    public createExperiment_result deepCopy() {
-      return new createExperiment_result(this);
+    public getExperiment_result deepCopy() {
+      return new getExperiment_result(this);
     }
 
     @Override
     public void clear() {
       this.success = null;
       this.ire = null;
+      this.enf = null;
       this.ace = null;
       this.ase = null;
     }
 
-    public String getSuccess() {
+    public org.apache.airavata.model.workspace.experiment.Experiment getSuccess() {
       return this.success;
     }
 
-    public createExperiment_result setSuccess(String success) {
+    public getExperiment_result setSuccess(org.apache.airavata.model.workspace.experiment.Experiment success) {
       this.success = success;
       return this;
     }
@@ -10611,7 +4568,7 @@ import org.slf4j.LoggerFactory;
       return this.ire;
     }
 
-    public createExperiment_result setIre(org.apache.airavata.api.error.InvalidRequestException ire) {
+    public getExperiment_result setIre(org.apache.airavata.api.error.InvalidRequestException ire) {
       this.ire = ire;
       return this;
     }
@@ -10631,11 +4588,35 @@ import org.slf4j.LoggerFactory;
       }
     }
 
+    public org.apache.airavata.api.error.ExperimentNotFoundException getEnf() {
+      return this.enf;
+    }
+
+    public getExperiment_result setEnf(org.apache.airavata.api.error.ExperimentNotFoundException enf) {
+      this.enf = enf;
+      return this;
+    }
+
+    public void unsetEnf() {
+      this.enf = null;
+    }
+
+    /** Returns true if field enf is set (has been assigned a value) and false otherwise */
+    public boolean isSetEnf() {
+      return this.enf != null;
+    }
+
+    public void setEnfIsSet(boolean value) {
+      if (!value) {
+        this.enf = null;
+      }
+    }
+
     public org.apache.airavata.api.error.AiravataClientException getAce() {
       return this.ace;
     }
 
-    public createExperiment_result setAce(org.apache.airavata.api.error.AiravataClientException ace) {
+    public getExperiment_result setAce(org.apache.airavata.api.error.AiravataClientException ace) {
       this.ace = ace;
       return this;
     }
@@ -10659,7 +4640,7 @@ import org.slf4j.LoggerFactory;
       return this.ase;
     }
 
-    public createExperiment_result setAse(org.apache.airavata.api.error.AiravataSystemException ase) {
+    public getExperiment_result setAse(org.apache.airavata.api.error.AiravataSystemException ase) {
       this.ase = ase;
       return this;
     }
@@ -10685,7 +4666,7 @@ import org.slf4j.LoggerFactory;
         if (value == null) {
           unsetSuccess();
         } else {
-          setSuccess((String)value);
+          setSuccess((org.apache.airavata.model.workspace.experiment.Experiment)value);
         }
         break;
 
@@ -10697,6 +4678,14 @@ import org.slf4j.LoggerFactory;
         }
         break;
 
+      case ENF:
+        if (value == null) {
+          unsetEnf();
+        } else {
+          setEnf((org.apache.airavata.api.error.ExperimentNotFoundException)value);
+        }
+        break;
+
       case ACE:
         if (value == null) {
           unsetAce();
@@ -10724,6 +4713,9 @@ import org.slf4j.LoggerFactory;
       case IRE:
         return getIre();
 
+      case ENF:
+        return getEnf();
+
       case ACE:
         return getAce();
 
@@ -10745,6 +4737,8 @@ import org.slf4j.LoggerFactory;
         return isSetSuccess();
       case IRE:
         return isSetIre();
+      case ENF:
+        return isSetEnf();
       case ACE:
         return isSetAce();
       case ASE:
@@ -10757,12 +4751,12 @@ import org.slf4j.LoggerFactory;
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof createExperiment_result)
-        return this.equals((createExperiment_result)that);
+      if (that instanceof getExperiment_result)
+        return this.equals((getExperiment_result)that);
       return false;
     }
 
-    public boolean equals(createExperiment_result that) {
+    public boolean equals(getExperiment_result that) {
       if (that == null)
         return false;
 
@@ -10784,6 +4778,15 @@ import org.slf4j.LoggerFactory;
           return false;
       }
 
+      boolean this_present_enf = true && this.isSetEnf();
+      boolean that_present_enf = true && that.isSetEnf();
+      if (this_present_enf || that_present_enf) {
+        if (!(this_present_enf && that_present_enf))
+          return false;
+        if (!this.enf.equals(that.enf))
+          return false;
+      }
+
       boolean this_present_ace = true && this.isSetAce();
       boolean that_present_ace = true && that.isSetAce();
       if (this_present_ace || that_present_ace) {
@@ -10811,7 +4814,7 @@ import org.slf4j.LoggerFactory;
     }
 
     @Override
-    public int compareTo(createExperiment_result other) {
+    public int compareTo(getExperiment_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
@@ -10838,6 +4841,16 @@ import org.slf4j.LoggerFactory;
           return lastComparison;
         }
       }
+      lastComparison = Boolean.valueOf(isSetEnf()).compareTo(other.isSetEnf());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetEnf()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enf, other.enf);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
       lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
       if (lastComparison != 0) {
         return lastComparison;
@@ -10875,7 +4888,7 @@ import org.slf4j.LoggerFactory;
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("createExperiment_result(");
+      StringBuilder sb = new StringBuilder("getExperiment_result(");
       boolean first = true;
 
       sb.append("success:");
@@ -10886,11 +4899,19 @@ import org.slf4j.LoggerFactory;
       }
       first = false;
       if (!first) sb.append(", ");
-      sb.append("ire:");
-      if (this.ire == null) {
+      sb.append("ire:");
+      if (this.ire == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.ire);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("enf:");
+      if (this.enf == null) {
         sb.append("null");
       } else {
-        sb.append(this.ire);
+        sb.append(this.enf);
       }
       first = false;
       if (!first) sb.append(", ");
@@ -10916,6 +4937,9 @@ import org.slf4j.LoggerFactory;
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
       // check for sub-struct validity
+      if (success != null) {
+        success.validate();
+      }
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -10934,15 +4958,15 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    private static class createExperiment_resultStandardSchemeFactory implements SchemeFactory {
-      public createExperiment_resultStandardScheme getScheme() {
-        return new createExperiment_resultStandardScheme();
+    private static class getExperiment_resultStandardSchemeFactory implements SchemeFactory {
+      public getExperiment_resultStandardScheme getScheme() {
+        return new getExperiment_resultStandardScheme();
       }
     }
 
-    private static class createExperiment_resultStandardScheme extends StandardScheme<createExperiment_result> {
+    private static class getExperiment_resultStandardScheme extends StandardScheme<getExperiment_result> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, createExperiment_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, getExperiment_result struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -10953,8 +4977,9 @@ import org.slf4j.LoggerFactory;
           }
           switch (schemeField.id) {
             case 0: // SUCCESS
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
-                struct.success = iprot.readString();
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.success = new org.apache.airavata.model.workspace.experiment.Experiment();
+                struct.success.read(iprot);
                 struct.setSuccessIsSet(true);
               } else { 
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
@@ -10969,7 +4994,16 @@ import org.slf4j.LoggerFactory;
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
               }
               break;
-            case 2: // ACE
+            case 2: // ENF
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.enf = new org.apache.airavata.api.error.ExperimentNotFoundException();
+                struct.enf.read(iprot);
+                struct.setEnfIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            case 3: // ACE
               if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                 struct.ace = new org.apache.airavata.api.error.AiravataClientException();
                 struct.ace.read(iprot);
@@ -10978,7 +5012,7 @@ import org.slf4j.LoggerFactory;
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
               }
               break;
-            case 3: // ASE
+            case 4: // ASE
               if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                 struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
                 struct.ase.read(iprot);
@@ -10998,13 +5032,13 @@ import org.slf4j.LoggerFactory;
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, createExperiment_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, getExperiment_result struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
         if (struct.success != null) {
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-          oprot.writeString(struct.success);
+          struct.success.write(oprot);
           oprot.writeFieldEnd();
         }
         if (struct.ire != null) {
@@ -11012,6 +5046,11 @@ import org.slf4j.LoggerFactory;
           struct.ire.write(oprot);
           oprot.writeFieldEnd();
         }
+        if (struct.enf != null) {
+          oprot.writeFieldBegin(ENF_FIELD_DESC);
+          struct.enf.write(oprot);
+          oprot.writeFieldEnd();
+        }
         if (struct.ace != null) {
           oprot.writeFieldBegin(ACE_FIELD_DESC);
           struct.ace.write(oprot);
@@ -11028,16 +5067,16 @@ import org.slf4j.LoggerFactory;
 
     }
 
-    private static class createExperiment_resultTupleSchemeFactory implements SchemeFactory {
-      public createExperiment_resultTupleScheme getScheme() {
-        return new createExperiment_resultTupleScheme();
+    private static class getExperiment_resultTupleSchemeFactory implements SchemeFactory {
+      public getExperiment_resultTupleScheme getScheme() {
+        return new getExperiment_resultTupleScheme();
       }
     }
 
-    private static class createExperiment_resultTupleScheme extends TupleScheme<createExperiment_result> {
+    private static class getExperiment_resultTupleScheme extends TupleScheme<getExperiment_result> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, createExperiment_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, getExperiment_result struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         BitSet optionals = new BitSet();
         if (struct.isSetSuccess()) {
@@ -11046,19 +5085,25 @@ import org.slf4j.LoggerFactory;
         if (struct.isSetIre()) {
           optionals.set(1);
         }
-        if (struct.isSetAce()) {
+        if (struct.isSetEnf()) {
           optionals.set(2);
         }
-        if (struct.isSetAse()) {
+        if (struct.isSetAce()) {
           optionals.set(3);
         }
-        oprot.writeBitSet(optionals, 4);
+        if (struct.isSetAse()) {
+          optionals.set(4);
+        }
+        oprot.writeBitSet(optionals, 5);
         if (struct.isSetSuccess()) {
-          oprot.writeString(struct.success);
+          struct.success.write(oprot);
         }
         if (struct.isSetIre()) {
           struct.ire.write(oprot);
         }
+        if (struct.isSetEnf()) {
+          struct.enf.write(oprot);
+        }
         if (struct.isSetAce()) {
           struct.ace.write(oprot);
         }
@@ -11068,11 +5113,12 @@ import org.slf4j.LoggerFactory;
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, createExperiment_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, getExperiment_result struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
-        BitSet incoming = iprot.readBitSet(4);
+        BitSet incoming = iprot.readBitSet(5);
         if (incoming.get(0)) {
-          struct.success = iprot.readString();
+          struct.success = new org.apache.airavata.model.workspace.experiment.Experiment();
+          struct.success.read(iprot);
           struct.setSuccessIsSet(true);
         }
         if (incoming.get(1)) {
@@ -11081,11 +5127,16 @@ import org.slf4j.LoggerFactory;
           struct.setIreIsSet(true);
         }
         if (incoming.get(2)) {
+          struct.enf = new org.apache.airavata.api.error.ExperimentNotFoundException();
+          struct.enf.read(iprot);
+          struct.setEnfIsSet(true);
+        }
+        if (incoming.get(3)) {
           struct.ace = new org.apache.airavata.api.error.AiravataClientException();
           struct.ace.read(iprot);
           struct.setAceIsSet(true);
         }
-        if (incoming.get(3)) {
+        if (incoming.get(4)) {
           struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
           struct.ase.read(iprot);
           struct.setAseIsSet(true);
@@ -11095,22 +5146,25 @@ import org.slf4j.LoggerFactory;
 
   }
 
-  public static class getExperiment_args implements org.apache.thrift.TBase<getExperiment_args, getExperiment_args._Fields>, java.io.Serializable, Cloneable, Comparable<getExperiment_args>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExperiment_args");
+  public static class updateExperiment_args implements org.apache.thrift.TBase<updateExperiment_args, updateExperiment_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateExperiment_args>   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateExperiment_args");
 
     private static final org.apache.thrift.protocol.TField AIRAVATA_EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataExperimentId", org.apache.thrift.protocol.TType.STRING, (short)1);
+    private static final org.apache.thrift.protocol.TField EXPERIMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("experiment", org.apache.thrift.protocol.TType.STRUCT, (short)2);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new getExperiment_argsStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new getExperiment_argsTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new updateExperiment_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new updateExperiment_argsTupleSchemeFactory());
     }
 
     public String airavataExperimentId; // required
+    public org.apache.airavata.model.workspace.experiment.Experiment experiment; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      AIRAVATA_EXPERIMENT_ID((short)1, "airavataExperimentId");
+      AIRAVATA_EXPERIMENT_ID((short)1, "airavataExperimentId"),
+      EXPERIMENT((short)2, "experiment");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -11127,6 +5181,8 @@ import org.slf4j.LoggerFactory;
         switch(fieldId) {
           case 1: // AIRAVATA_EXPERIMENT_ID
             return AIRAVATA_EXPERIMENT_ID;
+          case 2: // EXPERIMENT
+            return EXPERIMENT;
           default:
             return null;
         }
@@ -11172,43 +5228,51 @@ import org.slf4j.LoggerFactory;
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.AIRAVATA_EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("airavataExperimentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
+      tmpMap.put(_Fields.EXPERIMENT, new org.apache.thrift.meta_data.FieldMetaData("experiment", org.apache.thrift.TFieldRequirementType.REQUIRED, 
+          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.Experiment.class)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExperiment_args.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateExperiment_args.class, metaDataMap);
     }
 
-    public getExperiment_args() {
+    public updateExperiment_args() {
     }
 
-    public getExperiment_args(
-      String airavataExperimentId)
+    public updateExperiment_args(
+      String airavataExperimentId,
+      org.apache.airavata.model.workspace.experiment.Experiment experiment)
     {
       this();
       this.airavataExperimentId = airavataExperimentId;
+      this.experiment = experiment;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public getExperiment_args(getExperiment_args other) {
+    public updateExperiment_args(updateExperiment_args other) {
       if (other.isSetAiravataExperimentId()) {
         this.airavataExperimentId = other.airavataExperimentId;
       }
+      if (other.isSetExperiment()) {
+        this.experiment = new org.apache.airavata.model.workspace.experiment.Experiment(other.experiment);
+      }
     }
 
-    public getExperiment_args deepCopy() {
-      return new getExperiment_args(this);
+    public updateExperiment_args deepCopy() {
+      return new updateExperiment_args(this);
     }
 
     @Override
     public void clear() {
       this.airavataExperimentId = null;
+      this.experiment = null;
     }
 
     public String getAiravataExperimentId() {
       return this.airavataExperimentId;
     }
 
-    public getExperiment_args setAiravataExperimentId(String airavataExperimentId) {
+    public updateExperiment_args setAiravataExperimentId(String airavataExperimentId) {
       this.airavataExperimentId = airavataExperimentId;
       return this;
     }
@@ -11228,6 +5292,30 @@ import org.slf4j.LoggerFactory;
       }
     }
 
+    public org.apache.airavata.model.workspace.experiment.Experiment getExperiment() {
+      return this.experiment;
+    }
+
+    public updateExperiment_args setExperiment(org.apache.airavata.model.workspace.experiment.Experiment experiment) {
+      this.experiment = experiment;
+      return this;
+    }
+
+    public void unsetExperiment() {
+      this.experiment = null;
+    }
+
+    /** Returns true if field experiment is set (has been assigned a value) and false otherwise */
+    public boolean isSetExperiment() {
+      return this.experiment != null;
+    }
+
+    public void setExperimentIsSet(boolean value) {
+      if (!value) {
+        this.experiment = null;
+      }
+    }
+
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
       case AIRAVATA_EXPERIMENT_ID:
@@ -11238,6 +5326,14 @@ import org.slf4j.LoggerFactory;
         }
         break;
 
+      case EXPERIMENT:
+        if (value == null) {
+          unsetExperiment();
+        } else {
+          setExperiment((org.apache.airavata.model.workspace.experiment.Experiment)value);
+        }
+        break;
+
       }
     }
 
@@ -11246,6 +5342,9 @@ import org.slf4j.LoggerFactory;
       case AIRAVATA_EXPERIMENT_ID:
         return getAiravataExperimentId();
 
+      case EXPERIMENT:
+        return getExperiment();
+
       }
       throw new IllegalStateException();
     }
@@ -11259,6 +5358,8 @@ import org.slf4j.LoggerFactory;
       switch (field) {
       case AIRAVATA_EXPERIMENT_ID:
         return isSetAiravataExperimentId();
+      case EXPERIMENT:
+        return isSetExperiment();
       }
       throw new IllegalStateException();
     }
@@ -11267,12 +5368,12 @@ import org.slf4j.LoggerFactory;
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof getExperiment_args)
-        return this.equals((getExperiment_args)that);
+      if (that instanceof updateExperiment_args)
+        return this.equals((updateExperiment_args)that);
       return false;
     }
 
-    public boolean equals(getExperiment_args that) {
+    public boolean equals(updateExperiment_args that) {
       if (that == null)
         return false;
 
@@ -11285,6 +5386,15 @@ import org.slf4j.LoggerFactory;
           return false;
       }
 
+      boolean this_present_experiment = true && this.isSetExperiment();
+      boolean that_present_experiment = true && that.isSetExperiment();
+      if (this_present_experiment || that_present_experiment) {
+        if (!(this_present_experiment && that_present_experiment))
+          return false;
+        if (!this.experiment.equals(that.experiment))
+          return false;
+      }
+
       return true;
     }
 
@@ -11294,7 +5404,7 @@ import org.slf4j.LoggerFactory;
     }
 
     @Override
-    public int compareTo(getExperiment_args other) {
+    public int compareTo(updateExperiment_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
@@ -11311,6 +5421,16 @@ import org.slf4j.LoggerFactory;
           return lastComparison;
         }
       }
+      lastComparison = Boolean.valueOf(isSetExperiment()).compareTo(other.isSetExperiment());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetExperiment()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experiment, other.experiment);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
       return 0;
     }
 
@@ -11328,7 +5448,7 @@ import org.slf4j.LoggerFactory;
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("getExperiment_args(");
+      StringBuilder sb = new StringBuilder("updateExperiment_args(");
       boolean first = true;
 
       sb.append("airavataExperimentId:");
@@ -11338,6 +5458,14 @@ import org.slf4j.LoggerFactory;
         sb.append(this.airavataExperimentId);
       }
       first = false;
+      if (!first) sb.append(", ");
+      sb.append("experiment:");
+      if (this.experiment == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.experiment);
+      }
+      first = false;
       sb.append(")");
       return sb.toString();
     }
@@ -11347,7 +5475,13 @@ import org.slf4j.LoggerFactory;
       if (airavataExperimentId == null) {
         throw new org.apache.thrift.protocol.TProtocolException("Required field 'airavataExperimentId' was not present! Struct: " + toString());
       }
+      if (experiment == null) {
+        throw new org.apache.thrift.protocol.TProtocolException("Required field 'experiment' was not present! Struct: " + toString());
+      }
       // check for sub-struct validity
+      if (experiment != null) {
+        experiment.validate();
+      }
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -11366,15 +5500,15 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    private static class getExperiment_argsStandardSchemeFactory implements SchemeFactory {
-      public getExperiment_argsStandardScheme getScheme() {
-        return new getExperiment_argsStandardScheme();
+    private static class updateExperiment_argsStandardSchemeFactory implements SchemeFactory {
+      public updateExperiment_argsStandardScheme getScheme() {
+        return new updateExperiment_argsStandardScheme();
       }
     }
 
-    private static class getExperiment_argsStandardScheme extends StandardScheme<getExperiment_args> {
+    private static class updateExperiment_argsStandardScheme extends StandardScheme<updateExperiment_args> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, getExperiment_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, updateExperiment_args struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -11392,6 +5526,15 @@ import org.slf4j.LoggerFactory;
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
               }
               break;
+            case 2: // EXPERIMENT
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.experiment = new org.apache.airavata.model.workspace.experiment.Experiment();
+                struct.experiment.read(iprot);
+                struct.setExperimentIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
             default:
               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
           }
@@ -11403,7 +5546,7 @@ import org.slf4j.LoggerFactory;
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, getExperiment_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, updateExperiment_args struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
@@ -11412,40 +5555,48 @@ import org.slf4j.LoggerFactory;
           oprot.writeString(struct.airavataExperimentId);
           oprot.writeFieldEnd();
         }
+        if (struct.experiment != null) {
+          oprot.writeFieldBegin(EXPERIMENT_FIELD_DESC);
+          struct.experiment.write(oprot);
+          oprot.writeFieldEnd();
+        }
         oprot.writeFieldStop();
         oprot.writeStructEnd();
       }
 
     }
 
-    private static class getExperiment_argsTupleSchemeFactory implements SchemeFactory {
-      public getExperiment_argsTupleScheme getScheme() {
-        return new getExperiment_argsTupleScheme();
+    private static class updateExperiment_argsTupleSchemeFactory implements SchemeFactory {
+      public updateExperiment_argsTupleScheme getScheme() {
+        return new updateExperiment_argsTupleScheme();
       }
     }
 
-    private static class getExperiment_argsTupleScheme extends TupleScheme<getExperiment_args> {
+    private static class updateExperiment_argsTupleScheme extends TupleScheme<updateExperiment_args> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, getExperiment_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, updateExperiment_args struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         oprot.writeString(struct.airavataExperimentId);
+        struct.experiment.write(oprot);
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, getExperiment_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, updateExperiment_args struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
         struct.airavataExperimentId = iprot.readString();
         struct.setAiravataExperimentIdIsSet(true);
+        struct.experiment = new org.apache.airavata.model.workspace.experiment.Experiment();
+        struct.experiment.read(iprot);
+        struct.setExperimentIsSet(true);
       }
     }
 
   }
 
-  public static class getExperiment_result implements org.apache.thrift.TBase<getExperiment_result, getExperiment_result._Fields>, java.io.Serializable, Cloneable, Comparable<getExperiment_result>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExperiment_result");
+  public static class updateExperiment_result implements org.apache.thrift.TBase<updateExperiment_result, updateExperiment_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateExperiment_result>   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateExperiment_result");
 
-    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
     private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
     private static final org.apache.thrift.protocol.TField ENF_FIELD_DESC = new org.apache.thrift.protocol.TField("enf", org.apache.thrift.protocol.TType.STRUCT, (short)2);
     private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)3);
@@ -11453,11 +5604,10 @@ import org.slf4j.LoggerFactory;
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new getExperiment_resultStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new getExperiment_resultTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new updateExperiment_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new updateExperiment_resultTupleSchemeFactory());
     }
 
-    public org.apache.airavata.model.workspace.experiment.Experiment success; // required
     public org.apache.airavata.api.error.InvalidRequestException ire; // required
     public org.apache.airavata.api.error.ExperimentNotFoundException enf; // required
     public org.apache.airavata.api.error.AiravataClientException ace; // required
@@ -11465,7 +5615,6 @@ import org.slf4j.LoggerFactory;
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      SUCCESS((short)0, "success"),
       IRE((short)1, "ire"),
       ENF((short)2, "enf"),
       ACE((short)3, "ace"),
@@ -11484,8 +5633,6 @@ import org.slf4j.LoggerFactory;
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
-          case 0: // SUCCESS
-            return SUCCESS;
           case 1: // IRE
             return IRE;
           case 2: // ENF
@@ -11537,8 +5684,6 @@ import org.slf4j.LoggerFactory;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.Experiment.class)));
       tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
       tmpMap.put(_Fields.ENF, new org.apache.thrift.meta_data.FieldMetaData("enf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
@@ -11548,21 +5693,19 @@ import org.slf4j.LoggerFactory;
       tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExperiment_result.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateExperiment_result.class, metaDataMap);
     }
 
-    public getExperiment_result() {
+    public updateExperiment_result() {
     }
 
-    public getExperiment_result(
-      org.apache.airavata.model.workspace.experiment.Experiment success,
+    public updateExperiment_result(
       org.apache.airavata.api.error.InvalidRequestException ire,
       org.apache.airavata.api.error.ExperimentNotFoundException enf,
       org.apache.airavata.api.error.AiravataClientException ace,
       org.apache.airavata.api.error.AiravataSystemException ase)
     {
       this();
-      this.success = success;
       this.ire = ire;
       this.enf = enf;
       this.ace = ace;
@@ -11572,10 +5715,7 @@ import org.slf4j.LoggerFactory;
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public getExperiment_result(getExperiment_result other) {
-      if (other.isSetSuccess()) {
-        this.success = new org.apache.airavata.model.workspace.experiment.Experiment(other.success);
-      }
+    public updateExperiment_result(updateExperiment_result other) {
       if (other.isSetIre()) {
         this.ire = new org.apache.airavata.api.error.InvalidRequestException(other.ire);
       }
@@ -11590,48 +5730,23 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    public getExperiment_result deepCopy() {
-      return new getExperiment_result(this);
+    public updateExperiment_result deepCopy() {
+      return new updateExperiment_result(this);
     }
 
     @Override
     public void clear() {
-      this.success = null;
       this.ire = null;
       this.enf = null;
       this.ace = null;
       this.ase = null;
     }
 
-    public org.apache.airavata.model.workspace.experiment.Experiment getSuccess() {
-      return this.success;
-    }
-
-    public getExperiment_result setSuccess(org.apache.airavata.model.workspace.experiment.Experiment success) {
-      this.success = success;
-      return this;
-    }
-
-    public void unsetSuccess() {
-      this.success = null;
-    }
-
-    /** Returns true if field success is set (has been assigned a value) and false otherwise */
-    public boolean isSetSuccess() {
-      return this.success != null;
-    }
-
-    public void setSuccessIsSet(boolean value) {
-      if (!value) {
-        this.success = null;
-      }
-    }
-
     public org.apache.airavata.api.error.InvalidRequestException getIre() {
       return this.ire;
     }
 
-    public getExperiment_result setIre(org.apache.airavata.api.error.InvalidRequestException ire) {
+    public updateExperiment_result setIre(org.apache.airavata.api.error.InvalidRequestException ire) {
       this.ire = ire;
       return this;
     }
@@ -11655,7 +5770,7 @@ import org.slf4j.LoggerFactory;
       return this.enf;
     }
 
-    public getExperiment_result setEnf(org.apache.airavata.api.error.ExperimentNotFoundException enf) {
+    public updateExperiment_result setEnf(org.apache.airavata.api.error.ExperimentNotFoundException enf) {
       this.enf = enf;
       return this;
     }
@@ -11679,7 +5794,7 @@ import org.slf4j.LoggerFactory;
       return this.ace;
     }
 
-    public getExperiment_result setAce(org.apache.airavata.api.error.AiravataClientException ace) {
+    public updateExperiment_result setAce(org.apache.airavata.api.error.AiravataClientException ace) {
       this.ace = ace;
       return this;
     }
@@ -11703,7 +5818,7 @@ import org.slf4j.LoggerFactory;
       return this.ase;
     }
 
-    public getExperiment_result setAse(org.apache.airavata.api.error.AiravataSystemException ase) {
+    public updateExperiment_result setAse(org.apache.airavata.api.error.AiravataSystemException ase) {
       this.ase = ase;
       return this;
     }
@@ -11725,14 +5840,6 @@ import org.slf4j.LoggerFactory;
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
-      case SUCCESS:
-        if (value == null) {
-          unsetSuccess();
-        } else {
-          setSuccess((org.apache.airavata.model.workspace.experiment.Experiment)value);
-        }
-        break;
-
       case IRE:
         if (value == null) {
           unsetIre();
@@ -11770,9 +5877,6 @@ import org.slf4j.LoggerFactory;
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
-      case SUCCESS:
-        return getSuccess();
-
       case IRE:
         return getIre();
 
@@ -11796,8 +5900,6 @@ import org.slf4j.LoggerFactory;
       }
 
       switch (field) {
-      case SUCCESS:
-        return isSetSuccess();
       case IRE:
         return isSetIre();
       case ENF:
@@ -11814,24 +5916,15 @@ import org.slf4j.LoggerFactory;
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof getExperiment_result)
-        return this.equals((getExperiment_result)that);
+      if (that instanceof updateExperiment_result)
+        return this.equals((updateExperiment_result)that);
       return false;
     }
 
-    public boolean equals(getExperiment_result that) {
+    public boolean equals(updateExperiment_result that) {
       if (that == null)
         return false;
 
-      boolean this_present_success = true && this.isSetSuccess();
-      boolean that_present_success = true && that.isSetSuccess();
-      if (this_present_success || that_present_success) {
-        if (!(this_present_success && that_present_success))
-          return false;
-        if (!this.success.equals(that.success))
-          return false;
-      }
-
       boolean this_present_ire = true && this.isSetIre();
       boolean that_present_ire = true && that.isSetIre();
       if (this_present_ire || that_present_ire) {
@@ -11877,23 +5970,13 @@ import org.slf4j.LoggerFactory;
     }
 
     @Override
-    public int compareTo(getExperiment_result other) {
+    public int compareTo(updateExperiment_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
       lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
       if (lastComparison != 0) {
         return lastComparison;
@@ -11951,17 +6034,9 @@ import org.slf4j.LoggerFactory;
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("getExperiment_result(");
+      StringBuilder sb = new StringBuilder("updateExperiment_result(");
       boolean first = true;
 
-      sb.append("success:");
-      if (this.success == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.success);
-      }
-      first = false;
-      if (!first) sb.append(", ");
       sb.append("ire:");
       if (this.ire == null) {
         sb.append("null");
@@ -12000,9 +6075,6 @@ import org.slf4j.LoggerFactory;
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
       // check for sub-struct validity
-      if (success != null) {
-        success.validate();
-      }
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -12021,15 +6093,15 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    private static class getExperiment_resultStandardSchemeFactory implements SchemeFactory {
-      public getExperiment_resultStandardScheme getScheme() {
-        return new getExperiment_resultStandardScheme();
+    private static class updateExperiment_resultStandardSchemeFactory implements SchemeFactory {
+      public updateExperiment_resultStandardScheme getScheme() {
+        return new updateExperiment_resultStandardScheme();
       }
     }
 
-    private static class getExperiment_resultStandardScheme extends StandardScheme<getExperiment_result> {
+    private static class updateExperiment_resultStandardScheme extends StandardScheme<updateExperiment_result> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, getExperiment_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, updateExperiment_result struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -12039,15 +6111,6 @@ import org.slf4j.LoggerFactory;
             break;
           }
           switch (schemeField.id) {
-            case 0: // SUCCESS
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.success = new org.apache.airavata.model.workspace.experiment.Experiment();
-                struct.success.read(iprot);
-                struct.setSuccessIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
             case 1: // IRE
               if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                 struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
@@ -12095,15 +6158,10 @@ import org.slf4j.LoggerFactory;
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, getExperiment_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, updateExperiment_result struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        if (struct.success != null) {
-          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-          struct.success.write(oprot);
-          oprot.writeFieldEnd();
-        }
         if (struct.ire != null) {
           oprot.writeFieldBegin(IRE_FIELD_DESC);
           struct.ire.write(oprot);
@@ -12130,37 +6188,31 @@ import org.slf4j.LoggerFactory;
 
     }
 
-    private static class getExperiment_resultTupleSchemeFactory implements SchemeFactory {
-      public getExperiment_resultTupleScheme getScheme() {
-        return new getExperiment_resultTupleScheme();
+    private static class updateExperiment_resultTupleSchemeFactory implements SchemeFactory {
+      public updateExperiment_resultTupleScheme getScheme() {
+        return new updateExperiment_resultTupleScheme();
       }
     }
 
-    private static class getExperiment_resultTupleScheme extends TupleScheme<getExperiment_result> {
+    private static class updateExperiment_resultTupleScheme extends TupleScheme<updateExperiment_result> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, getExperiment_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, updateExperiment_result struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         BitSet optionals = new BitSet();
-        if (struct.isSetSuccess()) {
-          optionals.set(0);
-        }
         if (struct.isSetIre()) {
-          optionals.set(1);
+          optionals.set(0);
         }
         if (struct.isSetEnf()) {
-          optionals.set(2);
+          optionals.set(1);
         }
         if (struct.isSetAce()) {
-          optionals.set(3);
+          optionals.set(2);
         }
         if (struct.isSetAse()) {
-          optionals.set(4);
-        }
-        oprot.writeBitSet(optionals, 5);
-        if (struct.isSetSuccess()) {
-          struct.success.write(oprot);
+          optionals.set(3);
         }
+        oprot.writeBitSet(optionals, 4);
         if (struct.isSetIre()) {
           struct.ire.write(oprot);
         }
@@ -12176,30 +6228,25 @@ import org.slf4j.LoggerFactory;
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, getExperiment_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, updateExperiment_result struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
-        BitSet incoming = iprot.readBitSet(5);
+        BitSet incoming = iprot.readBitSet(4);
         if (incoming.get(0)) {
-          struct.success = new org.apache.airavata.model.workspace.experiment.Experiment();
-          struct.success.read(iprot);
-          struct.setSuccessIsSet(true);
-        }
-        if (incoming.get(1)) {
           struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
           struct.ire.read(iprot);
           struct.setIreIsSet(true);
         }
-        if (incoming.get(2)) {
+        if (incoming.get(1)) {
           struct.enf = new org.apache.airavata.api.error.ExperimentNotFoundException();
           struct.enf.read(iprot);
           struct.setEnfIsSet(true);
         }
-        if (incoming.get(3)) {
+        if (incoming.get(2)) {
           struct.ace = new org.apache.airavata.api.error.AiravataClientException();
           struct.ace.read(iprot);
           struct.setAceIsSet(true);
         }
-        if (incoming.get(4)) {
+        if (incoming.get(3)) {
           struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
           struct.ase.read(iprot);
           struct.setAseIsSet(true);
@@ -12209,25 +6256,25 @@ import org.slf4j.LoggerFactory;
 
   }
 
-  public static class updateExperiment_args implements org.apache.thrift.TBase<updateExperiment_args, updateExperiment_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateExperiment_args>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateExperiment_args");
+  public static class updateExperimentConfiguration_args implements org.apache.thrift.TBase<updateExperimentConfiguration_args, updateExperimentConfiguration_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateExperimentConfiguration_args>   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateExperimentConfiguration_args");
 
     private static final org.apache.thrift.protocol.TField AIRAVATA_EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataExperimentId", org.apache.thrift.protocol.TType.STRING, (short)1);
-    private static final org.apache.thrift.protocol.TField EXPERIMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("experiment", org.apache.thrift.protocol.TType.STRUCT, (short)2);
+    private static final org.apache.thrift.protocol.TField USER_CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("userConfiguration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new updateExperiment_argsStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new updateExperiment_argsTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new updateExperimentConfiguration_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new updateExperimentConfiguration_argsTupleSchemeFactory());
     }
 
     public String airavataExperimentId; // required
-    public org.apache.airavata.model.workspace.experiment.Experiment experiment; // required
+    public org.apache.airavata.model.workspace.experiment.UserConfigurationData userConfiguration; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
       AIRAVATA_EXPERIMENT_ID((short)1, "airavataExperimentId"),
-      EXPERIMENT((short)2, "experiment");
+      USER_CONFIGURATION((short)2, "userConfiguration");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -12244,8 +6291,8 @@ import org.slf4j.LoggerFactory;
         switch(fieldId) {
           case 1: // AIRAVATA_EXPERIMENT_ID
             return AIRAVATA_EXPERIMENT_ID;
-          case 2: // EXPERIMENT
-            return EXPERIMENT;
+          case 2: // USER_CONFIGURATION
+            return USER_CONFIGURATION;
           default:
             return null;
         }
@@ -12291,51 +6338,51 @@ import org.slf4j.LoggerFactory;
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.AIRAVATA_EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("airavataExperimentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
-      tmpMap.put(_Fields.EXPERIMENT, new org.apache.thrift.meta_data.FieldMetaData("experiment", org.apache.thrift.TFieldRequirementType.REQUIRED, 
-          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.Experiment.class)));
+      tmpMap.put(_Fields.USER_CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("userConfiguration", org.apache.thrift.TFieldRequirementType.REQUIRED, 
+          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.UserConfigurationData.class)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateExperiment_args.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateExperimentConfiguration_args.class, metaDataMap);
     }
 
-    public updateExperiment_args() {
+    public updateExperimentConfiguration_args() {
     }
 
-    public updateExperiment_args(
+    public updateExperimentConfiguration_args(
       String airavataExperimentId,
-      org.apache.airavata.model.workspace.experiment.Experiment experiment)
+      org.apache.airavata.model.workspace.experiment.UserConfigurationData userConfiguration)
     {
       this();
       this.airavataExperimentId = airavataExperimentId;
-      this.experiment = experiment;
+      this.userConfiguration = userConfiguration;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public updateExperiment_args(updateExperiment_args other) {
+    public updateExperimentConfiguration_args(updateExperimentConfiguration_args other) {
       if (other.isSetAiravataExperimentId()) {
         this.airavataExperimentId = other.airavataExperimentId;
       }
-      if (other.isSetExperiment()) {
-        this.experiment = new org.apache.airavata.model.workspace.experiment.Experiment(other.experiment);
+      if (other.isSetUserConfiguration()) {
+        this.userConfiguration = new org.apache.airavata.model.workspace.experiment.UserConfigurationData(other.userConfiguration);
       }
     }
 
-    public updateExperiment_args deepCopy() {
-      return new updateExperiment_args(this);
+    public updateExperimentConfiguration_args deepCopy() {
+      return new updateExperimentConfiguration_args(this);
     }
 
     @Override
     public void clear() {
       this.airavataExperimentId = null;
-      this.experiment = null;
+      this.userConfiguration = null;
     }
 
     public String getAiravataExperimentId() {
       return this.airavataExperimentId;
     }
 
-    public updateExperiment_args setAiravataExperimentId(String airavataExperimentId) {
+    public updateExperimentConfiguration_args setAiravataExperimentId(String airavataExperimentId) {
       this.airavataExperimentId = airavataExperimentId;
       return this;
     }
@@ -12355,27 +6402,27 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    public org.apache.airavata.model.workspace.experiment.Experiment getExperiment() {
-      return this.experiment;
+    public org.apache.airavata.model.workspace.experiment.UserConfigurationData getUserConfiguration() {
+      return this.userConfiguration;
     }
 
-    public updateExperiment_args setExperiment(org.apache.airavata.model.workspace.experiment.Experiment experiment) {
-      this.experiment = experiment;
+    public updateExperimentConfiguration_args setUserConfiguration(org.apache.airavata.model.workspace.experiment.UserConfigurationData userConfiguration) {
+      this.userConfiguration = userConfiguration;
       return this;
     }
 
-    public void unsetExperiment() {
-      this.experiment = null;
+    public void unsetUserConfiguration() {
+      this.userConfiguration = null;
     }
 
-    /** Returns true if field experiment is set (has been assigned a value) and false otherwise */
-    public boolean isSetExperiment() {
-      return this.experiment != null;
+    /** Returns true if field userConfiguration is set (has been assigned a value) and false otherwise */
+    public boolean isSetUserConfiguration() {
+      return this.userConfiguration != null;
     }
 
-    public void setExperimentIsSet(boolean value) {
+    public void setUserConfigurationIsSet(boolean value) {
       if (!value) {
-        this.experiment = null;
+        this.userConfiguration = null;
       }
     }
 
@@ -12389,11 +6436,11 @@ import org.slf4j.LoggerFactory;
         }
         break;
 
-      case EXPERIMENT:
+      case USER_CONFIGURATION:
         if (value == null) {
-          unsetExperiment();
+          unsetUserConfiguration();
         } else {
-          setExperiment((org.apache.airavata.model.workspace.experiment.Experiment)value);
+          setUserConfiguration((org.apache.airavata.model.workspace.experiment.UserConfigurationData)value);
         }
         break;
 
@@ -12405,8 +6452,8 @@ import org.slf4j.LoggerFactory;
       case AIRAVATA_EXPERIMENT_ID:
         return getAiravataExperimentId();
 
-      case EXPERIMENT:
-        return getExperiment();
+      case USER_CONFIGURATION:
+        return getUserConfiguration();
 
       }
       throw new IllegalStateException();
@@ -12420,9 +6467,9 @@ import org.slf4j.LoggerFactory;
 
       switch (field) {
       case AIRAVATA_EXPERIMENT_ID:
-        return isSetAiravataExperimentId();
-      case EXPERIMENT:
-        return isSetExperiment();
+        return isSetAiravataExperimentId();
+      case USER_CONFIGURATION:
+        return isSetUserConfiguration();
       }
       throw new IllegalStateException();
     }
@@ -12431,12 +6478,12 @@ import org.slf4j.LoggerFactory;
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof updateExperiment_args)
-        return this.equals((updateExperiment_args)that);
+      if (that instanceof updateExperimentConfiguration_args)
+        return this.equals((updateExperimentConfiguration_args)that);
       return false;
     }
 
-    public boolean equals(updateExperiment_args that) {
+    public boolean equals(updateExperimentConfiguration_args that) {
       if (that == null)
         return false;
 
@@ -12449,12 +6496,12 @@ import org.slf4j.LoggerFactory;
           return false;
       }
 
-      boolean this_present_experiment = true && this.isSetExperiment();
-      boolean that_present_experiment = true && that.isSetExperiment();
-      if (this_present_experiment || that_present_experiment) {
-        if (!(this_present_experiment && that_present_experiment))
+      boolean this_present_userConfiguration = true && this.isSetUserConfiguration();
+      boolean that_present_userConfiguration = true && that.isSetUserConfiguration();
+      if (this_present_userConfiguration || that_present_userConfiguration) {
+        if (!(this_present_userConfiguration && that_present_userConfiguration))
           return false;
-        if (!this.experiment.equals(that.experiment))
+        if (!this.userConfiguration.equals(that.userConfiguration))
           return false;
       }
 
@@ -12467,7 +6514,7 @@ import org.slf4j.LoggerFactory;
     }
 
     @Override
-    public int compareTo(updateExperiment_args other) {
+    public int compareTo(updateExperimentConfiguration_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
@@ -12484,12 +6531,12 @@ import org.slf4j.LoggerFactory;
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetExperiment()).compareTo(other.isSetExperiment());
+      lastComparison = Boolean.valueOf(isSetUserConfiguration()).compareTo(other.isSetUserConfiguration());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      if (isSetExperiment()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experiment, other.experiment);
+      if (isSetUserConfiguration()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userConfiguration, other.userConfiguration);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -12511,7 +6558,7 @@ import org.slf4j.LoggerFactory;
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("updateExperiment_args(");
+      StringBuilder sb = new StringBuilder("updateExperimentConfiguration_args(");
       boolean first = true;
 
       sb.append("airavataExperimentId:");
@@ -12522,11 +6569,11 @@ import org.slf4j.LoggerFactory;
       }
       first = false;
       if (!first) sb.append(", ");
-      sb.append("experiment:");
-      if (this.experiment == null) {
+      sb.append("userConfiguration:");
+      if (this.userConfiguration == null) {
         sb.append("null");
       } else {
-        sb.append(this.experiment);
+        sb.append(this.userConfiguration);
       }
       first = false;
       sb.append(")");
@@ -12538,12 +6585,12 @@ import org.slf4j.LoggerFactory;
       if (airavataExperimentId == null) {
         throw new org.apache.thrift.protocol.TProtocolException("Required field 'airavataExperimentId' was not present! Struct: " + toString());
       }
-      if (experiment == null) {
-        throw new org.apache.thrift.protocol.TProtocolException("Required field 'experiment' was not present! Struct: " + toString());
+      if (userConfiguration == null) {
+        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userConfiguration' was not present! Struct: " + toString());
       }
       // check for sub-struct validity
-      if (experiment != null) {
-        experiment.validate();
+      if (userConfiguration != null) {
+        userConfiguration.validate();
       }
     }
 
@@ -12563,15 +6610,15 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    private static class updateExperiment_argsStandardSchemeFactory implements SchemeFactory {
-      public updateExperiment_argsStandardScheme getScheme() {
-        return new updateExperiment_argsStandardScheme();
+    private static class updateExperimentConfiguration_argsStandardSchemeFactory implements SchemeFactory {
+      public updateExperimentConfiguration_argsStandardScheme getScheme() {
+        return new updateExperimentConfiguration_argsStandardScheme();
       }
     }
 
-    private static class updateExperiment_argsStandardScheme extends StandardScheme<updateExperiment_args> {
+    private static class updateExperimentConfiguration_argsStandardScheme extends StandardScheme<updateExperimentConfiguration_args> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, updateExperiment_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, updateExperimentConfiguration_args struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -12589,11 +6636,11 @@ import org.slf4j.LoggerFactory;
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
               }
               break;
-            case 2: // EXPERIMENT
+            case 2: // USER_CONFIGURATION
               if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.experiment = new org.apache.airavata.model.workspace.experiment.Experiment();
-                struct.experiment.read(iprot);
-                struct.setExperimentIsSet(true);
+                struct.userConfiguration = new org.apache.airavata.model.workspace.experiment.UserConfigurationData();
+                struct.userConfiguration.read(iprot);
+                struct.setUserConfigurationIsSet(true);
               } else { 
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
               }
@@ -12609,7 +6656,7 @@ import org.slf4j.LoggerFactory;
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, updateExperiment_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, updateExperimentConfiguration_args struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
@@ -12618,9 +6665,9 @@ import org.slf4j.LoggerFactory;
           oprot.writeString(struct.airavataExperimentId);
           oprot.writeFieldEnd();
         }
-        if (struct.experiment != null) {
-          oprot.writeFieldBegin(EXPERIMENT_FIELD_DESC);
-          struct.experiment.write(oprot);
+        if (struct.userConfiguration != null) {
+          oprot.writeFieldBegin(USER_CONFIGURATION_FIELD_DESC);
+          struct.userConfiguration.write(oprot);
           oprot.writeFieldEnd();
         }
         oprot.writeFieldStop();
@@ -12629,59 +6676,48 @@ import org.slf4j.LoggerFactory;
 
     }
 
-    private static class updateExperiment_argsTupleSchemeFactory implements SchemeFactory {
-      public updateExperiment_argsTupleScheme getScheme() {
-        return new updateExperiment_argsTupleScheme();
+    private static class updateExperimentConfiguration_argsTupleSchemeFactory implements SchemeFactory {
+      public updateExperimentConfiguration_argsTupleScheme getScheme() {
+        return new updateExperimentConfiguration_argsTupleScheme();
       }
     }
 
-    private static class updateExperiment_argsTupleScheme extends TupleScheme<updateExperiment_args> {
+    private static class updateExperimentConfiguration_argsTupleScheme extends TupleScheme<updateExperimentConfiguration_args> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, updateExperiment_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, updateExperimentConfiguration_args struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         oprot.writeString(struct.airavataExperimentId);
-        struct.experiment.write(oprot);
+        struct.userConfiguration.write(oprot);
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, updateExperiment_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, updateExperimentConfiguration_args struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
         struct.airavataExperimentId = iprot.readString();
         struct.setAiravataExperimentIdIsSet(true);
-        struct.experiment = new org.apache.airavata.model.workspace.experiment.Experiment();
-        struct.experiment.read(iprot);
-        struct.setExperimentIsSet(true);
+        struct.userConfiguration = new org.apache.airavata.model.workspace.experiment.UserConfigurationData();
+        struct.userConfiguration.read(iprot);
+        struct.setUserConfigurationIsSet(true);
       }
     }
 
   }
 
-  public static class updateExperiment_result implements org.apache.thrift.TBase<updateExperiment_result, updateExperiment_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateExperiment_result>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateExperiment_result");
+  public static class updateExperimentConfiguration_result implements org.apache.thrift.TBase<updateExperimentConfiguration_result, updateExperimentConfiguration_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateExperimentConfiguration_result>   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateExperimentConfiguration_result");
 
-    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
-    private static final org.apache.thrift.protocol.TField ENF_FIELD_DESC = new org.apache.thrift.protocol.TField("enf", org.apache.thrift.protocol.TType.STRUCT, (short)2);
-    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)3);
-    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)4);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new updateExperiment_resultStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new updateExperiment_resultTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new updateExperimentConfiguration_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new updateExperimentConfiguration_resultTupleSchemeFactory());
     }
 
-    public org.apache.airavata.api.error.InvalidRequestException ire; // required
-    public org.apache.airavata.api.error.ExperimentNotFoundException enf; // required
-    public org.apache.airavata.api.error.AiravataClientException ace; // required
-    public org.apache.airavata.api.error.AiravataSystemException ase; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      IRE((short)1, "ire"),
-      ENF((short)2, "enf"),
-      ACE((short)3, "ace"),
-      ASE((short)4, "ase");
+;
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -12696,14 +6732,6 @@ import org.slf4j.LoggerFactory;
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
-          case 1: // IRE
-            return IRE;
-          case 2: // ENF
-            return ENF;
-          case 3: // ACE
-            return ACE;
-          case 4: // ASE
-            return ASE;
           default:
             return null;
         }
@@ -12738,220 +6766,41 @@ import org.slf4j.LoggerFactory;
         return _thriftId;
       }
 
-      public String getFieldName() {
-        return _fieldName;
-      }
-    }
-
-    // isset id assignments
-    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
-    static {
-      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
-      tmpMap.put(_Fields.ENF, new org.apache.thrift.meta_data.FieldMetaData("enf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
-      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
-      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
-      metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateExperiment_result.class, metaDataMap);
-    }
-
-    public updateExperiment_result() {
-    }
-
-    public updateExperiment_result(
-      org.apache.airavata.api.error.InvalidRequestException ire,
-      org.apache.airavata.api.error.ExperimentNotFoundException enf,
-      org.apache.airavata.api.error.AiravataClientException ace,
-      org.apache.airavata.api.error.AiravataSystemException ase)
-    {
-      this();
-      this.ire = ire;
-      this.enf = enf;
-      this.ace = ace;
-      this.ase = ase;
-    }
-
-    /**
-     * Performs a deep copy on <i>other</i>.
-     */
-    public updateExperiment_result(updateExperiment_result other) {
-      if (other.isSetIre()) {
-        this.ire = new org.apache.airavata.api.error.InvalidRequestException(other.ire);
-      }
-      if (other.isSetEnf()) {
-        this.enf = new org.apache.airavata.api.error.ExperimentNotFoundException(other.enf);
-      }
-      if (other.isSetAce()) {
-        this.ace = new org.apache.airavata.api.error.AiravataClientException(other.ace);
-      }
-      if (other.isSetAse()) {
-        this.ase = new org.apache.airavata.api.error.AiravataSystemException(other.ase);
-      }
-    }
-
-    public updateExperiment_result deepCopy() {
-      return new updateExperiment_result(this);
-    }
-
-    @Override
-    public void clear() {
-      this.ire = null;
-      this.enf = null;
-      this.ace = null;
-      this.ase = null;
-    }
-
-    public org.apache.airavata.api.error.InvalidRequestException getIre() {
-      return this.ire;
-    }
-
-    public updateExperiment_result setIre(org.apache.airavata.api.error.InvalidRequestException ire) {
-      this.ire = ire;
-      return this;
-    }
-
-    public void unsetIre() {
-      this.ire = null;
-    }
-
-    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
-    public boolean isSetIre() {
-      return this.ire != null;
-    }
-
-    public void setIreIsSet(boolean value) {
-      if (!value) {
-        this.ire = null;
-      }
-    }
-
-    public org.apache.airavata.api.error.ExperimentNotFoundException getEnf() {
-      return this.enf;
-    }
-
-    public updateExperiment_result setEnf(org.apache.airavata.api.error.ExperimentNotFoundException enf) {
-      this.enf = enf;
-      return this;
-    }
-
-    public void unsetEnf() {
-      this.enf = null;
-    }
-
-    /** Returns true if field enf is set (has been assigned a value) and false otherwise */
-    public boolean isSetEnf() {
-      return this.enf != null;
-    }
-
-    public void setEnfIsSet(boolean value) {
-      if (!value) {
-        this.enf = null;
-      }
-    }
-
-    public org.apache.airavata.api.error.AiravataClientException getAce() {
-      return this.ace;
-    }
-
-    public updateExperiment_result setAce(org.apache.airavata.api.error.AiravataClientException ace) {
-      this.ace = ace;
-      return this;
-    }
-
-    public void unsetAce() {
-      this.ace = null;
-    }
-
-    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
-    public boolean isSetAce() {
-      return this.ace != null;
-    }
-
-    public void setAceIsSet(boolean value) {
-      if (!value) {
-        this.ace = null;
-      }
-    }
-
-    public org.apache.airavata.api.error.AiravataSystemException getAse() {
-      return this.ase;
+      public String getFieldName() {
+        return _fieldName;
+      }
+    }
+    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+    static {
+      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      metaDataMap = Collections.unmodifiableMap(tmpMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateExperimentConfiguration_result.class, metaDataMap);
     }
 
-    public updateExperiment_result setAse(org.apache.airavata.api.error.AiravataSystemException ase) {
-      this.ase = ase;
-      return this;
+    public updateExperimentConfiguration_result() {
     }
 
-    public void unsetAse() {
-      this.ase = null;
+    /**
+     * Performs a deep copy on <i>other</i>.
+     */
+    public updateExperimentConfiguration_result(updateExperimentConfiguration_result other) {
     }
 
-    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
-    public boolean isSetAse() {
-      return this.ase != null;
+    public updateExperimentConfiguration_result deepCopy() {
+      return new updateExperimentConfiguration_result(this);
     }
 
-    public void setAseIsSet(boolean value) {
-      if (!value) {
-        this.ase = null;
-      }
+    @Override
+    public void clear() {
     }
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
-      case IRE:
-        if (value == null) {
-          unsetIre();
-        } else {
-          setIre((org.apache.airavata.api.error.InvalidRequestException)value);
-        }
-        break;
-
-      case ENF:
-        if (value == null) {
-          unsetEnf();
-        } else {
-          setEnf((org.apache.airavata.api.error.ExperimentNotFoundException)value);
-        }
-        break;
-
-      case ACE:
-        if (value == null) {
-          unsetAce();
-        } else {
-          setAce((org.apache.airavata.api.error.AiravataClientException)value);
-        }
-        break;
-
-      case ASE:
-        if (value == null) {
-          unsetAse();
-        } else {
-          setAse((org.apache.airavata.api.error.AiravataSystemException)value);
-        }
-        break;
-
       }
     }
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
-      case IRE:
-        return getIre();
-
-      case ENF:
-        return getEnf();
-
-      case ACE:
-        return getAce();
-
-      case ASE:
-        return getAse();
-
       }
       throw new IllegalStateException();
     }
@@ -12963,14 +6812,6 @@ import org.slf4j.LoggerFactory;
       }
 
       switch (field) {
-      case IRE:
-        return isSetIre();
-      case ENF:
-        return isSetEnf();
-      case ACE:
-        return isSetAce();
-      case ASE:
-        return isSetAse();
       }
       throw new IllegalStateException();
     }
@@ -12979,51 +6820,15 @@ import org.slf4j.LoggerFactory;
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof updateExperiment_result)
-        return this.equals((updateExperiment_result)that);
+      if (that instanceof updateExperimentConfiguration_result)
+        return this.equals((updateExperimentConfiguration_result)that);
       return false;
     }
 
-    public boolean equals(updateExperiment_result that) {
+    public boolean equals(updateExperimentConfiguration_result that) {
       if (that == null)
         return false;
 
-      boolean this_present_ire = true && this.isSetIre();
-      boolean that_present_ire = true && that.isSetIre();
-      if (this_present_ire || that_present_ire) {
-        if (!(this_present_ire && that_present_ire))
-          return false;
-        if (!this.ire.equals(that.ire))
-          return false;
-      }
-
-      boolean this_present_enf = true && this.isSetEnf();
-      boolean that_present_enf = true && that.isSetEnf();
-      if (this_present_enf || that_present_enf) {
-        if (!(this_present_enf && that_present_enf))
-          return false;
-        if (!this.enf.equals(that.enf))
-          return false;
-      }
-
-      boolean this_present_ace = true && this.isSetAce();
-      boolean that_present_ace = true && that.isSetAce();
-      if (this_present_ace || that_present_ace) {
-        if (!(this_present_ace && that_present_ace))
-          return false;
-        if (!this.ace.equals(that.ace))
-          return false;
-      }
-
-      boolean this_present_ase = true && this.isSetAse();
-      boolean that_present_ase = true && that.isSetAse();
-      if (this_present_ase || that_present_ase) {
-        if (!(this_present_ase && that_present_ase))
-          return false;
-        if (!this.ase.equals(that.ase))
-          return false;
-      }
-
       return true;
     }
 
@@ -13033,53 +6838,13 @@ import org.slf4j.LoggerFactory;
     }
 
     @Override
-    public int compareTo(updateExperiment_result other) {
+    public int compareTo(updateExperimentConfiguration_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
 
-      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetIre()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      lastComparison = Boolean.valueOf(isSetEnf()).compareTo(other.isSetEnf());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetEnf()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enf, other.enf);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetAce()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetAse()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
       return 0;
     }
 
@@ -13097,40 +6862,9 @@ import org.slf4j.LoggerFactory;
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("updateExperiment_result(");
+      StringBuilder sb = new StringBuilder("updateExperimentConfiguration_result(");
       boolean first = true;
 
-      sb.append("ire:");
-      if (this.ire == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.ire);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("enf:");
-      if (this.enf == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.enf);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("ace:");
-      if (this.ace == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.ace);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("ase:");
-      if (this.ase == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.ase);
-      }
-      first = false;
       sb.append(")");
       return sb.toString();
     }
@@ -13156,60 +6890,24 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    private static class updateExperiment_resultStandardSchemeFactory implements SchemeFactory {
-      public updateExperiment_resultStandardScheme getScheme() {
-        return new updateExperiment_resultStandardScheme();
-      }
-    }
-
-    private static class updateExperiment_resultStandardScheme extends StandardScheme<updateExperiment_result> {
-
-      public void read(org.apache.thrift.protocol.TProtocol iprot, updateExperiment_result struct) throws org.apache.thrift.TException {
-        org.apache.thrift.protocol.TField schemeField;
-        iprot.readStructBegin();
-        while (true)
-        {
-          schemeField = iprot.readFieldBegin();
-          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
-            break;
-          }
-          switch (schemeField.id) {
-            case 1: // IRE
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
-                struct.ire.read(iprot);
-                struct.setIreIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
-            case 2: // ENF
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.enf = new org.apache.airavata.api.error.ExperimentNotFoundException();
-                struct.enf.read(iprot);
-                struct.setEnfIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
-            case 3: // ACE
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.ace = new org.apache.airavata.api.error.AiravataClientException();
-                struct.ace.read(iprot);
-                struct.setAceIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
-            case 4: // ASE
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
-                struct.ase.read(iprot);
-                struct.setAseIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
+    private static class updateExperimentConfiguration_resultStandardSchemeFactory implements SchemeFactory {
+      public updateExperimentConfiguration_resultStandardScheme getScheme() {
+        return new updateExperimentConfiguration_resultStandardScheme();
+      }
+    }
+
+    private static class updateExperimentConfiguration_resultStandardScheme extends StandardScheme<updateExperimentConfiguration_result> {
+
+      public void read(org.apache.thrift.protocol.TProtocol iprot, updateExperimentConfiguration_result struct) throws org.apache.thrift.TException {
+        org.apache.thrift.protocol.TField schemeField;
+        iprot.readStructBegin();
+        while (true)
+        {
+          schemeField = iprot.readFieldBegin();
+          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
+            break;
+          }
+          switch (schemeField.id) {
             default:
               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
           }
@@ -13221,123 +6919,56 @@ import org.slf4j.LoggerFactory;
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, updateExperiment_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, updateExperimentConfiguration_result struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        if (struct.ire != null) {
-          oprot.writeFieldBegin(IRE_FIELD_DESC);
-          struct.ire.write(oprot);
-          oprot.writeFieldEnd();
-        }
-        if (struct.enf != null) {
-          oprot.writeFieldBegin(ENF_FIELD_DESC);
-          struct.enf.write(oprot);
-          oprot.writeFieldEnd();
-        }
-        if (struct.ace != null) {
-          oprot.writeFieldBegin(ACE_FIELD_DESC);
-          struct.ace.write(oprot);
-          oprot.writeFieldEnd();
-        }
-        if (struct.ase != null) {
-          oprot.writeFieldBegin(ASE_FIELD_DESC);
-          struct.ase.write(oprot);
-          oprot.writeFieldEnd();
-        }
         oprot.writeFieldStop();
         oprot.writeStructEnd();
       }
 
     }
 
-    private static class updateExperiment_resultTupleSchemeFactory implements SchemeFactory {
-      public updateExperiment_resultTupleScheme getScheme() {
-        return new updateExperiment_resultTupleScheme();
+    private static class updateExperimentConfiguration_resultTupleSchemeFactory implements SchemeFactory {
+      public updateExperimentConfiguration_resultTupleScheme getScheme() {
+        return new updateExperimentConfiguration_resultTupleScheme();
       }
     }
 
-    private static class updateExperiment_resultTupleScheme extends TupleScheme<updateExperiment_result> {
+    private static class updateExperimentConfiguration_resultTupleScheme extends TupleScheme<updateExperimentConfiguration_result> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, updateExperiment_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, updateExperimentConfiguration_result struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
-        BitSet optionals = new BitSet();
-        if (struct.isSetIre()) {
-          optionals.set(0);
-        }
-        if (struct.isSetEnf()) {
-          optionals.set(1);
-        }
-        if (struct.isSetAce()) {
-          optionals.set(2);
-        }
-        if (struct.isSetAse()) {
-          optionals.set(3);
-        }
-        oprot.writeBitSet(optionals, 4);
-        if (struct.isSetIre()) {
-          struct.ire.write(oprot);
-        }
-        if (struct.isSetEnf()) {
-          struct.enf.write(oprot);
-        }
-        if (struct.isSetAce()) {
-          struct.ace.write(oprot);
-        }
-        if (struct.isSetAse()) {
-          struct.ase.write(oprot);
-        }
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, updateExperiment_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, updateExperimentConfiguration_result struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
-        BitSet incoming = iprot.readBitSet(4);
-        if (incoming.get(0)) {
-          struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
-          struct.ire.read(iprot);
-          struct.setIreIsSet(true);
-        }
-        if (incoming.get(1)) {
-          struct.enf = new org.apache.airavata.api.error.ExperimentNotFoundException();
-          struct.enf.read(iprot);
-          struct.setEnfIsSet(true);
-        }
-        if (incoming.get(2)) {
-          struct.ace = new org.apache.airavata.api.error.AiravataClientException();
-          struct.ace.read(iprot);
-          struct.setAceIsSet(true);
-        }
-        if (incoming.get(3)) {
-          struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
-          struct.ase.read(iprot);
-          struct.setAseIsSet(true);
-        }
       }
     }
 
   }
 
-  public static class updateExperimentConfiguration_args implements org.apache.thrift.TBase<updateExperimentConfiguration_args, updateExperimentConfiguration_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateExperimentConfiguration_args>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateExperimentConfiguration_args");
+  public static class updateResourceScheduleing_args implements org.apache.thrift.TBase<updateResourceScheduleing_args, updateResourceScheduleing_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateResourceScheduleing_args>   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateResourceScheduleing_args");
 
     private static final org.apache.thrift.protocol.TField AIRAVATA_EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataExperimentId", org.apache.thrift.protocol.TType.STRING, (short)1);
-    private static final org.apache.thrift.protocol.TField USER_CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("userConfiguration", org.apache.thrift.protocol.TType.STRUCT, (short)2);
+    private static final org.apache.thrift.protocol.TField RESOURCE_SCHEDULING_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceScheduling", org.apache.thrift.protocol.TType.STRUCT, (short)2);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new updateExperimentConfiguration_argsStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new updateExperimentConfiguration_argsTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new updateResourceScheduleing_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new updateResourceScheduleing_argsTupleSchemeFactory());
     }
 
     public String airavataExperimentId; // required
-    public org.apache.airavata.model.workspace.experiment.UserConfigurationData userConfiguration; // required
+    public org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling resourceScheduling; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
       AIRAVATA_EXPERIMENT_ID((short)1, "airavataExperimentId"),
-      USER_CONFIGURATION((short)2, "userConfiguration");
+      RESOURCE_SCHEDULING((short)2, "resourceScheduling");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -13354,8 +6985,8 @@ import org.slf4j.LoggerFactory;
         switch(fieldId) {
           case 1: // AIRAVATA_EXPERIMENT_ID
             return AIRAVATA_EXPERIMENT_ID;
-          case 2: // USER_CONFIGURATION
-            return USER_CONFIGURATION;
+          case 2: // RESOURCE_SCHEDULING
+            return RESOURCE_SCHEDULING;
           default:
             return null;
         }
@@ -13401,51 +7032,51 @@ import org.slf4j.LoggerFactory;
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.AIRAVATA_EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("airavataExperimentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
-      tmpMap.put(_Fields.USER_CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("userConfiguration", org.apache.thrift.TFieldRequirementType.REQUIRED, 
-          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.UserConfigurationData.class)));
+      tmpMap.put(_Fields.RESOURCE_SCHEDULING, new org.apache.thrift.meta_data.FieldMetaData("resourceScheduling", org.apache.thrift.TFieldRequirementType.REQUIRED, 
+          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling.class)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateExperimentConfiguration_args.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateResourceScheduleing_args.class, metaDataMap);
     }
 
-    public updateExperimentConfiguration_args() {
+    public updateResourceScheduleing_args() {
     }
 
-    public updateExperimentConfiguration_args(
+    public updateResourceScheduleing_args(
       String airavataExperimentId,
-      org.apache.airavata.model.workspace.experiment.UserConfigurationData userConfiguration)
+      org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling resourceScheduling)
     {
       this();
       this.airavataExperimentId = airavataExperimentId;
-      this.userConfiguration = userConfiguration;
+      this.resourceScheduling = resourceScheduling;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public updateExperimentConfiguration_args(updateExperimentConfiguration_args other) {
+    public updateResourceScheduleing_args(updateResourceScheduleing_args other) {
       if (other.isSetAiravataExperimentId()) {
         this.airavataExperimentId = other.airavataExperimentId;
       }
-      if (other.isSetUserConfiguration()) {
-        this.userConfiguration = new org.apache.airavata.model.workspace.experiment.UserConfigurationData(other.userConfiguration);
+      if (other.isSetResourceScheduling()) {
+        this.resourceScheduling = new org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling(other.resourceScheduling);
       }
     }
 
-    public updateExperimentConfiguration_args deepCopy() {
-      return new updateExperimentConfiguration_args(this);
+    public updateResourceScheduleing_args deepCopy() {
+      return new updateResourceScheduleing_args(this);
     }
 
     @Override
     public void clear() {
       this.airavataExperimentId = null;
-      this.userConfiguration = null;
+      this.resourceScheduling = null;
     }
 
     public String getAiravataExperimentId() {
       return this.airavataExperimentId;
     }
 
-    public updateExperimentConfiguration_args setAiravataExperimentId(String airavataExperimentId) {
+    public updateResourceScheduleing_args setAiravataExperimentId(String airavataExperimentId) {
       this.airavataExperimentId = airavataExperimentId;
       return this;
     }
@@ -13465,27 +7096,27 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    public org.apache.airavata.model.workspace.experiment.UserConfigurationData getUserConfiguration() {
-      return this.userConfiguration;
+    public org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling getResourceScheduling() {
+      return this.resourceScheduling;
     }
 
-    public updateExperimentConfiguration_args setUserConfiguration(org.apache.airavata.model.workspace.experiment.UserConfigurationData userConfiguration) {
-      this.userConfiguration = userConfiguration;
+    public updateResourceScheduleing_args setResourceScheduling(org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling resourceScheduling) {
+      this.resourceScheduling = resourceScheduling;
       return this;
     }
 
-    public void unsetUserConfiguration() {
-      this.userConfiguration = null;
+    public void unsetResourceScheduling() {
+      this.resourceScheduling = null;
     }
 
-    /** Returns true if field userConfiguration is set (has been assigned a value) and false otherwise */
-    public boolean isSetUserConfiguration() {
-      return this.userConfiguration != null;
+    /** Returns true if field resourceScheduling is set (has been assigned a value) and false otherwise */
+    public boolean isSetResourceScheduling() {
+      return this.resourceScheduling != null;
     }
 
-    public void setUserConfigurationIsSet(boolean value) {
+    public void setResourceSchedulingIsSet(boolean value) {
       if (!value) {
-        this.userConfiguration = null;
+        this.resourceScheduling = null;
       }
     }
 
@@ -13499,11 +7130,11 @@ import org.slf4j.LoggerFactory;
         }
         break;
 
-      case USER_CONFIGURATION:
+      case RESOURCE_SCHEDULING:
         if (value == null) {
-          unsetUserConfiguration();
+          unsetResourceScheduling();
         } else {
-          setUserConfiguration((org.apache.airavata.model.workspace.experiment.UserConfigurationData)value);
+          setResourceScheduling((org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling)value);
         }
         break;
 
@@ -13515,8 +7146,8 @@ import org.slf4j.LoggerFactory;
       case AIRAVATA_EXPERIMENT_ID:
         return getAiravataExperimentId();
 
-      case USER_CONFIGURATION:
-        return getUserConfiguration();
+      case RESOURCE_SCHEDULING:
+        return getResourceScheduling();
 
       }
       throw new IllegalStateException();
@@ -13531,8 +7162,8 @@ import org.slf4j.LoggerFactory;
       switch (field) {
       case AIRAVATA_EXPERIMENT_ID:
         return isSetAiravataExperimentId();
-      case USER_CONFIGURATION:
-        return isSetUserConfiguration();
+      case RESOURCE_SCHEDULING:
+        return isSetResourceScheduling();
       }
       throw new IllegalStateException();
     }
@@ -13541,12 +7172,12 @@ import org.slf4j.LoggerFactory;
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof updateExperimentConfiguration_args)
-        return this.equals((updateExperimentConfiguration_args)that);
+      if (that instanceof updateResourceScheduleing_args)
+        return this.equals((updateResourceScheduleing_args)that);
       return false;
     }
 
-    public boolean equals(updateExperimentConfiguration_args that) {
+    public boolean equals(updateResourceScheduleing_args that) {
       if (that == null)
         return false;
 
@@ -13559,12 +7190,12 @@ import org.slf4j.LoggerFactory;
           return false;
       }
 
-      boolean this_present_userConfiguration = true && this.isSetUserConfiguration();
-      boolean that_present_userConfiguration = true && that.isSetUserConfiguration();
-      if (this_present_userConfiguration || that_present_userConfiguration) {
-        if (!(this_present_userConfiguration && that_present_userConfiguration))
+      boolean this_present_resourceScheduling = true && this.isSetResourceScheduling();
+      boolean that_present_resourceScheduling = true && that.isSetResourceScheduling();
+      if (this_present_resourceScheduling || that_present_resourceScheduling) {
+        if (!(this_present_resourceScheduling && that_present_resourceScheduling))
           return false;
-        if (!this.userConfiguration.equals(that.userConfiguration))
+        if (!this.resourceScheduling.equals(that.resourceScheduling))
           return false;
       }
 
@@ -13577,7 +7208,7 @@ import org.slf4j.LoggerFactory;
     }
 
     @Override
-    public int compareTo(updateExperimentConfiguration_args other) {
+    public int compareTo(updateResourceScheduleing_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
@@ -13594,12 +7225,12 @@ import org.slf4j.LoggerFactory;
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetUserConfiguration()).compareTo(other.isSetUserConfiguration());
+      lastComparison = Boolean.valueOf(isSetResourceScheduling()).compareTo(other.isSetResourceScheduling());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      if (isSetUserConfiguration()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userConfiguration, other.userConfiguration);
+      if (isSetResourceScheduling()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceScheduling, other.resourceScheduling);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -13621,7 +7252,7 @@ import org.slf4j.LoggerFactory;
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("updateExperimentConfiguration_args(");
+      StringBuilder sb = new StringBuilder("updateResourceScheduleing_args(");
       boolean first = true;
 
       sb.append("airavataExperimentId:");
@@ -13632,11 +7263,11 @@ import org.slf4j.LoggerFactory;
       }
       first = false;
       if (!first) sb.append(", ");
-      sb.append("userConfiguration:");
-      if (this.userConfiguration == null) {
+      sb.append("resourceScheduling:");
+      if (this.resourceScheduling == null) {
         sb.append("null");
       } else {
-        sb.append(this.userConfiguration);
+        sb.append(this.resourceScheduling);
       }
       first = false;
       sb.append(")");
@@ -13648,12 +7279,12 @@ import org.slf4j.LoggerFactory;
       if (airavataExperimentId == null) {
         throw new org.apache.thrift.protocol.TProtocolException("Required field 'airavataExperimentId' was not present! Struct: " + toString());
       }
-      if (userConfiguration == null) {
-        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userConfiguration' was not present! Struct: " + toString());
+      if (resourceScheduling == null) {
+        throw new org.apache.thrift.protocol.TProtocolException("Required field 'resourceScheduling' was not present! Struct: " + toString());
       }
       // check for sub-struct validity
-      if (userConfiguration != null) {
-        userConfiguration.validate();
+      if (resourceScheduling != null) {
+        resourceScheduling.validate();
       }
     }
 
@@ -13673,15 +7304,15 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    private static class updateExperimentConfiguration_argsStandardSchemeFactory implements SchemeFactory {
-      public updateExperimentConfiguration_argsStandardScheme getScheme() {
-        return new updateExperimentConfiguration_argsStandardScheme();
+    private static class updateResourceScheduleing_argsStandardSchemeFactory implements SchemeFactory {
+      public updateResourceScheduleing_argsStandardScheme getScheme() {
+        return new updateResourceScheduleing_argsStandardScheme();
       }
     }
 
-    private static class updateExperimentConfiguration_argsStandardScheme extends StandardScheme<updateExperimentConfiguration_args> {
+    private static class updateResourceScheduleing_argsStandardScheme extends StandardScheme<updateResourceScheduleing_args> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, updateExperimentConfiguration_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, updateResourceScheduleing_args struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -13699,11 +7330,11 @@ import org.slf4j.LoggerFactory;
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
               }
               break;
-            case 2: // USER_CONFIGURATION
+            case 2: // RESOURCE_SCHEDULING
               if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.userConfiguration = new org.apache.airavata.model.workspace.experiment.UserConfigurationData();
-                struct.userConfiguration.read(iprot);
-                struct.setUserConfigurationIsSet(true);
+                struct.resourceScheduling = new org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling();
+                struct.resourceScheduling.read(iprot);
+                struct.setResourceSchedulingIsSet(true);
               } else { 
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
               }
@@ -13719,7 +7350,7 @@ import org.slf4j.LoggerFactory;
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, updateExperimentConfiguration_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, updateResourceScheduleing_args struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
@@ -13728,9 +7359,9 @@ import org.slf4j.LoggerFactory;
           oprot.writeString(struct.airavataExperimentId);
           oprot.writeFieldEnd();
         }
-        if (struct.userConfiguration != null) {
-          oprot.writeFieldBegin(USER_CONFIGURATION_FIELD_DESC);
-          struct.userConfiguration.write(oprot);
+        if (struct.resourceScheduling != null) {
+          oprot.writeFieldBegin(RESOURCE_SCHEDULING_FIELD_DESC);
+          struct.resourceScheduling.write(oprot);
           oprot.writeFieldEnd();
         }
         oprot.writeFieldStop();
@@ -13739,42 +7370,42 @@ import org.slf4j.LoggerFactory;
 
     }
 
-    private static class updateExperimentConfiguration_argsTupleSchemeFactory implements SchemeFactory {
-      public updateExperimentConfiguration_argsTupleScheme getScheme() {
-        return new updateExperimentConfiguration_argsTupleScheme();
+    private static class updateResourceScheduleing_argsTupleSchemeFactory implements SchemeFactory {
+      public updateResourceScheduleing_argsTupleScheme getScheme() {
+        return new updateResourceScheduleing_argsTupleScheme();
       }
     }
 
-    private static class updateExperimentConfiguration_argsTupleScheme extends TupleScheme<updateExperimentConfiguration_args> {
+    private static class updateResourceScheduleing_argsTupleScheme extends TupleScheme<updateResourceScheduleing_args> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, updateExperimentConfiguration_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, updateResourceScheduleing_args struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         oprot.writeString(struct.airavataExperimentId);
-        struct.userConfiguration.write(oprot);
+        struct.resourceScheduling.write(oprot);
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, updateExperimentConfiguration_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, updateResourceScheduleing_args struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
         struct.airavataExperimentId = iprot.readString();
         struct.setAiravataExperimentIdIsSet(true);
-        struct.userConfiguration = new org.apache.airavata.model.workspace.experiment.UserConfigurationData();
-        struct.userConfiguration.read(iprot);
-        struct.setUserConfigurationIsSet(true);
+        struct.resourceScheduling = new org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling();
+        struct.resourceScheduling.read(iprot);
+        struct.setResourceSchedulingIsSet(true);
       }
     }
 
   }
 
-  public static class updateExperimentConfiguration_result implements org.apache.thrift.TBase<updateExperimentConfiguration_result, updateExperimentConfiguration_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateExperimentConfiguration_result>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateExperimentConfiguration_result");
+  public static class updateResourceScheduleing_result implements org.apache.thrift.TBase<updateResourceScheduleing_result, updateResourceScheduleing_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateResourceScheduleing_result>   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateResourceScheduleing_result");
 
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new updateExperimentConfiguration_resultStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new updateExperimentConfiguration_resultTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new updateResourceScheduleing_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new updateResourceScheduleing_resultTupleSchemeFactory());
     }
 
 
@@ -13837,20 +7468,20 @@ import org.slf4j.LoggerFactory;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateExperimentConfiguration_result.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateResourceScheduleing_result.class, metaDataMap);
     }
 
-    public updateExperimentConfiguration_result() {
+    public updateResourceScheduleing_result() {
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public updateExperimentConfiguration_result(updateExperimentConfiguration_result other) {
+    public updateResourceScheduleing_result(updateResourceScheduleing_result other) {
     }
 
-    public updateExperimentConfiguration_result deepCopy() {
-      return new updateExperimentConfiguration_result(this);
+    public updateResourceScheduleing_result deepCopy() {
+      return new updateResourceScheduleing_result(this);
     }
 
     @Override
@@ -13883,12 +7514,12 @@ import org.slf4j.LoggerFactory;
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof updateExperimentConfiguration_result)
-        return this.equals((updateExperimentConfiguration_result)that);
+      if (that instanceof updateResourceScheduleing_result)
+        return this.equals((updateResourceScheduleing_result)that);
       return false;
     }
 
-    public boolean equals(updateExperimentConfiguration_result that) {
+    public boolean equals(updateResourceScheduleing_result that) {
       if (that == null)
         return false;
 
@@ -13901,7 +7532,7 @@ import org.slf4j.LoggerFactory;
     }
 
     @Override
-    public int compareTo(updateExperimentConfiguration_result other) {
+    public int compareTo(updateResourceScheduleing_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
@@ -13925,7 +7556,7 @@ import org.slf4j.LoggerFactory;
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("updateExperimentConfiguration_result(");
+      StringBuilder sb = new StringBuilder("updateResourceScheduleing_result(");
       boolean first = true;
 
       sb.append(")");
@@ -13953,15 +7584,15 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    private static class updateExperimentConfiguration_resultStandardSchemeFactory implements SchemeFactory {
-      public updateExperimentConfiguration_resultStandardScheme getScheme() {
-        return new updateExperimentConfiguration_resultStandardScheme();
+    private static class updateResourceScheduleing_resultStandardSchemeFactory implements SchemeFactory {
+      public updateResourceScheduleing_resultStandardScheme getScheme() {
+        return new updateResourceScheduleing_resultStandardScheme();
       }
     }
 
-    private static class updateExperimentConfiguration_resultStandardScheme extends StandardScheme<updateExperimentConfiguration_result> {
+    private static class updateResourceScheduleing_resultStandardScheme extends StandardScheme<updateResourceScheduleing_result> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, updateExperimentConfiguration_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, updateResourceScheduleing_result struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -13982,7 +7613,7 @@ import org.slf4j.LoggerFactory;
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, updateExperimentConfiguration_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, updateResourceScheduleing_result struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
@@ -13992,46 +7623,46 @@ import org.slf4j.LoggerFactory;
 
     }
 
-    private static class updateExperimentConfiguration_resultTupleSchemeFactory implements SchemeFactory {
-      public updateExperimentConfiguration_resultTupleScheme getScheme() {
-        return new updateExperimentConfiguration_resultTupleScheme();
+    private static class updateResourceScheduleing_resultTupleSchemeFactory implements SchemeFactory {
+      public updateResourceScheduleing_resultTupleScheme getScheme() {
+        return new updateResourceScheduleing_resultTupleScheme();
       }
     }
 
-    private static class updateExperimentConfiguration_resultTupleScheme extends TupleScheme<updateExperimentConfiguration_result> {
+    private static class updateResourceScheduleing_resultTupleScheme extends TupleScheme<updateResourceScheduleing_result> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, updateExperimentConfiguration_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, updateResourceScheduleing_result struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, updateExperimentConfiguration_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, updateResourceScheduleing_result struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
       }
     }
 
   }
 
-  public static class updateResourceScheduleing_args implements org.apache.thrift.TBase<updateResourceScheduleing_args, updateResourceScheduleing_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateResourceScheduleing_args>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateResourceScheduleing_args");
+  public static class launchExperiment_args implements org.apache.thrift.TBase<launchExperiment_args, launchExperiment_args._Fields>, java.io.Serializable, Cloneable, Comparable<launchExperiment_args>   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("launchExperiment_args");
 
     private static final org.apache.thrift.protocol.TField AIRAVATA_EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataExperimentId", org.apache.thrift.protocol.TType.STRING, (short)1);
-    private static final org.apache.thrift.protocol.TField RESOURCE_SCHEDULING_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceScheduling", org.apache.thrift.protocol.TType.STRUCT, (short)2);
+    private static final org.apache.thrift.protocol.TField AIRAVATA_CRED_STORE_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataCredStoreToken", org.apache.thrift.protocol.TType.STRING, (short)2);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new updateResourceScheduleing_argsStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new updateResourceScheduleing_argsTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new launchExperiment_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new launchExperiment_argsTupleSchemeFactory());
     }
 
     public String airavataExperimentId; // required
-    public org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling resourceScheduling; // required
+    public String airavataCredStoreToken; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
       AIRAVATA_EXPERIMENT_ID((short)1, "airavataExperimentId"),
-      RESOURCE_SCHEDULING((short)2, "resourceScheduling");
+      AIRAVATA_CRED_STORE_TOKEN((short)2, "airavataCredStoreToken");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -14048,8 +7679,8 @@ import org.slf4j.LoggerFactory;
         switch(fieldId) {
           case 1: // AIRAVATA_EXPERIMENT_ID
             return AIRAVATA_EXPERIMENT_ID;
-          case 2: // RESOURCE_SCHEDULING
-            return RESOURCE_SCHEDULING;
+          case 2: // AIRAVATA_CRED_STORE_TOKEN
+            return AIRAVATA_CRED_STORE_TOKEN;
           default:
             return null;
         }
@@ -14095,51 +7726,51 @@ import org.slf4j.LoggerFactory;
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.AIRAVATA_EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("airavataExperimentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
-      tmpMap.put(_Fields.RESOURCE_SCHEDULING, new org.apache.thrift.meta_data.FieldMetaData("resourceScheduling", org.apache.thrift.TFieldRequirementType.REQUIRED, 
-          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling.class)));
+      tmpMap.put(_Fields.AIRAVATA_CRED_STORE_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("airavataCredStoreToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateResourceScheduleing_args.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(launchExperiment_args.class, metaDataMap);
     }
 
-    public updateResourceScheduleing_args() {
+    public launchExperiment_args() {
     }
 
-    public updateResourceScheduleing_args(
+    public launchExperiment_args(
       String airavataExperimentId,
-      org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling resourceScheduling)
+      String airavataCredStoreToken)
     {
       this();
       this.airavataExperimentId = airavataExperimentId;
-      this.resourceScheduling = resourceScheduling;
+      this.airavataCredStoreToken = airavataCredStoreToken;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public updateResourceScheduleing_args(updateResourceScheduleing_args other) {
+    public launchExperiment_args(launchExperiment_args other) {
       if (other.isSetAiravataExperimentId()) {
         this.airavataExperimentId = other.airavataExperimentId;
       }
-      if (other.isSetResourceScheduling()) {
-        this.resourceScheduling = new org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling(other.resourceScheduling);
+      if (other.isSetAiravataCredStoreToken()) {
+        this.airavataCredStoreToken = other.airavataCredStoreToken;
       }
     }
 
-    public updateResourceScheduleing_args deepCopy() {
-      return new updateResourceScheduleing_args(this);
+    public launchExperiment_args deepCopy() {
+      return new launchExperiment_args(this);
     }
 
     @Override
     public void clear() {
       this.airavataExperimentId = null;
-      this.resourceScheduling = null;
+      this.airavataCredStoreToken = null;
     }
 
     public String getAiravataExperimentId() {
       return this.airavataExperimentId;
     }
 
-    public updateResourceScheduleing_args setAiravataExperimentId(String airavataExperimentId) {
+    public launchExperiment_args setAiravataExperimentId(String airavataExperimentId) {
       this.airavataExperimentId = airavataExperimentId;
       return this;
     }
@@ -14159,27 +7790,27 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    public org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling getResourceScheduling() {
-      return this.resourceScheduling;
+    public String getAiravataCredStoreToken() {
+      return this.airavataCredStoreToken;
     }
 
-    public updateResourceScheduleing_args setResourceScheduling(org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling resourceScheduling) {
-      this.resourceScheduling = resourceScheduling;
+    public launchExperiment_args setAiravataCredStoreToken(String airavataCredStoreToken) {
+      this.airavataCredStoreToken = airavataCredStoreToken;
       return this;
     }
 
-    public void unsetResourceScheduling() {
-      this.resourceScheduling = null;
+    public void unsetAiravataCredStoreToken() {
+      this.airavataCredStoreToken = null;
     }
 
-    /** Returns true if field resourceScheduling is set (has been assigned a value) and false otherwise */
-    public boolean isSetResourceScheduling() {
-      return this.resourceScheduling != null;
+    /** Returns true if field airavataCredStoreToken is set (has been assigned a value) and false otherwise */
+    public boolean isSetAiravataCredStoreToken() {
+      return this.airavataCredStoreToken != null;
     }
 
-    public void setResourceSchedulingIsSet(boolean value) {
+    public void setAiravataCredStoreTokenIsSet(boolean value) {
       if (!value) {
-        this.resourceScheduling = null;
+        this.airavataCredStoreToken = null;
       }
     }
 
@@ -14193,11 +7824,11 @@ import org.slf4j.LoggerFactory;
         }
         break;
 
-      case RESOURCE_SCHEDULING:
+      case AIRAVATA_CRED_STORE_TOKEN:
         if (value == null) {
-          unsetResourceScheduling();
+          unsetAiravataCredStoreToken();
         } else {
-          setResourceScheduling((org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling)value);
+          setAiravataCredStoreToken((String)value);
         }
         break;
 
@@ -14209,8 +7840,8 @@ import org.slf4j.LoggerFactory;
       case AIRAVATA_EXPERIMENT_ID:
         return getAiravataExperimentId();
 
-      case RESOURCE_SCHEDULING:
-        return getResourceScheduling();
+      case AIRAVATA_CRED_STORE_TOKEN:
+        return getAiravataCredStoreToken();
 
       }
       throw new IllegalStateException();
@@ -14225,8 +7856,8 @@ import org.slf4j.LoggerFactory;
       switch (field) {
       case AIRAVATA_EXPERIMENT_ID:
         return isSetAiravataExperimentId();
-      case RESOURCE_SCHEDULING:
-        return isSetResourceScheduling();
+      case AIRAVATA_CRED_STORE_TOKEN:
+        return isSetAiravataCredStoreToken();
       }
       throw new IllegalStateException();
     }
@@ -14235,12 +7866,12 @@ import org.slf4j.LoggerFactory;
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof updateResourceScheduleing_args)
-        return this.equals((updateResourceScheduleing_args)that);
+      if (that instanceof launchExperiment_args)
+        return this.equals((launchExperiment_args)that);
       return false;
     }
 
-    public boolean equals(updateResourceScheduleing_args that) {
+    public boolean equals(launchExperiment_args that) {
       if (that == null)
         return false;
 
@@ -14253,12 +7884,12 @@ import org.slf4j.LoggerFactory;
           return false;
       }
 
-      boolean this_present_resourceScheduling = true && this.isSetResourceScheduling();
-      boolean that_present_resourceScheduling = true && that.isSetResourceScheduling();
-      if (this_present_resourceScheduling || that_present_resourceScheduling) {
-        if (!(this_present_resourceScheduling && that_present_resourceScheduling))
+      boolean this_present_airavataCredStoreToken = true && this.isSetAiravataCredStoreToken();
+      boolean that_present_airavataCredStoreToken = true && that.isSetAiravataCredStoreToken();
+      if (this_present_airavataCredStoreToken || that_present_airavataCredStoreToken) {
+        if (!(this_present_airavataCredStoreToken && that_present_airavataCredStoreToken))
           return false;
-        if (!this.resourceScheduling.equals(that.resourceScheduling))
+        if (!this.airavataCredStoreToken.equals(that.airavataCredStoreToken))
           return false;
       }
 
@@ -14271,7 +7902,7 @@ import org.slf4j.LoggerFactory;
     }
 
     @Override
-    public int compareTo(updateResourceScheduleing_args other) {
+    public int compareTo(launchExperiment_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
@@ -14288,12 +7919,12 @@ import org.slf4j.LoggerFactory;
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetResourceScheduling()).compareTo(other.isSetResourceScheduling());
+      lastComparison = Boolean.valueOf(isSetAiravataCredStoreToken()).compareTo(other.isSetAiravataCredStoreToken());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      if (isSetResourceScheduling()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceScheduling, other.resourceScheduling);
+      if (isSetAiravataCredStoreToken()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataCredStoreToken, other.airavataCredStoreToken);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -14315,7 +7946,7 @@ import org.slf4j.LoggerFactory;
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("updateResourceScheduleing_args(");
+      StringBuilder sb = new StringBuilder("launchExperiment_args(");
       boolean first = true;
 
       sb.append("airavataExperimentId:");
@@ -14326,11 +7957,11 @@ import org.slf4j.LoggerFactory;
       }
       first = false;
       if (!first) sb.append(", ");
-      sb.append("resourceScheduling:");
-      if (this.resourceScheduling == null) {
+      sb.append("airavataCredStoreToken:");
+      if (this.airavataCredStoreToken == null) {
         sb.append("null");
       } else {
-        sb.append(this.resourceScheduling);
+        sb.append(this.airavataCredStoreToken);
       }
       first = false;
       sb.append(")");
@@ -14342,13 +7973,10 @@ import org.slf4j.LoggerFactory;
       if (airavataExperimentId == null) {
         throw new org.apache.thrift.protocol.TProtocolException("Required field 'airavataExperimentId' was not present! Struct: " + toString());
       }
-      if (resourceScheduling == null) {
-        throw new org.apache.thrift.protocol.TProtocolException("Required field 'resourceScheduling' was not present! Struct: " + toString());
+      if (airavataCredStoreToken == null) {
+        throw new org.apache.thrift.protocol.TProtocolException("Required field 'airavataCredStoreToken' was not present! Struct: " + toString());
       }
       // check for sub-struct validity
-      if (resourceScheduling != null) {
-        resourceScheduling.validate();
-      }
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -14367,15 +7995,15 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    private static class updateResourceScheduleing_argsStandardSchemeFactory implements SchemeFactory {
-      public updateResourceScheduleing_argsStandardScheme getScheme() {
-        return new updateResourceScheduleing_argsStandardScheme();
+    private static class launchExperiment_argsStandardSchemeFactory implements SchemeFactory {
+      public launchExperiment_argsStandardScheme getScheme() {
+        return new launchExperiment_argsStandardScheme();
       }
     }
 
-    private static class updateResourceScheduleing_argsStandardScheme extends StandardScheme<updateResourceScheduleing_args> {
+    private static class launchExperiment_argsStandardScheme extends StandardScheme<launchExperiment_args> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, updateResourceScheduleing_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, launchExperiment_args struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -14393,11 +8021,10 @@ import org.slf4j.LoggerFactory;
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
               }
               break;
-            case 2: // RESOURCE_SCHEDULING
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.resourceScheduling = new org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling();
-                struct.resourceScheduling.read(iprot);
-                struct.setResourceSchedulingIsSet(true);
+            case 2: // AIRAVATA_CRED_STORE_TOKEN
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
+                struct.airavataCredStoreToken = iprot.readString();
+                struct.setAiravataCredStoreTokenIsSet(true);
               } else { 
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
               }
@@ -14413,7 +8040,7 @@ import org.slf4j.LoggerFactory;
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, updateResourceScheduleing_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, launchExperiment_args struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
@@ -14422,9 +8049,9 @@ import org.slf4j.LoggerFactory;
           oprot.writeString(struct.airavataExperimentId);
           oprot.writeFieldEnd();
         }
-        if (struct.resourceScheduling != null) {
-          oprot.writeFieldBegin(RESOURCE_SCHEDULING_FIELD_DESC);
-          struct.resourceScheduling.write(oprot);
+        if (struct.airavataCredStoreToken != null) {
+          oprot.writeFieldBegin(AIRAVATA_CRED_STORE_TOKEN_FIELD_DESC);
+          oprot.writeString(struct.airavataCredStoreToken);
           oprot.writeFieldEnd();
         }
         oprot.writeFieldStop();
@@ -14433,48 +8060,58 @@ import org.slf4j.LoggerFactory;
 
     }
 
-    private static class updateResourceScheduleing_argsTupleSchemeFactory implements SchemeFactory {
-      public updateResourceScheduleing_argsTupleScheme getScheme() {
-        return new updateResourceScheduleing_argsTupleScheme();
+    private static class launchExperiment_argsTupleSchemeFactory implements SchemeFactory {
+      public launchExperiment_argsTupleScheme getScheme() {
+        return new launchExperiment_argsTupleScheme();
       }
     }
 
-    private static class updateResourceScheduleing_argsTupleScheme extends TupleScheme<updateResourceScheduleing_args> {
+    private static class launchExperiment_argsTupleScheme extends TupleScheme<launchExperiment_args> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, updateResourceScheduleing_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, launchExperiment_args struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         oprot.writeString(struct.airavataExperimentId);
-        struct.resourceScheduling.write(oprot);
+        oprot.writeString(struct.airavataCredStoreToken);
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, updateResourceScheduleing_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, launchExperiment_args struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
         struct.airavataExperimentId = iprot.readString();
         struct.setAiravataExperimentIdIsSet(true);
-        struct.resourceScheduling = new org.apache.airavata.model.workspace.experiment.ComputationalResourceScheduling();
-        struct.resourceScheduling.read(iprot);
-        struct.setResourceSchedulingIsSet(true);
+        struct.airavataCredStoreToken = iprot.readString();
+        struct.setAiravataCredStoreTokenIsSet(true);
       }
     }
 
   }
 
-  public static class updateResourceScheduleing_result implements org.apache.thrift.TBase<updateResourceScheduleing_result, updateResourceScheduleing_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateResourceScheduleing_result>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateResourceScheduleing_result");
+  public static class launchExperiment_result implements org.apache.thrift.TBase<launchExperiment_result, launchExperiment_result._Fields>, java.io.Serializable, Cloneable, Comparable<launchExperiment_result>   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("launchExperiment_result");
 
+    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
+    private static final org.apache.thrift.protocol.TField ENF_FIELD_DESC = new org.apache.thrift.protocol.TField("enf", org.apache.thrift.protocol.TType.STRUCT, (short)2);
+    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)3);
+    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)4);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new updateResourceScheduleing_resultStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new updateResourceScheduleing_resultTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new launchExperiment_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new launchExperiment_resultTupleSchemeFactory());
     }
 
+    public org.apache.airavata.api.error.InvalidRequestException ire; // required
+    public org.apache.airavata.api.error.ExperimentNotFoundException enf; // required
+    public org.apache.airavata.api.error.AiravataClientException ace; // required
+    public org.apache.airavata.api.error.AiravataSystemException ase; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-;
+      IRE((short)1, "ire"),
+      ENF((short)2, "enf"),
+      ACE((short)3, "ace"),
+      ASE((short)4, "ase");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -14489,6 +8126,14 @@ import org.slf4j.LoggerFactory;
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
+          case 1: // IRE
+            return IRE;
+          case 2: // ENF
+            return ENF;
+          case 3: // ACE
+            return ACE;
+          case 4: // ASE
+            return ASE;
           default:
             return null;
         }
@@ -14527,37 +8172,216 @@ import org.slf4j.LoggerFactory;
         return _fieldName;
       }
     }
+
+    // isset id assignments
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
+      tmpMap.put(_Fields.ENF, new org.apache.thrift.meta_data.FieldMetaData("enf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
+      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
+      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateResourceScheduleing_result.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(launchExperiment_result.class, metaDataMap);
     }
 
-    public updateResourceScheduleing_result() {
+    public launchExperiment_result() {
+    }
+
+    public launchExperiment_result(
+      org.apache.airavata.api.error.InvalidRequestException ire,
+      org.apache.airavata.api.error.ExperimentNotFoundException enf,
+      org.apache.airavata.api.error.AiravataClientException ace,
+      org.apache.airavata.api.error.AiravataSystemException ase)
+    {
+      this();
+      this.ire = ire;
+      this.enf = enf;
+      this.ace = ace;
+      this.ase = ase;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public updateResourceScheduleing_result(updateResourceScheduleing_result other) {
+    public launchExperiment_result(launchExperiment_result other) {
+      if (other.isSetIre()) {
+        this.ire = new org.apache.airavata.api.error.InvalidRequestException(other.ire);
+      }
+      if (other.isSetEnf()) {
+        this.enf = new org.apache.airavata.api.error.ExperimentNotFoundException(other.enf);
+      }
+      if (other.isSetAce()) {
+        this.ace = new org.apache.airavata.api.error.AiravataClientException(other.ace);
+      }
+      if (other.isSetAse()) {
+        this.ase = new org.apache.airavata.api.error.AiravataSystemException(other.ase);
+      }
     }
 
-    public updateResourceScheduleing_result deepCopy() {
-      return new updateResourceScheduleing_result(this);
+    public launchExperiment_result deepCopy() {
+      return new launchExperiment_result(this);
     }
 
     @Override
     public void clear() {
+      this.ire = null;
+      this.enf = null;
+      this.ace = null;
+      this.ase = null;
+    }
+
+    public org.apache.airavata.api.error.InvalidRequestException getIre() {
+      return this.ire;
+    }
+
+    public launchExperiment_result setIre(org.apache.airavata.api.error.InvalidRequestException ire) {
+      this.ire = ire;
+      return this;
+    }
+
+    public void unsetIre() {
+      this.ire = null;
+    }
+
+    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
+    public boolean isSetIre() {
+      return this.ire != null;
+    }
+
+    public void setIreIsSet(boolean value) {
+      if (!value) {
+        this.ire = null;
+      }
+    }
+
+    public org.apache.airavata.api.error.ExperimentNotFoundException getEnf() {
+      return this.enf;
+    }
+
+    public launchExperiment_result setEnf(org.apache.airavata.api.error.ExperimentNotFoundException enf) {
+      this.enf = enf;
+      return this;
+    }
+
+    public void unsetEnf() {
+      this.enf = null;
+    }
+
+    /** Returns true if field enf is set (has been assigned a value) and false otherwise */
+    public boolean isSetEnf() {
+      return this.enf != null;
+    }
+
+    public void setEnfIsSet(boolean value) {
+      if (!value) {
+        this.enf = null;
+      }
+    }
+
+    public org.apache.airavata.api.error.AiravataClientException getAce() {
+      return this.ace;
+    }
+
+    public launchExperiment_result setAce(org.apache.airavata.api.error.AiravataClientException ace) {
+      this.ace = ace;
+      return this;
+    }
+
+    public void unsetAce() {
+      this.ace = null;
+    }
+
+    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
+    public boolean isSetAce() {
+      return this.ace != null;
+    }
+
+    public void setAceIsSet(boolean value) {
+      if (!value) {
+        this.ace = null;
+      }
+    }
+
+    public org.apache.airavata.api.error.AiravataSystemException getAse() {
+      return this.ase;
+    }
+
+    public launchExperiment_result setAse(org.apache.airavata.api.error.AiravataSystemException ase) {
+      this.ase = ase;
+      return this;
+    }
+
+    public void unsetAse() {
+      this.ase = null;
+    }
+
+    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
+    public boolean isSetAse() {
+      return this.ase != null;
+    }
+
+    public void setAseIsSet(boolean value) {
+      if (!value) {
+        this.ase = null;
+      }
     }
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
+      case IRE:
+        if (value == null) {
+          unsetIre();
+        } else {
+          setIre((org.apache.airavata.api.error.InvalidRequestException)value);
+        }
+        break;
+
+      case ENF:
+        if (value == null) {
+          unsetEnf();
+        } else {
+          setEnf((org.apache.airavata.api.error.ExperimentNotFoundException)value);
+        }
+        break;
+
+      case ACE:
+        if (value == null) {
+          unsetAce();
+        } else {
+          setAce((org.apache.airavata.api.error.AiravataClientException)value);
+        }
+        break;
+
+      case ASE:
+        if (value == null) {
+          unsetAse();
+        } else {
+          setAse((org.apache.airavata.api.error.AiravataSystemException)value);
+        }
+        break;
+
       }
     }
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
+      case IRE:
+        return getIre();
+
+      case ENF:
+        return getEnf();
+
+      case ACE:
+        return getAce();
+
+      case ASE:
+        return getAse();
+
       }
       throw new IllegalStateException();
     }
@@ -14569,6 +8393,14 @@ import org.slf4j.LoggerFactory;
       }
 
       switch (field) {
+      case IRE:
+        return isSetIre();
+      case ENF:
+        return isSetEnf();
+      case ACE:
+        return isSetAce();
+      case ASE:
+        return isSetAse();
       }
       throw new IllegalStateException();
     }
@@ -14577,15 +8409,51 @@ import org.slf4j.LoggerFactory;
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof updateResourceScheduleing_result)
-        return this.equals((updateResourceScheduleing_result)that);
+      if (that instanceof launchExperiment_result)
+        return this.equals((launchExperiment_result)that);
       return false;
     }
 
-    public boolean equals(updateResourceScheduleing_result that) {
+    public boolean equals(launchExperiment_result that) {
       if (that == null)
         return false;
 
+      boolean this_present_ire = true && this.isSetIre();
+      boolean that_present_ire = true && that.isSetIre();
+      if (this_present_ire || that_present_ire) {
+        if (!(this_present_ire && that_present_ire))
+          return false;
+        if (!this.ire.equals(that.ire))
+          return false;
+      }
+
+      boolean this_present_enf = true && this.isSetEnf();
+      boolean that_present_enf = true && that.isSetEnf();
+      if (this_present_enf || that_present_enf) {
+        if (!(this_present_enf && that_present_enf))
+          return false;
+        if (!this.enf.equals(that.enf))
+          return false;
+      }
+
+      boolean this_present_ace = true && this.isSetAce();
+      boolean that_present_ace = true && that.isSetAce();
+      if (this_present_ace || that_present_ace) {
+        if (!(this_present_ace && that_present_ace))
+          return false;
+        if (!this.ace.equals(that.ace))
+          return false;
+      }
+
+      boolean this_present_ase = true && this.isSetAse();
+      boolean that_present_ase = true && that.isSetAse();
+      if (this_present_ase || that_present_ase) {
+        if (!(this_present_ase && that_present_ase))
+          return false;
+        if (!this.ase.equals(that.ase))
+          return false;
+      }
+
       return true;
     }
 
@@ -14595,13 +8463,53 @@ import org.slf4j.LoggerFactory;
     }
 
     @Override
-    public int compareTo(updateResourceScheduleing_result other) {
+    public int compareTo(launchExperiment_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
-
-      int lastComparison = 0;
-
+
+      int lastComparison = 0;
+
+      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetIre()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      lastComparison = Boolean.valueOf(isSetEnf()).compareTo(other.isSetEnf());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetEnf()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enf, other.enf);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetAce()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetAse()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
       return 0;
     }
 
@@ -14619,9 +8527,40 @@ import org.slf4j.LoggerFactory;
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("updateResourceScheduleing_result(");
+      StringBuilder sb = new StringBuilder("launchExperiment_result(");
       boolean first = true;
 
+      sb.append("ire:");
+      if (this.ire == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.ire);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("enf:");
+      if (this.enf == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.enf);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("ace:");
+      if (this.ace == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.ace);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("ase:");
+      if (this.ase == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.ase);
+      }
+      first = false;
       sb.append(")");
       return sb.toString();
     }
@@ -14647,15 +8586,15 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    private static class updateResourceScheduleing_resultStandardSchemeFactory implements SchemeFactory {
-      public updateResourceScheduleing_resultStandardScheme getScheme() {
-        return new updateResourceScheduleing_resultStandardScheme();
+    private static class launchExperiment_resultStandardSchemeFactory implements SchemeFactory {
+      public launchExperiment_resultStandardScheme getScheme() {
+        return new launchExperiment_resultStandardScheme();
       }
     }
 
-    private static class updateResourceScheduleing_resultStandardScheme extends StandardScheme<updateResourceScheduleing_result> {
+    private static class launchExperiment_resultStandardScheme extends StandardScheme<launchExperiment_result> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, updateResourceScheduleing_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, launchExperiment_result struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -14665,6 +8604,42 @@ import org.slf4j.LoggerFactory;
             break;
           }
           switch (schemeField.id) {
+            case 1: // IRE
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
+                struct.ire.read(iprot);
+                struct.setIreIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            case 2: // ENF
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.enf = new org.apache.airavata.api.error.ExperimentNotFoundException();
+                struct.enf.read(iprot);
+                struct.setEnfIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            case 3: // ACE
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.ace = new org.apache.airavata.api.error.AiravataClientException();
+                struct.ace.read(iprot);
+                struct.setAceIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            case 4: // ASE
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
+                struct.ase.read(iprot);
+                struct.setAseIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
             default:
               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
           }
@@ -14676,56 +8651,120 @@ import org.slf4j.LoggerFactory;
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, updateResourceScheduleing_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, launchExperiment_result struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
+        if (struct.ire != null) {
+          oprot.writeFieldBegin(IRE_FIELD_DESC);
+          struct.ire.write(oprot);
+          oprot.writeFieldEnd();
+        }
+        if (struct.enf != null) {
+          oprot.writeFieldBegin(ENF_FIELD_DESC);
+          struct.enf.write(oprot);
+          oprot.writeFieldEnd();
+        }
+        if (struct.ace != null) {
+          oprot.writeFieldBegin(ACE_FIELD_DESC);
+          struct.ace.write(oprot);
+          oprot.writeFieldEnd();
+        }
+        if (struct.ase != null) {
+          oprot.writeFieldBegin(ASE_FIELD_DESC);
+          struct.ase.write(oprot);
+          oprot.writeFieldEnd();
+        }
         oprot.writeFieldStop();
         oprot.writeStructEnd();
       }
 
     }
 
-    private static class updateResourceScheduleing_resultTupleSchemeFactory implements SchemeFactory {
-      public updateResourceScheduleing_resultTupleScheme getScheme() {
-        return new updateResourceScheduleing_resultTupleScheme();
+    private static class launchExperiment_resultTupleSchemeFactory implements SchemeFactory {
+      public launchExperiment_resultTupleScheme getScheme() {
+        return new launchExperiment_resultTupleScheme();
       }
     }
 
-    private static class updateResourceScheduleing_resultTupleScheme extends TupleScheme<updateResourceScheduleing_result> {
+    private static class launchExperiment_resultTupleScheme extends TupleScheme<launchExperiment_result> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, updateResourceScheduleing_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, launchExperiment_result struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
+        BitSet optionals = new BitSet();
+        if (struct.isSetIre()) {
+          optionals.set(0);
+        }
+        if (struct.isSetEnf()) {
+          optionals.set(1);
+        }
+        if (struct.isSetAce()) {
+          optionals.set(2);
+        }
+        if (struct.isSetAse()) {
+          optionals.set(3);
+        }
+        oprot.writeBitSet(optionals, 4);
+        if (struct.isSetIre()) {
+          struct.ire.write(oprot);
+        }
+        if (struct.isSetEnf()) {
+          struct.enf.write(oprot);
+        }
+        if (struct.isSetAce()) {
+          struct.ace.write(oprot);
+        }
+        if (struct.isSetAse()) {
+          struct.ase.write(oprot);
+        }
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, updateResourceScheduleing_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, launchExperiment_result struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
+        BitSet incoming = iprot.readBitSet(4);
+        if (incoming.get(0)) {
+          struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
+          struct.ire.read(iprot);
+          struct.setIreIsSet(true);
+        }
+        if (incoming.get(1)) {
+          struct.enf = new org.apache.airavata.api.error.ExperimentNotFoundException();
+          struct.enf.read(iprot);
+          struct.setEnfIsSet(true);
+        }
+        if (incoming.get(2)) {
+          struct.ace = new org.apache.airavata.api.error.AiravataClientException();
+          struct.ace.read(iprot);
+          struct.setAceIsSet(true);
+        }
+        if (incoming.get(3)) {
+          struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
+          struct.ase.read(iprot);
+          struct.setAseIsSet(true);
+        }
       }
     }
 
   }
 
-  public static class launchExperiment_args implements org.apache.thrift.TBase<launchExperiment_args, launchExperiment_args._Fields>, java.io.Serializable, Cloneable, Comparable<launchExperiment_args>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("launchExperiment_args");
+  public static class getExperimentStatus_args implements org.apache.thrift.TBase<getExperimentStatus_args, getExperimentStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<getExperimentStatus_args>   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExperimentStatus_args");
 
     private static final org.apache.thrift.protocol.TField AIRAVATA_EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataExperimentId", org.apache.thrift.protocol.TType.STRING, (short)1);
-    private static final org.apache.thrift.protocol.TField AIRAVATA_CRED_STORE_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataCredStoreToken", org.apache.thrift.protocol.TType.STRING, (short)2);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new launchExperiment_argsStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new launchExperiment_argsTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new getExperimentStatus_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new getExperimentStatus_argsTupleSchemeFactory());
     }
 
     public String airavataExperimentId; // required
-    public String airavataCredStoreToken; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      AIRAVATA_EXPERIMENT_ID((short)1, "airavataExperimentId"),
-      AIRAVATA_CRED_STORE_TOKEN((short)2, "airavataCredStoreToken");
+      AIRAVATA_EXPERIMENT_ID((short)1, "airavataExperimentId");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -14742,8 +8781,6 @@ import org.slf4j.LoggerFactory;
         switch(fieldId) {
           case 1: // AIRAVATA_EXPERIMENT_ID
             return AIRAVATA_EXPERIMENT_ID;
-          case 2: // AIRAVATA_CRED_STORE_TOKEN
-            return AIRAVATA_CRED_STORE_TOKEN;
           default:
             return null;
         }
@@ -14789,91 +8826,59 @@ import org.slf4j.LoggerFactory;
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.AIRAVATA_EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("airavataExperimentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
-      tmpMap.put(_Fields.AIRAVATA_CRED_STORE_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("airavataCredStoreToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(launchExperiment_args.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExperimentStatus_args.class, metaDataMap);
     }
 
-    public launchExperiment_args() {
+    public getExperimentStatus_args() {
     }
 
-    public launchExperiment_args(
-      String airavataExperimentId,
-      String airavataCredStoreToken)
+    public getExperimentStatus_args(
+      String airavataExperimentId)
     {
       this();
       this.airavataExperimentId = airavataExperimentId;
-      this.airavataCredStoreToken = airavataCredStoreToken;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public launchExperiment_args(launchExperiment_args other) {
+    public getExperimentStatus_args(getExperimentStatus_args other) {
       if (other.isSetAiravataExperimentId()) {
         this.airavataExperimentId = other.airavataExperimentId;
       }
-      if (other.isSetAiravataCredStoreToken()) {
-        this.airavataCredStoreToken = other.airavataCredStoreToken;
-      }
     }
 
-    public launchExperiment_args deepCopy() {
-      return new launchExperiment_args(this);
+    public getExperimentStatus_args deepCopy() {
+      return new getExperimentStatus_args(this);
     }
 
     @Override
     public void clear() {
-      this.airavataExperimentId = null;
-      this.airavataCredStoreToken = null;
-    }
-
-    public String getAiravataExperimentId() {
-      return this.airavataExperimentId;
-    }
-
-    public launchExperiment_args setAiravataExperimentId(String airavataExperimentId) {
-      this.airavataExperimentId = airavataExperimentId;
-      return this;
-    }
-
-    public void unsetAiravataExperimentId() {
-      this.airavataExperimentId = null;
-    }
-
-    /** Returns true if field airavataExperimentId is set (has been assigned a value) and false otherwise */
-    public boolean isSetAiravataExperimentId() {
-      return this.airavataExperimentId != null;
-    }
-
-    public void setAiravataExperimentIdIsSet(boolean value) {
-      if (!value) {
-        this.airavataExperimentId = null;
-      }
+      this.airavataExperimentId = null;
     }
 
-    public String getAiravataCredStoreToken() {
-      return this.airavataCredStoreToken;
+    public String getAiravataExperimentId() {
+      return this.airavataExperimentId;
     }
 
-    public launchExperiment_args setAiravataCredStoreToken(String airavataCredStoreToken) {
-      this.airavataCredStoreToken = airavataCredStoreToken;
+    public getExperimentStatus_args setAiravataExperimentId(String airavataExperimentId) {
+      this.airavataExperimentId = airavataExperimentId;
       return this;
     }
 
-    public void unsetAiravataCredStoreToken() {
-      this.airavataCredStoreToken = null;
+    public void unsetAiravataExperimentId() {
+      this.airavataExperimentId = null;
     }
 
-    /** Returns true if field airavataCredStoreToken is set (has been assigned a value) and false otherwise */
-    public boolean isSetAiravataCredStoreToken() {
-      return this.airavataCredStoreToken != null;
+    /** Returns true if field airavataExperimentId is set (has been assigned a value) and false otherwise */
+    public boolean isSetAiravataExperimentId() {
+      return this.airavataExperimentId != null;
     }
 
-    public void setAiravataCredStoreTokenIsSet(boolean value) {
+    public void setAiravataExperimentIdIsSet(boolean value) {
       if (!value) {
-        this.airavataCredStoreToken = null;
+        this.airavataExperimentId = null;
       }
     }
 
@@ -14887,14 +8892,6 @@ import org.slf4j.LoggerFactory;
         }
         break;
 
-      case AIRAVATA_CRED_STORE_TOKEN:
-        if (value == null) {
-          unsetAiravataCredStoreToken();
-        } else {
-          setAiravataCredStoreToken((String)value);
-        }
-        break;
-
       }
     }
 
@@ -14903,9 +8900,6 @@ import org.slf4j.LoggerFactory;
       case AIRAVATA_EXPERIMENT_ID:
         return getAiravataExperimentId();
 
-      case AIRAVATA_CRED_STORE_TOKEN:
-        return getAiravataCredStoreToken();
-
       }
       throw new IllegalStateException();
     }
@@ -14919,8 +8913,6 @@ import org.slf4j.LoggerFactory;
       switch (field) {
       case AIRAVATA_EXPERIMENT_ID:
         return isSetAiravataExperimentId();
-      case AIRAVATA_CRED_STORE_TOKEN:
-        return isSetAiravataCredStoreToken();
       }
       throw new IllegalStateException();
     }
@@ -14929,12 +8921,12 @@ import org.slf4j.LoggerFactory;
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof launchExperiment_args)
-        return this.equals((launchExperiment_args)that);
+      if (that instanceof getExperimentStatus_args)
+        return this.equals((getExperimentStatus_args)that);
       return false;
     }
 
-    public boolean equals(launchExperiment_args that) {
+    public boolean equals(getExperimentStatus_args that) {
       if (that == null)
         return false;
 
@@ -14947,15 +8939,6 @@ import org.slf4j.LoggerFactory;
           return false;
       }
 
-      boolean this_present_airavataCredStoreToken = true && this.isSetAiravataCredStoreToken();
-      boolean that_present_airavataCredStoreToken = true && that.isSetAiravataCredStoreToken();
-      if (this_present_airavataCredStoreToken || that_present_airavataCredStoreToken) {
-        if (!(this_present_airavataCredStoreToken && that_present_airavataCredStoreToken))
-          return false;
-        if (!this.airavataCredStoreToken.equals(that.airavataCredStoreToken))
-          return false;
-      }
-
       return true;
     }
 
@@ -14965,7 +8948,7 @@ import org.slf4j.LoggerFactory;
     }
 
     @Override
-    public int compareTo(launchExperiment_args other) {
+    public int compareTo(getExperimentStatus_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
@@ -14982,16 +8965,6 @@ import org.slf4j.LoggerFactory;
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetAiravataCredStoreToken()).compareTo(other.isSetAiravataCredStoreToken());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetAiravataCredStoreToken()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataCredStoreToken, other.airavataCredStoreToken);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
       return 0;
     }
 
@@ -15009,7 +8982,7 @@ import org.slf4j.LoggerFactory;
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("launchExperiment_args(");
+      StringBuilder sb = new StringBuilder("getExperimentStatus_args(");
       boolean first = true;
 
       sb.append("airavataExperimentId:");
@@ -15019,14 +8992,6 @@ import org.slf4j.LoggerFactory;
         sb.append(this.airavataExperimentId);
       }
       first = false;
-      if (!first) sb.append(", ");
-      sb.append("airavataCredStoreToken:");
-      if (this.airavataCredStoreToken == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.airavataCredStoreToken);
-      }
-      first = false;
       sb.append(")");
       return sb.toString();
     }
@@ -15036,9 +9001,6 @@ import org.slf4j.LoggerFactory;
       if (airavataExperimentId == null) {
         throw new org.apache.thrift.protocol.TProtocolException("Required field 'airavataExperimentId' was not present! Struct: " + toString());
       }
-      if (airavataCredStoreToken == null) {
-        throw new org.apache.thrift.protocol.TProtocolException("Required field 'airavataCredStoreToken' was not present! Struct: " + toString());
-      }
       // check for sub-struct validity
     }
 
@@ -15058,15 +9020,15 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    private static class launchExperiment_argsStandardSchemeFactory implements SchemeFactory {
-      public launchExperiment_argsStandardScheme getScheme() {
-        return new launchExperiment_argsStandardScheme();
+    private static class getExperimentStatus_argsStandardSchemeFactory implements SchemeFactory {
+      public getExperimentStatus_argsStandardScheme getScheme() {
+        return new getExperimentStatus_argsStandardScheme();
       }
     }
 
-    private static class launchExperiment_argsStandardScheme extends StandardScheme<launchExperiment_args> {
+    private static class getExperimentStatus_argsStandardScheme extends StandardScheme<getExperimentStatus_args> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, launchExperiment_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, getExperimentStatus_args struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -15084,14 +9046,6 @@ import org.slf4j.LoggerFactory;
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
               }
               break;
-            case 2: // AIRAVATA_CRED_STORE_TOKEN
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
-                struct.airavataCredStoreToken = iprot.readString();
-                struct.setAiravataCredStoreTokenIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
             default:
               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
           }
@@ -15103,7 +9057,7 @@ import org.slf4j.LoggerFactory;
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, launchExperiment_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, getExperimentStatus_args struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
@@ -15112,47 +9066,40 @@ import org.slf4j.LoggerFactory;
           oprot.writeString(struct.airavataExperimentId);
           oprot.writeFieldEnd();
         }
-        if (struct.airavataCredStoreToken != null) {
-          oprot.writeFieldBegin(AIRAVATA_CRED_STORE_TOKEN_FIELD_DESC);
-          oprot.writeString(struct.airavataCredStoreToken);
-          oprot.writeFieldEnd();
-        }
         oprot.writeFieldStop();
         oprot.writeStructEnd();
       }
 
     }
 
-    private static class launchExperiment_argsTupleSchemeFactory implements SchemeFactory {
-      public launchExperiment_argsTupleScheme getScheme() {
-        return new launchExperiment_argsTupleScheme();
+    private static class getExperimentStatus_argsTupleSchemeFactory implements SchemeFactory {
+      public getExperimentStatus_argsTupleScheme getScheme() {
+        return new getExperimentStatus_argsTupleScheme();
       }
     }
 
-    private static class launchExperiment_argsTupleScheme extends TupleScheme<launchExperiment_args> {
+    private static class getExperimentStatus_argsTupleScheme extends TupleScheme<getExperimentStatus_args> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, launchExperiment_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, getExperimentStatus_args struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         oprot.writeString(struct.airavataExperimentId);
-        oprot.writeString(struct.airavataCredStoreToken);
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, launchExperiment_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, getExperimentStatus_args struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
         struct.airavataExperimentId = iprot.readString();
         struct.setAiravataExperimentIdIsSet(true);
-        struct.airavataCredStoreToken = iprot.readString();
-        struct.setAiravataCredStoreTokenIsSet(true);
       }
     }
 
   }
 
-  public static class launchExperiment_result implements org.apache.thrift.TBase<launchExperiment_result, launchExperiment_result._Fields>, java.io.Serializable, Cloneable, Comparable<launchExperiment_result>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("launchExperiment_result");
+  public static class getExperimentStatus_result implements org.apache.thrift.TBase<getExperimentStatus_result, getExperimentStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<getExperimentStatus_result>   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExperimentStatus_result");
 
+    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
     private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
     private static final org.apache.thrift.protocol.TField ENF_FIELD_DESC = new org.apache.thrift.protocol.TField("enf", org.apache.thrift.protocol.TType.STRUCT, (short)2);
     private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)3);
@@ -15160,10 +9107,11 @@ import org.slf4j.LoggerFactory;
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new launchExperiment_resultStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new launchExperiment_resultTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new getExperimentStatus_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new getExperimentStatus_resultTupleSchemeFactory());
     }
 
+    public org.apache.airavata.model.workspace.experiment.ExperimentStatus success; // required
     public org.apache.airavata.api.error.InvalidRequestException ire; // required
     public org.apache.airavata.api.error.ExperimentNotFoundException enf; // required
     public org.apache.airavata.api.error.AiravataClientException ace; // required
@@ -15171,6 +9119,7 @@ import org.slf4j.LoggerFactory;
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+      SUCCESS((short)0, "success"),
       IRE((short)1, "ire"),
       ENF((short)2, "enf"),
       ACE((short)3, "ace"),
@@ -15189,6 +9138,8 @@ import org.slf4j.LoggerFactory;
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
+          case 0: // SUCCESS
+            return SUCCESS;
           case 1: // IRE
             return IRE;
           case 2: // ENF
@@ -15240,6 +9191,8 @@ import org.slf4j.LoggerFactory;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.ExperimentStatus.class)));
       tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
       tmpMap.put(_Fields.ENF, new org.apache.thrift.meta_data.FieldMetaData("enf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
@@ -15249,19 +9202,21 @@ import org.slf4j.LoggerFactory;
       tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(launchExperiment_result.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExperimentStatus_result.class, metaDataMap);
     }
 
-    public launchExperiment_result() {
+    public getExperimentStatus_result() {
     }
 
-    public launchExperiment_result(
+    public getExperimentStatus_result(
+      org.apache.airavata.model.workspace.experiment.ExperimentStatus success,
       org.apache.airavata.api.error.InvalidRequestException ire,
       org.apache.airavata.api.error.ExperimentNotFoundException enf,
       org.apache.airavata.api.error.AiravataClientException ace,
       org.apache.airavata.api.error.AiravataSystemException ase)
     {
       this();
+      this.success = success;
       this.ire = ire;
       this.enf = enf;
       this.ace = ace;
@@ -15271,7 +9226,10 @@ import org.slf4j.LoggerFactory;
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public launchExperiment_result(launchExperiment_result other) {
+    public getExperimentStatus_result(getExperimentStatus_result other) {
+      if (other.isSetSuccess()) {
+        this.success = new org.apache.airavata.model.workspace.experiment.ExperimentStatus(other.success);
+      }
       if (other.isSetIre()) {
         this.ire = new org.apache.airavata.api.error.InvalidRequestException(other.ire);
       }
@@ -15286,23 +9244,48 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    public launchExperiment_result deepCopy() {
-      return new launchExperiment_result(this);
+    public getExperimentStatus_result deepCopy() {
+      return new getExperimentStatus_result(this);
     }
 
     @Override
     public void clear() {
+      this.success = null;
       this.ire = null;
       this.enf = null;
       this.ace = null;
       this.ase = null;
     }
 
+    public org.apache.airavata.model.workspace.experiment.ExperimentStatus getSuccess() {
+      return this.success;
+    }
+
+    public getExperimentStatus_result setSuccess(org.apache.airavata.model.workspace.experiment.ExperimentStatus success) {
+      this.success = success;
+      return this;
+    }
+
+    public void unsetSuccess() {
+      this.success = null;
+    }
+
+    /** Returns true if field success is set (has been assigned a value) and false otherwise */
+    public boolean isSetSuccess() {
+      return this.success != null;
+    }
+
+    public void setSuccessIsSet(boolean value) {
+      if (!value) {
+        this.success = null;
+      }
+    }
+
     public org.apache.airavata.api.error.InvalidRequestException getIre() {
       return this.ire;
     }
 
-    public launchExperiment_result setIre(org.apache.airavata.api.error.InvalidRequestException ire) {
+    public getExperimentStatus_result setIre(org.apache.airavata.api.error.InvalidRequestException ire) {
       this.ire = ire;
       return this;
     }
@@ -15326,7 +9309,7 @@ import org.slf4j.LoggerFactory;
       return this.enf;
     }
 
-    public launchExperiment_result setEnf(org.apache.airavata.api.error.ExperimentNotFoundException enf) {
+    public getExperimentStatus_result setEnf(org.apache.airavata.api.error.ExperimentNotFoundException enf) {
       this.enf = enf;
       return this;
     }
@@ -15350,7 +9333,7 @@ import org.slf4j.LoggerFactory;
       return this.ace;
     }
 
-    public launchExperiment_result setAce(org.apache.airavata.api.error.AiravataClientException ace) {
+    public getExperimentStatus_result setAce(org.apache.airavata.api.error.AiravataClientException ace) {
       this.ace = ace;
       return this;
     }
@@ -15374,7 +9357,7 @@ import org.slf4j.LoggerFactory;
       return this.ase;
     }
 
-    public launchExperiment_result setAse(org.apache.airavata.api.error.AiravataSystemException ase) {
+    public getExperimentStatus_result setAse(org.apache.airavata.api.error.AiravataSystemException ase) {
       this.ase = ase;
       return this;
     }
@@ -15396,6 +9379,14 @@ import org.slf4j.LoggerFactory;
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
+      case SUCCESS:
+        if (value == null) {
+          unsetSuccess();
+        } else {
+          setSuccess((org.apache.airavata.model.workspace.experiment.ExperimentStatus)value);
+        }
+        break;
+
       case IRE:
         if (value == null) {
           unsetIre();
@@ -15433,6 +9424,9 @@ import org.slf4j.LoggerFactory;
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
+      case SUCCESS:
+        return getSuccess();
+
       case IRE:
         return getIre();
 
@@ -15456,6 +9450,8 @@ import org.slf4j.LoggerFactory;
       }
 
       switch (field) {
+      case SUCCESS:
+        return isSetSuccess();
       case IRE:
         return isSetIre();
       case ENF:
@@ -15472,15 +9468,24 @@ import org.slf4j.LoggerFactory;
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof launchExperiment_result)
-        return this.equals((launchExperiment_result)that);
+      if (that instanceof getExperimentStatus_result)
+        return this.equals((getExperimentStatus_result)that);
       return false;
     }
 
-    public boolean equals(launchExperiment_result that) {
+    public boolean equals(getExperimentStatus_result that) {
       if (that == null)
         return false;
 
+      boolean this_present_success = true && this.isSetSuccess();
+      boolean that_present_success = true && that.isSetSuccess();
+      if (this_present_success || that_present_success) {
+        if (!(this_present_success && that_present_success))
+          return false;
+        if (!this.success.equals(that.success))
+          return false;
+      }
+
       boolean this_present_ire = true && this.isSetIre();
       boolean that_present_ire = true && that.isSetIre();
       if (this_present_ire || that_present_ire) {
@@ -15526,13 +9531,23 @@ import org.slf4j.LoggerFactory;
     }
 
     @Override
-    public int compareTo(launchExperiment_result other) {
+    public int compareTo(getExperimentStatus_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
 
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetSuccess()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
       lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
       if (lastComparison != 0) {
         return lastComparison;
@@ -15590,9 +9605,17 @@ import org.slf4j.LoggerFactory;
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("launchExperiment_result(");
+      StringBuilder sb = new StringBuilder("getExperimentStatus_result(");
       boolean first = true;
 
+      sb.append("success:");
+      if (this.success == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.success);
+      }
+      first = false;
+      if (!first) sb.append(", ");
       sb.append("ire:");
       if (this.ire == null) {
         sb.append("null");
@@ -15631,6 +9654,9 @@ import org.slf4j.LoggerFactory;
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
       // check for sub-struct validity
+      if (success != null) {
+        success.validate();
+      }
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -15649,15 +9675,15 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    private static class launchExperiment_resultStandardSchemeFactory implements SchemeFactory {
-      public launchExperiment_resultStandardScheme getScheme() {
-        return new launchExperiment_resultStandardScheme();
+    private static class getExperimentStatus_resultStandardSchemeFactory implements SchemeFactory {
+      public getExperimentStatus_resultStandardScheme getScheme() {
+        return new getExperimentStatus_resultStandardScheme();
       }
     }
 
-    private static class launchExperiment_resultStandardScheme extends StandardScheme<launchExperiment_result> {
+    private static class getExperimentStatus_resultStandardScheme extends StandardScheme<getExperimentStatus_result> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, launchExperiment_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, getExperimentStatus_result struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -15667,6 +9693,15 @@ import org.slf4j.LoggerFactory;
             break;
           }
           switch (schemeField.id) {
+            case 0: // SUCCESS
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.success = new org.apache.airavata.model.workspace.experiment.ExperimentStatus();
+                struct.success.read(iprot);
+                struct.setSuccessIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
             case 1: // IRE
               if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                 struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
@@ -15714,10 +9749,15 @@ import org.slf4j.LoggerFactory;
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, launchExperiment_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, getExperimentStatus_result struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
+        if (struct.success != null) {
+          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
+          struct.success.write(oprot);
+          oprot.writeFieldEnd();
+        }
         if (struct.ire != null) {
           oprot.writeFieldBegin(IRE_FIELD_DESC);
           struct.ire.write(oprot);
@@ -15744,31 +9784,37 @@ import org.slf4j.LoggerFactory;
 
     }
 
-    private static class launchExperiment_resultTupleSchemeFactory implements SchemeFactory {
-      public launchExperiment_resultTupleScheme getScheme() {
-        return new launchExperiment_resultTupleScheme();
+    private static class getExperimentStatus_resultTupleSchemeFactory implements SchemeFactory {
+      public getExperimentStatus_resultTupleScheme getScheme() {
+        return new getExperimentStatus_resultTupleScheme();
       }
     }
 
-    private static class launchExperiment_resultTupleScheme extends TupleScheme<launchExperiment_result> {
+    private static class getExperimentStatus_resultTupleScheme extends TupleScheme<getExperimentStatus_result> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, launchExperiment_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, getExperimentStatus_result struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         BitSet optionals = new BitSet();
-        if (struct.isSetIre()) {
+        if (struct.isSetSuccess()) {
           optionals.set(0);
         }
-        if (struct.isSetEnf()) {
+        if (struct.isSetIre()) {
           optionals.set(1);
         }
-        if (struct.isSetAce()) {
+        if (struct.isSetEnf()) {
           optionals.set(2);
         }
-        if (struct.isSetAse()) {
+        if (struct.isSetAce()) {
           optionals.set(3);
         }
-        oprot.writeBitSet(optionals, 4);
+        if (struct.isSetAse()) {
+          optionals.set(4);
+        }
+        oprot.writeBitSet(optionals, 5);
+        if (struct.isSetSuccess()) {
+          struct.success.write(oprot);
+        }
         if (struct.isSetIre()) {
           struct.ire.write(oprot);
         }
@@ -15784,25 +9830,30 @@ import org.slf4j.LoggerFactory;
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, launchExperiment_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, getExperimentStatus_result struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
-        BitSet incoming = iprot.readBitSet(4);
+        BitSet incoming = iprot.readBitSet(5);
         if (incoming.get(0)) {
+          struct.success = new org.apache.airavata.model.workspace.experiment.ExperimentStatus();
+          struct.success.read(iprot);
+          struct.setSuccessIsSet(true);
+        }
+        if (incoming.get(1)) {
           struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
           struct.ire.read(iprot);
           struct.setIreIsSet(true);
         }
-        if (incoming.get(1)) {
+        if (incoming.get(2)) {
           struct.enf = new org.apache.airavata.api.error.ExperimentNotFoundException();
           struct.enf.read(iprot);
           struct.setEnfIsSet(true);
         }
-        if (incoming.get(2)) {
+        if (incoming.get(3)) {
           struct.ace = new org.apache.airavata.api.error.AiravataClientException();
           struct.ace.read(iprot);
           struct.setAceIsSet(true);
         }
-        if (incoming.get(3)) {
+        if (incoming.get(4)) {
           struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
           struct.ase.read(iprot);
           struct.setAseIsSet(true);
@@ -15812,15 +9863,15 @@ import org.slf4j.LoggerFactory;
 
   }
 
-  public static class getExperimentStatus_args implements org.apache.thrift.TBase<getExperimentStatus_args, getExperimentStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<getExperimentStatus_args>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExperimentStatus_args");
+  public static class getExperimentOutputs_args implements org.apache.thrift.TBase<getExperimentOutputs_args, getExperimentOutputs_args._Fields>, java.io.Serializable, Cloneable, Comparable<getExperimentOutputs_args>   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExperimentOutputs_args");
 
     private static final org.apache.thrift.protocol.TField AIRAVATA_EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataExperimentId", org.apache.thrift.protocol.TType.STRING, (short)1);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new getExperimentStatus_argsStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new getExperimentStatus_argsTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new getExperimentOutputs_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new getExperimentOutputs_argsTupleSchemeFactory());
     }
 
     public String airavataExperimentId; // required
@@ -15890,13 +9941,13 @@ import org.slf4j.LoggerFactory;
       tmpMap.put(_Fields.AIRAVATA_EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("airavataExperimentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExperimentStatus_args.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExperimentOutputs_args.class, metaDataMap);
     }
 
-    public getExperimentStatus_args() {
+    public getExperimentOutputs_args() {
     }
 
-    public getExperimentStatus_args(
+    public getExperimentOutputs_args(
       String airavataExperimentId)
     {
       this();
@@ -15906,14 +9957,14 @@ import org.slf4j.LoggerFactory;
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public getExperimentStatus_args(getExperimentStatus_args other) {
+    public getExperimentOutputs_args(getExperimentOutputs_args other) {
       if (other.isSetAiravataExperimentId()) {
         this.airavataExperimentId = other.airavataExperimentId;
       }
     }
 
-    public getExperimentStatus_args deepCopy() {
-      return new getExperimentStatus_args(this);
+    public getExperimentOutputs_args deepCopy() {
+      return new getExperimentOutputs_args(this);
     }
 
     @Override
@@ -15925,7 +9976,7 @@ import org.slf4j.LoggerFactory;
       return this.airavataExperimentId;
     }
 
-    public getExperimentStatus_args setAiravataExperimentId(String airavataExperimentId) {
+    public getExperimentOutputs_args setAiravataExperimentId(String airavataExperimentId) {
       this.airavataExperimentId = airavataExperimentId;
       return this;
     }
@@ -15984,12 +10035,12 @@ import org.slf4j.LoggerFactory;
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof getExperimentStatus_args)
-        return this.equals((getExperimentStatus_args)that);
+      if (that instanceof getExperimentOutputs_args)
+        return this.equals((getExperimentOutputs_args)that);
       return false;
     }
 
-    public boolean equals(getExperimentStatus_args that) {
+    public boolean equals(getExperimentOutputs_args that) {
       if (that == null)
         return false;
 
@@ -16011,7 +10062,7 @@ import org.slf4j.LoggerFactory;
     }
 
     @Override
-    public int compareTo(getExperimentStatus_args other) {
+    public int compareTo(getExperimentOutputs_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
@@ -16045,7 +10096,7 @@ import org.slf4j.LoggerFactory;
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("getExperimentStatus_args(");
+      StringBuilder sb = new StringBuilder("getExperimentOutputs_args(");
       boolean first = true;
 
       sb.append("airavataExperimentId:");
@@ -16083,15 +10134,15 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    private static class getExperimentStatus_argsStandardSchemeFactory implements SchemeFactory {
-      public getExperimentStatus_argsStandardScheme getScheme() {
-        return new getExperimentStatus_argsStandardScheme();
+    private static class getExperimentOutputs_argsStandardSchemeFactory implements SchemeFactory {
+      public getExperimentOutputs_argsStandardScheme getScheme() {
+        return new getExperimentOutputs_argsStandardScheme();
       }
     }
 
-    private static class getExperimentStatus_argsStandardScheme extends StandardScheme<getExperimentStatus_args> {
+    private static class getExperimentOutputs_argsStandardScheme extends StandardScheme<getExperimentOutputs_args> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, getExperimentStatus_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, getExperimentOutputs_args struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -16120,7 +10171,7 @@ import org.slf4j.LoggerFactory;
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, getExperimentStatus_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, getExperimentOutputs_args struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
@@ -16135,22 +10186,22 @@ import org.slf4j.LoggerFactory;
 
     }
 
-    private static class getExperimentStatus_argsTupleSchemeFactory implements SchemeFactory {
-      public getExperimentStatus_argsTupleScheme getScheme() {
-        return new getExperimentStatus_argsTupleScheme();
+    private static class getExperimentOutputs_argsTupleSchemeFactory implements SchemeFactory {
+      public getExperimentOutputs_argsTupleScheme getScheme() {
+        return new getExperimentOutputs_argsTupleScheme();
       }
     }
 
-    private static class getExperimentStatus_argsTupleScheme extends TupleScheme<getExperimentStatus_args> {
+    private static class getExperimentOutputs_argsTupleScheme extends TupleScheme<getExperimentOutputs_args> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, getExperimentStatus_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, getExperimentOutputs_args struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         oprot.writeString(struct.airavataExperimentId);
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, getExperimentStatus_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, getExperimentOutputs_args struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
         struct.airavataExperimentId = iprot.readString();
         struct.setAiravataExperimentIdIsSet(true);
@@ -16159,34 +10210,22 @@ import org.slf4j.LoggerFactory;
 
   }
 
-  public static class getExperimentStatus_result implements org.apache.thrift.TBase<getExperimentStatus_result, getExperimentStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<getExperimentStatus_result>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExperimentStatus_result");
+  public static class getExperimentOutputs_result implements org.apache.thrift.TBase<getExperimentOutputs_result, getExperimentOutputs_result._Fields>, java.io.Serializable, Cloneable, Comparable<getExperimentOutputs_result>   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExperimentOutputs_result");
 
-    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
-    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
-    private static final org.apache.thrift.protocol.TField ENF_FIELD_DESC = new org.apache.thrift.protocol.TField("enf", org.apache.thrift.protocol.TType.STRUCT, (short)2);
-    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)3);
-    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)4);
+    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new getExperimentStatus_resultStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new getExperimentStatus_resultTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new getExperimentOutputs_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new getExperimentOutputs_resultTupleSchemeFactory());
     }
 
-    public org.apache.airavata.model.workspace.experiment.ExperimentStatus success; // required
-    public org.apache.airavata.api.error.InvalidRequestException ire; // required
-    public org.apache.airavata.api.error.ExperimentNotFoundException enf; // required
-    public org.apache.airavata.api.error.AiravataClientException ace; // required
-    public org.apache.airavata.api.error.AiravataSystemException ase; // required
+    public List<org.apache.airavata.model.workspace.experiment.DataObjectType> success; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      SUCCESS((short)0, "success"),
-      IRE((short)1, "ire"),
-      ENF((short)2, "enf"),
-      ACE((short)3, "ace"),
-      ASE((short)4, "ase");
+      SUCCESS((short)0, "success");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -16203,14 +10242,6 @@ import org.slf4j.LoggerFactory;
         switch(fieldId) {
           case 0: // SUCCESS
             return SUCCESS;
-          case 1: // IRE
-            return IRE;
-          case 2: // ENF
-            return ENF;
-          case 3: // ACE
-            return ACE;
-          case 4: // ASE
-            return ASE;
           default:
             return null;
         }
@@ -16236,207 +10267,99 @@ import org.slf4j.LoggerFactory;
       private final short _thriftId;
       private final String _fieldName;
 
-      _Fields(short thriftId, String fieldName) {
-        _thriftId = thriftId;
-        _fieldName = fieldName;
-      }
-
-      public short getThriftFieldId() {
-        return _thriftId;
-      }
-
-      public String getFieldName() {
-        return _fieldName;
-      }
-    }
-
-    // isset id assignments
-    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
-    static {
-      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.ExperimentStatus.class)));
-      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
-      tmpMap.put(_Fields.ENF, new org.apache.thrift.meta_data.FieldMetaData("enf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
-      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
-      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
-      metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExperimentStatus_result.class, metaDataMap);
-    }
-
-    public getExperimentStatus_result() {
-    }
-
-    public getExperimentStatus_result(
-      org.apache.airavata.model.workspace.experiment.ExperimentStatus success,
-      org.apache.airavata.api.error.InvalidRequestException ire,
-      org.apache.airavata.api.error.ExperimentNotFoundException enf,
-      org.apache.airavata.api.error.AiravataClientException ace,
-      org.apache.airavata.api.error.AiravataSystemException ase)
-    {
-      this();
-      this.success = success;
-      this.ire = ire;
-      this.enf = enf;
-      this.ace = ace;
-      this.ase = ase;
-    }
-
-    /**
-     * Performs a deep copy on <i>other</i>.
-     */
-    public getExperimentStatus_result(getExperimentStatus_result other) {
-      if (other.isSetSuccess()) {
-        this.success = new org.apache.airavata.model.workspace.experiment.ExperimentStatus(other.success);
-      }
-      if (other.isSetIre()) {
-        this.ire = new org.apache.airavata.api.error.InvalidRequestException(other.ire);
-      }
-      if (other.isSetEnf()) {
-        this.enf = new org.apache.airavata.api.error.ExperimentNotFoundException(other.enf);
-      }
-      if (other.isSetAce()) {
-        this.ace = new org.apache.airavata.api.error.AiravataClientException(other.ace);
-      }
-      if (other.isSetAse()) {
-        this.ase = new org.apache.airavata.api.error.AiravataSystemException(other.ase);
-      }
-    }
-
-    public getExperimentStatus_result deepCopy() {
-      return new getExperimentStatus_result(this);
-    }
-
-    @Override
-    public void clear() {
-      this.success = null;
-      this.ire = null;
-      this.enf = null;
-      this.ace = null;
-      this.ase = null;
-    }
-
-    public org.apache.airavata.model.workspace.experiment.ExperimentStatus getSuccess() {
-      return this.success;
-    }
-
-    public getExperimentStatus_result setSuccess(org.apache.airavata.model.workspace.experiment.ExperimentStatus success) {
-      this.success = success;
-      return this;
-    }
-
-    public void unsetSuccess() {
-      this.success = null;
-    }
-
-    /** Returns true if field success is set (has been assigned a value) and false otherwise */
-    public boolean isSetSuccess() {
-      return this.success != null;
-    }
-
-    public void setSuccessIsSet(boolean value) {
-      if (!value) {
-        this.success = null;
-      }
-    }
-
-    public org.apache.airavata.api.error.InvalidRequestException getIre() {
-      return this.ire;
-    }
-
-    public getExperimentStatus_result setIre(org.apache.airavata.api.error.InvalidRequestException ire) {
-      this.ire = ire;
-      return this;
-    }
-
-    public void unsetIre() {
-      this.ire = null;
-    }
-
-    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
-    public boolean isSetIre() {
-      return this.ire != null;
-    }
+      _Fields(short thriftId, String fieldName) {
+        _thriftId = thriftId;
+        _fieldName = fieldName;
+      }
 
-    public void setIreIsSet(boolean value) {
-      if (!value) {
-        this.ire = null;
+      public short getThriftFieldId() {
+        return _thriftId;
       }
-    }
 
-    public org.apache.airavata.api.error.ExperimentNotFoundException getEnf() {
-      return this.enf;
+      public String getFieldName() {
+        return _fieldName;
+      }
     }
 
-    public getExperimentStatus_result setEnf(org.apache.airavata.api.error.ExperimentNotFoundException enf) {
-      this.enf = enf;
-      return this;
+    // isset id assignments
+    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+    static {
+      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
+              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.DataObjectType.class))));
+      metaDataMap = Collections.unmodifiableMap(tmpMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExperimentOutputs_result.class, metaDataMap);
     }
 
-    public void unsetEnf() {
-      this.enf = null;
+    public getExperimentOutputs_result() {
     }
 
-    /** Returns true if field enf is set (has been assigned a value) and false otherwise */
-    public boolean isSetEnf() {
-      return this.enf != null;
+    public getExperimentOutputs_result(
+      List<org.apache.airavata.model.workspace.experiment.DataObjectType> success)
+    {
+      this();
+      this.success = success;
     }
 
-    public void setEnfIsSet(boolean value) {
-      if (!value) {
-        this.enf = null;
+    /**
+     * Performs a deep copy on <i>other</i>.
+     */
+    public getExperimentOutputs_result(getExperimentOutputs_result other) {
+      if (other.isSetSuccess()) {
+        List<org.apache.airavata.model.workspace.experiment.DataObjectType> __this__success = new ArrayList<org.apache.airavata.model.workspace.experiment.DataObjectType>(other.success.size());
+        for (org.apache.airavata.model.workspace.experiment.DataObjectType other_element : other.success) {
+          __this__success.add(new org.apache.airavata.model.workspace.experiment.DataObjectType(other_element));
+        }
+        this.success = __this__success;
       }
     }
 
-    public org.apache.airavata.api.error.AiravataClientException getAce() {
-      return this.ace;
+    public getExperimentOutputs_result deepCopy() {
+      return new getExperimentOutputs_result(this);
     }
 
-    public getExperimentStatus_result setAce(org.apache.airavata.api.error.AiravataClientException ace) {
-      this.ace = ace;
-      return this;
+    @Override
+    public void clear() {
+      this.success = null;
     }
 
-    public void unsetAce() {
-      this.ace = null;
+    public int getSuccessSize() {
+      return (this.success == null) ? 0 : this.success.size();
     }
 
-    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
-    public boolean isSetAce() {
-      return this.ace != null;
+    public java.util.Iterator<org.apache.airavata.model.workspace.experiment.DataObjectType> getSuccessIterator() {
+      return (this.success == null) ? null : this.success.iterator();
     }
 
-    public void setAceIsSet(boolean value) {
-      if (!value) {
-        this.ace = null;
+    public void addToSuccess(org.apache.airavata.model.workspace.experiment.DataObjectType elem) {
+      if (this.success == null) {
+        this.success = new ArrayList<org.apache.airavata.model.workspace.experiment.DataObjectType>();
       }
+      this.success.add(elem);
     }
 
-    public org.apache.airavata.api.error.AiravataSystemException getAse() {
-      return this.ase;
+    public List<org.apache.airavata.model.workspace.experiment.DataObjectType> getSuccess() {
+      return this.success;
     }
 
-    public getExperimentStatus_result setAse(org.apache.airavata.api.error.AiravataSystemException ase) {
-      this.ase = ase;
+    public getExperimentOutputs_result setSuccess(List<org.apache.airavata.model.workspace.experiment.DataObjectType> success) {
+      this.success = success;
       return this;
     }
 
-    public void unsetAse() {
-      this.ase = null;
+    public void unsetSuccess() {
+      this.success = null;
     }
 
-    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
-    public boolean isSetAse() {
-      return this.ase != null;
+    /** Returns true if field success is set (has been assigned a value) and false otherwise */
+    public boolean isSetSuccess() {
+      return this.success != null;
     }
 
-    public void setAseIsSet(boolean value) {
+    public void setSuccessIsSet(boolean value) {
       if (!value) {
-        this.ase = null;
+        this.success = null;
       }
     }
 
@@ -16446,39 +10369,7 @@ import org.slf4j.LoggerFactory;
         if (value == null) {
           unsetSuccess();
         } else {
-          setSuccess((org.apache.airavata.model.workspace.experiment.ExperimentStatus)value);
-        }
-        break;
-
-      case IRE:
-        if (value == null) {
-          unsetIre();
-        } else {
-          setIre((org.apache.airavata.api.error.InvalidRequestException)value);
-        }
-        break;
-
-      case ENF:
-        if (value == null) {
-          unsetEnf();
-        } else {
-          setEnf((org.apache.airavata.api.error.ExperimentNotFoundException)value);
-        }
-        break;
-
-      case ACE:
-        if (value == null) {
-          unsetAce();
-        } else {
-          setAce((org.apache.airavata.api.error.AiravataClientException)value);
-        }
-        break;
-
-      case ASE:
-        if (value == null) {
-          unsetAse();
-        } else {
-          setAse((org.apache.airavata.api.error.AiravataSystemException)value);
+          setSuccess((List<org.apache.airavata.model.workspace.experiment.DataObjectType>)value);
         }
         break;
 
@@ -16490,18 +10381,6 @@ import org.slf4j.LoggerFactory;
       case SUCCESS:
         return getSuccess();
 
-      case IRE:
-        return getIre();
-
-      case ENF:
-        return getEnf();
-
-      case ACE:
-        return getAce();
-
-      case ASE:
-        return getAse();
-
       }
       throw new IllegalStateException();
     }
@@ -16515,14 +10394,6 @@ import org.slf4j.LoggerFactory;
       switch (field) {
       case SUCCESS:
         return isSetSuccess();
-      case IRE:
-        return isSetIre();
-      case ENF:
-        return isSetEnf();
-      case ACE:
-        return isSetAce();
-      case ASE:
-        return isSetAse();
       }
       throw new IllegalStateException();
     }
@@ -16531,122 +10402,46 @@ import org.slf4j.LoggerFactory;
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof getExperimentStatus_result)
-        return this.equals((getExperimentStatus_result)that);
+      if (that instanceof getExperimentOutputs_result)
+        return this.equals((getExperimentOutputs_result)that);
       return false;
     }
 
-    public boolean equals(getExperimentStatus_result that) {
+    public boolean equals(getExperimentOutputs_result that) {
       if (that == null)
         return false;
 
       boolean this_present_success = true && this.isSetSuccess();
-      boolean that_present_success = true && that.isSetSuccess();
-      if (this_present_success || that_present_success) {
-        if (!(this_present_success && that_present_success))
-          return false;
-        if (!this.success.equals(that.success))
-          return false;
-      }
-
-      boolean this_present_ire = true && this.isSetIre();
-      boolean that_present_ire = true && that.isSetIre();
-      if (this_present_ire || that_present_ire) {
-        if (!(this_present_ire && that_present_ire))
-          return false;
-        if (!this.ire.equals(that.ire))
-          return false;
-      }
-
-      boolean this_present_enf = true && this.isSetEnf();
-      boolean that_present_enf = true && that.isSetEnf();
-      if (this_present_enf || that_present_enf) {
-        if (!(this_present_enf && that_present_enf))
-          return false;
-        if (!this.enf.equals(that.enf))
-          return false;
-      }
-
-      boolean this_present_ace = true && this.isSetAce();
-      boolean that_present_ace = true && that.isSetAce();
-      if (this_present_ace || that_present_ace) {
-        if (!(this_present_ace && that_present_ace))
-          return false;
-        if (!this.ace.equals(that.ace))
-          return false;
-      }
-
-      boolean this_present_ase = true && this.isSetAse();
-      boolean that_present_ase = true && that.isSetAse();
-      if (this_present_ase || that_present_ase) {
-        if (!(this_present_ase && that_present_ase))
-          return false;
-        if (!this.ase.equals(that.ase))
-          return false;
-      }
-
-      return true;
-    }
-
-    @Override
-    public int hashCode() {
-      return 0;
-    }
-
-    @Override
-    public int compareTo(getExperimentStatus_result other) {
-      if (!getClass().equals(other.getClass())) {
-        return getClass().getName().compareTo(other.getClass().getName());
-      }
-
-      int lastComparison = 0;
-
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetIre()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      lastComparison = Boolean.valueOf(isSetEnf()).compareTo(other.isSetEnf());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetEnf()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enf, other.enf);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
-      if (lastComparison != 0) {
-        return lastComparison;
+      boolean that_present_success = true && that.isSetSuccess();
+      if (this_present_success || that_present_success) {
+        if (!(this_present_success && that_present_success))
+          return false;
+        if (!this.success.equals(that.success))
+          return false;
       }
-      if (isSetAce()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
+
+      return true;
+    }
+
+    @Override
+    public int hashCode() {
+      return 0;
+    }
+
+    @Override
+    public int compareTo(getExperimentOutputs_result other) {
+      if (!getClass().equals(other.getClass())) {
+        return getClass().getName().compareTo(other.getClass().getName());
       }
-      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
+
+      int lastComparison = 0;
+
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      if (isSetAse()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
+      if (isSetSuccess()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -16668,7 +10463,7 @@ import org.slf4j.LoggerFactory;
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("getExperimentStatus_result(");
+      StringBuilder sb = new StringBuilder("getExperimentOutputs_result(");
       boolean first = true;
 
       sb.append("success:");
@@ -16678,38 +10473,6 @@ import org.slf4j.LoggerFactory;
         sb.append(this.success);
       }
       first = false;
-      if (!first) sb.append(", ");
-      sb.append("ire:");
-      if (this.ire == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.ire);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("enf:");
-      if (this.enf == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.enf);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("ace:");
-      if (this.ace == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.ace);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("ase:");
-      if (this.ase == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.ase);
-      }
-      first = false;
       sb.append(")");
       return sb.toString();
     }
@@ -16717,9 +10480,6 @@ import org.slf4j.LoggerFactory;
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
       // check for sub-struct validity
-      if (success != null) {
-        success.validate();
-      }
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -16738,15 +10498,15 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    private static class getExperimentStatus_resultStandardSchemeFactory implements SchemeFactory {
-      public getExperimentStatus_resultStandardScheme getScheme() {
-        return new getExperimentStatus_resultStandardScheme();
+    private static class getExperimentOutputs_resultStandardSchemeFactory implements SchemeFactory {
+      public getExperimentOutputs_resultStandardScheme getScheme() {
+        return new getExperimentOutputs_resultStandardScheme();
       }
     }
 
-    private static class getExperimentStatus_resultStandardScheme extends StandardScheme<getExperimentStatus_result> {
+    private static class getExperimentOutputs_resultStandardScheme extends StandardScheme<getExperimentOutputs_result> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, getExperimentStatus_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, getExperimentOutputs_result struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -16757,50 +10517,24 @@ import org.slf4j.LoggerFactory;
           }
           switch (schemeField.id) {
             case 0: // SUCCESS
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.success = new org.apache.airavata.model.workspace.experiment.ExperimentStatus();
-                struct.success.read(iprot);
+              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
+                {
+                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
+                  struct.success = new ArrayList<org.apache.airavata.model.workspace.experiment.DataObjectType>(_list0.size);
+                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
+                  {
+                    org.apache.airavata.model.workspace.experiment.DataObjectType _elem2;
+                    _elem2 = new org.apache.airavata.model.workspace.experiment.DataObjectType();
+                    _elem2.read(iprot);
+                    struct.success.add(_elem2);
+                  }
+                  iprot.readListEnd();
+                }
                 struct.setSuccessIsSet(true);
               } else { 
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
               }
               break;
-            case 1: // IRE
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
-                struct.ire.read(iprot);
-                struct.setIreIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
-            case 2: // ENF
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.enf = new org.apache.airavata.api.error.ExperimentNotFoundException();
-                struct.enf.read(iprot);
-                struct.setEnfIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
-            case 3: // ACE
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.ace = new org.apache.airavata.api.error.AiravataClientException();
-                struct.ace.read(iprot);
-                struct.setAceIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
-            case 4: // ASE
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
-                struct.ase.read(iprot);
-                struct.setAseIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
             default:
               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
           }
@@ -16812,33 +10546,20 @@ import org.slf4j.LoggerFactory;
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, getExperimentStatus_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, getExperimentOutputs_result struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
         if (struct.success != null) {
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-          struct.success.write(oprot);
-          oprot.writeFieldEnd();
-        }
-        if (struct.ire != null) {
-          oprot.writeFieldBegin(IRE_FIELD_DESC);
-          struct.ire.write(oprot);
-          oprot.writeFieldEnd();
-        }
-        if (struct.enf != null) {
-          oprot.writeFieldBegin(ENF_FIELD_DESC);
-          struct.enf.write(oprot);
-          oprot.writeFieldEnd();
-        }
-        if (struct.ace != null) {
-          oprot.writeFieldBegin(ACE_FIELD_DESC);
-          struct.ace.write(oprot);
-          oprot.writeFieldEnd();
-        }
-        if (struct.ase != null) {
-          oprot.writeFieldBegin(ASE_FIELD_DESC);
-          struct.ase.write(oprot);
+          {
+            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
+            for (org.apache.airavata.model.workspace.experiment.DataObjectType _iter3 : struct.success)
+            {
+              _iter3.write(oprot);
+            }
+            oprot.writeListEnd();
+          }
           oprot.writeFieldEnd();
         }
         oprot.writeFieldStop();
@@ -16847,101 +10568,72 @@ import org.slf4j.LoggerFactory;
 
     }
 
-    private static class getExperimentStatus_resultTupleSchemeFactory implements SchemeFactory {
-      public getExperimentStatus_resultTupleScheme getScheme() {
-        return new getExperimentStatus_resultTupleScheme();
+    private static class getExperimentOutputs_resultTupleSchemeFactory implements SchemeFactory {
+      public getExperimentOutputs_resultTupleScheme getScheme() {
+        return new getExperimentOutputs_resultTupleScheme();
       }
     }
 
-    private static class getExperimentStatus_resultTupleScheme extends TupleScheme<getExperimentStatus_result> {
+    private static class getExperimentOutputs_resultTupleScheme extends TupleScheme<getExperimentOutputs_result> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, getExperimentStatus_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, getExperimentOutputs_result struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         BitSet optionals = new BitSet();
         if (struct.isSetSuccess()) {
           optionals.set(0);
         }
-        if (struct.isSetIre()) {
-          optionals.set(1);
-        }
-        if (struct.isSetEnf()) {
-          optionals.set(2);
-        }
-        if (struct.isSetAce()) {
-          optionals.set(3);
-        }
-        if (struct.isSetAse()) {
-          optionals.set(4);
-        }
-        oprot.writeBitSet(optionals, 5);
+        oprot.writeBitSet(optionals, 1);
         if (struct.isSetSuccess()) {
-          struct.success.write(oprot);
-        }
-        if (struct.isSetIre()) {
-          struct.ire.write(oprot);
-        }
-        if (struct.isSetEnf()) {
-          struct.enf.write(oprot);
-        }
-        if (struct.isSetAce()) {
-          struct.ace.write(oprot);
-        }
-        if (struct.isSetAse()) {
-          struct.ase.write(oprot);
+          {
+            oprot.writeI32(struct.success.size());
+            for (org.apache.airavata.model.workspace.experiment.DataObjectType _iter4 : struct.success)
+            {
+              _iter4.write(oprot);
+            }
+          }
         }
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, getExperimentStatus_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, getExperimentOutputs_result struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
-        BitSet incoming = iprot.readBitSet(5);
+        BitSet incoming = iprot.readBitSet(1);
         if (incoming.get(0)) {
-          struct.success = new org.apache.airavata.model.workspace.experiment.ExperimentStatus();
-          struct.success.read(iprot);
+          {
+            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
+            struct.success = new ArrayList<org.apache.airavata.model.workspace.experiment.DataObjectType>(_list5.size);
+            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
+            {
+              org.apache.airavata.model.workspace.experiment.DataObjectType _elem7;
+              _elem7 = new org.apache.airavata.model.workspace.experiment.DataObjectType();
+              _elem7.read(iprot);
+              struct.success.add(_elem7);
+            }
+          }
           struct.setSuccessIsSet(true);
         }
-        if (incoming.get(1)) {
-          struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
-          struct.ire.read(iprot);
-          struct.setIreIsSet(true);
-        }
-        if (incoming.get(2)) {
-          struct.enf = new org.apache.airavata.api.error.ExperimentNotFoundException();
-          struct.enf.read(iprot);
-          struct.setEnfIsSet(true);
-        }
-        if (incoming.get(3)) {
-          struct.ace = new org.apache.airavata.api.error.AiravataClientException();
-          struct.ace.read(iprot);
-          struct.setAceIsSet(true);
-        }
-        if (incoming.get(4)) {
-          struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
-          struct.ase.read(iprot);
-          struct.setAseIsSet(true);
-        }
       }
     }
 
   }
 
-  public static class getExperimentOutputs_args implements org.apache.thrift.TBase<getExperimentOutputs_args, getExperimentOutputs_args._Fields>, java.io.Serializable, Cloneable, Comparable<getExperimentOutputs_args>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExperimentOutputs_args");
+  public static class getJobStatus_args implements org.apache.thrift.TBase<getJobStatus_args, getJobStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<getJobStatus_args>   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getJobStatus_args");
 
-    private static final org.apache.thrift.protocol.TField AIRAVATA_EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataExperimentId", org.apache.thrift.protocol.TType.STRING, (short)1);
+    private static final org.apache.thrift.protocol.TField RESOURCE_JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceJobId", org.apache.thrift.protocol.TType.STRING, (short)1);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new getExperimentOutputs_argsStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new getExperimentOutputs_argsTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new getJobStatus_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new getJobStatus_argsTupleSchemeFactory());
     }
 
-    public String airavataExperimentId; // required
+    public String resourceJobId; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      AIRAVATA_EXPERIMENT_ID((short)1, "airavataExperimentId");
+      RESOURCE_JOB_ID((short)1, "resourceJobId");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -16956,8 +10648,8 @@ import org.slf4j.LoggerFactory;
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
-          case 1: // AIRAVATA_EXPERIMENT_ID
-            return AIRAVATA_EXPERIMENT_ID;
+          case 1: // RESOURCE_JOB_ID
+            return RESOURCE_JOB_ID;
           default:
             return null;
         }
@@ -17001,71 +10693,71 @@ import org.slf4j.LoggerFactory;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.AIRAVATA_EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("airavataExperimentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
+      tmpMap.put(_Fields.RESOURCE_JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("resourceJobId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExperimentOutputs_args.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getJobStatus_args.class, metaDataMap);
     }
 
-    public getExperimentOutputs_args() {
+    public getJobStatus_args() {
     }
 
-    public getExperimentOutputs_args(
-      String airavataExperimentId)
+    public getJobStatus_args(
+      String resourceJobId)
     {
       this();
-      this.airavataExperimentId = airavataExperimentId;
+      this.resourceJobId = resourceJobId;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public getExperimentOutputs_args(getExperimentOutputs_args other) {
-      if (other.isSetAiravataExperimentId()) {
-        this.airavataExperimentId = other.airavataExperimentId;
+    public getJobStatus_args(getJobStatus_args other) {
+      if (other.isSetResourceJobId()) {
+        this.resourceJobId = other.resourceJobId;
       }
     }
 
-    public getExperimentOutputs_args deepCopy() {
-      return new getExperimentOutputs_args(this);
+    public getJobStatus_args deepCopy() {
+      return new getJobStatus_args(this);
     }
 
     @Override
     public void clear() {
-      this.airavataExperimentId = null;
+      this.resourceJobId = null;
     }
 
-    public String getAiravataExperimentId() {
-      return this.airavataExperimentId;
+    public String getResourceJobId() {
+      return this.resourceJobId;
     }
 
-    public getExperimentOutputs_args setAiravataExperimentId(String airavataExperimentId) {
-      this.airavataExperimentId = airavataExperimentId;
+    public getJobStatus_args setResourceJobId(String resourceJobId) {
+      this.resourceJobId = resourceJobId;
       return this;
     }
 
-    public void unsetAiravataExperimentId() {
-      this.airavataExperimentId = null;
+    public void unsetResourceJobId() {
+      this.resourceJobId = null;
     }
 
-    /** Returns true if field airavataExperimentId is set (has been assigned a value) and false otherwise */
-    public boolean isSetAiravataExperimentId() {
-      return this.airavataExperimentId != null;
+    /** Returns true if field resourceJobId is set (has been assigned a value) and false otherwise */
+    public boolean isSetResourceJobId() {
+      return this.resourceJobId != null;
     }
 
-    public void setAiravataExperimentIdIsSet(boolean value) {
+    public void setResourceJobIdIsSet(boolean value) {
       if (!value) {
-        this.airavataExperimentId = null;
+        this.resourceJobId = null;
       }
     }
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
-      case AIRAVATA_EXPERIMENT_ID:
+      case RESOURCE_JOB_ID:
         if (value == null) {
-          unsetAiravataExperimentId();
+          unsetResourceJobId();
         } else {
-          setAiravataExperimentId((String)value);
+          setResourceJobId((String)value);
         }
         break;
 
@@ -17074,8 +10766,8 @@ import org.slf4j.LoggerFactory;
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
-      case AIRAVATA_EXPERIMENT_ID:
-        return getAiravataExperimentId();
+      case RESOURCE_JOB_ID:
+        return getResourceJobId();
 
       }
       throw new IllegalStateException();
@@ -17088,8 +10780,8 @@ import org.slf4j.LoggerFactory;
       }
 
       switch (field) {
-      case AIRAVATA_EXPERIMENT_ID:
-        return isSetAiravataExperimentId();
+      case RESOURCE_JOB_ID:
+        return isSetResourceJobId();
       }
       throw new IllegalStateException();
     }
@@ -17098,21 +10790,21 @@ import org.slf4j.LoggerFactory;
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof getExperimentOutputs_args)
-        return this.equals((getExperimentOutputs_args)that);
+      if (that instanceof getJobStatus_args)
+        return this.equals((getJobStatus_args)that);
       return false;
     }
 
-    public boolean equals(getExperimentOutputs_args that) {
+    public boolean equals(getJobStatus_args that) {
       if (that == null)
         return false;
 
-      boolean this_present_airavataExperimentId = true && this.isSetAiravataExperimentId();
-      boolean that_present_airavataExperimentId = true && that.isSetAiravataExperimentId();
-      if (this_present_airavataExperimentId || that_present_airavataExperimentId) {
-        if (!(this_present_airavataExperimentId && that_present_airavataExperimentId))
+      boolean this_present_resourceJobId = true && this.isSetResourceJobId();
+      boolean that_present_resourceJobId = true && that.isSetResourceJobId();
+      if (this_present_resourceJobId || that_present_resourceJobId) {
+        if (!(this_present_resourceJobId && that_present_resourceJobId))
           return false;
-        if (!this.airavataExperimentId.equals(that.airavataExperimentId))
+        if (!this.resourceJobId.equals(that.resourceJobId))
           return false;
       }
 
@@ -17125,19 +10817,19 @@ import org.slf4j.LoggerFactory;
     }
 
     @Override
-    public int compareTo(getExperimentOutputs_args other) {
+    public int compareTo(getJobStatus_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
 
-      lastComparison = Boolean.valueOf(isSetAiravataExperimentId()).compareTo(other.isSetAiravataExperimentId());
+      lastComparison = Boolean.valueOf(isSetResourceJobId()).compareTo(other.isSetResourceJobId());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      if (isSetAiravataExperimentId()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataExperimentId, other.airavataExperimentId);
+      if (isSetResourceJobId()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceJobId, other.resourceJobId);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -17159,14 +10851,14 @@ import org.slf4j.LoggerFactory;
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("getExperimentOutputs_args(");
+      StringBuilder sb = new StringBuilder("getJobStatus_args(");
       boolean first = true;
 
-      sb.append("airavataExperimentId:");
-      if (this.airavataExperimentId == null) {
+      sb.append("resourceJobId:");
+      if (this.resourceJobId == null) {
         sb.append("null");
       } else {
-        sb.append(this.airavataExperimentId);
+        sb.append(this.resourceJobId);
       }
       first = false;
       sb.append(")");
@@ -17175,8 +10867,8 @@ import org.slf4j.LoggerFactory;
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
-      if (airavataExperimentId == null) {
-        throw new org.apache.thrift.protocol.TProtocolException("Required field 'airavataExperimentId' was not present! Struct: " + toString());
+      if (resourceJobId == null) {
+        throw new org.apache.thrift.protocol.TProtocolException("Required field 'resourceJobId' was not present! Struct: " + toString());
       }
       // check for sub-struct validity
     }
@@ -17197,15 +10889,15 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    private static class getExperimentOutputs_argsStandardSchemeFactory implements SchemeFactory {
-      public getExperimentOutputs_argsStandardScheme getScheme() {
-        return new getExperimentOutputs_argsStandardScheme();
+    private static class getJobStatus_argsStandardSchemeFactory implements SchemeFactory {
+      public getJobStatus_argsStandardScheme getScheme() {
+        return new getJobStatus_argsStandardScheme();
       }
     }
 
-    private static class getExperimentOutputs_argsStandardScheme extends StandardScheme<getExperimentOutputs_args> {
+    private static class getJobStatus_argsStandardScheme extends StandardScheme<getJobStatus_args> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, getExperimentOutputs_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, getJobStatus_args struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -17215,10 +10907,10 @@ import org.slf4j.LoggerFactory;
             break;
           }
           switch (schemeField.id) {
-            case 1: // AIRAVATA_EXPERIMENT_ID
+            case 1: // RESOURCE_JOB_ID
               if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
-                struct.airavataExperimentId = iprot.readString();
-                struct.setAiravataExperimentIdIsSet(true);
+                struct.resourceJobId = iprot.readString();
+                struct.setResourceJobIdIsSet(true);
               } else { 
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
               }
@@ -17234,13 +10926,13 @@ import org.slf4j.LoggerFactory;
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, getExperimentOutputs_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, getJobStatus_args struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        if (struct.airavataExperimentId != null) {
-          oprot.writeFieldBegin(AIRAVATA_EXPERIMENT_ID_FIELD_DESC);
-          oprot.writeString(struct.airavataExperimentId);
+        if (struct.resourceJobId != null) {
+          oprot.writeFieldBegin(RESOURCE_JOB_ID_FIELD_DESC);
+          oprot.writeString(struct.resourceJobId);
           oprot.writeFieldEnd();
         }
         oprot.writeFieldStop();
@@ -17249,42 +10941,42 @@ import org.slf4j.LoggerFactory;
 
     }
 
-    private static class getExperimentOutputs_argsTupleSchemeFactory implements SchemeFactory {
-      public getExperimentOutputs_argsTupleScheme getScheme() {
-        return new getExperimentOutputs_argsTupleScheme();
+    private static class getJobStatus_argsTupleSchemeFactory implements SchemeFactory {
+      public getJobStatus_argsTupleScheme getScheme() {
+        return new getJobStatus_argsTupleScheme();
       }
     }
 
-    private static class getExperimentOutputs_argsTupleScheme extends TupleScheme<getExperimentOutputs_args> {
+    private static class getJobStatus_argsTupleScheme extends TupleScheme<getJobStatus_args> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, getExperimentOutputs_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, getJobStatus_args struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
-        oprot.writeString(struct.airavataExperimentId);
+        oprot.writeString(struct.resourceJobId);
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, getExperimentOutputs_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, getJobStatus_args struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
-        struct.airavataExperimentId = iprot.readString();
-        struct.setAiravataExperimentIdIsSet(true);
+        struct.resourceJobId = iprot.readString();
+        struct.setResourceJobIdIsSet(true);
       }
     }
 
   }
 
-  public static class getExperimentOutputs_result implements org.apache.thrift.TBase<getExperimentOutputs_result, getExperimentOutputs_result._Fields>, java.io.Serializable, Cloneable, Comparable<getExperimentOutputs_result>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExperimentOutputs_result");
+  public static class getJobStatus_result implements org.apache.thrift.TBase<getJobStatus_result, getJobStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<getJobStatus_result>   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getJobStatus_result");
 
-    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
+    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new getExperimentOutputs_resultStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new getExperimentOutputs_resultTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new getJobStatus_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new getJobStatus_resultTupleSchemeFactory());
     }
 
-    public List<org.apache.airavata.model.workspace.experiment.DataObjectType> success; // required
+    public org.apache.airavata.model.workspace.experiment.TaskStatus success; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
@@ -17349,17 +11041,16 @@ import org.slf4j.LoggerFactory;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
-              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.DataObjectType.class))));
+          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.TaskStatus.class)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExperimentOutputs_result.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getJobStatus_result.class, metaDataMap);
     }
 
-    public getExperimentOutputs_result() {
+    public getJobStatus_result() {
     }
 
-    public getExperimentOutputs_result(
-      List<org.apache.airavata.model.workspace.experiment.DataObjectType> success)
+    public getJobStatus_result(
+      org.apache.airavata.model.workspace.experiment.TaskStatus success)
     {
       this();
       this.success = success;
@@ -17368,18 +11059,14 @@ import org.slf4j.LoggerFactory;
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public getExperimentOutputs_result(getExperimentOutputs_result other) {
+    public getJobStatus_result(getJobStatus_result other) {
       if (other.isSetSuccess()) {
-        List<org.apache.airavata.model.workspace.experiment.DataObjectType> __this__success = new ArrayList<org.apache.airavata.model.workspace.experiment.DataObjectType>(other.success.size());
-        for (org.apache.airavata.model.workspace.experiment.DataObjectType other_element : other.success) {
-          __this__success.add(new org.apache.airavata.model.workspace.experiment.DataObjectType(other_element));
-        }
-        this.success = __this__success;
+        this.success = new org.apache.airavata.model.workspace.experiment.TaskStatus(other.success);
       }
     }
 
-    public getExperimentOutputs_result deepCopy() {
-      return new getExperimentOutputs_result(this);
+    public getJobStatus_result deepCopy() {
+      return new getJobStatus_result(this);
     }
 
     @Override
@@ -17387,26 +11074,11 @@ import org.slf4j.LoggerFactory;
       this.success = null;
     }
 
-    public int getSuccessSize() {
-      return (this.success == null) ? 0 : this.success.size();
-    }
-
-    public java.util.Iterator<org.apache.airavata.model.workspace.experiment.DataObjectType> getSuccessIterator() {
-      return (this.success == null) ? null : this.success.iterator();
-    }
-
-    public void addToSuccess(org.apache.airavata.model.workspace.experiment.DataObjectType elem) {
-      if (this.success == null) {
-        this.success = new ArrayList<org.apache.airavata.model.workspace.experiment.DataObjectType>();
-      }
-      this.success.add(elem);
-    }
-
-    public List<org.apache.airavata.model.workspace.experiment.DataObjectType> getSuccess() {
+    public org.apache.airavata.model.workspace.experiment.TaskStatus getSuccess() {
       return this.success;
     }
 
-    public getExperimentOutputs_result setSuccess(List<org.apache.airavata.model.workspace.experiment.DataObjectType> success) {
+    public getJobStatus_result setSuccess(org.apache.airavata.model.workspace.experiment.TaskStatus success) {
       this.success = success;
       return this;
     }
@@ -17432,7 +11104,7 @@ import org.slf4j.LoggerFactory;
         if (value == null) {
           unsetSuccess();
         } else {
-          setSuccess((List<org.apache.airavata.model.workspace.experiment.DataObjectType>)value);
+          setSuccess((org.apache.airavata.model.workspace.experiment.TaskStatus)value);
         }
         break;
 
@@ -17465,12 +11137,12 @@ import org.slf4j.LoggerFactory;
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof getExperimentOutputs_result)
-        return this.equals((getExperimentOutputs_result)that);
+      if (that instanceof getJobStatus_result)
+        return this.equals((getJobStatus_result)that);
       return false;
     }
 
-    public boolean equals(getExperimentOutputs_result that) {
+    public boolean equals(getJobStatus_result that) {
       if (that == null)
         return false;
 
@@ -17492,7 +11164,7 @@ import org.slf4j.LoggerFactory;
     }
 
     @Override
-    public int compareTo(getExperimentOutputs_result other) {
+    public int compareTo(getJobStatus_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
@@ -17526,7 +11198,7 @@ import org.slf4j.LoggerFactory;
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("getExperimentOutputs_result(");
+      StringBuilder sb = new StringBuilder("getJobStatus_result(");
       boolean first = true;
 
       sb.append("success:");
@@ -17543,6 +11215,9 @@ import org.slf4j.LoggerFactory;
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
       // check for sub-struct validity
+      if (success != null) {
+        success.validate();
+      }
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -17561,15 +11236,15 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    private static class getExperimentOutputs_resultStandardSchemeFactory implements SchemeFactory {
-      public getExperimentOutputs_resultStandardScheme getScheme() {
-        return new getExperimentOutputs_resultStandardScheme();
+    private static class getJobStatus_resultStandardSchemeFactory implements SchemeFactory {
+      public getJobStatus_resultStandardScheme getScheme() {
+        return new getJobStatus_resultStandardScheme();
       }
     }
 
-    private static class getExperimentOutputs_resultStandardScheme extends StandardScheme<getExperimentOutputs_result> {
+    private static class getJobStatus_resultStandardScheme extends StandardScheme<getJobStatus_result> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, getExperimentOutputs_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, getJobStatus_result struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -17580,19 +11255,9 @@ import org.slf4j.LoggerFactory;
           }
           switch (schemeField.id) {
             case 0: // SUCCESS
-              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
-                {
-                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
-                  struct.success = new ArrayList<org.apache.airavata.model.workspace.experiment.DataObjectType>(_list24.size);
-                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
-                  {
-                    org.apache.airavata.model.workspace.experiment.DataObjectType _elem26;
-                    _elem26 = new org.apache.airavata.model.workspace.experiment.DataObjectType();
-                    _elem26.read(iprot);
-                    struct.success.add(_elem26);
-                  }
-                  iprot.readListEnd();
-                }
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.success = new org.apache.airavata.model.workspace.experiment.TaskStatus();
+                struct.success.read(iprot);
                 struct.setSuccessIsSet(true);
               } else { 
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
@@ -17609,20 +11274,13 @@ import org.slf4j.LoggerFactory;
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, getExperimentOutputs_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, getJobStatus_result struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
         if (struct.success != null) {
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-          {
-            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (org.apache.airavata.model.workspace.experiment.DataObjectType _iter27 : struct.success)
-            {
-              _iter27.write(oprot);
-            }
-            oprot.writeListEnd();
-          }
+          struct.success.write(oprot);
           oprot.writeFieldEnd();
         }
         oprot.writeFieldStop();
@@ -17631,16 +11289,16 @@ import org.slf4j.LoggerFactory;
 
     }
 
-    private static class getExperimentOutputs_resultTupleSchemeFactory implements SchemeFactory {
-      public getExperimentOutputs_resultTupleScheme getScheme() {
-        return new getExperimentOutputs_resultTupleScheme();
+    private static class getJobStatus_resultTupleSchemeFactory implements SchemeFactory {
+      public getJobStatus_resultTupleScheme getScheme() {
+        return new getJobStatus_resultTupleScheme();
       }
     }
 
-    private static class getExperimentOutputs_resultTupleScheme extends TupleScheme<getExperimentOutputs_result> {
+    private static class getJobStatus_resultTupleScheme extends TupleScheme<getJobStatus_result> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, getExperimentOutputs_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, getJobStatus_result struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         BitSet optionals = new BitSet();
         if (struct.isSetSuccess()) {
@@ -17648,32 +11306,17 @@ import org.slf4j.LoggerFactory;
         }
         oprot.writeBitSet(optionals, 1);
         if (struct.isSetSuccess()) {
-          {
-            oprot.writeI32(struct.success.size());
-            for (org.apache.airavata.model.workspace.experiment.DataObjectType _iter28 : struct.success)
-            {
-              _iter28.write(oprot);
-            }
-          }
+          struct.success.write(oprot);
         }
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, getExperimentOutputs_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, getJobStatus_result struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
         BitSet incoming = iprot.readBitSet(1);
         if (incoming.get(0)) {
-          {
-            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new ArrayList<org.apache.airavata.model.workspace.experiment.DataObjectType>(_list29.size);
-            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
-            {
-              org.apache.airavata.model.workspace.experiment.DataObjectType _elem31;
-              _elem31 = new org.apache.airavata.model.workspace.experiment.DataObjectType();
-              _elem31.read(iprot);
-              struct.success.add(_elem31);
-            }
-          }
+          struct.success = new org.apache.airavata.model.workspace.experiment.TaskStatus();
+          struct.success.read(iprot);
           struct.setSuccessIsSet(true);
         }
       }
@@ -17681,22 +11324,25 @@ import org.slf4j.LoggerFactory;
 
   }
 
-  public static class getJobStatuses_args implements org.apache.thrift.TBase<getJobStatuses_args, getJobStatuses_args._Fields>, java.io.Serializable, Cloneable, Comparable<getJobStatuses_args>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getJobStatuses_args");
+  public static class cloneExperiment_args implements org.apache.thrift.TBase<cloneExperiment_args, cloneExperiment_args._Fields>, java.io.Serializable, Cloneable, Comparable<cloneExperiment_args>   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cloneExperiment_args");
 
-    private static final org.apache.thrift.protocol.TField AIRAVATA_EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataExperimentId", org.apache.thrift.protocol.TType.STRING, (short)1);
+    private static final org.apache.thrift.protocol.TField AIRAVATA_EXPERIMENT_ID_TO_BE_CLONED_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataExperimentIdToBeCloned", org.apache.thrift.protocol.TType.STRING, (short)1);
+    private static final org.apache.thrift.protocol.TField UPDATED_EXPERIMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("updatedExperiment", org.apache.thrift.protocol.TType.STRUCT, (short)2);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new getJobStatuses_argsStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new getJobStatuses_argsTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new cloneExperiment_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new cloneExperiment_argsTupleSchemeFactory());
     }
 
-    public String airavataExperimentId; // required
+    public String airavataExperimentIdToBeCloned; // required
+    public org.apache.airavata.model.workspace.experiment.Experiment updatedExperiment; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      AIRAVATA_EXPERIMENT_ID((short)1, "airavataExperimentId");
+      AIRAVATA_EXPERIMENT_ID_TO_BE_CLONED((short)1, "airavataExperimentIdToBeCloned"),
+      UPDATED_EXPERIMENT((short)2, "updatedExperiment");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -17711,8 +11357,10 @@ import org.slf4j.LoggerFactory;
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
-          case 1: // AIRAVATA_EXPERIMENT_ID
-            return AIRAVATA_EXPERIMENT_ID;
+          case 1: // AIRAVATA_EXPERIMENT_ID_TO_BE_CLONED
+            return AIRAVATA_EXPERIMENT_ID_TO_BE_CLONED;
+          case 2: // UPDATED_EXPERIMENT
+            return UPDATED_EXPERIMENT;
           default:
             return null;
         }
@@ -17756,71 +11404,111 @@ import org.slf4j.LoggerFactory;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.AIRAVATA_EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("airavataExperimentId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
+      tmpMap.put(_Fields.AIRAVATA_EXPERIMENT_ID_TO_BE_CLONED, new org.apache.thrift.meta_data.FieldMetaData("airavataExperimentIdToBeCloned", org.apache.thrift.TFieldRequirementType.DEFAULT, 
           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
+      tmpMap.put(_Fields.UPDATED_EXPERIMENT, new org.apache.thrift.meta_data.FieldMetaData("updatedExperiment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.Experiment.class)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getJobStatuses_args.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cloneExperiment_args.class, metaDataMap);
     }
 
-    public getJobStatuses_args() {
+    public cloneExperiment_args() {
     }
 
-    public getJobStatuses_args(
-      String airavataExperimentId)
+    public cloneExperiment_args(
+      String airavataExperimentIdToBeCloned,
+      org.apache.airavata.model.workspace.experiment.Experiment updatedExperiment)
     {
       this();
-      this.airavataExperimentId = airavataExperimentId;
+      this.airavataExperimentIdToBeCloned = airavataExperimentIdToBeCloned;
+      this.updatedExperiment = updatedExperiment;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public getJobStatuses_args(getJobStatuses_args other) {
-      if (other.isSetAiravataExperimentId()) {
-        this.airavataExperimentId = other.airavataExperimentId;
+    public cloneExperiment_args(cloneExperiment_args other) {
+      if (other.isSetAiravataExperimentIdToBeCloned()) {
+        this.airavataExperimentIdToBeCloned = other.airavataExperimentIdToBeCloned;
+      }
+      if (other.isSetUpdatedExperiment()) {
+        this.updatedExperiment = new org.apache.airavata.model.workspace.experiment.Experiment(other.updatedExperiment);
       }
     }
 
-    public getJobStatuses_args deepCopy() {
-      return new getJobStatuses_args(this);
+    public cloneExperiment_args deepCopy() {
+      return new cloneExperiment_args(this);
     }
 
     @Override
     public void clear() {
-      this.airavataExperimentId = null;
+      this.airavataExperimentIdToBeCloned = null;
+      this.updatedExperiment = null;
     }
 
-    public String getAiravataExperimentId() {
-      return this.airavataExperimentId;
+    public String getAiravataExperimentIdToBeCloned() {
+      return this.airavataExperimentIdToBeCloned;
     }
 
-    public getJobStatuses_args setAiravataExperimentId(String airavataExperimentId) {
-      this.airavataExperimentId = airavataExperimentId;
+    public cloneExperiment_args setAiravataExperimentIdToBeCloned(String airavataExperimentIdToBeCloned) {
+      this.airavataExperimentIdToBeCloned = airavataExperimentIdToBeCloned;
       return this;
     }
 
-    public void unsetAiravataExperimentId() {
-      this.airavataExperimentId = null;
+    public void unsetAiravataExperimentIdToBeCloned() {
+      this.airavataExperimentIdToBeCloned = null;
     }
 
-    /** Returns true if field airavataExperimentId is set (has been assigned a value) and false otherwise */
-    public boolean isSetAiravataExperimentId() {
-      return this.airavataExperimentId != null;
+    /** Returns true if field airavataExperimentIdToBeCloned is set (has been assigned a value) and false otherwise */
+    public boolean isSetAiravataExperimentIdToBeCloned() {
+      return this.airavataExperimentIdToBeCloned != null;
     }
 
-    public void setAiravataExperimentIdIsSet(boolean value) {
+    public void setAiravataExperimentIdToBeClonedIsSet(boolean value) {
       if (!value) {
-        this.airavataExperimentId = null;
+        this.airavataExperimentIdToBeCloned = null;
+      }
+    }
+
+    public org.apache.airavata.model.workspace.experiment.Experiment getUpdatedExperiment() {
+      return this.updatedExperiment;
+    }
+
+    public cloneExperiment_args setUpdatedExperiment(org.apache.airavata.model.workspace.experiment.Experiment updatedExperiment) {
+      this.updatedExperiment = updatedExperiment;
+      return this;
+    }
+
+    public void unsetUpdatedExperiment() {
+      this.updatedExperiment = null;
+    }
+
+    /** Returns true if field updatedExperiment is set (has been assigned a value) and false otherwise */
+    public boolean isSetUpdatedExperiment() {
+      return this.updatedExperiment != null;
+    }
+
+    public void setUpdatedExperimentIsSet(boolean value) {
+      if (!value) {
+        this.updatedExperiment = null;
       }
     }
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
-      case AIRAVATA_EXPERIMENT_ID:
+      case AIRAVATA_EXPERIMENT_ID_TO_BE_CLONED:
         if (value == null) {
-          unsetAiravataExperimentId();
+          unsetAiravataExperimentIdToBeCloned();
         } else {
-          setAiravataExperimentId((String)value);
+          setAiravataExperimentIdToBeCloned((String)value);
+        }
+        break;
+
+      case UPDATED_EXPERIMENT:
+        if (value == null) {
+          unsetUpdatedExperiment();
+        } else {
+          setUpdatedExperiment((org.apache.airavata.model.workspace.experiment.Experiment)value);
         }
         break;
 
@@ -17829,8 +11517,11 @@ import org.slf4j.LoggerFactory;
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
-      case AIRAVATA_EXPERIMENT_ID:
-        return getAiravataExperimentId();
+      case AIRAVATA_EXPERIMENT_ID_TO_BE_CLONED:
+        return getAiravataExperimentIdToBeCloned();
+
+      case UPDATED_EXPERIMENT:
+        return getUpdatedExperiment();
 
       }
       throw new IllegalStateException();
@@ -17843,8 +11534,10 @@ import org.slf4j.LoggerFactory;
       }
 
       switch (field) {
-      case AIRAVATA_EXPERIMENT_ID:
-        return isSetAiravataExperimentId();
+      case AIRAVATA_EXPERIMENT_ID_TO_BE_CLONED:
+        return isSetAiravataExperimentIdToBeCloned();
+      case UPDATED_EXPERIMENT:
+        return isSetUpdatedExperiment();
       }
       throw new IllegalStateException();
     }
@@ -17853,21 +11546,30 @@ import org.slf4j.LoggerFactory;
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof getJobStatuses_args)
-        return this.equals((getJobStatuses_args)that);
+      if (that instanceof cloneExperiment_args)
+        return this.equals((cloneExperiment_args)that);
       return false;
     }
 
-    public boolean equals(getJobStatuses_args that) {
+    public boolean equals(cloneExperiment_args that) {
       if (that == null)
         return false;
 
-      boolean this_present_airavataExperimentId = true && this.isSetAiravataExperimentId();
-      boolean that_present_airavataExperimentId = true && that.isSetAiravataExperimentId();
-      if (this_present_airavataExperimentId || that_present_airavataExperimentId) {
-        if (!(this_present_airavataExperimentId && that_present_airavataExperimentId))
+      boolean this_present_airavataExperimentIdToBeCloned = true && this.isSetAiravataExperimentIdToBeCloned();
+      boolean that_present_airavataExperimentIdToBeCloned = true && that.isSetAiravataExperimentIdToBeCloned();
+      if (this_present_airavataExperimentIdToBeCloned || that_present_airavataExperimentIdToBeCloned) {
+        if (!(this_present_airavataExperimentIdToBeCloned && that_present_airavataExperimentIdToBeCloned))
           return false;
-        if (!this.airavataExperimentId.equals(that.airavataExperimentId))
+        if (!this.airavataExperimentIdToBeCloned.equals(that.airavataExperimentIdToBeCloned))
+          return false;
+      }
+
+      boolean this_present_updatedExperiment = true && this.isSetUpdatedExperiment();
+      boolean that_present_updatedExperiment = true && that.isSetUpdatedExperiment();
+      if (this_present_updatedExperiment || that_present_updatedExperiment) {
+        if (!(this_present_updatedExperiment && that_present_updatedExperiment))
+          return false;
+        if (!this.updatedExperiment.equals(that.updatedExperiment))
           return false;
       }
 
@@ -17880,19 +11582,29 @@ import org.slf4j.LoggerFactory;
     }
 
     @Override
-    public int compareTo(getJobStatuses_args other) {
+    public int compareTo(cloneExperiment_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
 
-      lastComparison = Boolean.valueOf(isSetAiravataExperimentId()).compareTo(other.isSetAiravataExperimentId());
+      lastComparison = Boolean.valueOf(isSetAiravataExperimentIdToBeCloned()).compareTo(other.isSetAiravataExperimentIdToBeCloned());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      if (isSetAiravataExperimentId()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataExperimentId, other.airavataExperimentId);
+      if (isSetAiravataExperimentIdToBeCloned()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataExperimentIdToBeCloned, other.airavataExperimentIdToBeCloned);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      lastComparison = Boolean.valueOf(isSetUpdatedExperiment()).compareTo(other.isSetUpdatedExperiment());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetUpdatedExperiment()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatedExperiment, other.updatedExperiment);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -17914,14 +11626,22 @@ import org.slf4j.LoggerFactory;
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("getJobStatuses_args(");
+      StringBuilder sb = new StringBuilder("cloneExperiment_args(");
       boolean first = true;
 
-      sb.append("airavataExperimentId:");
-      if (this.airavataExperimentId == null) {
+      sb.append("airavataExperimentIdToBeCloned:");
+      if (this.airavataExperimentIdToBeCloned == null) {
         sb.append("null");
       } else {
-        sb.append(this.airavataExperimentId);
+        sb.append(this.airavataExperimentIdToBeCloned);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("updatedExperiment:");
+      if (this.updatedExperiment == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.updatedExperiment);
       }
       first = false;
       sb.append(")");
@@ -17930,10 +11650,10 @@ import org.slf4j.LoggerFactory;
 
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
-      if (airavataExperimentId == null) {
-        throw new org.apache.thrift.protocol.TProtocolException("Required field 'airavataExperimentId' was not present! Struct: " + toString());
-      }
       // check for sub-struct validity
+      if (updatedExperiment != null) {
+        updatedExperiment.validate();
+      }
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -17952,15 +11672,15 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    private static class getJobStatuses_argsStandardSchemeFactory implements SchemeFactory {
-      public getJobStatuses_argsStandardScheme getScheme() {
-        return new getJobStatuses_argsStandardScheme();
+    private static class cloneExperiment_argsStandardSchemeFactory implements SchemeFactory {
+      public cloneExperiment_argsStandardScheme getScheme() {
+        return new cloneExperiment_argsStandardScheme();
       }
     }
 
-    private static class getJobStatuses_argsStandardScheme extends StandardScheme<getJobStatuses_args> {
+    private static class cloneExperiment_argsStandardScheme extends StandardScheme<cloneExperiment_args> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, getJobStatuses_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, cloneExperiment_args struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -17970,10 +11690,19 @@ import org.slf4j.LoggerFactory;
             break;
           }
           switch (schemeField.id) {
-            case 1: // AIRAVATA_EXPERIMENT_ID
+            case 1: // AIRAVATA_EXPERIMENT_ID_TO_BE_CLONED
               if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
-                struct.airavataExperimentId = iprot.readString();
-                struct.setAiravataExperimentIdIsSet(true);
+                struct.airavataExperimentIdToBeCloned = iprot.readString();
+                struct.setAiravataExperimentIdToBeClonedIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            case 2: // UPDATED_EXPERIMENT
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.updatedExperiment = new org.apache.airavata.model.workspace.experiment.Experiment();
+                struct.updatedExperiment.read(iprot);
+                struct.setUpdatedExperimentIsSet(true);
               } else { 
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
               }
@@ -17989,13 +11718,18 @@ import org.slf4j.LoggerFactory;
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, getJobStatuses_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, cloneExperiment_args struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        if (struct.airavataExperimentId != null) {
-          oprot.writeFieldBegin(AIRAVATA_EXPERIMENT_ID_FIELD_DESC);
-          oprot.writeString(struct.airavataExperimentId);
+        if (struct.airavataExperimentIdToBeCloned != null) {
+          oprot.writeFieldBegin(AIRAVATA_EXPERIMENT_ID_TO_BE_CLONED_FIELD_DESC);
+          oprot.writeString(struct.airavataExperimentIdToBeCloned);
+          oprot.writeFieldEnd();
+        }
+        if (struct.updatedExperiment != null) {
+          oprot.writeFieldBegin(UPDATED_EXPERIMENT_FIELD_DESC);
+          struct.updatedExperiment.write(oprot);
           oprot.writeFieldEnd();
         }
         oprot.writeFieldStop();
@@ -18004,46 +11738,79 @@ import org.slf4j.LoggerFactory;
 
     }
 
-    private static class getJobStatuses_argsTupleSchemeFactory implements SchemeFactory {
-      public getJobStatuses_argsTupleScheme getScheme() {
-        return new getJobStatuses_argsTupleScheme();
+    private static class cloneExperiment_argsTupleSchemeFactory implements SchemeFactory {
+      public cloneExperiment_argsTupleScheme getScheme() {
+        return new cloneExperiment_argsTupleScheme();
       }
     }
 
-    private static class getJobStatuses_argsTupleScheme extends TupleScheme<getJobStatuses_args> {
+    private static class cloneExperiment_argsTupleScheme extends TupleScheme<cloneExperiment_args> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, getJobStatuses_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, cloneExperiment_args struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
-        oprot.writeString(struct.airavataExperimentId);
+        BitSet optionals = new BitSet();
+        if (struct.isSetAiravataExperimentIdToBeCloned()) {
+          optionals.set(0);
+        }
+        if (struct.isSetUpdatedExperiment()) {
+          optionals.set(1);
+        }
+        oprot.writeBitSet(optionals, 2);
+        if (struct.isSetAiravataExperimentIdToBeCloned()) {
+          oprot.writeString(struct.airavataExperimentIdToBeCloned);
+        }
+        if (struct.isSetUpdatedExperiment()) {
+          struct.updatedExperiment.write(oprot);
+        }
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, getJobStatuses_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, cloneExperiment_args struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
-        struct.airavataExperimentId = iprot.readString();
-        struct.setAiravataExperimentIdIsSet(true);
+        BitSet incoming = iprot.readBitSet(2);
+        if (incoming.get(0)) {
+          struct.airavataExperimentIdToBeCloned = iprot.readString();
+          struct.setAiravataExperimentIdToBeClonedIsSet(true);
+        }
+        if (incoming.get(1)) {
+          struct.updatedExperiment = new org.apache.airavata.model.workspace.experiment.Experiment();
+          struct.updatedExperiment.read(iprot);
+          struct.setUpdatedExperimentIsSet(true);
+        }
       }
     }
 
   }
 
-  public static class getJobStatuses_result implements org.apache.thrift.TBase<getJobStatuses_result, getJobStatuses_result._Fields>, java.io.Serializable, Cloneable, Comparable<getJobStatuses_result>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getJobStatuses_result");
+  public static class cloneExperiment_result implements org.apache.thrift.TBase<cloneExperiment_result, cloneExperiment_result._Fields>, java.io.Serializable, Cloneable, Comparable<cloneExperiment_result>   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cloneExperiment_result");
 
-    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
+    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
+    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
+    private static final org.apache.thrift.protocol.TField ENF_FIELD_DESC = new org.apache.thrift.protocol.TField("enf", org.apache.thrift.protocol.TType.STRUCT, (short)2);
+    private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)3);
+    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)4);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new getJobStatuses_resultStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new getJobStatuses_resultTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new cloneExperiment_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new cloneExperiment_resultTupleSchemeFactory());
     }
 
-    public Map<String,org.apache.airavata.model.workspace.experiment.JobStatus> success; // required
+    public String success; // required
+    public org.apache.airavata.api.error.InvalidRequestException ire; // required
+    public org.apache.airavata.api.error.ExperimentNotFoundException enf; // required
+    public org.apache.airavata.api.error.AiravataClientException ace; // required
+    public org.apache.airavata.api.error.AiravataSystemException ase; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      SUCCESS((short)0, "success");
+      SUCCESS((short)0, "success"),
+      IRE((short)1, "ire"),
+      ENF((short)2, "enf"),
+      ACE((short)3, "ace"),
+      ASE((short)4, "ase");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -18060,6 +11827,14 @@ import org.slf4j.LoggerFactory;
         switch(fieldId) {
           case 0: // SUCCESS
             return SUCCESS;
+          case 1: // IRE
+            return IRE;
+          case 2: // ENF
+            return ENF;
+          case 3: // ACE
+            return ACE;
+          case 4: // ASE
+            return ASE;
           default:
             return null;
         }
@@ -18075,114 +11850,217 @@ import org.slf4j.LoggerFactory;
         return fields;
       }
 
-      /**
-       * Find the _Fields constant that matches name, or null if its not found.
-       */
-      public static _Fields findByName(String name) {
-        return byName.get(name);
-      }
+      /**
+       * Find the _Fields constant that matches name, or null if its not found.
+       */
+      public static _Fields findByName(String name) {
+        return byName.get(name);
+      }
+
+      private final short _thriftId;
+      private final String _fieldName;
+
+      _Fields(short thriftId, String fieldName) {
+        _thriftId = thriftId;
+        _fieldName = fieldName;
+      }
+
+      public short getThriftFieldId() {
+        return _thriftId;
+      }
+
+      public String getFieldName() {
+        return _fieldName;
+      }
+    }
+
+    // isset id assignments
+    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
+    static {
+      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
+      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
+      tmpMap.put(_Fields.ENF, new org.apache.thrift.meta_data.FieldMetaData("enf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
+      tmpMap.put(_Fields.ACE, new org.apache.thrift.meta_data.FieldMetaData("ace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
+      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
+      metaDataMap = Collections.unmodifiableMap(tmpMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cloneExperiment_result.class, metaDataMap);
+    }
+
+    public cloneExperiment_result() {
+    }
+
+    public cloneExperiment_result(
+      String success,
+      org.apache.airavata.api.error.InvalidRequestException ire,
+      org.apache.airavata.api.error.ExperimentNotFoundException enf,
+      org.apache.airavata.api.error.AiravataClientException ace,
+      org.apache.airavata.api.error.AiravataSystemException ase)
+    {
+      this();
+      this.success = success;
+      this.ire = ire;
+      this.enf = enf;
+      this.ace = ace;
+      this.ase = ase;
+    }
+
+    /**
+     * Performs a deep copy on <i>other</i>.
+     */
+    public cloneExperiment_result(cloneExperiment_result other) {
+      if (other.isSetSuccess()) {
+        this.success = other.success;
+      }
+      if (other.isSetIre()) {
+        this.ire = new org.apache.airavata.api.error.InvalidRequestException(other.ire);
+      }
+      if (other.isSetEnf()) {
+        this.enf = new org.apache.airavata.api.error.ExperimentNotFoundException(other.enf);
+      }
+      if (other.isSetAce()) {
+        this.ace = new org.apache.airavata.api.error.AiravataClientException(other.ace);
+      }
+      if (other.isSetAse()) {
+        this.ase = new org.apache.airavata.api.error.AiravataSystemException(other.ase);
+      }
+    }
+
+    public cloneExperiment_result deepCopy() {
+      return new cloneExperiment_result(this);
+    }
+
+    @Override
+    public void clear() {
+      this.success = null;
+      this.ire = null;
+      this.enf = null;
+      this.ace = null;
+      this.ase = null;
+    }
+
+    public String getSuccess() {
+      return this.success;
+    }
+
+    public cloneExperiment_result setSuccess(String success) {
+      this.success = success;
+      return this;
+    }
+
+    public void unsetSuccess() {
+      this.success = null;
+    }
 
-      private final short _thriftId;
-      private final String _fieldName;
+    /** Returns true if field success is set (has been assigned a value) and false otherwise */
+    public boolean isSetSuccess() {
+      return this.success != null;
+    }
 
-      _Fields(short thriftId, String fieldName) {
-        _thriftId = thriftId;
-        _fieldName = fieldName;
+    public void setSuccessIsSet(boolean value) {
+      if (!value) {
+        this.success = null;
       }
+    }
 
-      public short getThriftFieldId() {
-        return _thriftId;
-      }
+    public org.apache.airavata.api.error.InvalidRequestException getIre() {
+      return this.ire;
+    }
 
-      public String getFieldName() {
-        return _fieldName;
-      }
+    public cloneExperiment_result setIre(org.apache.airavata.api.error.InvalidRequestException ire) {
+      this.ire = ire;
+      return this;
     }
 
-    // isset id assignments
-    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
-    static {
-      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
-              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
-              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.JobStatus.class))));
-      metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getJobStatuses_result.class, metaDataMap);
+    public void unsetIre() {
+      this.ire = null;
     }
 
-    public getJobStatuses_result() {
+    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
+    public boolean isSetIre() {
+      return this.ire != null;
     }
 
-    public getJobStatuses_result(
-      Map<String,org.apache.airavata.model.workspace.experiment.JobStatus> success)
-    {
-      this();
-      this.success = success;
+    public void setIreIsSet(boolean value) {
+      if (!value) {
+        this.ire = null;
+      }
     }
 
-    /**
-     * Performs a deep copy on <i>other</i>.
-     */
-    public getJobStatuses_result(getJobStatuses_result other) {
-      if (other.isSetSuccess()) {
-        Map<String,org.apache.airavata.model.workspace.experiment.JobStatus> __this__success = new HashMap<String,org.apache.airavata.model.workspace.experiment.JobStatus>(other.success.size());
-        for (Map.Entry<String, org.apache.airavata.model.workspace.experiment.JobStatus> other_element : other.success.entrySet()) {
+    public org.apache.airavata.api.error.ExperimentNotFoundException getEnf() {
+      return this.enf;
+    }
 
-          String other_element_key = other_element.getKey();
-          org.apache.airavata.model.workspace.experiment.JobStatus other_element_value = other_element.getValue();
+    public cloneExperiment_result setEnf(org.apache.airavata.api.error.ExperimentNotFoundException enf) {
+      this.enf = enf;
+      return this;
+    }
 
-          String __this__success_copy_key = other_element_key;
+    public void unsetEnf() {
+      this.enf = null;
+    }
 
-          org.apache.airavata.model.workspace.experiment.JobStatus __this__success_copy_value = new org.apache.airavata.model.workspace.experiment.JobStatus(other_element_value);
+    /** Returns true if field enf is set (has been assigned a value) and false otherwise */
+    public boolean isSetEnf() {
+      return this.enf != null;
+    }
 
-          __this__success.put(__this__success_copy_key, __this__success_copy_value);
-        }
-        this.success = __this__success;
+    public void setEnfIsSet(boolean value) {
+      if (!value) {
+        this.enf = null;
       }
     }
 
-    public getJobStatuses_result deepCopy() {
-      return new getJobStatuses_result(this);
+    public org.apache.airavata.api.error.AiravataClientException getAce() {
+      return this.ace;
     }
 
-    @Override
-    public void clear() {
-      this.success = null;
+    public cloneExperiment_result setAce(org.apache.airavata.api.error.AiravataClientException ace) {
+      this.ace = ace;
+      return this;
     }
 
-    public int getSuccessSize() {
-      return (this.success == null) ? 0 : this.success.size();
+    public void unsetAce() {
+      this.ace = null;
     }
 
-    public void putToSuccess(String key, org.apache.airavata.model.workspace.experiment.JobStatus val) {
-      if (this.success == null) {
-        this.success = new HashMap<String,org.apache.airavata.model.workspace.experiment.JobStatus>();
+    /** Returns true if field ace is set (has been assigned a value) and false otherwise */
+    public boolean isSetAce() {
+      return this.ace != null;
+    }
+
+    public void setAceIsSet(boolean value) {
+      if (!value) {
+        this.ace = null;
       }
-      this.success.put(key, val);
     }
 
-    public Map<String,org.apache.airavata.model.workspace.experiment.JobStatus> getSuccess() {
-      return this.success;
+    public org.apache.airavata.api.error.AiravataSystemException getAse() {
+      return this.ase;
     }
 
-    public getJobStatuses_result setSuccess(Map<String,org.apache.airavata.model.workspace.experiment.JobStatus> success) {
-      this.success = success;
+    public cloneExperiment_result setAse(org.apache.airavata.api.error.AiravataSystemException ase) {
+      this.ase = ase;
       return this;
     }
 
-    public void unsetSuccess() {
-      this.success = null;
+    public void unsetAse() {
+      this.ase = null;
     }
 
-    /** Returns true if field success is set (has been assigned a value) and false otherwise */
-    public boolean isSetSuccess() {
-      return this.success != null;
+    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
+    public boolean isSetAse() {
+      return this.ase != null;
     }
 
-    public void setSuccessIsSet(boolean value) {
+    public void setAseIsSet(boolean value) {
       if (!value) {
-        this.success = null;
+        this.ase = null;
       }
     }
 
@@ -18192,7 +12070,39 @@ import org.slf4j.LoggerFactory;
         if (value == null) {
           unsetSuccess();
         } else {
-          setSuccess((Map<String,org.apache.airavata.model.workspace.experiment.JobStatus>)value);
+          setSuccess((String)value);
+        }
+        break;
+
+      case IRE:
+        if (value == null) {
+          unsetIre();
+        } else {
+          setIre((org.apache.airavata.api.error.InvalidRequestException)value);
+        }
+        break;
+
+      case ENF:
+        if (value == null) {
+          unsetEnf();
+        } else {
+          setEnf((org.apache.airavata.api.error.ExperimentNotFoundException)value);
+        }
+        break;
+
+      case ACE:
+        if (value == null) {
+          unsetAce();
+        } else {
+          setAce((org.apache.airavata.api.error.AiravataClientException)value);
+        }
+        break;
+
+      case ASE:
+        if (value == null) {
+          unsetAse();
+        } else {
+          setAse((org.apache.airavata.api.error.AiravataSystemException)value);
         }
         break;
 
@@ -18204,6 +12114,18 @@ import org.slf4j.LoggerFactory;
       case SUCCESS:
         return getSuccess();
 
+      case IRE:
+        return getIre();
+
+      case ENF:
+        return getEnf();
+
+      case ACE:
+        return getAce();
+
+      case ASE:
+        return getAse();
+
       }
       throw new IllegalStateException();
     }
@@ -18217,6 +12139,14 @@ import org.slf4j.LoggerFactory;
       switch (field) {
       case SUCCESS:
         return isSetSuccess();
+      case IRE:
+        return isSetIre();
+      case ENF:
+        return isSetEnf();
+      case ACE:
+        return isSetAce();
+      case ASE:
+        return isSetAse();
       }
       throw new IllegalStateException();
     }
@@ -18225,12 +12155,12 @@ import org.slf4j.LoggerFactory;
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof getJobStatuses_result)
-        return this.equals((getJobStatuses_result)that);
+      if (that instanceof cloneExperiment_result)
+        return this.equals((cloneExperiment_result)that);
       return false;
     }
 
-    public boolean equals(getJobStatuses_result that) {
+    public boolean equals(cloneExperiment_result that) {
       if (that == null)
         return false;
 
@@ -18243,6 +12173,42 @@ import org.slf4j.LoggerFactory;
           return false;
       }
 
+      boolean this_present_ire = true && this.isSetIre();
+      boolean that_present_ire = true && that.isSetIre();
+      if (this_present_ire || that_present_ire) {
+        if (!(this_present_ire && that_present_ire))
+          return false;
+        if (!this.ire.equals(that.ire))
+          return false;
+      }
+
+      boolean this_present_enf = true && this.isSetEnf();
+      boolean that_present_enf = true && that.isSetEnf();
+      if (this_present_enf || that_present_enf) {
+        if (!(this_present_enf && that_present_enf))
+          return false;
+        if (!this.enf.equals(that.enf))
+          return false;
+      }
+
+      boolean this_present_ace = true && this.isSetAce();
+      boolean that_present_ace = true && that.isSetAce();
+      if (this_present_ace || that_present_ace) {
+        if (!(this_present_ace && that_present_ace))
+          return false;
+        if (!this.ace.equals(that.ace))
+          return false;
+      }
+
+      boolean this_present_ase = true && this.isSetAse();
+      boolean that_present_ase = true && that.isSetAse();
+      if (this_present_ase || that_present_ase) {
+        if (!(this_present_ase && that_present_ase))
+          return false;
+        if (!this.ase.equals(that.ase))
+          return false;
+      }
+
       return true;
     }
 
@@ -18252,19 +12218,59 @@ import org.slf4j.LoggerFactory;
     }
 
     @Override
-    public int compareTo(getJobStatuses_result other) {
+    public int compareTo(cloneExperiment_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
-
-      int lastComparison = 0;
-
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
+
+      int lastComparison = 0;
+
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetSuccess()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetIre()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      lastComparison = Boolean.valueOf(isSetEnf()).compareTo(other.isSetEnf());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetEnf()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enf, other.enf);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      lastComparison = Boolean.valueOf(isSetAce()).compareTo(other.isSetAce());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetAce()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ace, other.ace);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
+      if (isSetAse()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -18286,7 +12292,7 @@ import org.slf4j.LoggerFactory;
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("getJobStatuses_result(");
+      StringBuilder sb = new StringBuilder("cloneExperiment_result(");
       boolean first = true;
 
       sb.append("success:");
@@ -18296,6 +12302,38 @@ import org.slf4j.LoggerFactory;
         sb.append(this.success);
       }
       first = false;
+      if (!first) sb.append(", ");
+      sb.append("ire:");
+      if (this.ire == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.ire);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("enf:");
+      if (this.enf == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.enf);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("ace:");
+      if (this.ace == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.ace);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("ase:");
+      if (this.ase == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.ase);
+      }
+      first = false;
       sb.append(")");
       return sb.toString();
     }
@@ -18321,15 +12359,15 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    private static class getJobStatuses_resultStandardSchemeFactory implements SchemeFactory {
-      public getJobStatuses_resultStandardScheme getScheme() {
-        return new getJobStatuses_resultStandardScheme();
+    private static class cloneExperiment_resultStandardSchemeFactory implements SchemeFactory {
+      public cloneExperiment_resultStandardScheme getScheme() {
+        return new cloneExperiment_resultStandardScheme();
       }
     }
 
-    private static class getJobStatuses_resultStandardScheme extends StandardScheme<getJobStatuses_result> {
+    private static class cloneExperiment_resultStandardScheme extends StandardScheme<cloneExperiment_result> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, getJobStatuses_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, cloneExperiment_result struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -18340,26 +12378,49 @@ import org.slf4j.LoggerFactory;
           }
           switch (schemeField.id) {
             case 0: // SUCCESS
-              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
-                {
-                  org.apache.thrift.protocol.TMap _map32 = iprot.readMapBegin();
-                  struct.success = new HashMap<String,org.apache.airavata.model.workspace.experiment.JobStatus>(2*_map32.size);
-                  for (int _i33 = 0; _i33 < _map32.size; ++_i33)
-                  {
-                    String _key34;
-                    org.apache.airavata.model.workspace.experiment.JobStatus _val35;
-                    _key34 = iprot.readString();
-                    _val35 = new org.apache.airavata.model.workspace.experiment.JobStatus();
-                    _val35.read(iprot);
-                    struct.success.put(_key34, _val35);
-                  }
-                  iprot.readMapEnd();
-                }
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
+                struct.success = iprot.readString();
                 struct.setSuccessIsSet(true);
               } else { 
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
               }
               break;
+            case 1: // IRE
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
+                struct.ire.read(iprot);
+                struct.setIreIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            case 2: // ENF
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.enf = new org.apache.airavata.api.error.ExperimentNotFoundException();
+                struct.enf.read(iprot);
+                struct.setEnfIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            case 3: // ACE
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.ace = new org.apache.airavata.api.error.AiravataClientException();
+                struct.ace.read(iprot);
+                struct.setAceIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            case 4: // ASE
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
+                struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
+                struct.ase.read(iprot);
+                struct.setAseIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
             default:
               org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
           }
@@ -18371,21 +12432,33 @@ import org.slf4j.LoggerFactory;
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, getJobStatuses_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, cloneExperiment_result struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
         if (struct.success != null) {
           oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-          {
-            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
-            for (Map.Entry<String, org.apache.airavata.model.workspace.experiment.JobStatus> _iter36 : struct.success.entrySet())
-            {
-              oprot.writeString(_iter36.getKey());
-              _iter36.getValue().write(oprot);
-            }
-            oprot.writeMapEnd();
-          }
+          oprot.writeString(struct.success);
+          oprot.writeFieldEnd();
+        }
+        if (struct.ire != null) {
+          oprot.writeFieldBegin(IRE_FIELD_DESC);
+          struct.ire.write(oprot);
+          oprot.writeFieldEnd();
+        }
+        if (struct.enf != null) {
+          oprot.writeFieldBegin(ENF_FIELD_DESC);
+          struct.enf.write(oprot);
+          oprot.writeFieldEnd();
+        }
+        if (struct.ace != null) {
+          oprot.writeFieldBegin(ACE_FIELD_DESC);
+          struct.ace.write(oprot);
+          oprot.writeFieldEnd();
+        }
+        if (struct.ase != null) {
+          oprot.writeFieldBegin(ASE_FIELD_DESC);
+          struct.ase.write(oprot);
           oprot.writeFieldEnd();
         }
         oprot.writeFieldStop();
@@ -18394,78 +12467,100 @@ import org.slf4j.LoggerFactory;
 
     }
 
-    private static class getJobStatuses_resultTupleSchemeFactory implements SchemeFactory {
-      public getJobStatuses_resultTupleScheme getScheme() {
-        return new getJobStatuses_resultTupleScheme();
+    private static class cloneExperiment_resultTupleSchemeFactory implements SchemeFactory {
+      public cloneExperiment_resultTupleScheme getScheme() {
+        return new cloneExperiment_resultTupleScheme();
       }
     }
 
-    private static class getJobStatuses_resultTupleScheme extends TupleScheme<getJobStatuses_result> {
+    private static class cloneExperiment_resultTupleScheme extends TupleScheme<cloneExperiment_result> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, getJobStatuses_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, cloneExperiment_result struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         BitSet optionals = new BitSet();
         if (struct.isSetSuccess()) {
           optionals.set(0);
         }
-        oprot.writeBitSet(optionals, 1);
+        if (struct.isSetIre()) {
+          optionals.set(1);
+        }
+        if (struct.isSetEnf()) {
+          optionals.set(2);
+        }
+        if (struct.isSetAce()) {
+          optionals.set(3);
+        }
+        if (struct.isSetAse()) {
+          optionals.set(4);
+        }
+        oprot.writeBitSet(optionals, 5);
         if (struct.isSetSuccess()) {
-          {
-            oprot.writeI32(struct.success.size());
-            for (Map.Entry<String, org.apache.airavata.model.workspace.experiment.JobStatus> _iter37 : struct.success.entrySet())
-            {
-              oprot.writeString(_iter37.getKey());
-              _iter37.getValue().write(oprot);
-            }
-          }
+          oprot.writeString(struct.success);
+        }
+        if (struct.isSetIre()) {
+          struct.ire.write(oprot);
+        }
+        if (struct.isSetEnf()) {
+          struct.enf.write(oprot);
+        }
+        if (struct.isSetAce()) {
+          struct.ace.write(oprot);
+        }
+        if (struct.isSetAse()) {
+          struct.ase.write(oprot);
         }
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, getJobStatuses_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, cloneExperiment_result struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
-        BitSet incoming = iprot.readBitSet(1);
+        BitSet incoming = iprot.readBitSet(5);
         if (incoming.get(0)) {
-          {
-            org.apache.thrift.protocol.TMap _map38 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
-            struct.success = new HashMap<String,org.apache.airavata.model.workspace.experiment.JobStatus>(2*_map38.size);
-            for (int _i39 = 0; _i39 < _map38.size; ++_i39)
-            {
-              String _key40;
-              org.apache.airavata.model.workspace.experiment.JobStatus _val41;
-              _key40 = iprot.readString();
-              _val41 = new org.apache.airavata.model.workspace.experiment.JobStatus();
-              _val41.read(iprot);
-              struct.success.put(_key40, _val41);
-            }
-          }
+          struct.success = iprot.readString();
           struct.setSuccessIsSet(true);
         }
+        if (incoming.get(1)) {
+          struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
+          struct.ire.read(iprot);
+          struct.setIreIsSet(true);
+        }
+        if (incoming.get(2)) {
+          struct.enf = new org.apache.airavata.api.error.ExperimentNotFoundException();
+          struct.enf.read(iprot);
+          struct.setEnfIsSet(true);
+        }
+        if (incoming.get(3)) {
+          struct.ace = new org.apache.airavata.api.error.AiravataClientException();
+          struct.ace.read(iprot);
+          struct.setAceIsSet(true);
+        }
+        if (incoming.get(4)) {
+          struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
+          struct.ase.read(iprot);
+          struct.setAseIsSet(true);
+        }
       }
     }
 
   }
 
-  public static class cloneExperiment_args implements org.apache.thrift.TBase<cloneExperiment_args, cloneExperiment_args._Fields>, java.io.Serializable, Cloneable, Comparable<cloneExperiment_args>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cloneExperiment_args");
+  public static class terminateExperiment_args implements org.apache.thrift.TBase<terminateExperiment_args, terminateExperiment_args._Fields>, java.io.Serializable, Cloneable, Comparable<terminateExperiment_args>   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("terminateExperiment_args");
 
-    private static final org.apache.thrift.protocol.TField AIRAVATA_EXPERIMENT_ID_TO_BE_CLONED_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataExperimentIdToBeCloned", org.apache.thrift.protocol.TType.STRING, (short)1);
-    private static final org.apache.thrift.protocol.TField UPDATED_EXPERIMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("updatedExperiment", org.apache.thrift.protocol.TType.STRUCT, (short)2);
+    private static final org.apache.thrift.protocol.TField AIRAVATA_EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataExperimentId", org.apache.thrift.protocol.TType.STRING, (short)1);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new cloneExperiment_argsStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new cloneExperiment_argsTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new terminateExperiment_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new terminateExperiment_argsTupleSchemeFactory());
     }
 
-    public String airavataExperimentIdToBeCloned; // required
-    public org.apache.airavata.model.workspace.experiment.Experiment updatedExperiment; // required
+    public String airavataExperimentId; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      AIRAVATA_EXPERIMENT_ID_TO_BE_CLONED((short)1, "airavataExperimentIdToBeCloned"),
-      UPDATED_EXPERIMENT((short)2, "updatedExperiment");
+      AIRAVATA_EXPERIMENT_ID((short)1, "airavataExperimentId");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -18480,10 +12575,8 @@ import org.slf4j.LoggerFactory;
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
-          case 1: // AIRAVATA_EXPERIMENT_ID_TO_BE_CLONED
-            return AIRAVATA_EXPERIMENT_ID_TO_BE_CLONED;
-          case 2: // UPDATED_EXPERIMENT
-            return UPDATED_EXPERIMENT;
+          case 1: // AIRAVATA_EXPERIMENT_ID
+            return AIRAVATA_EXPERIMENT_ID;
           default:
             return null;
         }
@@ -18527,111 +12620,71 @@ import org.slf4j.LoggerFactory;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.AIRAVATA_EXPERIMENT_ID_TO_BE_CLONED, new org.apache.thrift.meta_data.FieldMetaData("airavataExperimentIdToBeCloned", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+      tmpMap.put(_Fields.AIRAVATA_EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("airavataExperimentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
-      tmpMap.put(_Fields.UPDATED_EXPERIMENT, new org.apache.thrift.meta_data.FieldMetaData("updatedExperiment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.model.workspace.experiment.Experiment.class)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cloneExperiment_args.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(terminateExperiment_args.class, metaDataMap);
     }
 
-    public cloneExperiment_args() {
+    public terminateExperiment_args() {
     }
 
-    public cloneExperiment_args(
-      String airavataExperimentIdToBeCloned,
-      org.apache.airavata.model.workspace.experiment.Experiment updatedExperiment)
+    public terminateExperiment_args(
+      String airavataExperimentId)
     {
       this();
-      this.airavataExperimentIdToBeCloned = airavataExperimentIdToBeCloned;
-      this.updatedExperiment = updatedExperiment;
+      this.airavataExperimentId = airavataExperimentId;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public cloneExperiment_args(cloneExperiment_args other) {
-      if (other.isSetAiravataExperimentIdToBeCloned()) {
-        this.airavataExperimentIdToBeCloned = other.airavataExperimentIdToBeCloned;
-      }
-      if (other.isSetUpdatedExperiment()) {
-        this.updatedExperiment = new org.apache.airavata.model.workspace.experiment.Experiment(other.updatedExperiment);
+    public terminateExperiment_args(terminateExperiment_args other) {
+      if (other.isSetAiravataExperimentId()) {
+        this.airavataExperimentId = other.airavataExperimentId;
       }
     }
 
-    public cloneExperiment_args deepCopy() {
-      return new cloneExperiment_args(this);
-    }
-
-    @Override
-    public void clear() {
-      this.airavataExperimentIdToBeCloned = null;
-      this.updatedExperiment = null;
-    }
-
-    public String getAiravataExperimentIdToBeCloned() {
-      return this.airavataExperimentIdToBeCloned;
-    }
-
-    public cloneExperiment_args setAiravataExperimentIdToBeCloned(String airavataExperimentIdToBeCloned) {
-      this.airavataExperimentIdToBeCloned = airavataExperimentIdToBeCloned;
-      return this;
-    }
-
-    public void unsetAiravataExperimentIdToBeCloned() {
-      this.airavataExperimentIdToBeCloned = null;
-    }
-
-    /** Returns true if field airavataExperimentIdToBeCloned is set (has been assigned a value) and false otherwise */
-    public boolean isSetAiravataExperimentIdToBeCloned() {
-      return this.airavataExperimentIdToBeCloned != null;
+    public terminateExperiment_args deepCopy() {
+      return new terminateExperiment_args(this);
     }
 
-    public void setAiravataExperimentIdToBeClonedIsSet(boolean value) {
-      if (!value) {
-        this.airavataExperimentIdToBeCloned = null;
-      }
+    @Override
+    public void clear() {
+      this.airavataExperimentId = null;
     }
 
-    public org.apache.airavata.model.workspace.experiment.Experiment getUpdatedExperiment() {
-      return this.updatedExperiment;
+    public String getAiravataExperimentId() {
+      return this.airavataExperimentId;
     }
 
-    public cloneExperiment_args setUpdatedExperiment(org.apache.airavata.model.workspace.experiment.Experiment updatedExperiment) {
-      this.updatedExperiment = updatedExperiment;
+    public terminateExperiment_args setAiravataExperimentId(String airavataExperimentId) {
+      this.airavataExperimentId = airavataExperimentId;
       return this;
     }
 
-    public void unsetUpdatedExperiment() {
-      this.updatedExperiment = null;
+    public void unsetAiravataExperimentId() {
+      this.airavataExperimentId = null;
     }
 
-    /** Returns true if field updatedExperiment is set (has been assigned a value) and false otherwise */
-    public boolean isSetUpdatedExperiment() {
-      return this.updatedExperiment != null;
+    /** Returns true if field airavataExperimentId is set (has been assigned a value) and false otherwise */
+    public boolean isSetAiravataExperimentId() {
+      return this.airavataExperimentId != null;
     }
 
-    public void setUpdatedExperimentIsSet(boolean value) {
+    public void setAiravataExperimentIdIsSet(boolean value) {
       if (!value) {
-        this.updatedExperiment = null;
+        this.airavataExperimentId = null;
       }
     }
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
-      case AIRAVATA_EXPERIMENT_ID_TO_BE_CLONED:
-        if (value == null) {
-          unsetAiravataExperimentIdToBeCloned();
-        } else {
-          setAiravataExperimentIdToBeCloned((String)value);
-        }
-        break;
-
-      case UPDATED_EXPERIMENT:
+      case AIRAVATA_EXPERIMENT_ID:
         if (value == null) {
-          unsetUpdatedExperiment();
+          unsetAiravataExperimentId();
         } else {
-          setUpdatedExperiment((org.apache.airavata.model.workspace.experiment.Experiment)value);
+          setAiravataExperimentId((String)value);
         }
         break;
 
@@ -18640,11 +12693,8 @@ import org.slf4j.LoggerFactory;
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
-      case AIRAVATA_EXPERIMENT_ID_TO_BE_CLONED:
-        return getAiravataExperimentIdToBeCloned();
-
-      case UPDATED_EXPERIMENT:
-        return getUpdatedExperiment();
+      case AIRAVATA_EXPERIMENT_ID:
+        return getAiravataExperimentId();
 
       }
       throw new IllegalStateException();
@@ -18657,10 +12707,8 @@ import org.slf4j.LoggerFactory;
       }
 
       switch (field) {
-      case AIRAVATA_EXPERIMENT_ID_TO_BE_CLONED:
-        return isSetAiravataExperimentIdToBeCloned();
-      case UPDATED_EXPERIMENT:
-        return isSetUpdatedExperiment();
+      case AIRAVATA_EXPERIMENT_ID:
+        return isSetAiravataExperimentId();
       }
       throw new IllegalStateException();
     }
@@ -18669,30 +12717,21 @@ import org.slf4j.LoggerFactory;
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof cloneExperiment_args)
-        return this.equals((cloneExperiment_args)that);
+      if (that instanceof terminateExperiment_args)
+        return this.equals((terminateExperiment_args)that);
       return false;
     }
 
-    public boolean equals(cloneExperiment_args that) {
+    public boolean equals(terminateExperiment_args that) {
       if (that == null)
         return false;
 
-      boolean this_present_airavataExperimentIdToBeCloned = true && this.isSetAiravataExperimentIdToBeCloned();
-      boolean that_present_airavataExperimentIdToBeCloned = true && that.isSetAiravataExperimentIdToBeCloned();
-      if (this_present_airavataExperimentIdToBeCloned || that_present_airavataExperimentIdToBeCloned) {
-        if (!(this_present_airavataExperimentIdToBeCloned && that_present_airavataExperimentIdToBeCloned))
-          return false;
-        if (!this.airavataExperimentIdToBeCloned.equals(that.airavataExperimentIdToBeCloned))
-          return false;
-      }
-
-      boolean this_present_updatedExperiment = true && this.isSetUpdatedExperiment();
-      boolean that_present_updatedExperiment = true && that.isSetUpdatedExperiment();
-      if (this_present_updatedExperiment || that_present_updatedExperiment) {
-        if (!(this_present_updatedExperiment && that_present_updatedExperiment))
+      boolean this_present_airavataExperimentId = true && this.isSetAiravataExperimentId();
+      boolean that_present_airavataExperimentId = true && that.isSetAiravataExperimentId();
+      if (this_present_airavataExperimentId || that_present_airavataExperimentId) {
+        if (!(this_present_airavataExperimentId && that_present_airavataExperimentId))
           return false;
-        if (!this.updatedExperiment.equals(that.updatedExperiment))
+        if (!this.airavataExperimentId.equals(that.airavataExperimentId))
           return false;
       }
 
@@ -18705,29 +12744,19 @@ import org.slf4j.LoggerFactory;
     }
 
     @Override
-    public int compareTo(cloneExperiment_args other) {
+    public int compareTo(terminateExperiment_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
 
-      lastComparison = Boolean.valueOf(isSetAiravataExperimentIdToBeCloned()).compareTo(other.isSetAiravataExperimentIdToBeCloned());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetAiravataExperimentIdToBeCloned()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataExperimentIdToBeCloned, other.airavataExperimentIdToBeCloned);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      lastComparison = Boolean.valueOf(isSetUpdatedExperiment()).compareTo(other.isSetUpdatedExperiment());
+      lastComparison = Boolean.valueOf(isSetAiravataExperimentId()).compareTo(other.isSetAiravataExperimentId());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      if (isSetUpdatedExperiment()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updatedExperiment, other.updatedExperiment);
+      if (isSetAiravataExperimentId()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataExperimentId, other.airavataExperimentId);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -18749,22 +12778,14 @@ import org.slf4j.LoggerFactory;
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("cloneExperiment_args(");
+      StringBuilder sb = new StringBuilder("terminateExperiment_args(");
       boolean first = true;
 
-      sb.append("airavataExperimentIdToBeCloned:");
-      if (this.airavataExperimentIdToBeCloned == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.airavataExperimentIdToBeCloned);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("updatedExperiment:");
-      if (this.updatedExperiment == null) {
+      sb.append("airavataExperimentId:");
+      if (this.airavataExperimentId == null) {
         sb.append("null");
       } else {
-        sb.append(this.updatedExperiment);
+        sb.append(this.airavataExperimentId);
       }
       first = false;
       sb.append(")");
@@ -18774,9 +12795,6 @@ import org.slf4j.LoggerFactory;
     public void validate() throws org.apache.thrift.TException {
       // check for required fields
       // check for sub-struct validity
-      if (updatedExperiment != null) {
-        updatedExperiment.validate();
-      }
     }
 
     private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
@@ -18795,15 +12813,15 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    private static class cloneExperiment_argsStandardSchemeFactory implements SchemeFactory {
-      public cloneExperiment_argsStandardScheme getScheme() {
-        return new cloneExperiment_argsStandardScheme();
+    private static class terminateExperiment_argsStandardSchemeFactory implements SchemeFactory {
+      public terminateExperiment_argsStandardScheme getScheme() {
+        return new terminateExperiment_argsStandardScheme();
       }
     }
 
-    private static class cloneExperiment_argsStandardScheme extends StandardScheme<cloneExperiment_args> {
+    private static class terminateExperiment_argsStandardScheme extends StandardScheme<terminateExperiment_args> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, cloneExperiment_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, terminateExperiment_args struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -18813,19 +12831,10 @@ import org.slf4j.LoggerFactory;
             break;
           }
           switch (schemeField.id) {
-            case 1: // AIRAVATA_EXPERIMENT_ID_TO_BE_CLONED
+            case 1: // AIRAVATA_EXPERIMENT_ID
               if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
-                struct.airavataExperimentIdToBeCloned = iprot.readString();
-                struct.setAiravataExperimentIdToBeClonedIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
-            case 2: // UPDATED_EXPERIMENT
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
-                struct.updatedExperiment = new org.apache.airavata.model.workspace.experiment.Experiment();
-                struct.updatedExperiment.read(iprot);
-                struct.setUpdatedExperimentIsSet(true);
+                struct.airavataExperimentId = iprot.readString();
+                struct.setAiravataExperimentIdIsSet(true);
               } else { 
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
               }
@@ -18841,18 +12850,13 @@ import org.slf4j.LoggerFactory;
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, cloneExperiment_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, terminateExperiment_args struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        if (struct.airavataExperimentIdToBeCloned != null) {
-          oprot.writeFieldBegin(AIRAVATA_EXPERIMENT_ID_TO_BE_CLONED_FIELD_DESC);
-          oprot.writeString(struct.airavataExperimentIdToBeCloned);
-          oprot.writeFieldEnd();
-        }
-        if (struct.updatedExperiment != null) {
-          oprot.writeFieldBegin(UPDATED_EXPERIMENT_FIELD_DESC);
-          struct.updatedExperiment.write(oprot);
+        if (struct.airavataExperimentId != null) {
+          oprot.writeFieldBegin(AIRAVATA_EXPERIMENT_ID_FIELD_DESC);
+          oprot.writeString(struct.airavataExperimentId);
           oprot.writeFieldEnd();
         }
         oprot.writeFieldStop();
@@ -18861,55 +12865,43 @@ import org.slf4j.LoggerFactory;
 
     }
 
-    private static class cloneExperiment_argsTupleSchemeFactory implements SchemeFactory {
-      public cloneExperiment_argsTupleScheme getScheme() {
-        return new cloneExperiment_argsTupleScheme();
+    private static class terminateExperiment_argsTupleSchemeFactory implements SchemeFactory {
+      public terminateExperiment_argsTupleScheme getScheme() {
+        return new terminateExperiment_argsTupleScheme();
       }
     }
 
-    private static class cloneExperiment_argsTupleScheme extends TupleScheme<cloneExperiment_args> {
+    private static class terminateExperiment_argsTupleScheme extends TupleScheme<terminateExperiment_args> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, cloneExperiment_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, terminateExperiment_args struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         BitSet optionals = new BitSet();
-        if (struct.isSetAiravataExperimentIdToBeCloned()) {
+        if (struct.isSetAiravataExperimentId()) {
           optionals.set(0);
         }
-        if (struct.isSetUpdatedExperiment()) {
-          optionals.set(1);
-        }
-        oprot.writeBitSet(optionals, 2);
-        if (struct.isSetAiravataExperimentIdToBeCloned()) {
-          oprot.writeString(struct.airavataExperimentIdToBeCloned);
-        }
-        if (struct.isSetUpdatedExperiment()) {
-          struct.updatedExperiment.write(oprot);
+        oprot.writeBitSet(optionals, 1);
+        if (struct.isSetAiravataExperimentId()) {
+          oprot.writeString(struct.airavataExperimentId);
         }
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, cloneExperiment_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, terminateExperiment_args struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
-        BitSet incoming = iprot.readBitSet(2);
+        BitSet incoming = iprot.readBitSet(1);
         if (incoming.get(0)) {
-          struct.airavataExperimentIdToBeCloned = iprot.readString();
-          struct.setAiravataExperimentIdToBeClonedIsSet(true);
-        }
-        if (incoming.get(1)) {
-          struct.updatedExperiment = new org.apache.airavata.model.workspace.experiment.Experiment();
-          struct.updatedExperiment.read(iprot);
-          struct.setUpdatedExperimentIsSet(true);
+          struct.airavataExperimentId = iprot.readString();
+          struct.setAiravataExperimentIdIsSet(true);
         }
       }
     }
 
   }
 
-  public static class cloneExperiment_result implements org.apache.thrift.TBase<cloneExperiment_result, cloneExperiment_result._Fields>, java.io.Serializable, Cloneable, Comparable<cloneExperiment_result>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cloneExperiment_result");
+  public static class terminateExperiment_result implements org.apache.thrift.TBase<terminateExperiment_result, terminateExperiment_result._Fields>, java.io.Serializable, Cloneable, Comparable<terminateExperiment_result>   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("terminateExperiment_result");
 
-    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
     private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
     private static final org.apache.thrift.protocol.TField ENF_FIELD_DESC = new org.apache.thrift.protocol.TField("enf", org.apache.thrift.protocol.TType.STRUCT, (short)2);
     private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)3);
@@ -18917,11 +12909,10 @@ import org.slf4j.LoggerFactory;
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new cloneExperiment_resultStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new cloneExperiment_resultTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new terminateExperiment_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new terminateExperiment_resultTupleSchemeFactory());
     }
 
-    public String success; // required
     public org.apache.airavata.api.error.InvalidRequestException ire; // required
     public org.apache.airavata.api.error.ExperimentNotFoundException enf; // required
     public org.apache.airavata.api.error.AiravataClientException ace; // required
@@ -18929,7 +12920,6 @@ import org.slf4j.LoggerFactory;
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      SUCCESS((short)0, "success"),
       IRE((short)1, "ire"),
       ENF((short)2, "enf"),
       ACE((short)3, "ace"),
@@ -18948,8 +12938,6 @@ import org.slf4j.LoggerFactory;
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
-          case 0: // SUCCESS
-            return SUCCESS;
           case 1: // IRE
             return IRE;
           case 2: // ENF
@@ -19001,8 +12989,6 @@ import org.slf4j.LoggerFactory;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
       tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
       tmpMap.put(_Fields.ENF, new org.apache.thrift.meta_data.FieldMetaData("enf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
@@ -19012,21 +12998,19 @@ import org.slf4j.LoggerFactory;
       tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cloneExperiment_result.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(terminateExperiment_result.class, metaDataMap);
     }
 
-    public cloneExperiment_result() {
+    public terminateExperiment_result() {
     }
 
-    public cloneExperiment_result(
-      String success,
+    public terminateExperiment_result(
       org.apache.airavata.api.error.InvalidRequestException ire,
       org.apache.airavata.api.error.ExperimentNotFoundException enf,
       org.apache.airavata.api.error.AiravataClientException ace,
       org.apache.airavata.api.error.AiravataSystemException ase)
     {
       this();
-      this.success = success;
       this.ire = ire;
       this.enf = enf;
       this.ace = ace;
@@ -19036,10 +13020,7 @@ import org.slf4j.LoggerFactory;
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public cloneExperiment_result(cloneExperiment_result other) {
-      if (other.isSetSuccess()) {
-        this.success = other.success;
-      }
+    public terminateExperiment_result(terminateExperiment_result other) {
       if (other.isSetIre()) {
         this.ire = new org.apache.airavata.api.error.InvalidRequestException(other.ire);
       }
@@ -19054,48 +13035,23 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    public cloneExperiment_result deepCopy() {
-      return new cloneExperiment_result(this);
-    }
-
-    @Override
-    public void clear() {
-      this.success = null;
-      this.ire = null;
-      this.enf = null;
-      this.ace = null;
-      this.ase = null;
-    }
-
-    public String getSuccess() {
-      return this.success;
-    }
-
-    public cloneExperiment_result setSuccess(String success) {
-      this.success = success;
-      return this;
-    }
-
-    public void unsetSuccess() {
-      this.success = null;
-    }
-
-    /** Returns true if field success is set (has been assigned a value) and false otherwise */
-    public boolean isSetSuccess() {
-      return this.success != null;
+    public terminateExperiment_result deepCopy() {
+      return new terminateExperiment_result(this);
     }
 
-    public void setSuccessIsSet(boolean value) {
-      if (!value) {
-        this.success = null;
-      }
+    @Override
+    public void clear() {
+      this.ire = null;
+      this.enf = null;
+      this.ace = null;
+      this.ase = null;
     }
 
     public org.apache.airavata.api.error.InvalidRequestException getIre() {
       return this.ire;
     }
 
-    public cloneExperiment_result setIre(org.apache.airavata.api.error.InvalidRequestException ire) {
+    public terminateExperiment_result setIre(org.apache.airavata.api.error.InvalidRequestException ire) {
       this.ire = ire;
       return this;
     }
@@ -19119,7 +13075,7 @@ import org.slf4j.LoggerFactory;
       return this.enf;
     }
 
-    public cloneExperiment_result setEnf(org.apache.airavata.api.error.ExperimentNotFoundException enf) {
+    public terminateExperiment_result setEnf(org.apache.airavata.api.error.ExperimentNotFoundException enf) {
       this.enf = enf;
       return this;
     }
@@ -19143,7 +13099,7 @@ import org.slf4j.LoggerFactory;
       return this.ace;
     }
 
-    public cloneExperiment_result setAce(org.apache.airavata.api.error.AiravataClientException ace) {
+    public terminateExperiment_result setAce(org.apache.airavata.api.error.AiravataClientException ace) {
       this.ace = ace;
       return this;
     }
@@ -19167,7 +13123,7 @@ import org.slf4j.LoggerFactory;
       return this.ase;
     }
 
-    public cloneExperiment_result setAse(org.apache.airavata.api.error.AiravataSystemException ase) {
+    public terminateExperiment_result setAse(org.apache.airavata.api.error.AiravataSystemException ase) {
       this.ase = ase;
       return this;
     }
@@ -19189,14 +13145,6 @@ import org.slf4j.LoggerFactory;
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
-      case SUCCESS:
-        if (value == null) {
-          unsetSuccess();
-        } else {
-          setSuccess((String)value);
-        }
-        break;
-
       case IRE:
         if (value == null) {
           unsetIre();
@@ -19234,9 +13182,6 @@ import org.slf4j.LoggerFactory;
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
-      case SUCCESS:
-        return getSuccess();
-
       case IRE:
         return getIre();
 
@@ -19260,8 +13205,6 @@ import org.slf4j.LoggerFactory;
       }
 
       switch (field) {
-      case SUCCESS:
-        return isSetSuccess();
       case IRE:
         return isSetIre();
       case ENF:
@@ -19278,24 +13221,15 @@ import org.slf4j.LoggerFactory;
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof cloneExperiment_result)
-        return this.equals((cloneExperiment_result)that);
+      if (that instanceof terminateExperiment_result)
+        return this.equals((terminateExperiment_result)that);
       return false;
     }
 
-    public boolean equals(cloneExperiment_result that) {
+    public boolean equals(terminateExperiment_result that) {
       if (that == null)
         return false;
 
-      boolean this_present_success = true && this.isSetSuccess();
-      boolean that_present_success = true && that.isSetSuccess();
-      if (this_present_success || that_present_success) {
-        if (!(this_present_success && that_present_success))
-          return false;
-        if (!this.success.equals(that.success))
-          return false;
-      }
-
       boolean this_present_ire = true && this.isSetIre();
       boolean that_present_ire = true && that.isSetIre();
       if (this_present_ire || that_present_ire) {
@@ -19341,23 +13275,13 @@ import org.slf4j.LoggerFactory;
     }
 
     @Override
-    public int compareTo(cloneExperiment_result other) {
+    public int compareTo(terminateExperiment_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetSuccess()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
       lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
       if (lastComparison != 0) {
         return lastComparison;
@@ -19415,17 +13339,9 @@ import org.slf4j.LoggerFactory;
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("cloneExperiment_result(");
+      StringBuilder sb = new StringBuilder("terminateExperiment_result(");
       boolean first = true;
 
-      sb.append("success:");
-      if (this.success == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.success);
-      }
-      first = false;
-      if (!first) sb.append(", ");
       sb.append("ire:");
       if (this.ire == null) {
         sb.append("null");
@@ -19482,15 +13398,15 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    private static class cloneExperiment_resultStandardSchemeFactory implements SchemeFactory {
-      public cloneExperiment_resultStandardScheme getScheme() {
-        return new cloneExperiment_resultStandardScheme();
+    private static class terminateExperiment_resultStandardSchemeFactory implements SchemeFactory {
+      public terminateExperiment_resultStandardScheme getScheme() {
+        return new terminateExperiment_resultStandardScheme();
       }
     }
 
-    private static class cloneExperiment_resultStandardScheme extends StandardScheme<cloneExperiment_result> {
+    private static class terminateExperiment_resultStandardScheme extends StandardScheme<terminateExperiment_result> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, cloneExperiment_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, terminateExperiment_result struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -19500,14 +13416,6 @@ import org.slf4j.LoggerFactory;
             break;
           }
           switch (schemeField.id) {
-            case 0: // SUCCESS
-              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
-                struct.success = iprot.readString();
-                struct.setSuccessIsSet(true);
-              } else { 
-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
-              }
-              break;
             case 1: // IRE
               if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                 struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
@@ -19555,15 +13463,10 @@ import org.slf4j.LoggerFactory;
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, cloneExperiment_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, terminateExperiment_result struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        if (struct.success != null) {
-          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-          oprot.writeString(struct.success);
-          oprot.writeFieldEnd();
-        }
         if (struct.ire != null) {
           oprot.writeFieldBegin(IRE_FIELD_DESC);
           struct.ire.write(oprot);
@@ -19590,37 +13493,31 @@ import org.slf4j.LoggerFactory;
 
     }
 
-    private static class cloneExperiment_resultTupleSchemeFactory implements SchemeFactory {
-      public cloneExperiment_resultTupleScheme getScheme() {
-        return new cloneExperiment_resultTupleScheme();
+    private static class terminateExperiment_resultTupleSchemeFactory implements SchemeFactory {
+      public terminateExperiment_resultTupleScheme getScheme() {
+        return new terminateExperiment_resultTupleScheme();
       }
     }
 
-    private static class cloneExperiment_resultTupleScheme extends TupleScheme<cloneExperiment_result> {
+    private static class terminateExperiment_resultTupleScheme extends TupleScheme<terminateExperiment_result> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, cloneExperiment_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, terminateExperiment_result struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         BitSet optionals = new BitSet();
-        if (struct.isSetSuccess()) {
-          optionals.set(0);
-        }
         if (struct.isSetIre()) {
-          optionals.set(1);
+          optionals.set(0);
         }
         if (struct.isSetEnf()) {
-          optionals.set(2);
+          optionals.set(1);
         }
         if (struct.isSetAce()) {
-          optionals.set(3);
+          optionals.set(2);
         }
         if (struct.isSetAse()) {
-          optionals.set(4);
-        }
-        oprot.writeBitSet(optionals, 5);
-        if (struct.isSetSuccess()) {
-          oprot.writeString(struct.success);
+          optionals.set(3);
         }
+        oprot.writeBitSet(optionals, 4);
         if (struct.isSetIre()) {
           struct.ire.write(oprot);
         }
@@ -19636,29 +13533,25 @@ import org.slf4j.LoggerFactory;
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, cloneExperiment_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, terminateExperiment_result struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
-        BitSet incoming = iprot.readBitSet(5);
+        BitSet incoming = iprot.readBitSet(4);
         if (incoming.get(0)) {
-          struct.success = iprot.readString();
-          struct.setSuccessIsSet(true);
-        }
-        if (incoming.get(1)) {
           struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
           struct.ire.read(iprot);
           struct.setIreIsSet(true);
         }
-        if (incoming.get(2)) {
+        if (incoming.get(1)) {
           struct.enf = new org.apache.airavata.api.error.ExperimentNotFoundException();
           struct.enf.read(iprot);
           struct.setEnfIsSet(true);
         }
-        if (incoming.get(3)) {
+        if (incoming.get(2)) {
           struct.ace = new org.apache.airavata.api.error.AiravataClientException();
           struct.ace.read(iprot);
           struct.setAceIsSet(true);
         }
-        if (incoming.get(4)) {
+        if (incoming.get(3)) {
           struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
           struct.ase.read(iprot);
           struct.setAseIsSet(true);
@@ -19668,22 +13561,25 @@ import org.slf4j.LoggerFactory;
 
   }
 
-  public static class terminateExperiment_args implements org.apache.thrift.TBase<terminateExperiment_args, terminateExperiment_args._Fields>, java.io.Serializable, Cloneable, Comparable<terminateExperiment_args>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("terminateExperiment_args");
+  public static class createProject_args implements org.apache.thrift.TBase<createProject_args, createProject_args._Fields>, java.io.Serializable, Cloneable, Comparable<createProject_args>   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createProject_args");
 
-    private static final org.apache.thrift.protocol.TField AIRAVATA_EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataExperimentId", org.apache.thrift.protocol.TType.STRING, (short)1);
+    private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)1);
+    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new terminateExperiment_argsStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new terminateExperiment_argsTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new createProject_argsStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new createProject_argsTupleSchemeFactory());
     }
 
-    public String airavataExperimentId; // required
+    public String projectName; // required
+    public String userName; // required
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
-      AIRAVATA_EXPERIMENT_ID((short)1, "airavataExperimentId");
+      PROJECT_NAME((short)1, "projectName"),
+      USER_NAME((short)2, "userName");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -19698,8 +13594,10 @@ import org.slf4j.LoggerFactory;
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
-          case 1: // AIRAVATA_EXPERIMENT_ID
-            return AIRAVATA_EXPERIMENT_ID;
+          case 1: // PROJECT_NAME
+            return PROJECT_NAME;
+          case 2: // USER_NAME
+            return USER_NAME;
           default:
             return null;
         }
@@ -19743,71 +13641,111 @@ import org.slf4j.LoggerFactory;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.AIRAVATA_EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("airavataExperimentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+      tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
+      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(terminateExperiment_args.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createProject_args.class, metaDataMap);
     }
 
-    public terminateExperiment_args() {
+    public createProject_args() {
     }
 
-    public terminateExperiment_args(
-      String airavataExperimentId)
+    public createProject_args(
+      String projectName,
+      String userName)
     {
       this();
-      this.airavataExperimentId = airavataExperimentId;
+      this.projectName = projectName;
+      this.userName = userName;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public terminateExperiment_args(terminateExperiment_args other) {
-      if (other.isSetAiravataExperimentId()) {
-        this.airavataExperimentId = other.airavataExperimentId;
+    public createProject_args(createProject_args other) {
+      if (other.isSetProjectName()) {
+        this.projectName = other.projectName;
+      }
+      if (other.isSetUserName()) {
+        this.userName = other.userName;
       }
     }
 
-    public terminateExperiment_args deepCopy() {
-      return new terminateExperiment_args(this);
+    public createProject_args deepCopy() {
+      return new createProject_args(this);
     }
 
     @Override
     public void clear() {
-      this.airavataExperimentId = null;
+      this.projectName = null;
+      this.userName = null;
     }
 
-    public String getAiravataExperimentId() {
-      return this.airavataExperimentId;
+    public String getProjectName() {
+      return this.projectName;
     }
 
-    public terminateExperiment_args setAiravataExperimentId(String airavataExperimentId) {
-      this.airavataExperimentId = airavataExperimentId;
+    public createProject_args setProjectName(String projectName) {
+      this.projectName = projectName;
       return this;
     }
 
-    public void unsetAiravataExperimentId() {
-      this.airavataExperimentId = null;
+    public void unsetProjectName() {
+      this.projectName = null;
     }
 
-    /** Returns true if field airavataExperimentId is set (has been assigned a value) and false otherwise */
-    public boolean isSetAiravataExperimentId() {
-      return this.airavataExperimentId != null;
+    /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
+    public boolean isSetProjectName() {
+      return this.projectName != null;
     }
 
-    public void setAiravataExperimentIdIsSet(boolean value) {
+    public void setProjectNameIsSet(boolean value) {
       if (!value) {
-        this.airavataExperimentId = null;
+        this.projectName = null;
+      }
+    }
+
+    public String getUserName() {
+      return this.userName;
+    }
+
+    public createProject_args setUserName(String userName) {
+      this.userName = userName;
+      return this;
+    }
+
+    public void unsetUserName() {
+      this.userName = null;
+    }
+
+    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
+    public boolean isSetUserName() {
+      return this.userName != null;
+    }
+
+    public void setUserNameIsSet(boolean value) {
+      if (!value) {
+        this.userName = null;
       }
     }
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
-      case AIRAVATA_EXPERIMENT_ID:
+      case PROJECT_NAME:
         if (value == null) {
-          unsetAiravataExperimentId();
+          unsetProjectName();
         } else {
-          setAiravataExperimentId((String)value);
+          setProjectName((String)value);
+        }
+        break;
+
+      case USER_NAME:
+        if (value == null) {
+          unsetUserName();
+        } else {
+          setUserName((String)value);
         }
         break;
 
@@ -19816,8 +13754,11 @@ import org.slf4j.LoggerFactory;
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
-      case AIRAVATA_EXPERIMENT_ID:
-        return getAiravataExperimentId();
+      case PROJECT_NAME:
+        return getProjectName();
+
+      case USER_NAME:
+        return getUserName();
 
       }
       throw new IllegalStateException();
@@ -19830,8 +13771,10 @@ import org.slf4j.LoggerFactory;
       }
 
       switch (field) {
-      case AIRAVATA_EXPERIMENT_ID:
-        return isSetAiravataExperimentId();
+      case PROJECT_NAME:
+        return isSetProjectName();
+      case USER_NAME:
+        return isSetUserName();
       }
       throw new IllegalStateException();
     }
@@ -19840,21 +13783,30 @@ import org.slf4j.LoggerFactory;
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof terminateExperiment_args)
-        return this.equals((terminateExperiment_args)that);
+      if (that instanceof createProject_args)
+        return this.equals((createProject_args)that);
       return false;
     }
 
-    public boolean equals(terminateExperiment_args that) {
+    public boolean equals(createProject_args that) {
       if (that == null)
         return false;
 
-      boolean this_present_airavataExperimentId = true && this.isSetAiravataExperimentId();
-      boolean that_present_airavataExperimentId = true && that.isSetAiravataExperimentId();
-      if (this_present_airavataExperimentId || that_present_airavataExperimentId) {
-        if (!(this_present_airavataExperimentId && that_present_airavataExperimentId))
+      boolean this_present_projectName = true && this.isSetProjectName();
+      boolean that_present_projectName = true && that.isSetProjectName();
+      if (this_present_projectName || that_present_projectName) {
+        if (!(this_present_projectName && that_present_projectName))
           return false;
-        if (!this.airavataExperimentId.equals(that.airavataExperimentId))
+        if (!this.projectName.equals(that.projectName))
+          return false;
+      }
+
+      boolean this_present_userName = true && this.isSetUserName();
+      boolean that_present_userName = true && that.isSetUserName();
+      if (this_present_userName || that_present_userName) {
+        if (!(this_present_userName && that_present_userName))
+          return false;
+        if (!this.userName.equals(that.userName))
           return false;
       }
 
@@ -19867,19 +13819,29 @@ import org.slf4j.LoggerFactory;
     }
 
     @Override
-    public int compareTo(terminateExperiment_args other) {
+    public int compareTo(createProject_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
 
-      lastComparison = Boolean.valueOf(isSetAiravataExperimentId()).compareTo(other.isSetAiravataExperimentId());
+      lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetProjectName()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      if (isSetAiravataExperimentId()) {
-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataExperimentId, other.airavataExperimentId);
+      if (isSetUserName()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -19901,14 +13863,22 @@ import org.slf4j.LoggerFactory;
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("terminateExperiment_args(");
+      StringBuilder sb = new StringBuilder("createProject_args(");
       boolean first = true;
 
-      sb.append("airavataExperimentId:");
-      if (this.airavataExperimentId == null) {
+      sb.append("projectName:");
+      if (this.projectName == null) {
         sb.append("null");
       } else {
-        sb.append(this.airavataExperimentId);
+        sb.append(this.projectName);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("userName:");
+      if (this.userName == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.userName);
       }
       first = false;
       sb.append(")");
@@ -19936,15 +13906,15 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    private static class terminateExperiment_argsStandardSchemeFactory implements SchemeFactory {
-      public terminateExperiment_argsStandardScheme getScheme() {
-        return new terminateExperiment_argsStandardScheme();
+    private static class createProject_argsStandardSchemeFactory implements SchemeFactory {
+      public createProject_argsStandardScheme getScheme() {
+        return new createProject_argsStandardScheme();
       }
     }
 
-    private static class terminateExperiment_argsStandardScheme extends StandardScheme<terminateExperiment_args> {
+    private static class createProject_argsStandardScheme extends StandardScheme<createProject_args> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, terminateExperiment_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, createProject_args struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -19954,10 +13924,18 @@ import org.slf4j.LoggerFactory;
             break;
           }
           switch (schemeField.id) {
-            case 1: // AIRAVATA_EXPERIMENT_ID
+            case 1: // PROJECT_NAME
               if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
-                struct.airavataExperimentId = iprot.readString();
-                struct.setAiravataExperimentIdIsSet(true);
+                struct.projectName = iprot.readString();
+                struct.setProjectNameIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
+            case 2: // USER_NAME
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
+                struct.userName = iprot.readString();
+                struct.setUserNameIsSet(true);
               } else { 
                 org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
               }
@@ -19973,13 +13951,18 @@ import org.slf4j.LoggerFactory;
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, terminateExperiment_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, createProject_args struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
-        if (struct.airavataExperimentId != null) {
-          oprot.writeFieldBegin(AIRAVATA_EXPERIMENT_ID_FIELD_DESC);
-          oprot.writeString(struct.airavataExperimentId);
+        if (struct.projectName != null) {
+          oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
+          oprot.writeString(struct.projectName);
+          oprot.writeFieldEnd();
+        }
+        if (struct.userName != null) {
+          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
+          oprot.writeString(struct.userName);
           oprot.writeFieldEnd();
         }
         oprot.writeFieldStop();
@@ -19988,43 +13971,54 @@ import org.slf4j.LoggerFactory;
 
     }
 
-    private static class terminateExperiment_argsTupleSchemeFactory implements SchemeFactory {
-      public terminateExperiment_argsTupleScheme getScheme() {
-        return new terminateExperiment_argsTupleScheme();
+    private static class createProject_argsTupleSchemeFactory implements SchemeFactory {
+      public createProject_argsTupleScheme getScheme() {
+        return new createProject_argsTupleScheme();
       }
     }
 
-    private static class terminateExperiment_argsTupleScheme extends TupleScheme<terminateExperiment_args> {
+    private static class createProject_argsTupleScheme extends TupleScheme<createProject_args> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, terminateExperiment_args struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, createProject_args struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         BitSet optionals = new BitSet();
-        if (struct.isSetAiravataExperimentId()) {
+        if (struct.isSetProjectName()) {
           optionals.set(0);
         }
-        oprot.writeBitSet(optionals, 1);
-        if (struct.isSetAiravataExperimentId()) {
-          oprot.writeString(struct.airavataExperimentId);
+        if (struct.isSetUserName()) {
+          optionals.set(1);
+        }
+        oprot.writeBitSet(optionals, 2);
+        if (struct.isSetProjectName()) {
+          oprot.writeString(struct.projectName);
+        }
+        if (struct.isSetUserName()) {
+          oprot.writeString(struct.userName);
         }
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, terminateExperiment_args struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, createProject_args struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
-        BitSet incoming = iprot.readBitSet(1);
+        BitSet incoming = iprot.readBitSet(2);
         if (incoming.get(0)) {
-          struct.airavataExperimentId = iprot.readString();
-          struct.setAiravataExperimentIdIsSet(true);
+          struct.projectName = iprot.readString();
+          struct.setProjectNameIsSet(true);
+        }
+        if (incoming.get(1)) {
+          struct.userName = iprot.readString();
+          struct.setUserNameIsSet(true);
         }
       }
     }
 
   }
 
-  public static class terminateExperiment_result implements org.apache.thrift.TBase<terminateExperiment_result, terminateExperiment_result._Fields>, java.io.Serializable, Cloneable, Comparable<terminateExperiment_result>   {
-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("terminateExperiment_result");
+  public static class createProject_result implements org.apache.thrift.TBase<createProject_result, createProject_result._Fields>, java.io.Serializable, Cloneable, Comparable<createProject_result>   {
+    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createProject_result");
 
+    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
     private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
     private static final org.apache.thrift.protocol.TField ENF_FIELD_DESC = new org.apache.thrift.protocol.TField("enf", org.apache.thrift.protocol.TType.STRUCT, (short)2);
     private static final org.apache.thrift.protocol.TField ACE_FIELD_DESC = new org.apache.thrift.protocol.TField("ace", org.apache.thrift.protocol.TType.STRUCT, (short)3);
@@ -20032,10 +14026,11 @@ import org.slf4j.LoggerFactory;
 
     private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
     static {
-      schemes.put(StandardScheme.class, new terminateExperiment_resultStandardSchemeFactory());
-      schemes.put(TupleScheme.class, new terminateExperiment_resultTupleSchemeFactory());
+      schemes.put(StandardScheme.class, new createProject_resultStandardSchemeFactory());
+      schemes.put(TupleScheme.class, new createProject_resultTupleSchemeFactory());
     }
 
+    public String success; // required
     public org.apache.airavata.api.error.InvalidRequestException ire; // required
     public org.apache.airavata.api.error.ExperimentNotFoundException enf; // required
     public org.apache.airavata.api.error.AiravataClientException ace; // required
@@ -20043,6 +14038,7 @@ import org.slf4j.LoggerFactory;
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     @SuppressWarnings("all") public enum _Fields implements org.apache.thrift.TFieldIdEnum {
+      SUCCESS((short)0, "success"),
       IRE((short)1, "ire"),
       ENF((short)2, "enf"),
       ACE((short)3, "ace"),
@@ -20061,6 +14057,8 @@ import org.slf4j.LoggerFactory;
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
+          case 0: // SUCCESS
+            return SUCCESS;
           case 1: // IRE
             return IRE;
           case 2: // ENF
@@ -20112,6 +14110,8 @@ import org.slf4j.LoggerFactory;
     public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
     static {
       Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
       tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
       tmpMap.put(_Fields.ENF, new org.apache.thrift.meta_data.FieldMetaData("enf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
@@ -20121,19 +14121,21 @@ import org.slf4j.LoggerFactory;
       tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
           new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(terminateExperiment_result.class, metaDataMap);
+      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createProject_result.class, metaDataMap);
     }
 
-    public terminateExperiment_result() {
+    public createProject_result() {
     }
 
-    public terminateExperiment_result(
+    public createProject_result(
+      String success,
       org.apache.airavata.api.error.InvalidRequestException ire,
       org.apache.airavata.api.error.ExperimentNotFoundException enf,
       org.apache.airavata.api.error.AiravataClientException ace,
       org.apache.airavata.api.error.AiravataSystemException ase)
     {
       this();
+      this.success = success;
       this.ire = ire;
       this.enf = enf;
       this.ace = ace;
@@ -20143,7 +14145,10 @@ import org.slf4j.LoggerFactory;
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public terminateExperiment_result(terminateExperiment_result other) {
+    public createProject_result(createProject_result other) {
+      if (other.isSetSuccess()) {
+        this.success = other.success;
+      }
       if (other.isSetIre()) {
         this.ire = new org.apache.airavata.api.error.InvalidRequestException(other.ire);
       }
@@ -20158,23 +14163,48 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    public terminateExperiment_result deepCopy() {
-      return new terminateExperiment_result(this);
+    public createProject_result deepCopy() {
+      return new createProject_result(this);
     }
 
     @Override
     public void clear() {
+      this.success = null;
       this.ire = null;
       this.enf = null;
       this.ace = null;
       this.ase = null;
     }
 
+    public String getSuccess() {
+      return this.success;
+    }
+
+    public createProject_result setSuccess(String success) {
+      this.success = success;
+      return this;
+    }
+
+    public void unsetSuccess() {
+      this.success = null;
+    }
+
+    /** Returns true if field success is set (has been assigned a value) and false otherwise */
+    public boolean isSetSuccess() {
+      return this.success != null;
+    }
+
+    public void setSuccessIsSet(boolean value) {
+      if (!value) {
+        this.success = null;
+      }
+    }
+
     public org.apache.airavata.api.error.InvalidRequestException getIre() {
       return this.ire;
     }
 
-    public terminateExperiment_result setIre(org.apache.airavata.api.error.InvalidRequestException ire) {
+    public createProject_result setIre(org.apache.airavata.api.error.InvalidRequestException ire) {
       this.ire = ire;
       return this;
     }
@@ -20198,7 +14228,7 @@ import org.slf4j.LoggerFactory;
       return this.enf;
     }
 
-    public terminateExperiment_result setEnf(org.apache.airavata.api.error.ExperimentNotFoundException enf) {
+    public createProject_result setEnf(org.apache.airavata.api.error.ExperimentNotFoundException enf) {
       this.enf = enf;
       return this;
     }
@@ -20222,7 +14252,7 @@ import org.slf4j.LoggerFactory;
       return this.ace;
     }
 
-    public terminateExperiment_result setAce(org.apache.airavata.api.error.AiravataClientException ace) {
+    public createProject_result setAce(org.apache.airavata.api.error.AiravataClientException ace) {
       this.ace = ace;
       return this;
     }
@@ -20246,7 +14276,7 @@ import org.slf4j.LoggerFactory;
       return this.ase;
     }
 
-    public terminateExperiment_result setAse(org.apache.airavata.api.error.AiravataSystemException ase) {
+    public createProject_result setAse(org.apache.airavata.api.error.AiravataSystemException ase) {
       this.ase = ase;
       return this;
     }
@@ -20268,6 +14298,14 @@ import org.slf4j.LoggerFactory;
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
+      case SUCCESS:
+        if (value == null) {
+          unsetSuccess();
+        } else {
+          setSuccess((String)value);
+        }
+        break;
+
       case IRE:
         if (value == null) {
           unsetIre();
@@ -20305,6 +14343,9 @@ import org.slf4j.LoggerFactory;
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
+      case SUCCESS:
+        return getSuccess();
+
       case IRE:
         return getIre();
 
@@ -20328,6 +14369,8 @@ import org.slf4j.LoggerFactory;
       }
 
       switch (field) {
+      case SUCCESS:
+        return isSetSuccess();
       case IRE:
         return isSetIre();
       case ENF:
@@ -20344,15 +14387,24 @@ import org.slf4j.LoggerFactory;
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof terminateExperiment_result)
-        return this.equals((terminateExperiment_result)that);
+      if (that instanceof createProject_result)
+        return this.equals((createProject_result)that);
       return false;
     }
 
-    public boolean equals(terminateExperiment_result that) {
+    public boolean equals(createProject_result that) {
       if (that == null)
         return false;
 
+      boolean this_present_success = true && this.isSetSuccess();
+      boolean that_present_success = true && that.isSetSuccess();
+      if (this_present_success || that_present_success) {
+        if (!(this_present_success && that_present_success))
+          return false;
+        if (!this.success.equals(that.success))
+          return false;
+      }
+
       boolean this_present_ire = true && this.isSetIre();
       boolean that_present_ire = true && that.isSetIre();
       if (this_present_ire || that_present_ire) {
@@ -20398,13 +14450,23 @@ import org.slf4j.LoggerFactory;
     }
 
     @Override
-    public int compareTo(terminateExperiment_result other) {
+    public int compareTo(createProject_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
 
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetSuccess()) {
+        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
       lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
       if (lastComparison != 0) {
         return lastComparison;
@@ -20462,9 +14524,17 @@ import org.slf4j.LoggerFactory;
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("terminateExperiment_result(");
+      StringBuilder sb = new StringBuilder("createProject_result(");
       boolean first = true;
 
+      sb.append("success:");
+      if (this.success == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.success);
+      }
+      first = false;
+      if (!first) sb.append(", ");
       sb.append("ire:");
       if (this.ire == null) {
         sb.append("null");
@@ -20521,15 +14591,15 @@ import org.slf4j.LoggerFactory;
       }
     }
 
-    private static class terminateExperiment_resultStandardSchemeFactory implements SchemeFactory {
-      public terminateExperiment_resultStandardScheme getScheme() {
-        return new terminateExperiment_resultStandardScheme();
+    private static class createProject_resultStandardSchemeFactory implements SchemeFactory {
+      public createProject_resultStandardScheme getScheme() {
+        return new createProject_resultStandardScheme();
       }
     }
 
-    private static class terminateExperiment_resultStandardScheme extends StandardScheme<terminateExperiment_result> {
+    private static class createProject_resultStandardScheme extends StandardScheme<createProject_result> {
 
-      public void read(org.apache.thrift.protocol.TProtocol iprot, terminateExperiment_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol iprot, createProject_result struct) throws org.apache.thrift.TException {
         org.apache.thrift.protocol.TField schemeField;
         iprot.readStructBegin();
         while (true)
@@ -20539,6 +14609,14 @@ import org.slf4j.LoggerFactory;
             break;
           }
           switch (schemeField.id) {
+            case 0: // SUCCESS
+              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
+                struct.success = iprot.readString();
+                struct.setSuccessIsSet(true);
+              } else { 
+                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
+              }
+              break;
             case 1: // IRE
               if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                 struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
@@ -20586,10 +14664,15 @@ import org.slf4j.LoggerFactory;
         struct.validate();
       }
 
-      public void write(org.apache.thrift.protocol.TProtocol oprot, terminateExperiment_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol oprot, createProject_result struct) throws org.apache.thrift.TException {
         struct.validate();
 
         oprot.writeStructBegin(STRUCT_DESC);
+        if (struct.success != null) {
+          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
+          oprot.writeString(struct.success);
+          oprot.writeFieldEnd();
+        }
         if (struct.ire != null) {
           oprot.writeFieldBegin(IRE_FIELD_DESC);
           struct.ire.write(oprot);
@@ -20616,31 +14699,37 @@ import org.slf4j.LoggerFactory;
 
     }
 
-    private static class terminateExperiment_resultTupleSchemeFactory implements SchemeFactory {
-      public terminateExperiment_resultTupleScheme getScheme() {
-        return new terminateExperiment_resultTupleScheme();
+    private static class createProject_resultTupleSchemeFactory implements SchemeFactory {
+      public createProject_resultTupleScheme getScheme() {
+        return new createProject_resultTupleScheme();
       }
     }
 
-    private static class terminateExperiment_resultTupleScheme extends TupleScheme<terminateExperiment_result> {
+    private static class createProject_resultTupleScheme extends TupleScheme<createProject_result> {
 
       @Override
-      public void write(org.apache.thrift.protocol.TProtocol prot, terminateExperiment_result struct) throws org.apache.thrift.TException {
+      public void write(org.apache.thrift.protocol.TProtocol prot, createProject_result struct) throws org.apache.thrift.TException {
         TTupleProtocol oprot = (TTupleProtocol) prot;
         BitSet optionals = new BitSet();
-        if (struct.isSetIre()) {
+        if (struct.isSetSuccess()) {
           optionals.set(0);
         }
-        if (struct.isSetEnf()) {
+        if (struct.isSetIre()) {
           optionals.set(1);
         }
-        if (struct.isSetAce()) {
+        if (struct.isSetEnf()) {
           optionals.set(2);
         }
-        if (struct.isSetAse()) {
+        if (struct.isSetAce()) {
           optionals.set(3);
         }
-        oprot.writeBitSet(optionals, 4);
+        if (struct.isSetAse()) {
+          optionals.set(4);
+        }
+        oprot.writeBitSet(optionals, 5);
+        if (struct.isSetSuccess()) {
+          oprot.writeString(struct.success);
+        }
         if (struct.isSetIre()) {
           struct.ire.write(oprot);
         }
@@ -20656,25 +14745,29 @@ import org.slf4j.LoggerFactory;
       }
 
       @Override
-      public void read(org.apache.thrift.protocol.TProtocol prot, terminateExperiment_result struct) throws org.apache.thrift.TException {
+      public void read(org.apache.thrift.protocol.TProtocol prot, createProject_result struct) throws org.apache.thrift.TException {
         TTupleProtocol iprot = (TTupleProtocol) prot;
-        BitSet incoming = iprot.readBitSet(4);
+        BitSet incoming = iprot.readBitSet(5);
         if (incoming.get(0)) {
+          struct.success = iprot.readString();
+          struct.setSuccessIsSet(true);
+        }
+        if (incoming.get(1)) {
           struct.ire = new org.apache.airavata.api.error.InvalidRequestException();
           struct.ire.read(iprot);
           struct.setIreIsSet(true);
         }
-        if (incoming.get(1)) {
+        if (incoming.get(2)) {
           struct.enf = new org.apache.airavata.api.error.ExperimentNotFoundException();
           struct.enf.read(iprot);
           struct.setEnfIsSet(true);
         }
-        if (incoming.get(2)) {
+        if (incoming.get(3)) {
           struct.ace = new org.apache.airavata.api.error.AiravataClientException();
           struct.ace.read(iprot);
           struct.setAceIsSet(true);
         }
-        if (incoming.get(3)) {
+        if (incoming.get(4)) {
           struct.ase = new org.apache.airavata.api.error.AiravataSystemException();
           struct.ase.read(iprot);
           struct.setAseIsSet(true);