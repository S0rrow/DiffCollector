diff --git a/artemis-commons/src/main/java/org/apache/activemq/artemis/core/server/ActiveMQScheduledComponent.java b/artemis-commons/src/main/java/org/apache/activemq/artemis/core/server/ActiveMQScheduledComponent.java
index 7aeec1ebc2..efa0cabef6 100644
--- a/artemis-commons/src/main/java/org/apache/activemq/artemis/core/server/ActiveMQScheduledComponent.java
+++ b/artemis-commons/src/main/java/org/apache/activemq/artemis/core/server/ActiveMQScheduledComponent.java
@@ -17,26 +17,20 @@
 
 package org.apache.activemq.artemis.core.server;
 
-import java.security.AccessController;
-import java.security.PrivilegedAction;
 import java.util.concurrent.Executor;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ScheduledFuture;
-import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import org.apache.activemq.artemis.utils.ActiveMQThreadFactory;
 import org.jboss.logging.Logger;
 
-/**
- * This is for components with a scheduled at a fixed rate.
- */
+/** This is for components with a scheduled at a fixed rate. */
 public abstract class ActiveMQScheduledComponent implements ActiveMQComponent, Runnable {
 
+
    private static final Logger logger = Logger.getLogger(ActiveMQScheduledComponent.class);
-   private ScheduledExecutorService scheduledExecutorService;
-   private boolean startedOwnScheduler;
+   private final ScheduledExecutorService scheduledExecutorService;
    private long period;
    private long millisecondsPeriod;
    private TimeUnit timeUnit;
@@ -55,67 +49,38 @@ public abstract class ActiveMQScheduledComponent implements ActiveMQComponent, R
                                      boolean onDemand) {
       this.executor = executor;
       this.scheduledExecutorService = scheduledExecutorService;
+      if (this.scheduledExecutorService == null) {
+         throw new NullPointerException("scheduled Executor is null");
+      }
       this.period = checkPeriod;
       this.timeUnit = timeUnit;
       this.onDemand = onDemand;
    }
 
-   /**
-    * This is useful for cases where we want our own scheduler executor.
-    *
-    * @param checkPeriod
-    * @param timeUnit
-    * @param onDemand
-    */
-   public ActiveMQScheduledComponent(long checkPeriod, TimeUnit timeUnit, boolean onDemand) {
-      this(null, null, checkPeriod, timeUnit, onDemand);
-   }
-
    @Override
    public synchronized void start() {
       if (future != null) {
-         // already started
          return;
       }
 
-      if (scheduledExecutorService == null) {
-         scheduledExecutorService = new ScheduledThreadPoolExecutor(1, getThreadFactory());
-         startedOwnScheduler = true;
-
-      }
-
+      this.millisecondsPeriod = timeUnit.convert(period, TimeUnit.MILLISECONDS);
       if (onDemand) {
          return;
       }
-
-      this.millisecondsPeriod = timeUnit.convert(period, TimeUnit.MILLISECONDS);
-
       if (period >= 0) {
          future = scheduledExecutorService.scheduleWithFixedDelay(runForScheduler, period, period, timeUnit);
-      } else {
+      }
+      else {
          logger.tracef("did not start scheduled executor on %s because period was configured as %d", this, period);
       }
    }
 
-   protected ActiveMQThreadFactory getThreadFactory() {
-      return new ActiveMQThreadFactory(this.getClass().getSimpleName() + "-scheduled-threads", false, getThisClassLoader());
-   }
-
-   private ClassLoader getThisClassLoader() {
-      return AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {
-         @Override
-         public ClassLoader run() {
-            return ActiveMQScheduledComponent.this.getClass().getClassLoader();
-         }
-      });
-
-   }
-
    public void delay() {
       int value = delayed.incrementAndGet();
       if (value > 10) {
          delayed.decrementAndGet();
-      } else {
+      }
+      else {
          // We only schedule up to 10 periods upfront.
          // this is to avoid a window where a current one would be running and a next one is coming.
          // in theory just 2 would be enough. I'm using 10 as a precaution here.
@@ -145,16 +110,13 @@ public abstract class ActiveMQScheduledComponent implements ActiveMQComponent, R
 
    @Override
    public synchronized void stop() {
-      if (future != null) {
-         future.cancel(false);
-         future = null;
-      }
-      if (startedOwnScheduler) {
-         this.scheduledExecutorService.shutdownNow();
-         scheduledExecutorService = null;
-         startedOwnScheduler = false;
+      if (future == null) {
+         return; // no big deal
       }
 
+      future.cancel(false);
+      future = null;
+
    }
 
    @Override
@@ -162,6 +124,7 @@ public abstract class ActiveMQScheduledComponent implements ActiveMQComponent, R
       return future != null;
    }
 
+
    // this will restart the schedulped component upon changes
    private void restartIfNeeded() {
       if (isStarted()) {
@@ -193,11 +156,7 @@ public abstract class ActiveMQScheduledComponent implements ActiveMQComponent, R
    final Runnable runForScheduler = new Runnable() {
       @Override
       public void run() {
-         if (executor != null) {
-            executor.execute(runForExecutor);
-         } else {
-            runForExecutor.run();
-         }
+         executor.execute(runForExecutor);
       }
    };
 