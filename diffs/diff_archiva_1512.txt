diff --git a/archiva-modules/metadata/metadata-repository-api/src/main/java/org/apache/archiva/metadata/repository/DefaultMetadataResolver.java b/archiva-modules/metadata/metadata-repository-api/src/main/java/org/apache/archiva/metadata/repository/DefaultMetadataResolver.java
index f56d72c16..3e61ab990 100644
--- a/archiva-modules/metadata/metadata-repository-api/src/main/java/org/apache/archiva/metadata/repository/DefaultMetadataResolver.java
+++ b/archiva-modules/metadata/metadata-repository-api/src/main/java/org/apache/archiva/metadata/repository/DefaultMetadataResolver.java
@@ -19,8 +19,8 @@
  * under the License.
  */
 
-import org.apache.archiva.admin.model.RepositoryAdminException;
 import org.apache.archiva.metadata.model.ArtifactMetadata;
+import org.apache.archiva.metadata.model.Dependency;
 import org.apache.archiva.metadata.model.ProjectMetadata;
 import org.apache.archiva.metadata.model.ProjectVersionMetadata;
 import org.apache.archiva.metadata.model.ProjectVersionReference;
@@ -31,10 +31,7 @@
 import org.apache.archiva.repository.events.RepositoryListener;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.springframework.stereotype.Service;
 
-import javax.inject.Inject;
-import javax.inject.Named;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
@@ -42,53 +39,51 @@
 /**
  * Default implementation of the metadata resolver API. At present it will handle updating the content repository
  * from new or changed information in the model and artifacts from the repository storage.
- * <p/>
+ *
  * This is a singleton component to allow an alternate implementation to be provided. It is intended to be the same
  * system-wide for the whole content repository instead of on a per-managed-repository basis. Therefore, the session is
  * passed in as an argument to obtain any necessary resources, rather than the class being instantiated within the
  * session in the context of a single managed repository's resolution needs.
- * <p/>
+ *
  * Note that the caller is responsible for the session, such as closing and saving (which is implied by the resolver
  * being obtained from within the session). The {@link RepositorySession#markDirty()} method is used as a hint to ensure
  * that the session knows we've made changes at close. We cannot ensure the changes will be persisted if the caller
  * chooses to revert first. This is preferable to storing the metadata immediately - a separate session would require
  * having a bi-directional link with the session factory, and saving the existing session might save other changes
  * unknowingly by the caller.
- * <p/>
+ *
+ * @plexus.component role="org.apache.archiva.metadata.repository.MetadataResolver"
  */
-@Service( "metadataResolver#default" )
 public class DefaultMetadataResolver
     implements MetadataResolver
 {
-
-    private Logger log = LoggerFactory.getLogger( DefaultMetadataResolver.class );
-
     /**
      * FIXME: this needs to be configurable based on storage type - and could also be instantiated per repo. Change to a
      * factory, and perhaps retrieve from the session. We should avoid creating one per request, however.
-     * <p/>
+     *
      * TODO: Also need to accommodate availability of proxy module
      * ... could be a different type since we need methods to modify the storage metadata, which would also allow more
      * appropriate methods to pass in the already determined repository configuration, for example, instead of the ID
+     *
+     * @plexus.requirement role-hint="maven2"
      */
-    @Inject
-    @Named( value = "repositoryStorage#maven2" )
     private RepositoryStorage repositoryStorage;
 
     /**
-     *
+     * @plexus.requirement role="org.apache.archiva.repository.events.RepositoryListener"
      */
-    @Inject
     private List<RepositoryListener> listeners;
 
+    private static final Logger log = LoggerFactory.getLogger( DefaultMetadataResolver.class );
+
     public ProjectVersionMetadata resolveProjectVersion( RepositorySession session, String repoId, String namespace,
                                                          String projectId, String projectVersion )
         throws MetadataResolutionException
     {
         MetadataRepository metadataRepository = session.getRepository();
 
-        ProjectVersionMetadata metadata =
-            metadataRepository.getProjectVersion( repoId, namespace, projectId, projectVersion );
+        ProjectVersionMetadata metadata = metadataRepository.getProjectVersion( repoId, namespace, projectId,
+                                                                                projectVersion );
         // TODO: do we want to detect changes as well by comparing timestamps? isProjectVersionNewerThan(updated)
         //       in such cases we might also remove/update stale metadata, including adjusting plugin-based facets
         //       This would also be better than checking for completeness - we can then refresh only when fixed (though
@@ -100,8 +95,10 @@ public ProjectVersionMetadata resolveProjectVersion( RepositorySession session,
             {
                 metadata = repositoryStorage.readProjectVersionMetadata( repoId, namespace, projectId, projectVersion );
 
-                log.debug( "Resolved project version metadata from storage: {}", metadata );
-
+                if ( log.isDebugEnabled() )
+                {
+                    log.debug( "Resolved project version metadata from storage: " + metadata );
+                }
                 // FIXME: make this a more generic post-processing that plugins can take advantage of
                 //       eg. maven projects should be able to process parent here
                 if ( !metadata.getDependencies().isEmpty() )
@@ -111,6 +108,19 @@ public ProjectVersionMetadata resolveProjectVersion( RepositorySession session,
                     ref.setProjectId( projectId );
                     ref.setProjectVersion( projectVersion );
                     ref.setReferenceType( ProjectVersionReference.ReferenceType.DEPENDENCY );
+                    for ( Dependency dependency : metadata.getDependencies() )
+                    {
+                        try
+                        {
+                            metadataRepository.updateProjectReference( repoId, dependency.getGroupId(),
+                                                                       dependency.getArtifactId(),
+                                                                       dependency.getVersion(), ref );
+                        }
+                        catch ( MetadataRepositoryException e )
+                        {
+                            log.warn( "Unable to persist resolved information: " + e.getMessage(), e );
+                        }
+                    }
                 }
                 try
                 {
@@ -135,14 +145,6 @@ public ProjectVersionMetadata resolveProjectVersion( RepositorySession session,
                 }
                 throw new MetadataResolutionException( e.getMessage(), e );
             }
-            catch ( RepositoryAdminException e )
-            {
-                for ( RepositoryListener listener : listeners )
-                {
-                    listener.addArtifactProblem( session, repoId, namespace, projectId, projectVersion, e );
-                }
-                throw new MetadataResolutionException( e.getMessage(), e );
-            }
             catch ( RepositoryStorageMetadataNotFoundException e )
             {
                 for ( RepositoryListener listener : listeners )
@@ -171,8 +173,8 @@ public Collection<String> resolveRootNamespaces( RepositorySession session, Stri
     {
         MetadataRepository metadataRepository = session.getRepository();
         Collection<String> namespaces = metadataRepository.getRootNamespaces( repoId );
-        Collection<String> storageNamespaces =
-            repositoryStorage.listRootNamespaces( repoId, new ExcludesFilter<String>( namespaces ) );
+        Collection<String> storageNamespaces = repositoryStorage.listRootNamespaces( repoId, new ExcludesFilter<String>(
+            namespaces ) );
         if ( storageNamespaces != null && !storageNamespaces.isEmpty() )
         {
             if ( log.isDebugEnabled() )
@@ -205,8 +207,9 @@ public Collection<String> resolveNamespaces( RepositorySession session, String r
         Collection<String> namespaces = metadataRepository.getNamespaces( repoId, namespace );
         Collection<String> exclusions = new ArrayList<String>( namespaces );
         exclusions.addAll( metadataRepository.getProjects( repoId, namespace ) );
-        Collection<String> storageNamespaces =
-            repositoryStorage.listNamespaces( repoId, namespace, new ExcludesFilter<String>( exclusions ) );
+        Collection<String> storageNamespaces = repositoryStorage.listNamespaces( repoId, namespace,
+                                                                                 new ExcludesFilter<String>(
+                                                                                     exclusions ) );
         if ( storageNamespaces != null && !storageNamespaces.isEmpty() )
         {
             if ( log.isDebugEnabled() )
@@ -239,8 +242,8 @@ public Collection<String> resolveProjects( RepositorySession session, String rep
         Collection<String> projects = metadataRepository.getProjects( repoId, namespace );
         Collection<String> exclusions = new ArrayList<String>( projects );
         exclusions.addAll( metadataRepository.getNamespaces( repoId, namespace ) );
-        Collection<String> storageProjects =
-            repositoryStorage.listProjects( repoId, namespace, new ExcludesFilter<String>( exclusions ) );
+        Collection<String> storageProjects = repositoryStorage.listProjects( repoId, namespace,
+                                                                             new ExcludesFilter<String>( exclusions ) );
         if ( storageProjects != null && !storageProjects.isEmpty() )
         {
             if ( log.isDebugEnabled() )
@@ -289,8 +292,10 @@ public Collection<String> resolveProjectVersions( RepositorySession session, Str
             {
                 try
                 {
-                    ProjectVersionMetadata versionMetadata =
-                        repositoryStorage.readProjectVersionMetadata( repoId, namespace, projectId, projectVersion );
+                    ProjectVersionMetadata versionMetadata = repositoryStorage.readProjectVersionMetadata( repoId,
+                                                                                                           namespace,
+                                                                                                           projectId,
+                                                                                                           projectVersion );
                     for ( RepositoryListener listener : listeners )
                     {
                         listener.addArtifact( session, repoId, namespace, projectId, versionMetadata );
@@ -304,8 +309,8 @@ public Collection<String> resolveProjectVersions( RepositorySession session, Str
                 }
                 catch ( RepositoryStorageMetadataInvalidException e )
                 {
-                    log.warn( "Not update project in metadata repository due to an error resolving it from storage: "
-                                  + e.getMessage() );
+                    log.warn( "Not update project in metadata repository due to an error resolving it from storage: " +
+                                  e.getMessage() );
 
                     for ( RepositoryListener listener : listeners )
                     {
@@ -333,11 +338,13 @@ public Collection<ArtifactMetadata> resolveArtifacts( RepositorySession session,
         throws MetadataResolutionException
     {
         MetadataRepository metadataRepository = session.getRepository();
-        Collection<ArtifactMetadata> artifacts =
-            metadataRepository.getArtifacts( repoId, namespace, projectId, projectVersion );
+        Collection<ArtifactMetadata> artifacts = metadataRepository.getArtifacts( repoId, namespace, projectId,
+                                                                                  projectVersion );
         ExcludesFilter<String> filter = new ExcludesFilter<String>( createArtifactIdList( artifacts ) );
-        Collection<ArtifactMetadata> storageArtifacts =
-            repositoryStorage.readArtifactsMetadata( repoId, namespace, projectId, projectVersion, filter );
+        Collection<ArtifactMetadata> storageArtifacts = repositoryStorage.readArtifactsMetadata( repoId, namespace,
+                                                                                                 projectId,
+                                                                                                 projectVersion,
+                                                                                                 filter );
         if ( storageArtifacts != null && !storageArtifacts.isEmpty() )
         {
             if ( log.isDebugEnabled() )