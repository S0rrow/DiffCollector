diff --git a/src/server/src/main/java/org/apache/accumulo/server/test/randomwalk/Module.java b/src/server/src/main/java/org/apache/accumulo/server/test/randomwalk/Module.java
index 711dea7899..9ea68ca98e 100644
--- a/src/server/src/main/java/org/apache/accumulo/server/test/randomwalk/Module.java
+++ b/src/server/src/main/java/org/apache/accumulo/server/test/randomwalk/Module.java
@@ -20,7 +20,6 @@ import java.io.File;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
-import java.util.Map.Entry;
 import java.util.Properties;
 import java.util.Random;
 import java.util.Set;
@@ -194,12 +193,12 @@ public class Module extends Node {
     
     boolean test = false;
     if (initNode instanceof Test) {
-      startTimer(initNode);
+      startTimer(initNode.toString());
       test = true;
     }
     initNode.visit(state, getProps(initNodeId));
     if (test)
-      stopTimer(initNode);
+      stopTimer(initNode.toString());
 
     state.visitedNode();
     // update aliases
@@ -241,21 +240,16 @@ public class Module extends Node {
         nextNodeId = ((Alias) nextNode).getTargetId();
         nextNode = ((Alias) nextNode).get();
       }
-      Properties nodeProps = getProps(nextNodeId);
       try {
         test = false;
         if (nextNode instanceof Test) {
-          startTimer(nextNode);
+          startTimer(nextNode.toString());
           test = true;
         }
-        nextNode.visit(state, nodeProps);
+        nextNode.visit(state, getProps(nextNodeId));
         if (test)
-          stopTimer(nextNode);
+          stopTimer(nextNode.toString());
       } catch (Exception e) {
-        log.debug("Properties for node: " + nextNodeId);
-        for (Entry<Object,Object> entry : nodeProps.entrySet()) {
-          log.debug("  " + entry.getKey() + ": " + entry.getValue());
-        }
         throw new Exception("Error running node " + nextNodeId, e);
       }
       state.visitedNode();
@@ -283,37 +277,32 @@ public class Module extends Node {
   /**
    * 
    */
-  private void startTimer(final Node initNode) {
+  private void startTimer(final String nodeName) {
     runningLong.set(false);
     timer = new Thread(new Runnable() {
 
       @Override
       public void run() {
-        while (!runningLong.get()) {
-          try {
-            systemTime = System.currentTimeMillis();
-            synchronized (timer) {
-              timer.wait(time);
-            }
-          } catch (InterruptedException ie) {
-            return;
+        try {
+          systemTime = System.currentTimeMillis();
+          synchronized (timer) {
+            timer.wait(time);
           }
+        } catch (InterruptedException ie) {
+          return;
         }
-        long timeSinceLastProgress = System.currentTimeMillis() - initNode.lastProgress();
-        if (timeSinceLastProgress > time) {
-          log.warn("Node " + initNode + " has been running for " + timeSinceLastProgress / 1000.0 + " seconds. You may want to look into it.");
-        }
+        log.warn("Node " + nodeName + " has been running for " + time / 1000.0 + " seconds. You may want to look into it.");
         runningLong.set(true);
       }
+      
     });
-    initNode.makingProgress();
     timer.start();
   }
   
   /**
    * 
    */
-  private void stopTimer(Node nextNode) {
+  private void stopTimer(String nodeName) {
     synchronized (timer) {
       timer.interrupt();
       try {
@@ -324,7 +313,7 @@ public class Module extends Node {
       }
     }
     if (runningLong.get())
-      log.warn("Node " + nextNode + ", which was running long, has now completed after " + (System.currentTimeMillis() - systemTime) / 1000.0 + " seconds");
+      log.warn("Node " + nodeName + ", which was running long, has now completed after " + (System.currentTimeMillis() - systemTime) / 1000.0 + " seconds");
   }
 
   @Override