diff --git a/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/maven/archiva/webdav/ArchivaDavResource.java b/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/maven/archiva/webdav/ArchivaDavResource.java
index 0aadb3c73..7d2d7f40d 100644
--- a/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/maven/archiva/webdav/ArchivaDavResource.java
+++ b/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/maven/archiva/webdav/ArchivaDavResource.java
@@ -19,114 +19,62 @@
  * under the License.
  */
 
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-
-import javax.servlet.http.HttpServletResponse;
-
-import org.apache.commons.io.FileUtils;
-import org.apache.commons.io.IOUtils;
-import org.apache.jackrabbit.util.Text;
-import org.apache.jackrabbit.webdav.DavException;
-import org.apache.jackrabbit.webdav.DavResource;
-import org.apache.jackrabbit.webdav.DavResourceFactory;
-import org.apache.jackrabbit.webdav.DavResourceIterator;
-import org.apache.jackrabbit.webdav.DavResourceIteratorImpl;
-import org.apache.jackrabbit.webdav.DavResourceLocator;
-import org.apache.jackrabbit.webdav.DavServletResponse;
-import org.apache.jackrabbit.webdav.DavSession;
-import org.apache.jackrabbit.webdav.MultiStatusResponse;
-import org.apache.jackrabbit.webdav.io.InputContext;
-import org.apache.jackrabbit.webdav.io.OutputContext;
-import org.apache.jackrabbit.webdav.lock.ActiveLock;
-import org.apache.jackrabbit.webdav.lock.LockInfo;
-import org.apache.jackrabbit.webdav.lock.LockManager;
-import org.apache.jackrabbit.webdav.lock.Scope;
-import org.apache.jackrabbit.webdav.lock.Type;
+import org.apache.jackrabbit.webdav.*;
+import org.apache.jackrabbit.webdav.property.DavPropertySet;
+import org.apache.jackrabbit.webdav.property.DavPropertyNameSet;
 import org.apache.jackrabbit.webdav.property.DavProperty;
 import org.apache.jackrabbit.webdav.property.DavPropertyName;
-import org.apache.jackrabbit.webdav.property.DavPropertyNameSet;
-import org.apache.jackrabbit.webdav.property.DavPropertySet;
-import org.apache.jackrabbit.webdav.property.DefaultDavProperty;
-import org.apache.jackrabbit.webdav.property.ResourceType;
-import org.apache.maven.archiva.configuration.ManagedRepositoryConfiguration;
-import org.apache.maven.archiva.repository.audit.AuditEvent;
-import org.apache.maven.archiva.repository.audit.AuditListener;
-import org.apache.maven.archiva.repository.scanner.RepositoryContentConsumers;
-import org.apache.maven.archiva.security.ArchivaXworkUser;
-import org.apache.maven.archiva.webdav.util.IndexWriter;
+import org.apache.jackrabbit.webdav.io.InputContext;
+import org.apache.jackrabbit.webdav.io.OutputContext;
+import org.apache.jackrabbit.webdav.lock.*;
+import org.apache.jackrabbit.util.Text;
+import org.apache.commons.io.IOUtils;
+import org.apache.commons.io.FileUtils;
 import org.apache.maven.archiva.webdav.util.MimeTypes;
-import org.joda.time.DateTime;
-import org.joda.time.format.DateTimeFormatter;
-import org.joda.time.format.ISODateTimeFormat;
+import org.apache.maven.archiva.webdav.util.IndexWriter;
 
-import com.opensymphony.xwork.ActionContext;
+import javax.servlet.http.HttpServletResponse;
+import java.util.List;
+import java.util.Date;
+import java.io.*;
 
 /**
- * @author <a href="mailto:james@atlassian.com">James William Dumay</a> Portions from the Apache Jackrabbit Project
+ * @author <a href="mailto:james@atlassian.com">James William Dumay</a>
  */
-public class ArchivaDavResource
-    implements DavResource
+public class ArchivaDavResource implements DavResource
 {
-    public static final String HIDDEN_PATH_PREFIX = ".";
+    private final MimeTypes mimeTypes;
 
-    private final ArchivaDavResourceLocator locator;
+    private final DavResourceLocator locator;
 
     private final DavResourceFactory factory;
 
+    private final DavSession session;
+
     private final File localResource;
 
     private final String logicalResource;
 
-    private DavPropertySet properties = null;
+    private static final String METHODS = "OPTIONS, GET, HEAD, POST, TRACE, PROPFIND, PROPPATCH, MKCOL, COPY, PUT, DELETE, MOVE";
 
-    private LockManager lockManager;
-    
-    private final DavSession session;
-    
-    private String remoteAddr;
-
-    private final ManagedRepositoryConfiguration repository;
+    private static final String COMPLIANCE_CLASS = "1";
 
-    private final RepositoryContentConsumers consumers;
+    private DavPropertySet properties;
 
-    private final MimeTypes mimeTypes;
-
-    private List<AuditListener> auditListeners;
-
-    public ArchivaDavResource( String localResource, String logicalResource, ManagedRepositoryConfiguration repository,
-                               DavSession session, ArchivaDavResourceLocator locator, DavResourceFactory factory,
-                               MimeTypes mimeTypes, List<AuditListener> auditListeners,
-                               RepositoryContentConsumers consumers )
+    public ArchivaDavResource(String localResource, String logicalResource, MimeTypes mimeTypes, DavResourceLocator locator, DavResourceFactory factory, DavSession session)
     {
-        this.localResource = new File( localResource ); 
+        this.mimeTypes = mimeTypes;
+        this.localResource = new File(localResource);
         this.logicalResource = logicalResource;
         this.locator = locator;
         this.factory = factory;
         this.session = session;
-        
-        // TODO: push into locator as well as moving any references out of the resource factory
-        this.repository = repository;
-        
-        // TODO: these should be pushed into the repository layer, along with the physical file operations in this class
-        this.mimeTypes = mimeTypes;
-        this.consumers = consumers;
-        this.auditListeners = auditListeners;
+        this.properties = new DavPropertySet();
     }
 
-    public ArchivaDavResource( String localResource, String logicalResource, ManagedRepositoryConfiguration repository,
-                               String remoteAddr, DavSession session, ArchivaDavResourceLocator locator,
-                               DavResourceFactory factory, MimeTypes mimeTypes, List<AuditListener> auditListeners,
-                               RepositoryContentConsumers consumers )
+    public String getContentType()
     {
-        this( localResource, logicalResource, repository, session, locator, factory, mimeTypes, auditListeners,
-              consumers );
-
-        this.remoteAddr = remoteAddr;
+        return mimeTypes.getMimeType(localResource.getName());
     }
 
     public String getComplianceClass()
@@ -152,7 +100,7 @@ public boolean isCollection()
     public String getDisplayName()
     {
         String resPath = getResourcePath();
-        return ( resPath != null ) ? Text.getName( resPath ) : resPath;
+        return (resPath != null) ? Text.getName(resPath) : resPath;
     }
 
     public DavResourceLocator getLocator()
@@ -160,11 +108,6 @@ public DavResourceLocator getLocator()
         return locator;
     }
 
-    public File getLocalResource()
-    {
-        return localResource;
-    }
-
     public String getResourcePath()
     {
         return locator.getResourcePath();
@@ -172,7 +115,7 @@ public String getResourcePath()
 
     public String getHref()
     {
-        return locator.getHref( isCollection() );
+        return locator.getHref(isCollection());
     }
 
     public long getModificationTime()
@@ -180,67 +123,53 @@ public long getModificationTime()
         return localResource.lastModified();
     }
 
-    public void spool( OutputContext outputContext )
-        throws IOException
+    public long getContentLength()
     {
-        if ( !isCollection() )
-        {
-            FileInputStream is = null;
-            try
-            {
-                outputContext.setContentLength( localResource.length() );
-                outputContext.setContentType( mimeTypes.getMimeType( localResource.getName() ) );
+        return localResource.length();
+    }
 
-                // Write content to stream
-                is = new FileInputStream( localResource );
-                IOUtils.copy( is, outputContext.getOutputStream() );
-            }
-            finally
-            {
-                IOUtils.closeQuietly( is );
-            }
+    public void spool(OutputContext outputContext) throws IOException
+    {
+        if (!isCollection())
+        {
+            IOUtils.copy(new FileInputStream(localResource), outputContext.getOutputStream());
         }
         else
         {
-            IndexWriter writer = new IndexWriter( this, localResource, logicalResource );
-            writer.write( outputContext );
+            IndexWriter writer = new IndexWriter(this, localResource, logicalResource);
+            writer.write(outputContext);
         }
     }
 
     public DavPropertyName[] getPropertyNames()
     {
-        return getProperties().getPropertyNames();
+        return new DavPropertyName[0];
     }
 
-    public DavProperty getProperty( DavPropertyName name )
+    public DavProperty getProperty(DavPropertyName name)
     {
-        return getProperties().get( name );
+        return null;
     }
 
     public DavPropertySet getProperties()
     {
-        return initProperties();
+        return properties;
     }
 
-    public void setProperty( DavProperty property )
-        throws DavException
+    public void setProperty(DavProperty property) throws DavException
     {
     }
 
-    public void removeProperty( DavPropertyName propertyName )
-        throws DavException
+    public void removeProperty(DavPropertyName propertyName) throws DavException
     {
     }
 
-    public MultiStatusResponse alterProperties( DavPropertySet setProperties, DavPropertyNameSet removePropertyNames )
-        throws DavException
+    public MultiStatusResponse alterProperties(DavPropertySet setProperties, DavPropertyNameSet removePropertyNames) throws DavException
     {
         return null;
     }
 
-    @SuppressWarnings("unchecked")
-    public MultiStatusResponse alterProperties( List changeList )
-        throws DavException
+    public MultiStatusResponse alterProperties(List changeList) throws DavException
     {
         return null;
     }
@@ -248,292 +177,116 @@ public MultiStatusResponse alterProperties( List changeList )
     public DavResource getCollection()
     {
         DavResource parent = null;
-        if ( getResourcePath() != null && !getResourcePath().equals( "/" ) )
-        {
-            String parentPath = Text.getRelativeParent( getResourcePath(), 1 );
-            if ( parentPath.equals( "" ) )
-            {
+        if (getResourcePath() != null && !getResourcePath().equals("/")) {
+            String parentPath = Text.getRelativeParent(getResourcePath(), 1);
+            if (parentPath.equals("")) {
                 parentPath = "/";
             }
-            DavResourceLocator parentloc = locator.getFactory().createResourceLocator( locator.getPrefix(), parentPath );
-            try
-            {
-                parent = factory.createResource( parentloc, session );
-            }
-            catch ( DavException e )
-            {
+            DavResourceLocator parentloc = locator.getFactory().createResourceLocator(locator.getPrefix(), locator.getWorkspacePath(), parentPath);
+            try {
+                parent = factory.createResource(parentloc, session);
+            } catch (DavException e) {
                 // should not occur
             }
         }
         return parent;
     }
 
-    public void addMember( DavResource resource, InputContext inputContext )
-        throws DavException
+    public void addMember(DavResource resource, InputContext inputContext) throws DavException
     {
-        File localFile = new File( localResource, resource.getDisplayName() );
-        boolean exists = localFile.exists();
-
-        if ( isCollection() && inputContext.hasStream() ) // New File
+        File localFile = new File(localResource, resource.getDisplayName());
+        if (!resource.isCollection() && isCollection() && inputContext.hasStream()) //New File
         {
+            boolean deleteFile = false;
             FileOutputStream stream = null;
             try
             {
-                stream = new FileOutputStream( localFile );
-                IOUtils.copy( inputContext.getInputStream(), stream );
+                stream = new FileOutputStream(localFile);
+                IOUtils.copy(inputContext.getInputStream(), stream);
+                if (inputContext.getContentLength() != localFile.length())
+                {
+                    deleteFile = true;
+                    throw new DavException(HttpServletResponse.SC_BAD_REQUEST, "Content Header length was "
+                            + inputContext.getContentLength() + " but was " + localFile.length());
+                }
             }
-            catch ( IOException e )
+            catch (IOException e)
             {
-                throw new DavException( HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e );
+                throw new DavException(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e);
             }
             finally
             {
-                IOUtils.closeQuietly( stream );
-            }
-            
-            if ( inputContext.getContentLength() != localFile.length() )
-            {
-                FileUtils.deleteQuietly( localFile );
-                
-                throw new DavException( HttpServletResponse.SC_BAD_REQUEST, "Content Header length was " +
-                    inputContext.getContentLength() + " but was " + localFile.length() );
+                IOUtils.closeQuietly(stream);
+                if (deleteFile)
+                {
+                    FileUtils.deleteQuietly(localFile);
+                }
             }
-            
-            // Just-in-time update of the index and database by executing the consumers for this artifact
-            consumers.executeConsumers( repository, localFile );
-            
-            triggerAuditEvent( resource, exists ? AuditEvent.MODIFY_FILE : AuditEvent.CREATE_FILE );
         }
-        else if ( !inputContext.hasStream() && isCollection() ) // New directory
+        else if (resource.isCollection() && isCollection()) //New directory
         {
             localFile.mkdir();
-            
-            triggerAuditEvent( resource, AuditEvent.CREATE_DIR );
         }
         else
         {
-            throw new DavException( HttpServletResponse.SC_BAD_REQUEST, "Could not write member " +
-                resource.getResourcePath() + " at " + getResourcePath() );
+            throw new DavException(HttpServletResponse.SC_BAD_REQUEST, "Could not write member "
+                    + resource.getResourcePath() + " at " + getResourcePath());
         }
     }
 
     public DavResourceIterator getMembers()
     {
-        List<DavResource> list = new ArrayList<DavResource>();
-        if ( exists() && isCollection() )
-        {
-            for ( String item : localResource.list() )
-            {
-                try
-                {
-                    if ( !item.startsWith( HIDDEN_PATH_PREFIX ) )
-                    {
-                        String path = locator.getResourcePath() + '/' + item;
-                        DavResourceLocator resourceLocator =
-                            locator.getFactory().createResourceLocator( locator.getPrefix(), path );
-                        DavResource resource = factory.createResource( resourceLocator, session );
-                        if ( resource != null )
-                        {
-                            list.add( resource );
-                        }
-                    }
-                }
-                catch ( DavException e )
-                {
-                    // Should not occur
-                }
-            }
-        }
-        return new DavResourceIteratorImpl( list );
-    }
-
-    public void removeMember( DavResource member )
-        throws DavException
-    {
-        File resource = checkDavResourceIsArchivaDavResource( member ).getLocalResource();
-        
-        if ( resource.exists() )
-        {
-            try
-            {
-                if ( resource.isDirectory() )
-                {
-                    FileUtils.deleteDirectory( resource );
-
-                    triggerAuditEvent( member, AuditEvent.REMOVE_DIR );
-                }
-                else
-                {
-                    if ( !resource.delete() )
-                    {
-                        throw new IOException( "Could not remove file" );
-                    }
-
-                    triggerAuditEvent( member, AuditEvent.REMOVE_FILE );
-                }
-            }
-            catch ( IOException e )
-            {
-                throw new DavException( HttpServletResponse.SC_INTERNAL_SERVER_ERROR );
-            }
-        }
-        else
-        {
-            throw new DavException( HttpServletResponse.SC_NOT_FOUND );
-        }
+        return null;
     }
 
-    private void triggerAuditEvent( DavResource member, String event ) throws DavException
+    public void removeMember(DavResource member) throws DavException
     {
-        String path = logicalResource + "/" + member.getDisplayName();
-        
-        triggerAuditEvent( checkDavResourceIsArchivaDavResource( member ).remoteAddr, locator.getRepositoryId(), path,
-                           event );
     }
 
-    public void move( DavResource destination )
-        throws DavException
+    public void move(DavResource destination) throws DavException
     {
-        if ( !exists() )
-        {
-            throw new DavException( HttpServletResponse.SC_NOT_FOUND, "Resource to copy does not exist." );
-        }
-
-        try
-        {
-            ArchivaDavResource resource = checkDavResourceIsArchivaDavResource( destination );
-            if ( isCollection() )
-            {
-                FileUtils.moveDirectory( getLocalResource(), resource.getLocalResource() );
-
-                triggerAuditEvent( remoteAddr, locator.getRepositoryId(), logicalResource, AuditEvent.MOVE_DIRECTORY );
-            }
-            else
-            {
-                FileUtils.moveFile( getLocalResource(), resource.getLocalResource() );
-
-                triggerAuditEvent( remoteAddr, locator.getRepositoryId(), logicalResource, AuditEvent.MOVE_FILE );
-            }
-        }
-        catch ( IOException e )
-        {
-            throw new DavException( HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e );
-        }
     }
 
-    public void copy( DavResource destination, boolean shallow )
-        throws DavException
+    public void copy(DavResource destination, boolean shallow) throws DavException
     {
-        if ( !exists() )
-        {
-            throw new DavException( HttpServletResponse.SC_NOT_FOUND, "Resource to copy does not exist." );
-        }
-
-        if ( shallow && isCollection() )
-        {
-            throw new DavException( DavServletResponse.SC_FORBIDDEN, "Unable to perform shallow copy for collection" );
-        }
-
-        try
-        {
-            ArchivaDavResource resource = checkDavResourceIsArchivaDavResource( destination );
-            if ( isCollection() )
-            {
-                FileUtils.copyDirectory( getLocalResource(), resource.getLocalResource() );
-
-                triggerAuditEvent( remoteAddr, locator.getRepositoryId(), logicalResource, AuditEvent.COPY_DIRECTORY );
-            }
-            else
-            {
-                FileUtils.copyFile( getLocalResource(), resource.getLocalResource() );
-
-                triggerAuditEvent( remoteAddr, locator.getRepositoryId(), logicalResource, AuditEvent.COPY_FILE );
-            }
-        }
-        catch ( IOException e )
-        {
-            throw new DavException( HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e );
-        }
     }
 
-    public boolean isLockable( Type type, Scope scope )
+    public boolean isLockable(Type type, Scope scope)
     {
-        return Type.WRITE.equals(type) && Scope.EXCLUSIVE.equals(scope);
+        return false;
     }
 
-    public boolean hasLock( Type type, Scope scope )
+    public boolean hasLock(Type type, Scope scope)
     {
-        return getLock(type, scope) != null;
+        return false;
     }
 
-    public ActiveLock getLock( Type type, Scope scope )
+    public ActiveLock getLock(Type type, Scope scope)
     {
-        ActiveLock lock = null;
-        if (exists() && Type.WRITE.equals(type) && Scope.EXCLUSIVE.equals(scope)) 
-        {
-            lock = lockManager.getLock(type, scope, this);
-        }
-        return lock;
+        return null;
     }
 
     public ActiveLock[] getLocks()
     {
-        ActiveLock writeLock = getLock(Type.WRITE, Scope.EXCLUSIVE);
-        return (writeLock != null) ? new ActiveLock[]{writeLock} : new ActiveLock[0];
+        return new ActiveLock[0];
     }
 
-    public ActiveLock lock( LockInfo lockInfo )
-        throws DavException
+    public ActiveLock lock(LockInfo reqLockInfo) throws DavException
     {
-        ActiveLock lock = null;
-        if (isLockable(lockInfo.getType(), lockInfo.getScope())) 
-        {
-            lock = lockManager.createLock(lockInfo, this);
-        }
-        else 
-        {
-            throw new DavException(DavServletResponse.SC_PRECONDITION_FAILED, "Unsupported lock type or scope.");
-        }
-        return lock;
+        return null;
     }
 
-    public ActiveLock refreshLock( LockInfo lockInfo, String lockToken )
-        throws DavException
+    public ActiveLock refreshLock(LockInfo reqLockInfo, String lockToken) throws DavException
     {
-        if (!exists()) {
-            throw new DavException(DavServletResponse.SC_NOT_FOUND);
-        }
-        ActiveLock lock = getLock(lockInfo.getType(), lockInfo.getScope());
-        if (lock == null) {
-            throw new DavException(DavServletResponse.SC_PRECONDITION_FAILED, "No lock with the given type/scope present on resource " + getResourcePath());
-        }
-
-        lock = lockManager.refreshLock(lockInfo, lockToken, this);
-
-        return lock;
+        return null;
     }
 
-    public void unlock( String lockToken )
-        throws DavException
+    public void unlock(String lockToken) throws DavException
     {
-        ActiveLock lock = getLock(Type.WRITE, Scope.EXCLUSIVE);
-        if (lock == null)
-        {
-            throw new DavException(HttpServletResponse.SC_PRECONDITION_FAILED);
-        }
-        else if (lock.isLockedByToken(lockToken))
-        {
-            lockManager.releaseLock(lockToken, this);
-        }
-        else
-        {
-            throw new DavException(DavServletResponse.SC_LOCKED);
-        }
     }
 
-    public void addLockManager( LockManager lockManager )
+    public void addLockManager(LockManager lockmgr)
     {
-        this.lockManager = lockManager;
     }
 
     public DavResourceFactory getFactory()
@@ -545,79 +298,4 @@ public DavSession getSession()
     {
         return session;
     }
-
-    /**
-     * Fill the set of properties
-     */
-    protected DavPropertySet initProperties()
-    {
-        if ( !exists() )
-        {
-            properties = new DavPropertySet();
-        }
-        
-        if ( properties != null )
-        {
-            return properties;
-        }
-
-        DavPropertySet properties = new DavPropertySet();
-        
-        // set (or reset) fundamental properties
-        if ( getDisplayName() != null )
-        {
-            properties.add( new DefaultDavProperty( DavPropertyName.DISPLAYNAME, getDisplayName() ) );
-        }
-        if ( isCollection() )
-        {
-            properties.add( new ResourceType( ResourceType.COLLECTION ) );
-            // Windows XP support
-            properties.add( new DefaultDavProperty( DavPropertyName.ISCOLLECTION, "1" ) );
-        }
-        else
-        {
-            properties.add( new ResourceType( ResourceType.DEFAULT_RESOURCE ) );
-
-            // Windows XP support
-            properties.add( new DefaultDavProperty( DavPropertyName.ISCOLLECTION, "0" ) );
-        }
-
-        // Need to get the ISO8601 date for properties
-        DateTime dt = new DateTime( localResource.lastModified() );
-        DateTimeFormatter fmt = ISODateTimeFormat.dateTime();
-        String modifiedDate = fmt.print( dt );
-
-        properties.add( new DefaultDavProperty( DavPropertyName.GETLASTMODIFIED, modifiedDate ) );
-
-        properties.add( new DefaultDavProperty( DavPropertyName.CREATIONDATE, modifiedDate ) );
-
-        properties.add( new DefaultDavProperty( DavPropertyName.GETCONTENTLENGTH, localResource.length() ) );
-        
-        this.properties = properties;
-        
-        return properties;
-    }
-
-    private ArchivaDavResource checkDavResourceIsArchivaDavResource( DavResource resource )
-        throws DavException
-    {
-        if ( !( resource instanceof ArchivaDavResource ) )
-        {
-            throw new DavException( HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
-                                    "DavResource is not instance of ArchivaDavResource" );
-        }
-        return (ArchivaDavResource) resource;
-    }
-
-    private void triggerAuditEvent( String remoteIP, String repositoryId, String resource, String action )
-    {
-        String activePrincipal = ArchivaXworkUser.getActivePrincipal( ActionContext.getContext().getSession() );
-        AuditEvent event = new AuditEvent( repositoryId, activePrincipal, resource, action );
-        event.setRemoteIP( remoteIP );
-
-        for ( AuditListener listener : auditListeners )
-        {
-            listener.auditEvent( event );
-        }
-    }
 }