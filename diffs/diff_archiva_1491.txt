diff --git a/archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/ShowArtifactAction.java b/archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/ShowArtifactAction.java
index 921c7a56e..a2d8e89ea 100644
--- a/archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/ShowArtifactAction.java
+++ b/archiva-modules/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/ShowArtifactAction.java
@@ -24,14 +24,13 @@
 import java.util.List;
 
 import com.opensymphony.xwork2.Validateable;
-import org.apache.archiva.metadata.model.ProjectVersionMetadata;
-import org.apache.archiva.metadata.model.ProjectVersionReference;
-import org.apache.archiva.metadata.repository.MetadataResolver;
-import org.apache.archiva.metadata.repository.MetadataResolverException;
+import org.apache.archiva.metadata.model.ProjectBuildMetadata;
+import org.apache.archiva.metadata.repository.MetadataRepository;
 import org.apache.archiva.metadata.repository.storage.maven2.MavenProjectFacet;
 import org.apache.commons.lang.StringUtils;
 import org.apache.maven.archiva.database.ArchivaDatabaseException;
 import org.apache.maven.archiva.database.ObjectNotFoundException;
+import org.apache.maven.archiva.database.browsing.RepositoryBrowsing;
 import org.apache.maven.archiva.model.ArchivaProjectModel;
 import org.apache.maven.archiva.model.CiManagement;
 import org.apache.maven.archiva.model.Dependency;
@@ -59,6 +58,11 @@
 {
     /* .\ Not Exposed \._____________________________________________ */
 
+    /**
+     * @plexus.requirement role-hint="default"
+     */
+    private RepositoryBrowsing repoBrowsing;
+
     /**
      * @plexus.requirement
      */
@@ -67,7 +71,7 @@
     /**
      * @plexus.requirement
      */
-    private MetadataResolver metadataResolver;
+    private MetadataRepository metadataRepository;
 
     /* .\ Exposed Output Objects \.__________________________________ */
 
@@ -96,112 +100,88 @@
     private List<String> snapshotVersions;
 
     /**
-     * Show the versioned project information tab.
-     * TODO: Change name to 'project' - we are showing project versions here, not specific artifact information (though
-     * that is rendered in the download box).
+     * Show the versioned project information tab. TODO: Change name to 'project'
      */
     public String artifact()
     {
         // In the future, this should be replaced by the repository grouping mechanism, so that we are only making
         // simple resource requests here and letting the resolver take care of it
-        ProjectVersionMetadata versionMetadata = null;
+        ProjectBuildMetadata build = null;
         snapshotVersions = new ArrayList<String>();
         for ( String repoId : getObservableRepos() )
         {
-            if ( versionMetadata == null )
+            if ( build == null )
             {
-                // TODO: though we have a simple mapping now, do we want to support paths like /1.0-20090111.123456-1/
-                //   again by mapping it to /1.0-SNAPSHOT/? Currently, the individual versions are not supported as we
-                //   are only displaying the project's single version.
-
-                // we don't want the implementation being that intelligent - so another resolver to do the
-                // "just-in-time" nature of picking up the metadata (if appropriate for the repository type) is used
-                try
-                {
-                    versionMetadata = metadataResolver.getProjectVersion( repoId, groupId, artifactId, version );
-                }
-                catch ( MetadataResolverException e )
+                // TODO: we don't really want the implementation being that intelligent - so another resolver to do
+                //  the "just-in-time" nature of picking up the metadata (if appropriate for the repository type) if not
+                //  found in the content repository is needed here
+                build = metadataRepository.getProjectBuild( repoId, groupId, artifactId, version );
+                if ( build != null )
                 {
-                    addActionError( "Error occurred resolving metadata for project: " + e.getMessage() );
-                    return ERROR;
-                }
-                if ( versionMetadata != null )
-                {
-                    repositoryId = repoId;
-
-                    snapshotVersions.addAll(
-                        metadataResolver.getArtifactVersions( repoId, groupId, artifactId, versionMetadata.getId() ) );
-                    snapshotVersions.remove( version );
+                    repositoryId = repoId;      
                 }
             }
+            snapshotVersions.addAll( metadataRepository.getArtifactVersions( repoId, groupId, artifactId, version ) );
+            snapshotVersions.remove( version );
         }
 
-        if ( versionMetadata == null )
+        if ( build == null )
         {
             addActionError( "Artifact not found" );
             return ERROR;
         }
-        model = populateLegacyModel( versionMetadata );
-
-        return SUCCESS;
-    }
 
-    private ArchivaProjectModel populateLegacyModel( ProjectVersionMetadata versionMetadata )
-    {
         // TODO: eventually, move to just use the metadata directly, with minimal JSP changes, mostly for Maven specifics
-        ArchivaProjectModel model = new ArchivaProjectModel();
-        MavenProjectFacet projectFacet = (MavenProjectFacet) versionMetadata.getFacet( MavenProjectFacet.FACET_ID );
-        if ( projectFacet != null )
+        model = new ArchivaProjectModel();
+        MavenProjectFacet projectFacet = (MavenProjectFacet) build.getFacet( MavenProjectFacet.FACET_ID );
+        model.setGroupId( projectFacet.getGroupId() );
+        model.setArtifactId( projectFacet.getArtifactId() );
+        model.setPackaging( projectFacet.getPackaging() );
+        if ( projectFacet.getParent() != null )
         {
-            model.setGroupId( projectFacet.getGroupId() );
-            model.setArtifactId( projectFacet.getArtifactId() );
-            model.setPackaging( projectFacet.getPackaging() );
-            if ( projectFacet.getParent() != null )
-            {
-                VersionedReference parent = new VersionedReference();
-                parent.setGroupId( projectFacet.getParent().getGroupId() );
-                parent.setArtifactId( projectFacet.getParent().getArtifactId() );
-                parent.setVersion( projectFacet.getParent().getVersion() );
-                model.setParentProject( parent );
-            }
+            VersionedReference parent = new VersionedReference();
+            parent.setGroupId( projectFacet.getParent().getGroupId() );
+            parent.setArtifactId( projectFacet.getParent().getArtifactId() );
+            parent.setVersion( projectFacet.getParent().getVersion() );
+            model.setParentProject( parent );
         }
 
-        model.setVersion( versionMetadata.getId() );
-        model.setDescription( versionMetadata.getDescription() );
-        model.setName( versionMetadata.getName() );
-        model.setUrl( versionMetadata.getUrl() );
-        if ( versionMetadata.getOrganization() != null )
+        model.setVersion( build.getId() );
+        model.setDescription( build.getDescription() );
+        model.setName( build.getName() );
+        model.setUrl( build.getUrl() );
+        if ( build.getOrganization() != null )
         {
             Organization organization = new Organization();
-            organization.setName( versionMetadata.getOrganization().getName() );
-            organization.setUrl( versionMetadata.getOrganization().getUrl() );
+            organization.setName( build.getOrganization().getName() );
+            organization.setUrl( build.getOrganization().getUrl() );
             model.setOrganization( organization );
         }
-        if ( versionMetadata.getCiManagement() != null )
+        if ( build.getCiManagement() != null )
         {
             CiManagement ci = new CiManagement();
-            ci.setSystem( versionMetadata.getCiManagement().getSystem() );
-            ci.setUrl( versionMetadata.getCiManagement().getUrl() );
+            ci.setSystem( build.getCiManagement().getSystem() );
+            ci.setUrl( build.getCiManagement().getUrl() );
             model.setCiManagement( ci );
         }
-        if ( versionMetadata.getIssueManagement() != null )
+        if ( build.getIssueManagement() != null )
         {
             IssueManagement issueManagement = new IssueManagement();
-            issueManagement.setSystem( versionMetadata.getIssueManagement().getSystem() );
-            issueManagement.setUrl( versionMetadata.getIssueManagement().getUrl() );
+            issueManagement.setSystem( build.getIssueManagement().getSystem() );
+            issueManagement.setUrl( build.getIssueManagement().getUrl() );
             model.setIssueManagement( issueManagement );
         }
-        if ( versionMetadata.getScm() != null )
+        if ( build.getScm() != null )
         {
             Scm scm = new Scm();
-            scm.setConnection( versionMetadata.getScm().getConnection() );
-            scm.setDeveloperConnection( versionMetadata.getScm().getDeveloperConnection() );
-            scm.setUrl( versionMetadata.getScm().getUrl() );
+            scm.setConnection( build.getScm().getConnection() );
+            scm.setDeveloperConnection( build.getScm().getDeveloperConnection() );
+            scm.setUrl( build.getScm().getUrl() );
             model.setScm( scm );
         }
-        if ( versionMetadata.getLicenses() != null )
+        if ( build.getLicenses() != null )
         {
-            for ( org.apache.archiva.metadata.model.License l : versionMetadata.getLicenses() )
+            for ( org.apache.archiva.metadata.model.License l : build.getLicenses() )
             {
                 License license = new License();
                 license.setName( l.getName() );
@@ -209,37 +189,8 @@ private ArchivaProjectModel populateLegacyModel( ProjectVersionMetadata versionM
                 model.addLicense( license );
             }
         }
-        if ( versionMetadata.getMailingLists() != null )
-        {
-            for ( org.apache.archiva.metadata.model.MailingList l : versionMetadata.getMailingLists() )
-            {
-                MailingList mailingList = new MailingList();
-                mailingList.setMainArchiveUrl( l.getMainArchiveUrl() );
-                mailingList.setName( l.getName() );
-                mailingList.setPostAddress( l.getPostAddress() );
-                mailingList.setSubscribeAddress( l.getSubscribeAddress() );
-                mailingList.setUnsubscribeAddress( l.getUnsubscribeAddress() );
-                mailingList.setOtherArchives( l.getOtherArchives() );
-                model.addMailingList( mailingList );
-            }
-        }
-        if ( versionMetadata.getDependencies() != null )
-        {
-            for ( org.apache.archiva.metadata.model.Dependency d : versionMetadata.getDependencies() )
-            {
-                Dependency dependency = new Dependency();
-                dependency.setScope( d.getScope() );
-                dependency.setSystemPath( d.getSystemPath() );
-                dependency.setType( d.getType() );
-                dependency.setVersion( d.getVersion() );
-                dependency.setArtifactId( d.getArtifactId() );
-                dependency.setClassifier( d.getClassifier() );
-                dependency.setGroupId( d.getGroupId() );
-                dependency.setOptional( d.isOptional() );
-                model.addDependency( dependency );
-            }
-        }
-        return model;
+
+        return SUCCESS;
     }
 
     /**
@@ -248,29 +199,7 @@ private ArchivaProjectModel populateLegacyModel( ProjectVersionMetadata versionM
     public String dependencies()
         throws ObjectNotFoundException, ArchivaDatabaseException
     {
-        ProjectVersionMetadata versionMetadata = null;
-        for ( String repoId : getObservableRepos() )
-        {
-            if ( versionMetadata == null )
-            {
-                try
-                {
-                    versionMetadata = metadataResolver.getProjectVersion( repoId, groupId, artifactId, version );
-                }
-                catch ( MetadataResolverException e )
-                {
-                    addActionError( "Error occurred resolving metadata for project: " + e.getMessage() );
-                    return ERROR;
-                }
-            }
-        }
-
-        if ( versionMetadata == null )
-        {
-            addActionError( "Artifact not found" );
-            return ERROR;
-        }
-        model = populateLegacyModel( versionMetadata );
+        this.model = repoBrowsing.selectVersion( getPrincipal(), getObservableRepos(), groupId, artifactId, version );
 
         this.dependencies = model.getDependencies();
 
@@ -283,30 +212,7 @@ public String dependencies()
     public String mailingLists()
         throws ObjectNotFoundException, ArchivaDatabaseException
     {
-        ProjectVersionMetadata versionMetadata = null;
-        for ( String repoId : getObservableRepos() )
-        {
-            if ( versionMetadata == null )
-            {
-                try
-                {
-                    versionMetadata = metadataResolver.getProjectVersion( repoId, groupId, artifactId, version );
-                }
-                catch ( MetadataResolverException e )
-                {
-                    addActionError( "Error occurred resolving metadata for project: " + e.getMessage() );
-                    return ERROR;
-                }
-            }
-        }
-
-        if ( versionMetadata == null )
-        {
-            addActionError( "Artifact not found" );
-            return ERROR;
-        }
-        model = populateLegacyModel( versionMetadata );
-
+        this.model = repoBrowsing.selectVersion( getPrincipal(), getObservableRepos(), groupId, artifactId, version );
         this.mailingLists = model.getMailingLists();
 
         return SUCCESS;
@@ -330,52 +236,9 @@ public String reports()
     public String dependees()
         throws ObjectNotFoundException, ArchivaDatabaseException
     {
-        ProjectVersionMetadata versionMetadata = null;
-        for ( String repoId : getObservableRepos() )
-        {
-            if ( versionMetadata == null )
-            {
-                try
-                {
-                    versionMetadata = metadataResolver.getProjectVersion( repoId, groupId, artifactId, version );
-                }
-                catch ( MetadataResolverException e )
-                {
-                    addActionError( "Error occurred resolving metadata for project: " + e.getMessage() );
-                    return ERROR;
-                }
-            }
-        }
-
-        if ( versionMetadata == null )
-        {
-            addActionError( "Artifact not found" );
-            return ERROR;
-        }
-        model = populateLegacyModel( versionMetadata );
-
-        List<ProjectVersionReference> references = new ArrayList<ProjectVersionReference>();
-        // TODO: what if we get duplicates across repositories?
-        for ( String repoId : getObservableRepos() )
-        {
-            // TODO: what about if we want to see this irrespective of version?
-            references.addAll( metadataResolver.getProjectReferences( repoId, groupId, artifactId, version ) );
-        }
-
-        this.dependees = new ArrayList<ArchivaProjectModel>();
-        for ( ProjectVersionReference reference : references )
-        {
-            ArchivaProjectModel ref = new ArchivaProjectModel();
+        this.model = repoBrowsing.selectVersion( getPrincipal(), getObservableRepos(), groupId, artifactId, version );
 
-            ref.setGroupId( reference.getNamespace() );
-            ref.setArtifactId( reference.getProjectId() );
-            ref.setVersion( reference.getProjectVersion() );
-
-            dependees.add( ref );
-        }
-
-        // TODO: may need to note on the page that references will be incomplete if the other artifacts are not yet stored in the content repository
-        // (especially in the case of pre-population import)
+        this.dependees = repoBrowsing.getUsedBy( getPrincipal(), getObservableRepos(), groupId, artifactId, version );
 
         return SUCCESS;
     }
@@ -386,13 +249,9 @@ public String dependees()
     public String dependencyTree()
         throws ObjectNotFoundException, ArchivaDatabaseException
     {
-        // temporarily use this as we only need the model for the tag to perform, but we should be resolving the
-        // graph here instead
+        this.model = repoBrowsing.selectVersion( getPrincipal(), getObservableRepos(), groupId, artifactId, version );
 
-        // TODO: may need to note on the page that tree will be incomplete if the other artifacts are not yet stored in the content repository
-        // (especially in the case of pre-population import)
-
-        return artifact();
+        return SUCCESS;
     }
 
     private List<String> getObservableRepos()
@@ -506,8 +365,8 @@ public void setSnapshotVersions( List<String> snapshotVersions )
         this.snapshotVersions = snapshotVersions;
     }
 
-    public MetadataResolver getMetadataResolver()
+    public MetadataRepository getMetadataRepository()
     {
-        return metadataResolver;
+        return metadataRepository;
     }
 }