diff --git a/webapp/src/test/java/org/apache/atlas/web/resources/EntityJerseyResourceIT.java b/webapp/src/test/java/org/apache/atlas/web/resources/EntityJerseyResourceIT.java
index 0b4914866..aa92bc092 100755
--- a/webapp/src/test/java/org/apache/atlas/web/resources/EntityJerseyResourceIT.java
+++ b/webapp/src/test/java/org/apache/atlas/web/resources/EntityJerseyResourceIT.java
@@ -1,4 +1,4 @@
-    /**
+/**
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
@@ -71,9 +71,7 @@ import java.util.Map;
 import java.util.UUID;
 
 import static org.testng.Assert.assertEquals;
-import static org.testng.Assert.assertNotNull;
 import static org.testng.Assert.fail;
-import org.apache.atlas.utils.AuthenticationUtil;
 
 
 /**
@@ -128,13 +126,9 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         entity.set("name", randomString());
         entity.set("description", randomString());
 
-        String user = "admin";
-        AtlasClient localClient = null;
-        if (!AuthenticationUtil.isKerberosAuthenticationEnabled()) {
-            localClient = new AtlasClient(new String[]{baseUrl}, new String[]{"admin", "admin"});
-        } else {
-            localClient = new AtlasClient(baseUrl);
-        }
+        String user = "testuser";
+        UserGroupInformation ugi = UserGroupInformation.createRemoteUser(user);
+        AtlasClient localClient = new AtlasClient(ugi, null, baseUrl);
         String entityId = localClient.createEntity(entity).get(0);
 
         List<EntityAuditEvent> events = serviceClient.getEntityAuditEvents(entityId, (short) 10);
@@ -160,10 +154,7 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
 
         JSONObject response = new JSONObject(responseAsString);
         Assert.assertNotNull(response.get(AtlasClient.REQUEST_ID));
-
-        AtlasClient.EntityResult entityResult = AtlasClient.EntityResult.fromString(response.toString());
-        assertEquals(entityResult.getCreatedEntities().size(), 1);
-        assertNotNull(entityResult.getCreatedEntities().get(0));
+        Assert.assertNotNull(response.get(AtlasClient.GUID));
     }
 
     @Test
@@ -183,7 +174,8 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
             }
         });
 
-        JSONArray results = searchByDSL(String.format("%s where name='%s'", DATABASE_TYPE, dbName));
+        JSONArray results =
+                serviceClient.searchByDSL(String.format("%s where name='%s'", DATABASE_TYPE, dbName));
         assertEquals(results.length(), 1);
 
         //create entity again shouldn't create another instance with same unique attribute value
@@ -201,7 +193,7 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
             //expected timeout
         }
 
-        results = searchByDSL(String.format("%s where name='%s'", DATABASE_TYPE, dbName));
+        results = serviceClient.searchByDSL(String.format("%s where name='%s'", DATABASE_TYPE, dbName));
         assertEquals(results.length(), 1);
 
         //Test the same across references
@@ -209,10 +201,9 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         final String tableName = randomString();
         table.set("name", tableName);
         table.set("db", db);
-        table.set(AtlasClient.REFERENCEABLE_ATTRIBUTE_NAME, tableName);
 
         serviceClient.createEntity(table);
-        results = searchByDSL(String.format("%s where name='%s'", DATABASE_TYPE, dbName));
+        results = serviceClient.searchByDSL(String.format("%s where name='%s'", DATABASE_TYPE, dbName));
         assertEquals(results.length(), 1);
     }
 
@@ -385,9 +376,7 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
     }
 
     private void addProperty(String guid, String property, String value) throws AtlasServiceException {
-        AtlasClient.EntityResult entityResult = serviceClient.updateEntityAttribute(guid, property, value);
-        assertEquals(entityResult.getUpdateEntities().size(), 1);
-        assertEquals(entityResult.getUpdateEntities().get(0), guid);
+        serviceClient.updateEntityAttribute(guid, property, value);
     }
 
     private ClientResponse getEntityDefinition(String guid) {
@@ -493,6 +482,7 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
 
         JSONObject response = new JSONObject(responseAsString);
         Assert.assertNotNull(response.get(AtlasClient.REQUEST_ID));
+        Assert.assertNotNull(response.get("GUID"));
 
         final JSONArray list = response.getJSONArray(AtlasClient.RESULTS);
         Assert.assertEquals(list.length(), 7);
@@ -523,6 +513,7 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
 
         JSONObject response = new JSONObject(responseAsString);
         Assert.assertNotNull(response.get(AtlasClient.REQUEST_ID));
+        Assert.assertNotNull(response.get(AtlasClient.GUID));
 
         assertEntityAudit(guid, EntityAuditEvent.EntityAuditAction.TAG_ADD);
     }
@@ -570,6 +561,7 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
 
         JSONObject response = new JSONObject(responseAsString);
         Assert.assertNotNull(response.get(AtlasClient.REQUEST_ID));
+        Assert.assertNotNull(response.get(AtlasClient.GUID));
 
         // verify the response
         clientResponse = getEntityDefinition(guid);
@@ -620,6 +612,7 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
 
         JSONObject response = new JSONObject(responseAsString);
         Assert.assertNotNull(response.get(AtlasClient.REQUEST_ID));
+        Assert.assertNotNull(response.get("GUID"));
         Assert.assertNotNull(response.get("traitName"));
         assertEntityAudit(guid, EntityAuditEvent.EntityAuditAction.TAG_DELETE);
     }
@@ -642,8 +635,7 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
                 "trait=" + traitName + " should be defined in type system before it can be deleted");
         Assert.assertNotNull(response.get(AtlasClient.STACKTRACE));
     }
-
-    @Test(dependsOnMethods = "testSubmitEntity()")
+@Test(dependsOnMethods = "testSubmitEntity()")
     public void testDeleteExistentTraitNonExistentForEntity() throws Exception {
     
         final String guid = tableId._getId();
@@ -712,9 +704,7 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         }});
 
         LOG.debug("Updating entity= " + tableUpdated);
-        AtlasClient.EntityResult entityResult = serviceClient.updateEntity(tableId._getId(), tableUpdated);
-        assertEquals(entityResult.getUpdateEntities().size(), 1);
-        assertEquals(entityResult.getUpdateEntities().get(0), tableId._getId());
+        serviceClient.updateEntity(tableId._getId(), tableUpdated);
 
         ClientResponse response = getEntityDefinition(tableId._getId());
         String definition = getEntityDefinition(response);
@@ -732,10 +722,8 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         }});
 
         LOG.debug("Updating entity= " + tableUpdated);
-        entityResult = serviceClient.updateEntity(BaseResourceIT.HIVE_TABLE_TYPE, AtlasClient.REFERENCEABLE_ATTRIBUTE_NAME,
-                (String) tableInstance.get("name"), tableUpdated);
-        assertEquals(entityResult.getUpdateEntities().size(), 1);
-        assertEquals(entityResult.getUpdateEntities().get(0), tableId._getId());
+        serviceClient.updateEntity(BaseResourceIT.HIVE_TABLE_TYPE, "name", (String) tableInstance.get("name"),
+                tableUpdated);
 
         response = getEntityDefinition(tableId._getId());
         definition = getEntityDefinition(response);
@@ -744,6 +732,7 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
 
         Assert.assertTrue(refs.get(0).equalsContents(columns.get(0)));
         Assert.assertEquals(refs.get(0).get("dataType"), "int");
+
     }
 
     @Test(dependsOnMethods = "testSubmitEntity")
@@ -776,8 +765,9 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         // ATLAS-586: verify response entity can be parsed by GSON.
         String entity = clientResponse.getEntity(String.class);
         Gson gson = new Gson();
+        UpdateEntitiesResponse updateEntitiesResponse = null;
         try {
-            UpdateEntitiesResponse updateEntitiesResponse = gson.fromJson(entity, UpdateEntitiesResponse.class);
+            updateEntitiesResponse = gson.fromJson(entity, UpdateEntitiesResponse.class);
         }
         catch (JsonSyntaxException e) {
             Assert.fail("Response entity from " + service.path(ENTITIES).getURI() + " not parseable by GSON", e);
@@ -795,7 +785,7 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
     
     private static class UpdateEntitiesResponse {
         String requestId;
-        AtlasClient.EntityResult entities;
+        String[] GUID;
         AtlasEntity definition;
     }
     
@@ -821,9 +811,15 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
             queryParam(AtlasClient.GUID.toLowerCase(), db1Id._getId()).
             queryParam(AtlasClient.GUID.toLowerCase(), db2Id._getId()).
             accept(Servlets.JSON_MEDIA_TYPE).type(Servlets.JSON_MEDIA_TYPE).method(HttpMethod.DELETE, ClientResponse.class);
-
         JSONObject response = getEntity(clientResponse);
-        List<String> deletedGuidsList = AtlasClient.EntityResult.fromString(response.toString()).getDeletedEntities();
+        final String deletedGuidsJson = response.getString(AtlasClient.GUID);
+        Assert.assertNotNull(deletedGuidsJson);
+        JSONArray guidsArray = new JSONArray(deletedGuidsJson);
+        Assert.assertEquals(guidsArray.length(), 2);
+        List<String> deletedGuidsList = new ArrayList<>(2);
+        for (int index = 0; index < guidsArray.length(); index++) {
+            deletedGuidsList.add(guidsArray.getString(index));
+        }
         Assert.assertTrue(deletedGuidsList.contains(db1Id._getId()));
         Assert.assertTrue(deletedGuidsList.contains(db2Id._getId()));
 
@@ -847,8 +843,7 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         Id db2Id = createInstance(db2);
         
         // Delete the database entities
-        List<String> deletedGuidsList =
-                serviceClient.deleteEntities(db1Id._getId(), db2Id._getId()).getDeletedEntities();
+        List<String> deletedGuidsList = serviceClient.deleteEntities(db1Id._getId(), db2Id._getId());
         
         // Verify that deleteEntities() response has database entity guids 
         Assert.assertEquals(deletedGuidsList.size(), 2);
@@ -872,7 +867,7 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         Id db1Id = createInstance(db1);
 
         // Delete the database entity
-        List<String> deletedGuidsList = serviceClient.deleteEntity(DATABASE_TYPE, "name", dbName).getDeletedEntities();
+        List<String> deletedGuidsList = serviceClient.deleteEntity(DATABASE_TYPE, "name", dbName);
 
         // Verify that deleteEntities() response has database entity guids
         Assert.assertEquals(deletedGuidsList.size(), 1);