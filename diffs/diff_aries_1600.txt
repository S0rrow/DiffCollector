diff --git a/jpa/jpa-container-context/src/main/java/org/apache/aries/jpa/container/context/namespace/NSHandler.java b/jpa/jpa-container-context/src/main/java/org/apache/aries/jpa/container/context/namespace/NSHandler.java
index d73ea25f4..fb611e076 100644
--- a/jpa/jpa-container-context/src/main/java/org/apache/aries/jpa/container/context/namespace/NSHandler.java
+++ b/jpa/jpa-container-context/src/main/java/org/apache/aries/jpa/container/context/namespace/NSHandler.java
@@ -19,15 +19,12 @@
 package org.apache.aries.jpa.container.context.namespace;
 
 import java.net.URL;
-import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
 import javax.persistence.EntityManager;
 import javax.persistence.EntityManagerFactory;
-import javax.persistence.PersistenceContextType;
 
 import org.apache.aries.blueprint.NamespaceHandler;
 import org.apache.aries.blueprint.ParserContext;
@@ -37,14 +34,10 @@ import org.apache.aries.blueprint.reflect.BeanPropertyImpl;
 import org.apache.aries.blueprint.reflect.ReferenceMetadataImpl;
 import org.apache.aries.jpa.container.context.PersistenceManager;
 import org.osgi.framework.Bundle;
-import org.osgi.service.blueprint.reflect.BeanArgument;
-import org.osgi.service.blueprint.reflect.BeanMetadata;
-import org.osgi.service.blueprint.reflect.BeanProperty;
 import org.osgi.service.blueprint.reflect.ComponentMetadata;
 import org.osgi.service.blueprint.reflect.MapEntry;
 import org.osgi.service.blueprint.reflect.MapMetadata;
 import org.osgi.service.blueprint.reflect.Metadata;
-import org.osgi.service.blueprint.reflect.Target;
 import org.osgi.service.blueprint.reflect.ValueMetadata;
 import org.w3c.dom.Element;
 import org.w3c.dom.Node;
@@ -52,7 +45,7 @@ import org.w3c.dom.NodeList;
 
 public class NSHandler implements NamespaceHandler {
   
-  public static final String NS_URI = "http://aries.apache.org/xmlns/jpa/v1.0.0";
+  private static final String NS_URI = "http://aries.apache.org/xmlns/jpa/v1.0.0";
   private static final String BLUEPRINT_NS = "http://www.osgi.org/xmlns/blueprint/v1.0.0";
   
   private static final String TAG_UNIT = "unit";
@@ -64,7 +57,8 @@ public class NSHandler implements NamespaceHandler {
   private static final String ATTR_UNIT_NAME = "unitname";
   
   private static final String TYPE_JTA = "TRANSACTION";
-  private static final String DEFAULT_UNIT_NAME = null;
+  private static final String TYPE_EXTENDED = "EXTENDED";
+  private static final String DEFAULT_UNIT_NAME = "";
   
   private PersistenceManager manager;
   
@@ -73,118 +67,58 @@ public class NSHandler implements NamespaceHandler {
   }
 
   public ComponentMetadata decorate(Node node, ComponentMetadata component, ParserContext context) {
-    if (node.getNodeType() != Node.ELEMENT_NODE)
-      throw new IllegalArgumentException();    
-    
-    Element element = (Element) node;
-    
-    if (!(component instanceof BeanMetadata))
-      throw new IllegalArgumentException();
-    
-    final BeanMetadata bean = (BeanMetadata) component;
-    
+    /*
+     * The namespace does not allow any decorated elements, so we should never get here.
+     * In case we do -> explode.
+     */
+    throw new UnsupportedOperationException();
+  }
+
+  public Set<Class> getManagedClasses() {
+    return null;
+  }
+
+  public URL getSchemaLocation(String namespace) {
+    return getClass().getResource("jpa.xsd");
+  }
+
+  public Metadata parse(Element element, ParserContext context) {
     if (!NS_URI.equals(element.getNamespaceURI()))
       throw new IllegalArgumentException();
         
-    if (!TAG_UNIT.equals(element.getLocalName()) && !TAG_CONTEXT.equals(element.getLocalName()))
-      throw new IllegalArgumentException();
-    
-    final BeanProperty beanProperty = createInjectMetadata(element, 
-        TAG_UNIT.equals(element.getLocalName()) ? EntityManagerFactory.class : EntityManager.class);
-      
-    if (TAG_CONTEXT.equals(element.getLocalName())) {
+    Metadata result = null;
+    if (TAG_UNIT.equals(element)) {
+      result = createInjectMetadata(element, EntityManagerFactory.class);
+    } else if (TAG_CONTEXT.equals(element)) {
       Bundle client = getBlueprintBundle(context);
       String unitName = parseUnitName(element);
 
-      HashMap<String,Object> properties = new HashMap<String, Object>();
+      Map<String,Object> properties = new HashMap<String, Object>();
       properties.put(ATTR_TYPE, parseType(element));
       properties.putAll(parseJPAProperties(element, context));
 
       manager.registerContext(unitName, client, properties);      
+      result = createInjectMetadata(element, EntityManager.class);
+    } else {
+      throw new IllegalArgumentException();
     }
     
-    return new BeanMetadata() {
-      
-      public String getId() {
-        return bean.getId();
-      }
-      
-      public List<String> getDependsOn() {
-        return bean.getDependsOn();
-      }
-      
-      public int getActivation() {
-        return bean.getActivation();
-      }
-      
-      public String getScope() {
-        return bean.getScope();
-      }
-      
-      public List<BeanProperty> getProperties() {
-        ArrayList<BeanProperty> result = new ArrayList<BeanProperty>(bean.getProperties());
-        result.add(beanProperty);
-        return result;
-      }
-      
-      public String getInitMethod() {
-        return bean.getInitMethod();
-      }
-      
-      public String getFactoryMethod() {
-        return bean.getFactoryMethod();
-      }
-      
-      public Target getFactoryComponent() {
-        return bean.getFactoryComponent();
-      }
-      
-      public String getDestroyMethod() {
-        return bean.getDestroyMethod();
-      }
-      
-      public String getClassName() {
-        return bean.getClassName();
-      }
-      
-      public List<BeanArgument> getArguments() {
-        return bean.getArguments();
-      }
-    };
-  }
-
-  public Set<Class> getManagedClasses() {
-    return null;
-  }
-
-  public URL getSchemaLocation(String namespace) {
-    return getClass().getResource("jpa.xsd");
-  }
-
-  public Metadata parse(Element element, ParserContext context) {
-    /*
-     * The namespace does not any top-level elements, so we should never get here.
-     * In case we do -> explode.
-     */
-    throw new UnsupportedOperationException();
+    return result;
   }
   
-  private BeanProperty createInjectMetadata(Element element, Class<?> clazz) {
+  private Metadata createInjectMetadata(Element element, Class<?> clazz) {
     String unitName = parseUnitName(element);
     String property = parseProperty(element);
 
     ReferenceMetadataImpl refMetadata = new ReferenceMetadataImpl();
     refMetadata.setInterface(clazz.getName());
-    if (unitName != null)
-      refMetadata.setFilter("(osgi.unit.name="+unitName+")");
-    else
-      refMetadata.setFilter("(!(osgi.unit.name=*))");
+    refMetadata.setFilter("(osgi.unit.name="+unitName+")");
     
     MutableBeanProperty propertyMetadata = new BeanPropertyImpl();
     propertyMetadata.setName(property);
     propertyMetadata.setValue(refMetadata);
     
-    return propertyMetadata;
+    return refMetadata;
   }
   
   private Bundle getBlueprintBundle(ParserContext context) {
@@ -203,10 +137,9 @@ public class NSHandler implements NamespaceHandler {
     return element.getAttribute(ATTR_PROPERTY);
   }
 
-  private PersistenceContextType parseType(Element element) {
-    String typeName = element.hasAttribute(ATTR_TYPE) ? element.getAttribute(ATTR_TYPE) : TYPE_JTA;
-    
-    return PersistenceContextType.valueOf(typeName);
+  private String parseType(Element element) {
+    return element.hasAttribute(ATTR_TYPE) ? 
+        element.getAttribute(ATTR_TYPE) : TYPE_JTA;
   }
   
   private String parseUnitName(Element element) {
@@ -220,8 +153,8 @@ public class NSHandler implements NamespaceHandler {
     
     for (int i=0; i<ns.getLength(); i++) {
       MapMetadata metadata = context.parseElement(MapMetadata.class, null, (Element) ns.item(i));
-      for (MapEntry entry : (List<MapEntry>) metadata.getEntries()) {
-        if (entry.getKey() instanceof ValueMetadata && entry.getValue() instanceof ValueMetadata) {
+      for (MapEntry entry : metadata.getEntries()) {
+        if (!(entry.getKey() instanceof ValueMetadata) && !(entry.getValue() instanceof ValueMetadata)) {
           ValueMetadata key = (ValueMetadata) entry.getKey();
           ValueMetadata value = (ValueMetadata) entry.getValue();
           