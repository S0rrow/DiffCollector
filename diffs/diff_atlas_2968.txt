diff --git a/repository/src/main/java/org/apache/atlas/query/GremlinQueryComposer.java b/repository/src/main/java/org/apache/atlas/query/GremlinQueryComposer.java
index 4101938f8..34a0842c0 100644
--- a/repository/src/main/java/org/apache/atlas/query/GremlinQueryComposer.java
+++ b/repository/src/main/java/org/apache/atlas/query/GremlinQueryComposer.java
@@ -18,65 +18,51 @@
 package org.apache.atlas.query;
 
 import com.google.common.annotations.VisibleForTesting;
-import org.apache.atlas.AtlasErrorCode;
-import org.apache.atlas.exception.AtlasBaseException;
-import org.apache.atlas.model.TypeCategory;
 import org.apache.atlas.model.discovery.SearchParameters;
-import org.apache.atlas.model.typedef.AtlasStructDef;
 import org.apache.atlas.type.AtlasEntityType;
-import org.apache.atlas.type.AtlasStructType;
 import org.apache.atlas.type.AtlasType;
 import org.apache.atlas.type.AtlasTypeRegistry;
-import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.lang.StringUtils;
+import org.joda.time.DateTime;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import javax.inject.Inject;
 import java.text.DateFormat;
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Objects;
-import java.util.Set;
-import java.util.TimeZone;
+import java.util.*;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
 public class GremlinQueryComposer {
-    private static final Logger                  LOG                         = LoggerFactory.getLogger(GremlinQueryComposer.class);
-    private static final String                  ISO8601_FORMAT              = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'";
-    private static final ThreadLocal<DateFormat> DSL_DATE_FORMAT             = ThreadLocal.withInitial(() -> {
-        DateFormat ret = new SimpleDateFormat(ISO8601_FORMAT);
-        ret.setTimeZone(TimeZone.getTimeZone("UTC"));
-        return ret;
-    });
-    private final        String                  EMPTY_STRING                = "";
-    private final        int                     DEFAULT_QUERY_RESULT_LIMIT  = 25;
-    private final        int                     DEFAULT_QUERY_RESULT_OFFSET = 0;
-    private final        GremlinClauseList       queryClauses                = new GremlinClauseList();
-    private final        Set<String>             attributesProcessed         = new HashSet<>();
+    private static final Logger LOG = LoggerFactory.getLogger(GremlinQueryComposer.class);
+
+    private final String DATE_FORMAT_ISO8601_FORMAT = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'";
+    private final int DEFAULT_QUERY_RESULT_LIMIT = 25;
+    private final int DEFAULT_QUERY_RESULT_OFFSET = 0;
+
+    private final List<String>           errorList      = new ArrayList<>();
+    private final GremlinClauseList      queryClauses   = new GremlinClauseList();
     private final Lookup                 lookup;
     private final boolean                isNestedQuery;
     private final AtlasDSL.QueryMetadata queryMetadata;
-    private int providedLimit  = DEFAULT_QUERY_RESULT_LIMIT;
-    private int providedOffset = DEFAULT_QUERY_RESULT_OFFSET;
-    private Context context;
+    private       int                    providedLimit  = DEFAULT_QUERY_RESULT_LIMIT;
+    private       int                    providedOffset = DEFAULT_QUERY_RESULT_OFFSET;
+    private       Context                context;
+    private final DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_ISO8601_FORMAT);
 
     public GremlinQueryComposer(Lookup registryLookup, final AtlasDSL.QueryMetadata qmd, boolean isNestedQuery) {
         this.isNestedQuery = isNestedQuery;
-        this.lookup = registryLookup;
+        this.lookup        = registryLookup;
         this.queryMetadata = qmd;
+        dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
 
         init();
     }
-
     public GremlinQueryComposer(AtlasTypeRegistry typeRegistry, final AtlasDSL.QueryMetadata qmd, int limit, int offset) {
         this(new RegistryBasedLookup(typeRegistry), qmd, false);
-        this.context = new Context(lookup);
+        this.context  = new Context(errorList, lookup);
 
         providedLimit = limit;
         providedOffset = offset < 0 ? DEFAULT_QUERY_RESULT_OFFSET : offset;
@@ -85,9 +71,10 @@ public class GremlinQueryComposer {
     @VisibleForTesting
     GremlinQueryComposer(Lookup lookup, Context context, final AtlasDSL.QueryMetadata qmd) {
         this.isNestedQuery = false;
-        this.lookup = lookup;
-        this.context = context;
+        this.lookup        = lookup;
+        this.context       = context;
         this.queryMetadata = qmd;
+        dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
 
         init();
     }
@@ -97,24 +84,24 @@ public class GremlinQueryComposer {
             LOG.debug("addFrom(typeName={})", typeName);
         }
 
-        IdentifierHelper.IdentifierMetadata ta = getIdMetadata(typeName);
+        IdentifierHelper.Advice ta = getAdvice(typeName);
 
-        if (context.shouldRegister(ta.get())) {
+        if(context.shouldRegister(ta.get())) {
             context.registerActive(ta.get());
 
-            IdentifierHelper.IdentifierMetadata ia = getIdMetadata(ta.get());
+            IdentifierHelper.Advice ia = getAdvice(ta.get());
 
             if (ia.isTrait()) {
-                add(GremlinClause.TRAIT, ia);
+                add(GremlinClause.TRAIT, ia.get());
             } else {
                 if (ia.hasSubtypes()) {
                     add(GremlinClause.HAS_TYPE_WITHIN, ia.getSubTypes());
                 } else {
-                    add(GremlinClause.HAS_TYPE, ia);
+                    add(GremlinClause.HAS_TYPE, ia.get());
                 }
             }
         } else {
-            IdentifierHelper.IdentifierMetadata ia = getIdMetadata(ta.get());
+            IdentifierHelper.Advice ia = getAdvice(ta.get());
             introduceType(ia);
         }
     }
@@ -124,20 +111,14 @@ public class GremlinQueryComposer {
             LOG.debug("addFromProperty(typeName={}, attribute={})", typeName, attribute);
         }
 
-        if (!isNestedQuery) {
-            addFrom(typeName);
-        }
-
-        add(GremlinClause.HAS_PROPERTY, getIdMetadata(attribute));
+        addFrom(typeName);
+        add(GremlinClause.HAS_PROPERTY,
+            IdentifierHelper.getQualifiedName(lookup, context, attribute));
     }
 
-    public void addIsA(String typeName, String traitName) {
-        if (!isNestedQuery) {
-            addFrom(typeName);
-        }
-
-        IdentifierHelper.IdentifierMetadata ia = getIdMetadata(traitName);
-        add(GremlinClause.TRAIT, ia);
+    public void addFromIsA(String typeName, String traitName) {
+        addFrom(typeName);
+        add(GremlinClause.TRAIT, traitName);
     }
 
     public void addWhere(String lhs, String operator, String rhs) {
@@ -145,75 +126,85 @@ public class GremlinQueryComposer {
             LOG.debug("addWhere(lhs={}, operator={}, rhs={})", lhs, operator, rhs);
         }
 
-        String                              currentType = context.getActiveTypeName();
-        IdentifierHelper.IdentifierMetadata org         = null;
-        IdentifierHelper.IdentifierMetadata lhsI        = getIdMetadata(lhs);
+        String currentType = context.getActiveTypeName();
+        SearchParameters.Operator op = SearchParameters.Operator.fromString(operator);
+        IdentifierHelper.Advice org = null;
+        IdentifierHelper.Advice lhsI = getAdvice(lhs);
         if (!lhsI.isPrimitive()) {
             introduceType(lhsI);
             org = lhsI;
-            lhsI = getIdMetadata(lhs);
-        }
-
-        if (!context.validator.isValidQualifiedName(lhsI.getQualifiedName(), lhsI.getRaw())) {
-            return;
+            lhsI = getAdvice(lhs);
         }
 
         if (lhsI.isDate()) {
             rhs = parseDate(rhs);
         }
 
-        SearchParameters.Operator op = SearchParameters.Operator.fromString(operator);
         rhs = addQuotesIfNecessary(rhs);
         if (op == SearchParameters.Operator.LIKE) {
-            add(GremlinClause.TEXT_CONTAINS, lhsI.getQualifiedName(), IdentifierHelper.getFixedRegEx(rhs));
+            add(GremlinClause.TEXT_CONTAINS, lhsI.getQualifiedName(), getFixedRegEx(rhs));
         } else if (op == SearchParameters.Operator.IN) {
             add(GremlinClause.HAS_OPERATOR, lhsI.getQualifiedName(), "within", rhs);
         } else {
             add(GremlinClause.HAS_OPERATOR, lhsI.getQualifiedName(), op.getSymbols()[1], rhs);
         }
-        // record that the attribute has been processed so that the select clause doesn't add a attr presence check
-        attributesProcessed.add(lhsI.getQualifiedName());
 
-        if (org != null && org.isReferredType()) {
+        if (org != null && org.getIntroduceType()) {
             add(GremlinClause.DEDUP);
             add(GremlinClause.IN, org.getEdgeLabel());
             context.registerActive(currentType);
         }
     }
 
+    private String getFixedRegEx(String rhs) {
+        return rhs.replace("*", ".*").replace('?', '.');
+    }
+
     public void addAndClauses(List<String> clauses) {
-        add(GremlinClause.AND, String.join(",", clauses));
+        queryClauses.add(GremlinClause.AND, String.join(",", clauses));
     }
 
     public void addOrClauses(List<String> clauses) {
-        add(GremlinClause.OR, String.join(",", clauses));
+        queryClauses.add(GremlinClause.OR, String.join(",", clauses));
     }
 
-    public Set<String> getAttributesProcessed() {
-        return attributesProcessed;
+    public void addSelect(SelectClauseComposer selectClauseComposer) {
+        process(selectClauseComposer);
+        if (!(queryMetadata.hasOrderBy() && queryMetadata.hasGroupBy())) {
+            addSelectTransformation(selectClauseComposer);
+        }
+        this.context.setSelectClauseComposer(selectClauseComposer);
     }
 
-    public void addProcessedAttributes(Set<String> attributesProcessed) {
-        this.attributesProcessed.addAll(attributesProcessed);
-    }
+    private void process(SelectClauseComposer scc) {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("addSelect(items.length={})", scc.getItems() != null ? scc.getItems().length : 0);
+        }
 
-    public void addProcessedAttribute(String attribute) {
-        attributesProcessed.add(attribute);
-    }
+        if (scc.getItems() == null) {
+            return;
+        }
 
-    public void addSelect(SelectClauseComposer selectClauseComposer) {
-        process(selectClauseComposer);
+        for (int i = 0; i < scc.getItems().length; i++) {
+            IdentifierHelper.Advice ia = getAdvice(scc.getItem(i));
 
-        if (CollectionUtils.isEmpty(context.getErrorList())) {
-            addSelectAttrExistsCheck(selectClauseComposer);
-        }
+            if (!scc.getItem(i).equals(scc.getLabel(i))) {
+                context.addAlias(scc.getLabel(i), ia.getQualifiedName());
+            }
 
+            if (scc.updateAsApplicable(i, ia.getQualifiedName())) {
+                continue;
+            }
 
-        // If the query contains orderBy and groupBy then the transformation determination is deferred to the method processing orderBy
-        if (!(queryMetadata.hasOrderBy() && queryMetadata.hasGroupBy())) {
-            addSelectTransformation(selectClauseComposer, null, false);
+            if (introduceType(ia)) {
+                scc.isSelectNoop = !ia.hasParts();
+                if(ia.hasParts())  {
+                    scc.assign(i, getAdvice(ia.get()).getQualifiedName(), GremlinClause.INLINE_GET_PROPERTY);
+                }
+            } else {
+                scc.assign(i, ia.getQualifiedName(), GremlinClause.INLINE_GET_PROPERTY);
+            }
         }
-        this.context.setSelectClauseComposer(selectClauseComposer);
     }
 
     public GremlinQueryComposer createNestedProcessor() {
@@ -253,13 +244,10 @@ public class GremlinQueryComposer {
             LOG.debug("addLimit(limit={}, offset={})", limit, offset);
         }
 
-        SelectClauseComposer scc = context.getSelectClauseComposer();
-        if (scc == null) {
-            addLimitHelper(limit, offset);
+        if (offset.equalsIgnoreCase("0")) {
+            add(GremlinClause.LIMIT, limit);
         } else {
-            if (!scc.hasAggregators()) {
-                addLimitHelper(limit, offset);
-            }
+            addRangeClause(offset, limit);
         }
     }
 
@@ -272,138 +260,21 @@ public class GremlinQueryComposer {
 
         String items[] = getFormattedClauses(queryMetadata.needTransformation());
         String s = queryMetadata.needTransformation() ?
-                           getTransformedClauses(items) :
-                           String.join(".", items);
+                getTransformedClauses(items) :
+                String.join(".", items);
 
-        if (LOG.isDebugEnabled()) {
+        if(LOG.isDebugEnabled()) {
             LOG.debug("Gremlin: {}", s);
         }
 
         return s;
     }
 
-    public List<String> getErrorList() {
-        return context.getErrorList();
-    }
-
-    public void addOrderBy(String name, boolean isDesc) {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("addOrderBy(name={}, isDesc={})", name, isDesc);
-        }
-
-        IdentifierHelper.IdentifierMetadata ia = getIdMetadata(name);
-        if (queryMetadata.hasSelect() && queryMetadata.hasGroupBy()) {
-            addSelectTransformation(this.context.selectClauseComposer, getQualifiedName(ia), isDesc);
-        } else if (queryMetadata.hasGroupBy()) {
-            addOrderByClause(getQualifiedName(ia), isDesc);
-            moveToLast(GremlinClause.GROUP_BY);
-        } else {
-            addOrderByClause(getQualifiedName(ia), isDesc);
-        }
-    }
-
-    public long getDateFormat(String s) {
-        try {
-            return DSL_DATE_FORMAT.get().parse(s).getTime();
-        } catch (ParseException ex) {
-            context.validator.check(ex, AtlasErrorCode.INVALID_DSL_INVALID_DATE);
-        }
-
-        return -1;
-    }
-
-    public boolean hasFromClause() {
-        return queryClauses.contains(GremlinClause.HAS_TYPE) != -1 ||
-                       queryClauses.contains(GremlinClause.HAS_TYPE_WITHIN) != -1;
-    }
-
-    private String getQualifiedName(IdentifierHelper.IdentifierMetadata ia) {
-        return context.validator.isValidQualifiedName(ia.getQualifiedName(), ia.getRaw()) ?
-                       ia.getQualifiedName() : ia.getRaw();
-    }
-
-    private void addSelectAttrExistsCheck(final SelectClauseComposer selectClauseComposer) {
-        // For each of the select attributes we need to add a presence check as well, if there's no explicit where for the same
-        // NOTE: One side-effect is that the result table will be empty if any of the attributes is null or empty for the type
-        String[] qualifiedAttributes = selectClauseComposer.getAttributes();
-        if (qualifiedAttributes != null && qualifiedAttributes.length > 0) {
-            for (int i = 0; i < qualifiedAttributes.length; i++) {
-                String                              qualifiedAttribute = qualifiedAttributes[i];
-                IdentifierHelper.IdentifierMetadata idMetadata         = getIdMetadata(qualifiedAttribute);
-                // Only primitive attributes need to be checked
-                if (idMetadata.isPrimitive() && !selectClauseComposer.isAggregatorIdx(i) && !attributesProcessed.contains(qualifiedAttribute)) {
-                    add(GremlinClause.HAS_PROPERTY, qualifiedAttribute);
-                }
-            }
-            // All these checks should be done before the grouping happens (if any)
-            moveToLast(GremlinClause.GROUP_BY);
-        }
-    }
-
-    private void process(SelectClauseComposer scc) {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("addSelect(items.length={})", scc.getItems() != null ? scc.getItems().length : 0);
-        }
-
-        if (scc.getItems() == null) {
-            return;
-        }
-
-        for (int i = 0; i < scc.getItems().length; i++) {
-            IdentifierHelper.IdentifierMetadata ia = getIdMetadata(scc.getItem(i));
-
-            if (scc.isAggregatorWithArgument(i) && !ia.isPrimitive()) {
-                context.check(false, AtlasErrorCode.INVALID_DSL_SELECT_INVALID_AGG, ia.getQualifiedName());
-                return;
-            }
-
-            if (!scc.getItem(i).equals(scc.getLabel(i))) {
-                context.addAlias(scc.getLabel(i), getQualifiedName(ia));
-            }
-
-            if (scc.updateAsApplicable(i, getQualifiedName(ia))) {
-                continue;
-            }
-
-            scc.isSelectNoop = hasNoopCondition(ia);
-            if (scc.isSelectNoop) {
-                return;
-            }
-
-            if (introduceType(ia)) {
-                scc.incrementTypesIntroduced();
-                scc.isSelectNoop = !ia.hasParts();
-                if (ia.hasParts()) {
-                    scc.assign(i, getQualifiedName(getIdMetadata(ia.get())), GremlinClause.INLINE_GET_PROPERTY);
-                }
-            } else {
-                scc.assign(i, getQualifiedName(ia), GremlinClause.INLINE_GET_PROPERTY);
-                scc.incrementPrimitiveType();
-            }
-        }
-
-        context.validator.check(!scc.hasMultipleReferredTypes(),
-                                AtlasErrorCode.INVALID_DSL_SELECT_REFERRED_ATTR, Integer.toString(scc.getIntroducedTypesCount()));
-        context.validator.check(!scc.hasMixedAttributes(), AtlasErrorCode.INVALID_DSL_SELECT_ATTR_MIXING);
-    }
-
-    private boolean hasNoopCondition(IdentifierHelper.IdentifierMetadata ia) {
-        return !ia.isPrimitive() && !ia.isAttribute() && context.hasAlias(ia.getRaw());
-    }
-
-    private void addLimitHelper(final String limit, final String offset) {
-        if (offset.equalsIgnoreCase("0")) {
-            add(GremlinClause.LIMIT, limit, limit);
-        } else {
-            addRangeClause(offset, limit);
-        }
-    }
-
     private String getTransformedClauses(String[] items) {
         String ret;
-        String body     = String.join(".", Stream.of(items).filter(Objects::nonNull).collect(Collectors.toList()));
+        String body = String.join(".", Stream.of(items).filter(Objects::nonNull).collect(Collectors.toList()));
         String inlineFn = queryClauses.getValue(queryClauses.size() - 1);
-        String funCall  = String.format(inlineFn, body);
+        String funCall = String.format(inlineFn, body);
         if (isNestedQuery) {
             ret = String.join(".", queryClauses.getValue(0), funCall);
         } else {
@@ -413,9 +284,9 @@ public class GremlinQueryComposer {
     }
 
     private String[] getFormattedClauses(boolean needTransformation) {
-        String[] items    = new String[queryClauses.size()];
-        int      startIdx = needTransformation ? 1 : 0;
-        int      endIdx   = needTransformation ? queryClauses.size() - 1 : queryClauses.size();
+        String[] items = new String[queryClauses.size()];
+        int startIdx = needTransformation ? 1 : 0;
+        int endIdx = needTransformation ? queryClauses.size() - 1 : queryClauses.size();
 
         for (int i = startIdx; i < endIdx; i++) {
             items[i] = queryClauses.getValue(i);
@@ -423,56 +294,71 @@ public class GremlinQueryComposer {
         return items;
     }
 
-    private void addSelectTransformation(final SelectClauseComposer selectClauseComposer,
-                                         final String orderByQualifiedAttrName,
-                                         final boolean isDesc) {
+    public void addOrderBy(String name, boolean isDesc) {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("addOrderBy(name={}, isDesc={})", name, isDesc);
+        }
+
+        IdentifierHelper.Advice ia = getAdvice(name);
+        if (queryMetadata.hasSelect() && queryMetadata.hasGroupBy()) {
+            addOrderByClause(ia.getQualifiedName(), isDesc);
+            moveToLast(GremlinClause.GROUP_BY);
+
+            addSelectTransformation(this.context.selectClauseComposer);
+        } else if (queryMetadata.hasGroupBy()) {
+            addOrderByClause(ia.getQualifiedName(), isDesc);
+            moveToLast(GremlinClause.GROUP_BY);
+        } else {
+            addOrderByClause(ia.getQualifiedName(), isDesc);
+        }
+    }
+
+    private void addSelectTransformation(final SelectClauseComposer selectClauseComposer) {
         GremlinClause fn;
         if (selectClauseComposer.isSelectNoop) {
             fn = GremlinClause.SELECT_NOOP_FN;
-        } else if (queryMetadata.hasGroupBy()) {
-            fn = selectClauseComposer.onlyAggregators() ? GremlinClause.SELECT_ONLY_AGG_GRP_FN : GremlinClause.SELECT_MULTI_ATTR_GRP_FN;
-        } else {
-            fn = selectClauseComposer.onlyAggregators() ? GremlinClause.SELECT_ONLY_AGG_FN : GremlinClause.SELECT_FN;
-        }
-        if (StringUtils.isEmpty(orderByQualifiedAttrName)) {
-            add(0, fn,
-                selectClauseComposer.getLabelHeader(),
-                selectClauseComposer.hasAssignmentExpr() ? selectClauseComposer.getAssignmentExprString() : EMPTY_STRING,
-                selectClauseComposer.getItemsString(),
-                EMPTY_STRING);
+        } else if (queryMetadata.hasGroupBy()){
+            fn = selectClauseComposer.onlyAggregators() ?
+                    GremlinClause.SELECT_ONLY_AGG_GRP_FN :
+                         GremlinClause.SELECT_MULTI_ATTR_GRP_FN;
+
         } else {
-            int           itemIdx    = selectClauseComposer.getAttrIndex(orderByQualifiedAttrName);
-            GremlinClause sortClause = GremlinClause.INLINE_DEFAULT_TUPLE_SORT;
-            if (itemIdx != -1) {
-                sortClause = isDesc ? GremlinClause.INLINE_TUPLE_SORT_DESC : GremlinClause.INLINE_TUPLE_SORT_ASC;
-            }
-            String idxStr = String.valueOf(itemIdx);
-            add(0, fn,
-                selectClauseComposer.getLabelHeader(),
-                selectClauseComposer.hasAssignmentExpr() ? selectClauseComposer.getAssignmentExprString() : EMPTY_STRING,
-                selectClauseComposer.getItemsString(),
-                sortClause.get(idxStr, idxStr)
-            );
+            fn = selectClauseComposer.onlyAggregators() ?
+                    GremlinClause.SELECT_ONLY_AGG_FN :
+                         GremlinClause.SELECT_FN;
         }
-
-        add(GremlinClause.INLINE_TRANSFORM_CALL);
+        queryClauses.add(0, fn,
+                         selectClauseComposer.getLabelHeader(),
+                         selectClauseComposer.hasAssignmentExpr() ? selectClauseComposer.getAssignmentExprString(): "",
+                         selectClauseComposer.getItemsString());
+        queryClauses.add(GremlinClause.INLINE_TRANSFORM_CALL);
     }
 
     private String addQuotesIfNecessary(String rhs) {
-        if (IdentifierHelper.isTrueOrFalse(rhs)) return rhs;
-        if (IdentifierHelper.isQuoted(rhs)) return rhs;
+        if(IdentifierHelper.isTrueOrFalse(rhs)) return rhs;
+        if(IdentifierHelper.isQuoted(rhs)) return rhs;
         return IdentifierHelper.getQuoted(rhs);
     }
 
     private String parseDate(String rhs) {
         String s = IdentifierHelper.isQuoted(rhs) ?
-                           IdentifierHelper.removeQuotes(rhs) :
-                           rhs;
+                IdentifierHelper.removeQuotes(rhs) :
+                rhs;
 
 
         return String.format("'%d'", getDateFormat(s));
     }
 
+    public long getDateFormat(String s) {
+        try {
+            return dateFormat.parse(s).getTime();
+        } catch (ParseException ex) {
+            errorList.add(ex.getMessage());
+        }
+
+        return -1;
+    }
+
     private void close() {
         if (isNestedQuery)
             return;
@@ -492,7 +378,7 @@ public class GremlinQueryComposer {
     }
 
     private void moveToLast(GremlinClause clause) {
-        int index = queryClauses.contains(clause);
+        int index = queryClauses.hasClause(clause);
         if (-1 == index) {
             return;
         }
@@ -510,28 +396,36 @@ public class GremlinQueryComposer {
         }
     }
 
-    private boolean introduceType(IdentifierHelper.IdentifierMetadata ia) {
-        if (ia.isReferredType()) {
+    private boolean introduceType(IdentifierHelper.Advice ia) {
+        if (ia.getIntroduceType()) {
             add(GremlinClause.OUT, ia.getEdgeLabel());
-            context.registerActive(ia);
+            context.registerActive(ia.getTypeName());
         }
 
-        return ia.isReferredType();
+        return ia.getIntroduceType();
     }
 
-    private IdentifierHelper.IdentifierMetadata getIdMetadata(String actualTypeName) {
+    private IdentifierHelper.Advice getAdvice(String actualTypeName) {
         return IdentifierHelper.create(context, lookup, actualTypeName);
     }
 
+    private void add(GremlinClause clause, String... args) {
+        queryClauses.add(new GremlinClauseValue(clause, clause.get(args)));
+    }
+
+    private void add(int idx, GremlinClause clause, String... args) {
+        queryClauses.add(idx, new GremlinClauseValue(clause, clause.get(args)));
+    }
+
     private void addRangeClause(String startIndex, String endIndex) {
         if (LOG.isDebugEnabled()) {
             LOG.debug("addRangeClause(startIndex={}, endIndex={})", startIndex, endIndex);
         }
 
         if (queryMetadata.hasSelect()) {
-            add(queryClauses.size() - 1, GremlinClause.RANGE, startIndex, startIndex, endIndex, startIndex, startIndex, endIndex);
+            add(queryClauses.size() - 1, GremlinClause.RANGE, startIndex, startIndex, endIndex);
         } else {
-            add(GremlinClause.RANGE, startIndex, startIndex, endIndex, startIndex, startIndex, endIndex);
+            add(GremlinClause.RANGE, startIndex, startIndex, endIndex);
         }
     }
 
@@ -540,8 +434,8 @@ public class GremlinQueryComposer {
             LOG.debug("addOrderByClause(name={})", name, descr);
         }
 
-        IdentifierHelper.IdentifierMetadata ia = getIdMetadata(name);
-        add((!descr) ? GremlinClause.ORDER_BY : GremlinClause.ORDER_BY_DESC, ia);
+        IdentifierHelper.Advice ia = getAdvice(name);
+        add((!descr) ? GremlinClause.ORDER_BY : GremlinClause.ORDER_BY_DESC, ia.getQualifiedName());
     }
 
     private void addGroupByClause(String name) {
@@ -549,29 +443,13 @@ public class GremlinQueryComposer {
             LOG.debug("addGroupByClause(name={})", name);
         }
 
-        IdentifierHelper.IdentifierMetadata ia = getIdMetadata(name);
-        add(GremlinClause.GROUP_BY, ia);
-    }
-
-    private void add(GremlinClause clause, IdentifierHelper.IdentifierMetadata ia) {
-        if (context != null && !context.validator.isValid(context, clause, ia)) {
-            return;
-        }
-
-        add(clause, (ia.getQualifiedName() == null ? ia.get() : ia.getQualifiedName()));
-    }
-
-    private void add(GremlinClause clause, String... args) {
-        queryClauses.add(new GremlinClauseValue(clause, clause.get(args)));
-    }
-
-    private void add(int idx, GremlinClause clause, String... args) {
-        queryClauses.add(idx, new GremlinClauseValue(clause, clause.get(args)));
+        IdentifierHelper.Advice ia = getAdvice(name);
+        add(GremlinClause.GROUP_BY, ia.getQualifiedName());
     }
 
-    static class GremlinClauseValue {
+    private static class GremlinClauseValue {
         private final GremlinClause clause;
-        private final String        value;
+        private final String value;
 
         public GremlinClauseValue(GremlinClause clause, String value) {
             this.clause = clause;
@@ -587,171 +465,152 @@ public class GremlinQueryComposer {
         }
     }
 
-    @VisibleForTesting
-    static class Context {
-        private static final AtlasStructType UNKNOWN_TYPE = new AtlasStructType(new AtlasStructDef());
-
-        private final Lookup lookup;
-        private final Map<String, String> aliasMap = new HashMap<>();
-        private AtlasType            activeType;
-        private SelectClauseComposer selectClauseComposer;
-        private ClauseValidator      validator;
+    private static class GremlinClauseList {
+        private final List<GremlinClauseValue> list;
 
-        public Context(Lookup lookup) {
-            this.lookup = lookup;
-            validator = new ClauseValidator(lookup);
+        private GremlinClauseList() {
+            this.list = new LinkedList<>();
         }
 
-        public void registerActive(String typeName) {
-            if (shouldRegister(typeName)) {
-                try {
-                    activeType = lookup.getType(typeName);
-                    aliasMap.put(typeName, typeName);
-                } catch (AtlasBaseException e) {
-                    validator.check(e, AtlasErrorCode.INVALID_DSL_UNKNOWN_TYPE, typeName);
-                    activeType = UNKNOWN_TYPE;
-                }
-            }
+        public void add(GremlinClauseValue g) {
+            list.add(g);
         }
 
-        public void registerActive(IdentifierHelper.IdentifierMetadata identifierMetadata) {
-            if (validator.check(StringUtils.isNotEmpty(identifierMetadata.getTypeName()),
-                                AtlasErrorCode.INVALID_DSL_UNKNOWN_TYPE, identifierMetadata.getRaw())) {
-                registerActive(identifierMetadata.getTypeName());
-            } else {
-                activeType = UNKNOWN_TYPE;
-            }
+        public void add(int idx, GremlinClauseValue g) {
+            list.add(idx, g);
         }
 
-        public AtlasEntityType getActiveEntityType() {
-            return (activeType instanceof AtlasEntityType) ?
-                           (AtlasEntityType) activeType :
-                           null;
+        public void add(GremlinClauseValue g, AtlasEntityType t) {
+            add(g);
         }
 
-        public String getActiveTypeName() {
-            return activeType.getTypeName();
+        public void add(int idx, GremlinClauseValue g, AtlasEntityType t) {
+            add(idx, g);
         }
 
-        public AtlasType getActiveType() {
-            return activeType;
+        public void add(GremlinClause clause, String... args) {
+            list.add(new GremlinClauseValue(clause, clause.get(args)));
         }
 
-        public boolean shouldRegister(String typeName) {
-            return activeType == null ||
-                           (activeType != null && !StringUtils.equals(getActiveTypeName(), typeName)) &&
-                                   (activeType != null && !lookup.hasAttribute(this, typeName));
+        public void add(int i, GremlinClause clause, String... args) {
+            list.add(i, new GremlinClauseValue(clause, clause.get(args)));
         }
 
-        public void registerAlias(String alias) {
-            addAlias(alias, getActiveTypeName());
+        public GremlinClauseValue getAt(int i) {
+            return list.get(i);
         }
 
-        public boolean hasAlias(String alias) {
-            return aliasMap.containsKey(alias);
+        public String getValue(int i) {
+            return list.get(i).value;
         }
 
-        public String getTypeNameFromAlias(String alias) {
-            return aliasMap.get(alias);
+        public GremlinClauseValue get(int i) {
+            return list.get(i);
         }
 
-        public boolean isEmpty() {
-            return activeType == null;
+        public int size() {
+            return list.size();
         }
 
-        public SelectClauseComposer getSelectClauseComposer() {
-            return selectClauseComposer;
-        }
+        public int hasClause(GremlinClause clause) {
+            for (int i = 0; i < list.size(); i++) {
+                if (list.get(i).getClause() == clause)
+                    return i;
+            }
 
-        public void setSelectClauseComposer(SelectClauseComposer selectClauseComposer) {
-            this.selectClauseComposer = selectClauseComposer;
+            return -1;
         }
 
-        public void addAlias(String alias, String typeName) {
-            if (aliasMap.containsKey(alias)) {
-                check(false, AtlasErrorCode.INVALID_DSL_DUPLICATE_ALIAS, alias, getActiveTypeName());
-                return;
-            }
-
-            aliasMap.put(alias, typeName);
+        public boolean isEmpty() {
+            return list.size() == 0 || containsGVLimit();
         }
 
-        public List<String> getErrorList() {
-            return validator.getErrorList();
+        private boolean containsGVLimit() {
+            return list.size() == 3 &&
+                    list.get(0).clause == GremlinClause.G &&
+                    list.get(1).clause == GremlinClause.V &&
+                    list.get(2).clause == GremlinClause.LIMIT;
         }
 
-        public boolean error(AtlasBaseException e, AtlasErrorCode ec, String t, String name) {
-            return validator.check(e, ec, t, name);
+        public void clear() {
+            list.clear();
         }
 
-        public boolean check(boolean condition, AtlasErrorCode vm, String... args) {
-            return validator.check(condition, vm, args);
+        public GremlinClauseValue remove(int index) {
+            GremlinClauseValue gcv = get(index);
+            list.remove(index);
+            return gcv;
         }
     }
 
-    private static class ClauseValidator {
-        private final Lookup lookup;
-        List<String> errorList = new ArrayList<>();
+    @VisibleForTesting
+    static class Context {
+        private final List<String> errorList;
+        Lookup lookup;
+        Map<String, String> aliasMap = new HashMap<>();
+        private AtlasType activeType;
+        private SelectClauseComposer selectClauseComposer;
 
-        public ClauseValidator(Lookup lookup) {
+        public Context(List<String> errorList, Lookup lookup) {
             this.lookup = lookup;
+            this.errorList = errorList;
         }
 
-        public boolean isValid(Context ctx, GremlinClause clause, IdentifierHelper.IdentifierMetadata ia) {
-            switch (clause) {
-                case TRAIT:
-                    return check(ia.isTrait(), AtlasErrorCode.INVALID_DSL_UNKNOWN_CLASSIFICATION, ia.getRaw());
-
-                case HAS_TYPE:
-                    TypeCategory typeCategory = ctx.getActiveType().getTypeCategory();
-                    return check(StringUtils.isNotEmpty(ia.getTypeName()) &&
-                                         typeCategory == TypeCategory.CLASSIFICATION || typeCategory == TypeCategory.ENTITY,
-                                 AtlasErrorCode.INVALID_DSL_UNKNOWN_TYPE, ia.getRaw());
+        public void registerActive(String typeName) {
+            if(shouldRegister(typeName)) {
+                activeType = lookup.getType(typeName);
+            }
 
-                case HAS_PROPERTY:
-                    return check(ia.isPrimitive(), AtlasErrorCode.INVALID_DSL_HAS_PROPERTY, ia.getRaw());
+            aliasMap.put(typeName, typeName);
+        }
 
-                case ORDER_BY:
-                    return check(ia.isPrimitive(), AtlasErrorCode.INVALID_DSL_ORDERBY, ia.getRaw());
+        public AtlasType getActiveType() {
+            return activeType;
+        }
 
-                case GROUP_BY:
-                    return check(ia.isPrimitive(), AtlasErrorCode.INVALID_DSL_SELECT_INVALID_AGG, ia.getRaw());
+        public AtlasEntityType getActiveEntityType() {
+            return (activeType instanceof AtlasEntityType) ?
+                    (AtlasEntityType) activeType :
+                    null;
+        }
 
-                default:
-                    return (getErrorList().size() == 0);
-            }
+        public String getActiveTypeName() {
+            return activeType.getTypeName();
         }
 
-        public boolean check(Exception ex, AtlasErrorCode vm, String... args) {
-            String[] extraArgs = getExtraSlotArgs(args, ex.getMessage());
-            return check(false, vm, extraArgs);
+        public boolean shouldRegister(String typeName) {
+            return activeType == null ||
+                    (activeType != null && !StringUtils.equals(getActiveTypeName(), typeName)) &&
+                            (activeType != null && !lookup.hasAttribute(this, typeName));
         }
 
-        public boolean check(boolean condition, AtlasErrorCode vm, String... args) {
-            if (!condition) {
-                addError(vm, args);
-            }
+        public void registerAlias(String alias) {
+            addAlias(alias, getActiveTypeName());
+        }
 
-            return condition;
+        public boolean hasAlias(String alias) {
+            return aliasMap.containsKey(alias);
         }
 
-        public void addError(AtlasErrorCode ec, String... messages) {
-            errorList.add(ec.getFormattedErrorMessage(messages));
+        public String getTypeNameFromAlias(String alias) {
+            return aliasMap.get(alias);
         }
 
-        public List<String> getErrorList() {
-            return errorList;
+        public boolean isEmpty() {
+            return activeType == null;
         }
 
-        public boolean isValidQualifiedName(String qualifiedName, String raw) {
-            return check(StringUtils.isNotEmpty(qualifiedName), AtlasErrorCode.INVALID_DSL_QUALIFIED_NAME, raw);
+        public void setSelectClauseComposer(SelectClauseComposer selectClauseComposer) {
+            this.selectClauseComposer = selectClauseComposer;
         }
 
-        private String[] getExtraSlotArgs(String[] args, String s) {
-            String[] argsPlus1 = new String[args.length + 1];
-            System.arraycopy(args, 0, argsPlus1, 0, args.length);
-            argsPlus1[args.length] = s;
-            return argsPlus1;
+        public void addAlias(String alias, String typeName) {
+            if(aliasMap.containsKey(alias)) {
+                errorList.add(String.format("Duplicate alias found: %s for type %s already present.", alias, getActiveEntityType()));
+                return;
+            }
+
+            aliasMap.put(alias, typeName);
         }
     }
 }