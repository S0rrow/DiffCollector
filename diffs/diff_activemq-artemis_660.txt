diff --git a/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/broker/AMQPMessage.java b/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/broker/AMQPMessage.java
index 56ac1f5aac..813915d092 100644
--- a/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/broker/AMQPMessage.java
+++ b/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/broker/AMQPMessage.java
@@ -23,6 +23,9 @@ import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
 
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.PooledByteBufAllocator;
+import io.netty.buffer.Unpooled;
 import org.apache.activemq.artemis.api.core.ActiveMQBuffer;
 import org.apache.activemq.artemis.api.core.ActiveMQPropertyConversionException;
 import org.apache.activemq.artemis.api.core.ICoreMessage;
@@ -34,7 +37,6 @@ import org.apache.activemq.artemis.protocol.amqp.converter.AMQPConverter;
 import org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport;
 import org.apache.activemq.artemis.protocol.amqp.util.NettyWritable;
 import org.apache.activemq.artemis.protocol.amqp.util.TLSEncode;
-import org.apache.activemq.artemis.reader.MessageUtil;
 import org.apache.activemq.artemis.utils.DataConstants;
 import org.apache.qpid.proton.amqp.Symbol;
 import org.apache.qpid.proton.amqp.UnsignedInteger;
@@ -49,10 +51,6 @@ import org.apache.qpid.proton.codec.WritableBuffer;
 import org.apache.qpid.proton.message.Message;
 import org.apache.qpid.proton.message.impl.MessageImpl;
 
-import io.netty.buffer.ByteBuf;
-import io.netty.buffer.PooledByteBufAllocator;
-import io.netty.buffer.Unpooled;
-
 // see https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#section-message-format
 public class AMQPMessage extends RefCountMessage {
 
@@ -74,7 +72,6 @@ public class AMQPMessage extends RefCountMessage {
    private Properties _properties;
    private ApplicationProperties applicationProperties;
    private long scheduledTime = -1;
-   private String connectionID;
 
    public AMQPMessage(long messageFormat, byte[] data) {
       this.data = Unpooled.wrappedBuffer(data);
@@ -131,6 +128,7 @@ public class AMQPMessage extends RefCountMessage {
    }
 
    private Map getApplicationPropertiesMap() {
+
       ApplicationProperties appMap = getApplicationProperties();
       Map map = null;
 
@@ -160,17 +158,6 @@ public class AMQPMessage extends RefCountMessage {
          parsedHeaders = true;
       }
    }
-   @Override
-   public org.apache.activemq.artemis.api.core.Message setConnectionID(String connectionID) {
-      this.connectionID = connectionID;
-      return this;
-   }
-
-   @Override
-   public String getConnectionID() {
-      return connectionID;
-   }
-
 
    public MessageAnnotations getMessageAnnotations() {
       parseHeaders();
@@ -235,17 +222,6 @@ public class AMQPMessage extends RefCountMessage {
    }
 
 
-   @Override
-   public SimpleString getGroupID() {
-      parseHeaders();
-
-      if (_properties != null && _properties.getGroupId() != null) {
-         return SimpleString.toSimpleString(_properties.getGroupId());
-      } else {
-         return null;
-      }
-   }
-
 
    @Override
    public Long getScheduledDeliveryTime() {
@@ -263,7 +239,7 @@ public class AMQPMessage extends RefCountMessage {
          }
       }
 
-      return scheduledTime;
+      return scheduledTime == 0 ? null : scheduledTime;
    }
 
    @Override
@@ -321,6 +297,7 @@ public class AMQPMessage extends RefCountMessage {
             } else {
                section = null;
             }
+
          }
          if (section instanceof MessageAnnotations) {
             _messageAnnotations = (MessageAnnotations) section;
@@ -330,14 +307,11 @@ public class AMQPMessage extends RefCountMessage {
             } else {
                section = null;
             }
+
          }
          if (section instanceof Properties) {
             _properties = (Properties) section;
 
-            if (_properties.getAbsoluteExpiryTime() != null) {
-               this.expiration = _properties.getAbsoluteExpiryTime().getTime();
-            }
-
             if (buffer.hasRemaining()) {
                section = (Section) decoder.readObject();
             } else {
@@ -424,8 +398,8 @@ public class AMQPMessage extends RefCountMessage {
    @Override
    public Object getUserID() {
       Properties properties = getProperties();
-      if (properties != null && properties.getMessageId() != null) {
-         return properties.getMessageId();
+      if (properties != null && properties.getUserId() != null) {
+         return properties.getUserId();
       } else {
          return this;
       }
@@ -445,13 +419,6 @@ public class AMQPMessage extends RefCountMessage {
       }
    }
 
-
-   @Override
-   public Object getDuplicateProperty() {
-      return null;
-   }
-
-
    @Override
    public org.apache.activemq.artemis.api.core.Message setDurable(boolean durable) {
       return null;
@@ -700,13 +667,11 @@ public class AMQPMessage extends RefCountMessage {
 
    @Override
    public Object getObjectProperty(String key) {
-      if (key.equals(MessageUtil.TYPE_HEADER_NAME.toString())) {
+      if (key.equals("JMSType")) {
          return getProperties().getSubject();
-      } else if (key.equals(MessageUtil.CONNECTION_ID_PROPERTY_NAME.toString())) {
-         return getConnectionID();
-      } else {
-         return getApplicationPropertiesMap().get(key);
       }
+
+      return getApplicationPropertiesMap().get(key);
    }
 
    @Override
@@ -721,17 +686,23 @@ public class AMQPMessage extends RefCountMessage {
 
    @Override
    public String getStringProperty(String key) throws ActiveMQPropertyConversionException {
-      if (key.equals(MessageUtil.TYPE_HEADER_NAME.toString())) {
+      if (key.equals("JMSType")) {
          return getProperties().getSubject();
-      } else if (key.equals(MessageUtil.CONNECTION_ID_PROPERTY_NAME.toString())) {
-         return getConnectionID();
-      } else {
-         return (String)getApplicationPropertiesMap().get(key);
       }
+      return (String)getApplicationPropertiesMap().get(key);
+   }
+
+   @Override
+   public boolean containsDeliveryAnnotationProperty(SimpleString key) {
+      parseHeaders();
+      if (_deliveryAnnotations == null || _deliveryAnnotations.getValue() == null) {
+         return false;
+      }
+      return _deliveryAnnotations.getValue().containsKey(key.toString());
    }
 
    @Override
-   public Object removeDeliveryAnnotationProperty(SimpleString key) {
+   public Object removeDeliveryAnnoationProperty(SimpleString key) {
       parseHeaders();
       if (_deliveryAnnotations == null || _deliveryAnnotations.getValue() == null) {
          return null;