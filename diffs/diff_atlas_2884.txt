diff --git a/intg/src/main/java/org/apache/atlas/type/AtlasEntityType.java b/intg/src/main/java/org/apache/atlas/type/AtlasEntityType.java
index e3005ee17..caadecce1 100644
--- a/intg/src/main/java/org/apache/atlas/type/AtlasEntityType.java
+++ b/intg/src/main/java/org/apache/atlas/type/AtlasEntityType.java
@@ -24,9 +24,7 @@ import org.apache.atlas.model.instance.AtlasEntity;
 import org.apache.atlas.model.instance.AtlasObjectId;
 import org.apache.atlas.model.typedef.AtlasEntityDef;
 import org.apache.atlas.model.typedef.AtlasStructDef.AtlasAttributeDef;
-import org.apache.atlas.type.AtlasBuiltInTypes.AtlasObjectIdType;
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.collections.MapUtils;
 import org.apache.commons.lang.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -39,7 +37,6 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
-
 /**
  * class that implements behaviour of an entity-type.
  */
@@ -48,13 +45,8 @@ public class AtlasEntityType extends AtlasStructType {
 
     private final AtlasEntityDef entityDef;
 
-    private List<AtlasEntityType>                    superTypes                 = Collections.emptyList();
-    private Set<String>                              allSuperTypes              = Collections.emptySet();
-    private Set<String>                              allSubTypes                = Collections.emptySet();
-    private Set<String>                              typeAndAllSubTypes         = Collections.emptySet();
-    private Set<String>                              typeAndAllSuperTypes       = Collections.emptySet();
-    private Map<String, AtlasAttribute>              relationshipAttributes     = Collections.emptyMap();
-    private Map<String, List<AtlasRelationshipType>> relationshipAttributesType = Collections.emptyMap();
+    private List<AtlasEntityType>          superTypes        = Collections.emptyList();
+    private Set<String>                    allSuperTypes     = Collections.emptySet();
 
     public AtlasEntityType(AtlasEntityDef entityDef) {
         super(entityDef);
@@ -76,9 +68,9 @@ public class AtlasEntityType extends AtlasStructType {
     public void resolveReferences(AtlasTypeRegistry typeRegistry) throws AtlasBaseException {
         super.resolveReferences(typeRegistry);
 
-        List<AtlasEntityType>       s    = new ArrayList<>();
-        Set<String>                 allS = new HashSet<>();
-        Map<String, AtlasAttribute> allA = new HashMap<>();
+        List<AtlasEntityType>          s    = new ArrayList<>();
+        Set<String>                    allS = new HashSet<>();
+        Map<String, AtlasAttribute> allA    = new HashMap<>();
 
         getTypeHierarchyInfo(typeRegistry, allS, allA);
 
@@ -92,67 +84,9 @@ public class AtlasEntityType extends AtlasStructType {
             }
         }
 
-        this.superTypes                 = Collections.unmodifiableList(s);
-        this.allSuperTypes              = Collections.unmodifiableSet(allS);
-        this.allAttributes              = Collections.unmodifiableMap(allA);
-        this.uniqAttributes             = getUniqueAttributes(this.allAttributes);
-        this.allSubTypes                = new HashSet<>(); // this will be populated in resolveReferencesPhase2()
-        this.typeAndAllSubTypes         = new HashSet<>(); // this will be populated in resolveReferencesPhase2()
-        this.relationshipAttributes     = new HashMap<>(); // this will be populated in resolveReferencesPhase3()
-        this.relationshipAttributesType = new HashMap<>(); // this will be populated in resolveReferencesPhase3()
-
-        this.typeAndAllSubTypes.add(this.getTypeName());
-
-        this.typeAndAllSuperTypes = new HashSet<>(this.allSuperTypes);
-        this.typeAndAllSuperTypes.add(this.getTypeName());
-        this.typeAndAllSuperTypes = Collections.unmodifiableSet(this.typeAndAllSuperTypes);
-    }
-
-    @Override
-    public void resolveReferencesPhase2(AtlasTypeRegistry typeRegistry) throws AtlasBaseException {
-        super.resolveReferencesPhase2(typeRegistry);
-
-        for (String superTypeName : allSuperTypes) {
-            AtlasEntityType superType = typeRegistry.getEntityTypeByName(superTypeName);
-            superType.addSubType(this);
-        }
-    }
-
-    @Override
-    public void resolveReferencesPhase3(AtlasTypeRegistry typeRegistry) throws AtlasBaseException {
-        for (AtlasAttributeDef attributeDef : getStructDef().getAttributeDefs()) {
-            String          attributeName       = attributeDef.getName();
-            AtlasType       attributeType       = typeRegistry.getType(attributeDef.getTypeName());
-            AtlasEntityType attributeEntityType = getReferencedEntityType(attributeType);
-
-            // validate if RelationshipDefs is defined for all entityDefs
-            if (attributeEntityType != null && !hasRelationshipAttribute(attributeName)) {
-                LOG.warn("No RelationshipDef defined between {} and {} on attribute: {}.{}", getTypeName(),
-                          attributeEntityType.getTypeName(), getTypeName(), attributeName);
-            }
-        }
-
-        for (String superTypeName : allSuperTypes) {
-            AtlasEntityType superType = typeRegistry.getEntityTypeByName(superTypeName);
-
-            Map<String, AtlasAttribute> superTypeRelationshipAttributes = superType.getRelationshipAttributes();
-
-            if (MapUtils.isNotEmpty(superTypeRelationshipAttributes)) {
-                relationshipAttributes.putAll(superTypeRelationshipAttributes);
-            }
-
-            Map<String, List<AtlasRelationshipType>> superTypeRelationshipAttributesType = superType.getRelationshipAttributesType();
-
-            if (MapUtils.isNotEmpty(superTypeRelationshipAttributesType)) {
-                relationshipAttributesType.putAll(superTypeRelationshipAttributesType);
-            }
-        }
-
-        allSubTypes                = Collections.unmodifiableSet(allSubTypes);
-        typeAndAllSubTypes         = Collections.unmodifiableSet(typeAndAllSubTypes);
-        typeAndAllSuperTypes       = Collections.unmodifiableSet(typeAndAllSuperTypes);
-        relationshipAttributes     = Collections.unmodifiableMap(relationshipAttributes);
-        relationshipAttributesType = Collections.unmodifiableMap(relationshipAttributesType);
+        this.superTypes        = Collections.unmodifiableList(s);
+        this.allSuperTypes     = Collections.unmodifiableSet(allS);
+        this.allAttributes     = Collections.unmodifiableMap(allA);
     }
 
     public Set<String> getSuperTypes() {
@@ -163,22 +97,8 @@ public class AtlasEntityType extends AtlasStructType {
         return allSuperTypes;
     }
 
-    public Set<String> getAllSubTypes() { return allSubTypes; }
-
-    public Set<String> getTypeAndAllSubTypes() { return typeAndAllSubTypes; }
-
-    public Set<String> getTypeAndAllSuperTypes() { return typeAndAllSuperTypes; }
-
     public boolean isSuperTypeOf(AtlasEntityType entityType) {
-        return entityType != null && allSubTypes.contains(entityType.getTypeName());
-    }
-
-    public boolean isSuperTypeOf(String entityTypeName) {
-        return StringUtils.isNotEmpty(entityTypeName) && allSubTypes.contains(entityTypeName);
-    }
-
-    public boolean isTypeOrSuperTypeOf(String entityTypeName) {
-        return StringUtils.isNotEmpty(entityTypeName) && typeAndAllSubTypes.contains(entityTypeName);
+        return entityType != null && entityType.getAllSuperTypes().contains(this.getTypeName());
     }
 
     public boolean isSubTypeOf(AtlasEntityType entityType) {
@@ -189,49 +109,6 @@ public class AtlasEntityType extends AtlasStructType {
         return StringUtils.isNotEmpty(entityTypeName) && allSuperTypes.contains(entityTypeName);
     }
 
-    public Map<String, AtlasAttribute> getRelationshipAttributes() { return relationshipAttributes; }
-
-    public AtlasAttribute getRelationshipAttribute(String attributeName) { return relationshipAttributes.get(attributeName); }
-
-    // this method should be called from AtlasRelationshipType.resolveReferencesPhase2()
-    void addRelationshipAttribute(String attributeName, AtlasAttribute attribute) {
-        relationshipAttributes.put(attributeName, attribute);
-    }
-
-    // this method should be called from AtlasRelationshipType.resolveReferencesPhase2()
-    void addRelationshipAttributeType(String attributeName, AtlasRelationshipType relationshipType) {
-        List<AtlasRelationshipType> relationshipTypes = relationshipAttributesType.get(attributeName);
-
-        if (relationshipTypes == null) {
-            relationshipTypes = new ArrayList<>();
-            relationshipAttributesType.put(attributeName, relationshipTypes);
-        }
-
-        relationshipTypes.add(relationshipType);
-    }
-
-    public List<AtlasRelationshipType> getRelationshipAttributeType(String attributeName) {
-        return relationshipAttributesType.get(attributeName);
-    }
-
-    public Map<String, List<AtlasRelationshipType>> getRelationshipAttributesType() {
-        return relationshipAttributesType;
-    }
-
-    public boolean hasRelationshipAttribute(String attributeName) {
-        return relationshipAttributes.containsKey(attributeName);
-    }
-
-    public String getQualifiedAttributeName(String attrName) throws AtlasBaseException {
-        if (allAttributes.containsKey(attrName)) {
-            return allAttributes.get(attrName).getQualifiedName();
-        } else if (relationshipAttributes.containsKey(attrName)) {
-            return relationshipAttributes.get(attrName).getQualifiedName();
-        }
-
-        throw new AtlasBaseException(AtlasErrorCode.UNKNOWN_ATTRIBUTE, attrName, entityDef.getName());
-    }
-
     @Override
     public AtlasEntity createDefaultValue() {
         AtlasEntity ret = new AtlasEntity(entityDef.getName());
@@ -241,37 +118,20 @@ public class AtlasEntityType extends AtlasStructType {
         return ret;
     }
 
-    @Override
-    public AtlasEntity createDefaultValue(Object defaultValue){
-        AtlasEntity ret = new AtlasEntity(entityDef.getName());
-
-        populateDefaultValues(ret);
-
-        return ret;
-    }
     @Override
     public boolean isValidValue(Object obj) {
         if (obj != null) {
-            for (AtlasEntityType superType : superTypes) {
-                if (!superType.isValidValue(obj)) {
-                    return false;
-                }
-            }
-            return super.isValidValue(obj);
-        }
-
-        return true;
-    }
-
-    @Override
-    public boolean isValidValueForUpdate(Object obj) {
-        if (obj != null) {
-            for (AtlasEntityType superType : superTypes) {
-                if (!superType.isValidValueForUpdate(obj)) {
-                    return false;
+            if (obj instanceof AtlasObjectId) {
+                AtlasObjectId objId = (AtlasObjectId ) obj;
+                return validateAtlasObjectId(objId);
+            } else {
+                for (AtlasEntityType superType : superTypes) {
+                    if (!superType.isValidValue(obj)) {
+                        return false;
+                    }
                 }
+                return super.isValidValue(obj);
             }
-            return super.isValidValueForUpdate(obj);
         }
 
         return true;
@@ -289,24 +149,7 @@ public class AtlasEntityType extends AtlasStructType {
                 } else if (obj instanceof Map) {
                     normalizeAttributeValues((Map) obj);
                     ret = obj;
-                }
-            }
-        }
-
-        return ret;
-    }
-
-    @Override
-    public Object getNormalizedValueForUpdate(Object obj) {
-        Object ret = null;
-
-        if (obj != null) {
-            if (isValidValueForUpdate(obj)) {
-                if (obj instanceof AtlasEntity) {
-                    normalizeAttributeValuesForUpdate((AtlasEntity) obj);
-                    ret = obj;
-                } else if (obj instanceof Map) {
-                    normalizeAttributeValuesForUpdate((Map) obj);
+                } else if (obj instanceof AtlasObjectId) {
                     ret = obj;
                 }
             }
@@ -317,7 +160,7 @@ public class AtlasEntityType extends AtlasStructType {
 
     @Override
     public AtlasAttribute getAttribute(String attributeName) {
-        return allAttributes.get(attributeName);
+        return findAttribute(allAttributes.values(), attributeName);
     }
 
     @Override
@@ -325,52 +168,19 @@ public class AtlasEntityType extends AtlasStructType {
         boolean ret = true;
 
         if (obj != null) {
-            if (obj instanceof AtlasEntity || obj instanceof Map) {
-                for (AtlasEntityType superType : superTypes) {
-                    ret = superType.validateValue(obj, objName, messages) && ret;
-                }
-
-                ret = super.validateValue(obj, objName, messages) && ret;
-
-            } else {
-                ret = false;
-                messages.add(objName + ": invalid value type '" + obj.getClass().getName());
+            if (obj instanceof AtlasObjectId) {
+                AtlasObjectId objId = (AtlasObjectId ) obj;
+                return validateAtlasObjectId(objId);
             }
-        }
-
-        return ret;
-    }
-
-    @Override
-    public boolean validateValueForUpdate(Object obj, String objName, List<String> messages) {
-        boolean ret = true;
-
-        if (obj != null) {
-            if (obj instanceof AtlasEntity || obj instanceof Map) {
-                for (AtlasEntityType superType : superTypes) {
-                    ret = superType.validateValueForUpdate(obj, objName, messages) && ret;
-                }
-
-                ret = super.validateValueForUpdate(obj, objName, messages) && ret;
 
-            } else {
-                ret = false;
-                messages.add(objName + ": invalid value type '" + obj.getClass().getName());
+            for (AtlasEntityType superType : superTypes) {
+                ret = superType.validateValue(obj, objName, messages) && ret;
             }
-        }
-
-        return ret;
-    }
 
-    @Override
-    public AtlasType getTypeForAttribute() {
-        AtlasType attributeType = new AtlasObjectIdType(getTypeName());
-
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("getTypeForAttribute(): {} ==> {}", getTypeName(), attributeType.getTypeName());
+            ret = super.validateValue(obj, objName, messages) && ret;
         }
 
-        return attributeType;
+        return ret;
     }
 
     public void normalizeAttributeValues(AtlasEntity ent) {
@@ -383,16 +193,6 @@ public class AtlasEntityType extends AtlasStructType {
         }
     }
 
-    public void normalizeAttributeValuesForUpdate(AtlasEntity ent) {
-        if (ent != null) {
-            for (AtlasEntityType superType : superTypes) {
-                superType.normalizeAttributeValuesForUpdate(ent);
-            }
-
-            super.normalizeAttributeValuesForUpdate(ent);
-        }
-    }
-
     @Override
     public void normalizeAttributeValues(Map<String, Object> obj) {
         if (obj != null) {
@@ -404,16 +204,6 @@ public class AtlasEntityType extends AtlasStructType {
         }
     }
 
-    public void normalizeAttributeValuesForUpdate(Map<String, Object> obj) {
-        if (obj != null) {
-            for (AtlasEntityType superType : superTypes) {
-                superType.normalizeAttributeValuesForUpdate(obj);
-            }
-
-            super.normalizeAttributeValuesForUpdate(obj);
-        }
-    }
-
     public void populateDefaultValues(AtlasEntity ent) {
         if (ent != null) {
             for (AtlasEntityType superType : superTypes) {
@@ -424,11 +214,6 @@ public class AtlasEntityType extends AtlasStructType {
         }
     }
 
-    private void addSubType(AtlasEntityType subType) {
-        allSubTypes.add(subType.getTypeName());
-        typeAndAllSubTypes.add(subType.getTypeName());
-    }
-
     private void getTypeHierarchyInfo(AtlasTypeRegistry              typeRegistry,
                                       Set<String>                    allSuperTypeNames,
                                       Map<String, AtlasAttribute> allAttributes) throws AtlasBaseException {
@@ -453,9 +238,10 @@ public class AtlasEntityType extends AtlasStructType {
         if (CollectionUtils.isNotEmpty(entityDef.getSuperTypes())) {
             visitedTypes.add(entityDef.getName());
             for (String superTypeName : entityDef.getSuperTypes()) {
-                AtlasEntityType superType = typeRegistry.getEntityTypeByName(superTypeName);
+                AtlasType type = typeRegistry.getType(superTypeName);
 
-                if (superType != null) {
+                if (type instanceof AtlasEntityType) {
+                    AtlasEntityType superType = (AtlasEntityType) type;
                     superType.collectTypeHierarchyInfo(typeRegistry, allSuperTypeNames, allAttributes, visitedTypes);
                 }
             }
@@ -467,14 +253,25 @@ public class AtlasEntityType extends AtlasStructType {
             for (AtlasAttributeDef attributeDef : entityDef.getAttributeDefs()) {
 
                 AtlasType type = typeRegistry.getType(attributeDef.getTypeName());
-                allAttributes.put(attributeDef.getName(), new AtlasAttribute(this, attributeDef, type));
+                allAttributes.put(attributeDef.getName(), new AtlasAttribute(this, entityDef, attributeDef, type));
             }
         }
     }
 
-    boolean isAssignableFrom(AtlasObjectId objId) {
-        boolean ret = AtlasTypeUtil.isValid(objId) && (StringUtils.equals(objId.getTypeName(), getTypeName()) || isSuperTypeOf(objId.getTypeName()));
-
-        return ret;
+    private boolean validateAtlasObjectId(AtlasObjectId objId) {
+        if (StringUtils.isEmpty(objId.getTypeName()) || StringUtils.isEmpty(objId.getGuid())) {
+            return false;
+        } else {
+            String typeName = objId.getTypeName();
+            if (!typeName.equals(getTypeName())) {
+                //TODO - Enable below after enabling subType check
+//                        if ( !isSuperTypeOf(typeName)) {
+//                            return false;
+//                        }
+                return false;
+            }
+        }
+        return AtlasEntity.isAssigned(objId.getGuid()) || AtlasEntity.isUnAssigned((objId.getGuid()));
     }
+
 }