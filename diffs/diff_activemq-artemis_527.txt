diff --git a/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/broker/artemiswrapper/ArtemisBrokerWrapper.java b/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/broker/artemiswrapper/ArtemisBrokerWrapper.java
index 94faf26ee2..31da179ebf 100644
--- a/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/broker/artemiswrapper/ArtemisBrokerWrapper.java
+++ b/tests/activemq5-unit-tests/src/main/java/org/apache/activemq/broker/artemiswrapper/ArtemisBrokerWrapper.java
@@ -16,7 +16,7 @@
  */
 package org.apache.activemq.broker.artemiswrapper;
 
-import java.io.File;
+import java.net.URI;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
@@ -29,47 +29,41 @@ import org.apache.activemq.artemis.api.core.SimpleString;
 import org.apache.activemq.artemis.api.core.TransportConfiguration;
 import org.apache.activemq.artemis.core.config.Configuration;
 import org.apache.activemq.artemis.core.config.impl.SecurityConfiguration;
-import org.apache.activemq.artemis.core.postoffice.Binding;
 import org.apache.activemq.artemis.core.registry.JndiBindingRegistry;
 import org.apache.activemq.artemis.core.remoting.impl.netty.TransportConstants;
 import org.apache.activemq.artemis.core.security.Role;
-import org.apache.activemq.artemis.core.server.impl.QueueImpl;
 import org.apache.activemq.artemis.core.settings.impl.AddressFullMessagePolicy;
 import org.apache.activemq.artemis.core.settings.impl.AddressSettings;
 import org.apache.activemq.artemis.core.settings.impl.SlowConsumerPolicy;
+import org.apache.activemq.artemis.jms.client.ActiveMQDestination;
 import org.apache.activemq.artemis.jms.server.impl.JMSServerManagerImpl;
-import org.apache.activemq.artemis.spi.core.security.ActiveMQJAASSecurityManager;
+import org.apache.activemq.artemis.spi.core.security.ActiveMQSecurityManagerImpl;
+import org.apache.activemq.artemiswrapper.ArtemisBrokerHelper;
 import org.apache.activemq.broker.BrokerService;
 import org.apache.activemq.broker.region.policy.PolicyEntry;
 import org.apache.activemq.broker.region.policy.PolicyMap;
 
-import javax.management.MBeanServer;
-import javax.management.MBeanServerFactory;
-
 public class ArtemisBrokerWrapper extends ArtemisBrokerBase {
 
-   protected final Map<String, SimpleString> testQueues = new HashMap<>();
+   protected final Map<String, SimpleString> testQueues = new HashMap<String, SimpleString>();
    protected JMSServerManagerImpl jmsServer;
-   protected MBeanServer mbeanServer;
 
-   public ArtemisBrokerWrapper(BrokerService brokerService, File temporaryFolder) {
-      super(temporaryFolder);
+   public ArtemisBrokerWrapper(BrokerService brokerService) {
       this.bservice = brokerService;
    }
 
    @Override
    public void start() throws Exception {
+      testDir = temporaryFolder.getRoot().getAbsolutePath();
       clearDataRecreateServerDirs();
-
-      mbeanServer = MBeanServerFactory.createMBeanServer();
-
       server = createServer(realStore, true);
-      server.setMBeanServer(mbeanServer);
-
       server.getConfiguration().getAcceptorConfigurations().clear();
+      HashMap<String, Object> params = new HashMap<String, Object>();
+      params.put(TransportConstants.PORT_PROP_NAME, "61616");
+      params.put(TransportConstants.PROTOCOLS_PROP_NAME, "OPENWIRE,CORE");
+      TransportConfiguration transportConfiguration = new TransportConfiguration(NETTY_ACCEPTOR_FACTORY, params);
 
       Configuration serverConfig = server.getConfiguration();
-      serverConfig.setJMXManagementEnabled(true);
 
       Map<String, AddressSettings> addressSettingsMap = serverConfig.getAddressesSettings();
 
@@ -88,18 +82,35 @@ public class ArtemisBrokerWrapper extends ArtemisBrokerBase {
       }
       SimpleString dla = new SimpleString("jms.queue.ActiveMQ.DLQ");
       commonSettings.setDeadLetterAddress(dla);
-      commonSettings.setAutoCreateJmsQueues(true);
 
-      if (bservice.extraConnectors.size() == 0) {
-         serverConfig.addAcceptorConfiguration("home", "tcp://localhost:61616?protocols=OPENWIRE,CORE");
-      }
+      serverConfig.getAcceptorConfigurations().add(transportConfiguration);
       if (this.bservice.enableSsl()) {
-         //default
-         addServerAcceptor(serverConfig, new BrokerService.ConnectorInfo(61611, true));
+         params = new HashMap<String, Object>();
+         params.put(TransportConstants.SSL_ENABLED_PROP_NAME, true);
+         params.put(TransportConstants.PORT_PROP_NAME, 61611);
+         params.put(TransportConstants.PROTOCOLS_PROP_NAME, "OPENWIRE");
+         params.put(TransportConstants.KEYSTORE_PATH_PROP_NAME, bservice.SERVER_SIDE_KEYSTORE);
+         params.put(TransportConstants.KEYSTORE_PASSWORD_PROP_NAME, bservice.KEYSTORE_PASSWORD);
+         params.put(TransportConstants.KEYSTORE_PROVIDER_PROP_NAME, bservice.storeType);
+         if (bservice.SERVER_SIDE_TRUSTSTORE != null) {
+            params.put(TransportConstants.NEED_CLIENT_AUTH_PROP_NAME, true);
+            params.put(TransportConstants.TRUSTSTORE_PATH_PROP_NAME, bservice.SERVER_SIDE_TRUSTSTORE);
+            params.put(TransportConstants.TRUSTSTORE_PASSWORD_PROP_NAME, bservice.TRUSTSTORE_PASSWORD);
+            params.put(TransportConstants.TRUSTSTORE_PROVIDER_PROP_NAME, bservice.storeType);
+         }
+         TransportConfiguration sslTransportConfig = new TransportConfiguration(NETTY_ACCEPTOR_FACTORY, params);
+         serverConfig.getAcceptorConfigurations().add(sslTransportConfig);
       }
 
-      for (BrokerService.ConnectorInfo info : bservice.extraConnectors) {
-         addServerAcceptor(serverConfig, info);
+      for (Integer port : bservice.extraConnectors) {
+         if (port.intValue() != 61616) {
+            //extra port
+            params = new HashMap<String, Object>();
+            params.put(TransportConstants.PORT_PROP_NAME, port.intValue());
+            params.put(TransportConstants.PROTOCOLS_PROP_NAME, "OPENWIRE");
+            TransportConfiguration extraTransportConfiguration = new TransportConfiguration(NETTY_ACCEPTOR_FACTORY, params);
+            serverConfig.getAcceptorConfigurations().add(extraTransportConfiguration);
+         }
       }
 
       serverConfig.setSecurityEnabled(enableSecurity);
@@ -107,7 +118,7 @@ public class ArtemisBrokerWrapper extends ArtemisBrokerBase {
       //extraServerConfig(serverConfig);
 
       if (enableSecurity) {
-         ActiveMQJAASSecurityManager sm = (ActiveMQJAASSecurityManager) server.getSecurityManager();
+         ActiveMQSecurityManagerImpl sm = (ActiveMQSecurityManagerImpl) server.getSecurityManager();
          SecurityConfiguration securityConfig = sm.getConfiguration();
          securityConfig.addRole("openwireSender", "sender");
          securityConfig.addUser("openwireSender", "SeNdEr");
@@ -133,12 +144,12 @@ public class ArtemisBrokerWrapper extends ArtemisBrokerBase {
 
          Map<String, Set<Role>> settings = server.getConfiguration().getSecurityRoles();
          if (settings == null) {
-            settings = new HashMap<>();
+            settings = new HashMap<String, Set<Role>>();
             server.getConfiguration().setSecurityRoles(settings);
          }
          Set<Role> anySet = settings.get("#");
          if (anySet == null) {
-            anySet = new HashSet<>();
+            anySet = new HashSet<Role>();
             settings.put("#", anySet);
          }
          anySet.add(senderRole);
@@ -160,30 +171,14 @@ public class ArtemisBrokerWrapper extends ArtemisBrokerBase {
 
       server.start();
 
-      stopped = false;
+/*
+         registerConnectionFactory();
+	      mbeanServer = MBeanServerFactory.createMBeanServer();
+*/
 
-   }
+      ArtemisBrokerHelper.setBroker(this.bservice);
+      stopped = false;
 
-   private void addServerAcceptor(Configuration serverConfig, BrokerService.ConnectorInfo info) throws Exception {
-      if (info.ssl) {
-         HashMap<String, Object> params = new HashMap<String, Object>();
-         params.put(TransportConstants.SSL_ENABLED_PROP_NAME, true);
-         params.put(TransportConstants.PORT_PROP_NAME, info.port);
-         params.put(TransportConstants.PROTOCOLS_PROP_NAME, "OPENWIRE");
-         params.put(TransportConstants.KEYSTORE_PATH_PROP_NAME, bservice.SERVER_SIDE_KEYSTORE);
-         params.put(TransportConstants.KEYSTORE_PASSWORD_PROP_NAME, bservice.KEYSTORE_PASSWORD);
-         params.put(TransportConstants.KEYSTORE_PROVIDER_PROP_NAME, bservice.storeType);
-         if (bservice.SERVER_SIDE_TRUSTSTORE != null) {
-            params.put(TransportConstants.TRUSTSTORE_PATH_PROP_NAME, bservice.SERVER_SIDE_TRUSTSTORE);
-            params.put(TransportConstants.TRUSTSTORE_PASSWORD_PROP_NAME, bservice.TRUSTSTORE_PASSWORD);
-            params.put(TransportConstants.TRUSTSTORE_PROVIDER_PROP_NAME, bservice.storeType);
-         }
-         TransportConfiguration sslTransportConfig = new TransportConfiguration(NETTY_ACCEPTOR_FACTORY, params);
-         serverConfig.getAcceptorConfigurations().add(sslTransportConfig);
-      }
-      else {
-         serverConfig.addAcceptorConfiguration("homePort" + info.port, "tcp://localhost:" + info.port + "?protocols=OPENWIRE,CORE");
-      }
    }
 
    private void translatePolicyMap(Configuration serverConfig, PolicyMap policyMap) {
@@ -204,14 +199,6 @@ public class ArtemisBrokerWrapper extends ArtemisBrokerBase {
             settings.setSlowConsumerCheckPeriod(1);
             settings.setSlowConsumerPolicy(SlowConsumerPolicy.NOTIFY);
          }
-         if (entry.isProducerFlowControl()) {
-            settings.setMaxSizeBytes(10240000).setAddressFullMessagePolicy(AddressFullMessagePolicy.BLOCK);
-            if (bservice.getSystemUsage().isSendFailIfNoSpace()) {
-               settings.setAddressFullMessagePolicy(AddressFullMessagePolicy.FAIL);
-            }
-         }
-         int queuePrefetch = entry.getQueuePrefetch();
-         settings.setQueuePrefetch(queuePrefetch);
       }
 
       PolicyEntry defaultEntry = policyMap.getDefaultEntry();
@@ -222,7 +209,7 @@ public class ArtemisBrokerWrapper extends ArtemisBrokerBase {
             settingsMap.put("#", defSettings);
          }
          if (defaultEntry.isProducerFlowControl()) {
-            defSettings.setMaxSizeBytes(10240000).setAddressFullMessagePolicy(AddressFullMessagePolicy.BLOCK);
+            defSettings.setMaxSizeBytes(1).setAddressFullMessagePolicy(AddressFullMessagePolicy.BLOCK);
             if (bservice.getSystemUsage().isSendFailIfNoSpace()) {
                defSettings.setAddressFullMessagePolicy(AddressFullMessagePolicy.FAIL);
             }
@@ -273,19 +260,4 @@ public class ArtemisBrokerWrapper extends ArtemisBrokerBase {
          }
       }
    }
-
-   public long getAMQueueMessageCount(String physicalName) {
-      long count = 0;
-      String qname = "jms.queue." + physicalName;
-      Binding binding = server.getPostOffice().getBinding(new SimpleString(qname));
-      if (binding != null) {
-         QueueImpl q = (QueueImpl) binding.getBindable();
-         count = q.getMessageCount();
-      }
-      return count;
-   }
-
-   public MBeanServer getMbeanServer() {
-      return this.mbeanServer;
-   }
 }