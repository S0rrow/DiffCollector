diff --git a/addons/hive-bridge/src/test/java/org/apache/hadoop/metadata/hive/hook/HiveHookIT.java b/addons/hive-bridge/src/test/java/org/apache/hadoop/metadata/hive/hook/HiveHookIT.java
index 138b3abb8..522519ced 100755
--- a/addons/hive-bridge/src/test/java/org/apache/hadoop/metadata/hive/hook/HiveHookIT.java
+++ b/addons/hive-bridge/src/test/java/org/apache/hadoop/metadata/hive/hook/HiveHookIT.java
@@ -26,13 +26,10 @@ import org.apache.hadoop.metadata.MetadataServiceClient;
 import org.apache.hadoop.metadata.hive.bridge.HiveMetaStoreBridge;
 import org.apache.hadoop.metadata.hive.model.HiveDataTypes;
 import org.codehaus.jettison.json.JSONArray;
-import org.codehaus.jettison.json.JSONObject;
 import org.testng.Assert;
 import org.testng.annotations.BeforeClass;
 import org.testng.annotations.Test;
 
-import java.io.File;
-
 public class HiveHookIT {
     private static final String DGI_URL = "http://localhost:21000/";
     private static final String CLUSTER_NAME = "test";
@@ -62,9 +59,6 @@ public class HiveHookIT {
         hiveConf.set("javax.jdo.option.ConnectionURL", "jdbc:derby:./target/metastore_db;create=true");
         hiveConf.set("hive.hook.dgi.synchronous", "true");
         hiveConf.set(HiveMetaStoreBridge.HIVE_CLUSTER_NAME, CLUSTER_NAME);
-        //weird, hive prepends test_ to table name
-        hiveConf.set("hive.test.mode", "true");
-        hiveConf.set("fs.pfile.impl", "org.apache.hadoop.fs.ProxyLocalFileSystem");
         return hiveConf;
     }
 
@@ -75,7 +69,7 @@ public class HiveHookIT {
 
     @Test
     public void testCreateDatabase() throws Exception {
-        String dbName = "db" + random();
+        String dbName = "db" + RandomStringUtils.randomAlphanumeric(5).toLowerCase();
         runCommand("create database " + dbName);
 
         assertDatabaseIsRegistered(dbName);
@@ -83,15 +77,15 @@ public class HiveHookIT {
 
     @Test
     public void testCreateTable() throws Exception {
-        String dbName = "db" + random();
+        String dbName = "db" + RandomStringUtils.randomAlphanumeric(5).toLowerCase();
         runCommand("create database " + dbName);
 
-        String tableName = "table" + random();
+        String tableName = "table" + RandomStringUtils.randomAlphanumeric(5).toLowerCase();
         runCommand("create table " + dbName + "." + tableName + "(id int, name string)");
         assertTableIsRegistered(dbName, tableName);
 
-        tableName = "table" + random();
-        runCommand("create table " + tableName + "(id int, name string) partitioned by(dt string)");
+        tableName = "table" + RandomStringUtils.randomAlphanumeric(5).toLowerCase();
+        runCommand("create table " + tableName + "(id int, name string)");
         assertTableIsRegistered("default", tableName);
 
         //Create table where database doesn't exist, will create database instance as well
@@ -100,10 +94,10 @@ public class HiveHookIT {
 
     @Test
     public void testCTAS() throws Exception {
-        String tableName = "table" + random();
+        String tableName = "table" + RandomStringUtils.randomAlphanumeric(5).toLowerCase();
         runCommand("create table " + tableName + "(id int, name string)");
 
-        String ctasTableName = "table" + random();
+        String ctasTableName = "table" + RandomStringUtils.randomAlphanumeric(5).toLowerCase();
         String query = "create table " + ctasTableName + " as select * from " + tableName;
         runCommand(query);
 
@@ -111,125 +105,24 @@ public class HiveHookIT {
         assertProcessIsRegistered(query);
     }
 
-    @Test
-    public void testCreateView() throws Exception {
-        String tableName = "table" + random();
-        runCommand("create table " + tableName + "(id int, name string)");
-
-        String viewName = "table" + random();
-        String query = "create view " + viewName + " as select * from " + tableName;
-        runCommand(query);
-
-        assertTableIsRegistered("default", viewName);
-        assertProcessIsRegistered(query);
-    }
-
-    @Test
-    public void testLoadData() throws Exception {
-        String tableName = "table" + random();
-        runCommand("create table test_" + tableName + "(id int, name string)");
-
-        String loadFile = file("load");
-        String query = "load data local inpath 'file://" + loadFile + "' into table " + tableName;
-        runCommand(query);
-
-        assertProcessIsRegistered(query);
-    }
-
-    @Test
-    public void testInsert() throws Exception {
-        String tableName = "table" + random();
-        runCommand("create table " + tableName + "(id int, name string) partitioned by(dt string)");
-
-        String insertTableName = "table" + random();
-        runCommand("create table test_" + insertTableName + "(name string) partitioned by(dt string)");
-
-        String query = "insert into " + insertTableName + " partition(dt = '2015-01-01') select name from "
-                + tableName + " where dt = '2015-01-01'";
-
-        runCommand(query);
-        assertProcessIsRegistered(query);
-        assertPartitionIsRegistered("default", "test_" + insertTableName, "2015-01-01");
-    }
-
-    private String random() {
-        return RandomStringUtils.randomAlphanumeric(5).toLowerCase();
-    }
-
-    private String file(String tag) throws Exception {
-        String filename = "./target/" + tag + "-data-" + random();
-        File file = new File(filename);
-        file.createNewFile();
-        return file.getAbsolutePath();
-    }
-
-    private String mkdir(String tag) throws Exception {
-        String filename = "./target/" + tag + "-data-" + random();
-        File file = new File(filename);
-        file.mkdirs();
-        return file.getAbsolutePath();
-    }
-
-    @Test
-    public void testExportImport() throws Exception {
-        String tableName = "table" + random();
-        runCommand("create table test_" + tableName + "(name string)");
-
-        String filename = "pfile://" + mkdir("export");
-        String query = "export table " + tableName + " to '" + filename + "'";
-        runCommand(query);
-        assertProcessIsRegistered(query);
-
-        tableName = "table" + random();
-        runCommand("create table " + tableName + "(name string)");
-
-        query = "import table " + tableName + " from '" + filename + "'";
-        runCommand(query);
-        assertProcessIsRegistered(query);
-    }
-
-    @Test
-    public void testSelect() throws Exception {
-        String tableName = "table" + random();
-        runCommand("create table " + tableName + "(id int, name string)");
-
-        String query = "select * from " + tableName;
-        runCommand(query);
-        assertProcessIsRegistered(query);
-    }
-
     private void assertProcessIsRegistered(String queryStr) throws Exception {
-        String dslQuery = String.format("%s where queryText = \"%s\"", HiveDataTypes.HIVE_PROCESS.getName(), queryStr);
-        assertEntityIsRegistered(dslQuery);
+        String dslQuery = String.format("%s where queryText = '%s'", HiveDataTypes.HIVE_PROCESS.getName(), queryStr);
+        assertInstanceIsRegistered(dslQuery);
     }
 
     private void assertTableIsRegistered(String dbName, String tableName) throws Exception {
         String query = String.format("%s where name = '%s', dbName where name = '%s' and clusterName = '%s'",
                 HiveDataTypes.HIVE_TABLE.getName(), tableName, dbName, CLUSTER_NAME);
-        assertEntityIsRegistered(query);
+        assertInstanceIsRegistered(query);
     }
 
     private void assertDatabaseIsRegistered(String dbName) throws Exception {
         String query = String.format("%s where name = '%s' and clusterName = '%s'", HiveDataTypes.HIVE_DB.getName(),
                 dbName, CLUSTER_NAME);
-        assertEntityIsRegistered(query);
-    }
-
-    private void assertPartitionIsRegistered(String dbName, String tableName, String value) throws Exception {
-        String typeName = HiveDataTypes.HIVE_PARTITION.getName();
-
-        String dbType = HiveDataTypes.HIVE_DB.getName();
-        String tableType = HiveDataTypes.HIVE_TABLE.getName();
-        String gremlinQuery = String.format("g.V.has('__typeName', '%s').has('%s.values', ['%s']).as('p')."
-                        + "out('__%s.tableName').has('%s.name', '%s').out('__%s.dbName').has('%s.name', '%s')"
-                        + ".has('%s.clusterName', '%s').back('p').toList()", typeName, typeName, value, typeName,
-                tableType, tableName, tableType, dbType, dbName, dbType, CLUSTER_NAME);
-        JSONObject response = dgiCLient.searchByGremlin(gremlinQuery);
-        JSONArray results = response.getJSONArray(MetadataServiceClient.RESULTS);
-        Assert.assertEquals(results.length(), 1);
+        assertInstanceIsRegistered(query);
     }
 
-    private void assertEntityIsRegistered(String dslQuery) throws Exception{
+    private void assertInstanceIsRegistered(String dslQuery) throws Exception{
         JSONArray results = dgiCLient.searchByDSL(dslQuery);
         Assert.assertEquals(results.length(), 1);
     }