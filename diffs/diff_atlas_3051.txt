diff --git a/graphdb/api/src/main/java/org/apache/atlas/repository/graphdb/AtlasGraph.java b/graphdb/api/src/main/java/org/apache/atlas/repository/graphdb/AtlasGraph.java
index e5316d80a..995c5457a 100644
--- a/graphdb/api/src/main/java/org/apache/atlas/repository/graphdb/AtlasGraph.java
+++ b/graphdb/api/src/main/java/org/apache/atlas/repository/graphdb/AtlasGraph.java
@@ -18,22 +18,16 @@
 package org.apache.atlas.repository.graphdb;
 
 import java.io.IOException;
-import java.io.InputStream;
 import java.io.OutputStream;
-import java.util.Map;
+import java.util.List;
 import java.util.Set;
 
-import javax.script.ScriptEngine;
 import javax.script.ScriptException;
 
-import org.apache.atlas.exception.AtlasBaseException;
-import org.apache.atlas.groovy.GroovyExpression;
-import org.apache.atlas.model.impexp.MigrationStatus;
-import org.apache.atlas.type.AtlasType;
-import org.apache.atlas.type.AtlasTypeRegistry;
+import org.apache.atlas.typesystem.types.IDataType;
 
 /**
- * Represents a graph.
+ * Represents a graph
  *
  * @param <V> vertex implementation class
  * @param <E> edge implementation class
@@ -41,7 +35,7 @@ import org.apache.atlas.type.AtlasTypeRegistry;
 public interface AtlasGraph<V, E> {
 
     /**
-     * Adds an edge to the graph.
+     * Adds an edge to the graph
      *
      * @param outVertex
      * @param inVertex
@@ -51,14 +45,14 @@ public interface AtlasGraph<V, E> {
     AtlasEdge<V, E> addEdge(AtlasVertex<V, E> outVertex, AtlasVertex<V, E> inVertex, String label);
 
     /**
-     * Adds a vertex to the graph.
+     * Adds a vertex to the graph
      *
      * @return
      */
     AtlasVertex<V, E> addVertex();
 
     /**
-     * Removes the specified edge from the graph.
+     * Removes the specified edge from the graph
      *
      * @param edge
      */
@@ -113,6 +107,7 @@ public interface AtlasGraph<V, E> {
      * Gets the names of the indexes on edges
      * type.
      *
+     * @param type
      * @return
      */
     Set<String> getEdgeIndexKeys();
@@ -122,6 +117,7 @@ public interface AtlasGraph<V, E> {
      * Gets the names of the indexes on vertices.
      * type.
      *
+     * @param type
      * @return
      */
     Set<String> getVertexIndexKeys();
@@ -140,38 +136,21 @@ public interface AtlasGraph<V, E> {
     Iterable<AtlasVertex<V, E>> getVertices(String key, Object value);
 
     /**
-     * Creates a graph query.
-     *
+     * Creates a graph query
      * @return
      */
     AtlasGraphQuery<V, E> query();
 
     /**
-     * Creates an index query.
+     * Creates an index query
      *
      * @param indexName index name
      * @param queryString the query
      *
-     * @see <a
-     * href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html">
-     * Elastic Search Reference</a> for query syntax
+     * @see <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html">Elastic Search Reference</a> for query syntax
      */
     AtlasIndexQuery<V, E> indexQuery(String indexName, String queryString);
 
-    /**
-     * Creates an index query.
-     *
-     * @param indexName index name
-     * @param queryString the query
-     * @param offset specify the offset that should be applied for the query. This is useful for paging through
-     *               list of results
-     *
-     * @see <a
-     * href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html">
-     * Elastic Search Reference</a> for query syntax
-     */
-    AtlasIndexQuery<V, E> indexQuery(String indexName, String queryString, int offset);
-
     /**
      * Gets the management object associated with this graph and opens a transaction
      * for changes that are made.
@@ -197,14 +176,14 @@ public interface AtlasGraph<V, E> {
     /**
      * Deletes all data in the graph.  May or may not delete
      * the indices, depending on the what the underlying graph supports.
-     *
+     * 
      * For testing only.
-     *
+     * 
      */
     void clear();
 
     /**
-     * Converts the graph to gson and writes it to the specified stream.
+     * Converts the graph to gson and writes it to the specified stream
      *
      * @param os
      * @throws IOException
@@ -214,17 +193,70 @@ public interface AtlasGraph<V, E> {
     //the following methods insulate Atlas from the details
     //of the interaction with Gremlin
 
+
+    /**
+     *
+     * When we construct Gremlin select queries, the information we request
+     * is grouped by the vertex the information is coming from.  Each vertex
+     * is assigned a column name which uniquely identifies it.  The queries
+     * are specially formatted so that the value associated with each of
+     * these column names is an array with the various things we need
+     * about that particular vertex.  The query evaluator creates a mapping
+     * that knows what index each bit of information is stored at within
+     * this array.
+     * <p/>
+     * When we execute a Gremlin query, the exact java objects we get
+     * back vary depending on whether Gremlin 2 or Gremlin 3 is being used.
+     * This method takes as input a raw row result that was obtained by
+     * executing a Gremlin query and extracts the value that was found
+     * at the given index in the array for the given column name.
+     * <p/>
+     * If the value found is a vertex or edge, it is automatically converted
+     * to an AtlasVertex/AtlasEdge.
+     *
+     * @param rowValue the raw row value that was returned by Gremin
+     * @param colName the column name to use
+     * @param idx the index of the value within the column to retrieve.
+     *
+     */
+    Object getGremlinColumnValue(Object rowValue, String colName, int idx);
+
+    /**
+     * When Gremlin queries are executed, they return
+     * Vertex and Edge objects that are specific to the underlying
+     * graph database.  This method provides a way to convert these
+     * objects back into the AtlasVertex/AtlasEdge objects that
+     * Atlas requires.
+     *
+     * @param rawValue the value that was obtained from Gremlin
+     * @return either an AtlasEdge, an AtlasVertex, or the original
+     * value depending on whether the rawValue represents an edge,
+     * vertex, or something else.
+     *
+     */
+    Object convertGremlinValue(Object rawValue);
+
+    /**
+     * Gremlin 2 and Gremlin 3 represent the results of "path"
+     * queries differently.  This method takes as input the
+     * path from Gremlin and returns the list of objects in the path.
+     *
+     * @param rawValue
+     * @return
+     */
+    List<Object> convertPathQueryResultToList(Object rawValue);
+
     /**
      * This method is used in the generation of queries.  It is used to
      * convert property values from the value that is stored in the graph
      * to the value/type that the user expects to get back.
      *
-     * @param valueExpr - gremlin expr that represents the persistent property value
+     * @param expr - gremlin expr that represents the persistent property value
      * @param type
      * @return
      */
-    GroovyExpression generatePersisentToLogicalConversionExpression(GroovyExpression valueExpr, AtlasType type);
-
+    String generatePersisentToLogicalConversionExpression(String valueExpr, IDataType<?> type);
+     
     /**
      * Indicates whether or not stored values with the specified type need to be converted
      * within generated gremlin queries before they can be compared with literal values.
@@ -235,7 +267,7 @@ public interface AtlasGraph<V, E> {
      * gremlin expression with the converted value.  In addition, this cause the gremlin
      * 'filter' step to be used to compare the values instead of a 'has' step.
      */
-    boolean isPropertyValueConversionNeeded(AtlasType type);
+    boolean isPropertyValueConversionNeeded(IDataType<?> type);
 
     /**
      * Gets the version of Gremlin that this graph uses.
@@ -259,8 +291,8 @@ public interface AtlasGraph<V, E> {
      *
      * @return
      */
-    GroovyExpression getInitialIndexedPredicate(GroovyExpression parent);
-
+    String getInitialIndexedPredicate();
+    
     /**
      * As an optimization, a graph database implementation may want to retrieve additional
      * information about the query results.  For example, in the IBM Graph implementation,
@@ -268,60 +300,15 @@ public interface AtlasGraph<V, E> {
      * avoid the need to make an extra REST API call to look up those edges.  For implementations
      * that do not require any kind of transform, an empty String should be returned.
      */
-    GroovyExpression addOutputTransformationPredicate(GroovyExpression expr, boolean isSelect, boolean isPath);
-
-    /**
-     * Get an instance of the script engine to execute Gremlin queries
-     *
-     * @return script engine to execute Gremlin queries
-     */
-    ScriptEngine getGremlinScriptEngine() throws AtlasBaseException;
-
-    /**
-     * Release an instance of the script engine obtained with getGremlinScriptEngine()
-     *
-     * @param scriptEngine: ScriptEngine to release
-     */
-    void releaseGremlinScriptEngine(ScriptEngine scriptEngine);
-
-    /**
-     * Executes a Gremlin script, returns an object with the result.
-     *
-     * @param query
-     * @param isPath whether this is a path query
-     *
-     * @return the result from executing the script
-     *
-     * @throws ScriptException
-     */
-    Object executeGremlinScript(String query, boolean isPath) throws AtlasBaseException;
+    String getOutputTransformationPredicate(boolean isSelect, boolean isPath);
 
     /**
-     * Executes a Gremlin script using a ScriptEngineManager provided by consumer, returns an object with the result.
-     * This is useful for scenarios where an operation executes large number of queries.
-     *
-     * @param scriptEngine: ScriptEngine initialized by consumer.
-     * @param bindings: Update bindings with Graph instance for ScriptEngine that is initilized externally.
-     * @param query
-     * @param isPath whether this is a path query
-     *
-     * @return the result from executing the script
+     * Executes a gremlin query, returns an object with the raw
+     * result.
      *
-     * @throws ScriptException
-     */
-    Object executeGremlinScript(ScriptEngine scriptEngine, Map<? extends  String, ? extends  Object> bindings, String query, boolean isPath) throws ScriptException;
-
-
-    /**
-     * Convenience method to check whether the given property is
-     * a multi-property.
-     *
-     * @param name
+     * @param gremlinQuery
      * @return
      */
-    boolean isMultiProperty(String name);
-
-    void importLegacyGraphSON(AtlasTypeRegistry typeRegistry, InputStream fs) throws AtlasBaseException;
+    Object executeGremlinScript(String gremlinQuery) throws ScriptException;
 
-    MigrationStatus getMigrationStatus();
-}
+}
\ No newline at end of file