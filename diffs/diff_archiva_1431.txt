diff --git a/archiva-base/archiva-configuration/src/main/java/org/apache/maven/archiva/configuration/FileTypes.java b/archiva-base/archiva-configuration/src/main/java/org/apache/maven/archiva/configuration/FileTypes.java
index 486e8f495..783b35885 100644
--- a/archiva-base/archiva-configuration/src/main/java/org/apache/maven/archiva/configuration/FileTypes.java
+++ b/archiva-base/archiva-configuration/src/main/java/org/apache/maven/archiva/configuration/FileTypes.java
@@ -19,30 +19,28 @@
  * under the License.
  */
 
-import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
+import org.apache.commons.collections.Closure;
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.collections.Predicate;
-import org.apache.commons.configuration.CombinedConfiguration;
-import org.apache.maven.archiva.common.utils.Slf4JPlexusLogger;
+import org.apache.commons.lang.StringUtils;
 import org.apache.maven.archiva.configuration.functors.FiletypeSelectionPredicate;
-import org.apache.maven.archiva.configuration.io.registry.ConfigurationRegistryReader;
+import org.apache.maven.archiva.xml.ElementTextListClosure;
+import org.apache.maven.archiva.xml.XMLException;
+import org.apache.maven.archiva.xml.XMLReader;
 import org.codehaus.plexus.personality.plexus.lifecycle.phase.Initializable;
 import org.codehaus.plexus.personality.plexus.lifecycle.phase.InitializationException;
-import org.codehaus.plexus.registry.RegistryException;
-import org.codehaus.plexus.registry.commons.CommonsConfigurationRegistry;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import org.dom4j.Element;
+
+import java.net.URL;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
 
 /**
  * FileTypes 
  *
- * @author <a href="mailto:joakime@apache.org">Joakim Erdfelt</a>
+ * @author <a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>
  * @version $Id$
  * 
  * @plexus.component role="org.apache.maven.archiva.configuration.FileTypes"
@@ -50,16 +48,12 @@
 public class FileTypes
     implements Initializable
 {
-    private Logger log = LoggerFactory.getLogger(FileTypes.class);
-    
     public static final String ARTIFACTS = "artifacts";
-
+    
     public static final String AUTO_REMOVE = "auto-remove";
-
+    
     public static final String INDEXABLE_CONTENT = "indexable-content";
-
-    public static final String IGNORED = "ignored";
-
+    
     /**
      * @plexus.requirement
      */
@@ -68,7 +62,7 @@
     /**
      * Map of default values for the file types.
      */
-    private Map<String, List<String>> defaultTypeMap = new HashMap<String, List<String>>();
+    private Map defaultTypeMap = new HashMap();
 
     /**
      * <p>
@@ -87,7 +81,7 @@
      * @param id the id to lookup.
      * @return the list of patterns.
      */
-    public List<String> getFileTypePatterns( String id )
+    public List getFileTypePatterns( String id )
     {
         Configuration config = archivaConfiguration.getConfiguration();
         Predicate selectedFiletype = new FiletypeSelectionPredicate( id );
@@ -99,7 +93,7 @@ public List<String> getFileTypePatterns( String id )
             return filetype.getPatterns();
         }
 
-        List<String> defaultPatterns = defaultTypeMap.get( id );
+        List defaultPatterns = (List) defaultTypeMap.get( id );
 
         if ( CollectionUtils.isEmpty( defaultPatterns ) )
         {
@@ -112,59 +106,56 @@ public List<String> getFileTypePatterns( String id )
     public void initialize()
         throws InitializationException
     {
-        /* Initialize Default Type Map */
         defaultTypeMap.clear();
 
-        String errMsg = "Unable to load default archiva configuration for FileTypes: ";
-        
         try
         {
-            CommonsConfigurationRegistry commonsRegistry = new CommonsConfigurationRegistry();
-
-            // Configure commonsRegistry
-            Field fld = commonsRegistry.getClass().getDeclaredField( "configuration" );
-            fld.setAccessible( true );
-            fld.set( commonsRegistry, new CombinedConfiguration() );
-            commonsRegistry.enableLogging( new Slf4JPlexusLogger( FileTypes.class ) );
-            commonsRegistry.addConfigurationFromResource( "org/apache/maven/archiva/configuration/default-archiva.xml" );
-            
-            // Read configuration as it was intended.
-            ConfigurationRegistryReader configReader = new ConfigurationRegistryReader();
-            Configuration defaultConfig = configReader.read( commonsRegistry );
-
-            // Store the default file type declaration.
-            List<FileType> filetypes = defaultConfig.getRepositoryScanning().getFileTypes();
-            for ( FileType filetype : filetypes )
-            {
-                List<String> patterns = defaultTypeMap.get( filetype.getId() );
-                if ( patterns == null )
-                {
-                    patterns = new ArrayList<String>();
-                }
-                patterns.addAll( filetype.getPatterns() );
-
-                defaultTypeMap.put( filetype.getId(), patterns );
-            }
-        }
-        catch ( RegistryException e )
-        {
-            throw new InitializationException( errMsg + e.getMessage(), e );
-        }
-        catch ( SecurityException e )
-        {
-            throw new InitializationException( errMsg + e.getMessage(), e );
-        }
-        catch ( NoSuchFieldException e )
-        {
-            throw new InitializationException( errMsg + e.getMessage(), e );
+            URL defaultArchivaXml = this.getClass().getResource( "" );
+
+            XMLReader reader = new XMLReader( "configuration", defaultArchivaXml );
+            List resp = reader.getElementList( "//configuration/repositoryScanning/fileTypes/fileType" );
+
+            CollectionUtils.forAllDo( resp, new AddFileTypeToDefaultMap() );
         }
-        catch ( IllegalArgumentException e )
+        catch ( XMLException e )
         {
-            throw new InitializationException( errMsg + e.getMessage(), e );
+            throw new InitializationException( "Unable to setup default filetype maps.", e );
         }
-        catch ( IllegalAccessException e )
+    }
+
+    class AddFileTypeToDefaultMap
+        implements Closure
+    {
+        public void execute( Object input )
         {
-            throw new InitializationException( errMsg + e.getMessage(), e );
+            if ( !( input instanceof Element ) )
+            {
+                // Not an element. skip.
+                return;
+            }
+
+            Element elem = (Element) input;
+            if ( !StringUtils.equals( "fileType", elem.getName() ) )
+            {
+                // Not a 'fileType' element. skip.
+                return;
+            }
+
+            String id = elem.elementText( "id" );
+            Element patternsElem = elem.element( "patterns" );
+            if ( patternsElem == null )
+            {
+                // No patterns. skip.
+                return;
+            }
+
+            List patternElemList = patternsElem.elements( "pattern" );
+
+            ElementTextListClosure elemTextList = new ElementTextListClosure();
+            CollectionUtils.forAllDo( patternElemList, elemTextList );
+            List patterns = elemTextList.getList();
+
+            defaultTypeMap.put( id, patterns );
         }
     }
 }