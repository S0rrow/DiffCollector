diff --git a/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java b/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
index d956715cf..24bb4044a 100644
--- a/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
+++ b/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
@@ -18,13 +18,9 @@
  */
 package org.apache.aries.blueprint.namespace;
 
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.Reader;
 import java.lang.ref.Reference;
 import java.lang.ref.SoftReference;
 import java.net.URI;
-import java.net.URISyntaxException;
 import java.net.URL;
 import java.util.AbstractMap;
 import java.util.AbstractSet;
@@ -33,20 +29,24 @@ import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
-import java.util.HashSet;
 import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
-import java.util.Properties;
 import java.util.Set;
-import java.util.concurrent.locks.ReadWriteLock;
-import java.util.concurrent.locks.ReentrantReadWriteLock;
-import javax.xml.XMLConstants;
-import javax.xml.transform.Source;
-import javax.xml.transform.stream.StreamSource;
+import java.util.HashSet;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.Reader;
+
 import javax.xml.validation.Schema;
 import javax.xml.validation.SchemaFactory;
+import javax.xml.transform.stream.StreamSource;
+import javax.xml.transform.Source;
+import javax.xml.XMLConstants;
+
+import org.w3c.dom.ls.LSInput;
+import org.w3c.dom.ls.LSResourceResolver;
 
 import org.apache.aries.blueprint.NamespaceHandler;
 import org.apache.aries.blueprint.container.NamespaceHandlerRegistry;
@@ -59,20 +59,20 @@ import org.osgi.util.tracker.ServiceTracker;
 import org.osgi.util.tracker.ServiceTrackerCustomizer;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.w3c.dom.ls.LSInput;
-import org.w3c.dom.ls.LSResourceResolver;
+
 import org.xml.sax.SAXException;
+import org.xml.sax.SAXParseException;
 
 /**
  * Default implementation of the NamespaceHandlerRegistry.
- *
+ * 
  * This registry will track NamespaceHandler objects in the OSGi registry and make
  * them available, calling listeners when handlers are registered or unregistered.
  *
  * @version $Rev$, $Date$
  */
 public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, ServiceTrackerCustomizer {
-
+    
     public static final URI BLUEPRINT_NAMESPACE = URI.create("http://www.osgi.org/xmlns/blueprint/v1.0.0");
 
     public static final String NAMESPACE = "osgi.service.blueprint.namespace";
@@ -85,7 +85,6 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
     private final Map<Map<URI, NamespaceHandler>, Reference<Schema>> schemas = new LRUMap<Map<URI, NamespaceHandler>, Reference<Schema>>(10);
     private SchemaFactory schemaFactory;
     private List<NamespaceHandlerSetImpl> sets;
-    private final ReadWriteLock lock = new ReentrantReadWriteLock();
 
     public NamespaceHandlerRegistryImpl(BundleContext bundleContext) {
         this.bundleContext = bundleContext;
@@ -207,7 +206,7 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
             throw new IllegalArgumentException("NamespaceHandler service has an associated " + NAMESPACE + " property defined which can not be converted to an array of URI");
         }
     }
-
+    
     public synchronized NamespaceHandlerSet getNamespaceHandlers(Set<URI> uris, Bundle bundle) {
         NamespaceHandlerSetImpl s = new NamespaceHandlerSetImpl(uris, bundle);
         sets.add(s);
@@ -217,38 +216,26 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
     public void destroy() {
         tracker.close();
     }
-    public Schema getSchema(Map<URI, NamespaceHandler> handlers)
-            throws IOException, SAXException {
-        return getSchema(handlers, null, new Properties());
-    }
 
-    private Schema getSchema(Map<URI, NamespaceHandler> handlers,
-                             final Bundle bundle,
-                             final Properties schemaMap) throws IOException, SAXException {
+    public synchronized Schema getSchema(Map<URI, NamespaceHandler> handlers) throws IOException, SAXException {
+        Schema schema = null;
         // Find a schema that can handle all the requested namespaces
         // If it contains additional namespaces, it should not be a problem since
         // they won't be used at all
-        if (schemaMap == null || schemaMap.isEmpty()) {
-            try {
-                lock.readLock().lock();
-                for (Map<URI, NamespaceHandler> key : schemas.keySet()) {
-                    boolean found = true;
-                    for (URI uri : handlers.keySet()) {
-                        if (!handlers.get(uri).equals(key.get(uri))) {
-                            found = false;
-                            break;
-                        }
-                    }
-                    if (found) {
-                        return schemas.get(key).get();
-                    }
+        for (Map<URI, NamespaceHandler> key : schemas.keySet()) {
+            boolean found = true;
+            for (URI uri : handlers.keySet()) {
+                if (!handlers.get(uri).equals(key.get(uri))) {
+                    found = false;
+                    break;
                 }
-            } finally {
-                lock.readLock().unlock();
+            }
+            if (found) {
+                schema = schemas.get(key).get();
+                break;
             }
         }
-        try {
-            lock.writeLock().lock();
+        if (schema == null) {
             final List<StreamSource> schemaSources = new ArrayList<StreamSource>();
             try {
                 schemaSources.add(new StreamSource(getClass().getResourceAsStream("/org/apache/aries/blueprint/blueprint.xsd")));
@@ -262,66 +249,67 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
                         schemaSources.add(new StreamSource(url.openStream(), url.toExternalForm()));
                     }
                 }
-                for (Object ns : schemaMap.values()) {
-                    URL url = bundle.getResource(ns.toString());
-                    if (url == null) {
-                        LOGGER.warn("No URL is defined for schema " + ns + ". This schema will not be validated");
-                    } else {
-                        schemaSources.add(new StreamSource(url.openStream(), url.toExternalForm()));
-                    }
-                }
                 SchemaFactory factory = getSchemaFactory();
                 factory.setResourceResolver(new LSResourceResolver() {
-                    public LSInput resolveResource(String type,
-                                                   final String namespaceURI,
+                    public LSInput resolveResource(String type, 
+                                                   final String namespaceURI, 
                                                    final String publicId,
                                                    String systemId, String baseURI) {
-                        String loc = null;
-                        if (namespaceURI != null) {
-                            loc = schemaMap.getProperty(namespaceURI);
-                        }
-                        if (loc == null && publicId != null) {
-                            loc = schemaMap.getProperty(publicId);
-                        }
-                        if (loc == null && systemId != null) {
-                            loc = schemaMap.getProperty(systemId);
-                        }
-                        if (loc != null) {
-                            URL url = bundle.getResource(loc);
-                            if (url != null) {
-                                try {
-                                    StreamSource source
-                                            = new StreamSource(url.openStream(), url.toExternalForm());
-                                    schemaSources.add(source);
-                                    return new SourceLSInput(source, publicId, url);
-                                } catch (IOException e) {
-                                    throw new RuntimeException(e);
-                                }
-                            }
-                        }
+                        
                         URI uri = URI.create((String) namespaceURI);
                         Set<NamespaceHandler> hs = NamespaceHandlerRegistryImpl.this.handlers.get(uri);
                         if (hs == null) {
                             return null;
                         }
                         for (NamespaceHandler h : hs) {
-                            URL url = h.getSchemaLocation(namespaceURI);
+                            final URL url = h.getSchemaLocation(namespaceURI);
                             if (url != null) {
-                                // handling include-relative-path case
-                                if (systemId != null && !systemId.matches("^[a-z][-+.0-9a-z]*:.*")) {
-                                    try {
-                                        url = new URL(url, systemId);
-                                    } catch (Exception e) {
-                                        // ignore and use the given systemId
-                                    }
-                                }
-
-
                                 try {
-                                    final StreamSource source
-                                            = new StreamSource(url.openStream(), url.toExternalForm());
+                                    final StreamSource source 
+                                        = new StreamSource(url.openStream(), url.toExternalForm());
                                     schemaSources.add(source);
-                                    return new SourceLSInput(source, publicId, url);
+                                    return new LSInput() {
+                                        public Reader getCharacterStream() {
+                                            return null;
+                                        }
+                                        public void setCharacterStream(Reader characterStream) {
+                                        }
+                                        public InputStream getByteStream() {
+                                            return source.getInputStream();
+                                        }
+                                        public void setByteStream(InputStream byteStream) {
+                                        }
+                                        public String getStringData() {
+                                            return null;
+                                        }
+                                        public void setStringData(String stringData) {
+                                        }
+                                        public String getSystemId() {
+                                            return url.toExternalForm();
+                                        }
+                                        public void setSystemId(String systemId) {
+                                        }
+                                        public String getPublicId() {
+                                            return publicId;
+                                        }
+                                        public void setPublicId(String publicId) {
+                                        }
+                                        public String getBaseURI() {
+                                            return null;
+                                        }
+                                        public void setBaseURI(String baseURI) {
+                                        }
+                                        public String getEncoding() {
+                                            return null;
+                                        }
+                                        public void setEncoding(String encoding) {
+                                        }
+                                        public boolean getCertifiedText() {
+                                            return false;
+                                        }
+                                        public void setCertifiedText(boolean certifiedText) {
+                                        }
+                                    };
                                 } catch (IOException e) {
                                     throw new RuntimeException(e);
                                 }
@@ -329,9 +317,9 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
                         }
                         return null;
                     }
-
+                    
                 });
-                Schema schema = factory.newSchema(schemaSources.toArray(new Source[schemaSources.size()]));
+                schema = factory.newSchema(schemaSources.toArray(new Source[schemaSources.size()]));
                 // Remove schemas that are fully included
                 for (Iterator<Map<URI, NamespaceHandler>> iterator = schemas.keySet().iterator(); iterator.hasNext();) {
                     Map<URI, NamespaceHandler> key = iterator.next();
@@ -348,11 +336,7 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
                     }
                 }
                 // Add our new schema
-                if (schemaMap.isEmpty()) {
-                    //only cache non-custom schemas
-                    schemas.put(handlers, new SoftReference<Schema>(schema));
-                }
-                return schema;
+                schemas.put(handlers, new SoftReference<Schema>(schema));
             } finally {
                 for (StreamSource s : schemaSources) {
                     try {
@@ -362,62 +346,10 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
                     }
                 }
             }
-        } finally {
-            lock.writeLock().unlock();
         }
+        return schema;
     }
 
-    private class SourceLSInput implements LSInput {
-        StreamSource source;
-        URL systemId;
-        String publicId;
-        public SourceLSInput(StreamSource src, String pid, URL sys) {
-            source = src;
-            publicId = pid;
-            systemId = sys;
-        }
-        public Reader getCharacterStream() {
-            return null;
-        }
-        public void setCharacterStream(Reader characterStream) {
-        }
-        public InputStream getByteStream() {
-            return source.getInputStream();
-        }
-        public void setByteStream(InputStream byteStream) {
-        }
-        public String getStringData() {
-            return null;
-        }
-        public void setStringData(String stringData) {
-        }
-        public String getSystemId() {
-            return systemId.toExternalForm();
-        }
-        public void setSystemId(String systemId) {
-        }
-        public String getPublicId() {
-            return publicId;
-        }
-        public void setPublicId(String publicId) {
-        }
-        public String getBaseURI() {
-            return null;
-        }
-        public void setBaseURI(String baseURI) {
-        }
-        public String getEncoding() {
-            return null;
-        }
-        public void setEncoding(String encoding) {
-        }
-        public boolean getCertifiedText() {
-            return false;
-        }
-        public void setCertifiedText(boolean certifiedText) {
-        }
-    };
-
     protected synchronized void removeSchemasFor(NamespaceHandler handler) {
         List<Map<URI, NamespaceHandler>> keys = new ArrayList<Map<URI, NamespaceHandler>>();
         for (Map<URI, NamespaceHandler> key : schemas.keySet()) {
@@ -443,7 +375,6 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
         private final Bundle bundle;
         private final Set<URI> namespaces;
         private final Map<URI, NamespaceHandler> handlers;
-        private final Properties schemaMap = new Properties();
         private Schema schema;
 
         public NamespaceHandlerSetImpl(Set<URI> namespaces, Bundle bundle) {
@@ -454,32 +385,6 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
             for (URI ns : namespaces) {
                 findCompatibleNamespaceHandler(ns);
             }
-            URL url = bundle.getResource("OSGI-INF/blueprint/schema.map");
-            if (url != null) {
-                InputStream ins = null;
-                try {
-                    ins = url.openStream();
-                    schemaMap.load(ins);
-                } catch (IOException ex) {
-                    ex.printStackTrace();
-                    //ignore
-                } finally {
-                    if (ins != null) {
-                        try {
-                            ins.close();
-                        } catch (IOException e) {
-                            //ignore
-                        }
-                    }
-                }
-            }
-            for (Object ns : schemaMap.keySet()) {
-                try {
-                    this.namespaces.remove(new URI(ns.toString()));
-                } catch (URISyntaxException e) {
-                    //ignore
-                }
-            }
         }
 
         public boolean isComplete() {
@@ -499,7 +404,7 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
                 throw new IllegalStateException("NamespaceHandlerSet is not complete");
             }
             if (schema == null) {
-                schema = NamespaceHandlerRegistryImpl.this.getSchema(handlers, bundle, schemaMap);
+                schema = NamespaceHandlerRegistryImpl.this.getSchema(handlers);
             }
             return schema;
         }