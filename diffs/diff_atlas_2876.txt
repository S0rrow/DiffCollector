diff --git a/repository/src/main/java/org/apache/atlas/repository/store/graph/v1/AtlasRelationshipStoreV1.java b/repository/src/main/java/org/apache/atlas/repository/store/graph/v1/AtlasRelationshipStoreV1.java
index 8d9e4be84..8fe488852 100644
--- a/repository/src/main/java/org/apache/atlas/repository/store/graph/v1/AtlasRelationshipStoreV1.java
+++ b/repository/src/main/java/org/apache/atlas/repository/store/graph/v1/AtlasRelationshipStoreV1.java
@@ -20,18 +20,20 @@ package org.apache.atlas.repository.store.graph.v1;
 import org.apache.atlas.AtlasErrorCode;
 import org.apache.atlas.annotation.GraphTransaction;
 import org.apache.atlas.exception.AtlasBaseException;
-import org.apache.atlas.model.TypeCategory;
 import org.apache.atlas.model.instance.AtlasObjectId;
 import org.apache.atlas.model.instance.AtlasRelationship;
+import org.apache.atlas.model.typedef.AtlasRelationshipDef;
 import org.apache.atlas.model.typedef.AtlasRelationshipEndDef;
 import org.apache.atlas.repository.Constants;
 import org.apache.atlas.repository.RepositoryException;
 import org.apache.atlas.repository.graph.GraphHelper;
 import org.apache.atlas.repository.graphdb.AtlasEdge;
 import org.apache.atlas.repository.graphdb.AtlasVertex;
+import org.apache.atlas.repository.store.graph.AtlasRelationshipDefStore;
 import org.apache.atlas.repository.store.graph.AtlasRelationshipStore;
 import org.apache.atlas.type.AtlasEntityType;
 import org.apache.atlas.type.AtlasRelationshipType;
+import org.apache.atlas.type.AtlasStructType;
 import org.apache.atlas.type.AtlasStructType.AtlasAttribute;
 import org.apache.atlas.type.AtlasType;
 import org.apache.atlas.type.AtlasTypeRegistry;
@@ -44,18 +46,13 @@ import org.slf4j.LoggerFactory;
 import org.springframework.stereotype.Component;
 
 import javax.inject.Inject;
-import java.util.ArrayList;
 import java.util.Date;
-import java.util.HashSet;
-import java.util.List;
 import java.util.Map;
-import java.util.Set;
 import java.util.UUID;
 
 @Component
 public class AtlasRelationshipStoreV1 implements AtlasRelationshipStore {
     private static final Logger LOG = LoggerFactory.getLogger(AtlasRelationshipStoreV1.class);
-    private static final int DEFAULT_RELATIONSHIP_VERSION = 0;
 
     private final AtlasTypeRegistry    typeRegistry;
     private final EntityGraphRetriever entityRetriever;
@@ -76,16 +73,18 @@ public class AtlasRelationshipStoreV1 implements AtlasRelationshipStore {
 
         validateRelationship(relationship);
 
-        AtlasVertex       end1Vertex = getVertexFromEndPoint(relationship.getEnd1());
-        AtlasVertex       end2Vertex = getVertexFromEndPoint(relationship.getEnd2());
+        String      relationshipLabel = relationship.getRelationshipLabel();
+        AtlasVertex end1Vertex        = getVertexFromEndPoint(relationship.getEnd1());
+        AtlasVertex end2Vertex        = getVertexFromEndPoint(relationship.getEnd2());
+
         AtlasRelationship ret;
 
         // create relationship between two vertex
         try {
-            AtlasEdge relationshipEdge = getRelationshipEdge(end1Vertex, end2Vertex, relationship);
+            AtlasEdge relationshipEdge = getRelationshipEdge(end1Vertex, end2Vertex, relationshipLabel);
 
             if (relationshipEdge == null) {
-                relationshipEdge = createRelationshipEdge(end1Vertex, end2Vertex, relationship);
+                relationshipEdge = createRelationEdge(end1Vertex, end2Vertex, relationship);
 
                 AtlasRelationshipType relationType = typeRegistry.getRelationshipTypeByName(relationship.getTypeName());
 
@@ -98,6 +97,9 @@ public class AtlasRelationshipStoreV1 implements AtlasRelationshipStore {
                     }
                 }
 
+                // create legacy edges if mentioned in relationDef
+                createLegacyEdges(relationType.getRelationshipDef(), end1Vertex, end2Vertex);
+
                 ret = mapEdgeToAtlasRelationship(relationshipEdge);
 
             } else {
@@ -177,36 +179,49 @@ public class AtlasRelationshipStoreV1 implements AtlasRelationshipStore {
         }
 
         String                relationshipName = relationship.getTypeName();
-        String                end1TypeName     = getTypeNameFromObjectId(relationship.getEnd1());
-        String                end2TypeName     = getTypeNameFromObjectId(relationship.getEnd2());
         AtlasRelationshipType relationshipType = typeRegistry.getRelationshipTypeByName(relationshipName);
 
         if (relationshipType == null) {
-            throw new AtlasBaseException(AtlasErrorCode.INVALID_VALUE, "unknown relationship type'" + relationshipName + "'");
+            throw new AtlasBaseException(AtlasErrorCode.INVALID_VALUE, "unknown relationship '" + relationshipName + "'");
         }
 
-        if (relationship.getEnd1() == null || relationship.getEnd2() == null) {
-            throw new AtlasBaseException(AtlasErrorCode.INVALID_PARAMETERS, "end1/end2 is null");
+        AtlasObjectId end1 = relationship.getEnd1();
+
+        if (end1 == null) {
+            throw new AtlasBaseException(AtlasErrorCode.INVALID_PARAMETERS, "end1 is null");
         }
 
-        if (!relationshipType.getEnd1Type().isTypeOrSuperTypeOf(end1TypeName) &&
-                !relationshipType.getEnd2Type().isTypeOrSuperTypeOf(end1TypeName)) {
+        String end1TypeName = end1.getTypeName();
 
+        if (StringUtils.isBlank(end1TypeName)) {
+            end1TypeName = AtlasGraphUtilsV1.getTypeNameFromGuid(end1.getGuid());
+        }
+
+        if (!relationshipType.getEnd1Type().isTypeOrSuperTypeOf(end1TypeName)) {
             throw new AtlasBaseException(AtlasErrorCode.INVALID_RELATIONSHIP_END_TYPE, relationshipName,
-                                         relationshipType.getEnd2Type().getTypeName(), end1TypeName);
+                                         relationshipType.getEnd1Type().getTypeName(), end1TypeName);
+        }
+
+        AtlasObjectId end2 = relationship.getEnd2();
+
+        if (end2 == null) {
+            throw new AtlasBaseException(AtlasErrorCode.INVALID_PARAMETERS, "end2 is null");
         }
 
-        if (!relationshipType.getEnd2Type().isTypeOrSuperTypeOf(end2TypeName) &&
-                !relationshipType.getEnd1Type().isTypeOrSuperTypeOf(end2TypeName)) {
+        String end2TypeName = end2.getTypeName();
+
+        if (StringUtils.isBlank(end2TypeName)) {
+            end2TypeName = AtlasGraphUtilsV1.getTypeNameFromGuid(end2.getGuid());
+        }
 
+        if (!relationshipType.getEnd2Type().isTypeOrSuperTypeOf(end2TypeName)) {
             throw new AtlasBaseException(AtlasErrorCode.INVALID_RELATIONSHIP_END_TYPE, relationshipName,
-                                         relationshipType.getEnd1Type().getTypeName(), end2TypeName);
+                                         relationshipType.getEnd2Type().getTypeName(), end2TypeName);
         }
 
-        validateEnd(relationship.getEnd1());
-        validateEnd(relationship.getEnd2());
+        validateEnd(end1);
 
-        validateAndNormalize(relationship);
+        validateEnd(end2);
     }
 
     private void validateEnd(AtlasObjectId end) throws AtlasBaseException {
@@ -226,38 +241,15 @@ public class AtlasRelationshipStoreV1 implements AtlasRelationshipStore {
         }
     }
 
-    private void validateAndNormalize(AtlasRelationship relationship) throws AtlasBaseException {
-        List<String> messages = new ArrayList<>();
-
-        if (! AtlasTypeUtil.isValidGuid(relationship.getGuid())) {
-            throw new AtlasBaseException(AtlasErrorCode.RELATIONSHIP_GUID_NOT_FOUND, relationship.getGuid());
-        }
-
-        AtlasRelationshipType type = typeRegistry.getRelationshipTypeByName(relationship.getTypeName());
-
-        if (type == null) {
-            throw new AtlasBaseException(AtlasErrorCode.TYPE_NAME_INVALID, TypeCategory.RELATIONSHIP.name(), relationship.getTypeName());
-        }
-
-        type.validateValue(relationship, relationship.getTypeName(), messages);
-
-        if (!messages.isEmpty()) {
-            throw new AtlasBaseException(AtlasErrorCode.RELATIONSHIP_CRUD_INVALID_PARAMS, messages);
-        }
-
-        type.getNormalizedValue(relationship);
-    }
-
-    private AtlasEdge getRelationshipEdge(AtlasVertex fromVertex, AtlasVertex toVertex, AtlasRelationship relationship) {
-        String    relationshipLabel = getRelationshipEdgeLabel(fromVertex, toVertex, relationship);
-        AtlasEdge ret               = graphHelper.getEdgeForLabel(fromVertex, relationshipLabel);
+    private AtlasEdge getRelationshipEdge(AtlasVertex fromVertex, AtlasVertex toVertex, String relationshipLabel) {
+        AtlasEdge ret = graphHelper.getEdgeForLabel(fromVertex, relationshipLabel);
 
         if (ret != null) {
             AtlasVertex inVertex = ret.getInVertex();
 
             if (inVertex != null) {
                 if (!StringUtils.equals(AtlasGraphUtilsV1.getIdFromVertex(inVertex),
-                                        AtlasGraphUtilsV1.getIdFromVertex(toVertex))) {
+                                       AtlasGraphUtilsV1.getIdFromVertex(toVertex))) {
                     ret = null;
                 }
             }
@@ -266,10 +258,10 @@ public class AtlasRelationshipStoreV1 implements AtlasRelationshipStore {
         return ret;
     }
 
-    private int getRelationshipVersion(AtlasRelationship relationship) {
+    private int getRelationVersion(AtlasRelationship relationship) {
         Long ret = relationship != null ? relationship.getVersion() : null;
 
-        return (ret != null) ? ret.intValue() : DEFAULT_RELATIONSHIP_VERSION;
+        return (ret != null) ? ret.intValue() : 0;
     }
 
     private AtlasVertex getVertexFromEndPoint(AtlasObjectId endPoint) {
@@ -287,61 +279,36 @@ public class AtlasRelationshipStoreV1 implements AtlasRelationshipStore {
         return ret;
     }
 
-    private AtlasEdge createRelationshipEdge(AtlasVertex fromVertex, AtlasVertex toVertex, AtlasRelationship relationship)
-                                             throws RepositoryException {
+    private void createLegacyEdges(AtlasRelationshipDef relationshipDef, AtlasVertex fromVertex, AtlasVertex toVertex) throws RepositoryException {
+        if (relationshipDef != null) {
+            AtlasRelationshipEndDef endDef1 = relationshipDef.getEndDef1();
+            AtlasRelationshipEndDef endDef2 = relationshipDef.getEndDef2();
 
-        String    relationshipLabel = getRelationshipEdgeLabel(fromVertex, toVertex, relationship);
-        AtlasEdge ret               = graphHelper.getOrCreateEdge(fromVertex, toVertex, relationshipLabel);
-
-        // map additional properties to relationship edge
-        if (ret != null) {
-            final String guid = UUID.randomUUID().toString();
+            if (endDef1 != null && endDef1.hasLegacyRelation()) {
+                graphHelper.getOrCreateEdge(fromVertex, toVertex, endDef1.getLegacyLabel());
+            }
 
-            AtlasGraphUtilsV1.setProperty(ret, Constants.ENTITY_TYPE_PROPERTY_KEY, relationship.getTypeName());
-            AtlasGraphUtilsV1.setProperty(ret, Constants.GUID_PROPERTY_KEY, guid);
-            AtlasGraphUtilsV1.setProperty(ret, Constants.VERSION_PROPERTY_KEY, getRelationshipVersion(relationship));
+            if (endDef2 != null && endDef2.hasLegacyRelation()) {
+                graphHelper.getOrCreateEdge(toVertex, fromVertex, endDef2.getLegacyLabel());
+            }
         }
-
-        return ret;
     }
 
-    private String getRelationshipEdgeLabel(AtlasVertex fromVertex, AtlasVertex toVertex, AtlasRelationship relationship) {
+    private AtlasEdge createRelationEdge(AtlasVertex fromVertex, AtlasVertex toVertex, AtlasRelationship relationship) throws RepositoryException {
+        AtlasEdge ret = graphHelper.getOrCreateEdge(fromVertex, toVertex, relationship.getRelationshipLabel());
 
-        String                  ret                = relationship.getRelationshipLabel();
-        AtlasRelationshipType   relationshipType   = typeRegistry.getRelationshipTypeByName(relationship.getTypeName());
-        AtlasRelationshipEndDef endDef1            = relationshipType.getRelationshipDef().getEndDef1();
-        AtlasRelationshipEndDef endDef2            = relationshipType.getRelationshipDef().getEndDef2();
-        Set<String>             fromVertexTypes    = getTypeAndAllSuperTypes(AtlasGraphUtilsV1.getTypeName(fromVertex));
-        Set<String>             toVertexTypes      = getTypeAndAllSuperTypes(AtlasGraphUtilsV1.getTypeName(toVertex));
-
-        // validate entity type and all its supertypes contains relationshipDefs end type
-        // e.g. [ hive_process -> hive_table] -> [ Process -> DataSet ]
-        if (fromVertexTypes.contains(endDef1.getType()) && toVertexTypes.contains(endDef2.getType())) {
-            String         attributeName = endDef1.getName();
-            AtlasAttribute endAttribute  = relationshipType.getEnd1Type().getAttribute(attributeName);
-
-            if (endAttribute != null) {
-                ret = endAttribute.getRelationshipEdgeLabel();
-            }
-
-        } else if (fromVertexTypes.contains(endDef2.getType()) && toVertexTypes.contains(endDef1.getType())) {
-            String         attributeName = endDef2.getName();
-            AtlasAttribute endAttribute  = relationshipType.getEnd2Type().getAttribute(attributeName);
+        // add additional properties to edge
+        if (ret != null) {
+            final String guid = UUID.randomUUID().toString();
 
-            if (endAttribute != null) {
-                ret = endAttribute.getRelationshipEdgeLabel();
-            }
+            AtlasGraphUtilsV1.setProperty(ret, Constants.ENTITY_TYPE_PROPERTY_KEY, relationship.getTypeName());
+            AtlasGraphUtilsV1.setProperty(ret, Constants.GUID_PROPERTY_KEY, guid);
+            AtlasGraphUtilsV1.setProperty(ret, Constants.VERSION_PROPERTY_KEY, getRelationVersion(relationship));
         }
 
         return ret;
     }
 
-    public Set<String> getTypeAndAllSuperTypes(String entityTypeName) {
-        AtlasEntityType entityType = typeRegistry.getEntityTypeByName(entityTypeName);
-
-        return (entityType != null) ? entityType.getTypeAndAllSuperTypes() : new HashSet<String>();
-    }
-
     private AtlasRelationship mapEdgeToAtlasRelationship(AtlasEdge edge) throws AtlasBaseException {
         AtlasRelationship ret = new AtlasRelationship();
 
@@ -375,8 +342,6 @@ public class AtlasRelationshipStoreV1 implements AtlasRelationshipStore {
         relationship.setEnd1(new AtlasObjectId(GraphHelper.getGuid(end1Vertex), GraphHelper.getTypeName(end1Vertex)));
         relationship.setEnd2(new AtlasObjectId(GraphHelper.getGuid(end2Vertex), GraphHelper.getTypeName(end2Vertex)));
 
-        relationship.setLabel(edge.getLabel());
-
         return relationship;
     }
 
@@ -397,14 +362,4 @@ public class AtlasRelationshipStoreV1 implements AtlasRelationshipStore {
             relationship.setAttribute(attribute.getName(), attrValue);
         }
     }
-
-    private String getTypeNameFromObjectId(AtlasObjectId objectId) {
-        String typeName = objectId.getTypeName();
-
-        if (StringUtils.isBlank(typeName)) {
-            typeName = AtlasGraphUtilsV1.getTypeNameFromGuid(objectId.getGuid());
-        }
-
-        return typeName;
-    }
 }
\ No newline at end of file