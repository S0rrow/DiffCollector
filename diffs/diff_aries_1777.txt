diff --git a/src/main/java/org/apache/aries/util/tracker/RecursiveBundleTracker.java b/src/main/java/org/apache/aries/util/tracker/RecursiveBundleTracker.java
index e9e064919..7680d623d 100644
--- a/src/main/java/org/apache/aries/util/tracker/RecursiveBundleTracker.java
+++ b/src/main/java/org/apache/aries/util/tracker/RecursiveBundleTracker.java
@@ -18,7 +18,6 @@
  */
 package org.apache.aries.util.tracker;
 
-import org.apache.aries.util.tracker.hook.BundleHookBundleTracker;
 import org.osgi.framework.Bundle;
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.ServiceReference;
@@ -30,68 +29,61 @@ import org.osgi.util.tracker.BundleTrackerCustomizer;
  * events related to framework bundles, as it will automatically handle these events. In
  * order to use this class clients must create a subclass and implement the methods of the
  * <code>BundleTrackerCustomizer</code> interface. In spite of this, instances of this class
- * MUST NOT be passed as a parameter to any <code>BundleTracker</code>.</p>
- * <p/>
+ * MUST NOT be passed as a parameter to any <code>BundleTracker</code>.</p> 
+ * 
  * The model for using this is that classes should instantiate it
  * and pass it a 'vanilla' bundle tracker.
- *
  * @author pradine
+ *
  */
-public final class RecursiveBundleTracker {
-  private static final int COMPOSITE_BUNDLE_MASK =
-      Bundle.INSTALLED | Bundle.RESOLVED | Bundle.STARTING | Bundle.ACTIVE | Bundle.STOPPING;
-
-  private final BundleTracker tracker;
-
-  /**
-   * Constructor
-   *
-   * @param context   - The <code>BundleContext</code> against which the tracking is done.
-   * @param stateMask - The bit mask of the ORing of the bundle states to be tracked. The
-   *                  mask must contain the flags <code>Bundle.INSTALLED | Bundle.STARTING | Bundle.ACTIVE | Bundle.STOPPING</code>
-   *                  as a minimum.
-   * @throws IllegalArgumentException - If the provided bit mask does not contain required
-   *                                  flags
-   */
-  public RecursiveBundleTracker(BundleContext context, int stateMask, BundleTrackerCustomizer customizer) {
-    // We always need INSTALLED events so we can recursively listen to the frameworks
-    if ((stateMask & COMPOSITE_BUNDLE_MASK) != COMPOSITE_BUNDLE_MASK)
-      throw new IllegalArgumentException();
-
-    BundleTracker tracker = null;
-    try {
-      tracker = new BundleHookBundleTracker(context, stateMask, customizer);
-    } catch (Throwable e) {
+public final class RecursiveBundleTracker  {
+    private static final int COMPOSITE_BUNDLE_MASK =
+      Bundle.INSTALLED | Bundle.STARTING | Bundle.ACTIVE | Bundle.STOPPING;
+    
+    private final BundleTracker tracker;
+        
+    /**
+     * Constructor
+     * 
+     * @param context - The <code>BundleContext</code> against which the tracking is done.
+     * @param stateMask - The bit mask of the ORing of the bundle states to be tracked. The
+     * mask must contain the flags <code>Bundle.STARTING | Bundle.ACTIVE | Bundle.STOPPING</code>
+     * as a minimum.
+     * @throws IllegalArgumentException - If the provided bit mask does not contain required
+     * flags
+     */
+    public RecursiveBundleTracker(BundleContext context, int stateMask, BundleTrackerCustomizer customizer) {
+      // We always need INSTALLED events so we can recursively listen to the frameworks
+      if ((stateMask & COMPOSITE_BUNDLE_MASK) != COMPOSITE_BUNDLE_MASK)
+            throw new IllegalArgumentException();
+       if (areMultipleFrameworksAvailable(context)) {
+          tracker = new InternalRecursiveBundleTracker(context, stateMask, customizer);
+        } else {
+         tracker = new BundleTracker(context, stateMask, customizer);
+        }
     }
-    if (tracker == null && areMultipleFrameworksAvailable(context)) {
-      tracker = new InternalRecursiveBundleTracker(context, stateMask, customizer);
-    } else {
-      tracker = new BundleTracker(context, stateMask, customizer);
+    
+    private static boolean areMultipleFrameworksAvailable(BundleContext context) {
+      ServiceReference sr = context.getServiceReference("org.osgi.service.framework.CompositeBundleFactory");
+      return sr != null;
+    }
+    
+    /**
+     * Start tracking bundles that match the bit mask provided at creation time.
+     * 
+     * @see BundleTracker#open()
+     */
+    public void open() {
+        tracker.open();
+    }
+    
+    /**
+     * Stop the tracking of bundles
+     * 
+     * @see BundleTracker#close()
+     */
+    public void close() {
+        tracker.close();
     }
-    this.tracker = tracker;
-  }
-
-  private static boolean areMultipleFrameworksAvailable(BundleContext context) {
-    ServiceReference sr = context.getServiceReference("org.osgi.service.framework.CompositeBundleFactory");
-    return sr != null;
-  }
-
-  /**
-   * Start tracking bundles that match the bit mask provided at creation time.
-   *
-   * @see BundleTracker#open()
-   */
-  public void open() {
-    tracker.open();
-  }
-
-  /**
-   * Stop the tracking of bundles
-   *
-   * @see BundleTracker#close()
-   */
-  public void close() {
-    tracker.close();
-  }
 
 }