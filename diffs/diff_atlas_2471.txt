diff --git a/catalog/src/main/java/org/apache/atlas/catalog/TaxonomyResourceProvider.java b/catalog/src/main/java/org/apache/atlas/catalog/TaxonomyResourceProvider.java
index 3a5d9bed3..0d633361b 100644
--- a/catalog/src/main/java/org/apache/atlas/catalog/TaxonomyResourceProvider.java
+++ b/catalog/src/main/java/org/apache/atlas/catalog/TaxonomyResourceProvider.java
@@ -18,6 +18,7 @@
 
 package org.apache.atlas.catalog;
 
+import org.apache.atlas.catalog.definition.ResourceDefinition;
 import org.apache.atlas.catalog.definition.TaxonomyResourceDefinition;
 import org.apache.atlas.catalog.exception.*;
 import org.apache.atlas.catalog.query.AtlasQuery;
@@ -29,9 +30,10 @@ import java.util.*;
  */
 public class TaxonomyResourceProvider extends BaseResourceProvider implements ResourceProvider {
     private final TermResourceProvider termResourceProvider;
+    private static final ResourceDefinition resourceDefinition = new TaxonomyResourceDefinition();
 
     public TaxonomyResourceProvider(AtlasTypeSystem typeSystem) {
-        super(typeSystem, new TaxonomyResourceDefinition());
+        super(typeSystem);
         termResourceProvider = new TermResourceProvider(typeSystem);
     }
 
@@ -51,17 +53,15 @@ public class TaxonomyResourceProvider extends BaseResourceProvider implements Re
         return new Result(results);
     }
 
-    @Override
     public Result getResources(Request request) throws InvalidQueryException, ResourceNotFoundException {
         AtlasQuery atlasQuery = queryFactory.createTaxonomyQuery(request);
         return new Result(atlasQuery.execute());
     }
 
-    @Override
     public synchronized void createResource(Request request)
             throws InvalidPayloadException, ResourceAlreadyExistsException {
 
-        resourceDefinition.validateCreatePayload(request);
+        resourceDefinition.validate(request);
         ensureTaxonomyDoesntExist(request);
         typeSystem.createEntity(resourceDefinition, request);
     }
@@ -73,26 +73,15 @@ public class TaxonomyResourceProvider extends BaseResourceProvider implements Re
 
     @Override
     public void deleteResourceById(Request request) throws ResourceNotFoundException, InvalidPayloadException {
-        String taxonomyId = getResourceId(request);
+        request.addAdditionalSelectProperties(Collections.singleton("id"));
+        // will result in expected ResourceNotFoundException if taxonomy doesn't exist
+        Result taxonomyResult = getResourceById(request);
+        String taxonomyId = String.valueOf(taxonomyResult.getPropertyMaps().iterator().next().get("id"));
+
         getTermResourceProvider().deleteChildren(taxonomyId, new TermPath(request.<String>getProperty("name")));
         typeSystem.deleteEntity(resourceDefinition, request);
     }
 
-    @Override
-    public void updateResourceById(Request request) throws ResourceNotFoundException, InvalidPayloadException {
-        resourceDefinition.validateUpdatePayload(request);
-        AtlasQuery atlasQuery;
-        try {
-            atlasQuery = queryFactory.createTaxonomyQuery(request);
-        } catch (InvalidQueryException e) {
-            throw new CatalogRuntimeException("Unable to compile internal Term query: " + e, e);
-        }
-        if (atlasQuery.execute(request.getUpdateProperties()).isEmpty()) {
-            throw new ResourceNotFoundException(String.format("Taxonomy '%s' not found.",
-                    request.getQueryProperties().get("name")));
-        }
-    }
-
     private void ensureTaxonomyDoesntExist(Request request) throws ResourceAlreadyExistsException {
         try {
             getResourceById(request);
@@ -103,13 +92,6 @@ public class TaxonomyResourceProvider extends BaseResourceProvider implements Re
         }
     }
 
-    private String getResourceId(Request request) throws ResourceNotFoundException {
-        request.addAdditionalSelectProperties(Collections.singleton("id"));
-        // will result in expected ResourceNotFoundException if taxonomy doesn't exist
-        Result result = getResourceById(request);
-        return String.valueOf(result.getPropertyMaps().iterator().next().get("id"));
-    }
-
     protected TermResourceProvider getTermResourceProvider() {
         return termResourceProvider;
     }