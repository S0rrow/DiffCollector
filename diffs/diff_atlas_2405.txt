diff --git a/repository/src/main/java/org/apache/atlas/repository/typestore/GraphBackedTypeStore.java b/repository/src/main/java/org/apache/atlas/repository/typestore/GraphBackedTypeStore.java
index bf10c8d8d..eed297f9e 100755
--- a/repository/src/main/java/org/apache/atlas/repository/typestore/GraphBackedTypeStore.java
+++ b/repository/src/main/java/org/apache/atlas/repository/typestore/GraphBackedTypeStore.java
@@ -45,7 +45,6 @@ import org.apache.atlas.typesystem.types.StructTypeDefinition;
 import org.apache.atlas.typesystem.types.TraitType;
 import org.apache.atlas.typesystem.types.TypeSystem;
 import org.apache.atlas.typesystem.types.TypeUtils;
-import org.apache.atlas.typesystem.types.utils.TypesUtil;
 import org.codehaus.jettison.json.JSONException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -79,7 +78,7 @@ public class GraphBackedTypeStore implements ITypeStore {
     public void store(TypeSystem typeSystem, ImmutableList<String> typeNames) throws AtlasException {
         for (String typeName : typeNames) {
             IDataType dataType = typeSystem.getDataType(IDataType.class, typeName);
-            LOG.debug("Processing {}.{}.{} in type store", dataType.getTypeCategory(), dataType.getName(), dataType.getDescription());
+            LOG.debug("Processing {}.{} in type store", dataType.getTypeCategory(), dataType.getName());
             switch (dataType.getTypeCategory()) {
             case ENUM:
                 storeInGraph((EnumType) dataType);
@@ -87,14 +86,14 @@ public class GraphBackedTypeStore implements ITypeStore {
 
             case STRUCT:
                 StructType structType = (StructType) dataType;
-                storeInGraph(typeSystem, dataType.getTypeCategory(), dataType.getName(), dataType.getDescription(),
+                storeInGraph(typeSystem, dataType.getTypeCategory(), dataType.getName(),
                         ImmutableList.copyOf(structType.infoToNameMap.keySet()), ImmutableList.<String>of());
                 break;
 
             case TRAIT:
             case CLASS:
                 HierarchicalType type = (HierarchicalType) dataType;
-                storeInGraph(typeSystem, dataType.getTypeCategory(), dataType.getName(), type.getDescription(), type.immediateAttrs,
+                storeInGraph(typeSystem, dataType.getTypeCategory(), dataType.getName(), type.immediateAttrs,
                         type.superTypes);
                 break;
 
@@ -110,7 +109,7 @@ public class GraphBackedTypeStore implements ITypeStore {
     }
 
     private void storeInGraph(EnumType dataType) {
-        Vertex vertex = createVertex(dataType.getTypeCategory(), dataType.getName(), dataType.getDescription());
+        Vertex vertex = createVertex(dataType.getTypeCategory(), dataType.getName());
         List<String> values = new ArrayList<>(dataType.values().size());
         for (EnumValue enumValue : dataType.values()) {
             String key = getPropertyKey(dataType.getName(), enumValue.value);
@@ -133,13 +132,8 @@ public class GraphBackedTypeStore implements ITypeStore {
     }
 
     private void storeInGraph(TypeSystem typeSystem, DataTypes.TypeCategory category, String typeName,
-        ImmutableList<AttributeInfo> attributes, ImmutableList<String> superTypes) throws AtlasException {
-        storeInGraph(typeSystem, category, typeName, null, attributes, superTypes);
-    }
-
-    private void storeInGraph(TypeSystem typeSystem, DataTypes.TypeCategory category, String typeName, String typeDescription,
             ImmutableList<AttributeInfo> attributes, ImmutableList<String> superTypes) throws AtlasException {
-        Vertex vertex = createVertex(category, typeName, typeDescription);
+        Vertex vertex = createVertex(category, typeName);
         List<String> attrNames = new ArrayList<>();
         if (attributes != null) {
             for (AttributeInfo attribute : attributes) {
@@ -159,7 +153,7 @@ public class GraphBackedTypeStore implements ITypeStore {
         if (superTypes != null) {
             for (String superTypeName : superTypes) {
                 HierarchicalType superType = typeSystem.getDataType(HierarchicalType.class, superTypeName);
-                Vertex superVertex = createVertex(superType.getTypeCategory(), superTypeName, superType.getDescription());
+                Vertex superVertex = createVertex(superType.getTypeCategory(), superTypeName);
                 addEdge(vertex, superVertex, SUPERTYPE_EDGE_LABEL);
             }
         }
@@ -204,7 +198,7 @@ public class GraphBackedTypeStore implements ITypeStore {
 
         for (IDataType attrType : attrDataTypes) {
             if (!coreTypes.contains(attrType.getName())) {
-                Vertex attrVertex = createVertex(attrType.getTypeCategory(), attrType.getName(), attrType.getDescription());
+                Vertex attrVertex = createVertex(attrType.getTypeCategory(), attrType.getName());
                 String label = getEdgeLabel(vertexTypeName, attribute.name);
                 addEdge(vertex, attrVertex, label);
             }
@@ -232,8 +226,7 @@ public class GraphBackedTypeStore implements ITypeStore {
             Vertex vertex = (Vertex) vertices.next();
             DataTypes.TypeCategory typeCategory = vertex.getProperty(Constants.TYPE_CATEGORY_PROPERTY_KEY);
             String typeName = vertex.getProperty(Constants.TYPENAME_PROPERTY_KEY);
-            String typeDescription = vertex.getProperty(Constants.TYPEDESCRIPTION_PROPERTY_KEY);
-            LOG.info("Restoring type {}.{}.{}", typeCategory, typeName, typeDescription);
+            LOG.info("Restoring type {}.{}", typeCategory, typeName);
             switch (typeCategory) {
             case ENUM:
                 enums.add(getEnumType(vertex));
@@ -241,38 +234,37 @@ public class GraphBackedTypeStore implements ITypeStore {
 
             case STRUCT:
                 AttributeDefinition[] attributes = getAttributes(vertex, typeName);
-                structs.add(new StructTypeDefinition(typeName, typeDescription, attributes));
+                structs.add(new StructTypeDefinition(typeName, attributes));
                 break;
 
             case CLASS:
                 ImmutableList<String> superTypes = getSuperTypes(vertex);
                 attributes = getAttributes(vertex, typeName);
-                classTypes.add(new HierarchicalTypeDefinition(ClassType.class, typeName, typeDescription, superTypes, attributes));
+                classTypes.add(new HierarchicalTypeDefinition(ClassType.class, typeName, superTypes, attributes));
                 break;
 
             case TRAIT:
                 superTypes = getSuperTypes(vertex);
                 attributes = getAttributes(vertex, typeName);
-                traits.add(new HierarchicalTypeDefinition(TraitType.class, typeName, typeDescription, superTypes, attributes));
+                traits.add(new HierarchicalTypeDefinition(TraitType.class, typeName, superTypes, attributes));
                 break;
 
             default:
                 throw new IllegalArgumentException("Unhandled type category " + typeCategory);
             }
         }
-        return TypesUtil.getTypesDef(enums.build(), structs.build(), traits.build(), classTypes.build());
+        return TypeUtils.getTypesDef(enums.build(), structs.build(), traits.build(), classTypes.build());
     }
 
     private EnumTypeDefinition getEnumType(Vertex vertex) {
         String typeName = vertex.getProperty(Constants.TYPENAME_PROPERTY_KEY);
-        String typeDescription = vertex.getProperty(Constants.TYPEDESCRIPTION_PROPERTY_KEY);
         List<EnumValue> enumValues = new ArrayList<>();
         List<String> values = vertex.getProperty(getPropertyKey(typeName));
         for (String value : values) {
             String valueProperty = getPropertyKey(typeName, value);
             enumValues.add(new EnumValue(value, vertex.<Integer>getProperty(valueProperty)));
         }
-        return new EnumTypeDefinition(typeName, typeDescription, enumValues.toArray(new EnumValue[enumValues.size()]));
+        return new EnumTypeDefinition(typeName, enumValues.toArray(new EnumValue[enumValues.size()]));
     }
 
     private ImmutableList<String> getSuperTypes(Vertex vertex) {
@@ -323,23 +315,15 @@ public class GraphBackedTypeStore implements ITypeStore {
         return vertex;
     }
 
-    private Vertex createVertex(DataTypes.TypeCategory category, String typeName, String typeDescription) {
+    private Vertex createVertex(DataTypes.TypeCategory category, String typeName) {
         Vertex vertex = findVertex(category, typeName);
         if (vertex == null) {
             LOG.debug("Adding vertex {}{}", PROPERTY_PREFIX, typeName);
             vertex = titanGraph.addVertex(null);
-            addProperty(vertex, Constants.VERTEX_TYPE_PROPERTY_KEY, VERTEX_TYPE); // Mark as type vertex
+            addProperty(vertex, Constants.VERTEX_TYPE_PROPERTY_KEY, VERTEX_TYPE);  //Mark as type vertex
             addProperty(vertex, Constants.TYPE_CATEGORY_PROPERTY_KEY, category);
             addProperty(vertex, Constants.TYPENAME_PROPERTY_KEY, typeName);
         }
-        if (typeDescription != null) {
-            String oldDescription = getPropertyKey(Constants.TYPEDESCRIPTION_PROPERTY_KEY);
-            if (!typeDescription.equals(oldDescription)) {
-                addProperty(vertex, Constants.TYPEDESCRIPTION_PROPERTY_KEY, typeDescription);
-            }
-        } else {
-            LOG.debug(" type description is null ");
-        }
         return vertex;
     }
 }