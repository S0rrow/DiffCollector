diff --git a/repository/src/main/java/org/apache/atlas/repository/graph/GraphBackedSearchIndexer.java b/repository/src/main/java/org/apache/atlas/repository/graph/GraphBackedSearchIndexer.java
index f2e40f914..c385df35c 100755
--- a/repository/src/main/java/org/apache/atlas/repository/graph/GraphBackedSearchIndexer.java
+++ b/repository/src/main/java/org/apache/atlas/repository/graph/GraphBackedSearchIndexer.java
@@ -90,7 +90,6 @@ public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChang
         try {
             if (management.containsPropertyKey(Constants.VERTEX_TYPE_PROPERTY_KEY)) {
                 LOG.info("Global indexes already exist for graph");
-                management.commit();
                 return;
             }
 
@@ -101,32 +100,27 @@ public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChang
 
             // create a composite index for guid as its unique
             createIndexes(management, Constants.GUID_PROPERTY_KEY, String.class, true,
-                    Cardinality.SINGLE, true, true);
+                    Cardinality.SINGLE, true);
 
             // create a composite index for entity state
-            createIndexes(management, Constants.TIMESTAMP_PROPERTY_KEY, Long.class, false, Cardinality.SINGLE, true, true);
-
-            // create a mixed index for entity state. Set systemProperty flag deliberately to false
-            // so that it doesnt create a composite index which has issues with
-            // titan 0.5.4 - Refer https://groups.google.com/forum/#!searchin/aureliusgraphs/hemanth/aureliusgraphs/bx7T843mzXU/fjAsclx7GAAJ
-            createStateMixedIndex(management);
+            createIndexes(management, Constants.TIMESTAMP_PROPERTY_KEY, Long.class, false, Cardinality.SINGLE, true);
 
             // create a composite index for entity state
             createIndexes(management, Constants.MODIFICATION_TIMESTAMP_PROPERTY_KEY, Long.class, false,
-                    Cardinality.SINGLE, false, false);
+                    Cardinality.SINGLE, true);
 
             // create a composite and mixed index for type since it can be combined with other keys
             createIndexes(management, Constants.ENTITY_TYPE_PROPERTY_KEY, String.class, false, Cardinality.SINGLE,
-                    true, true);
+                    true);
 
             // create a composite and mixed index for type since it can be combined with other keys
             createIndexes(management, Constants.SUPER_TYPES_PROPERTY_KEY, String.class, false, Cardinality.SET,
-                    true, true);
+                    true);
 
             // create a composite and mixed index for traitNames since it can be combined with other
             // keys. Traits must be a set and not a list.
             createIndexes(management, Constants.TRAIT_NAMES_PROPERTY_KEY, String.class, false, Cardinality.SET,
-                    true, true);
+                    true);
 
             // Index for full text search
             createFullTextIndex(management);
@@ -142,16 +136,6 @@ public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChang
         }
     }
 
-    private void createStateMixedIndex(TitanManagement management) {
-        PropertyKey propertyKey = management.getPropertyKey(Constants.STATE_PROPERTY_KEY);
-        if (propertyKey == null) {
-            propertyKey = management.makePropertyKey(Constants.STATE_PROPERTY_KEY).dataType(String.class).cardinality(Cardinality.SINGLE)
-                .make();
-            }
-        enhanceMixedIndex(management, Constants.STATE_PROPERTY_KEY, String.class, Cardinality.SINGLE, propertyKey);
-    }
-
-
     private void createFullTextIndex(TitanManagement management) {
         PropertyKey fullText =
                 management.makePropertyKey(Constants.ENTITY_TEXT_PROPERTY_KEY).dataType(String.class).make();
@@ -165,11 +149,11 @@ public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChang
     private void createTypeStoreIndexes(TitanManagement management) {
         //Create unique index on typeName
         createIndexes(management, Constants.TYPENAME_PROPERTY_KEY, String.class, true, Cardinality.SINGLE,
-                true, true);
+                true);
 
         //create index on vertex type
         createIndexes(management, Constants.VERTEX_TYPE_PROPERTY_KEY, String.class, false, Cardinality.SINGLE,
-                true, true);
+                true);
     }
 
     /**
@@ -182,7 +166,7 @@ public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChang
     public void onAdd(Collection<? extends IDataType> dataTypes) throws AtlasException {
         TitanManagement management = titanGraph.getManagementSystem();
         for (IDataType dataType : dataTypes) {
-            LOG.debug("Creating indexes for type name={}, definition={}", dataType.getName(), dataType.getClass());
+            LOG.info("Creating indexes for type name={}, definition={}", dataType.getName(), dataType.getClass());
             try {
                 addIndexForType(management, dataType);
                 LOG.info("Index creation for type {} complete", dataType.getName());
@@ -235,22 +219,24 @@ public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChang
 
     private void createIndexForFields(TitanManagement management, IDataType dataType, Map<String, AttributeInfo> fields) {
         for (AttributeInfo field : fields.values()) {
-            createIndexForAttribute(management, dataType.getName(), field);
+            if (field.isIndexable) {
+                createIndexForAttribute(management, dataType.getName(), field);
+            }
         }
     }
 
     private void createIndexForAttribute(TitanManagement management, String typeName, AttributeInfo field) {
-        final String propertyName = GraphHelper.encodePropertyKey(typeName + "." + field.name);
+        final String propertyName = typeName + "." + field.name;
         switch (field.dataType().getTypeCategory()) {
         case PRIMITIVE:
             Cardinality cardinality = getCardinality(field.multiplicity);
             createIndexes(management, propertyName, getPrimitiveClass(field.dataType()), field.isUnique,
-                    cardinality, false, field.isIndexable);
+                    cardinality, false);
             break;
 
         case ENUM:
             cardinality = getCardinality(field.multiplicity);
-            createIndexes(management, propertyName, String.class, field.isUnique, cardinality, false, field.isIndexable);
+            createIndexes(management, propertyName, String.class, field.isUnique, cardinality, false);
             break;
 
         case ARRAY:
@@ -325,7 +311,7 @@ public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChang
 
     private PropertyKey createIndexes(TitanManagement management, String propertyName,
                                       Class propertyClass, boolean isUnique, Cardinality cardinality,
-                                      boolean createCompositeForAttribute, boolean createCompositeWithTypeandSuperTypes) {
+                                      boolean isSystemProperty) {
         PropertyKey propertyKey = management.getPropertyKey(propertyName);
         if (propertyKey == null) {
             propertyKey = management.makePropertyKey(propertyName).dataType(propertyClass).cardinality(cardinality)
@@ -333,67 +319,28 @@ public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChang
 
             enhanceMixedIndex(management, propertyName, propertyClass, cardinality, propertyKey);
 
-        }
-
-        if (createCompositeForAttribute) {
-            createCompositeIndex(management, propertyName, propertyClass, propertyKey, isUnique);
-        } else if (createCompositeWithTypeandSuperTypes) {
-            //Index with typename since typename+property key queries need to speed up
-            createCompositeIndexWithTypeName(management, propertyName, propertyClass, propertyKey);
-            createCompositeIndexWithSuperTypeName(management, propertyName, propertyClass, propertyKey);
+            if (isSystemProperty) {
+                createCompositeIndex(management, propertyName, propertyClass, propertyKey, isUnique);
+            } else if (isUnique) {
+                // send uniqueness as false because there can be many vertexes with the same property value
+                // but state can be active / deleted.
+                createCompositeIndex(management, propertyName, propertyClass, propertyKey, false);
+            }
         }
         return propertyKey;
     }
 
     private void createCompositeIndex(TitanManagement management, String propertyName, Class propertyClass,
-        PropertyKey propertyKey, boolean enforceUniqueness) {
+                                      PropertyKey propertyKey, boolean enforceUniqueness) {
         LOG.debug("Creating composite index for property {} of type {} ", propertyName,
-            propertyClass.getName());
-
-        TitanGraphIndex existingIndex = management.getGraphIndex(propertyName);
-        if ( existingIndex == null) {
-            TitanManagement.IndexBuilder indexBuilder =
+                propertyClass.getName());
+        TitanManagement.IndexBuilder indexBuilder =
                 management.buildIndex(propertyName, Vertex.class).addKey(propertyKey);
-            if (enforceUniqueness) {
-                LOG.debug("Enabling unique index for property {} of type {} ", propertyName,
-                    propertyClass.getName());
-                indexBuilder.unique();
-            }
-            indexBuilder.buildCompositeIndex();
-        }
-        LOG.info("Created composite index for property {} of type {} ", propertyName, propertyClass.getName());
-    }
-
-    private void createCompositeIndexWithTypeName(TitanManagement management, String propertyName, Class propertyClass,
-        PropertyKey propertyKey) {
-        createCompositeIndexWithSystemProperty(management, propertyName, propertyClass, propertyKey, Constants.ENTITY_TYPE_PROPERTY_KEY, Cardinality.SINGLE);
-    }
-
-    private void createCompositeIndexWithSuperTypeName(TitanManagement management, String propertyName, Class propertyClass,
-        PropertyKey propertyKey) {
-        createCompositeIndexWithSystemProperty(management, propertyName, propertyClass, propertyKey, Constants.SUPER_TYPES_PROPERTY_KEY, Cardinality.SET);
-    }
-
-    private void createCompositeIndexWithSystemProperty(TitanManagement management, String propertyName, Class propertyClass,
-        PropertyKey propertyKey, final String systemPropertyKey, Cardinality cardinality) {
-        LOG.debug("Creating composite index for property {} of type {} and {}", propertyName,
-            propertyClass.getName(), systemPropertyKey);
-        PropertyKey typePropertyKey = management.getPropertyKey(systemPropertyKey);
-        if (typePropertyKey == null) {
-            typePropertyKey = management.makePropertyKey(systemPropertyKey).
-                dataType(String.class).cardinality(cardinality)
-                .make();
-        }
-        final String indexName = propertyName + systemPropertyKey;
-        TitanGraphIndex existingIndex = management.getGraphIndex(indexName);
-
-        if ( existingIndex == null) {
-            TitanManagement.IndexBuilder indexBuilder =
-                management.buildIndex(indexName, Vertex.class).
-                    addKey(propertyKey).addKey(typePropertyKey);
-            indexBuilder.buildCompositeIndex();
-            LOG.info("Created composite index for property {} of type {} and {}", propertyName, propertyClass.getName(), systemPropertyKey);
+        if (enforceUniqueness) {
+            indexBuilder.unique();
         }
+        indexBuilder.buildCompositeIndex();
+        LOG.debug("Created composite index for property {} of type {} ", propertyName, propertyClass.getName());
     }
 
     private void enhanceMixedIndex(TitanManagement management, String propertyName, Class propertyClass,
@@ -403,7 +350,7 @@ public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChang
             LOG.debug("Creating backing index for property {} of type {} ", propertyName, propertyClass.getName());
             TitanGraphIndex vertexIndex = management.getGraphIndex(Constants.VERTEX_INDEX);
             management.addIndexKey(vertexIndex, propertyKey);
-            LOG.info("Created backing index for property {} of type {} ", propertyName, propertyClass.getName());
+            LOG.debug("Created backing index for property {} of type {} ", propertyName, propertyClass.getName());
         }
     }
 