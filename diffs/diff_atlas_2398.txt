diff --git a/addons/hive-bridge/src/test/java/org/apache/atlas/hive/hook/HiveHookIT.java b/addons/hive-bridge/src/test/java/org/apache/atlas/hive/hook/HiveHookIT.java
index 428df5264..5447de5d8 100755
--- a/addons/hive-bridge/src/test/java/org/apache/atlas/hive/hook/HiveHookIT.java
+++ b/addons/hive-bridge/src/test/java/org/apache/atlas/hive/hook/HiveHookIT.java
@@ -20,11 +20,11 @@ package org.apache.atlas.hive.hook;
 
 import org.apache.atlas.ApplicationProperties;
 import org.apache.atlas.AtlasClient;
+import org.apache.atlas.utils.ParamChecker;
 import org.apache.atlas.hive.bridge.HiveMetaStoreBridge;
 import org.apache.atlas.hive.model.HiveDataModelGenerator;
 import org.apache.atlas.hive.model.HiveDataTypes;
 import org.apache.atlas.typesystem.Referenceable;
-import org.apache.atlas.utils.ParamChecker;
 import org.apache.commons.configuration.Configuration;
 import org.apache.commons.lang.RandomStringUtils;
 import org.apache.commons.lang.StringEscapeUtils;
@@ -32,7 +32,6 @@ import org.apache.commons.lang.StringUtils;
 import org.apache.hadoop.hive.conf.HiveConf;
 import org.apache.hadoop.hive.metastore.TableType;
 import org.apache.hadoop.hive.ql.Driver;
-import org.apache.hadoop.hive.ql.processors.CommandProcessorResponse;
 import org.apache.hadoop.hive.ql.session.SessionState;
 import org.codehaus.jettison.json.JSONArray;
 import org.codehaus.jettison.json.JSONObject;
@@ -44,8 +43,6 @@ import org.testng.annotations.Test;
 import java.io.File;
 import java.util.Map;
 
-import static org.testng.Assert.assertEquals;
-
 public class HiveHookIT {
     public static final Logger LOG = org.slf4j.LoggerFactory.getLogger(HiveHookIT.class);
 
@@ -70,10 +67,8 @@ public class HiveHookIT {
     }
 
     private void runCommand(String cmd) throws Exception {
-        LOG.debug("Running command '{}'", cmd);
         ss.setCommandType(null);
-        CommandProcessorResponse response = driver.run(cmd);
-        assertEquals(response.getResponseCode(), 0);
+        driver.run(cmd);
     }
 
     @Test
@@ -259,8 +254,8 @@ public class HiveHookIT {
         assertProcessIsRegistered(query);
     }
 
-    @Test
-    public void testAlterTableRename() throws Exception {
+    @Test(enabled = false)
+    public void testAlterTable() throws Exception {
         String tableName = createTable();
         String newName = tableName();
         String query = "alter table " + tableName + " rename to " + newName;
@@ -270,8 +265,8 @@ public class HiveHookIT {
         assertTableIsNotRegistered(DEFAULT_DB, tableName);
     }
 
-    @Test
-    public void testAlterViewRename() throws Exception {
+    @Test(enabled = false)
+    public void testAlterView() throws Exception {
         String tableName = createTable();
         String viewName = tableName();
         String newName = tableName();
@@ -332,8 +327,8 @@ public class HiveHookIT {
 
         LOG.debug("Searching for partition of {}.{} with values {}", dbName, tableName, value);
         String dslQuery = String.format("%s as p where values = ['%s'], table where tableName = '%s', "
-                        + "db where name = '%s' and clusterName = '%s' select p", typeName, value,
-                tableName.toLowerCase(), dbName.toLowerCase(), CLUSTER_NAME);
+                               + "db where name = '%s' and clusterName = '%s' select p", typeName, value,
+                            tableName.toLowerCase(), dbName.toLowerCase(), CLUSTER_NAME);
 
         return assertEntityIsRegistered(dslQuery, "p");
     }
@@ -390,13 +385,6 @@ public class HiveHookIT {
         Assert.assertTrue(vertices.has(table2Id));
     }
 
-    //For ATLAS-448
-    @Test
-    public void testNoopOperation() throws Exception {
-        runCommand("show compactions");
-        runCommand("show transactions");
-    }
-
     public interface Predicate {
 
         /**