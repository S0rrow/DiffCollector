diff --git a/repository/src/main/java/org/apache/atlas/repository/store/graph/v1/UniqAttrBasedEntityResolver.java b/repository/src/main/java/org/apache/atlas/repository/store/graph/v1/UniqAttrBasedEntityResolver.java
index f21896d19..8025f1e4b 100644
--- a/repository/src/main/java/org/apache/atlas/repository/store/graph/v1/UniqAttrBasedEntityResolver.java
+++ b/repository/src/main/java/org/apache/atlas/repository/store/graph/v1/UniqAttrBasedEntityResolver.java
@@ -20,9 +20,9 @@ package org.apache.atlas.repository.store.graph.v1;
 import com.google.common.base.Optional;
 import org.apache.atlas.AtlasErrorCode;
 import org.apache.atlas.exception.AtlasBaseException;
-import org.apache.atlas.model.TypeCategory;
 import org.apache.atlas.model.instance.AtlasEntity;
 import org.apache.atlas.model.instance.AtlasObjectId;
+import org.apache.atlas.model.typedef.AtlasStructDef;
 import org.apache.atlas.repository.Constants;
 import org.apache.atlas.repository.graph.GraphHelper;
 import org.apache.atlas.repository.graphdb.AtlasVertex;
@@ -32,20 +32,21 @@ import org.apache.atlas.type.AtlasEntityType;
 import org.apache.atlas.type.AtlasStructType;
 import org.apache.atlas.type.AtlasTypeRegistry;
 import org.apache.atlas.typesystem.exception.EntityNotFoundException;
-import org.apache.commons.collections.MapUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import javax.inject.Inject;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Map;
 
 public class UniqAttrBasedEntityResolver implements EntityResolver {
+
     private static final Logger LOG = LoggerFactory.getLogger(UniqAttrBasedEntityResolver.class);
 
-    private final GraphHelper           graphHelper = GraphHelper.getInstance();
-    private final AtlasTypeRegistry     typeRegistry;
+    private final AtlasTypeRegistry typeRegistry;
+
+    private final GraphHelper graphHelper = GraphHelper.getInstance();
+
     private EntityGraphDiscoveryContext context;
 
     @Inject
@@ -54,41 +55,41 @@ public class UniqAttrBasedEntityResolver implements EntityResolver {
     }
 
     @Override
-    public void init(EntityGraphDiscoveryContext context) throws AtlasBaseException {
-        this.context = context;
+    public void init(EntityGraphDiscoveryContext entities) throws AtlasBaseException {
+        this.context = entities;
     }
 
     @Override
     public EntityGraphDiscoveryContext resolveEntityReferences() throws AtlasBaseException {
-        if (context == null) {
+
+        if ( context == null) {
             throw new AtlasBaseException(AtlasErrorCode.INTERNAL_ERROR, "Unique attribute based entity resolver not initialized");
         }
 
         //Resolve attribute references
-        List<AtlasObjectId> resolvedReferences = new ArrayList<>();
+        List<AtlasEntity> resolvedReferences = new ArrayList<>();
 
-        for (AtlasObjectId entityId : context.getUnresolvedIdsByUniqAttribs()) {
+        for (AtlasEntity entity : context.getUnResolvedEntityReferences()) {
             //query in graph repo that given unique attribute - check for deleted also?
-            Optional<AtlasVertex> vertex = resolveByUniqueAttribute(entityId);
-
+            Optional<AtlasVertex> vertex = resolveByUniqueAttribute(entity);
             if (vertex.isPresent()) {
-                context.addResolvedId(entityId, vertex.get());
-                resolvedReferences.add(entityId);
+                context.addRepositoryResolvedReference(new AtlasObjectId(entity.getTypeName(), entity.getGuid()), vertex.get());
+                resolvedReferences.add(entity);
             }
         }
 
-        context.removeUnresolvedIdsByUniqAttribs(resolvedReferences);
+        context.removeUnResolvedEntityReferences(resolvedReferences);
+
+        if (context.getUnResolvedEntityReferences().size() > 0) {
+            throw new AtlasBaseException(AtlasErrorCode.INSTANCE_BY_UNIQUE_ATTRIBUTE_NOT_FOUND, context.getUnResolvedEntityReferences().toString());
+        }
 
         //Resolve root references
         for (AtlasEntity entity : context.getRootEntities()) {
-            AtlasObjectId entityId = entity.getAtlasObjectId();
-
-            if (!context.isResolvedId(entityId) ) {
+            if ( !context.isResolved(entity.getGuid()) ) {
                 Optional<AtlasVertex> vertex = resolveByUniqueAttribute(entity);
-
                 if (vertex.isPresent()) {
-                    context.addResolvedId(entityId, vertex.get());
-                    context.removeUnResolvedId(entityId);
+                    context.addRepositoryResolvedReference(new AtlasObjectId(entity.getTypeName(), entity.getGuid()), vertex.get());
                 }
             }
         }
@@ -97,66 +98,27 @@ public class UniqAttrBasedEntityResolver implements EntityResolver {
     }
 
     Optional<AtlasVertex> resolveByUniqueAttribute(AtlasEntity entity) throws AtlasBaseException {
-        AtlasEntityType entityType = typeRegistry.getEntityTypeByName(entity.getTypeName());
-
-        if (entityType == null) {
-            throw new AtlasBaseException(AtlasErrorCode.TYPE_NAME_INVALID, TypeCategory.ENTITY.name(), entity.getTypeName());
-        }
-
+        AtlasEntityType entityType = (AtlasEntityType) typeRegistry.getType(entity.getTypeName());
         for (AtlasStructType.AtlasAttribute attr : entityType.getAllAttributes().values()) {
             if (attr.getAttributeDef().getIsUnique()) {
-                Object attrVal = entity.getAttribute(attr.getName());
-
-                if (attrVal == null) {
-                    continue;
-                }
-
-                Optional<AtlasVertex> vertex = findByTypeAndQualifiedName(entityType.getTypeName(), attr.getQualifiedAttributeName(), attrVal);
-
-                if (LOG.isDebugEnabled()) {
-                    LOG.debug("Found vertex by unique attribute : " + attr.getQualifiedAttributeName() + "=" + attrVal);
-                }
-
-                if (!vertex.isPresent()) {
-                    vertex = findBySuperTypeAndQualifiedName(entityType.getTypeName(), attr.getQualifiedAttributeName(), attrVal);
-                }
-
-                if (vertex.isPresent()) {
-                    return vertex;
-                }
-            }
-        }
-
-        return Optional.absent();
-    }
-
-    Optional<AtlasVertex> resolveByUniqueAttribute(AtlasObjectId entityId) throws AtlasBaseException {
-        AtlasEntityType entityType = typeRegistry.getEntityTypeByName(entityId.getTypeName());
-
-        if (entityType == null) {
-            throw new AtlasBaseException(AtlasErrorCode.TYPE_NAME_INVALID, TypeCategory.ENTITY.name(), entityId.getTypeName());
-        }
-
-        final Map<String, Object> uniqueAttributes = entityId.getUniqueAttributes();
-        if (MapUtils.isNotEmpty(uniqueAttributes)) {
-            for (String attrName : uniqueAttributes.keySet()) {
-                AtlasStructType.AtlasAttribute attr = entityType.getAttribute(attrName);
-
-                if (attr.getAttributeDef().getIsUnique()) {
-                    Object attrVal = uniqueAttributes.get(attr.getName());
-
-                    if (attrVal == null) {
-                        continue;
-                    }
-
-                    Optional<AtlasVertex> vertex = findByTypeAndQualifiedName(entityId.getTypeName(), attr.getQualifiedAttributeName(), attrVal);
-
-                    if (!vertex.isPresent()) {
-                        vertex = findBySuperTypeAndQualifiedName(entityId.getTypeName(), attr.getQualifiedAttributeName(), attrVal);
-                    }
-
-                    if (vertex.isPresent()) {
-                        return vertex;
+                Object attrVal = entity.getAttribute(attr.getAttributeDef().getName());
+                if (attrVal != null) {
+                    String qualifiedAttrName = attr.getQualifiedAttributeName();
+                    AtlasVertex vertex = null;
+                    try {
+                        vertex = graphHelper.findVertex(qualifiedAttrName, attrVal,
+                            Constants.ENTITY_TYPE_PROPERTY_KEY, entityType.getTypeName(),
+                            Constants.STATE_PROPERTY_KEY, AtlasEntity.Status.ACTIVE
+                                .name());
+
+                        if (LOG.isDebugEnabled()) {
+                            LOG.debug("Found vertex by unique attribute : " + qualifiedAttrName + "=" + attrVal);
+                        }
+                        if (vertex != null) {
+                            return Optional.of(vertex);
+                        }
+                    } catch (EntityNotFoundException e) {
+                        //Ignore if not found
                     }
                 }
             }
@@ -164,46 +126,6 @@ public class UniqAttrBasedEntityResolver implements EntityResolver {
         return Optional.absent();
     }
 
-    Optional<AtlasVertex> findByTypeAndQualifiedName(String typeName, String qualifiedAttrName, Object attrVal) {
-        AtlasVertex vertex = null;
-        try {
-            vertex = graphHelper.findVertex(qualifiedAttrName, attrVal,
-                Constants.ENTITY_TYPE_PROPERTY_KEY, typeName,
-                Constants.STATE_PROPERTY_KEY, AtlasEntity.Status.ACTIVE
-                    .name());
-
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Found vertex by unique attribute and type {} {} ", qualifiedAttrName + "=" + attrVal, typeName);
-            }
-            if (vertex != null) {
-                return Optional.of(vertex);
-            }
-        } catch (EntityNotFoundException e) {
-            //Ignore if not found
-        }
-        return Optional.absent();
-    }
-
-    Optional<AtlasVertex> findBySuperTypeAndQualifiedName(String typeName, String qualifiedAttrName, Object attrVal) {
-        AtlasVertex vertex = null;
-        try {
-            vertex = graphHelper.findVertex(qualifiedAttrName, attrVal,
-                Constants.SUPER_TYPES_PROPERTY_KEY, typeName,
-                Constants.STATE_PROPERTY_KEY, AtlasEntity.Status.ACTIVE
-                    .name());
-
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Found vertex by unique attribute and supertype {} ", qualifiedAttrName + "=" + attrVal, typeName);
-            }
-            if (vertex != null) {
-                return Optional.of(vertex);
-            }
-        } catch (EntityNotFoundException e) {
-            //Ignore if not found
-        }
-        return Optional.absent();
-    }
-
     @Override
     public void cleanUp() {
         //Nothing to cleanup