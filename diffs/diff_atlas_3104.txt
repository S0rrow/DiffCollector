diff --git a/repository/src/main/java/org/apache/atlas/repository/graph/GraphBackedSearchIndexer.java b/repository/src/main/java/org/apache/atlas/repository/graph/GraphBackedSearchIndexer.java
index 1cfa202a9..35dbf6c47 100755
--- a/repository/src/main/java/org/apache/atlas/repository/graph/GraphBackedSearchIndexer.java
+++ b/repository/src/main/java/org/apache/atlas/repository/graph/GraphBackedSearchIndexer.java
@@ -34,66 +34,56 @@ import org.apache.atlas.model.typedef.AtlasEnumDef;
 import org.apache.atlas.model.typedef.AtlasStructDef;
 import org.apache.atlas.model.typedef.AtlasStructDef.AtlasAttributeDef;
 import org.apache.atlas.repository.Constants;
+import org.apache.atlas.repository.IndexCreationException;
 import org.apache.atlas.repository.IndexException;
 import org.apache.atlas.repository.RepositoryException;
 import org.apache.atlas.repository.graphdb.AtlasCardinality;
-import org.apache.atlas.repository.graphdb.AtlasEdgeDirection;
 import org.apache.atlas.repository.graphdb.AtlasGraph;
 import org.apache.atlas.repository.graphdb.AtlasGraphIndex;
 import org.apache.atlas.repository.graphdb.AtlasGraphManagement;
 import org.apache.atlas.repository.graphdb.AtlasPropertyKey;
-import org.apache.atlas.repository.store.graph.v2.AtlasGraphUtilsV2;
-import org.apache.atlas.type.AtlasArrayType;
 import org.apache.atlas.type.AtlasClassificationType;
 import org.apache.atlas.type.AtlasEntityType;
 import org.apache.atlas.type.AtlasEnumType;
-import org.apache.atlas.type.AtlasMapType;
-import org.apache.atlas.type.AtlasRelationshipType;
 import org.apache.atlas.type.AtlasStructType;
 import org.apache.atlas.type.AtlasType;
 import org.apache.atlas.type.AtlasTypeRegistry;
 import org.apache.atlas.type.AtlasTypeUtil;
+import org.apache.atlas.typesystem.types.AttributeInfo;
+import org.apache.atlas.typesystem.types.ClassType;
+import org.apache.atlas.typesystem.types.DataTypes;
+import org.apache.atlas.typesystem.types.IDataType;
+import org.apache.atlas.typesystem.types.Multiplicity;
+import org.apache.atlas.typesystem.types.StructType;
+import org.apache.atlas.typesystem.types.TraitType;
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.configuration.Configuration;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.stereotype.Component;
-import org.springframework.core.annotation.Order;
 
 import javax.inject.Inject;
 import java.math.BigDecimal;
 import java.math.BigInteger;
 import java.util.ArrayList;
-import java.util.Arrays;
+import java.util.Collection;
 import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
 import java.util.List;
-import java.util.Set;
+import java.util.Map;
 
 import static org.apache.atlas.model.typedef.AtlasBaseTypeDef.*;
-import static org.apache.atlas.repository.Constants.*;
-import static org.apache.atlas.repository.graphdb.AtlasCardinality.LIST;
-import static org.apache.atlas.repository.graphdb.AtlasCardinality.SET;
-import static org.apache.atlas.repository.graphdb.AtlasCardinality.SINGLE;
-import static org.apache.atlas.repository.store.graph.v2.AtlasGraphUtilsV2.isReference;
-import static org.apache.atlas.type.AtlasStructType.UNIQUE_ATTRIBUTE_SHADE_PROPERTY_PREFIX;
-import static org.apache.atlas.type.AtlasTypeUtil.isArrayType;
-import static org.apache.atlas.type.AtlasTypeUtil.isMapType;
 
 
 /**
  * Adds index for properties of a given type when its added before any instances are added.
  */
 @Component
-@Order(1)
-public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChangeHandler, TypeDefChangeListener {
+public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChangeHandler,
+        TypeDefChangeListener {
 
     private static final Logger LOG = LoggerFactory.getLogger(GraphBackedSearchIndexer.class);
-
-    private static final String VERTEX_ID_IN_IMPORT_KEY = "__vIdInImport";
-    private static final String EDGE_ID_IN_IMPORT_KEY   = "__eIdInImport";
-    private static final List<Class> INDEX_EXCLUSION_CLASSES = new ArrayList() {
+    
+    private static final List<Class> VERTEX_INDEX_EXCLUSIONS = new ArrayList() {
         {
             add(Boolean.class);
             add(BigDecimal.class);
@@ -106,19 +96,14 @@ public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChang
 
     //allows injection of a dummy graph for testing
     private IAtlasGraphProvider provider;
-
-    private boolean     recomputeIndexedKeys = true;
-    private Set<String> vertexIndexKeys      = new HashSet<>();
-
-    public enum UniqueKind { NONE, GLOBAL_UNIQUE, PER_TYPE_UNIQUE }
-
+    
     @Inject
     public GraphBackedSearchIndexer(AtlasTypeRegistry typeRegistry) throws AtlasException {
         this(new AtlasGraphProvider(), ApplicationProperties.get(), typeRegistry);
     }
 
     @VisibleForTesting
-    GraphBackedSearchIndexer(IAtlasGraphProvider provider, Configuration configuration, AtlasTypeRegistry typeRegistry)
+    GraphBackedSearchIndexer( IAtlasGraphProvider provider, Configuration configuration, AtlasTypeRegistry typeRegistry)
             throws IndexException, RepositoryException {
         this.provider = provider;
         this.typeRegistry = typeRegistry;
@@ -128,187 +113,138 @@ public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChang
     }
 
     /**
-     * Initialize global indices for JanusGraph on server activation.
-     *
-     * Since the indices are shared state, we need to do this only from an active instance.
+     * Initializes the indices for the graph - create indices for Global AtlasVertex Keys
      */
-    @Override
-    public void instanceIsActive() throws AtlasException {
-        LOG.info("Reacting to active: initializing index");
-        try {
-            initialize();
-        } catch (RepositoryException | IndexException e) {
-            throw new AtlasException("Error in reacting to active on initialization", e);
-        }
-    }
-
-    @Override
-    public void instanceIsPassive() {
-        LOG.info("Reacting to passive state: No action right now.");
-    }
-
-    @Override
-    public int getHandlerOrder() {
-        return HandlerOrder.GRAPH_BACKED_SEARCH_INDEXER.getOrder();
+    private void initialize() throws RepositoryException, IndexException {
+        
+        initialize(provider.get());    
     }
+    
+    /**
+     * Initializes the indices for the graph - create indices for Global AtlasVertex Keys
+     */
+    private void initialize(AtlasGraph graph) throws RepositoryException, IndexException {
+        AtlasGraphManagement management = graph.getManagementSystem();
 
-    @Override
-    public void onChange(ChangedTypeDefs changedTypeDefs) throws AtlasBaseException {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("Processing changed typedefs {}", changedTypeDefs);
-        }
-        AtlasGraphManagement management = null;
         try {
-            management = provider.get().getManagementSystem();
-
-            // Update index for newly created types
-            if (CollectionUtils.isNotEmpty(changedTypeDefs.getCreateTypeDefs())) {
-                for (AtlasBaseTypeDef typeDef : changedTypeDefs.getCreateTypeDefs()) {
-                    updateIndexForTypeDef(management, typeDef);
-                }
+            if (management.containsPropertyKey(Constants.VERTEX_TYPE_PROPERTY_KEY)) {
+                LOG.info("Global indexes already exist for graph");
+                management.commit();
+                return;
             }
 
-            // Update index for updated types
-            if (CollectionUtils.isNotEmpty(changedTypeDefs.getUpdatedTypeDefs())) {
-                for (AtlasBaseTypeDef typeDef : changedTypeDefs.getUpdatedTypeDefs()) {
-                    updateIndexForTypeDef(management, typeDef);
-                }
-            }
+            /* This is called only once, which is the first time Atlas types are made indexable .*/
+            LOG.info("Indexes do not exist, Creating indexes for graph.");
 
-            // Invalidate the property key for deleted types
-            if (CollectionUtils.isNotEmpty(changedTypeDefs.getDeletedTypeDefs())) {
-                for (AtlasBaseTypeDef typeDef : changedTypeDefs.getDeletedTypeDefs()) {
-                    cleanupIndices(management, typeDef);
-                }
-            }
+            
+            management.createVertexIndex(Constants.VERTEX_INDEX, Constants.BACKING_INDEX, Collections.<AtlasPropertyKey>emptyList());              
+            management.createEdgeIndex(Constants.EDGE_INDEX, Constants.BACKING_INDEX);
 
-            //Commit indexes
-            commit(management);
-        } catch (RepositoryException | IndexException e) {
-            LOG.error("Failed to update indexes for changed typedefs", e);
-            attemptRollback(changedTypeDefs, management);
-        }
+            // create a composite index for guid as its unique
+            createIndexes(management, Constants.GUID_PROPERTY_KEY, String.class, true,
+                    AtlasCardinality.SINGLE, true, true);
 
-    }
+            // Add creation_timestamp property to Vertex Index (mixed index)
+            createIndexes(management, Constants.TIMESTAMP_PROPERTY_KEY, Long.class, false, AtlasCardinality.SINGLE, false, false);
 
-    public Set<String> getVertexIndexKeys() {
-        if (recomputeIndexedKeys) {
-            AtlasGraphManagement management = null;
+            // Add modification_timestamp property to Vertex Index (mixed index)
+            createIndexes(management, Constants.MODIFICATION_TIMESTAMP_PROPERTY_KEY, Long.class, false,
+                    AtlasCardinality.SINGLE, false, false);
 
-            try {
-                management = provider.get().getManagementSystem();
 
-                if (management != null) {
-                    AtlasGraphIndex vertexIndex = management.getGraphIndex(VERTEX_INDEX);
+            // create a mixed index for entity state. Set systemProperty flag deliberately to false
+            // so that it doesnt create a composite index which has issues with
+            // titan 0.5.4 - Refer https://groups.google.com/forum/#!searchin/aureliusgraphs/hemanth/aureliusgraphs/bx7T843mzXU/fjAsclx7GAAJ
+            createIndexes(management, Constants.STATE_PROPERTY_KEY, String.class, false, AtlasCardinality.SINGLE, false, false);
 
-                    if (vertexIndex != null) {
-                        recomputeIndexedKeys = false;
+            // Create a composite and mixed index for created by property
+            createIndexes(management, Constants.CREATED_BY_KEY, String.class, false,
+                    AtlasCardinality.SINGLE, true, true);
 
-                        Set<String> indexKeys = new HashSet<>();
+            // Create a composite and mixed index for modified by property
+            createIndexes(management, Constants.MODIFIED_BY_KEY, String.class, false,
+                    AtlasCardinality.SINGLE, true, true);
 
-                        for (AtlasPropertyKey fieldKey : vertexIndex.getFieldKeys()) {
-                            indexKeys.add(fieldKey.getName());
-                        }
+            // create a composite and mixed index for type since it can be combined with other keys
+            createIndexes(management, Constants.ENTITY_TYPE_PROPERTY_KEY, String.class, false, AtlasCardinality.SINGLE,
+                    true, true);
 
-                        vertexIndexKeys = indexKeys;
-                    }
+            // create a composite and mixed index for type since it can be combined with other keys
+            createIndexes(management, Constants.SUPER_TYPES_PROPERTY_KEY, String.class, false, AtlasCardinality.SET,
+                    true, true);
 
-                    management.commit();
-                }
-            } catch (Exception excp) {
-                LOG.error("getVertexIndexKeys(): failed to get indexedKeys from graph", excp);
-
-                if (management != null) {
-                    try {
-                        management.rollback();
-                    } catch (Exception e) {
-                        LOG.error("getVertexIndexKeys(): rollback failed", e);
-                    }
-                }
-            }
-        }
+            // create a composite and mixed index for traitNames since it can be combined with other
+            // keys. Traits must be a set and not a list.
+            createIndexes(management, Constants.TRAIT_NAMES_PROPERTY_KEY, String.class, false, AtlasCardinality.SET,
+                    true, true);
 
-        return vertexIndexKeys;
-    }
+            // Index for full text search
+            createFullTextIndex(management);
 
-    /**
-     * Initializes the indices for the graph - create indices for Global AtlasVertex Keys
-     */
-    private void initialize() throws RepositoryException, IndexException {
-        initialize(provider.get());
+            //Indexes for graph backed type system store
+            createTypeStoreIndexes(management);
+      
+            
+            commit(management);
+            LOG.info("Index creation for global keys complete.");
+        } catch (Throwable t) {
+            rollback(management);
+            throw new RepositoryException(t);
+        }
     }
-    
-    /**
-     * Initializes the indices for the graph - create indices for Global AtlasVertex and AtlasEdge Keys
-     */
-    private void initialize(AtlasGraph graph) throws RepositoryException, IndexException {
-        AtlasGraphManagement management = graph.getManagementSystem();
+   
 
-        try {
-            LOG.info("Creating indexes for graph.");
+    private void createFullTextIndex(AtlasGraphManagement management) {
+        AtlasPropertyKey fullText =
+                management.makePropertyKey(Constants.ENTITY_TEXT_PROPERTY_KEY, String.class, AtlasCardinality.SINGLE);
 
-            if (management.getGraphIndex(VERTEX_INDEX) == null) {
-                management.createVertexMixedIndex(VERTEX_INDEX, BACKING_INDEX, Collections.emptyList());
+        management.createFullTextIndex(Constants.FULLTEXT_INDEX, fullText, Constants.BACKING_INDEX);
 
-                LOG.info("Created index : {}", VERTEX_INDEX);
-            }
+    }
 
-            if (management.getGraphIndex(EDGE_INDEX) == null) {
-                management.createEdgeMixedIndex(EDGE_INDEX, BACKING_INDEX, Collections.emptyList());
+    private void createTypeStoreIndexes(AtlasGraphManagement management) {
+        //Create unique index on typeName
+        createIndexes(management, Constants.TYPENAME_PROPERTY_KEY, String.class, true, AtlasCardinality.SINGLE,
+                true, true);
 
-                LOG.info("Created index : {}", EDGE_INDEX);
-            }
-
-            if (management.getGraphIndex(FULLTEXT_INDEX) == null) {
-                management.createFullTextMixedIndex(FULLTEXT_INDEX, BACKING_INDEX, Collections.emptyList());
+        //create index on vertex type
+        createIndexes(management, Constants.VERTEX_TYPE_PROPERTY_KEY, String.class, false, AtlasCardinality.SINGLE,
+                true, true);
+    }
 
-                LOG.info("Created index : {}", FULLTEXT_INDEX);
+    /**
+     * This is upon adding a new type to Store.
+     *
+     * @param dataTypes data type
+     * @throws AtlasException
+     */
+    @Override
+    public void onAdd(Collection<? extends IDataType> dataTypes) throws AtlasException {
+        AtlasGraphManagement management = provider.get().getManagementSystem();
+               
+        for (IDataType dataType : dataTypes) {
+            if (LOG.isDebugEnabled()) {
+                LOG.debug("Creating indexes for type name={}, definition={}", dataType.getName(), dataType.getClass());
             }
 
-            // create vertex indexes
-            createVertexIndex(management, GUID_PROPERTY_KEY, UniqueKind.GLOBAL_UNIQUE, String.class, SINGLE, true, false);
-            createVertexIndex(management, TYPENAME_PROPERTY_KEY, UniqueKind.GLOBAL_UNIQUE, String.class, SINGLE, true, false);
-            createVertexIndex(management, TYPESERVICETYPE_PROPERTY_KEY, UniqueKind.NONE, String.class, SINGLE, true, false);
-            createVertexIndex(management, VERTEX_TYPE_PROPERTY_KEY, UniqueKind.NONE, String.class, SINGLE, true, false);
-            createVertexIndex(management, VERTEX_ID_IN_IMPORT_KEY, UniqueKind.NONE, Long.class, SINGLE, true, false);
-
-            createVertexIndex(management, ENTITY_TYPE_PROPERTY_KEY, UniqueKind.NONE, String.class, SINGLE, true, false);
-            createVertexIndex(management, SUPER_TYPES_PROPERTY_KEY, UniqueKind.NONE, String.class, SET, true, false);
-            createVertexIndex(management, TIMESTAMP_PROPERTY_KEY, UniqueKind.NONE, Long.class, SINGLE, false, false);
-            createVertexIndex(management, MODIFICATION_TIMESTAMP_PROPERTY_KEY, UniqueKind.NONE, Long.class, SINGLE, false, false);
-            createVertexIndex(management, STATE_PROPERTY_KEY, UniqueKind.NONE, String.class, SINGLE, false, false);
-            createVertexIndex(management, CREATED_BY_KEY, UniqueKind.NONE, String.class, SINGLE, false, false);
-            createVertexIndex(management, MODIFIED_BY_KEY, UniqueKind.NONE, String.class, SINGLE, false, false);
-            createVertexIndex(management, TRAIT_NAMES_PROPERTY_KEY, UniqueKind.NONE, String.class, SET, true, true);
-            createVertexIndex(management, PROPAGATED_TRAIT_NAMES_PROPERTY_KEY, UniqueKind.NONE, String.class, LIST, true, true);
-
-            createVertexIndex(management, PATCH_ID_PROPERTY_KEY, UniqueKind.GLOBAL_UNIQUE, String.class, SINGLE, true, false);
-            createVertexIndex(management, PATCH_DESCRIPTION_PROPERTY_KEY, UniqueKind.NONE, String.class, SINGLE, true, false);
-            createVertexIndex(management, PATCH_TYPE_PROPERTY_KEY, UniqueKind.NONE, String.class, SINGLE, true, false);
-            createVertexIndex(management, PATCH_ACTION_PROPERTY_KEY, UniqueKind.NONE, String.class, SINGLE, true, false);
-            createVertexIndex(management, PATCH_STATE_PROPERTY_KEY, UniqueKind.NONE, String.class, SINGLE, true, false);
-
-            // create vertex-centric index
-            createVertexCentricIndex(management, CLASSIFICATION_LABEL, AtlasEdgeDirection.BOTH, CLASSIFICATION_EDGE_NAME_PROPERTY_KEY, String.class, SINGLE);
-            createVertexCentricIndex(management, CLASSIFICATION_LABEL, AtlasEdgeDirection.BOTH, CLASSIFICATION_EDGE_IS_PROPAGATED_PROPERTY_KEY, Boolean.class, SINGLE);
-            createVertexCentricIndex(management, CLASSIFICATION_LABEL, AtlasEdgeDirection.BOTH, Arrays.asList(CLASSIFICATION_EDGE_NAME_PROPERTY_KEY, CLASSIFICATION_EDGE_IS_PROPAGATED_PROPERTY_KEY));
-
-            // create edge indexes
-            createEdgeIndex(management, RELATIONSHIP_GUID_PROPERTY_KEY, String.class, SINGLE, true);
-            createEdgeIndex(management, EDGE_ID_IN_IMPORT_KEY, String.class, SINGLE, true);
-
-            // create fulltext indexes
-            createFullTextIndex(management, ENTITY_TEXT_PROPERTY_KEY, String.class, SINGLE);
-
-            commit(management);
+            try {
+                addIndexForType(management, dataType);
+                LOG.info("Index creation for type {} complete", dataType.getName());
+            } catch (Throwable throwable) {
+                LOG.error("Error creating index for type {}", dataType, throwable);
+                //Rollback indexes if any failure
+                rollback(management);
+                throw new IndexCreationException("Error while creating index for type " + dataType, throwable);
+            }
+        }
 
-            LOG.info("Index creation for global keys complete.");
-        } catch (Throwable t) {
-            LOG.error("GraphBackedSearchIndexer.initialize() failed", t);
+        //Commit indexes
+        commit(management);
+    }
 
-            rollback(management);
-            throw new RepositoryException(t);
-        }
+    @Override
+    public void onChange(Collection<? extends IDataType> dataTypes) throws AtlasException {
+        onAdd(dataTypes);
     }
 
     private void addIndexForType(AtlasGraphManagement management, AtlasBaseTypeDef typeDef) {
@@ -329,72 +265,28 @@ public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChang
         }
     }
 
-    private void createIndexForAttribute(AtlasGraphManagement management, String typeName, AtlasAttributeDef attributeDef) {
-        final String     propertyName   = AtlasGraphUtilsV2.encodePropertyKey(typeName + "." + attributeDef.getName());
-        AtlasCardinality cardinality    = toAtlasCardinality(attributeDef.getCardinality());
-        boolean          isUnique       = attributeDef.getIsUnique();
-        boolean          isIndexable    = attributeDef.getIsIndexable();
-        String           attribTypeName = attributeDef.getTypeName();
-        boolean          isBuiltInType  = AtlasTypeUtil.isBuiltInType(attribTypeName);
-        boolean          isArrayType    = isArrayType(attribTypeName);
-        boolean          isMapType      = isMapType(attribTypeName);
-        final String     uniqPropName   = isUnique ? AtlasGraphUtilsV2.encodePropertyKey(typeName + "." + UNIQUE_ATTRIBUTE_SHADE_PROPERTY_PREFIX + attributeDef.getName()) : null;
+    private void createIndexForAttribute(AtlasGraphManagement management, String typeName,
+                                         AtlasAttributeDef attributeDef) {
+        final String propertyName = GraphHelper.encodePropertyKey(typeName + "." + attributeDef.getName());
+        AtlasCardinality cardinality = toAtlasCardinality(attributeDef.getCardinality());
+        boolean isUnique = attributeDef.getIsUnique();
+        boolean isIndexable = attributeDef.getIsIndexable();
+        String attribTypeName = attributeDef.getTypeName();
+        boolean isBuiltInType = AtlasTypeUtil.isBuiltInType(attribTypeName);
+        boolean isArrayType = AtlasTypeUtil.isArrayType(attribTypeName);
+        boolean isMapType = AtlasTypeUtil.isMapType(attribTypeName);
 
 
         try {
-            AtlasType atlasType     = typeRegistry.getType(typeName);
-            AtlasType attributeType = typeRegistry.getType(attribTypeName);
+            AtlasType atlasType = typeRegistry.getType(attribTypeName);
 
-            if (isClassificationType(attributeType)) {
+            if (isMapType || isArrayType || isClassificationType(atlasType) || isEntityType(atlasType)) {
                 LOG.warn("Ignoring non-indexable attribute {}", attribTypeName);
-            }
-
-            if (isArrayType) {
-                createLabelIfNeeded(management, propertyName, attribTypeName);
-
-                AtlasArrayType arrayType   = (AtlasArrayType) attributeType;
-                boolean        isReference = isReference(arrayType.getElementType());
-
-                if (!isReference) {
-                    createPropertyKey(management, propertyName, ArrayList.class, SINGLE);
-                }
-            }
-
-            if (isMapType) {
-                createLabelIfNeeded(management, propertyName, attribTypeName);
-
-                AtlasMapType mapType     = (AtlasMapType) attributeType;
-                boolean      isReference = isReference(mapType.getValueType());
-
-                if (!isReference) {
-                    createPropertyKey(management, propertyName, HashMap.class, SINGLE);
-                }
-            }
-
-            if (isEntityType(attributeType)) {
-                createEdgeLabel(management, propertyName);
-
             } else if (isBuiltInType) {
-                if (isRelationshipType(atlasType)) {
-                    createEdgeIndex(management, propertyName, getPrimitiveClass(attribTypeName), cardinality, false);
-                } else {
-                    createVertexIndex(management, propertyName, UniqueKind.NONE, getPrimitiveClass(attribTypeName), cardinality, isIndexable, false);
-
-                    if (uniqPropName != null) {
-                        createVertexIndex(management, uniqPropName, UniqueKind.PER_TYPE_UNIQUE, getPrimitiveClass(attribTypeName), cardinality, isIndexable, true);
-                    }
-                }
-            } else if (isEnumType(attributeType)) {
-                if (isRelationshipType(atlasType)) {
-                    createEdgeIndex(management, propertyName, String.class, cardinality, false);
-                } else {
-                    createVertexIndex(management, propertyName, UniqueKind.NONE, String.class, cardinality, isIndexable, false);
-
-                    if (uniqPropName != null) {
-                        createVertexIndex(management, uniqPropName, UniqueKind.PER_TYPE_UNIQUE, String.class, cardinality, isIndexable, true);
-                    }
-                }
-            } else if (isStructType(attributeType)) {
+                createIndexes(management, propertyName, getPrimitiveClass(attribTypeName), isUnique, cardinality, false, isIndexable);
+            } else if (isEnumType(atlasType)) {
+                createIndexes(management, propertyName, String.class, isUnique, cardinality, false, isIndexable);
+            } else if (isStructType(atlasType)) {
                 AtlasStructDef structDef = typeRegistry.getStructDefByName(attribTypeName);
                 updateIndexForTypeDef(management, structDef);
             }
@@ -403,16 +295,6 @@ public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChang
         }
     }
 
-    private void createLabelIfNeeded(final AtlasGraphManagement management, final String propertyName, final String attribTypeName) {
-        // If any of the referenced typename is of type Entity or Struct then the edge label needs to be created
-        for (String typeName : AtlasTypeUtil.getReferencedTypeNames(attribTypeName)) {
-            if (typeRegistry.getEntityDefByName(typeName) != null || typeRegistry.getStructDefByName(typeName) != null) {
-                // Create the edge label upfront to avoid running into concurrent call issue (ATLAS-2092)
-                createEdgeLabel(management, propertyName);
-            }
-        }
-    }
-
     private boolean isEntityType(AtlasType type) {
         return type instanceof AtlasEntityType;
     }
@@ -429,14 +311,8 @@ public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChang
         return type instanceof AtlasStructType;
     }
 
-    private boolean isRelationshipType(AtlasType type) {
-        return type instanceof AtlasRelationshipType;
-    }
-
-    public Class getPrimitiveClass(String attribTypeName) {
-        String attributeTypeName = attribTypeName.toLowerCase();
-
-        switch (attributeTypeName) {
+    private Class getPrimitiveClass(String attribTypeName) {
+        switch (attribTypeName.toLowerCase()) {
             case ATLAS_TYPE_BOOLEAN:
                 return Boolean.class;
             case ATLAS_TYPE_BYTE:
@@ -463,182 +339,165 @@ public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChang
         throw new IllegalArgumentException(String.format("Unknown primitive typename %s", attribTypeName));
     }
 
-    public AtlasCardinality toAtlasCardinality(AtlasAttributeDef.Cardinality cardinality) {
+    private AtlasCardinality toAtlasCardinality(AtlasAttributeDef.Cardinality cardinality) {
         switch (cardinality) {
             case SINGLE:
-                return SINGLE;
+                return AtlasCardinality.SINGLE;
             case LIST:
-                return LIST;
+                return AtlasCardinality.LIST;
             case SET:
-                return SET;
+                return AtlasCardinality.SET;
         }
         // Should never reach this point
         throw new IllegalArgumentException(String.format("Bad cardinality %s", cardinality));
     }
 
-    private void createEdgeLabel(final AtlasGraphManagement management, final String propertyName) {
-        // Create the edge label upfront to avoid running into concurrent call issue (ATLAS-2092)
-        // ATLAS-2092 addresses this problem by creating the edge label upfront while type creation
-        // which resolves the race condition during the entity creation
-
-        String label = Constants.INTERNAL_PROPERTY_KEY_PREFIX + propertyName;
-
-        org.apache.atlas.repository.graphdb.AtlasEdgeLabel edgeLabel = management.getEdgeLabel(label);
-
-        if (edgeLabel == null) {
-            management.makeEdgeLabel(label);
-
-            LOG.info("Created edge label {} ", label);
-        }
-    }
-
-    private AtlasPropertyKey createPropertyKey(AtlasGraphManagement management, String propertyName, Class propertyClass, AtlasCardinality cardinality) {
-        AtlasPropertyKey propertyKey = management.getPropertyKey(propertyName);
-
-        if (propertyKey == null) {
-            propertyKey = management.makePropertyKey(propertyName, propertyClass, cardinality);
-        }
-
-        return propertyKey;
-    }
-
-    public void createVertexIndex(AtlasGraphManagement management, String propertyName, UniqueKind uniqueKind, Class propertyClass,
-                                  AtlasCardinality cardinality, boolean createCompositeIndex, boolean createCompositeIndexWithTypeAndSuperTypes) {
-        if (propertyName != null) {
-            AtlasPropertyKey propertyKey = management.getPropertyKey(propertyName);
-
-            if (propertyKey == null) {
-                propertyKey = management.makePropertyKey(propertyName, propertyClass, cardinality);
-
-                if (isIndexApplicable(propertyClass, cardinality)) {
-                    if (LOG.isDebugEnabled()) {
-                        LOG.debug("Creating backing index for vertex property {} of type {} ", propertyName, propertyClass.getName());
-                    }
-
-                    management.addMixedIndex(VERTEX_INDEX, propertyKey);
-
-                    LOG.info("Created backing index for vertex property {} of type {} ", propertyName, propertyClass.getName());
-                }
-            }
-
-            if (propertyKey != null) {
-                if (createCompositeIndex || uniqueKind == UniqueKind.GLOBAL_UNIQUE || uniqueKind == UniqueKind.PER_TYPE_UNIQUE) {
-                    createVertexCompositeIndex(management, propertyClass, propertyKey, uniqueKind == UniqueKind.GLOBAL_UNIQUE);
-                }
-
-                if (createCompositeIndexWithTypeAndSuperTypes) {
-                    createVertexCompositeIndexWithTypeName(management, propertyClass, propertyKey, uniqueKind == UniqueKind.PER_TYPE_UNIQUE);
-                    createVertexCompositeIndexWithSuperTypeName(management, propertyClass, propertyKey);
-                }
-            } else {
-                LOG.warn("Index not created for {}: propertyKey is null", propertyName);
-            }
+    private void addIndexForType(AtlasGraphManagement management, IDataType dataType) {
+        switch (dataType.getTypeCategory()) {
+        case PRIMITIVE:
+        case ENUM:
+        case ARRAY:
+        case MAP:
+            // do nothing since these are only attributes
+            // and not types like structs, traits or classes
+            break;
+
+        case STRUCT:
+            StructType structType = (StructType) dataType;
+            createIndexForFields(management, structType, structType.fieldMapping().fields);
+            break;
+
+        case TRAIT:
+            TraitType traitType = (TraitType) dataType;
+            createIndexForFields(management, traitType, traitType.fieldMapping().fields);
+            break;
+
+        case CLASS:
+            ClassType classType = (ClassType) dataType;
+            createIndexForFields(management, classType, classType.fieldMapping().fields);
+            break;
+
+        default:
+            throw new IllegalArgumentException("bad data type" + dataType);
+        }
+    }
+
+    private void createIndexForFields(AtlasGraphManagement management, IDataType dataType, Map<String, AttributeInfo> fields) {
+        for (AttributeInfo field : fields.values()) {
+            createIndexForAttribute(management, dataType.getName(), field);
+        }
+    }
+
+    private void createIndexForAttribute(AtlasGraphManagement management, String typeName, AttributeInfo field) {
+        final String propertyName = GraphHelper.encodePropertyKey(typeName + "." + field.name);
+        switch (field.dataType().getTypeCategory()) {
+        case PRIMITIVE:
+            AtlasCardinality cardinality = getCardinality(field.multiplicity);
+            createIndexes(management, propertyName, getPrimitiveClass(field.dataType()), field.isUnique,
+                    cardinality, false, field.isIndexable);
+            break;
+
+        case ENUM:
+            cardinality = getCardinality(field.multiplicity);
+            createIndexes(management, propertyName, String.class, field.isUnique, cardinality, false, field.isIndexable);
+            break;
+
+        case ARRAY:
+        case MAP:
+            // todo - how do we overcome this limitation?
+            // IGNORE: Can only index single-valued property keys on vertices in Mixed Index
+            break;
+
+        case STRUCT:
+            StructType structType = (StructType) field.dataType();
+            createIndexForFields(management, structType, structType.fieldMapping().fields);
+            break;
+
+        case TRAIT:
+            // do nothing since this is NOT contained in other types
+            break;
+
+        case CLASS:
+            // this is only A reference, index the attribute for edge
+            // Commenting this out since we do not need an index for edge here
+            //createEdgeMixedIndex(propertyName);
+            break;
+
+        default:
+            throw new IllegalArgumentException("bad data type" + field.dataType().getName());
+        }
+    }
+
+    private Class getPrimitiveClass(IDataType dataType) {
+        if (dataType == DataTypes.STRING_TYPE) {
+            return String.class;
+        } else if (dataType == DataTypes.SHORT_TYPE) {
+            return Short.class;
+        } else if (dataType == DataTypes.INT_TYPE) {
+            return Integer.class;
+        } else if (dataType == DataTypes.BIGINTEGER_TYPE) {
+            return BigInteger.class;
+        } else if (dataType == DataTypes.BOOLEAN_TYPE) {
+            return Boolean.class;
+        } else if (dataType == DataTypes.BYTE_TYPE) {
+            return Byte.class;
+        } else if (dataType == DataTypes.LONG_TYPE) {
+            return Long.class;
+        } else if (dataType == DataTypes.FLOAT_TYPE) {
+            return Float.class;
+        } else if (dataType == DataTypes.DOUBLE_TYPE) {
+            return Double.class;
+        } else if (dataType == DataTypes.BIGDECIMAL_TYPE) {
+            return BigDecimal.class;
+        } else if (dataType == DataTypes.DATE_TYPE) {
+            //Indexing with date converted to long as of now since Titan is yet to add support for Date type with mixed indexes
+            return Long.class;
+        }
+
+
+        throw new IllegalArgumentException("unknown data type " + dataType);
+    }
+  
+
+    private AtlasCardinality getCardinality(Multiplicity multiplicity) {
+        if (multiplicity == Multiplicity.OPTIONAL || multiplicity == Multiplicity.REQUIRED) {
+            return AtlasCardinality.SINGLE;
+        } else if (multiplicity == Multiplicity.COLLECTION) {
+            return AtlasCardinality.LIST;
+        } else if (multiplicity == Multiplicity.SET) {
+            return AtlasCardinality.SET;
         }
+
+        // todo - default to LIST as this is the most forgiving
+        return AtlasCardinality.LIST;
     }
+    
+    private AtlasPropertyKey createIndexes(AtlasGraphManagement management, String propertyName, Class propertyClass,
+            boolean isUnique, AtlasCardinality cardinality, boolean createCompositeForAttribute,
+            boolean createCompositeWithTypeandSuperTypes) {
 
-    private void createVertexCentricIndex(AtlasGraphManagement management, String edgeLabel, AtlasEdgeDirection edgeDirection,
-                                          String propertyName, Class propertyClass, AtlasCardinality cardinality) {
         AtlasPropertyKey propertyKey = management.getPropertyKey(propertyName);
-
         if (propertyKey == null) {
             propertyKey = management.makePropertyKey(propertyName, propertyClass, cardinality);
-        }
-
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("Creating vertex-centric index for edge label: {} direction: {} for property: {} of type: {} ",
-                        edgeLabel, edgeDirection.name(), propertyName, propertyClass.getName());
-        }
 
-        final String indexName = edgeLabel + propertyKey.getName();
+            updateVertexIndex(management, propertyName, propertyClass, cardinality, propertyKey);
 
-        if (!management.edgeIndexExist(edgeLabel, indexName)) {
-            management.createEdgeIndex(edgeLabel, indexName, edgeDirection, Collections.singletonList(propertyKey));
-
-            LOG.info("Created vertex-centric index for edge label: {} direction: {} for property: {} of type: {}",
-                    edgeLabel, edgeDirection.name(), propertyName, propertyClass.getName());
-        }
-    }
-
-    private void createVertexCentricIndex(AtlasGraphManagement management, String edgeLabel, AtlasEdgeDirection edgeDirection, List<String> propertyNames) {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("Creating vertex-centric index for edge label: {} direction: {} for properties: {}",
-                    edgeLabel, edgeDirection.name(), propertyNames);
-        }
-
-        String                 indexName    = edgeLabel;
-        List<AtlasPropertyKey> propertyKeys = new ArrayList<>();
-
-        for (String propertyName : propertyNames) {
-            AtlasPropertyKey propertyKey = management.getPropertyKey(propertyName);
-
-            if (propertyKey != null) {
-                propertyKeys.add(propertyKey);
-                indexName = indexName + propertyKey.getName();
-            }
         }
 
-        if (!management.edgeIndexExist(edgeLabel, indexName) && CollectionUtils.isNotEmpty(propertyKeys)) {
-            management.createEdgeIndex(edgeLabel, indexName, edgeDirection, propertyKeys);
-
-            LOG.info("Created vertex-centric index for edge label: {} direction: {} for properties: {}", edgeLabel, edgeDirection.name(), propertyNames);
+        if (createCompositeForAttribute) {
+            createExactMatchIndex(management, propertyClass, propertyKey, isUnique);
+        } else if (createCompositeWithTypeandSuperTypes) {
+            // Index with typename since typename+property key queries need to
+            // speed up
+            createExactMatchIndexWithTypeName(management, propertyClass, propertyKey);
+            createExactMatchIndexWithSuperTypeName(management, propertyClass, propertyKey);
         }
-    }
-
-
-    private void createEdgeIndex(AtlasGraphManagement management, String propertyName, Class propertyClass,
-                                 AtlasCardinality cardinality, boolean createCompositeIndex) {
-        if (propertyName != null) {
-            AtlasPropertyKey propertyKey = management.getPropertyKey(propertyName);
-
-            if (propertyKey == null) {
-                propertyKey = management.makePropertyKey(propertyName, propertyClass, cardinality);
-
-                if (isIndexApplicable(propertyClass, cardinality)) {
-                    if (LOG.isDebugEnabled()) {
-                        LOG.debug("Creating backing index for edge property {} of type {} ", propertyName, propertyClass.getName());
-                    }
-
-                    management.addMixedIndex(EDGE_INDEX, propertyKey);
-
-                    LOG.info("Created backing index for edge property {} of type {} ", propertyName, propertyClass.getName());
-                }
-            }
-
-            if (propertyKey != null) {
-                if (createCompositeIndex) {
-                    createEdgeCompositeIndex(management, propertyClass, propertyKey);
-                }
-            } else {
-                LOG.warn("Index not created for {}: propertyKey is null", propertyName);
-            }
-        }
-    }
-
-    private AtlasPropertyKey createFullTextIndex(AtlasGraphManagement management, String propertyName, Class propertyClass,
-                                                 AtlasCardinality cardinality) {
-        AtlasPropertyKey propertyKey = management.getPropertyKey(propertyName);
-
-        if (propertyKey == null) {
-            propertyKey = management.makePropertyKey(propertyName, propertyClass, cardinality);
-
-            if (isIndexApplicable(propertyClass, cardinality)) {
-                if (LOG.isDebugEnabled()) {
-                    LOG.debug("Creating backing index for vertex property {} of type {} ", propertyName, propertyClass.getName());
-                }
-
-                management.addMixedIndex(FULLTEXT_INDEX, propertyKey);
-
-                LOG.info("Created backing index for vertex property {} of type {} ", propertyName, propertyClass.getName());
-            }
-
-            LOG.info("Created index {}", FULLTEXT_INDEX);
-        }
-
         return propertyKey;
     }
     
-    private void createVertexCompositeIndex(AtlasGraphManagement management, Class propertyClass, AtlasPropertyKey propertyKey,
-                                            boolean enforceUniqueness) {
+    private void createExactMatchIndex(AtlasGraphManagement management, Class propertyClass,
+            AtlasPropertyKey propertyKey, boolean enforceUniqueness) {
+        
         String propertyName = propertyKey.getName();
 
         if (LOG.isDebugEnabled()) {
@@ -646,42 +505,33 @@ public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChang
         }
 
         AtlasGraphIndex existingIndex = management.getGraphIndex(propertyName);
-
         if (existingIndex == null) {
-            management.createVertexCompositeIndex(propertyName, enforceUniqueness, Collections.singletonList(propertyKey));
-
-            LOG.info("Created composite index for property {} of type {}; isUnique={} ", propertyName, propertyClass.getName(), enforceUniqueness);
-        }
-    }
-
-    private void createEdgeCompositeIndex(AtlasGraphManagement management, Class propertyClass, AtlasPropertyKey propertyKey) {
-        String propertyName = propertyKey.getName();
-
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("Creating composite index for property {} of type {}", propertyName, propertyClass.getName());
+            management.createExactMatchIndex(propertyName, enforceUniqueness, Collections.singletonList(propertyKey));
         }
 
-        AtlasGraphIndex existingIndex = management.getGraphIndex(propertyName);
-
-        if (existingIndex == null) {
-            management.createEdgeCompositeIndex(propertyName, false, Collections.singletonList(propertyKey));
-
-            LOG.info("Created composite index for property {} of type {}", propertyName, propertyClass.getName());
-        }
+        LOG.info("Created composite index for property {} of type {}; isUnique={} ", propertyName, propertyClass.getName(), enforceUniqueness);
     }
+    
 
-    private void createVertexCompositeIndexWithTypeName(AtlasGraphManagement management, Class propertyClass, AtlasPropertyKey propertyKey, boolean isUnique) {
-        createVertexCompositeIndexWithSystemProperty(management, propertyClass, propertyKey, ENTITY_TYPE_PROPERTY_KEY, SINGLE, isUnique);
+    private void createExactMatchIndexWithTypeName(AtlasGraphManagement management,
+            Class propertyClass, AtlasPropertyKey propertyKey) {
+        createExactMatchIndexWithSystemProperty(management, propertyClass, propertyKey,
+                Constants.ENTITY_TYPE_PROPERTY_KEY, AtlasCardinality.SINGLE);
     }
 
-    private void createVertexCompositeIndexWithSuperTypeName(AtlasGraphManagement management, Class propertyClass, AtlasPropertyKey propertyKey) {
-        createVertexCompositeIndexWithSystemProperty(management, propertyClass, propertyKey, SUPER_TYPES_PROPERTY_KEY, SET, false);
+    private void createExactMatchIndexWithSuperTypeName(AtlasGraphManagement management,
+            Class propertyClass, AtlasPropertyKey propertyKey) {
+        createExactMatchIndexWithSystemProperty(management, propertyClass, propertyKey,
+                Constants.SUPER_TYPES_PROPERTY_KEY, AtlasCardinality.SET);
     }
 
-    private void createVertexCompositeIndexWithSystemProperty(AtlasGraphManagement management, Class propertyClass, AtlasPropertyKey propertyKey,
-                                                              final String systemPropertyKey, AtlasCardinality cardinality, boolean isUnique) {
+    private void createExactMatchIndexWithSystemProperty(AtlasGraphManagement management,
+            Class propertyClass, AtlasPropertyKey propertyKey, final String systemPropertyKey,
+            AtlasCardinality cardinality) {
+
         if (LOG.isDebugEnabled()) {
-            LOG.debug("Creating composite index for property {} of type {} and {}", propertyKey.getName(), propertyClass.getName(),  systemPropertyKey);
+            LOG.debug("Creating composite index for property {} of type {} and {}", propertyKey.getName(), propertyClass.getName(),
+                    systemPropertyKey);
         }
 
         AtlasPropertyKey typePropertyKey = management.getPropertyKey(systemPropertyKey);
@@ -693,41 +543,114 @@ public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChang
         AtlasGraphIndex existingIndex = management.getGraphIndex(indexName);
 
         if (existingIndex == null) {
+            
             List<AtlasPropertyKey> keys = new ArrayList<>(2);
-            keys.add(typePropertyKey);
             keys.add(propertyKey);
-            management.createVertexCompositeIndex(indexName, isUnique, keys);
+            keys.add(typePropertyKey);
+            management.createExactMatchIndex(indexName, false, keys);
+
+            LOG.info("Created composite index for property {} of type {} and {}", propertyKey.getName(), propertyClass.getName(),
+                    systemPropertyKey);
+        }
+    }
+
+    private void updateVertexIndex(AtlasGraphManagement management, String propertyName, Class propertyClass,
+            AtlasCardinality cardinality, AtlasPropertyKey propertyKey) {
+        if (checkIfVertexIndexApplicable(propertyClass, cardinality)) {
+            if (LOG.isDebugEnabled()) {
+                LOG.debug("Creating backing index for property {} of type {} ", propertyName, propertyClass.getName());
+            }
+
+            // Use backing index
+            management.addVertexIndexKey(Constants.VERTEX_INDEX, propertyKey);
 
-            LOG.info("Created composite index for property {} of type {} and {}", propertyKey.getName(), propertyClass.getName(), systemPropertyKey);
+            LOG.info("Created backing index for property {} of type {} ", propertyName, propertyClass.getName());
         }
     }
 
-    private boolean isIndexApplicable(Class propertyClass, AtlasCardinality cardinality) {
-        return !(INDEX_EXCLUSION_CLASSES.contains(propertyClass) || cardinality.isMany());
+    private boolean checkIfVertexIndexApplicable(Class propertyClass, AtlasCardinality cardinality) {
+        return !(VERTEX_INDEX_EXCLUSIONS.contains(propertyClass) || cardinality.isMany());
     }
     
-    public void commit(AtlasGraphManagement management) throws IndexException {
+
+
+    private void commit(AtlasGraphManagement management) throws IndexException {
         try {
             management.commit();
-
-            recomputeIndexedKeys = true;
         } catch (Exception e) {
             LOG.error("Index commit failed", e);
             throw new IndexException("Index commit failed ", e);
         }
     }
 
-    public void rollback(AtlasGraphManagement management) throws IndexException {
+    private void rollback(AtlasGraphManagement management) throws IndexException {
         try {
             management.rollback();
-
-            recomputeIndexedKeys = true;
         } catch (Exception e) {
             LOG.error("Index rollback failed ", e);
             throw new IndexException("Index rollback failed ", e);
         }
     }
 
+    /**
+     * Initialize global indices for Titan graph on server activation.
+     *
+     * Since the indices are shared state, we need to do this only from an active instance.
+     */
+    @Override
+    public void instanceIsActive() throws AtlasException {
+        LOG.info("Reacting to active: initializing index");
+        try {
+            initialize();
+        } catch (RepositoryException | IndexException e) {
+            throw new AtlasException("Error in reacting to active on initialization", e);
+        }
+    }
+
+    @Override
+    public void instanceIsPassive() {
+        LOG.info("Reacting to passive state: No action right now.");
+    }
+
+    @Override
+    public void onChange(ChangedTypeDefs changedTypeDefs) throws AtlasBaseException {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("Processing changed typedefs {}", changedTypeDefs);
+        }
+        AtlasGraphManagement management = null;
+        try {
+            management = provider.get().getManagementSystem();
+
+            // Update index for newly created types
+            if (CollectionUtils.isNotEmpty(changedTypeDefs.getCreateTypeDefs())) {
+                for (AtlasBaseTypeDef typeDef : changedTypeDefs.getCreateTypeDefs()) {
+                    updateIndexForTypeDef(management, typeDef);
+                }
+            }
+
+            // Update index for updated types
+            if (CollectionUtils.isNotEmpty(changedTypeDefs.getUpdatedTypeDefs())) {
+                for (AtlasBaseTypeDef typeDef : changedTypeDefs.getUpdatedTypeDefs()) {
+                    updateIndexForTypeDef(management, typeDef);
+                }
+            }
+
+            // Invalidate the property key for deleted types
+            if (CollectionUtils.isNotEmpty(changedTypeDefs.getDeletedTypeDefs())) {
+                for (AtlasBaseTypeDef typeDef : changedTypeDefs.getDeletedTypeDefs()) {
+                    cleanupIndices(management, typeDef);
+                }
+            }
+
+            //Commit indexes
+            commit(management);
+        } catch (RepositoryException | IndexException e) {
+            LOG.error("Failed to update indexes for changed typedefs", e);
+            attemptRollback(changedTypeDefs, management);
+        }
+
+    }
+
     private void cleanupIndices(AtlasGraphManagement management, AtlasBaseTypeDef typeDef) {
         Preconditions.checkNotNull(typeDef, "Cannot process null typedef");
         if (LOG.isDebugEnabled()) {
@@ -753,18 +676,18 @@ public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChang
     }
 
     private void cleanupIndexForAttribute(AtlasGraphManagement management, String typeName, AtlasAttributeDef attributeDef) {
-        final String propertyName = AtlasGraphUtilsV2.encodePropertyKey(typeName + "." + attributeDef.getName());
-        String  attribTypeName    = attributeDef.getTypeName();
-        boolean isBuiltInType     = AtlasTypeUtil.isBuiltInType(attribTypeName);
-        boolean isArrayType       = isArrayType(attribTypeName);
-        boolean isMapType         = isMapType(attribTypeName);
+        final String propertyName = GraphHelper.encodePropertyKey(typeName + "." + attributeDef.getName());
+        String attribTypeName = attributeDef.getTypeName();
+        boolean isBuiltInType = AtlasTypeUtil.isBuiltInType(attribTypeName);
+        boolean isArrayType = AtlasTypeUtil.isArrayType(attribTypeName);
+        boolean isMapType = AtlasTypeUtil.isMapType(attribTypeName);
 
         try {
             AtlasType atlasType = typeRegistry.getType(attribTypeName);
 
-            if (isClassificationType(atlasType) || isEntityType(atlasType)) {
+            if (isMapType || isArrayType || isClassificationType(atlasType) || isEntityType(atlasType)) {
                 LOG.warn("Ignoring non-indexable attribute {}", attribTypeName);
-            } else if (isBuiltInType || isEnumType(atlasType) || isArrayType || isMapType) {
+            } else if (isBuiltInType || isEnumType(atlasType)) {
                 cleanupIndex(management, propertyName);
             } else if (isStructType(atlasType)) {
                 AtlasStructDef structDef = typeRegistry.getStructDefByName(attribTypeName);
@@ -779,7 +702,6 @@ public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChang
         if (LOG.isDebugEnabled()) {
             LOG.debug("Invalidating property key = {}", propertyKey);
         }
-
         management.deletePropertyKey(propertyKey);
     }
 
@@ -804,4 +726,14 @@ public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChang
         addIndexForType(management, typeDef);
         LOG.info("Index creation for type {} complete", typeDef.getName());
     }
+
+    /* Commenting this out since we do not need an index for edge label here
+    private void createEdgeMixedIndex(String propertyName) {
+        EdgeLabel edgeLabel = management.getEdgeLabel(propertyName);
+        if (edgeLabel == null) {
+            edgeLabel = management.makeEdgeLabel(propertyName).make();
+            management.buildEdgeIndex(edgeLabel, propertyName, Direction.BOTH, Order.DEFAULT);
+            LOG.info("Created index for edge label {}", propertyName);
+        }
+    }*/
 }