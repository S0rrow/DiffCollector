diff --git a/artemis-core-client/src/main/java/org/apache/activemq/artemis/spi/core/remoting/ClientProtocolManager.java b/artemis-core-client/src/main/java/org/apache/activemq/artemis/spi/core/remoting/ClientProtocolManager.java
index 9788e1e4cb..f6278d2d89 100644
--- a/artemis-core-client/src/main/java/org/apache/activemq/artemis/spi/core/remoting/ClientProtocolManager.java
+++ b/artemis-core-client/src/main/java/org/apache/activemq/artemis/spi/core/remoting/ClientProtocolManager.java
@@ -1,4 +1,4 @@
-/*
+/**
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements. See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -22,20 +22,15 @@ import java.util.concurrent.locks.Lock;
 import io.netty.channel.ChannelPipeline;
 import org.apache.activemq.artemis.api.core.ActiveMQException;
 import org.apache.activemq.artemis.api.core.Interceptor;
-import org.apache.activemq.artemis.api.core.TransportConfiguration;
 import org.apache.activemq.artemis.api.core.client.ClientSessionFactory;
 import org.apache.activemq.artemis.spi.core.protocol.RemotingConnection;
 
-public interface ClientProtocolManager {
+public interface ClientProtocolManager
+{
 
    /// Life Cycle Methods:
 
-   RemotingConnection connect(Connection transportConnection,
-                              long callTimeout,
-                              long callFailoverTimeout,
-                              List<Interceptor> incomingInterceptors,
-                              List<Interceptor> outgoingInterceptors,
-                              TopologyResponseHandler topologyResponseHandler);
+   RemotingConnection connect(Connection transportConnection, long callTimeout, long callFailoverTimeout, List<Interceptor> incomingInterceptors, List<Interceptor> outgoingInterceptors, TopologyResponseHandler topologyResponseHandler);
 
    RemotingConnection getCurrentConnection();
 
@@ -59,13 +54,13 @@ public interface ClientProtocolManager {
 
    void ping(long connectionTTL);
 
-   SessionContext createSessionContext(String name,
-                                       String username,
-                                       String password,
-                                       boolean xa,
-                                       boolean autoCommitSends,
-                                       boolean autoCommitAcks,
-                                       boolean preAcknowledge,
+   SessionContext createSessionContext(final String name,
+                                       final String username,
+                                       final String password,
+                                       final boolean xa,
+                                       final boolean autoCommitSends,
+                                       final boolean autoCommitAcks,
+                                       final boolean preAcknowledge,
                                        int minLargeMessageSize,
                                        int confirmationWindowSize) throws ActiveMQException;
 
@@ -79,6 +74,4 @@ public interface ClientProtocolManager {
 
    String getName();
 
-   default void updateTransportConfiguration(TransportConfiguration backUp) {
-   }
 }