diff --git a/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/ActiveMQServerControlImpl.java b/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/ActiveMQServerControlImpl.java
index 4431d706b9..9419cbb9f5 100644
--- a/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/ActiveMQServerControlImpl.java
+++ b/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/ActiveMQServerControlImpl.java
@@ -30,14 +30,12 @@ import javax.management.NotificationEmitter;
 import javax.management.NotificationFilter;
 import javax.management.NotificationListener;
 import javax.transaction.xa.Xid;
-import java.net.URL;
 import java.text.DateFormat;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.Date;
-import java.util.EnumSet;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
@@ -50,18 +48,14 @@ import java.util.stream.Collectors;
 import org.apache.activemq.artemis.api.config.ActiveMQDefaultConfiguration;
 import org.apache.activemq.artemis.api.core.ActiveMQAddressDoesNotExistException;
 import org.apache.activemq.artemis.api.core.ActiveMQException;
-import org.apache.activemq.artemis.api.core.JsonUtil;
 import org.apache.activemq.artemis.api.core.RoutingType;
 import org.apache.activemq.artemis.api.core.SimpleString;
 import org.apache.activemq.artemis.api.core.TransportConfiguration;
-import org.apache.activemq.artemis.api.core.client.ActiveMQClient;
 import org.apache.activemq.artemis.api.core.management.ActiveMQServerControl;
 import org.apache.activemq.artemis.api.core.management.AddressControl;
 import org.apache.activemq.artemis.api.core.management.BridgeControl;
 import org.apache.activemq.artemis.api.core.management.CoreNotificationType;
 import org.apache.activemq.artemis.api.core.management.DivertControl;
-import org.apache.activemq.artemis.api.core.management.ManagementHelper;
-import org.apache.activemq.artemis.api.core.management.Parameter;
 import org.apache.activemq.artemis.api.core.management.QueueControl;
 import org.apache.activemq.artemis.core.client.impl.Topology;
 import org.apache.activemq.artemis.core.client.impl.TopologyMemberImpl;
@@ -69,14 +63,7 @@ import org.apache.activemq.artemis.core.config.BridgeConfiguration;
 import org.apache.activemq.artemis.core.config.Configuration;
 import org.apache.activemq.artemis.core.config.ConnectorServiceConfiguration;
 import org.apache.activemq.artemis.core.config.DivertConfiguration;
-import org.apache.activemq.artemis.core.config.TransformerConfiguration;
 import org.apache.activemq.artemis.core.filter.Filter;
-import org.apache.activemq.artemis.core.management.impl.view.AddressView;
-import org.apache.activemq.artemis.core.management.impl.view.ConnectionView;
-import org.apache.activemq.artemis.core.management.impl.view.ConsumerView;
-import org.apache.activemq.artemis.core.management.impl.view.ProducerView;
-import org.apache.activemq.artemis.core.management.impl.view.QueueView;
-import org.apache.activemq.artemis.core.management.impl.view.SessionView;
 import org.apache.activemq.artemis.core.messagecounter.MessageCounterManager;
 import org.apache.activemq.artemis.core.messagecounter.impl.MessageCounterManagerImpl;
 import org.apache.activemq.artemis.core.persistence.StorageManager;
@@ -95,11 +82,10 @@ import org.apache.activemq.artemis.core.server.ActiveMQServer;
 import org.apache.activemq.artemis.core.server.ActiveMQServerLogger;
 import org.apache.activemq.artemis.core.server.ConnectorServiceFactory;
 import org.apache.activemq.artemis.core.server.Consumer;
-import org.apache.activemq.artemis.core.server.ComponentConfigurationRoutingType;
+import org.apache.activemq.artemis.core.server.DivertConfigurationRoutingType;
 import org.apache.activemq.artemis.core.server.JournalType;
 import org.apache.activemq.artemis.core.server.Queue;
 import org.apache.activemq.artemis.core.server.ServerConsumer;
-import org.apache.activemq.artemis.core.server.ServerProducer;
 import org.apache.activemq.artemis.core.server.ServerSession;
 import org.apache.activemq.artemis.core.server.cluster.ClusterConnection;
 import org.apache.activemq.artemis.core.server.cluster.ClusterManager;
@@ -107,36 +93,26 @@ import org.apache.activemq.artemis.core.server.cluster.ha.HAPolicy;
 import org.apache.activemq.artemis.core.server.cluster.ha.LiveOnlyPolicy;
 import org.apache.activemq.artemis.core.server.cluster.ha.ScaleDownPolicy;
 import org.apache.activemq.artemis.core.server.cluster.ha.SharedStoreSlavePolicy;
-import org.apache.activemq.artemis.core.server.files.FileStoreMonitor;
 import org.apache.activemq.artemis.core.server.group.GroupingHandler;
 import org.apache.activemq.artemis.core.server.impl.Activation;
 import org.apache.activemq.artemis.core.server.impl.AddressInfo;
 import org.apache.activemq.artemis.core.server.impl.SharedNothingLiveActivation;
 import org.apache.activemq.artemis.core.settings.impl.AddressFullMessagePolicy;
 import org.apache.activemq.artemis.core.settings.impl.AddressSettings;
-import org.apache.activemq.artemis.core.settings.impl.DeletionPolicy;
 import org.apache.activemq.artemis.core.settings.impl.SlowConsumerPolicy;
 import org.apache.activemq.artemis.core.transaction.ResourceManager;
 import org.apache.activemq.artemis.core.transaction.Transaction;
 import org.apache.activemq.artemis.core.transaction.TransactionDetail;
-import org.apache.activemq.artemis.core.transaction.TransactionDetailFactory;
 import org.apache.activemq.artemis.core.transaction.impl.CoreTransactionDetail;
 import org.apache.activemq.artemis.core.transaction.impl.XidImpl;
-import org.apache.activemq.artemis.logs.AuditLogger;
 import org.apache.activemq.artemis.spi.core.protocol.RemotingConnection;
-import org.apache.activemq.artemis.spi.core.security.jaas.PropertiesLoginModuleConfigurator;
 import org.apache.activemq.artemis.utils.JsonLoader;
 import org.apache.activemq.artemis.utils.ListUtil;
-import org.apache.activemq.artemis.utils.PasswordMaskingUtil;
 import org.apache.activemq.artemis.utils.SecurityFormatter;
 import org.apache.activemq.artemis.utils.collections.TypedProperties;
-import org.jboss.logging.Logger;
-
-import static org.apache.activemq.artemis.core.server.files.FileStoreMonitor.calculateUsage;
 
 public class ActiveMQServerControlImpl extends AbstractControl implements ActiveMQServerControl, NotificationEmitter, org.apache.activemq.artemis.core.server.management.NotificationListener {
    // Constants -----------------------------------------------------
-   private static final Logger logger = Logger.getLogger(ActiveMQServerControlImpl.class);
 
    // Attributes ----------------------------------------------------
 
@@ -182,9 +158,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public boolean isStarted() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.isStarted(this.server);
-      }
       clearIO();
       try {
          return server.isStarted();
@@ -195,9 +168,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public String getVersion() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getVersion(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -210,9 +180,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public boolean isBackup() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.isBackup(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -225,9 +192,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public boolean isSharedStore() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.isSharedStore(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -240,9 +204,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public String getBindingsDirectory() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getBindingsDirectory(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -266,9 +227,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public String[] getIncomingInterceptorClassNames() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getIncomingInterceptorClassNames(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -281,9 +239,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public String[] getOutgoingInterceptorClassNames() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getOutgoingInterceptorClassNames(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -296,9 +251,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public int getJournalBufferSize() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getJournalBufferSize(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -311,9 +263,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public int getJournalBufferTimeout() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getJournalBufferTimeout(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -326,9 +275,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public void setFailoverOnServerShutdown(boolean failoverOnServerShutdown) {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.setFailoverOnServerShutdown(this.server, failoverOnServerShutdown);
-      }
       checkStarted();
 
       clearIO();
@@ -344,9 +290,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public boolean isFailoverOnServerShutdown() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.isFailoverOnServerShutdown(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -364,9 +307,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public int getJournalMaxIO() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getJournalMaxIO(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -379,9 +319,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public String getJournalDirectory() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getJournalDirectory(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -394,9 +331,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public int getJournalFileSize() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getJournalFileSize(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -409,9 +343,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public int getJournalMinFiles() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getJournalMinFiles(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -424,9 +355,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public int getJournalCompactMinFiles() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getJournalCompactMinFiles(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -439,9 +367,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public int getJournalCompactPercentage() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getJournalCompactPercentage(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -454,9 +379,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public boolean isPersistenceEnabled() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.isPersistenceEnabled(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -469,9 +391,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public String getJournalType() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getJournalType(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -484,9 +403,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public String getPagingDirectory() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getPagingDirectory(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -499,9 +415,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public int getScheduledThreadPoolMaxSize() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getScheduledThreadPoolMaxSize(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -514,9 +427,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public int getThreadPoolMaxSize() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getThreadPoolMaxSize(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -529,9 +439,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public long getSecurityInvalidationInterval() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getSecurityInvalidationInterval(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -544,9 +451,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public boolean isClustered() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.isClustered(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -559,9 +463,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public boolean isCreateBindingsDir() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.isCreateBindingsDir(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -574,9 +475,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public boolean isCreateJournalDir() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.isCreateJournalDir(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -589,9 +487,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public boolean isJournalSyncNonTransactional() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.isJournalSyncNonTransactional(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -604,9 +499,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public boolean isJournalSyncTransactional() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.isJournalSyncTransactional(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -619,9 +511,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public boolean isSecurityEnabled() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.isSecurityEnabled(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -634,9 +523,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public boolean isAsyncConnectionExecutionEnabled() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.isAsyncConnectionExecutionEnabled(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -649,9 +535,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public int getDiskScanPeriod() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getDiskScanPeriod(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -664,9 +547,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public int getMaxDiskUsage() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getMaxDiskUsage(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -679,9 +559,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public long getGlobalMaxSize() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getGlobalMaxSize(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -692,90 +569,8 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
       }
    }
 
-   @Override
-   public long getAddressMemoryUsage() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getAddressMemoryUsage(this.server);
-      }
-      checkStarted();
-      clearIO();
-      try {
-         //this should not happen but if it does, return -1 to highlight it is not working
-         if (server.getPagingManager() == null) {
-            return -1L;
-         }
-         return server.getPagingManager().getGlobalSize();
-      } finally {
-         blockOnIO();
-      }
-   }
-
-   @Override
-   public long getDiskStoreUsage() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getDiskStoreUsage(this.server);
-      }
-      checkStarted();
-      clearIO();
-      try {
-         //this should not happen but if it does, return -1 to highlight it is not working
-         if (server.getPagingManager() == null) {
-            return -1L;
-         }
-
-         long usableSpace = server.getPagingManager().getDiskUsableSpace();
-         long totalSpace = server.getPagingManager().getDiskTotalSpace();
-
-         return (long) FileStoreMonitor.calculateUsage(usableSpace, totalSpace);
-      } finally {
-         blockOnIO();
-      }
-   }
-
-   @Override
-   public int getAddressMemoryUsagePercentage() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getAddressMemoryUsagePercentage(this.server);
-      }
-      long globalMaxSize = getGlobalMaxSize();
-      // no max size set implies 0% used
-      if (globalMaxSize <= 0) {
-         return 0;
-      }
-
-      long memoryUsed = getAddressMemoryUsage();
-      if (memoryUsed <= 0) {
-         return 0;
-      }
-      double result = (100D * memoryUsed) / globalMaxSize;
-      return (int) result;
-   }
-
-   @Override
-   public int getDiskStoreUsagePercentage() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getDiskStoreUsagePercentage(this.server);
-      }
-      long globalMaxSize = getGlobalMaxSize();
-      // no max size set implies 0% used
-      if (globalMaxSize <= 0) {
-         return 0;
-      }
-
-      long diskUsed = getDiskStoreUsage();
-      if (diskUsed <= 0) {
-         return 0;
-      }
-
-      double result = 100 * calculateUsage(diskUsed, globalMaxSize);
-      return (int) result;
-   }
-
    @Override
    public boolean freezeReplication() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.freezeReplication(this.server);
-      }
       Activation activation = server.getActivation();
       if (activation instanceof SharedNothingLiveActivation) {
          SharedNothingLiveActivation liveActivation = (SharedNothingLiveActivation) activation;
@@ -791,7 +586,7 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
          public StringBuilder format(AddressInfo addressInfo, StringBuilder output) {
             output.append("Address [name=").append(addressInfo.getName());
             output.append(", routingTypes={");
-            final EnumSet<RoutingType> routingTypes = addressInfo.getRoutingTypes();
+            final Set<RoutingType> routingTypes = addressInfo.getRoutingTypes();
             if (!routingTypes.isEmpty()) {
                for (RoutingType routingType : routingTypes) {
                   output.append(routingType).append(',');
@@ -827,14 +622,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
             }
             output.append(", purgeOnNoConsumers=").append(queue.isPurgeOnNoConsumers());
             output.append(", autoCreateAddress=").append(queue.isAutoCreated());
-            output.append(", exclusive=").append(queue.isExclusive());
-            output.append(", lastValue=").append(queue.isLastValue());
-            output.append(", lastValueKey=").append(queue.getLastValueKey());
-            output.append(", nonDestructive=").append(queue.isNonDestructive());
-            output.append(", consumersBeforeDispatch=").append(queue.getConsumersBeforeDispatch());
-            output.append(", delayBeforeDispatch=").append(queue.getDelayBeforeDispatch());
-            output.append(", autoCreateAddress=").append(queue.isAutoCreated());
-
             output.append(']');
             return output;
          }
@@ -845,14 +632,11 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public String createAddress(String name, String routingTypes) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.createAddress(this.server, name, routingTypes);
-      }
       checkStarted();
 
       clearIO();
       try {
-         EnumSet<RoutingType> set = EnumSet.noneOf(RoutingType.class);
+         Set<RoutingType> set = new HashSet<>();
          for (String routingType : ListUtil.toList(routingTypes)) {
             set.add(RoutingType.valueOf(routingType));
          }
@@ -869,18 +653,15 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public String updateAddress(String name, String routingTypes) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.updateAddress(this.server, name, routingTypes);
-      }
       checkStarted();
 
       clearIO();
       try {
-         final EnumSet<RoutingType> routingTypeSet;
+         final Set<RoutingType> routingTypeSet;
          if (routingTypes == null) {
             routingTypeSet = null;
          } else {
-            routingTypeSet = EnumSet.noneOf(RoutingType.class);
+            routingTypeSet = new HashSet<>();
             final String[] routingTypeNames = routingTypes.split(",");
             for (String routingTypeName : routingTypeNames) {
                routingTypeSet.add(RoutingType.valueOf(routingTypeName));
@@ -895,22 +676,13 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
       }
    }
 
-
    @Override
    public void deleteAddress(String name) throws Exception {
-      deleteAddress(name, false);
-   }
-
-   @Override
-   public void deleteAddress(String name, boolean force) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.deleteAddress(this.server, name, force);
-      }
       checkStarted();
 
       clearIO();
       try {
-         server.removeAddressInfo(new SimpleString(name), null, force);
+         server.removeAddressInfo(new SimpleString(name), null);
       } catch (ActiveMQException e) {
          throw new IllegalStateException(e.getMessage());
       } finally {
@@ -930,9 +702,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
                            final String name,
                            final String filterStr,
                            final boolean durable) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.deployQueue(this.server, address, name, filterStr, durable);
-      }
       checkStarted();
 
       SimpleString filter = filterStr == null ? null : new SimpleString(filterStr);
@@ -966,13 +735,13 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public void createQueue(final String address, final String name, final String filterStr, final boolean durable) throws Exception {
-      createQueue(address, name, filterStr, durable, server.getAddressSettingsRepository().getMatch(address == null ? name : address).getDefaultQueueRoutingType().toString());
+      createQueue(address, name, filterStr, durable, server.getAddressSettingsRepository().getMatch(address).getDefaultQueueRoutingType().toString());
    }
 
 
    @Override
    public void createQueue(final String address, final String name, final String filterStr, final boolean durable, final String routingType) throws Exception {
-      AddressSettings addressSettings = server.getAddressSettingsRepository().getMatch(address == null ? name : address);
+      AddressSettings addressSettings = server.getAddressSettingsRepository().getMatch(address);
       createQueue(address, routingType, name, filterStr, durable, addressSettings.getDefaultMaxConsumers(), addressSettings.isDefaultPurgeOnNoConsumers(), addressSettings.isAutoCreateAddresses());
    }
 
@@ -985,190 +754,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
                              int maxConsumers,
                              boolean purgeOnNoConsumers,
                              boolean autoCreateAddress) throws Exception {
-      AddressSettings addressSettings = server.getAddressSettingsRepository().getMatch(address == null ? name : address);
-      return createQueue(
-              address,
-              routingType,
-              name,
-              filterStr,
-              durable,
-              maxConsumers,
-              purgeOnNoConsumers,
-              addressSettings.isDefaultExclusiveQueue(),
-              addressSettings.isDefaultGroupRebalance(),
-              addressSettings.getDefaultGroupBuckets(),
-              addressSettings.isDefaultLastValueQueue(),
-              addressSettings.getDefaultLastValueKey() == null ? null : addressSettings.getDefaultLastValueKey().toString(),
-              addressSettings.isDefaultNonDestructive(),
-              addressSettings.getDefaultConsumersBeforeDispatch(),
-              addressSettings.getDefaultDelayBeforeDispatch(),
-              addressSettings.isAutoDeleteCreatedQueues(),
-              addressSettings.getAutoDeleteQueuesDelay(),
-              addressSettings.getAutoDeleteQueuesMessageCount(),
-              autoCreateAddress
-      );
-   }
-
-   @Override
-   public String createQueue(String address,
-                             String routingType,
-                             String name,
-                             String filterStr,
-                             boolean durable,
-                             int maxConsumers,
-                             boolean purgeOnNoConsumers,
-                             boolean exclusive,
-                             boolean groupRebalance,
-                             int groupBuckets,
-                             boolean lastValue,
-                             String lastValueKey,
-                             boolean nonDestructive,
-                             int consumersBeforeDispatch,
-                             long delayBeforeDispatch,
-                             boolean autoCreateAddress) throws Exception {
-      AddressSettings addressSettings = server.getAddressSettingsRepository().getMatch(address == null ? name : address);
-      return createQueue(
-            address,
-            routingType,
-            name,
-            filterStr,
-            durable,
-            maxConsumers,
-            purgeOnNoConsumers,
-            exclusive,
-            groupRebalance,
-            groupBuckets,
-            lastValue,
-            lastValueKey,
-            nonDestructive,
-            consumersBeforeDispatch,
-            delayBeforeDispatch,
-            addressSettings.isAutoDeleteCreatedQueues(),
-            addressSettings.getAutoDeleteQueuesDelay(),
-            addressSettings.getAutoDeleteQueuesMessageCount(),
-            autoCreateAddress);
-   }
-
-   @Override
-   public String createQueue(String address,
-                             String routingType,
-                             String name,
-                             String filterStr,
-                             boolean durable,
-                             int maxConsumers,
-                             boolean purgeOnNoConsumers,
-                             boolean exclusive,
-                             boolean groupRebalance,
-                             int groupBuckets,
-                             boolean lastValue,
-                             String lastValueKey,
-                             boolean nonDestructive,
-                             int consumersBeforeDispatch,
-                             long delayBeforeDispatch,
-                             boolean autoDelete,
-                             long autoDeleteDelay,
-                             long autoDeleteMessageCount,
-                             boolean autoCreateAddress) throws Exception {
-      AddressSettings addressSettings = server.getAddressSettingsRepository().getMatch(address == null ? name : address);
-      return createQueue(
-            address,
-            routingType,
-            name,
-            filterStr,
-            durable,
-            maxConsumers,
-            purgeOnNoConsumers,
-            exclusive,
-            groupRebalance,
-            groupBuckets,
-            addressSettings.getDefaultGroupFirstKey() == null ? null : addressSettings.getDefaultGroupFirstKey().toString(),
-            lastValue,
-            lastValueKey,
-            nonDestructive,
-            consumersBeforeDispatch,
-            delayBeforeDispatch,
-            autoDelete,
-            autoDeleteDelay,
-            autoDeleteMessageCount,
-            autoCreateAddress
-      );
-   }
-
-   @Override
-   public String createQueue(String address,
-                             String routingType,
-                             String name,
-                             String filterStr,
-                             boolean durable,
-                             int maxConsumers,
-                             boolean purgeOnNoConsumers,
-                             boolean exclusive,
-                             boolean groupRebalance,
-                             int groupBuckets,
-                             String groupFirstKey,
-                             boolean lastValue,
-                             String lastValueKey,
-                             boolean nonDestructive,
-                             int consumersBeforeDispatch,
-                             long delayBeforeDispatch,
-                             boolean autoDelete,
-                             long autoDeleteDelay,
-                             long autoDeleteMessageCount,
-                             boolean autoCreateAddress) throws Exception {
-      AddressSettings addressSettings = server.getAddressSettingsRepository().getMatch(address == null ? name : address);
-      return createQueue(
-         address,
-         routingType,
-         name,
-         filterStr,
-         durable,
-         maxConsumers,
-         purgeOnNoConsumers,
-         exclusive,
-         groupRebalance,
-         groupBuckets,
-         groupFirstKey,
-         lastValue,
-         lastValueKey,
-         nonDestructive,
-         consumersBeforeDispatch,
-         delayBeforeDispatch,
-         autoDelete,
-         autoDeleteDelay,
-         autoDeleteMessageCount,
-         autoCreateAddress,
-         addressSettings.getDefaultRingSize()
-      );
-   }
-
-   @Override
-   public String createQueue(String address,
-                             String routingType,
-                             String name,
-                             String filterStr,
-                             boolean durable,
-                             int maxConsumers,
-                             boolean purgeOnNoConsumers,
-                             boolean exclusive,
-                             boolean groupRebalance,
-                             int groupBuckets,
-                             String groupFirstKey,
-                             boolean lastValue,
-                             String lastValueKey,
-                             boolean nonDestructive,
-                             int consumersBeforeDispatch,
-                             long delayBeforeDispatch,
-                             boolean autoDelete,
-                             long autoDeleteDelay,
-                             long autoDeleteMessageCount,
-                             boolean autoCreateAddress,
-                             long ringSize) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.createQueue(this.server, null, address, routingType, name, filterStr, durable,
-                  maxConsumers, purgeOnNoConsumers, exclusive, groupRebalance, groupBuckets, groupFirstKey,
-                  lastValue, lastValueKey, nonDestructive, consumersBeforeDispatch, delayBeforeDispatch,
-                  autoDelete, autoDeleteDelay, autoDeleteMessageCount, autoCreateAddress, ringSize);
-      }
       checkStarted();
 
       clearIO();
@@ -1179,7 +764,7 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
             filter = new SimpleString(filterStr);
          }
 
-         final Queue queue = server.createQueue(SimpleString.toSimpleString(address), RoutingType.valueOf(routingType.toUpperCase()), SimpleString.toSimpleString(name), filter, durable, false, maxConsumers, purgeOnNoConsumers, exclusive, groupRebalance, groupBuckets, SimpleString.toSimpleString(groupFirstKey), lastValue, SimpleString.toSimpleString(lastValueKey), nonDestructive, consumersBeforeDispatch, delayBeforeDispatch, autoDelete, autoDeleteDelay, autoDeleteMessageCount, autoCreateAddress, ringSize);
+         final Queue queue = server.createQueue(SimpleString.toSimpleString(address), RoutingType.valueOf(routingType.toUpperCase()), new SimpleString(name), filter, durable, false, maxConsumers, purgeOnNoConsumers, autoCreateAddress);
          return QueueTextFormatter.Long.format(queue, new StringBuilder()).toString();
       } catch (ActiveMQException e) {
          throw new IllegalStateException(e.getMessage());
@@ -1188,93 +773,17 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
       }
    }
 
-   @Deprecated
    @Override
    public String updateQueue(String name,
                              String routingType,
                              Integer maxConsumers,
                              Boolean purgeOnNoConsumers) throws Exception {
-      return updateQueue(name, routingType, maxConsumers, purgeOnNoConsumers, null);
-   }
-
-   @Deprecated
-   @Override
-   public String updateQueue(String name,
-                             String routingType,
-                             Integer maxConsumers,
-                             Boolean purgeOnNoConsumers,
-                             Boolean exclusive) throws Exception {
-      return updateQueue(name, routingType, maxConsumers, purgeOnNoConsumers, exclusive, null);
-   }
-
-   @Override
-   public String updateQueue(String name,
-                             String routingType,
-                             Integer maxConsumers,
-                             Boolean purgeOnNoConsumers,
-                             Boolean exclusive,
-                             String user) throws Exception {
-      return updateQueue(name, routingType, null, maxConsumers, purgeOnNoConsumers, exclusive, null, null, null, null, null, user);
-   }
-
-   @Override
-   public String updateQueue(String name,
-                             String routingType,
-                             String filter,
-                             Integer maxConsumers,
-                             Boolean purgeOnNoConsumers,
-                             Boolean exclusive,
-                             Boolean groupRebalance,
-                             Integer groupBuckets,
-                             Boolean nonDestructive,
-                             Integer consumersBeforeDispatch,
-                             Long delayBeforeDispatch,
-                             String user) throws Exception {
-      return updateQueue(name, routingType, filter, maxConsumers, purgeOnNoConsumers, exclusive, groupRebalance, groupBuckets, null, nonDestructive, consumersBeforeDispatch, delayBeforeDispatch, user);
-   }
-
-   @Override
-   public String updateQueue(String name,
-                             String routingType,
-                             String filter,
-                             Integer maxConsumers,
-                             Boolean purgeOnNoConsumers,
-                             Boolean exclusive,
-                             Boolean groupRebalance,
-                             Integer groupBuckets,
-                             String groupFirstKey,
-                             Boolean nonDestructive,
-                             Integer consumersBeforeDispatch,
-                             Long delayBeforeDispatch,
-                             String user) throws Exception {
-      return updateQueue(name, routingType, filter, maxConsumers, purgeOnNoConsumers, exclusive, groupRebalance, groupBuckets, null, nonDestructive, consumersBeforeDispatch, delayBeforeDispatch, user, null);
-   }
-
-   @Override
-   public String updateQueue(String name,
-                             String routingType,
-                             String filter,
-                             Integer maxConsumers,
-                             Boolean purgeOnNoConsumers,
-                             Boolean exclusive,
-                             Boolean groupRebalance,
-                             Integer groupBuckets,
-                             String groupFirstKey,
-                             Boolean nonDestructive,
-                             Integer consumersBeforeDispatch,
-                             Long delayBeforeDispatch,
-                             String user,
-                             Long ringSize) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.updateQueue(this.server, name, routingType, filter, maxConsumers, purgeOnNoConsumers,
-                  exclusive, groupRebalance, groupBuckets, groupFirstKey, nonDestructive, consumersBeforeDispatch, delayBeforeDispatch, user, ringSize);
-      }
       checkStarted();
 
       clearIO();
 
       try {
-         final Queue queue = server.updateQueue(name, routingType != null ? RoutingType.valueOf(routingType) : null, filter, maxConsumers, purgeOnNoConsumers, exclusive, groupRebalance, groupBuckets, groupFirstKey, nonDestructive, consumersBeforeDispatch, delayBeforeDispatch, user);
+         final Queue queue = server.updateQueue(name, routingType != null ? RoutingType.valueOf(routingType) : null, maxConsumers, purgeOnNoConsumers);
          if (queue == null) {
             throw ActiveMQMessageBundle.BUNDLE.noSuchQueue(new SimpleString(name));
          }
@@ -1291,9 +800,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public String[] getQueueNames(String routingType) {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getQueueNames(this.server, routingType);
-      }
       checkStarted();
 
       clearIO();
@@ -1316,32 +822,8 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
       }
    }
 
-   @Override
-   public String[] getClusterConnectionNames() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getClusterConnectionNames(this.server);
-      }
-      checkStarted();
-
-      clearIO();
-      try {
-         List<String> names = new ArrayList<>();
-         for (ClusterConnection clusterConnection : server.getClusterManager().getClusterConnections()) {
-            names.add(clusterConnection.getName().toString());
-         }
-
-         String[] result = new String[names.size()];
-         return names.toArray(result);
-      } finally {
-         blockOnIO();
-      }
-   }
-
    @Override
    public String getUptime() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getUptime(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -1354,9 +836,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public long getUptimeMillis() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getUptimeMillis(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -1369,9 +848,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public boolean isReplicaSync() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.isReplicaSync(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -1384,9 +860,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public String[] getAddressNames() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getAddressNames(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -1397,6 +870,7 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
             AddressControl address = (AddressControl) addresses[i];
             names[i] = address.getAddress();
          }
+
          return names;
       } finally {
          blockOnIO();
@@ -1405,9 +879,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public void destroyQueue(final String name, final boolean removeConsumers, final boolean autoDeleteAddress) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.destroyQueue(this.server, null, name, removeConsumers, autoDeleteAddress);
-      }
       checkStarted();
 
       clearIO();
@@ -1431,9 +902,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public String getAddressInfo(String address) throws ActiveMQAddressDoesNotExistException {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getAddressInfo(this.server, address);
-      }
       checkStarted();
 
       clearIO();
@@ -1451,15 +919,12 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public String listBindingsForAddress(String address) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listBindingsForAddress(this.server, address);
-      }
       checkStarted();
 
       clearIO();
       try {
-         final Bindings bindings = server.getPostOffice().lookupBindingsForAddress(new SimpleString(address));
-         return bindings == null ? "" : bindings.getBindings().stream().map(Binding::toManagementString).collect(Collectors.joining(","));
+         final Bindings bindings = server.getPostOffice().getBindingsForAddress(new SimpleString(address));
+         return bindings.getBindings().stream().map(Binding::toManagementString).collect(Collectors.joining(","));
       } finally {
          blockOnIO();
       }
@@ -1468,9 +933,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public String listAddresses(String separator) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listAddresses(this.server, separator);
-      }
       checkStarted();
 
       clearIO();
@@ -1501,9 +963,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public int getConnectionCount() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getConnectionCount(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -1516,9 +975,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public long getTotalConnectionCount() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getTotalConnectionCount(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -1531,9 +987,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public long getTotalMessageCount() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getTotalMessageCount(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -1546,9 +999,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public long getTotalMessagesAdded() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getTotalMessagesAdded(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -1561,9 +1011,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public long getTotalMessagesAcknowledged() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getTotalMessagesAcknowledged(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -1576,9 +1023,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public long getTotalConsumerCount() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getTotalConsumerCount(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -1591,9 +1035,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public void enableMessageCounters() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.enableMessageCounters(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -1606,9 +1047,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public void disableMessageCounters() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.disableMessageCounters(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -1621,9 +1059,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public void resetAllMessageCounters() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.resetAllMessageCounters(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -1636,9 +1071,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public void resetAllMessageCounterHistories() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.resetAllMessageCounterHistories(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -1651,9 +1083,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public boolean isMessageCounterEnabled() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.isMessageCounterEnabled(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -1666,9 +1095,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public synchronized long getMessageCounterSamplePeriod() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getMessageCounterSamplePeriod(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -1681,9 +1107,7 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public synchronized void setMessageCounterSamplePeriod(final long newPeriod) {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.setMessageCounterSamplePeriod(this.server, newPeriod);
-      }
+      checkStarted();
 
       checkStarted();
 
@@ -1706,9 +1130,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public int getMessageCounterMaxDayCount() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getMessageCounterMaxDayCount(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -1721,9 +1142,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public void setMessageCounterMaxDayCount(final int count) {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.setMessageCounterMaxDayCount(this.server, count);
-      }
       checkStarted();
 
       clearIO();
@@ -1739,9 +1157,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public String[] listPreparedTransactions() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listPreparedTransactions(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -1754,7 +1169,7 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
             @Override
             public int compare(final Entry<Xid, Long> entry1, final Entry<Xid, Long> entry2) {
                // sort by creation time, oldest first
-               return entry1.getValue().compareTo(entry2.getValue());
+               return (int) (entry1.getValue() - entry2.getValue());
             }
          });
          String[] s = new String[xidsSortedByCreationTime.size()];
@@ -1772,13 +1187,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public String listPreparedTransactionDetailsAsJSON() throws Exception {
-      return listPreparedTransactionDetailsAsJSON((xid, tx, creation) -> new CoreTransactionDetail(xid, tx, creation));
-   }
-
-   public String listPreparedTransactionDetailsAsJSON(TransactionDetailFactory factory) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listPreparedTransactionDetailsAsJSON(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -1793,7 +1201,7 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
             @Override
             public int compare(final Entry<Xid, Long> entry1, final Entry<Xid, Long> entry2) {
                // sort by creation time, oldest first
-               return entry1.getValue().compareTo(entry2.getValue());
+               return (int) (entry1.getValue() - entry2.getValue());
             }
          });
 
@@ -1807,7 +1215,7 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
                continue;
             }
 
-            TransactionDetail detail = factory.createTransactionDetail(xid, tx, entry.getValue());
+            TransactionDetail detail = new CoreTransactionDetail(xid, tx, entry.getValue());
 
             txDetailListJson.add(detail.toJSON());
          }
@@ -1819,13 +1227,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public String listPreparedTransactionDetailsAsHTML() throws Exception {
-      return listPreparedTransactionDetailsAsHTML((xid, tx, creation) -> new CoreTransactionDetail(xid, tx, creation));
-   }
-
-   public String listPreparedTransactionDetailsAsHTML(TransactionDetailFactory factory) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listPreparedTransactionDetailsAsHTML(this.server, factory);
-      }
       checkStarted();
 
       clearIO();
@@ -1840,7 +1241,7 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
             @Override
             public int compare(final Entry<Xid, Long> entry1, final Entry<Xid, Long> entry2) {
                // sort by creation time, oldest first
-               return entry1.getValue().compareTo(entry2.getValue());
+               return (int) (entry1.getValue() - entry2.getValue());
             }
          });
 
@@ -1856,7 +1257,7 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
                continue;
             }
 
-            TransactionDetail detail = factory.createTransactionDetail(xid, tx, entry.getValue());
+            TransactionDetail detail = new CoreTransactionDetail(xid, tx, entry.getValue());
 
             JsonObject txJson = detail.toJSON();
 
@@ -1908,9 +1309,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public String[] listHeuristicCommittedTransactions() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listHeuristicCommittedTransactions(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -1929,9 +1327,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public String[] listHeuristicRolledBackTransactions() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listHeuristicRolledBackTransactions(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -1950,9 +1345,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public synchronized boolean commitPreparedTransaction(final String transactionAsBase64) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.commitPreparedTransaction(this.server, transactionAsBase64);
-      }
       checkStarted();
 
       clearIO();
@@ -1977,9 +1369,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public synchronized boolean rollbackPreparedTransaction(final String transactionAsBase64) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.rollbackPreparedTransaction(this.server, transactionAsBase64);
-      }
       checkStarted();
 
       clearIO();
@@ -2005,9 +1394,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public String[] listRemoteAddresses() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listRemoteAddresses(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -2028,9 +1414,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public String[] listRemoteAddresses(final String ipAddress) {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listRemoteAddresses(this.server, ipAddress);
-      }
       checkStarted();
 
       clearIO();
@@ -2052,9 +1435,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public boolean closeConnectionsForAddress(final String ipAddress) {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.closeConnectionsForAddress(this.server, ipAddress);
-      }
       checkStarted();
 
       clearIO();
@@ -2079,9 +1459,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public boolean closeConsumerConnectionsForAddress(final String address) {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.closeConsumerConnectionsForAddress(this.server, address);
-      }
       boolean closed = false;
       checkStarted();
 
@@ -2120,9 +1497,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public boolean closeConnectionsForUser(final String userName) {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.closeConnectionsForUser(this.server, userName);
-      }
       boolean closed = false;
       checkStarted();
 
@@ -2152,270 +1526,57 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
    }
 
    @Override
-   public boolean closeConnectionWithID(final String ID) {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.closeConnectionWithID(this.server, ID);
-      }
+   public String[] listConnectionIDs() {
       checkStarted();
 
       clearIO();
       try {
-         for (RemotingConnection connection : remotingService.getConnections()) {
-            if (connection.getID().toString().equals(ID)) {
-               remotingService.removeConnection(connection.getID());
-               connection.fail(ActiveMQMessageBundle.BUNDLE.connectionWithIDClosedByManagement(ID));
-               return true;
-            }
+         Set<RemotingConnection> connections = remotingService.getConnections();
+         String[] connectionIDs = new String[connections.size()];
+         int i = 0;
+         for (RemotingConnection connection : connections) {
+            connectionIDs[i++] = connection.getID().toString();
          }
+         return connectionIDs;
       } finally {
          blockOnIO();
       }
-      return false;
    }
 
    @Override
-   public boolean closeSessionWithID(final String connectionID, final String ID) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.closeSessionWithID(this.server, connectionID, ID);
-      }
+   public String[] listSessions(final String connectionID) {
       checkStarted();
 
       clearIO();
       try {
          List<ServerSession> sessions = server.getSessions(connectionID);
-         for (ServerSession session : sessions) {
-            if (session.getName().equals(ID.toString())) {
-               session.close(true);
-               return true;
-            }
+         String[] sessionIDs = new String[sessions.size()];
+         int i = 0;
+         for (ServerSession serverSession : sessions) {
+            sessionIDs[i++] = serverSession.getName();
          }
-
+         return sessionIDs;
       } finally {
          blockOnIO();
       }
-      return false;
    }
 
+   /* (non-Javadoc)
+   * @see org.apache.activemq.artemis.api.core.management.ActiveMQServerControl#listProducersInfoAsJSON()
+   */
    @Override
-   public boolean closeConsumerWithID(final String sessionID, final String ID) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.closeConsumerWithID(this.server, sessionID, ID);
-      }
-      checkStarted();
-
-      clearIO();
-      try {
-         Set<ServerSession> sessions = server.getSessions();
-         for (ServerSession session : sessions) {
-            if (session.getName().equals(sessionID.toString())) {
-               Set<ServerConsumer> serverConsumers = session.getServerConsumers();
-               for (ServerConsumer serverConsumer : serverConsumers) {
-                  if (serverConsumer.sequentialID() == Long.valueOf(ID)) {
-                     serverConsumer.disconnect();
-                     return true;
-                  }
-               }
-            }
-         }
-
-      } finally {
-         blockOnIO();
-      }
-      return false;
-   }
-
-   @Override
-   public String[] listConnectionIDs() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listConnectionIDs(this.server);
-      }
-      checkStarted();
-
-      clearIO();
-      try {
-         Set<RemotingConnection> connections = remotingService.getConnections();
-         String[] connectionIDs = new String[connections.size()];
-         int i = 0;
-         for (RemotingConnection connection : connections) {
-            connectionIDs[i++] = connection.getID().toString();
-         }
-         return connectionIDs;
-      } finally {
-         blockOnIO();
-      }
-   }
-
-   @Override
-   public String[] listSessions(final String connectionID) {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listSessions(this.server, connectionID);
-      }
-      checkStarted();
-
-      clearIO();
-      try {
-         List<ServerSession> sessions = server.getSessions(connectionID);
-         String[] sessionIDs = new String[sessions.size()];
-         int i = 0;
-         for (ServerSession serverSession : sessions) {
-            sessionIDs[i++] = serverSession.getName();
-         }
-         return sessionIDs;
-      } finally {
-         blockOnIO();
-      }
-   }
-
-   /* (non-Javadoc)
-    * @see org.apache.activemq.artemis.api.core.management.ActiveMQServerControl#listProducersInfoAsJSON()
-    */
-   @Override
-   public String listProducersInfoAsJSON() throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listProducersInfoAsJSON(this.server);
-      }
-      JsonArrayBuilder producers = JsonLoader.createArrayBuilder();
-
-      for (ServerSession session : server.getSessions()) {
-         session.describeProducersInfo(producers);
-      }
-
-      return producers.build().toString();
-   }
-
-   @Override
-   public String listConnections(String options, int page, int pageSize) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listConnections(this.server, options, page, pageSize);
-      }
-      checkStarted();
-      clearIO();
-      try {
-         server.getPostOffice().getAddresses();
-         ConnectionView view = new ConnectionView(server);
-         view.setCollection(server.getRemotingService().getConnections());
-         view.setOptions(options);
-         return view.getResultsAsJson(page, pageSize);
-      } finally {
-         blockOnIO();
-      }
-   }
-
-   @Override
-   public String listSessions(String options, int page, int pageSize) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listSessions(this.server, options, page, pageSize);
-      }
-      checkStarted();
-      clearIO();
-      try {
-         SessionView view = new SessionView();
-         view.setCollection(server.getSessions());
-         view.setOptions(options);
-         return view.getResultsAsJson(page, pageSize);
-      } finally {
-         blockOnIO();
-      }
-   }
-
-   @Override
-   public String listConsumers(String options, int page, int pageSize) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listConsumers(this.server, options, page, pageSize);
-      }
-      checkStarted();
-      clearIO();
-      try {
-         Set<ServerConsumer> consumers = new HashSet();
-         for (ServerSession session : server.getSessions()) {
-            consumers.addAll(session.getServerConsumers());
-         }
-         ConsumerView view = new ConsumerView(server);
-         view.setCollection(consumers);
-         view.setOptions(options);
-         return view.getResultsAsJson(page, pageSize);
-      } finally {
-         blockOnIO();
-      }
-   }
-
-   @Override
-   public String listAddresses(String options, int page, int pageSize) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listAddresses(this.server, options, page, pageSize);
-      }
-      checkStarted();
-      clearIO();
-      try {
-         final Set<SimpleString> addresses = server.getPostOffice().getAddresses();
-         List<AddressInfo> addressInfo = new ArrayList<>();
-         for (SimpleString address : addresses) {
-            AddressInfo info = server.getPostOffice().getAddressInfo(address);
-            //ignore if no longer available
-            if (info != null) {
-               addressInfo.add(info);
-            }
-         }
-         AddressView view = new AddressView(server);
-         view.setCollection(addressInfo);
-         view.setOptions(options);
-         return view.getResultsAsJson(page, pageSize);
-      } finally {
-         blockOnIO();
-      }
-   }
-
-   @Override
-   public String listQueues(String options, int page, int pageSize) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listQueues(this.server, options, page, pageSize);
-      }
-      checkStarted();
-
-      clearIO();
-      try {
-         List<QueueControl> queues = new ArrayList<>();
-         Object[] qs = server.getManagementService().getResources(QueueControl.class);
-         for (int i = 0; i < qs.length; i++) {
-            queues.add((QueueControl) qs[i]);
-         }
-         QueueView view = new QueueView(server);
-         view.setCollection(queues);
-         view.setOptions(options);
-         return view.getResultsAsJson(page, pageSize);
-      } finally {
-         blockOnIO();
-      }
-   }
-
-   @Override
-   public String listProducers(@Parameter(name = "Options") String options,
-                               @Parameter(name = "Page Number") int page,
-                               @Parameter(name = "Page Size") int pageSize) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listProducers(this.server, options, page, pageSize);
-      }
-      checkStarted();
-      clearIO();
-      try {
-         Set<ServerProducer> producers = new HashSet<>();
-         for (ServerSession session : server.getSessions()) {
-            producers.addAll(session.getServerProducers().values());
-         }
-         ProducerView view = new ProducerView(server);
-         view.setCollection(producers);
-         view.setOptions(options);
-         return view.getResultsAsJson(page, pageSize);
-      } finally {
-         blockOnIO();
-      }
-   }
-
-   @Override
-   public String listConnectionsAsJSON() throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listConnectionsAsJSON(this.server);
+   public String listProducersInfoAsJSON() throws Exception {
+      JsonArrayBuilder producers = JsonLoader.createArrayBuilder();
+
+      for (ServerSession session : server.getSessions()) {
+         session.describeProducersInfo(producers);
       }
+
+      return producers.build().toString();
+   }
+
+   @Override
+   public String listConnectionsAsJSON() throws Exception {
       checkStarted();
 
       clearIO();
@@ -2437,9 +1598,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public String listSessionsAsJSON(final String connectionID) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listSessionsAsJSON(this.server, connectionID);
-      }
       checkStarted();
 
       clearIO();
@@ -2448,28 +1606,13 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
       try {
          List<ServerSession> sessions = server.getSessions(connectionID);
          for (ServerSession sess : sessions) {
-            buildSessionJSON(array, sess);
-         }
-      } finally {
-         blockOnIO();
-      }
-      return array.build().toString();
-   }
-
-   @Override
-   public String listAllSessionsAsJSON() throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listAllSessionsAsJSON(this.server);
-      }
-      checkStarted();
+            JsonObjectBuilder obj = JsonLoader.createObjectBuilder().add("sessionID", sess.getName()).add("creationTime", sess.getCreationTime()).add("consumerCount", sess.getServerConsumers().size());
 
-      clearIO();
+            if (sess.getValidatedUser() != null) {
+               obj.add("principal", sess.getValidatedUser());
+            }
 
-      JsonArrayBuilder array = JsonLoader.createArrayBuilder();
-      try {
-         Set<ServerSession> sessions = server.getSessions();
-         for (ServerSession sess : sessions) {
-            buildSessionJSON(array, sess);
+            array.add(obj);
          }
       } finally {
          blockOnIO();
@@ -2477,29 +1620,8 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
       return array.build().toString();
    }
 
-   public void buildSessionJSON(JsonArrayBuilder array, ServerSession sess) {
-      JsonObjectBuilder obj = JsonLoader.createObjectBuilder().add("sessionID", sess.getName()).add("creationTime", sess.getCreationTime()).add("consumerCount", sess.getServerConsumers().size());
-
-      if (sess.getValidatedUser() != null) {
-         obj.add("principal", sess.getValidatedUser());
-      }
-
-      if (sess.getMetaData() != null) {
-         final JsonObjectBuilder metadata = JsonLoader.createObjectBuilder();
-         for (Entry<String, String> entry : sess.getMetaData().entrySet()) {
-            metadata.add(entry.getKey(), entry.getValue());
-         }
-         obj.add("metadata", metadata);
-      }
-
-      array.add(obj);
-   }
-
    @Override
    public String listConsumersAsJSON(String connectionID) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listConsumersAsJSON(this.server, connectionID);
-      }
       checkStarted();
 
       clearIO();
@@ -2530,9 +1652,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public String listAllConsumersAsJSON() throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listAllConsumersAsJSON(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -2567,9 +1686,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public Object[] getConnectors() throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getConnectors(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -2588,6 +1704,7 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
             ret[i++] = tc;
          }
+
          return ret;
       } finally {
          blockOnIO();
@@ -2596,9 +1713,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public String getConnectorsAsJSON() throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getConnectorsAsJSON(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -2652,11 +1766,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
                                    final String browseRoles,
                                    final String createAddressRoles,
                                    final String deleteAddressRoles) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.addSecuritySettings(this.server, addressMatch, sendRoles, consumeRoles, createDurableQueueRoles,
-                  deleteDurableQueueRoles, createNonDurableQueueRoles, deleteNonDurableQueueRoles, manageRoles,
-                  browseRoles, createAddressRoles, deleteAddressRoles);
-      }
       checkStarted();
 
       clearIO();
@@ -2675,9 +1784,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public void removeSecuritySettings(final String addressMatch) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.removeSecuritySettings(this.server, addressMatch);
-      }
       checkStarted();
 
       clearIO();
@@ -2691,9 +1797,7 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public Object[] getRoles(final String addressMatch) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getRoles(this.server, addressMatch);
-      }
+      checkStarted();
 
       checkStarted();
 
@@ -2715,9 +1819,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public String getRolesAsJSON(final String addressMatch) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getRolesAsJSON(this.server, addressMatch);
-      }
       checkStarted();
 
       clearIO();
@@ -2736,9 +1837,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public String getAddressSettingsAsJSON(final String address) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getAddressSettingsAsJSON(this.server, address);
-      }
       checkStarted();
 
       AddressSettings addressSettings = server.getAddressSettingsRepository().getMatch(address);
@@ -2751,7 +1849,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
       if (addressSettings.getExpiryAddress() != null) {
          settings.add("expiryAddress", addressSettings.getExpiryAddress().toString());
       }
-
       return settings.add("expiryDelay", addressSettings.getExpiryDelay())
             .add("maxDeliveryAttempts", addressSettings.getMaxDeliveryAttempts())
             .add("pageCacheMaxSize", addressSettings.getPageCacheMaxSize())
@@ -2761,49 +1858,20 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
             .add("redeliveryMultiplier", addressSettings.getRedeliveryMultiplier())
             .add("maxRedeliveryDelay", addressSettings.getMaxRedeliveryDelay())
             .add("redistributionDelay", addressSettings.getRedistributionDelay())
-            .add("lastValueQueue", addressSettings.isDefaultLastValueQueue())
+            .add("lastValueQueue", addressSettings.isLastValueQueue())
             .add("sendToDLAOnNoRoute", addressSettings.isSendToDLAOnNoRoute())
             .add("addressFullMessagePolicy", policy)
             .add("slowConsumerThreshold", addressSettings.getSlowConsumerThreshold())
             .add("slowConsumerCheckPeriod", addressSettings.getSlowConsumerCheckPeriod())
             .add("slowConsumerPolicy", consumerPolicy)
             .add("autoCreateJmsQueues", addressSettings.isAutoCreateJmsQueues())
-            .add("autoDeleteJmsQueues", addressSettings.isAutoDeleteJmsQueues())
             .add("autoCreateJmsTopics", addressSettings.isAutoCreateJmsTopics())
-            .add("autoDeleteJmsTopics", addressSettings.isAutoDeleteJmsTopics())
+            .add("autoDeleteJmsQueues", addressSettings.isAutoDeleteJmsQueues())
+            .add("autoDeleteJmsTopics", addressSettings.isAutoDeleteJmsQueues())
             .add("autoCreateQueues", addressSettings.isAutoCreateQueues())
             .add("autoDeleteQueues", addressSettings.isAutoDeleteQueues())
-            .add("autoCreateAddresses", addressSettings.isAutoCreateAddresses())
-            .add("autoDeleteAddresses", addressSettings.isAutoDeleteAddresses())
-            .add("configDeleteQueues", addressSettings.getConfigDeleteQueues().toString())
-            .add("configDeleteAddresses", addressSettings.getConfigDeleteAddresses().toString())
-            .add("maxSizeBytesRejectThreshold", addressSettings.getMaxSizeBytesRejectThreshold())
-            .add("defaultLastValueKey", addressSettings.getDefaultLastValueKey() == null ? "" : addressSettings.getDefaultLastValueKey().toString())
-            .add("defaultNonDestructive", addressSettings.isDefaultNonDestructive())
-            .add("defaultExclusiveQueue", addressSettings.isDefaultExclusiveQueue())
-            .add("defaultGroupRebalance", addressSettings.isDefaultGroupRebalance())
-            .add("defaultGroupBuckets", addressSettings.getDefaultGroupBuckets())
-            .add("defaultGroupFirstKey", addressSettings.getDefaultGroupFirstKey() == null ? "" : addressSettings.getDefaultGroupFirstKey().toString())
-            .add("defaultMaxConsumers", addressSettings.getDefaultMaxConsumers())
-            .add("defaultPurgeOnNoConsumers", addressSettings.isDefaultPurgeOnNoConsumers())
-            .add("defaultConsumersBeforeDispatch", addressSettings.getDefaultConsumersBeforeDispatch())
-            .add("defaultDelayBeforeDispatch", addressSettings.getDefaultDelayBeforeDispatch())
-            .add("defaultQueueRoutingType", addressSettings.getDefaultQueueRoutingType().toString())
-            .add("defaultAddressRoutingType", addressSettings.getDefaultAddressRoutingType().toString())
-            .add("defaultConsumerWindowSize", addressSettings.getDefaultConsumerWindowSize())
-            .add("defaultRingSize", addressSettings.getDefaultRingSize())
-            .add("autoDeleteCreatedQueues", addressSettings.isAutoDeleteCreatedQueues())
-            .add("autoDeleteQueuesDelay", addressSettings.getAutoDeleteQueuesDelay())
-            .add("autoDeleteQueuesMessageCount", addressSettings.getAutoDeleteQueuesMessageCount())
-            .add("autoDeleteAddressesDelay", addressSettings.getAutoDeleteAddressesDelay())
-            .add("redeliveryCollisionAvoidanceFactor", addressSettings.getRedeliveryCollisionAvoidanceFactor())
-            .add("retroactiveMessageCount", addressSettings.getRetroactiveMessageCount())
-            .add("autoCreateDeadLetterResources", addressSettings.isAutoCreateDeadLetterResources())
-            .add("deadLetterQueuePrefix", addressSettings.getDeadLetterQueuePrefix().toString())
-            .add("deadLetterQueueSuffix", addressSettings.getDeadLetterQueueSuffix().toString())
-            .add("autoCreateExpiryResources", addressSettings.isAutoCreateExpiryResources())
-            .add("expiryQueuePrefix", addressSettings.getExpiryQueuePrefix().toString())
-            .add("expiryQueueSuffix", addressSettings.getExpiryQueueSuffix().toString())
+            .add("autoCreateAddress", addressSettings.isAutoCreateAddresses())
+            .add("autoDeleteAddress", addressSettings.isAutoDeleteAddresses())
             .build()
             .toString();
    }
@@ -2831,32 +1899,7 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
                                   final boolean autoDeleteJmsQueues,
                                   final boolean autoCreateJmsTopics,
                                   final boolean autoDeleteJmsTopics) throws Exception {
-      addAddressSettings(address,
-                         DLA,
-                         expiryAddress,
-                         expiryDelay,
-                         lastValueQueue,
-                         deliveryAttempts,
-                         maxSizeBytes,
-                         pageSizeBytes,
-                         pageMaxCacheSize,
-                         redeliveryDelay,
-                         redeliveryMultiplier,
-                         maxRedeliveryDelay,
-                         redistributionDelay,
-                         sendToDLAOnNoRoute,
-                         addressFullMessagePolicy,
-                         slowConsumerThreshold,
-                         slowConsumerCheckPeriod,
-                         slowConsumerPolicy,
-                         autoCreateJmsQueues,
-                         autoDeleteJmsQueues,
-                         autoCreateJmsTopics,
-                         autoDeleteJmsTopics,
-                         AddressSettings.DEFAULT_AUTO_CREATE_QUEUES,
-                         AddressSettings.DEFAULT_AUTO_DELETE_QUEUES,
-                         AddressSettings.DEFAULT_AUTO_CREATE_ADDRESSES,
-                         AddressSettings.DEFAULT_AUTO_DELETE_ADDRESSES);
+      addAddressSettings(address, DLA, expiryAddress, expiryDelay, lastValueQueue, deliveryAttempts, maxSizeBytes, pageSizeBytes, pageMaxCacheSize, redeliveryDelay, redeliveryMultiplier, maxRedeliveryDelay, redistributionDelay, sendToDLAOnNoRoute, addressFullMessagePolicy, slowConsumerThreshold, slowConsumerCheckPeriod, slowConsumerPolicy, autoCreateJmsQueues, autoDeleteJmsQueues, autoCreateJmsTopics, autoDeleteJmsTopics, AddressSettings.DEFAULT_AUTO_CREATE_QUEUES, AddressSettings.DEFAULT_AUTO_DELETE_QUEUES, AddressSettings.DEFAULT_AUTO_CREATE_ADDRESSES, AddressSettings.DEFAULT_AUTO_DELETE_ADDRESSES);
    }
 
    @Override
@@ -2864,8 +1907,8 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
                                   final String DLA,
                                   final String expiryAddress,
                                   final long expiryDelay,
-                                  final boolean defaultLastValueQueue,
-                                  final int maxDeliveryAttempts,
+                                  final boolean lastValueQueue,
+                                  final int deliveryAttempts,
                                   final long maxSizeBytes,
                                   final int pageSizeBytes,
                                   final int pageMaxCacheSize,
@@ -2886,235 +1929,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
                                   final boolean autoDeleteQueues,
                                   final boolean autoCreateAddresses,
                                   final boolean autoDeleteAddresses) throws Exception {
-      addAddressSettings(address,
-                         DLA,
-                         expiryAddress,
-                         expiryDelay,
-                         defaultLastValueQueue,
-                         maxDeliveryAttempts,
-                         maxSizeBytes,
-                         pageSizeBytes,
-                         pageMaxCacheSize,
-                         redeliveryDelay,
-                         redeliveryMultiplier,
-                         maxRedeliveryDelay,
-                         redistributionDelay,
-                         sendToDLAOnNoRoute,
-                         addressFullMessagePolicy,
-                         slowConsumerThreshold,
-                         slowConsumerCheckPeriod,
-                         slowConsumerPolicy,
-                         autoCreateJmsQueues,
-                         autoDeleteJmsQueues,
-                         autoCreateJmsTopics,
-                         autoDeleteJmsTopics,
-                         autoCreateQueues,
-                         autoDeleteQueues,
-                         autoCreateAddresses,
-                         autoDeleteAddresses,
-                         AddressSettings.DEFAULT_CONFIG_DELETE_QUEUES.toString(),
-                         AddressSettings.DEFAULT_CONFIG_DELETE_ADDRESSES.toString(),
-                         AddressSettings.DEFAULT_ADDRESS_REJECT_THRESHOLD,
-                         ActiveMQDefaultConfiguration.getDefaultLastValueKey() == null ? null : ActiveMQDefaultConfiguration.getDefaultLastValueKey().toString(),
-                         ActiveMQDefaultConfiguration.getDefaultNonDestructive(),
-                         ActiveMQDefaultConfiguration.getDefaultExclusive(),
-                         ActiveMQDefaultConfiguration.getDefaultGroupRebalance(),
-                         ActiveMQDefaultConfiguration.getDefaultGroupBuckets(),
-                         ActiveMQDefaultConfiguration.getDefaultGroupFirstKey() == null ? null : ActiveMQDefaultConfiguration.getDefaultGroupFirstKey().toString(),
-                         ActiveMQDefaultConfiguration.getDefaultMaxQueueConsumers(),
-                         ActiveMQDefaultConfiguration.getDefaultPurgeOnNoConsumers(),
-                         ActiveMQDefaultConfiguration.getDefaultConsumersBeforeDispatch(),
-                         ActiveMQDefaultConfiguration.getDefaultDelayBeforeDispatch(),
-                         ActiveMQDefaultConfiguration.getDefaultRoutingType().toString(),
-                         ActiveMQDefaultConfiguration.getDefaultRoutingType().toString(),
-                         ActiveMQClient.DEFAULT_CONSUMER_WINDOW_SIZE,
-                         ActiveMQDefaultConfiguration.getDefaultRingSize(),
-                         AddressSettings.DEFAULT_AUTO_DELETE_CREATED_QUEUES,
-                         AddressSettings.DEFAULT_AUTO_DELETE_QUEUES_DELAY,
-                         AddressSettings.DEFAULT_AUTO_DELETE_QUEUES_MESSAGE_COUNT,
-                         AddressSettings.DEFAULT_AUTO_DELETE_ADDRESSES_DELAY,
-                         AddressSettings.DEFAULT_REDELIVER_COLLISION_AVOIDANCE_FACTOR,
-                         ActiveMQDefaultConfiguration.getDefaultRetroactiveMessageCount());
-   }
-
-   @Override
-   public void addAddressSettings(final String address,
-                                  final String DLA,
-                                  final String expiryAddress,
-                                  final long expiryDelay,
-                                  final boolean defaultLastValueQueue,
-                                  final int maxDeliveryAttempts,
-                                  final long maxSizeBytes,
-                                  final int pageSizeBytes,
-                                  final int pageMaxCacheSize,
-                                  final long redeliveryDelay,
-                                  final double redeliveryMultiplier,
-                                  final long maxRedeliveryDelay,
-                                  final long redistributionDelay,
-                                  final boolean sendToDLAOnNoRoute,
-                                  final String addressFullMessagePolicy,
-                                  final long slowConsumerThreshold,
-                                  final long slowConsumerCheckPeriod,
-                                  final String slowConsumerPolicy,
-                                  final boolean autoCreateJmsQueues,
-                                  final boolean autoDeleteJmsQueues,
-                                  final boolean autoCreateJmsTopics,
-                                  final boolean autoDeleteJmsTopics,
-                                  final boolean autoCreateQueues,
-                                  final boolean autoDeleteQueues,
-                                  final boolean autoCreateAddresses,
-                                  final boolean autoDeleteAddresses,
-                                  final String configDeleteQueues,
-                                  final String configDeleteAddresses,
-                                  final long maxSizeBytesRejectThreshold,
-                                  final String defaultLastValueKey,
-                                  final boolean defaultNonDestructive,
-                                  final boolean defaultExclusiveQueue,
-                                  final boolean defaultGroupRebalance,
-                                  final int defaultGroupBuckets,
-                                  final String defaultGroupFirstKey,
-                                  final int defaultMaxConsumers,
-                                  final boolean defaultPurgeOnNoConsumers,
-                                  final int defaultConsumersBeforeDispatch,
-                                  final long defaultDelayBeforeDispatch,
-                                  final String defaultQueueRoutingType,
-                                  final String defaultAddressRoutingType,
-                                  final int defaultConsumerWindowSize,
-                                  final long defaultRingSize,
-                                  final boolean autoDeleteCreatedQueues,
-                                  final long autoDeleteQueuesDelay,
-                                  final long autoDeleteQueuesMessageCount,
-                                  final long autoDeleteAddressesDelay,
-                                  final double redeliveryCollisionAvoidanceFactor,
-                                  final long retroactiveMessageCount) throws Exception {
-      addAddressSettings(address,
-                         DLA,
-                         expiryAddress,
-                         expiryDelay,
-                         defaultLastValueQueue,
-                         maxDeliveryAttempts,
-                         maxSizeBytes,
-                         pageSizeBytes,
-                         pageMaxCacheSize,
-                         redeliveryDelay,
-                         redeliveryMultiplier,
-                         maxRedeliveryDelay,
-                         redistributionDelay,
-                         sendToDLAOnNoRoute,
-                         addressFullMessagePolicy,
-                         slowConsumerThreshold,
-                         slowConsumerCheckPeriod,
-                         slowConsumerPolicy,
-                         autoCreateJmsQueues,
-                         autoDeleteJmsQueues,
-                         autoCreateJmsTopics,
-                         autoDeleteJmsTopics,
-                         autoCreateQueues,
-                         autoDeleteQueues,
-                         autoCreateAddresses,
-                         autoDeleteAddresses,
-                         configDeleteQueues,
-                         configDeleteAddresses,
-                         maxSizeBytesRejectThreshold,
-                         defaultLastValueKey,
-                         defaultNonDestructive,
-                         defaultExclusiveQueue,
-                         defaultGroupRebalance,
-                         defaultGroupBuckets,
-                         defaultGroupFirstKey,
-                         defaultMaxConsumers,
-                         defaultPurgeOnNoConsumers,
-                         defaultConsumersBeforeDispatch,
-                         defaultDelayBeforeDispatch,
-                         defaultQueueRoutingType,
-                         defaultAddressRoutingType,
-                         defaultConsumerWindowSize,
-                         defaultRingSize,
-                         autoDeleteCreatedQueues,
-                         autoDeleteQueuesDelay,
-                         autoDeleteQueuesMessageCount,
-                         autoDeleteAddressesDelay,
-                         redeliveryCollisionAvoidanceFactor,
-                         retroactiveMessageCount,
-                         AddressSettings.DEFAULT_AUTO_CREATE_DEAD_LETTER_RESOURCES,
-                         AddressSettings.DEFAULT_DEAD_LETTER_QUEUE_PREFIX.toString(),
-                         AddressSettings.DEFAULT_DEAD_LETTER_QUEUE_SUFFIX.toString(),
-                         AddressSettings.DEFAULT_AUTO_CREATE_EXPIRY_RESOURCES,
-                         AddressSettings.DEFAULT_EXPIRY_QUEUE_PREFIX.toString(),
-                         AddressSettings.DEFAULT_EXPIRY_QUEUE_SUFFIX.toString());
-   }
-
-   @Override
-   public void addAddressSettings(final String address,
-                                  final String DLA,
-                                  final String expiryAddress,
-                                  final long expiryDelay,
-                                  final boolean defaultLastValueQueue,
-                                  final int maxDeliveryAttempts,
-                                  final long maxSizeBytes,
-                                  final int pageSizeBytes,
-                                  final int pageMaxCacheSize,
-                                  final long redeliveryDelay,
-                                  final double redeliveryMultiplier,
-                                  final long maxRedeliveryDelay,
-                                  final long redistributionDelay,
-                                  final boolean sendToDLAOnNoRoute,
-                                  final String addressFullMessagePolicy,
-                                  final long slowConsumerThreshold,
-                                  final long slowConsumerCheckPeriod,
-                                  final String slowConsumerPolicy,
-                                  final boolean autoCreateJmsQueues,
-                                  final boolean autoDeleteJmsQueues,
-                                  final boolean autoCreateJmsTopics,
-                                  final boolean autoDeleteJmsTopics,
-                                  final boolean autoCreateQueues,
-                                  final boolean autoDeleteQueues,
-                                  final boolean autoCreateAddresses,
-                                  final boolean autoDeleteAddresses,
-                                  final String configDeleteQueues,
-                                  final String configDeleteAddresses,
-                                  final long maxSizeBytesRejectThreshold,
-                                  final String defaultLastValueKey,
-                                  final boolean defaultNonDestructive,
-                                  final boolean defaultExclusiveQueue,
-                                  final boolean defaultGroupRebalance,
-                                  final int defaultGroupBuckets,
-                                  final String defaultGroupFirstKey,
-                                  final int defaultMaxConsumers,
-                                  final boolean defaultPurgeOnNoConsumers,
-                                  final int defaultConsumersBeforeDispatch,
-                                  final long defaultDelayBeforeDispatch,
-                                  final String defaultQueueRoutingType,
-                                  final String defaultAddressRoutingType,
-                                  final int defaultConsumerWindowSize,
-                                  final long defaultRingSize,
-                                  final boolean autoDeleteCreatedQueues,
-                                  final long autoDeleteQueuesDelay,
-                                  final long autoDeleteQueuesMessageCount,
-                                  final long autoDeleteAddressesDelay,
-                                  final double redeliveryCollisionAvoidanceFactor,
-                                  final long retroactiveMessageCount,
-                                  final boolean autoCreateDeadLetterResources,
-                                  final String deadLetterQueuePrefix,
-                                  final String deadLetterQueueSuffix,
-                                  final boolean autoCreateExpiryResources,
-                                  final String expiryQueuePrefix,
-                                  final String expiryQueueSuffix) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.addAddressSettings(this.server, address, DLA, expiryAddress, expiryDelay, defaultLastValueQueue, maxDeliveryAttempts,
-                  maxSizeBytes, pageSizeBytes, pageMaxCacheSize, redeliveryDelay, redeliveryMultiplier,
-                  maxRedeliveryDelay, redistributionDelay, sendToDLAOnNoRoute, addressFullMessagePolicy,
-                  slowConsumerThreshold, slowConsumerCheckPeriod, slowConsumerPolicy, autoCreateJmsQueues,
-                  autoDeleteJmsQueues, autoCreateJmsTopics, autoDeleteJmsTopics, autoCreateQueues, autoDeleteQueues,
-                  autoCreateAddresses, autoDeleteAddresses, configDeleteQueues, configDeleteAddresses, maxSizeBytesRejectThreshold,
-                  defaultLastValueKey, defaultNonDestructive, defaultExclusiveQueue, defaultGroupRebalance, defaultGroupBuckets,
-                  defaultGroupFirstKey, defaultMaxConsumers, defaultPurgeOnNoConsumers, defaultConsumersBeforeDispatch,
-                  defaultDelayBeforeDispatch, defaultQueueRoutingType, defaultAddressRoutingType, defaultConsumerWindowSize,
-                  defaultRingSize, autoDeleteCreatedQueues, autoDeleteQueuesDelay, autoDeleteQueuesMessageCount,
-                  autoDeleteAddressesDelay, redeliveryCollisionAvoidanceFactor, retroactiveMessageCount, autoCreateDeadLetterResources,
-                  deadLetterQueuePrefix, deadLetterQueueSuffix, autoCreateExpiryResources, expiryQueuePrefix,
-                  expiryQueueSuffix);
-      }
       checkStarted();
 
       // JBPAPP-6334 requested this to be pageSizeBytes > maxSizeBytes
@@ -3130,8 +1944,8 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
       addressSettings.setDeadLetterAddress(DLA == null ? null : new SimpleString(DLA));
       addressSettings.setExpiryAddress(expiryAddress == null ? null : new SimpleString(expiryAddress));
       addressSettings.setExpiryDelay(expiryDelay);
-      addressSettings.setDefaultLastValueQueue(defaultLastValueQueue);
-      addressSettings.setMaxDeliveryAttempts(maxDeliveryAttempts);
+      addressSettings.setLastValueQueue(lastValueQueue);
+      addressSettings.setMaxDeliveryAttempts(deliveryAttempts);
       addressSettings.setPageCacheMaxSize(pageMaxCacheSize);
       addressSettings.setMaxSizeBytes(maxSizeBytes);
       addressSettings.setPageSizeBytes(pageSizeBytes);
@@ -3140,10 +1954,26 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
       addressSettings.setMaxRedeliveryDelay(maxRedeliveryDelay);
       addressSettings.setRedistributionDelay(redistributionDelay);
       addressSettings.setSendToDLAOnNoRoute(sendToDLAOnNoRoute);
-      addressSettings.setAddressFullMessagePolicy(addressFullMessagePolicy == null ? AddressSettings.DEFAULT_ADDRESS_FULL_MESSAGE_POLICY : AddressFullMessagePolicy.valueOf(addressFullMessagePolicy.toUpperCase()));
+      if (addressFullMessagePolicy == null) {
+         addressSettings.setAddressFullMessagePolicy(AddressFullMessagePolicy.PAGE);
+      } else if (addressFullMessagePolicy.equalsIgnoreCase("PAGE")) {
+         addressSettings.setAddressFullMessagePolicy(AddressFullMessagePolicy.PAGE);
+      } else if (addressFullMessagePolicy.equalsIgnoreCase("DROP")) {
+         addressSettings.setAddressFullMessagePolicy(AddressFullMessagePolicy.DROP);
+      } else if (addressFullMessagePolicy.equalsIgnoreCase("BLOCK")) {
+         addressSettings.setAddressFullMessagePolicy(AddressFullMessagePolicy.BLOCK);
+      } else if (addressFullMessagePolicy.equalsIgnoreCase("FAIL")) {
+         addressSettings.setAddressFullMessagePolicy(AddressFullMessagePolicy.FAIL);
+      }
       addressSettings.setSlowConsumerThreshold(slowConsumerThreshold);
       addressSettings.setSlowConsumerCheckPeriod(slowConsumerCheckPeriod);
-      addressSettings.setSlowConsumerPolicy(slowConsumerPolicy == null ? AddressSettings.DEFAULT_SLOW_CONSUMER_POLICY : SlowConsumerPolicy.valueOf(slowConsumerPolicy.toUpperCase()));
+      if (slowConsumerPolicy == null) {
+         addressSettings.setSlowConsumerPolicy(SlowConsumerPolicy.NOTIFY);
+      } else if (slowConsumerPolicy.equalsIgnoreCase("NOTIFY")) {
+         addressSettings.setSlowConsumerPolicy(SlowConsumerPolicy.NOTIFY);
+      } else if (slowConsumerPolicy.equalsIgnoreCase("KILL")) {
+         addressSettings.setSlowConsumerPolicy(SlowConsumerPolicy.KILL);
+      }
       addressSettings.setAutoCreateJmsQueues(autoCreateJmsQueues);
       addressSettings.setAutoDeleteJmsQueues(autoDeleteJmsQueues);
       addressSettings.setAutoCreateJmsTopics(autoCreateJmsTopics);
@@ -3152,53 +1982,20 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
       addressSettings.setAutoDeleteQueues(autoDeleteQueues);
       addressSettings.setAutoCreateAddresses(autoCreateAddresses);
       addressSettings.setAutoDeleteAddresses(autoDeleteAddresses);
-      addressSettings.setConfigDeleteQueues(configDeleteQueues == null ? AddressSettings.DEFAULT_CONFIG_DELETE_QUEUES : DeletionPolicy.valueOf(configDeleteQueues.toUpperCase()));
-      addressSettings.setConfigDeleteAddresses(configDeleteAddresses == null ? AddressSettings.DEFAULT_CONFIG_DELETE_ADDRESSES : DeletionPolicy.valueOf(configDeleteAddresses.toUpperCase()));
-      addressSettings.setMaxSizeBytesRejectThreshold(maxSizeBytesRejectThreshold);
-      addressSettings.setDefaultLastValueKey(defaultLastValueKey == null ? ActiveMQDefaultConfiguration.getDefaultLastValueKey() : new SimpleString(defaultLastValueKey));
-      addressSettings.setDefaultNonDestructive(defaultNonDestructive);
-      addressSettings.setDefaultExclusiveQueue(defaultExclusiveQueue);
-      addressSettings.setDefaultGroupRebalance(defaultGroupRebalance);
-      addressSettings.setDefaultGroupBuckets(defaultGroupBuckets);
-      addressSettings.setDefaultGroupFirstKey(defaultGroupFirstKey == null ? ActiveMQDefaultConfiguration.getDefaultGroupFirstKey() : new SimpleString(defaultGroupFirstKey));
-      addressSettings.setDefaultMaxConsumers(defaultMaxConsumers);
-      addressSettings.setDefaultPurgeOnNoConsumers(defaultPurgeOnNoConsumers);
-      addressSettings.setDefaultConsumersBeforeDispatch(defaultConsumersBeforeDispatch);
-      addressSettings.setDefaultDelayBeforeDispatch(defaultDelayBeforeDispatch);
-      addressSettings.setDefaultQueueRoutingType(defaultQueueRoutingType == null ? ActiveMQDefaultConfiguration.getDefaultRoutingType() : RoutingType.valueOf(defaultQueueRoutingType.toUpperCase()));
-      addressSettings.setDefaultAddressRoutingType(defaultAddressRoutingType == null ? ActiveMQDefaultConfiguration.getDefaultRoutingType() : RoutingType.valueOf(defaultAddressRoutingType.toUpperCase()));
-      addressSettings.setDefaultConsumerWindowSize(defaultConsumerWindowSize);
-      addressSettings.setDefaultRingSize(defaultRingSize);
-      addressSettings.setAutoDeleteCreatedQueues(autoDeleteCreatedQueues);
-      addressSettings.setAutoDeleteQueuesDelay(autoDeleteQueuesDelay);
-      addressSettings.setAutoDeleteQueuesMessageCount(autoDeleteQueuesMessageCount);
-      addressSettings.setAutoDeleteAddressesDelay(autoDeleteAddressesDelay);
-      addressSettings.setRedeliveryCollisionAvoidanceFactor(redeliveryCollisionAvoidanceFactor);
-      addressSettings.setRetroactiveMessageCount(retroactiveMessageCount);
-      addressSettings.setAutoCreateDeadLetterResources(autoCreateDeadLetterResources);
-      addressSettings.setDeadLetterQueuePrefix(deadLetterQueuePrefix == null ? null : new SimpleString(deadLetterQueuePrefix));
-      addressSettings.setDeadLetterQueueSuffix(deadLetterQueueSuffix == null ? null : new SimpleString(deadLetterQueueSuffix));
-      addressSettings.setAutoCreateExpiryResources(autoCreateExpiryResources);
-      addressSettings.setExpiryQueuePrefix(expiryQueuePrefix == null ? null : new SimpleString(expiryQueuePrefix));
-      addressSettings.setExpiryQueueSuffix(expiryQueueSuffix == null ? null : new SimpleString(expiryQueueSuffix));
-
       server.getAddressSettingsRepository().addMatch(address, addressSettings);
 
       storageManager.storeAddressSetting(new PersistedAddressSetting(new SimpleString(address), addressSettings));
-
    }
 
    @Override
    public void removeAddressSettings(final String addressMatch) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.removeAddressSettings(this.server, addressMatch);
-      }
       checkStarted();
 
       server.getAddressSettingsRepository().removeMatch(addressMatch);
       storageManager.deleteAddressSetting(new SimpleString(addressMatch));
    }
 
+   @Override
    public void sendQueueInfoToQueue(final String queueName, final String address) throws Exception {
       checkStarted();
 
@@ -3219,9 +2016,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public String[] getDivertNames() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getDivertNames(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -3259,42 +2053,11 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
                             final String filterString,
                             final String transformerClassName,
                             final String routingType) throws Exception {
-      createDivert(name, routingName, address, forwardingAddress, exclusive, filterString, transformerClassName, (String) null, routingType);
-   }
-
-   @Override
-   public void createDivert(final String name,
-                            final String routingName,
-                            final String address,
-                            final String forwardingAddress,
-                            final boolean exclusive,
-                            final String filterString,
-                            final String transformerClassName,
-                            final String transformerPropertiesAsJSON,
-                            final String routingType) throws Exception {
-      createDivert(name, routingName, address, forwardingAddress, exclusive, filterString, transformerClassName, JsonUtil.readJsonProperties(transformerPropertiesAsJSON), routingType);
-   }
-
-   @Override
-   public void createDivert(final String name,
-                            final String routingName,
-                            final String address,
-                            final String forwardingAddress,
-                            final boolean exclusive,
-                            final String filterString,
-                            final String transformerClassName,
-                            final Map<String, String> transformerProperties,
-                            final String routingType) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.createDivert(this.server, name, routingName, address, forwardingAddress,
-                  exclusive, filterString, transformerClassName, transformerProperties, routingType);
-      }
       checkStarted();
 
       clearIO();
       try {
-         TransformerConfiguration transformerConfiguration = transformerClassName == null ? null : new TransformerConfiguration(transformerClassName).setProperties(transformerProperties);
-         DivertConfiguration config = new DivertConfiguration().setName(name).setRoutingName(routingName).setAddress(address).setForwardingAddress(forwardingAddress).setExclusive(exclusive).setFilterString(filterString).setTransformerConfiguration(transformerConfiguration).setRoutingType(ComponentConfigurationRoutingType.valueOf(routingType));
+         DivertConfiguration config = new DivertConfiguration().setName(name).setRoutingName(routingName).setAddress(address).setForwardingAddress(forwardingAddress).setExclusive(exclusive).setFilterString(filterString).setTransformerClassName(transformerClassName).setRoutingType(DivertConfigurationRoutingType.valueOf(routingType));
          server.deployDivert(config);
       } finally {
          blockOnIO();
@@ -3303,9 +2066,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public void destroyDivert(final String name) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.destroyDivert(this.server, name);
-      }
       checkStarted();
 
       clearIO();
@@ -3318,9 +2078,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public String[] getBridgeNames() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getBridgeNames(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -3357,102 +2114,12 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
                             final boolean ha,
                             final String user,
                             final String password) throws Exception {
-      createBridge(name,
-                   queueName,
-                   forwardingAddress,
-                   filterString,
-                   transformerClassName,
-                   (String) null,
-                   retryInterval,
-                   retryIntervalMultiplier,
-                   initialConnectAttempts,
-                   reconnectAttempts,
-                   useDuplicateDetection,
-                   confirmationWindowSize,
-                   producerWindowSize,
-                   clientFailureCheckPeriod,
-                   staticConnectorsOrDiscoveryGroup,
-                   useDiscoveryGroup,
-                   ha,
-                   user,
-                   password);
-   }
-
-   @Override
-   public void createBridge(final String name,
-                            final String queueName,
-                            final String forwardingAddress,
-                            final String filterString,
-                            final String transformerClassName,
-                            final String transformerPropertiesAsJSON,
-                            final long retryInterval,
-                            final double retryIntervalMultiplier,
-                            final int initialConnectAttempts,
-                            final int reconnectAttempts,
-                            final boolean useDuplicateDetection,
-                            final int confirmationWindowSize,
-                            final int producerWindowSize,
-                            final long clientFailureCheckPeriod,
-                            final String staticConnectorsOrDiscoveryGroup,
-                            boolean useDiscoveryGroup,
-                            final boolean ha,
-                            final String user,
-                            final String password) throws Exception {
-      createBridge(name,
-                   queueName,
-                   forwardingAddress,
-                   filterString,
-                   transformerClassName,
-                   JsonUtil.readJsonProperties(transformerPropertiesAsJSON),
-                   retryInterval,
-                   retryIntervalMultiplier,
-                   initialConnectAttempts,
-                   reconnectAttempts,
-                   useDuplicateDetection,
-                   confirmationWindowSize,
-                   producerWindowSize,
-                   clientFailureCheckPeriod,
-                   staticConnectorsOrDiscoveryGroup,
-                   useDiscoveryGroup,
-                   ha,
-                   user,
-                   password);
-   }
-
-   @Override
-   public void createBridge(final String name,
-                            final String queueName,
-                            final String forwardingAddress,
-                            final String filterString,
-                            final String transformerClassName,
-                            final Map<String, String> transformerProperties,
-                            final long retryInterval,
-                            final double retryIntervalMultiplier,
-                            final int initialConnectAttempts,
-                            final int reconnectAttempts,
-                            final boolean useDuplicateDetection,
-                            final int confirmationWindowSize,
-                            final int producerWindowSize,
-                            final long clientFailureCheckPeriod,
-                            final String staticConnectorsOrDiscoveryGroup,
-                            boolean useDiscoveryGroup,
-                            final boolean ha,
-                            final String user,
-                            final String password) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.createBridge(this.server, name, queueName, forwardingAddress, filterString,
-                  transformerClassName, transformerProperties, retryInterval, retryIntervalMultiplier,
-                  initialConnectAttempts, reconnectAttempts, useDuplicateDetection, confirmationWindowSize,
-                  producerWindowSize, clientFailureCheckPeriod, staticConnectorsOrDiscoveryGroup,
-                  useDiscoveryGroup, ha, user, "****");
-      }
       checkStarted();
 
       clearIO();
 
       try {
-         TransformerConfiguration transformerConfiguration = transformerClassName == null ? null : new TransformerConfiguration(transformerClassName).setProperties(transformerProperties);
-         BridgeConfiguration config = new BridgeConfiguration().setName(name).setQueueName(queueName).setForwardingAddress(forwardingAddress).setFilterString(filterString).setTransformerConfiguration(transformerConfiguration).setClientFailureCheckPeriod(clientFailureCheckPeriod).setRetryInterval(retryInterval).setRetryIntervalMultiplier(retryIntervalMultiplier).setInitialConnectAttempts(initialConnectAttempts).setReconnectAttempts(reconnectAttempts).setUseDuplicateDetection(useDuplicateDetection).setConfirmationWindowSize(confirmationWindowSize).setProducerWindowSize(producerWindowSize).setHA(ha).setUser(user).setPassword(password);
+         BridgeConfiguration config = new BridgeConfiguration().setName(name).setQueueName(queueName).setForwardingAddress(forwardingAddress).setFilterString(filterString).setTransformerClassName(transformerClassName).setClientFailureCheckPeriod(clientFailureCheckPeriod).setRetryInterval(retryInterval).setRetryIntervalMultiplier(retryIntervalMultiplier).setInitialConnectAttempts(initialConnectAttempts).setReconnectAttempts(reconnectAttempts).setUseDuplicateDetection(useDuplicateDetection).setConfirmationWindowSize(confirmationWindowSize).setProducerWindowSize(producerWindowSize).setHA(ha).setUser(user).setPassword(password);
 
          if (useDiscoveryGroup) {
             config.setDiscoveryGroupName(staticConnectorsOrDiscoveryGroup);
@@ -3484,19 +2151,12 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
                             final boolean ha,
                             final String user,
                             final String password) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.createBridge(this.server, name, queueName, forwardingAddress, filterString,
-                  transformerClassName, retryInterval, retryIntervalMultiplier, initialConnectAttempts,
-                  reconnectAttempts, useDuplicateDetection, confirmationWindowSize, clientFailureCheckPeriod,
-                  staticConnectorsOrDiscoveryGroup, useDiscoveryGroup, ha, user, "****");
-      }
       checkStarted();
 
       clearIO();
 
       try {
-         TransformerConfiguration transformerConfiguration = transformerClassName == null ? null : new TransformerConfiguration(transformerClassName);
-         BridgeConfiguration config = new BridgeConfiguration().setName(name).setQueueName(queueName).setForwardingAddress(forwardingAddress).setFilterString(filterString).setTransformerConfiguration(transformerConfiguration).setClientFailureCheckPeriod(clientFailureCheckPeriod).setRetryInterval(retryInterval).setRetryIntervalMultiplier(retryIntervalMultiplier).setInitialConnectAttempts(initialConnectAttempts).setReconnectAttempts(reconnectAttempts).setUseDuplicateDetection(useDuplicateDetection).setConfirmationWindowSize(confirmationWindowSize).setHA(ha).setUser(user).setPassword(password);
+         BridgeConfiguration config = new BridgeConfiguration().setName(name).setQueueName(queueName).setForwardingAddress(forwardingAddress).setFilterString(filterString).setTransformerClassName(transformerClassName).setClientFailureCheckPeriod(clientFailureCheckPeriod).setRetryInterval(retryInterval).setRetryIntervalMultiplier(retryIntervalMultiplier).setInitialConnectAttempts(initialConnectAttempts).setReconnectAttempts(reconnectAttempts).setUseDuplicateDetection(useDuplicateDetection).setConfirmationWindowSize(confirmationWindowSize).setHA(ha).setUser(user).setPassword(password);
 
          if (useDiscoveryGroup) {
             config.setDiscoveryGroupName(staticConnectorsOrDiscoveryGroup);
@@ -3512,9 +2172,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public void destroyBridge(final String name) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.destroyBridge(this.server, name);
-      }
       checkStarted();
 
       clearIO();
@@ -3527,9 +2184,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public void createConnectorService(final String name, final String factoryClass, final Map<String, Object> parameters) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.createConnectorService(this.server, name, factoryClass, parameters);
-      }
       checkStarted();
 
       clearIO();
@@ -3545,9 +2199,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public void destroyConnectorService(final String name) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.destroyConnectorService(this.server, name);
-      }
       checkStarted();
 
       clearIO();
@@ -3561,9 +2212,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public String[] getConnectorServices() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getConnectorServices(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -3577,26 +2225,14 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public void forceFailover() throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.forceFailover(this.server);
-      }
       checkStarted();
 
       clearIO();
 
-      Thread t = new Thread() {
-         @Override
-         public void run() {
-            try {
-               server.stop(true, true);
-            } catch (Throwable e) {
-               logger.warn(e.getMessage(), e);
-            }
-         }
-      };
-      t.start();
+      server.fail(true);
    }
 
+   @Override
    public void updateDuplicateIdCache(String address, Object[] ids) throws Exception {
       clearIO();
       try {
@@ -3611,9 +2247,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public void scaleDown(String connector) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.scaleDown(this.server, connector);
-      }
       checkStarted();
 
       clearIO();
@@ -3633,14 +2266,12 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
          server.fail(true);
       }
+
    }
 
 
    @Override
    public String listNetworkTopology() throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listNetworkTopology(this.server);
-      }
       checkStarted();
 
       clearIO();
@@ -3680,9 +2311,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
    public void removeNotificationListener(final NotificationListener listener,
                                           final NotificationFilter filter,
                                           final Object handback) throws ListenerNotFoundException {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.removeNotificationListener(this.server, listener, filter, handback);
-      }
       clearIO();
       try {
          broadcaster.removeNotificationListener(listener, filter, handback);
@@ -3693,9 +2321,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public void removeNotificationListener(final NotificationListener listener) throws ListenerNotFoundException {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.removeNotificationListener(this.server, listener);
-      }
       clearIO();
       try {
          broadcaster.removeNotificationListener(listener);
@@ -3708,9 +2333,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
    public void addNotificationListener(final NotificationListener listener,
                                        final NotificationFilter filter,
                                        final Object handback) throws IllegalArgumentException {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.addNotificationListener(this.server, listener, filter, handback);
-      }
       clearIO();
       try {
          broadcaster.addNotificationListener(listener, filter, handback);
@@ -3721,9 +2343,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public MBeanNotificationInfo[] getNotificationInfo() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getNotificationInfo(this.server);
-      }
       CoreNotificationType[] values = CoreNotificationType.values();
       String[] names = new String[values.length];
       for (int i = 0; i < values.length; i++) {
@@ -3763,106 +2382,66 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
    @Override
    public long getConnectionTTLOverride() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getConnectionTTLOverride(this.server);
-      }
       return configuration.getConnectionTTLOverride();
    }
 
    @Override
    public int getIDCacheSize() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getIDCacheSize(this.server);
-      }
       return configuration.getIDCacheSize();
    }
 
    @Override
    public String getLargeMessagesDirectory() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getLargeMessagesDirectory(this.server);
-      }
       return configuration.getLargeMessagesDirectory();
    }
 
    @Override
    public String getManagementAddress() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getManagementAddress(this.server);
-      }
       return configuration.getManagementAddress().toString();
    }
 
    @Override
    public String getNodeID() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getNodeID(this.server);
-      }
-      return server.getNodeID() == null ? null : server.getNodeID().toString();
+      return server.getNodeID().toString();
    }
 
    @Override
    public String getManagementNotificationAddress() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getManagementNotificationAddress(this.server);
-      }
       return configuration.getManagementNotificationAddress().toString();
    }
 
    @Override
    public long getMessageExpiryScanPeriod() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getMessageExpiryScanPeriod(this.server);
-      }
       return configuration.getMessageExpiryScanPeriod();
    }
 
    @Override
-   @Deprecated
    public long getMessageExpiryThreadPriority() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getMessageExpiryThreadPriority(this.server);
-      }
       return configuration.getMessageExpiryThreadPriority();
    }
 
    @Override
    public long getTransactionTimeout() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getTransactionTimeout(this.server);
-      }
       return configuration.getTransactionTimeout();
    }
 
    @Override
    public long getTransactionTimeoutScanPeriod() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getTransactionTimeoutScanPeriod(this.server);
-      }
       return configuration.getTransactionTimeoutScanPeriod();
    }
 
    @Override
    public boolean isPersistDeliveryCountBeforeDelivery() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.isPersistDeliveryCountBeforeDelivery(this.server);
-      }
       return configuration.isPersistDeliveryCountBeforeDelivery();
    }
 
    @Override
    public boolean isPersistIDCache() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.isPersistIDCache(this.server);
-      }
       return configuration.isPersistIDCache();
    }
 
    @Override
    public boolean isWildcardRoutingEnabled() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.isWildcardRoutingEnabled(this.server);
-      }
       return configuration.isWildcardRoutingEnabled();
    }
 
@@ -3895,107 +2474,10 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
       if (!(notification.getType() instanceof CoreNotificationType))
          return;
       CoreNotificationType type = (CoreNotificationType) notification.getType();
-      if (type == CoreNotificationType.SESSION_CREATED) {
-         TypedProperties props = notification.getProperties();
-         /*
-          * If the SESSION_CREATED notification is received from another node in the cluster, no broadcast call is made.
-          * To keep the original logic to avoid calling the broadcast multiple times for the same SESSION_CREATED notification in the cluster.
-          */
-         if (props.getIntProperty(ManagementHelper.HDR_DISTANCE) > 0) {
-            return;
-         }
-      }
+      TypedProperties prop = notification.getProperties();
 
       this.broadcaster.sendNotification(new Notification(type.toString(), this, notifSeq.incrementAndGet(), notification.toString()));
    }
 
-   @Override
-   public void addUser(String username, String password, String roles, boolean plaintext) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.addUser(this.server, username, "****", roles, plaintext);
-      }
-
-      tcclInvoke(ActiveMQServerControlImpl.class.getClassLoader(), () -> internalAddUser(username, password, roles, plaintext));
-   }
-
-   private void internalAddUser(String username, String password, String roles, boolean plaintext) throws Exception {
-      PropertiesLoginModuleConfigurator config = getPropertiesLoginModuleConfigurator();
-      config.addNewUser(username, plaintext ? password : PasswordMaskingUtil.getHashProcessor().hash(password), roles.split(","));
-      config.save();
-
-   }
-
-   private String getSecurityDomain() {
-      return server.getSecurityManager().getDomain();
-   }
-
-   @Override
-   public String listUser(String username) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.listUser(this.server, username);
-      }
-
-      return (String) tcclCall(ActiveMQServerControlImpl.class.getClassLoader(), () -> internaListUser(username));
-   }
-
-   private String internaListUser(String username) throws Exception {
-      PropertiesLoginModuleConfigurator config = getPropertiesLoginModuleConfigurator();
-      Map<String, Set<String>> info = config.listUser(username);
-      JsonArrayBuilder users = JsonLoader.createArrayBuilder();
-      for (Entry<String, Set<String>> entry : info.entrySet()) {
-         JsonObjectBuilder user = JsonLoader.createObjectBuilder();
-         user.add("username", entry.getKey());
-         JsonArrayBuilder roles = JsonLoader.createArrayBuilder();
-         for (String role : entry.getValue()) {
-            roles.add(role);
-         }
-         user.add("roles", roles);
-         users.add(user);
-      }
-      return users.build().toString();
-   }
-
-   @Override
-   public void removeUser(String username) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.removeUser(this.server, username);
-      }
-      tcclInvoke(ActiveMQServerControlImpl.class.getClassLoader(), () -> internalRemoveUser(username));
-   }
-
-   private void internalRemoveUser(String username) throws Exception {
-      PropertiesLoginModuleConfigurator config = getPropertiesLoginModuleConfigurator();
-      config.removeUser(username);
-      config.save();
-   }
-
-   @Override
-   public void resetUser(String username, String password, String roles, boolean plaintext) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.resetUser(this.server, username, "****", roles, plaintext);
-      }
-      tcclInvoke(ActiveMQServerControlImpl.class.getClassLoader(), () -> internalresetUser(username, password, roles, plaintext));
-   }
-
-   @Override
-   public void resetUser(String username, String password, String roles) throws Exception {
-      resetUser(username, password, roles, true);
-   }
-
-   private void internalresetUser(String username, String password, String roles, boolean plaintext) throws Exception {
-      PropertiesLoginModuleConfigurator config = getPropertiesLoginModuleConfigurator();
-      // don't hash a null password even if plaintext = false
-      config.updateUser(username, password == null ? password : plaintext ? password : PasswordMaskingUtil.getHashProcessor().hash(password), roles == null ? null : roles.split(","));
-      config.save();
-   }
-
-   private PropertiesLoginModuleConfigurator getPropertiesLoginModuleConfigurator() throws Exception {
-      URL configurationUrl = server.getConfiguration().getConfigurationUrl();
-      if (configurationUrl == null) {
-         throw ActiveMQMessageBundle.BUNDLE.failedToLocateConfigURL();
-      }
-      String path = configurationUrl.getPath();
-      return new PropertiesLoginModuleConfigurator(getSecurityDomain(), path.substring(0, path.lastIndexOf("/")));
-   }
 }
 