diff --git a/artemis-protocols/artemis-openwire-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/openwire/amq/AMQSession.java b/artemis-protocols/artemis-openwire-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/openwire/amq/AMQSession.java
index 4675dca6bc..521262800b 100644
--- a/artemis-protocols/artemis-openwire-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/openwire/amq/AMQSession.java
+++ b/artemis-protocols/artemis-openwire-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/openwire/amq/AMQSession.java
@@ -1,4 +1,4 @@
-/*
+/**
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements. See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -16,8 +16,9 @@
  */
 package org.apache.activemq.artemis.core.protocol.openwire.amq;
 
-import javax.jms.ResourceAllocationException;
 import javax.transaction.xa.Xid;
+import java.io.IOException;
+import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
@@ -25,55 +26,55 @@ import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.concurrent.atomic.AtomicInteger;
 
 import org.apache.activemq.artemis.api.core.SimpleString;
-import org.apache.activemq.artemis.core.paging.PagingStore;
-import org.apache.activemq.artemis.core.protocol.openwire.OpenWireConnection;
-import org.apache.activemq.artemis.core.protocol.openwire.OpenWireMessageConverter;
-import org.apache.activemq.artemis.core.protocol.openwire.OpenWireProtocolManager;
-import org.apache.activemq.artemis.core.protocol.openwire.OpenWireUtil;
-import org.apache.activemq.artemis.core.server.ActiveMQServer;
-import org.apache.activemq.artemis.core.server.ActiveMQServerLogger;
-import org.apache.activemq.artemis.core.server.ServerConsumer;
-import org.apache.activemq.artemis.core.server.ServerMessage;
-import org.apache.activemq.artemis.core.server.SlowConsumerDetectionListener;
-import org.apache.activemq.artemis.core.settings.impl.AddressFullMessagePolicy;
-import org.apache.activemq.artemis.core.transaction.impl.XidImpl;
-import org.apache.activemq.artemis.spi.core.protocol.SessionCallback;
-import org.apache.activemq.artemis.spi.core.remoting.Connection;
-import org.apache.activemq.artemis.spi.core.remoting.ReadyListener;
-import org.apache.activemq.artemis.utils.IDGenerator;
-import org.apache.activemq.artemis.utils.SimpleIDGenerator;
 import org.apache.activemq.command.ActiveMQDestination;
 import org.apache.activemq.command.ConnectionInfo;
 import org.apache.activemq.command.ConsumerId;
 import org.apache.activemq.command.ConsumerInfo;
+import org.apache.activemq.command.ExceptionResponse;
 import org.apache.activemq.command.Message;
 import org.apache.activemq.command.MessageAck;
 import org.apache.activemq.command.MessageDispatch;
 import org.apache.activemq.command.ProducerAck;
+import org.apache.activemq.command.ProducerId;
 import org.apache.activemq.command.ProducerInfo;
+import org.apache.activemq.command.Response;
 import org.apache.activemq.command.SessionInfo;
 import org.apache.activemq.command.TransactionId;
 import org.apache.activemq.command.TransactionInfo;
 import org.apache.activemq.command.XATransactionId;
-import org.apache.activemq.openwire.OpenWireFormat;
+import org.apache.activemq.artemis.core.paging.impl.PagingStoreImpl;
+import org.apache.activemq.artemis.core.protocol.openwire.OpenWireConnection;
+import org.apache.activemq.artemis.core.protocol.openwire.OpenWireMessageConverter;
+import org.apache.activemq.artemis.core.protocol.openwire.OpenWireProtocolManager;
+import org.apache.activemq.artemis.core.protocol.openwire.OpenWireUtil;
+import org.apache.activemq.artemis.core.protocol.openwire.SendingResult;
+import org.apache.activemq.artemis.core.server.ActiveMQServer;
+import org.apache.activemq.artemis.core.server.ActiveMQServerLogger;
+import org.apache.activemq.artemis.core.server.ServerConsumer;
+import org.apache.activemq.artemis.core.server.ServerMessage;
+import org.apache.activemq.artemis.core.server.impl.ServerMessageImpl;
+import org.apache.activemq.artemis.core.transaction.impl.XidImpl;
+import org.apache.activemq.artemis.spi.core.protocol.SessionCallback;
+import org.apache.activemq.artemis.spi.core.remoting.ReadyListener;
 import org.apache.activemq.wireformat.WireFormat;
 
-public class AMQSession implements SessionCallback {
-
-   // ConsumerID is generated inside the session, 0, 1, 2, ... as many consumers as you have on the session
-   protected final IDGenerator idGenerator = new SimpleIDGenerator(0);
-
-   private ConnectionInfo connInfo;
+public class AMQSession implements SessionCallback
+{
    private AMQServerSession coreSession;
+   private ConnectionInfo connInfo;
    private SessionInfo sessInfo;
    private ActiveMQServer server;
    private OpenWireConnection connection;
+   //native id -> consumer
+   private Map<Long, AMQConsumer> consumers = new ConcurrentHashMap<Long, AMQConsumer>();
+   //amq id -> native id
+   private Map<Long, Long> consumerIdMap = new HashMap<Long, Long>();
 
-   private Map<Long, AMQConsumer> consumers = new ConcurrentHashMap<>();
+   private Map<Long, AMQProducer> producers = new HashMap<Long, AMQProducer>();
 
    private AtomicBoolean started = new AtomicBoolean(false);
 
@@ -81,328 +82,269 @@ public class AMQSession implements SessionCallback {
 
    private boolean isTx;
 
-   private final ScheduledExecutorService scheduledPool;
-
    private OpenWireProtocolManager manager;
 
-   // The sessionWireformat used by the session
-   // this object is meant to be used per thread / session
-   // so we make a new one per AMQSession
-   private final OpenWireMessageConverter converter;
-
-   public AMQSession(ConnectionInfo connInfo,
-                     SessionInfo sessInfo,
-                     ActiveMQServer server,
-                     OpenWireConnection connection,
-                     ScheduledExecutorService scheduledPool,
-                     OpenWireProtocolManager manager) {
+   public AMQSession(ConnectionInfo connInfo, SessionInfo sessInfo,
+         ActiveMQServer server, OpenWireConnection connection, OpenWireProtocolManager manager)
+   {
       this.connInfo = connInfo;
       this.sessInfo = sessInfo;
-
       this.server = server;
       this.connection = connection;
-      this.scheduledPool = scheduledPool;
       this.manager = manager;
-      OpenWireFormat marshaller = (OpenWireFormat) connection.getMarshaller();
-
-      this.converter = new OpenWireMessageConverter(marshaller.copy());
    }
 
-   public OpenWireMessageConverter getConverter() {
-      return converter;
-   }
-
-   public void initialize() {
+   public void initialize()
+   {
       String name = sessInfo.getSessionId().toString();
       String username = connInfo.getUserName();
       String password = connInfo.getPassword();
 
       int minLargeMessageSize = Integer.MAX_VALUE; // disable
-      // minLargeMessageSize for
-      // now
+                                                   // minLargeMessageSize for
+                                                   // now
 
-      try {
-         coreSession = (AMQServerSession) server.createSession(name, username, password, minLargeMessageSize, connection, true, false, false, false, null, this, AMQServerSessionFactory.getInstance(), true);
+      try
+      {
+         coreSession = (AMQServerSession) server.createSession(name, username, password,
+               minLargeMessageSize, connection, true, false, false, false,
+               null, this, new AMQServerSessionFactory(), true);
 
          long sessionId = sessInfo.getSessionId().getValue();
-         if (sessionId == -1) {
+         if (sessionId == -1)
+         {
             this.connection.setAdvisorySession(this);
          }
       }
-      catch (Exception e) {
+      catch (Exception e)
+      {
          ActiveMQServerLogger.LOGGER.error("error init session", e);
       }
 
    }
 
-   public List<AMQConsumer> createConsumer(ConsumerInfo info,
-                              AMQSession amqSession,
-                              SlowConsumerDetectionListener slowConsumerDetectionListener) throws Exception {
+   public void createConsumer(ConsumerInfo info) throws Exception
+   {
       //check destination
       ActiveMQDestination dest = info.getDestination();
       ActiveMQDestination[] dests = null;
-      if (dest.isComposite()) {
+      if (dest.isComposite())
+      {
          dests = dest.getCompositeDestinations();
       }
-      else {
-         dests = new ActiveMQDestination[]{dest};
+      else
+      {
+         dests = new ActiveMQDestination[] {dest};
       }
-//      Map<ActiveMQDestination, AMQConsumer> consumerMap = new HashMap<>();
-      List<AMQConsumer> consumersList = new java.util.LinkedList<>();
 
-      for (ActiveMQDestination openWireDest : dests) {
-         if (openWireDest.isQueue()) {
-            SimpleString queueName = OpenWireUtil.toCoreAddress(openWireDest);
+      for (ActiveMQDestination d : dests)
+      {
+         if (d.isQueue())
+         {
+            SimpleString queueName = OpenWireUtil.toCoreAddress(d);
             getCoreServer().getJMSQueueCreator().create(queueName);
          }
-         AMQConsumer consumer = new AMQConsumer(this, openWireDest, info, scheduledPool);
-
-         consumer.init(slowConsumerDetectionListener, idGenerator.generateID());
-         consumersList.add(consumer);
+         AMQConsumer consumer = new AMQConsumer(this, d, info);
+         consumer.init();
          consumers.put(consumer.getNativeId(), consumer);
+         this.consumerIdMap.put(info.getConsumerId().getValue(), consumer.getNativeId());
       }
-
-      return consumersList;
-   }
-
-   public void start() {
-
       coreSession.start();
       started.set(true);
-
    }
 
-   // rename actualDest to destination
    @Override
-   public void afterDelivery() throws Exception {
-
-   }
-
-   @Override
-   public void browserFinished(ServerConsumer consumer) {
-      AMQConsumer theConsumer = ((AMQServerConsumer) consumer).getAmqConsumer();
-      if (theConsumer != null) {
-         theConsumer.browseFinished();
-      }
-   }
-
-   @Override
-   public boolean isWritable(ReadyListener callback) {
-      return connection.isWritable(callback);
-   }
-
-   @Override
-   public void sendProducerCreditsMessage(int credits, SimpleString address) {
+   public void sendProducerCreditsMessage(int credits, SimpleString address)
+   {
       // TODO Auto-generated method stub
 
    }
 
    @Override
-   public void sendProducerCreditsFailMessage(int credits, SimpleString address) {
+   public void sendProducerCreditsFailMessage(int credits, SimpleString address)
+   {
       // TODO Auto-generated method stub
 
    }
 
    @Override
-   public int sendMessage(ServerMessage message, ServerConsumer consumerID, int deliveryCount) {
+   public int sendMessage(ServerMessage message, ServerConsumer consumerID, int deliveryCount)
+   {
       AMQConsumer consumer = consumers.get(consumerID.getID());
       return consumer.handleDeliver(message, deliveryCount);
    }
 
    @Override
-   public int sendLargeMessage(ServerMessage message, ServerConsumer consumerID, long bodySize, int deliveryCount) {
+   public int sendLargeMessage(ServerMessage message, ServerConsumer consumerID,
+         long bodySize, int deliveryCount)
+   {
       // TODO Auto-generated method stub
       return 0;
    }
 
    @Override
-   public int sendLargeMessageContinuation(ServerConsumer consumerID,
-                                           byte[] body,
-                                           boolean continues,
-                                           boolean requiresResponse) {
+   public int sendLargeMessageContinuation(ServerConsumer consumerID, byte[] body,
+         boolean continues, boolean requiresResponse)
+   {
       // TODO Auto-generated method stub
       return 0;
    }
 
    @Override
-   public void closed() {
+   public void closed()
+   {
       // TODO Auto-generated method stub
 
    }
 
    @Override
-   public boolean hasCredits(ServerConsumer consumerID) {
-
-      AMQConsumer amqConsumer;
-
-      amqConsumer = consumers.get(consumerID.getID());
+   public void addReadyListener(ReadyListener listener)
+   {
+      // TODO Auto-generated method stub
 
-      if (amqConsumer != null) {
-         return amqConsumer.hasCredits();
-      }
-      return false;
    }
 
    @Override
-   public void disconnect(ServerConsumer consumerId, String queueName) {
+   public void removeReadyListener(ReadyListener listener)
+   {
       // TODO Auto-generated method stub
 
    }
 
-   public void send(final ProducerInfo producerInfo,
-                    final Message messageSend,
-                    boolean sendProducerAck) throws Exception {
-      TransactionId tid = messageSend.getTransactionId();
-      if (tid != null) {
-         resetSessionTx(tid);
-      }
-
-      messageSend.setBrokerInTime(System.currentTimeMillis());
-
-      ActiveMQDestination destination = messageSend.getDestination();
-      ActiveMQDestination[] actualDestinations = null;
-      if (destination.isComposite()) {
-         actualDestinations = destination.getCompositeDestinations();
-         messageSend.setOriginalDestination(destination);
-      }
-      else {
-         actualDestinations = new ActiveMQDestination[]{destination};
-      }
+   @Override
+   public boolean hasCredits(ServerConsumer consumerID)
+   {
+      return true;
+   }
 
-      ServerMessage originalCoreMsg = getConverter().inbound(messageSend);
+   @Override
+   public void disconnect(ServerConsumer consumerId, String queueName)
+   {
+      // TODO Auto-generated method stub
 
-      /* ActiveMQ failover transport will attempt to reconnect after connection failure.  Any sent messages that did
-      * not receive acks will be resent.  (ActiveMQ broker handles this by returning a last sequence id received to
-      * the client).  To handle this in Artemis we use a duplicate ID cache.  To do this we check to see if the
-      * message comes from failover connection.  If so we add a DUPLICATE_ID to handle duplicates after a resend. */
-      if (connection.getContext().isFaultTolerant() && !messageSend.getProperties().containsKey(org.apache.activemq.artemis.api.core.Message.HDR_DUPLICATE_DETECTION_ID)) {
-         originalCoreMsg.putStringProperty(org.apache.activemq.artemis.api.core.Message.HDR_DUPLICATE_DETECTION_ID.toString(), messageSend.getMessageId().toString());
-      }
+   }
 
-      Runnable runnable;
+   public AMQServerSession getCoreSession()
+   {
+      return this.coreSession;
+   }
 
-      if (sendProducerAck) {
-         runnable = new Runnable() {
-            public void run() {
-               try {
-                  ProducerAck ack = new ProducerAck(producerInfo.getProducerId(), messageSend.getSize());
-                  connection.dispatchSync(ack);
-               }
-               catch (Exception e) {
-                  ActiveMQServerLogger.LOGGER.warn(e.getMessage(), e);
-                  connection.sendException(e);
-               }
+   public ActiveMQServer getCoreServer()
+   {
+      return this.server;
+   }
 
-            }
-         };
+   public void removeConsumer(ConsumerInfo info) throws Exception
+   {
+      long consumerId = info.getConsumerId().getValue();
+      long nativeId = this.consumerIdMap.remove(consumerId);
+      if (this.txId != null || this.isTx)
+      {
+         ((AMQServerSession)coreSession).amqCloseConsumer(nativeId, false);
       }
-      else {
-         final Connection transportConnection = connection.getTransportConnection();
-
-         //         new Exception("Setting to false").printStackTrace();
-
-         if (transportConnection == null) {
-            // I don't think this could happen, but just in case, avoiding races
-            runnable = null;
-         }
-         else {
-            runnable = new Runnable() {
-               public void run() {
-                  transportConnection.setAutoRead(true);
-               }
-            };
-         }
+      else
+      {
+         ((AMQServerSession)coreSession).amqCloseConsumer(nativeId, true);
       }
+      AMQConsumer consumer = consumers.remove(nativeId);
+   }
 
-      internalSend(actualDestinations, originalCoreMsg, runnable);
+   public void createProducer(ProducerInfo info) throws Exception
+   {
+      AMQProducer producer = new AMQProducer(this, info);
+      producer.init();
+      producers.put(info.getProducerId().getValue(), producer);
    }
 
-   private void internalSend(ActiveMQDestination[] actualDestinations,
-                             ServerMessage originalCoreMsg,
-                             final Runnable onComplete) throws Exception {
+   public void removeProducer(ProducerInfo info)
+   {
+      removeProducer(info.getProducerId());
+   }
 
-      Runnable runToUse;
+   public void removeProducer(ProducerId id)
+   {
+      producers.remove(id.getValue());
+   }
 
-      if (actualDestinations.length <= 1 || onComplete == null) {
-         // if onComplete is null, this will be null ;)
-         runToUse = onComplete;
-      }
-      else {
-         final AtomicInteger count = new AtomicInteger(actualDestinations.length);
-         runToUse = new Runnable() {
-            @Override
-            public void run() {
-               if (count.decrementAndGet() == 0) {
-                  onComplete.run();
-               }
-            }
-         };
+   public SendingResult send(AMQProducerBrokerExchange producerExchange,
+         Message messageSend, boolean sendProducerAck) throws Exception
+   {
+      SendingResult result = new SendingResult();
+      TransactionId tid = messageSend.getTransactionId();
+      if (tid != null)
+      {
+         resetSessionTx(tid);
       }
 
-      SimpleString[] addresses = new SimpleString[actualDestinations.length];
-      PagingStore[] pagingStores = new PagingStore[actualDestinations.length];
+      messageSend.setBrokerInTime(System.currentTimeMillis());
 
-      // We fillup addresses, pagingStores and we will throw failure if that's the case
-      for (int i = 0; i < actualDestinations.length; i++) {
-         ActiveMQDestination dest = actualDestinations[i];
-         addresses[i] = OpenWireUtil.toCoreAddress(dest);
-         pagingStores[i] = server.getPagingManager().getPageStore(addresses[i]);
-         if (pagingStores[i].getAddressFullMessagePolicy() == AddressFullMessagePolicy.FAIL && pagingStores[i].isFull()) {
-            throw new ResourceAllocationException("Queue is full");
-         }
+      ActiveMQDestination destination = messageSend.getDestination();
+      ActiveMQDestination[] actualDestinations = null;
+      if (destination.isComposite())
+      {
+         actualDestinations = destination.getCompositeDestinations();
+      }
+      else
+      {
+         actualDestinations = new ActiveMQDestination[] {destination};
       }
 
-      for (int i = 0; i < actualDestinations.length; i++) {
-
-         ServerMessage coreMsg = originalCoreMsg.copy();
-
-         coreMsg.setAddress(addresses[i]);
-
-         PagingStore store = pagingStores[i];
-
-         if (store.isFull()) {
-            connection.getTransportConnection().setAutoRead(false);
+      for (ActiveMQDestination dest : actualDestinations)
+      {
+         ServerMessageImpl coreMsg = new ServerMessageImpl(-1, 1024);
+
+         /* ActiveMQ failover transport will attempt to reconnect after connection failure.  Any sent messages that did
+         * not receive acks will be resent.  (ActiveMQ broker handles this by returning a last sequence id received to
+         * the client).  To handle this in Artemis we use a duplicate ID cache.  To do this we check to see if the
+         * message comes from failover connection.  If so we add a DUPLICATE_ID to handle duplicates after a resend. */
+         if (producerExchange.getConnectionContext().isFaultTolerant() && !messageSend.getProperties().containsKey(ServerMessage.HDR_DUPLICATE_DETECTION_ID))
+         {
+            coreMsg.putStringProperty(ServerMessage.HDR_DUPLICATE_DETECTION_ID.toString(), messageSend.getMessageId().toString());
          }
-
-         getCoreSession().send(coreMsg, false);
-
-         if (runToUse != null) {
-            // if the timeout is >0, it will wait this much milliseconds
-            // before running the the runToUse
-            // this will eventually unblock blocked destinations
-            // playing flow control
-            store.checkMemory(runToUse);
+         OpenWireMessageConverter.toCoreMessage(coreMsg, messageSend, connection.getMarshaller());
+         SimpleString address = OpenWireUtil.toCoreAddress(dest);
+         coreMsg.setAddress(address);
+
+         PagingStoreImpl store = (PagingStoreImpl)server.getPagingManager().getPageStore(address);
+         if (store.isFull())
+         {
+            result.setBlockNextSend(true);
+            result.setBlockPagingStore(store);
+            result.setBlockingAddress(address);
+            //now we hold this message send until the store has space.
+            //we do this by put it in a scheduled task
+            ScheduledExecutorService scheduler = server.getScheduledPool();
+            Runnable sendRetryTask = new SendRetryTask(coreMsg, producerExchange, sendProducerAck,
+                                                       messageSend.getSize(), messageSend.getCommandId());
+            scheduler.schedule(sendRetryTask, 10, TimeUnit.MILLISECONDS);
+         }
+         else
+         {
+            coreSession.send(coreMsg, false);
          }
       }
+      return result;
    }
 
-   public AMQServerSession getCoreSession() {
-      return this.coreSession;
-   }
-
-   public ActiveMQServer getCoreServer() {
-      return this.server;
-   }
-
-   public void removeConsumer(long consumerId) throws Exception {
-      boolean failed = !(this.txId != null || this.isTx);
-
-      coreSession.amqCloseConsumer(consumerId, failed);
-      consumers.remove(consumerId);
-   }
-
-   public WireFormat getMarshaller() {
+   public WireFormat getMarshaller()
+   {
       return this.connection.getMarshaller();
    }
 
-   public void acknowledge(MessageAck ack, AMQConsumer consumer) throws Exception {
+   public void acknowledge(MessageAck ack) throws Exception
+   {
       TransactionId tid = ack.getTransactionId();
-      if (tid != null) {
+      if (tid != null)
+      {
          this.resetSessionTx(ack.getTransactionId());
       }
+      ConsumerId consumerId = ack.getConsumerId();
+      long nativeConsumerId = consumerIdMap.get(consumerId.getValue());
+      AMQConsumer consumer = consumers.get(nativeConsumerId);
       consumer.acknowledge(ack);
 
-      if (tid == null && ack.getAckType() == MessageAck.STANDARD_ACK_TYPE) {
+      if (tid == null && ack.getAckType() == MessageAck.STANDARD_ACK_TYPE)
+      {
          this.coreSession.commit();
       }
    }
@@ -410,23 +352,28 @@ public class AMQSession implements SessionCallback {
    //AMQ session and transactions are create separately. Whether a session
    //is transactional or not is known only when a TransactionInfo command
    //comes in.
-   public void resetSessionTx(TransactionId xid) throws Exception {
-      if ((this.txId != null) && (!this.txId.equals(xid))) {
+   public void resetSessionTx(TransactionId xid) throws Exception
+   {
+      if ((this.txId != null) && (!this.txId.equals(xid)))
+      {
          throw new IllegalStateException("Session already associated with a tx");
       }
 
       this.isTx = true;
-      if (this.txId == null) {
+      if (this.txId == null)
+      {
          //now reset session
          this.txId = xid;
 
-         if (xid.isXATransaction()) {
-            XATransactionId xaXid = (XATransactionId) xid;
+         if (xid.isXATransaction())
+         {
+            XATransactionId xaXid = (XATransactionId)xid;
             coreSession.enableXA();
             XidImpl coreXid = new XidImpl(xaXid.getBranchQualifier(), xaXid.getFormatId(), xaXid.getGlobalTransactionId());
             coreSession.xaStart(coreXid);
          }
-         else {
+         else
+         {
             coreSession.enableTx();
          }
 
@@ -434,39 +381,36 @@ public class AMQSession implements SessionCallback {
       }
    }
 
-   private void checkTx(TransactionId inId) {
-      if (this.txId == null) {
+   private void checkTx(TransactionId inId)
+   {
+      if (this.txId == null)
+      {
          throw new IllegalStateException("Session has no transaction associated with it");
       }
 
-      if (!this.txId.equals(inId)) {
+      if (!this.txId.equals(inId))
+      {
          throw new IllegalStateException("Session already associated with another tx");
       }
 
       this.isTx = true;
    }
 
-   public void endTransaction(TransactionInfo info) throws Exception {
+   public void commitOnePhase(TransactionInfo info) throws Exception
+   {
       checkTx(info.getTransactionId());
 
-      if (txId.isXATransaction()) {
-         XATransactionId xid = (XATransactionId) txId;
-         XidImpl coreXid = new XidImpl(xid.getBranchQualifier(), xid.getFormatId(), xid.getGlobalTransactionId());
-         this.coreSession.xaEnd(coreXid);
-      }
-   }
-
-   public void commitOnePhase(TransactionInfo info) throws Exception {
-      checkTx(info.getTransactionId());
-
-      if (txId.isXATransaction()) {
+      if (txId.isXATransaction())
+      {
          XATransactionId xid = (XATransactionId) txId;
          XidImpl coreXid = new XidImpl(xid.getBranchQualifier(), xid.getFormatId(), xid.getGlobalTransactionId());
          this.coreSession.xaCommit(coreXid, true);
       }
-      else {
+      else
+      {
          Iterator<AMQConsumer> iter = consumers.values().iterator();
-         while (iter.hasNext()) {
+         while (iter.hasNext())
+         {
             AMQConsumer consumer = iter.next();
             consumer.finishTx();
          }
@@ -476,13 +420,15 @@ public class AMQSession implements SessionCallback {
       this.txId = null;
    }
 
-   public void prepareTransaction(XATransactionId xid) throws Exception {
+   public void prepareTransaction(XATransactionId xid) throws Exception
+   {
       checkTx(xid);
       XidImpl coreXid = new XidImpl(xid.getBranchQualifier(), xid.getFormatId(), xid.getGlobalTransactionId());
       this.coreSession.xaPrepare(coreXid);
    }
 
-   public void commitTwoPhase(XATransactionId xid) throws Exception {
+   public void commitTwoPhase(XATransactionId xid) throws Exception
+   {
       checkTx(xid);
       XidImpl coreXid = new XidImpl(xid.getBranchQualifier(), xid.getFormatId(), xid.getGlobalTransactionId());
       this.coreSession.xaCommit(coreXid, false);
@@ -490,17 +436,21 @@ public class AMQSession implements SessionCallback {
       this.txId = null;
    }
 
-   public void rollback(TransactionInfo info) throws Exception {
+   public void rollback(TransactionInfo info) throws Exception
+   {
       checkTx(info.getTransactionId());
-      if (this.txId.isXATransaction()) {
+      if (this.txId.isXATransaction())
+      {
          XATransactionId xid = (XATransactionId) txId;
          XidImpl coreXid = new XidImpl(xid.getBranchQualifier(), xid.getFormatId(), xid.getGlobalTransactionId());
          this.coreSession.xaRollback(coreXid);
       }
-      else {
+      else
+      {
          Iterator<AMQConsumer> iter = consumers.values().iterator();
-         Set<Long> acked = new HashSet<>();
-         while (iter.hasNext()) {
+         Set<Long> acked = new HashSet<Long>();
+         while (iter.hasNext())
+         {
             AMQConsumer consumer = iter.next();
             consumer.rollbackTx(acked);
          }
@@ -512,15 +462,18 @@ public class AMQSession implements SessionCallback {
       this.txId = null;
    }
 
-   public void recover(List<TransactionId> recovered) {
+   public void recover(List<TransactionId> recovered)
+   {
       List<Xid> xids = this.coreSession.xaGetInDoubtXids();
-      for (Xid xid : xids) {
+      for (Xid xid : xids)
+      {
          XATransactionId amqXid = new XATransactionId(xid);
          recovered.add(amqXid);
       }
    }
 
-   public void forget(final TransactionId tid) throws Exception {
+   public void forget(final TransactionId tid) throws Exception
+   {
       checkTx(tid);
       XATransactionId xid = (XATransactionId) tid;
       XidImpl coreXid = new XidImpl(xid.getBranchQualifier(), xid.getFormatId(), xid.getGlobalTransactionId());
@@ -528,41 +481,127 @@ public class AMQSession implements SessionCallback {
       this.txId = null;
    }
 
-   public ConnectionInfo getConnectionInfo() {
+   public ConnectionInfo getConnectionInfo()
+   {
       return this.connInfo;
    }
 
-   public void setInternal(boolean internal) {
+   public void setInternal(boolean internal)
+   {
       this.coreSession.setInternal(internal);
    }
 
-   public boolean isInternal() {
+   public boolean isInternal()
+   {
       return this.coreSession.isInternal();
    }
 
-   public void deliverMessage(MessageDispatch dispatch) {
+   public void deliverMessage(MessageDispatch dispatch)
+   {
       this.connection.deliverMessage(dispatch);
    }
 
-   public void close() throws Exception {
+   public void close() throws Exception
+   {
       this.coreSession.close(false);
    }
 
-   public AMQConsumer getConsumer(Long coreConsumerId) {
-      return consumers.get(coreConsumerId);
-   }
+   private class SendRetryTask implements Runnable
+   {
+      private ServerMessage coreMsg;
+      private AMQProducerBrokerExchange producerExchange;
+      private boolean sendProducerAck;
+      private int msgSize;
+      private int commandId;
+
+      public SendRetryTask(ServerMessage coreMsg, AMQProducerBrokerExchange producerExchange,
+            boolean sendProducerAck, int msgSize, int commandId)
+      {
+         this.coreMsg = coreMsg;
+         this.producerExchange = producerExchange;
+         this.sendProducerAck = sendProducerAck;
+         this.msgSize = msgSize;
+         this.commandId = commandId;
+      }
 
-   public void updateConsumerPrefetchSize(ConsumerId consumerId, int prefetch) {
-      Iterator<AMQConsumer> iterator = consumers.values().iterator();
-      while (iterator.hasNext()) {
-         AMQConsumer consumer = iterator.next();
-         if (consumer.getId().equals(consumerId)) {
-            consumer.setPrefetchSize(prefetch);
+      @Override
+      public void run()
+      {
+         synchronized (AMQSession.this)
+         {
+            try
+            {
+               // check pageStore
+               SimpleString address = coreMsg.getAddress();
+               PagingStoreImpl store = (PagingStoreImpl) server
+                     .getPagingManager().getPageStore(address);
+               if (store.isFull())
+               {
+                  // if store is still full, schedule another
+                  server.getScheduledPool().schedule(this, 10, TimeUnit.MILLISECONDS);
+               }
+               else
+               {
+                  // now send the message again.
+                  coreSession.send(coreMsg, false);
+
+                  if (sendProducerAck)
+                  {
+                     ProducerInfo producerInfo = producerExchange
+                           .getProducerState().getInfo();
+                     ProducerAck ack = new ProducerAck(
+                           producerInfo.getProducerId(), msgSize);
+                     connection.dispatchAsync(ack);
+                  }
+                  else
+                  {
+                     Response response = new Response();
+                     response.setCorrelationId(commandId);
+                     connection.dispatchAsync(response);
+                  }
+               }
+            }
+            catch (Exception e)
+            {
+               ExceptionResponse response = new ExceptionResponse(e);
+               response.setCorrelationId(commandId);
+               connection.dispatchAsync(response);
+            }
          }
+
       }
    }
 
-   public OpenWireConnection getConnection() {
-      return connection;
+   public void blockingWaitForSpace(AMQProducerBrokerExchange producerExchange, SendingResult result) throws IOException
+   {
+      long start = System.currentTimeMillis();
+      long nextWarn = start;
+      producerExchange.blockingOnFlowControl(true);
+
+      AMQConnectionContext context = producerExchange.getConnectionContext();
+      PagingStoreImpl store = result.getBlockPagingStore();
+
+      //Destination.DEFAULT_BLOCKED_PRODUCER_WARNING_INTERVAL
+      long blockedProducerWarningInterval = 30000;
+      ProducerId producerId = producerExchange.getProducerState().getInfo().getProducerId();
+
+      while (store.isFull())
+      {
+         if (context.getStopping().get())
+         {
+            throw new IOException("Connection closed, send aborted.");
+         }
+
+         long now = System.currentTimeMillis();
+         if (now >= nextWarn)
+         {
+            ActiveMQServerLogger.LOGGER.warn("Memory Limit reached. Producer (" + producerId + ") stopped to prevent flooding "
+                               + result.getBlockingAddress()
+                               + " See http://activemq.apache.org/producer-flow-control.html for more info"
+                               + " (blocking for " + ((now - start) / 1000) + "s");
+            nextWarn = now + blockedProducerWarningInterval;
+         }
+      }
+      producerExchange.blockingOnFlowControl(false);
    }
 }