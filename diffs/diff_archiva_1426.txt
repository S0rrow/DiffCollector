diff --git a/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/ProxiedDavServer.java b/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/ProxiedDavServer.java
index 027f58f54..b0ad729c7 100644
--- a/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/ProxiedDavServer.java
+++ b/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/ProxiedDavServer.java
@@ -19,51 +19,43 @@
  * under the License.
  */
 
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.FileReader;
-import java.io.IOException;
-import java.io.PrintWriter;
-import java.util.ArrayList;
-import java.util.List;
-
-import javax.servlet.ServletConfig;
-import javax.servlet.ServletException;
-import javax.servlet.http.HttpServletResponse;
-
-import org.apache.maven.archiva.common.utils.PathUtil;
+import org.apache.maven.archiva.configuration.ArchivaConfiguration;
+import org.apache.maven.archiva.configuration.Configuration;
+import org.apache.maven.archiva.configuration.ManagedRepositoryConfiguration;
+import org.apache.maven.archiva.model.ArchivaRepository;
 import org.apache.maven.archiva.model.ArtifactReference;
 import org.apache.maven.archiva.model.ProjectReference;
 import org.apache.maven.archiva.model.VersionedReference;
 import org.apache.maven.archiva.proxy.ProxyException;
 import org.apache.maven.archiva.proxy.RepositoryProxyConnectors;
-import org.apache.maven.archiva.repository.ManagedRepositoryContent;
-import org.apache.maven.archiva.repository.RepositoryContentFactory;
-import org.apache.maven.archiva.repository.RepositoryException;
-import org.apache.maven.archiva.repository.RepositoryNotFoundException;
-import org.apache.maven.archiva.repository.audit.AuditEvent;
-import org.apache.maven.archiva.repository.audit.AuditListener;
-import org.apache.maven.archiva.repository.audit.Auditable;
-import org.apache.maven.archiva.repository.content.RepositoryRequest;
+import org.apache.maven.archiva.repository.ArchivaConfigurationAdaptor;
+import org.apache.maven.archiva.repository.layout.BidirectionalRepositoryLayout;
+import org.apache.maven.archiva.repository.layout.BidirectionalRepositoryLayoutFactory;
 import org.apache.maven.archiva.repository.layout.LayoutException;
 import org.apache.maven.archiva.repository.metadata.MetadataTools;
 import org.apache.maven.archiva.repository.metadata.RepositoryMetadataException;
-import org.apache.maven.archiva.security.ArchivaUser;
 import org.apache.maven.model.DistributionManagement;
 import org.apache.maven.model.Model;
 import org.apache.maven.model.Relocation;
 import org.apache.maven.model.io.xpp3.MavenXpp3Reader;
-import org.codehaus.plexus.util.xml.pull.XmlPullParserException;
+import org.apache.maven.wagon.ResourceDoesNotExistException;
 import org.codehaus.plexus.webdav.AbstractDavServerComponent;
 import org.codehaus.plexus.webdav.DavServerComponent;
 import org.codehaus.plexus.webdav.DavServerException;
-import org.codehaus.plexus.webdav.DavServerListener;
 import org.codehaus.plexus.webdav.servlet.DavServerRequest;
 import org.codehaus.plexus.webdav.util.WebdavMethodUtil;
 
+import javax.servlet.ServletConfig;
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServletResponse;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.IOException;
+
 /**
  * ProxiedDavServer
- * 
+ *
  * @author <a href="mailto:joakime@apache.org">Joakim Erdfelt</a>
  * @version $Id$
  * @plexus.component role="org.codehaus.plexus.webdav.DavServerComponent"
@@ -71,27 +63,16 @@
  */
 public class ProxiedDavServer
     extends AbstractDavServerComponent
-    implements Auditable
 {
     /**
      * @plexus.requirement role-hint="simple"
      */
     private DavServerComponent davServer;
 
-    /**
-     * @plexus.requirement role="org.apache.maven.archiva.repository.audit.AuditListener"
-     */
-    private List<AuditListener> auditListeners = new ArrayList<AuditListener>();
-
     /**
      * @plexus.requirement
      */
-    private RepositoryContentFactory repositoryFactory;
-
-    /**
-     * @plexus.requirement
-     */
-    private RepositoryRequest repositoryRequest;
+    private ArchivaConfiguration archivaConfiguration;
 
     /**
      * @plexus.requirement role-hint="default"
@@ -104,11 +85,15 @@
     private MetadataTools metadataTools;
 
     /**
-     * @plexus.requirement role-hint="xwork"
+     * @plexus.requirement
      */
-    private ArchivaUser archivaUser;
+    private BidirectionalRepositoryLayoutFactory layoutFactory;
+
+    private BidirectionalRepositoryLayout layout;
 
-    private ManagedRepositoryContent managedRepository;
+    private ManagedRepositoryConfiguration repositoryConfiguration;
+
+    private ArchivaRepository managedRepository;
 
     public String getPrefix()
     {
@@ -135,230 +120,131 @@ public void init( ServletConfig servletConfig )
     {
         davServer.init( servletConfig );
 
+        Configuration config = archivaConfiguration.getConfiguration();
+
+        repositoryConfiguration = config.findManagedRepositoryById( getPrefix() );
+
+        managedRepository =
+            ArchivaConfigurationAdaptor.toArchivaRepository( repositoryConfiguration );
+
         try
         {
-            managedRepository = repositoryFactory.getManagedRepositoryContent( getPrefix() );
+            layout = layoutFactory.getLayout( managedRepository.getLayoutType() );
         }
-        catch ( RepositoryNotFoundException e )
-        {
-            throw new DavServerException( e.getMessage(), e );
-        }
-        catch ( RepositoryException e )
+        catch ( LayoutException e )
         {
-            throw new DavServerException( e.getMessage(), e );
+            throw new DavServerException( "Unable to initialize dav server: " + e.getMessage(), e );
         }
     }
 
     public void process( DavServerRequest request, HttpServletResponse response )
         throws DavServerException, ServletException, IOException
     {
-        boolean isGet = WebdavMethodUtil.isReadMethod( request.getRequest().getMethod() );
-        boolean isPut = WebdavMethodUtil.isWriteMethod( request.getRequest().getMethod() );
-        String resource = request.getLogicalResource();
-
-        if ( isGet )
+        if ( WebdavMethodUtil.isReadMethod( request.getRequest().getMethod() ) )
         {
-            // Default behaviour is to treat the resource natively.
-            File resourceFile = new File( managedRepository.getRepoRoot(), resource );
-
-            // If this a directory resource, then we are likely browsing.
-            if ( resourceFile.exists() && resourceFile.isDirectory() )
+            // if ( !hasResource( request.getLogicalResource() ) )
+            // {
+            fetchContentFromProxies( request );
+            // }
+        }
+        else
+        {
+            // Create parent directories that don't exist when writing a file
+            // This actually makes this implementation not compliant to the
+            // WebDAV RFC - but we have enough knowledge
+            // about how the collection is being used to do this reasonably and
+            // some versions of Maven's WebDAV don't
+            // correctly create the collections themselves.
+            File rootDirectory = getRootDirectory();
+            if ( rootDirectory != null )
             {
-                String requestURL = request.getRequest().getRequestURL().toString();
+                new File( rootDirectory, request.getLogicalResource() ).getParentFile().mkdirs();
+            }
+        }
 
-                // [MRM-440] - If webdav URL lacks a trailing /, navigating to
-                // all links in the listing return 404.
-                if ( !requestURL.endsWith( "/" ) )
-                {
-                    String redirectToLocation = requestURL + "/";
-                    response.sendRedirect( redirectToLocation );
-                    return;
-                }
+        davServer.process( request, response );
+    }
 
-                // Process the request.
-                davServer.process( request, response );
+    private void fetchContentFromProxies( DavServerRequest request )
+        throws ServletException
+    {
+        String resource = request.getLogicalResource();
 
-                // All done.
-                return;
-            }
+        if ( resource.endsWith( ".sha1" ) || resource.endsWith( ".md5" ) )
+        {
+            // Checksums are fetched with artifact / metadata.
+            return;
+        }
+
+        // Is it a Metadata resource?
+        if ( resource.endsWith( "/" + MetadataTools.MAVEN_METADATA ) )
+        {
+            ProjectReference project;
+            VersionedReference versioned;
 
-            // At this point the incoming request can either be in default or
-            // legacy layout format.
             try
             {
-                boolean fromProxy = fetchContentFromProxies( request, resource );
-
-                // Perform an adjustment of the resource to the managed
-                // repository expected path.
-                resource =
-                    repositoryRequest
-                        .toNativePath( request.getLogicalResource(), managedRepository );
-                resourceFile = new File( managedRepository.getRepoRoot(), resource );                
 
-                // Adjust the pathInfo resource to be in the format that the dav
-                // server impl expects.
-                request.setLogicalResource( resource );
-
-                boolean previouslyExisted = resourceFile.exists();
-
-                // Attempt to fetch the resource from any defined proxy.
-                if ( fromProxy )
+                versioned = metadataTools.toVersionedReference( resource );
+                if ( versioned != null )
                 {
-                    processAuditEvents( request, resource, previouslyExisted, resourceFile,
-                        " (proxied)" );
+                    connectors.fetchFromProxies( managedRepository, versioned );
+                    request.getRequest().setPathInfo( metadataTools.toPath( versioned ) );
+                    return;
                 }
             }
-            catch ( LayoutException e )
+            catch ( RepositoryMetadataException e )
             {
-                // Invalid resource, pass it on.
-                respondResourceMissing( request, response, e );
-
-                // All done.
-                return;
+                /* eat it */
+            }
+            catch ( ProxyException e )
+            {
+                throw new ServletException( "Unable to fetch versioned metadata resource.", e );
             }
 
-            if ( resourceFile.exists() )
+            try
             {
-                // [MRM-503] - Metadata file need Pragma:no-cache response
-                // header.
-                if ( request.getLogicalResource().endsWith( "/maven-metadata.xml" ) )
+                project = metadataTools.toProjectReference( resource );
+                if ( project != null )
                 {
-                    response.addHeader( "Pragma", "no-cache" );
-                    response.addHeader( "Cache-Control", "no-cache" );
+                    connectors.fetchFromProxies( managedRepository, project );
+                    request.getRequest().setPathInfo( metadataTools.toPath( project ) );
                 }
-
-                // TODO: [MRM-524] determine http caching options for other
-                // types of files (artifacts, sha1, md5, snapshots)
-
-                davServer.process( request, response );
             }
-            else
+            catch ( RepositoryMetadataException e )
             {
-                respondResourceMissing( request, response, null );
+                /* eat it */
             }
-        }
-
-        if ( isPut )
-        {
-            /*
-             * Create parent directories that don't exist when writing a file
-             * This actually makes this implementation not compliant to the
-             * WebDAV RFC - but we have enough knowledge about how the
-             * collection is being used to do this reasonably and some versions
-             * of Maven's WebDAV don't correctly create the collections
-             * themselves.
-             */
-
-            File rootDirectory = getRootDirectory();
-            if ( rootDirectory != null )
+            catch ( ProxyException e )
             {
-                File destDir = new File( rootDirectory, resource ).getParentFile();
-                if ( !destDir.exists() )
-                {
-                    destDir.mkdirs();
-                    String relPath =
-                        PathUtil.getRelative( rootDirectory.getAbsolutePath(), destDir );
-                    triggerAuditEvent( request, relPath, AuditEvent.CREATE_DIR );
-                }
+                throw new ServletException( "Unable to fetch project metadata resource.", e );
             }
-
-            File resourceFile = new File( managedRepository.getRepoRoot(), resource );
-
-            boolean previouslyExisted = resourceFile.exists();
-
-            // Allow the dav server to process the put request.
-            davServer.process( request, response );
-
-            processAuditEvents( request, resource, previouslyExisted, resourceFile, null );
-
-            // All done.
-            return;
         }
-    }
 
-    private void respondResourceMissing( DavServerRequest request, HttpServletResponse response,
-                                         Throwable t )
-    {
-        response.setStatus( HttpServletResponse.SC_NOT_FOUND );
+        // Not any of the above? Then it's gotta be an artifact reference.
+        ArtifactReference artifact;
+        BidirectionalRepositoryLayout resourceLayout;
 
         try
         {
-            StringBuffer missingUrl = new StringBuffer();
-            missingUrl.append( request.getRequest().getScheme() ).append( "://" );
-            missingUrl.append( request.getRequest().getServerName() ).append( ":" );
-            missingUrl.append( request.getRequest().getServerPort() );
-            missingUrl.append( request.getRequest().getServletPath() );
-
-            String message = "Error 404 Not Found";
-
-            PrintWriter out = new PrintWriter( response.getOutputStream() );
-
-            response.setContentType( "text/html; charset=\"UTF-8\"" );
-
-            out.println( "<html>" );
-            out.println( "<head><title>" + message + "</title></head>" );
-            out.println( "<body>" );
-
-            out.print( "<p><h1>" );
-            out.print( message );
-            out.println( "</h1></p>" );
-
-            out.print( "<p>The following resource does not exist: <a href=\"" );
-            out.print( missingUrl.toString() );
-            out.println( "\">" );
-            out.print( missingUrl.toString() );
-            out.println( "</a></p>" );
-
-            if ( t != null )
-            {
-                out.println( "<pre>" );
-                t.printStackTrace( out );
-                out.println( "</pre>" );
-            }
-
-            out.println( "</body></html>" );
-
-            out.flush();
-        }
-        catch ( IOException e )
-        {
-            e.printStackTrace();
+            resourceLayout = layoutFactory.getLayoutForPath( resource );
         }
-    }
-
-    private boolean fetchContentFromProxies( DavServerRequest request, String resource )
-        throws ServletException
-    {
-        if ( repositoryRequest.isSupportFile( resource ) )
-        {
-            // Checksums are fetched with artifact / metadata.
-
-            // Need to adjust the path for the checksum resource.
-            return false;
-        }
-
-        // Is it a Metadata resource?
-        if ( repositoryRequest.isDefault( resource ) && repositoryRequest.isMetadata( resource ) )
+        catch ( LayoutException e )
         {
-            return fetchMetadataFromProxies( request, resource );
+            /* invalid request - eat it */
+            return;
         }
 
-        // Not any of the above? Then it's gotta be an artifact reference.
         try
         {
-            // Get the artifact reference in a layout neutral way.
-            ArtifactReference artifact = repositoryRequest.toArtifactReference( resource );
-
+            artifact = resourceLayout.toArtifactReference( resource );
             if ( artifact != null )
             {
                 applyServerSideRelocation( artifact );
 
-                File proxiedFile = connectors.fetchFromProxies( managedRepository, artifact );
-
-                // Set the path to the resource using managed repository
-                // specific layout format.
-                request.setLogicalResource( managedRepository.toPath( artifact ) );
-                return ( proxiedFile != null );
+                connectors.fetchFromProxies( managedRepository, artifact );
+                request.getRequest().setPathInfo( layout.toPath( artifact ) );
+                return;
             }
         }
         catch ( LayoutException e )
@@ -369,53 +255,6 @@ private boolean fetchContentFromProxies( DavServerRequest request, String resour
         {
             throw new ServletException( "Unable to fetch artifact resource.", e );
         }
-        return false;
-    }
-
-    private boolean fetchMetadataFromProxies( DavServerRequest request, String resource )
-        throws ServletException
-    {
-        ProjectReference project;
-        VersionedReference versioned;
-
-        try
-        {
-
-            versioned = metadataTools.toVersionedReference( resource );
-            if ( versioned != null )
-            {
-                connectors.fetchFromProxies( managedRepository, versioned );
-                return true;
-            }
-        }
-        catch ( RepositoryMetadataException e )
-        {
-            /* eat it */
-        }
-        catch ( ProxyException e )
-        {
-            throw new ServletException( "Unable to fetch versioned metadata resource.", e );
-        }
-
-        try
-        {
-            project = metadataTools.toProjectReference( resource );
-            if ( project != null )
-            {
-                connectors.fetchFromProxies( managedRepository, project );
-                return true;
-            }
-        }
-        catch ( RepositoryMetadataException e )
-        {
-            /* eat it */
-        }
-        catch ( ProxyException e )
-        {
-            throw new ServletException( "Unable to fetch project metadata resource.", e );
-        }
-
-        return false;
     }
 
     /**
@@ -447,13 +286,7 @@ protected void applyServerSideRelocation( ArtifactReference artifact )
         connectors.fetchFromProxies( managedRepository, pomReference );
 
         // Open and read the POM from the managed repo
-        File pom = managedRepository.toFile( pomReference );
-
-        if ( !pom.exists() )
-        {
-            return;
-        }
-
+        File pom = new File( getRootDirectory(), layout.toPath( pomReference ) );
         try
         {
             Model model = new MavenXpp3Reader().read( new FileReader( pom ) );
@@ -483,129 +316,14 @@ protected void applyServerSideRelocation( ArtifactReference artifact )
         {
             // Artifact has no POM in repo : ignore
         }
-        catch ( IOException e )
-        {
-            // Unable to read POM : ignore.
-        }
-        catch ( XmlPullParserException e )
-        {
-            // Invalid POM : ignore
-        }
-    }
-
-    @Override
-    public void addListener( DavServerListener listener )
-    {
-        super.addListener( listener );
-        davServer.addListener( listener );
-    }
-
-    @Override
-    public boolean isUseIndexHtml()
-    {
-        return davServer.isUseIndexHtml();
-    }
-
-    @Override
-    public boolean hasResource( String resource )
-    {
-        return davServer.hasResource( resource );
-    }
-
-    @Override
-    public void removeListener( DavServerListener listener )
-    {
-        davServer.removeListener( listener );
-    }
-
-    @Override
-    public void setUseIndexHtml( boolean useIndexHtml )
-    {
-        super.setUseIndexHtml( useIndexHtml );
-        davServer.setUseIndexHtml( useIndexHtml );
-    }
-
-    public ManagedRepositoryContent getRepository()
-    {
-        return managedRepository;
-    }
-
-    private void processAuditEvents( DavServerRequest request, String resource,
-                                     boolean previouslyExisted, File resourceFile, String suffix )
-    {
-        if ( suffix == null )
-        {
-            suffix = "";
-        }
-
-        // Process Create Audit Events.
-        if ( !previouslyExisted && resourceFile.exists() )
+        catch ( Exception e )
         {
-            if ( resourceFile.isFile() )
-            {
-                triggerAuditEvent( request, resource, AuditEvent.CREATE_FILE + suffix );
-            }
-            else if ( resourceFile.isDirectory() )
-            {
-                triggerAuditEvent( request, resource, AuditEvent.CREATE_DIR + suffix );
-            }
+            // invalid POM : ignore
         }
-        // Process Remove Audit Events.
-        else if ( previouslyExisted && !resourceFile.exists() )
-        {
-            if ( resourceFile.isFile() )
-            {
-                triggerAuditEvent( request, resource, AuditEvent.REMOVE_FILE + suffix );
-            }
-            else if ( resourceFile.isDirectory() )
-            {
-                triggerAuditEvent( request, resource, AuditEvent.REMOVE_DIR + suffix );
-            }
-        }
-        // Process modify events.
-        else
-        {
-            if ( resourceFile.isFile() )
-            {
-                triggerAuditEvent( request, resource, AuditEvent.MODIFY_FILE + suffix );
-            }
-        }
-    }
-
-    private void triggerAuditEvent( String user, String remoteIP, String resource, String action )
-    {
-        AuditEvent event = new AuditEvent( this.getPrefix(), user, resource, action );
-        event.setRemoteIP( remoteIP );
-
-        for ( AuditListener listener : auditListeners )
-        {
-            listener.auditEvent( event );
-        }
-    }
-
-    private void triggerAuditEvent( DavServerRequest request, String resource, String action )
-    {
-        triggerAuditEvent( archivaUser.getActivePrincipal(), getRemoteIP( request ), resource,
-            action );
-    }
-
-    private String getRemoteIP( DavServerRequest request )
-    {
-        return request.getRequest().getRemoteAddr();
-    }
-
-    public void addAuditListener( AuditListener listener )
-    {
-        this.auditListeners.add( listener );
-    }
-
-    public void clearAuditListeners()
-    {
-        this.auditListeners.clear();
     }
 
-    public void removeAuditListener( AuditListener listener )
+    public ManagedRepositoryConfiguration getRepositoryConfiguration()
     {
-        this.auditListeners.remove( listener );
+        return repositoryConfiguration;
     }
 }