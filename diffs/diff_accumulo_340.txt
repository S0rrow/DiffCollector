diff --git a/test/src/test/java/org/apache/accumulo/test/functional/ConcurrentDeleteTableIT.java b/test/src/test/java/org/apache/accumulo/test/functional/ConcurrentDeleteTableIT.java
index 0c63e5977a..47980953b3 100644
--- a/test/src/test/java/org/apache/accumulo/test/functional/ConcurrentDeleteTableIT.java
+++ b/test/src/test/java/org/apache/accumulo/test/functional/ConcurrentDeleteTableIT.java
@@ -18,11 +18,8 @@
 package org.apache.accumulo.test.functional;
 
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.List;
-import java.util.Map;
 import java.util.Random;
-import java.util.Set;
 import java.util.TreeSet;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutorService;
@@ -38,8 +35,6 @@ import org.apache.accumulo.core.client.Connector;
 import org.apache.accumulo.core.client.Instance;
 import org.apache.accumulo.core.client.MutationsRejectedException;
 import org.apache.accumulo.core.client.TableNotFoundException;
-import org.apache.accumulo.core.client.TableOfflineException;
-import org.apache.accumulo.core.client.admin.CompactionConfig;
 import org.apache.accumulo.core.conf.Property;
 import org.apache.accumulo.core.data.Mutation;
 import org.apache.accumulo.core.security.Authorizations;
@@ -62,7 +57,12 @@ public class ConcurrentDeleteTableIT extends AccumuloClusterIT {
     final Connector c = getConnector();
     String[] tables = getUniqueNames(2);
 
-    TreeSet<Text> splits = createSplits();
+    TreeSet<Text> splits = new TreeSet<>();
+
+    for (int i = 0; i < 1000; i++) {
+      Text split = new Text(String.format("%09x", i * 100000));
+      splits.add(split);
+    }
 
     ExecutorService es = Executors.newFixedThreadPool(20);
 
@@ -76,12 +76,11 @@ public class ConcurrentDeleteTableIT extends AccumuloClusterIT {
       }
       count++;
 
-      int numDeleteOps = 20;
-      final CountDownLatch cdl = new CountDownLatch(numDeleteOps);
+      final CountDownLatch cdl = new CountDownLatch(20);
 
       List<Future<?>> futures = new ArrayList<>();
 
-      for (int i = 0; i < numDeleteOps; i++) {
+      for (int i = 0; i < 20; i++) {
         Future<?> future = es.submit(new Runnable() {
 
           @Override
@@ -122,156 +121,6 @@ public class ConcurrentDeleteTableIT extends AccumuloClusterIT {
     es.shutdown();
   }
 
-  private TreeSet<Text> createSplits() {
-    TreeSet<Text> splits = new TreeSet<>();
-
-    for (int i = 0; i < 1000; i++) {
-      Text split = new Text(String.format("%09x", i * 100000));
-      splits.add(split);
-    }
-    return splits;
-  }
-
-  private static abstract class DelayedTableOp implements Runnable {
-    private CountDownLatch cdl;
-
-    DelayedTableOp(CountDownLatch cdl) {
-      this.cdl = cdl;
-    }
-
-    public void run() {
-      try {
-        cdl.countDown();
-        cdl.await();
-        Thread.sleep(10);
-        doTableOp();
-      } catch (TableNotFoundException e) {
-        // expected
-      } catch (RuntimeException e) {
-        throw e;
-      } catch (Exception e) {
-        throw new RuntimeException(e);
-      }
-    }
-
-    protected abstract void doTableOp() throws Exception;
-  }
-
-  @Test
-  public void testConcurrentFateOpsWithDelete() throws Exception {
-    final Connector c = getConnector();
-    String[] tables = getUniqueNames(2);
-
-    TreeSet<Text> splits = createSplits();
-
-    int numOperations = 8;
-
-    ExecutorService es = Executors.newFixedThreadPool(numOperations);
-
-    int count = 0;
-    for (final String table : tables) {
-      c.tableOperations().create(table);
-      c.tableOperations().addSplits(table, splits);
-      writeData(c, table);
-      if (count == 1) {
-        c.tableOperations().flush(table, null, null, true);
-      }
-      count++;
-
-      // increment this for each test
-      final CountDownLatch cdl = new CountDownLatch(numOperations);
-
-      List<Future<?>> futures = new ArrayList<>();
-
-      futures.add(es.submit(new Runnable() {
-        @Override
-        public void run() {
-          try {
-            cdl.countDown();
-            cdl.await();
-            c.tableOperations().delete(table);
-          } catch (TableNotFoundException | TableOfflineException e) {
-            // expected
-          } catch (InterruptedException | AccumuloException | AccumuloSecurityException e) {
-            throw new RuntimeException(e);
-          }
-        }
-      }));
-
-      futures.add(es.submit(new DelayedTableOp(cdl) {
-        @Override
-        protected void doTableOp() throws Exception {
-          c.tableOperations().compact(table, new CompactionConfig());
-        }
-      }));
-
-      futures.add(es.submit(new DelayedTableOp(cdl) {
-        @Override
-        protected void doTableOp() throws Exception {
-          c.tableOperations().merge(table, null, null);
-        }
-      }));
-
-      futures.add(es.submit(new DelayedTableOp(cdl) {
-        @Override
-        protected void doTableOp() throws Exception {
-          Map<String,String> m = Collections.emptyMap();
-          Set<String> s = Collections.emptySet();
-          c.tableOperations().clone(table, table + "_clone", true, m, s);
-        }
-      }));
-
-      futures.add(es.submit(new DelayedTableOp(cdl) {
-        @Override
-        protected void doTableOp() throws Exception {
-          c.tableOperations().deleteRows(table, null, null);
-        }
-      }));
-
-      futures.add(es.submit(new DelayedTableOp(cdl) {
-        @Override
-        protected void doTableOp() throws Exception {
-          c.tableOperations().cancelCompaction(table);
-        }
-      }));
-
-      futures.add(es.submit(new DelayedTableOp(cdl) {
-        @Override
-        protected void doTableOp() throws Exception {
-          c.tableOperations().rename(table, table + "_renamed");
-        }
-      }));
-
-      futures.add(es.submit(new DelayedTableOp(cdl) {
-        @Override
-        protected void doTableOp() throws Exception {
-          c.tableOperations().offline(table);
-        }
-      }));
-
-      Assert.assertEquals(numOperations, futures.size());
-
-      for (Future<?> future : futures) {
-        future.get();
-      }
-
-      try {
-        c.createScanner(table, Authorizations.EMPTY);
-        Assert.fail("Expected table " + table + " to be gone.");
-      } catch (TableNotFoundException tnfe) {
-        // expected
-      }
-
-      FateStatus fateStatus = getFateStatus();
-
-      // ensure there are no dangling locks... before ACCUMULO-4575 was fixed concurrent delete tables could fail and leave dangling locks.
-      Assert.assertEquals(0, fateStatus.getDanglingHeldLocks().size());
-      Assert.assertEquals(0, fateStatus.getDanglingWaitingLocks().size());
-    }
-
-    es.shutdown();
-  }
-
   private FateStatus getFateStatus() throws KeeperException, InterruptedException {
     Instance instance = getConnector().getInstance();
     AdminUtil<String> admin = new AdminUtil<>(false);