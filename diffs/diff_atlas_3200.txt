diff --git a/repository/src/main/java/org/apache/atlas/repository/graph/SolrIndexHelper.java b/repository/src/main/java/org/apache/atlas/repository/graph/SolrIndexHelper.java
index 814b9f5fc..4380a7ed3 100644
--- a/repository/src/main/java/org/apache/atlas/repository/graph/SolrIndexHelper.java
+++ b/repository/src/main/java/org/apache/atlas/repository/graph/SolrIndexHelper.java
@@ -23,7 +23,6 @@ import org.apache.atlas.model.typedef.AtlasStructDef.AtlasAttributeDef;
 import org.apache.atlas.repository.Constants;
 import org.apache.atlas.repository.graphdb.AtlasGraph;
 import org.apache.atlas.repository.graphdb.AtlasGraphIndexClient;
-import org.apache.atlas.type.AtlasBusinessMetadataType;
 import org.apache.atlas.type.AtlasEntityType;
 import org.apache.atlas.type.AtlasStructType.AtlasAttribute;
 import org.apache.atlas.type.AtlasTypeRegistry;
@@ -37,8 +36,6 @@ import java.util.*;
 
 import static org.apache.atlas.model.typedef.AtlasStructDef.AtlasAttributeDef.DEFAULT_SEARCHWEIGHT;
 import static org.apache.atlas.repository.Constants.CLASSIFICATION_TEXT_KEY;
-import static org.apache.atlas.repository.Constants.CUSTOM_ATTRIBUTES_PROPERTY_KEY;
-import static org.apache.atlas.repository.Constants.LABELS_PROPERTY_KEY;
 import static org.apache.atlas.repository.Constants.TYPE_NAME_PROPERTY_KEY;
 
 /**
@@ -51,8 +48,6 @@ public class SolrIndexHelper implements IndexChangeListener {
 
     public static final int DEFAULT_SEARCHWEIGHT_FOR_STRINGS = 3;
     public static final int SEARCHWEIGHT_FOR_CLASSIFICATIONS = 10;
-    public static final int SEARCHWEIGHT_FOR_LABELS          = 10;
-    public static final int SEARCHWEIGHT_FOR_CUSTOM_ATTRS    = 3;
     public static final int SEARCHWEIGHT_FOR_TYPENAME        = 1;
 
     private static final int MIN_SEARCH_WEIGHT_FOR_SUGGESTIONS = 8;
@@ -63,40 +58,25 @@ public class SolrIndexHelper implements IndexChangeListener {
     public SolrIndexHelper(AtlasTypeRegistry typeRegistry) {
         this.typeRegistry = typeRegistry;
     }
-    public boolean initializationCompleted = false;
 
     @Override
     public void onChange(ChangedTypeDefs changedTypeDefs) {
         if (!AtlasRepositoryConfiguration.isFreeTextSearchEnabled() ||
-            changedTypeDefs == null || !(changedTypeDefs.hasEntityDef() || changedTypeDefs.hasBusinessMetadataDef())) { // nothing to do if there are no changes to entity-defs
+            changedTypeDefs == null || !changedTypeDefs.hasEntityDef()) { // nothing to do if there are no changes to entity-defs
             return;
         }
-        if(initializationCompleted) {
-            try {
-                AtlasGraph            graph                          = AtlasGraphProvider.getGraphInstance();
-                AtlasGraphIndexClient graphIndexClient               = graph.getGraphIndexClient();
-                Map<String, Integer>  indexFieldName2SearchWeightMap = geIndexFieldNamesWithSearchWeights();
-
-                graphIndexClient.applySearchWeight(Constants.VERTEX_INDEX, indexFieldName2SearchWeightMap);
-                graphIndexClient.applySuggestionFields(Constants.VERTEX_INDEX, getIndexFieldNamesForSuggestions(indexFieldName2SearchWeightMap));
-            } catch (AtlasException e) {
-                LOG.error("Error encountered in handling type system change notification.", e);
-                throw new RuntimeException("Error encountered in handling type system change notification.", e);
-            }
-        }
-    }
 
-    @Override
-    public void onInitStart() {
-        LOG.info("SolrIndexHelper Initialization started.");
-        initializationCompleted = false;
-    }
+        try {
+            AtlasGraph            graph                          = AtlasGraphProvider.getGraphInstance();
+            AtlasGraphIndexClient graphIndexClient               = graph.getGraphIndexClient();
+            Map<String, Integer>  indexFieldName2SearchWeightMap = geIndexFieldNamesWithSearchWeights();
 
-    @Override
-    public void onInitCompletion(ChangedTypeDefs changedTypeDefs) {
-        LOG.info("SolrIndexHelper Initialization completed.");
-        initializationCompleted = true;
-        onChange(changedTypeDefs);
+            graphIndexClient.applySearchWeight(Constants.VERTEX_INDEX, indexFieldName2SearchWeightMap);
+            graphIndexClient.applySuggestionFields(Constants.VERTEX_INDEX, getIndexFieldNamesForSuggestions(indexFieldName2SearchWeightMap));
+        } catch (AtlasException e) {
+            LOG.error("Error encountered in handling type system change notification.", e);
+            throw new RuntimeException("Error encountered in handling type system change notification.", e);
+        }
     }
 
     private List<String> getIndexFieldNamesForSuggestions(Map<String, Integer> indexFieldName2SearchWeightMap) {
@@ -120,47 +100,22 @@ public class SolrIndexHelper implements IndexChangeListener {
     private Map<String, Integer> geIndexFieldNamesWithSearchWeights() {
         Map<String, Integer>        ret         = new HashMap<>();
         Collection<AtlasEntityType> entityTypes = typeRegistry.getAllEntityTypes();
-        Collection<AtlasBusinessMetadataType> businessMetadataTypes = typeRegistry.getAllBusinessMetadataTypes();
 
-        //the following properties are specially added manually.
+        //the following two properties are specially added manually.
         //as, they don't come in the entity definitions as attributes.
 
         ret.put(typeRegistry.getIndexFieldName(CLASSIFICATION_TEXT_KEY), SEARCHWEIGHT_FOR_CLASSIFICATIONS);
-        ret.put(typeRegistry.getIndexFieldName(LABELS_PROPERTY_KEY), SEARCHWEIGHT_FOR_LABELS);
-        ret.put(typeRegistry.getIndexFieldName(CUSTOM_ATTRIBUTES_PROPERTY_KEY), SEARCHWEIGHT_FOR_CUSTOM_ATTRS);
         ret.put(typeRegistry.getIndexFieldName(TYPE_NAME_PROPERTY_KEY), SEARCHWEIGHT_FOR_TYPENAME);
 
-        if (!CollectionUtils.isNotEmpty(entityTypes) && CollectionUtils.isEmpty(businessMetadataTypes)) {
-            return ret;
-        }
-
-        for (AtlasEntityType entityType : entityTypes) {
-            if (entityType.isInternalType()) {
-                continue;
+        if (CollectionUtils.isNotEmpty(entityTypes)) {
+            for (AtlasEntityType entityType : entityTypes) {
+                processEntityType(ret, entityType);
             }
-
-            processEntityType(ret, entityType);
-        }
-
-        for(AtlasBusinessMetadataType businessMetadataType : businessMetadataTypes){
-            processBusinessMetadataType(ret, businessMetadataType);
         }
 
         return ret;
     }
 
-    private void processBusinessMetadataType(Map<String, Integer> indexFieldNameWithSearchWeights, AtlasBusinessMetadataType businessMetadataType) {
-        List<AtlasAttributeDef> attributes = businessMetadataType.getBusinessMetadataDef().getAttributeDefs();
-
-        if (CollectionUtils.isNotEmpty(attributes)) {
-            for (AtlasAttributeDef attribute : attributes) {
-                processAttribute(indexFieldNameWithSearchWeights, businessMetadataType.getAttribute(attribute.getName()));
-            }
-        } else {
-            LOG.debug("No attributes are defined for BusinessMetadata {}", businessMetadataType.getTypeName());
-        }
-    }
-
     private void processEntityType(Map<String, Integer> indexFieldNameWithSearchWeights, AtlasEntityType entityType) {
         List<AtlasAttributeDef> attributes = entityType.getEntityDef().getAttributeDefs();
 