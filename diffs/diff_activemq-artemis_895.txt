diff --git a/artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/cursor/PagedReferenceImpl.java b/artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/cursor/PagedReferenceImpl.java
index 27e6167545..27c6039c22 100644
--- a/artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/cursor/PagedReferenceImpl.java
+++ b/artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/cursor/PagedReferenceImpl.java
@@ -1,4 +1,4 @@
-/*
+/**
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements. See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -17,294 +17,215 @@
 package org.apache.activemq.artemis.core.paging.cursor;
 
 import java.lang.ref.WeakReference;
-import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
-import java.util.function.Consumer;
+import java.util.concurrent.atomic.AtomicInteger;
 
 import org.apache.activemq.artemis.api.core.Message;
-import org.apache.activemq.artemis.api.core.SimpleString;
 import org.apache.activemq.artemis.core.paging.PagedMessage;
-import org.apache.activemq.artemis.core.paging.PagingStore;
 import org.apache.activemq.artemis.core.server.ActiveMQServerLogger;
 import org.apache.activemq.artemis.core.server.MessageReference;
 import org.apache.activemq.artemis.core.server.Queue;
-import org.apache.activemq.artemis.core.server.ServerConsumer;
-import org.apache.activemq.artemis.core.server.impl.AckReason;
-import org.apache.activemq.artemis.core.transaction.Transaction;
-import org.apache.activemq.artemis.utils.collections.LinkedListImpl;
-import org.jboss.logging.Logger;
+import org.apache.activemq.artemis.core.server.ServerMessage;
 
-public class PagedReferenceImpl extends LinkedListImpl.Node<PagedReferenceImpl> implements PagedReference, Runnable {
-
-   private static final Logger logger = Logger.getLogger(PagedReferenceImpl.class);
-
-   private static final AtomicIntegerFieldUpdater<PagedReferenceImpl> DELIVERY_COUNT_UPDATER = AtomicIntegerFieldUpdater
-      .newUpdater(PagedReferenceImpl.class, "deliveryCount");
+public class PagedReferenceImpl implements PagedReference
+{
+   private static final boolean isTrace = ActiveMQServerLogger.LOGGER.isTraceEnabled();
 
    private final PagePosition position;
 
    private WeakReference<PagedMessage> message;
 
-   private static final long UNDEFINED_DELIVERY_TIME = Long.MIN_VALUE;
-   private long deliveryTime = UNDEFINED_DELIVERY_TIME;
+   private Long deliveryTime = null;
 
    private int persistedCount;
 
-   private int messageEstimate = -1;
+   private int messageEstimate;
 
-   private long consumerID;
+   private Long consumerId;
 
-   private boolean hasConsumerID = false;
-
-   @SuppressWarnings("unused")
-   private volatile int deliveryCount = 0;
+   private final AtomicInteger deliveryCount = new AtomicInteger(0);
 
    private final PageSubscription subscription;
 
    private boolean alreadyAcked;
 
-   private Object protocolData;
-
-   //0 is false, 1 is true, 2 not defined
-   private static final byte IS_NOT_LARGE_MESSAGE = 0;
-   private static final byte IS_LARGE_MESSAGE = 1;
-   private static final byte UNDEFINED_IS_LARGE_MESSAGE = 2;
-   private byte largeMessage;
-
-   private long transactionID = -2;
-
-   private long messageID = -1;
-
-   private long messageSize = -1;
-
-   private Consumer<? super MessageReference> onDelivery;
-
-   //Durable field : 0 is false, 1 is true, -1 not defined
-   private static final byte IS_NOT_DURABLE = 0;
-   private static final byte IS_DURABLE = 1;
-   private static final byte UNDEFINED_IS_DURABLE = -1;
-   private byte durable = UNDEFINED_IS_DURABLE;
-
-   @Override
-   public Object getProtocolData() {
-      return protocolData;
-   }
-
-   @Override
-   public void setProtocolData(Object protocolData) {
-      this.protocolData = protocolData;
-   }
-
-   @Override
-   public Message getMessage() {
+   public ServerMessage getMessage()
+   {
       return getPagedMessage().getMessage();
    }
 
-   @Override
-   public void onDelivery(Consumer<? super MessageReference> onDelivery) {
-      this.onDelivery = onDelivery;
-   }
-
-   /**
-    * It will call {@link Consumer#accept(Object)} on {@code this} of the {@link Consumer} registered in {@link #onDelivery(Consumer)}, if any.
-    */
-   @Override
-   public void run() {
-      final Consumer<? super MessageReference> onDelivery = this.onDelivery;
-      if (onDelivery != null) {
-         try {
-            onDelivery.accept(this);
-         } finally {
-            this.onDelivery = null;
-         }
-      }
-   }
-
-   @Override
-   public synchronized PagedMessage getPagedMessage() {
+   public synchronized PagedMessage getPagedMessage()
+   {
       PagedMessage returnMessage = message != null ? message.get() : null;
 
       // We only keep a few references on the Queue from paging...
       // Besides those references are SoftReferenced on page cache...
       // So, this will unlikely be null,
       // unless the Queue has stalled for some time after paging
-      if (returnMessage == null) {
+      if (returnMessage == null)
+      {
          // reference is gone, we will reconstruct it
          returnMessage = subscription.queryMessage(position);
-         message = new WeakReference<>(returnMessage);
+         message = new WeakReference<PagedMessage>(returnMessage);
       }
       return returnMessage;
    }
 
-   @Override
-   public PagePosition getPosition() {
+   public PagePosition getPosition()
+   {
       return position;
    }
 
    public PagedReferenceImpl(final PagePosition position,
                              final PagedMessage message,
-                             final PageSubscription subscription) {
+                             final PageSubscription subscription)
+   {
       this.position = position;
-      this.message = new WeakReference<>(message);
-      this.subscription = subscription;
-      if (message != null) {
-         this.largeMessage = message.getMessage().isLargeMessage() ? IS_LARGE_MESSAGE : IS_NOT_LARGE_MESSAGE;
-         this.transactionID = message.getTransactionID();
-         this.messageID = message.getMessage().getMessageID();
-         this.durable = message.getMessage().isDurable() ? IS_DURABLE : IS_NOT_DURABLE;
-         this.deliveryTime = message.getMessage().getScheduledDeliveryTime();
-         //pre-cache the message size so we don't have to reload the message later if it is GC'd
-         getPersistentSize();
-      } else {
-         this.largeMessage = UNDEFINED_IS_LARGE_MESSAGE;
-         this.transactionID = -2;
-         this.messageID = -1;
-         this.messageSize = -1;
-         this.durable = UNDEFINED_IS_DURABLE;
-         this.deliveryTime = UNDEFINED_DELIVERY_TIME;
+
+      if (message == null)
+      {
+         this.messageEstimate = -1;
       }
+      else
+      {
+         this.messageEstimate = message.getMessage().getMemoryEstimate();
+      }
+      this.message = new WeakReference<PagedMessage>(message);
+      this.subscription = subscription;
    }
 
-   @Override
-   public boolean isPaged() {
+   public boolean isPaged()
+   {
       return true;
    }
 
-   @Override
-   public void setPersistedCount(int count) {
+   public void setPersistedCount(int count)
+   {
       this.persistedCount = count;
    }
 
-   @Override
-   public int getPersistedCount() {
+   public int getPersistedCount()
+   {
       return persistedCount;
    }
 
+
    @Override
-   public int getMessageMemoryEstimate() {
-      if (messageEstimate <= 0) {
-         try {
-            messageEstimate = getMessage().getMemoryEstimate();
-         } catch (Throwable e) {
-            ActiveMQServerLogger.LOGGER.errorCalculateMessageMemoryEstimate(e);
-         }
+   public int getMessageMemoryEstimate()
+   {
+      if (messageEstimate < 0)
+      {
+         messageEstimate = getMessage().getMemoryEstimate();
       }
       return messageEstimate;
    }
 
+
    @Override
-   public MessageReference copy(final Queue queue) {
+   public MessageReference copy(final Queue queue)
+   {
       return new PagedReferenceImpl(this.position, this.getPagedMessage(), this.subscription);
    }
 
    @Override
-   public long getScheduledDeliveryTime() {
-      if (deliveryTime == UNDEFINED_DELIVERY_TIME) {
-         try {
-            Message msg = getMessage();
-            return msg.getScheduledDeliveryTime();
-         } catch (Throwable e) {
-            ActiveMQServerLogger.LOGGER.errorCalculateScheduledDeliveryTime(e);
-            return 0L;
+   public long getScheduledDeliveryTime()
+   {
+      if (deliveryTime == null)
+      {
+         ServerMessage msg = getMessage();
+         if (msg.containsProperty(Message.HDR_SCHEDULED_DELIVERY_TIME))
+         {
+            deliveryTime = getMessage().getLongProperty(Message.HDR_SCHEDULED_DELIVERY_TIME);
+         }
+         else
+         {
+            deliveryTime = 0L;
          }
       }
       return deliveryTime;
    }
 
    @Override
-   public void setScheduledDeliveryTime(final long scheduledDeliveryTime) {
-      assert scheduledDeliveryTime != UNDEFINED_DELIVERY_TIME : "can't use a reserved value";
+   public void setScheduledDeliveryTime(final long scheduledDeliveryTime)
+   {
       deliveryTime = scheduledDeliveryTime;
    }
 
    @Override
-   public int getDeliveryCount() {
-      return DELIVERY_COUNT_UPDATER.get(this);
+   public int getDeliveryCount()
+   {
+      return deliveryCount.get();
    }
 
    @Override
-   public void setDeliveryCount(final int deliveryCount) {
-      DELIVERY_COUNT_UPDATER.set(this, deliveryCount);
+   public void setDeliveryCount(final int deliveryCount)
+   {
+      this.deliveryCount.set(deliveryCount);
    }
 
    @Override
-   public void incrementDeliveryCount() {
-      DELIVERY_COUNT_UPDATER.incrementAndGet(this);
-      if (logger.isTraceEnabled()) {
-         logger.trace("++deliveryCount = " + deliveryCount + " for " + this, new Exception("trace"));
+   public void incrementDeliveryCount()
+   {
+      deliveryCount.incrementAndGet();
+      if (isTrace)
+      {
+         ActiveMQServerLogger.LOGGER.trace("++deliveryCount = " + deliveryCount + " for " + this, new Exception("trace"));
       }
+
    }
 
    @Override
-   public void decrementDeliveryCount() {
-      DELIVERY_COUNT_UPDATER.decrementAndGet(this);
-      if (logger.isTraceEnabled()) {
-         logger.trace("--deliveryCount = " + deliveryCount + " for " + this, new Exception("trace"));
+   public void decrementDeliveryCount()
+   {
+      deliveryCount.decrementAndGet();
+      if (isTrace)
+      {
+         ActiveMQServerLogger.LOGGER.trace("--deliveryCount = " + deliveryCount + " for " + this, new Exception("trace"));
       }
    }
 
    @Override
-   public Queue getQueue() {
+   public Queue getQueue()
+   {
       return subscription.getQueue();
    }
 
    @Override
-   public void handled() {
-      getQueue().referenceHandled(this);
+   public void handled()
+   {
+      getQueue().referenceHandled();
    }
 
    @Override
-   public void setInDelivery(boolean inDelivery) {
-
-   }
-
-   @Override
-   public boolean isInDelivery() {
-      return false;
-   }
-
-   @Override
-   public void setAlreadyAcked() {
+   public void setAlreadyAcked()
+   {
       alreadyAcked = true;
    }
 
    @Override
-   public boolean isAlreadyAcked() {
+   public boolean isAlreadyAcked()
+   {
       return alreadyAcked;
    }
 
    @Override
-   public void acknowledge() throws Exception {
+   public void acknowledge() throws Exception
+   {
       subscription.ack(this);
    }
 
-   @Override
-   public void acknowledge(Transaction tx) throws Exception {
-      acknowledge(tx, null);
-   }
-
-   @Override
-   public void acknowledge(Transaction tx, ServerConsumer consumer) throws Exception {
-      acknowledge(tx, AckReason.NORMAL, consumer);
-   }
-
-   @Override
-   public void acknowledge(Transaction tx, AckReason reason, ServerConsumer consumer) throws Exception {
-      if (tx == null) {
-         getQueue().acknowledge(this, reason, consumer);
-      } else {
-         getQueue().acknowledge(tx, this, reason, consumer);
-      }
-   }
-
    /* (non-Javadoc)
-       * @see java.lang.Object#toString()
-       */
+    * @see java.lang.Object#toString()
+    */
    @Override
-   public String toString() {
+   public String toString()
+   {
       String msgToString;
-      try {
+      try
+      {
          msgToString = getPagedMessage().toString();
-      } catch (Throwable e) {
+      }
+      catch (Throwable e)
+      {
          // in case of an exception because of a missing page, we just want toString to return null
          msgToString = "error:" + e.getMessage();
       }
@@ -312,7 +233,7 @@ public class PagedReferenceImpl extends LinkedListImpl.Node<PagedReferenceImpl>
          ", message=" +
          msgToString +
          ", deliveryTime=" +
-         (deliveryTime == UNDEFINED_DELIVERY_TIME ? null : deliveryTime) +
+         deliveryTime +
          ", persistedCount=" +
          persistedCount +
          ", deliveryCount=" +
@@ -322,106 +243,22 @@ public class PagedReferenceImpl extends LinkedListImpl.Node<PagedReferenceImpl>
          "]";
    }
 
+   /* (non-Javadoc)
+    * @see org.apache.activemq.artemis.core.server.MessageReference#setConsumerId(java.lang.Long)
+    */
    @Override
-   public void emptyConsumerID() {
-      this.hasConsumerID = false;
-   }
-
-   @Override
-   public void setConsumerId(long consumerID) {
-      this.hasConsumerID = true;
-      this.consumerID = consumerID;
-   }
-
-   @Override
-   public boolean hasConsumerId() {
-      return hasConsumerID;
-   }
-
-   @Override
-   public long getConsumerId() {
-      if (!this.hasConsumerID) {
-         throw new IllegalStateException("consumerID isn't specified: please check hasConsumerId first");
-      }
-      return this.consumerID;
-   }
-
-   @Override
-   public boolean isLargeMessage() {
-      if (largeMessage == UNDEFINED_IS_LARGE_MESSAGE && message != null) {
-         initializeIsLargeMessage();
-      }
-      return largeMessage == IS_LARGE_MESSAGE;
-   }
-
-   private void initializeIsLargeMessage() {
-      assert largeMessage == UNDEFINED_IS_LARGE_MESSAGE && message != null;
-      largeMessage = getMessage().isLargeMessage() ? IS_LARGE_MESSAGE : IS_NOT_LARGE_MESSAGE;
-   }
-
-   @Override
-   public long getTransactionID() {
-      if (transactionID < -1) {
-         transactionID = getPagedMessage().getTransactionID();
-      }
-      return transactionID;
-   }
-
-   @Override
-   public void addPendingFlag() {
-      subscription.addPendingDelivery(position);
-   }
-
-   @Override
-   public void removePendingFlag() {
-      subscription.removePendingDelivery(position);
-   }
-
-   @Override
-   public long getMessageID() {
-      if (messageID < 0) {
-         messageID = getPagedMessage().getMessage().getMessageID();
-      }
-      return messageID;
-   }
-
-   @Override
-   public SimpleString getLastValueProperty() {
-      SimpleString lastValue = getMessage().getSimpleStringProperty(getQueue().getLastValueKey());
-      if (lastValue == null) {
-         lastValue = getMessage().getLastValueProperty();
-      }
-      return lastValue;
-   }
-
-   @Override
-   public long getPersistentSize() {
-      if (messageSize == -1) {
-         try {
-            messageSize = getPagedMessage().getPersistentSize();
-         } catch (Throwable e) {
-            ActiveMQServerLogger.LOGGER.errorCalculatePersistentSize(e);
-         }
-      }
-      return messageSize;
-   }
-
-   @Override
-   public PagingStore getOwner() {
-      return null;
-   }
-
-   @Override
-   public void setOwner(PagingStore owner) {
-
+   public void setConsumerId(Long consumerID)
+   {
+      this.consumerId = consumerID;
    }
 
+   /* (non-Javadoc)
+    * @see org.apache.activemq.artemis.core.server.MessageReference#getConsumerId()
+    */
    @Override
-   public boolean isDurable() {
-      if (durable == UNDEFINED_IS_DURABLE) {
-         durable = getMessage().isDurable() ? IS_DURABLE : IS_NOT_DURABLE;
-      }
-      return durable == IS_DURABLE;
+   public Long getConsumerId()
+   {
+      return this.consumerId;
    }
 
 }