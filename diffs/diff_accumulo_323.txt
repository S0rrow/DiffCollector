diff --git a/test/src/main/java/org/apache/accumulo/test/functional/BatchWriterFlushIT.java b/test/src/main/java/org/apache/accumulo/test/functional/BatchWriterFlushIT.java
index 5aa0c84ef7..353a6b9728 100644
--- a/test/src/main/java/org/apache/accumulo/test/functional/BatchWriterFlushIT.java
+++ b/test/src/main/java/org/apache/accumulo/test/functional/BatchWriterFlushIT.java
@@ -16,19 +16,11 @@
  */
 package org.apache.accumulo.test.functional;
 
-import static com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly;
 import static java.nio.charset.StandardCharsets.UTF_8;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashSet;
 import java.util.Iterator;
-import java.util.LinkedList;
-import java.util.List;
 import java.util.Map.Entry;
 import java.util.Random;
-import java.util.Set;
-import java.util.TreeSet;
 import java.util.concurrent.TimeUnit;
 
 import org.apache.accumulo.core.client.AccumuloException;
@@ -45,17 +37,15 @@ import org.apache.accumulo.core.data.Range;
 import org.apache.accumulo.core.data.Value;
 import org.apache.accumulo.core.security.Authorizations;
 import org.apache.accumulo.harness.AccumuloClusterHarness;
-import org.apache.accumulo.core.util.SimpleThreadPool;
 import org.apache.hadoop.io.Text;
-import org.junit.Assert;
 import org.junit.Test;
 
 import com.google.common.collect.Iterators;
+import static com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly;
 
 public class BatchWriterFlushIT extends AccumuloClusterHarness {
 
   private static final int NUM_TO_FLUSH = 100000;
-  private static final int NUM_THREADS = 3;
 
   @Override
   protected int defaultTimeoutSeconds() {
@@ -72,6 +62,7 @@ public class BatchWriterFlushIT extends AccumuloClusterHarness {
     c.tableOperations().create(bwlt);
     runFlushTest(bwft);
     runLatencyTest(bwlt);
+
   }
 
   private void runLatencyTest(String tableName) throws Exception {
@@ -174,84 +165,6 @@ public class BatchWriterFlushIT extends AccumuloClusterHarness {
     }
   }
 
-  @Test
-  public void runMultiThreadedBinningTest() throws Exception {
-    Connector c = getConnector();
-    String[] tableNames = getUniqueNames(1);
-    String tableName = tableNames[0];
-    c.tableOperations().create(tableName);
-    for (int x = 0; x < NUM_THREADS; x++) {
-      c.tableOperations().addSplits(tableName, new TreeSet<Text>(Collections.singleton(new Text(Integer.toString(x * NUM_TO_FLUSH)))));
-    }
-    c.instanceOperations().waitForBalance();
-
-    // Logger.getLogger(TabletServerBatchWriter.class).setLevel(Level.TRACE);
-    final List<Set<Mutation>> allMuts = new LinkedList<>();
-    List<Mutation> data = new ArrayList<>();
-    for (int i = 0; i < NUM_THREADS; i++) {
-      final int thread = i;
-      for (int j = 0; j < NUM_TO_FLUSH; j++) {
-        int row = thread * NUM_TO_FLUSH + j;
-        Mutation m = new Mutation(new Text(String.format("%10d", row)));
-        m.put(new Text("cf" + thread), new Text("cq"), new Value(("" + row).getBytes()));
-        data.add(m);
-      }
-    }
-    Assert.assertEquals(NUM_THREADS * NUM_TO_FLUSH, data.size());
-    Collections.shuffle(data);
-    for (int n = 0; n < (NUM_THREADS * NUM_TO_FLUSH); n += NUM_TO_FLUSH) {
-      Set<Mutation> muts = new HashSet<>(data.subList(n, n + NUM_TO_FLUSH));
-      allMuts.add(muts);
-    }
-
-    SimpleThreadPool threads = new SimpleThreadPool(NUM_THREADS, "ClientThreads");
-    threads.allowCoreThreadTimeOut(false);
-    threads.prestartAllCoreThreads();
-
-    BatchWriterConfig cfg = new BatchWriterConfig();
-    cfg.setMaxLatency(10, TimeUnit.SECONDS);
-    cfg.setMaxMemory(1 * 1024 * 1024);
-    cfg.setMaxWriteThreads(NUM_THREADS);
-    final BatchWriter bw = getConnector().createBatchWriter(tableName, cfg);
-
-    for (int k = 0; k < NUM_THREADS; k++) {
-      final int idx = k;
-      threads.execute(new Runnable() {
-        @Override
-        public void run() {
-          try {
-            bw.addMutations(allMuts.get(idx));
-            bw.flush();
-          } catch (MutationsRejectedException e) {
-            Assert.fail("Error adding mutations to batch writer");
-          }
-        }
-      });
-    }
-    threads.shutdown();
-    threads.awaitTermination(3, TimeUnit.MINUTES);
-    bw.close();
-    Scanner scanner = getConnector().createScanner(tableName, Authorizations.EMPTY);
-    for (Entry<Key,Value> e : scanner) {
-      Mutation m = new Mutation(e.getKey().getRow());
-      m.put(e.getKey().getColumnFamily(), e.getKey().getColumnQualifier(), e.getValue());
-      boolean found = false;
-      for (int l = 0; l < NUM_THREADS; l++) {
-        if (allMuts.get(l).contains(m)) {
-          found = true;
-          allMuts.get(l).remove(m);
-          break;
-        }
-      }
-      Assert.assertTrue("Mutation not found: " + m.toString(), found);
-    }
-
-    for (int m = 0; m < NUM_THREADS; m++) {
-      Assert.assertEquals(0, allMuts.get(m).size());
-    }
-
-  }
-
   private void verifyEntry(int row, Entry<Key,Value> entry) throws Exception {
     if (!entry.getKey().getRow().toString().equals(String.format("r_%10d", row))) {
       throw new Exception("Unexpected key returned, expected " + row + " got " + entry.getKey());