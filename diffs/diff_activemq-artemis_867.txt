diff --git a/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/ActiveMQServerControlImpl.java b/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/ActiveMQServerControlImpl.java
index 4431d706b9..917b18c951 100644
--- a/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/ActiveMQServerControlImpl.java
+++ b/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/ActiveMQServerControlImpl.java
@@ -54,7 +54,6 @@ import org.apache.activemq.artemis.api.core.JsonUtil;
 import org.apache.activemq.artemis.api.core.RoutingType;
 import org.apache.activemq.artemis.api.core.SimpleString;
 import org.apache.activemq.artemis.api.core.TransportConfiguration;
-import org.apache.activemq.artemis.api.core.client.ActiveMQClient;
 import org.apache.activemq.artemis.api.core.management.ActiveMQServerControl;
 import org.apache.activemq.artemis.api.core.management.AddressControl;
 import org.apache.activemq.artemis.api.core.management.BridgeControl;
@@ -107,14 +106,12 @@ import org.apache.activemq.artemis.core.server.cluster.ha.HAPolicy;
 import org.apache.activemq.artemis.core.server.cluster.ha.LiveOnlyPolicy;
 import org.apache.activemq.artemis.core.server.cluster.ha.ScaleDownPolicy;
 import org.apache.activemq.artemis.core.server.cluster.ha.SharedStoreSlavePolicy;
-import org.apache.activemq.artemis.core.server.files.FileStoreMonitor;
 import org.apache.activemq.artemis.core.server.group.GroupingHandler;
 import org.apache.activemq.artemis.core.server.impl.Activation;
 import org.apache.activemq.artemis.core.server.impl.AddressInfo;
 import org.apache.activemq.artemis.core.server.impl.SharedNothingLiveActivation;
 import org.apache.activemq.artemis.core.settings.impl.AddressFullMessagePolicy;
 import org.apache.activemq.artemis.core.settings.impl.AddressSettings;
-import org.apache.activemq.artemis.core.settings.impl.DeletionPolicy;
 import org.apache.activemq.artemis.core.settings.impl.SlowConsumerPolicy;
 import org.apache.activemq.artemis.core.transaction.ResourceManager;
 import org.apache.activemq.artemis.core.transaction.Transaction;
@@ -132,8 +129,6 @@ import org.apache.activemq.artemis.utils.SecurityFormatter;
 import org.apache.activemq.artemis.utils.collections.TypedProperties;
 import org.jboss.logging.Logger;
 
-import static org.apache.activemq.artemis.core.server.files.FileStoreMonitor.calculateUsage;
-
 public class ActiveMQServerControlImpl extends AbstractControl implements ActiveMQServerControl, NotificationEmitter, org.apache.activemq.artemis.core.server.management.NotificationListener {
    // Constants -----------------------------------------------------
    private static final Logger logger = Logger.getLogger(ActiveMQServerControlImpl.class);
@@ -710,28 +705,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
       }
    }
 
-   @Override
-   public long getDiskStoreUsage() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getDiskStoreUsage(this.server);
-      }
-      checkStarted();
-      clearIO();
-      try {
-         //this should not happen but if it does, return -1 to highlight it is not working
-         if (server.getPagingManager() == null) {
-            return -1L;
-         }
-
-         long usableSpace = server.getPagingManager().getDiskUsableSpace();
-         long totalSpace = server.getPagingManager().getDiskTotalSpace();
-
-         return (long) FileStoreMonitor.calculateUsage(usableSpace, totalSpace);
-      } finally {
-         blockOnIO();
-      }
-   }
-
    @Override
    public int getAddressMemoryUsagePercentage() {
       if (AuditLogger.isEnabled()) {
@@ -751,26 +724,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
       return (int) result;
    }
 
-   @Override
-   public int getDiskStoreUsagePercentage() {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.getDiskStoreUsagePercentage(this.server);
-      }
-      long globalMaxSize = getGlobalMaxSize();
-      // no max size set implies 0% used
-      if (globalMaxSize <= 0) {
-         return 0;
-      }
-
-      long diskUsed = getDiskStoreUsage();
-      if (diskUsed <= 0) {
-         return 0;
-      }
-
-      double result = 100 * calculateUsage(diskUsed, globalMaxSize);
-      return (int) result;
-   }
-
    @Override
    public boolean freezeReplication() {
       if (AuditLogger.isEnabled()) {
@@ -1002,7 +955,7 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
               addressSettings.isDefaultNonDestructive(),
               addressSettings.getDefaultConsumersBeforeDispatch(),
               addressSettings.getDefaultDelayBeforeDispatch(),
-              addressSettings.isAutoDeleteCreatedQueues(),
+              addressSettings.isAutoDeleteQueues(),
               addressSettings.getAutoDeleteQueuesDelay(),
               addressSettings.getAutoDeleteQueuesMessageCount(),
               autoCreateAddress
@@ -1025,149 +978,15 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
                              boolean nonDestructive,
                              int consumersBeforeDispatch,
                              long delayBeforeDispatch,
-                             boolean autoCreateAddress) throws Exception {
-      AddressSettings addressSettings = server.getAddressSettingsRepository().getMatch(address == null ? name : address);
-      return createQueue(
-            address,
-            routingType,
-            name,
-            filterStr,
-            durable,
-            maxConsumers,
-            purgeOnNoConsumers,
-            exclusive,
-            groupRebalance,
-            groupBuckets,
-            lastValue,
-            lastValueKey,
-            nonDestructive,
-            consumersBeforeDispatch,
-            delayBeforeDispatch,
-            addressSettings.isAutoDeleteCreatedQueues(),
-            addressSettings.getAutoDeleteQueuesDelay(),
-            addressSettings.getAutoDeleteQueuesMessageCount(),
-            autoCreateAddress);
-   }
-
-   @Override
-   public String createQueue(String address,
-                             String routingType,
-                             String name,
-                             String filterStr,
-                             boolean durable,
-                             int maxConsumers,
-                             boolean purgeOnNoConsumers,
-                             boolean exclusive,
-                             boolean groupRebalance,
-                             int groupBuckets,
-                             boolean lastValue,
-                             String lastValueKey,
-                             boolean nonDestructive,
-                             int consumersBeforeDispatch,
-                             long delayBeforeDispatch,
-                             boolean autoDelete,
-                             long autoDeleteDelay,
-                             long autoDeleteMessageCount,
-                             boolean autoCreateAddress) throws Exception {
-      AddressSettings addressSettings = server.getAddressSettingsRepository().getMatch(address == null ? name : address);
-      return createQueue(
-            address,
-            routingType,
-            name,
-            filterStr,
-            durable,
-            maxConsumers,
-            purgeOnNoConsumers,
-            exclusive,
-            groupRebalance,
-            groupBuckets,
-            addressSettings.getDefaultGroupFirstKey() == null ? null : addressSettings.getDefaultGroupFirstKey().toString(),
-            lastValue,
-            lastValueKey,
-            nonDestructive,
-            consumersBeforeDispatch,
-            delayBeforeDispatch,
-            autoDelete,
-            autoDeleteDelay,
-            autoDeleteMessageCount,
-            autoCreateAddress
-      );
-   }
-
-   @Override
-   public String createQueue(String address,
-                             String routingType,
-                             String name,
-                             String filterStr,
-                             boolean durable,
-                             int maxConsumers,
-                             boolean purgeOnNoConsumers,
-                             boolean exclusive,
-                             boolean groupRebalance,
-                             int groupBuckets,
-                             String groupFirstKey,
-                             boolean lastValue,
-                             String lastValueKey,
-                             boolean nonDestructive,
-                             int consumersBeforeDispatch,
-                             long delayBeforeDispatch,
                              boolean autoDelete,
                              long autoDeleteDelay,
                              long autoDeleteMessageCount,
                              boolean autoCreateAddress) throws Exception {
-      AddressSettings addressSettings = server.getAddressSettingsRepository().getMatch(address == null ? name : address);
-      return createQueue(
-         address,
-         routingType,
-         name,
-         filterStr,
-         durable,
-         maxConsumers,
-         purgeOnNoConsumers,
-         exclusive,
-         groupRebalance,
-         groupBuckets,
-         groupFirstKey,
-         lastValue,
-         lastValueKey,
-         nonDestructive,
-         consumersBeforeDispatch,
-         delayBeforeDispatch,
-         autoDelete,
-         autoDeleteDelay,
-         autoDeleteMessageCount,
-         autoCreateAddress,
-         addressSettings.getDefaultRingSize()
-      );
-   }
-
-   @Override
-   public String createQueue(String address,
-                             String routingType,
-                             String name,
-                             String filterStr,
-                             boolean durable,
-                             int maxConsumers,
-                             boolean purgeOnNoConsumers,
-                             boolean exclusive,
-                             boolean groupRebalance,
-                             int groupBuckets,
-                             String groupFirstKey,
-                             boolean lastValue,
-                             String lastValueKey,
-                             boolean nonDestructive,
-                             int consumersBeforeDispatch,
-                             long delayBeforeDispatch,
-                             boolean autoDelete,
-                             long autoDeleteDelay,
-                             long autoDeleteMessageCount,
-                             boolean autoCreateAddress,
-                             long ringSize) throws Exception {
       if (AuditLogger.isEnabled()) {
-         AuditLogger.createQueue(this.server, null, address, routingType, name, filterStr, durable,
-                  maxConsumers, purgeOnNoConsumers, exclusive, groupRebalance, groupBuckets, groupFirstKey,
-                  lastValue, lastValueKey, nonDestructive, consumersBeforeDispatch, delayBeforeDispatch,
-                  autoDelete, autoDeleteDelay, autoDeleteMessageCount, autoCreateAddress, ringSize);
+         AuditLogger.createQueue(this.server, address, routingType, name, filterStr, durable,
+                  maxConsumers, purgeOnNoConsumers, exclusive, groupBuckets, lastValue,
+                  lastValueKey, nonDestructive, consumersBeforeDispatch, delayBeforeDispatch, autoDelete,
+                  autoDeleteDelay, autoDeleteMessageCount, autoCreateAddress);
       }
       checkStarted();
 
@@ -1179,7 +998,7 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
             filter = new SimpleString(filterStr);
          }
 
-         final Queue queue = server.createQueue(SimpleString.toSimpleString(address), RoutingType.valueOf(routingType.toUpperCase()), SimpleString.toSimpleString(name), filter, durable, false, maxConsumers, purgeOnNoConsumers, exclusive, groupRebalance, groupBuckets, SimpleString.toSimpleString(groupFirstKey), lastValue, SimpleString.toSimpleString(lastValueKey), nonDestructive, consumersBeforeDispatch, delayBeforeDispatch, autoDelete, autoDeleteDelay, autoDeleteMessageCount, autoCreateAddress, ringSize);
+         final Queue queue = server.createQueue(SimpleString.toSimpleString(address), RoutingType.valueOf(routingType.toUpperCase()), SimpleString.toSimpleString(name), filter, durable, false, maxConsumers, purgeOnNoConsumers, exclusive, groupRebalance, groupBuckets, lastValue, SimpleString.toSimpleString(lastValueKey), nonDestructive, consumersBeforeDispatch, delayBeforeDispatch, autoDelete, autoDeleteDelay, autoDeleteMessageCount, autoCreateAddress);
          return QueueTextFormatter.Long.format(queue, new StringBuilder()).toString();
       } catch (ActiveMQException e) {
          throw new IllegalStateException(e.getMessage());
@@ -1230,51 +1049,16 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
                              Integer consumersBeforeDispatch,
                              Long delayBeforeDispatch,
                              String user) throws Exception {
-      return updateQueue(name, routingType, filter, maxConsumers, purgeOnNoConsumers, exclusive, groupRebalance, groupBuckets, null, nonDestructive, consumersBeforeDispatch, delayBeforeDispatch, user);
-   }
-
-   @Override
-   public String updateQueue(String name,
-                             String routingType,
-                             String filter,
-                             Integer maxConsumers,
-                             Boolean purgeOnNoConsumers,
-                             Boolean exclusive,
-                             Boolean groupRebalance,
-                             Integer groupBuckets,
-                             String groupFirstKey,
-                             Boolean nonDestructive,
-                             Integer consumersBeforeDispatch,
-                             Long delayBeforeDispatch,
-                             String user) throws Exception {
-      return updateQueue(name, routingType, filter, maxConsumers, purgeOnNoConsumers, exclusive, groupRebalance, groupBuckets, null, nonDestructive, consumersBeforeDispatch, delayBeforeDispatch, user, null);
-   }
-
-   @Override
-   public String updateQueue(String name,
-                             String routingType,
-                             String filter,
-                             Integer maxConsumers,
-                             Boolean purgeOnNoConsumers,
-                             Boolean exclusive,
-                             Boolean groupRebalance,
-                             Integer groupBuckets,
-                             String groupFirstKey,
-                             Boolean nonDestructive,
-                             Integer consumersBeforeDispatch,
-                             Long delayBeforeDispatch,
-                             String user,
-                             Long ringSize) throws Exception {
       if (AuditLogger.isEnabled()) {
          AuditLogger.updateQueue(this.server, name, routingType, filter, maxConsumers, purgeOnNoConsumers,
-                  exclusive, groupRebalance, groupBuckets, groupFirstKey, nonDestructive, consumersBeforeDispatch, delayBeforeDispatch, user, ringSize);
+                  exclusive, groupRebalance, groupBuckets, nonDestructive, consumersBeforeDispatch, delayBeforeDispatch, user);
       }
       checkStarted();
 
       clearIO();
 
       try {
-         final Queue queue = server.updateQueue(name, routingType != null ? RoutingType.valueOf(routingType) : null, filter, maxConsumers, purgeOnNoConsumers, exclusive, groupRebalance, groupBuckets, groupFirstKey, nonDestructive, consumersBeforeDispatch, delayBeforeDispatch, user);
+         final Queue queue = server.updateQueue(name, routingType != null ? RoutingType.valueOf(routingType) : null, filter, maxConsumers, purgeOnNoConsumers, exclusive, groupRebalance, groupBuckets, nonDestructive, consumersBeforeDispatch, delayBeforeDispatch, user);
          if (queue == null) {
             throw ActiveMQMessageBundle.BUNDLE.noSuchQueue(new SimpleString(name));
          }
@@ -1406,7 +1190,7 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
    @Override
    public void destroyQueue(final String name, final boolean removeConsumers, final boolean autoDeleteAddress) throws Exception {
       if (AuditLogger.isEnabled()) {
-         AuditLogger.destroyQueue(this.server, null, name, removeConsumers, autoDeleteAddress);
+         AuditLogger.destroyQueue(this.server, name, removeConsumers, autoDeleteAddress);
       }
       checkStarted();
 
@@ -1754,7 +1538,7 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
             @Override
             public int compare(final Entry<Xid, Long> entry1, final Entry<Xid, Long> entry2) {
                // sort by creation time, oldest first
-               return entry1.getValue().compareTo(entry2.getValue());
+               return (int) (entry1.getValue() - entry2.getValue());
             }
          });
          String[] s = new String[xidsSortedByCreationTime.size()];
@@ -1793,7 +1577,7 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
             @Override
             public int compare(final Entry<Xid, Long> entry1, final Entry<Xid, Long> entry2) {
                // sort by creation time, oldest first
-               return entry1.getValue().compareTo(entry2.getValue());
+               return (int) (entry1.getValue() - entry2.getValue());
             }
          });
 
@@ -1840,7 +1624,7 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
             @Override
             public int compare(final Entry<Xid, Long> entry1, final Entry<Xid, Long> entry2) {
                // sort by creation time, oldest first
-               return entry1.getValue().compareTo(entry2.getValue());
+               return (int) (entry1.getValue() - entry2.getValue());
             }
          });
 
@@ -2768,42 +2552,13 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
             .add("slowConsumerCheckPeriod", addressSettings.getSlowConsumerCheckPeriod())
             .add("slowConsumerPolicy", consumerPolicy)
             .add("autoCreateJmsQueues", addressSettings.isAutoCreateJmsQueues())
-            .add("autoDeleteJmsQueues", addressSettings.isAutoDeleteJmsQueues())
             .add("autoCreateJmsTopics", addressSettings.isAutoCreateJmsTopics())
-            .add("autoDeleteJmsTopics", addressSettings.isAutoDeleteJmsTopics())
+            .add("autoDeleteJmsQueues", addressSettings.isAutoDeleteJmsQueues())
+            .add("autoDeleteJmsTopics", addressSettings.isAutoDeleteJmsQueues())
             .add("autoCreateQueues", addressSettings.isAutoCreateQueues())
             .add("autoDeleteQueues", addressSettings.isAutoDeleteQueues())
-            .add("autoCreateAddresses", addressSettings.isAutoCreateAddresses())
-            .add("autoDeleteAddresses", addressSettings.isAutoDeleteAddresses())
-            .add("configDeleteQueues", addressSettings.getConfigDeleteQueues().toString())
-            .add("configDeleteAddresses", addressSettings.getConfigDeleteAddresses().toString())
-            .add("maxSizeBytesRejectThreshold", addressSettings.getMaxSizeBytesRejectThreshold())
-            .add("defaultLastValueKey", addressSettings.getDefaultLastValueKey() == null ? "" : addressSettings.getDefaultLastValueKey().toString())
-            .add("defaultNonDestructive", addressSettings.isDefaultNonDestructive())
-            .add("defaultExclusiveQueue", addressSettings.isDefaultExclusiveQueue())
-            .add("defaultGroupRebalance", addressSettings.isDefaultGroupRebalance())
-            .add("defaultGroupBuckets", addressSettings.getDefaultGroupBuckets())
-            .add("defaultGroupFirstKey", addressSettings.getDefaultGroupFirstKey() == null ? "" : addressSettings.getDefaultGroupFirstKey().toString())
-            .add("defaultMaxConsumers", addressSettings.getDefaultMaxConsumers())
-            .add("defaultPurgeOnNoConsumers", addressSettings.isDefaultPurgeOnNoConsumers())
-            .add("defaultConsumersBeforeDispatch", addressSettings.getDefaultConsumersBeforeDispatch())
-            .add("defaultDelayBeforeDispatch", addressSettings.getDefaultDelayBeforeDispatch())
-            .add("defaultQueueRoutingType", addressSettings.getDefaultQueueRoutingType().toString())
-            .add("defaultAddressRoutingType", addressSettings.getDefaultAddressRoutingType().toString())
-            .add("defaultConsumerWindowSize", addressSettings.getDefaultConsumerWindowSize())
-            .add("defaultRingSize", addressSettings.getDefaultRingSize())
-            .add("autoDeleteCreatedQueues", addressSettings.isAutoDeleteCreatedQueues())
-            .add("autoDeleteQueuesDelay", addressSettings.getAutoDeleteQueuesDelay())
-            .add("autoDeleteQueuesMessageCount", addressSettings.getAutoDeleteQueuesMessageCount())
-            .add("autoDeleteAddressesDelay", addressSettings.getAutoDeleteAddressesDelay())
-            .add("redeliveryCollisionAvoidanceFactor", addressSettings.getRedeliveryCollisionAvoidanceFactor())
-            .add("retroactiveMessageCount", addressSettings.getRetroactiveMessageCount())
-            .add("autoCreateDeadLetterResources", addressSettings.isAutoCreateDeadLetterResources())
-            .add("deadLetterQueuePrefix", addressSettings.getDeadLetterQueuePrefix().toString())
-            .add("deadLetterQueueSuffix", addressSettings.getDeadLetterQueueSuffix().toString())
-            .add("autoCreateExpiryResources", addressSettings.isAutoCreateExpiryResources())
-            .add("expiryQueuePrefix", addressSettings.getExpiryQueuePrefix().toString())
-            .add("expiryQueueSuffix", addressSettings.getExpiryQueueSuffix().toString())
+            .add("autoCreateAddress", addressSettings.isAutoCreateAddresses())
+            .add("autoDeleteAddress", addressSettings.isAutoDeleteAddresses())
             .build()
             .toString();
    }
@@ -2831,32 +2586,7 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
                                   final boolean autoDeleteJmsQueues,
                                   final boolean autoCreateJmsTopics,
                                   final boolean autoDeleteJmsTopics) throws Exception {
-      addAddressSettings(address,
-                         DLA,
-                         expiryAddress,
-                         expiryDelay,
-                         lastValueQueue,
-                         deliveryAttempts,
-                         maxSizeBytes,
-                         pageSizeBytes,
-                         pageMaxCacheSize,
-                         redeliveryDelay,
-                         redeliveryMultiplier,
-                         maxRedeliveryDelay,
-                         redistributionDelay,
-                         sendToDLAOnNoRoute,
-                         addressFullMessagePolicy,
-                         slowConsumerThreshold,
-                         slowConsumerCheckPeriod,
-                         slowConsumerPolicy,
-                         autoCreateJmsQueues,
-                         autoDeleteJmsQueues,
-                         autoCreateJmsTopics,
-                         autoDeleteJmsTopics,
-                         AddressSettings.DEFAULT_AUTO_CREATE_QUEUES,
-                         AddressSettings.DEFAULT_AUTO_DELETE_QUEUES,
-                         AddressSettings.DEFAULT_AUTO_CREATE_ADDRESSES,
-                         AddressSettings.DEFAULT_AUTO_DELETE_ADDRESSES);
+      addAddressSettings(address, DLA, expiryAddress, expiryDelay, lastValueQueue, deliveryAttempts, maxSizeBytes, pageSizeBytes, pageMaxCacheSize, redeliveryDelay, redeliveryMultiplier, maxRedeliveryDelay, redistributionDelay, sendToDLAOnNoRoute, addressFullMessagePolicy, slowConsumerThreshold, slowConsumerCheckPeriod, slowConsumerPolicy, autoCreateJmsQueues, autoDeleteJmsQueues, autoCreateJmsTopics, autoDeleteJmsTopics, AddressSettings.DEFAULT_AUTO_CREATE_QUEUES, AddressSettings.DEFAULT_AUTO_DELETE_QUEUES, AddressSettings.DEFAULT_AUTO_CREATE_ADDRESSES, AddressSettings.DEFAULT_AUTO_DELETE_ADDRESSES);
    }
 
    @Override
@@ -2864,8 +2594,8 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
                                   final String DLA,
                                   final String expiryAddress,
                                   final long expiryDelay,
-                                  final boolean defaultLastValueQueue,
-                                  final int maxDeliveryAttempts,
+                                  final boolean lastValueQueue,
+                                  final int deliveryAttempts,
                                   final long maxSizeBytes,
                                   final int pageSizeBytes,
                                   final int pageMaxCacheSize,
@@ -2886,234 +2616,13 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
                                   final boolean autoDeleteQueues,
                                   final boolean autoCreateAddresses,
                                   final boolean autoDeleteAddresses) throws Exception {
-      addAddressSettings(address,
-                         DLA,
-                         expiryAddress,
-                         expiryDelay,
-                         defaultLastValueQueue,
-                         maxDeliveryAttempts,
-                         maxSizeBytes,
-                         pageSizeBytes,
-                         pageMaxCacheSize,
-                         redeliveryDelay,
-                         redeliveryMultiplier,
-                         maxRedeliveryDelay,
-                         redistributionDelay,
-                         sendToDLAOnNoRoute,
-                         addressFullMessagePolicy,
-                         slowConsumerThreshold,
-                         slowConsumerCheckPeriod,
-                         slowConsumerPolicy,
-                         autoCreateJmsQueues,
-                         autoDeleteJmsQueues,
-                         autoCreateJmsTopics,
-                         autoDeleteJmsTopics,
-                         autoCreateQueues,
-                         autoDeleteQueues,
-                         autoCreateAddresses,
-                         autoDeleteAddresses,
-                         AddressSettings.DEFAULT_CONFIG_DELETE_QUEUES.toString(),
-                         AddressSettings.DEFAULT_CONFIG_DELETE_ADDRESSES.toString(),
-                         AddressSettings.DEFAULT_ADDRESS_REJECT_THRESHOLD,
-                         ActiveMQDefaultConfiguration.getDefaultLastValueKey() == null ? null : ActiveMQDefaultConfiguration.getDefaultLastValueKey().toString(),
-                         ActiveMQDefaultConfiguration.getDefaultNonDestructive(),
-                         ActiveMQDefaultConfiguration.getDefaultExclusive(),
-                         ActiveMQDefaultConfiguration.getDefaultGroupRebalance(),
-                         ActiveMQDefaultConfiguration.getDefaultGroupBuckets(),
-                         ActiveMQDefaultConfiguration.getDefaultGroupFirstKey() == null ? null : ActiveMQDefaultConfiguration.getDefaultGroupFirstKey().toString(),
-                         ActiveMQDefaultConfiguration.getDefaultMaxQueueConsumers(),
-                         ActiveMQDefaultConfiguration.getDefaultPurgeOnNoConsumers(),
-                         ActiveMQDefaultConfiguration.getDefaultConsumersBeforeDispatch(),
-                         ActiveMQDefaultConfiguration.getDefaultDelayBeforeDispatch(),
-                         ActiveMQDefaultConfiguration.getDefaultRoutingType().toString(),
-                         ActiveMQDefaultConfiguration.getDefaultRoutingType().toString(),
-                         ActiveMQClient.DEFAULT_CONSUMER_WINDOW_SIZE,
-                         ActiveMQDefaultConfiguration.getDefaultRingSize(),
-                         AddressSettings.DEFAULT_AUTO_DELETE_CREATED_QUEUES,
-                         AddressSettings.DEFAULT_AUTO_DELETE_QUEUES_DELAY,
-                         AddressSettings.DEFAULT_AUTO_DELETE_QUEUES_MESSAGE_COUNT,
-                         AddressSettings.DEFAULT_AUTO_DELETE_ADDRESSES_DELAY,
-                         AddressSettings.DEFAULT_REDELIVER_COLLISION_AVOIDANCE_FACTOR,
-                         ActiveMQDefaultConfiguration.getDefaultRetroactiveMessageCount());
-   }
-
-   @Override
-   public void addAddressSettings(final String address,
-                                  final String DLA,
-                                  final String expiryAddress,
-                                  final long expiryDelay,
-                                  final boolean defaultLastValueQueue,
-                                  final int maxDeliveryAttempts,
-                                  final long maxSizeBytes,
-                                  final int pageSizeBytes,
-                                  final int pageMaxCacheSize,
-                                  final long redeliveryDelay,
-                                  final double redeliveryMultiplier,
-                                  final long maxRedeliveryDelay,
-                                  final long redistributionDelay,
-                                  final boolean sendToDLAOnNoRoute,
-                                  final String addressFullMessagePolicy,
-                                  final long slowConsumerThreshold,
-                                  final long slowConsumerCheckPeriod,
-                                  final String slowConsumerPolicy,
-                                  final boolean autoCreateJmsQueues,
-                                  final boolean autoDeleteJmsQueues,
-                                  final boolean autoCreateJmsTopics,
-                                  final boolean autoDeleteJmsTopics,
-                                  final boolean autoCreateQueues,
-                                  final boolean autoDeleteQueues,
-                                  final boolean autoCreateAddresses,
-                                  final boolean autoDeleteAddresses,
-                                  final String configDeleteQueues,
-                                  final String configDeleteAddresses,
-                                  final long maxSizeBytesRejectThreshold,
-                                  final String defaultLastValueKey,
-                                  final boolean defaultNonDestructive,
-                                  final boolean defaultExclusiveQueue,
-                                  final boolean defaultGroupRebalance,
-                                  final int defaultGroupBuckets,
-                                  final String defaultGroupFirstKey,
-                                  final int defaultMaxConsumers,
-                                  final boolean defaultPurgeOnNoConsumers,
-                                  final int defaultConsumersBeforeDispatch,
-                                  final long defaultDelayBeforeDispatch,
-                                  final String defaultQueueRoutingType,
-                                  final String defaultAddressRoutingType,
-                                  final int defaultConsumerWindowSize,
-                                  final long defaultRingSize,
-                                  final boolean autoDeleteCreatedQueues,
-                                  final long autoDeleteQueuesDelay,
-                                  final long autoDeleteQueuesMessageCount,
-                                  final long autoDeleteAddressesDelay,
-                                  final double redeliveryCollisionAvoidanceFactor,
-                                  final long retroactiveMessageCount) throws Exception {
-      addAddressSettings(address,
-                         DLA,
-                         expiryAddress,
-                         expiryDelay,
-                         defaultLastValueQueue,
-                         maxDeliveryAttempts,
-                         maxSizeBytes,
-                         pageSizeBytes,
-                         pageMaxCacheSize,
-                         redeliveryDelay,
-                         redeliveryMultiplier,
-                         maxRedeliveryDelay,
-                         redistributionDelay,
-                         sendToDLAOnNoRoute,
-                         addressFullMessagePolicy,
-                         slowConsumerThreshold,
-                         slowConsumerCheckPeriod,
-                         slowConsumerPolicy,
-                         autoCreateJmsQueues,
-                         autoDeleteJmsQueues,
-                         autoCreateJmsTopics,
-                         autoDeleteJmsTopics,
-                         autoCreateQueues,
-                         autoDeleteQueues,
-                         autoCreateAddresses,
-                         autoDeleteAddresses,
-                         configDeleteQueues,
-                         configDeleteAddresses,
-                         maxSizeBytesRejectThreshold,
-                         defaultLastValueKey,
-                         defaultNonDestructive,
-                         defaultExclusiveQueue,
-                         defaultGroupRebalance,
-                         defaultGroupBuckets,
-                         defaultGroupFirstKey,
-                         defaultMaxConsumers,
-                         defaultPurgeOnNoConsumers,
-                         defaultConsumersBeforeDispatch,
-                         defaultDelayBeforeDispatch,
-                         defaultQueueRoutingType,
-                         defaultAddressRoutingType,
-                         defaultConsumerWindowSize,
-                         defaultRingSize,
-                         autoDeleteCreatedQueues,
-                         autoDeleteQueuesDelay,
-                         autoDeleteQueuesMessageCount,
-                         autoDeleteAddressesDelay,
-                         redeliveryCollisionAvoidanceFactor,
-                         retroactiveMessageCount,
-                         AddressSettings.DEFAULT_AUTO_CREATE_DEAD_LETTER_RESOURCES,
-                         AddressSettings.DEFAULT_DEAD_LETTER_QUEUE_PREFIX.toString(),
-                         AddressSettings.DEFAULT_DEAD_LETTER_QUEUE_SUFFIX.toString(),
-                         AddressSettings.DEFAULT_AUTO_CREATE_EXPIRY_RESOURCES,
-                         AddressSettings.DEFAULT_EXPIRY_QUEUE_PREFIX.toString(),
-                         AddressSettings.DEFAULT_EXPIRY_QUEUE_SUFFIX.toString());
-   }
-
-   @Override
-   public void addAddressSettings(final String address,
-                                  final String DLA,
-                                  final String expiryAddress,
-                                  final long expiryDelay,
-                                  final boolean defaultLastValueQueue,
-                                  final int maxDeliveryAttempts,
-                                  final long maxSizeBytes,
-                                  final int pageSizeBytes,
-                                  final int pageMaxCacheSize,
-                                  final long redeliveryDelay,
-                                  final double redeliveryMultiplier,
-                                  final long maxRedeliveryDelay,
-                                  final long redistributionDelay,
-                                  final boolean sendToDLAOnNoRoute,
-                                  final String addressFullMessagePolicy,
-                                  final long slowConsumerThreshold,
-                                  final long slowConsumerCheckPeriod,
-                                  final String slowConsumerPolicy,
-                                  final boolean autoCreateJmsQueues,
-                                  final boolean autoDeleteJmsQueues,
-                                  final boolean autoCreateJmsTopics,
-                                  final boolean autoDeleteJmsTopics,
-                                  final boolean autoCreateQueues,
-                                  final boolean autoDeleteQueues,
-                                  final boolean autoCreateAddresses,
-                                  final boolean autoDeleteAddresses,
-                                  final String configDeleteQueues,
-                                  final String configDeleteAddresses,
-                                  final long maxSizeBytesRejectThreshold,
-                                  final String defaultLastValueKey,
-                                  final boolean defaultNonDestructive,
-                                  final boolean defaultExclusiveQueue,
-                                  final boolean defaultGroupRebalance,
-                                  final int defaultGroupBuckets,
-                                  final String defaultGroupFirstKey,
-                                  final int defaultMaxConsumers,
-                                  final boolean defaultPurgeOnNoConsumers,
-                                  final int defaultConsumersBeforeDispatch,
-                                  final long defaultDelayBeforeDispatch,
-                                  final String defaultQueueRoutingType,
-                                  final String defaultAddressRoutingType,
-                                  final int defaultConsumerWindowSize,
-                                  final long defaultRingSize,
-                                  final boolean autoDeleteCreatedQueues,
-                                  final long autoDeleteQueuesDelay,
-                                  final long autoDeleteQueuesMessageCount,
-                                  final long autoDeleteAddressesDelay,
-                                  final double redeliveryCollisionAvoidanceFactor,
-                                  final long retroactiveMessageCount,
-                                  final boolean autoCreateDeadLetterResources,
-                                  final String deadLetterQueuePrefix,
-                                  final String deadLetterQueueSuffix,
-                                  final boolean autoCreateExpiryResources,
-                                  final String expiryQueuePrefix,
-                                  final String expiryQueueSuffix) throws Exception {
-      if (AuditLogger.isEnabled()) {
-         AuditLogger.addAddressSettings(this.server, address, DLA, expiryAddress, expiryDelay, defaultLastValueQueue, maxDeliveryAttempts,
+      if (AuditLogger.isEnabled()) {
+         AuditLogger.addAddressSettings(this.server, address, DLA, expiryAddress, expiryDelay, lastValueQueue, deliveryAttempts,
                   maxSizeBytes, pageSizeBytes, pageMaxCacheSize, redeliveryDelay, redeliveryMultiplier,
                   maxRedeliveryDelay, redistributionDelay, sendToDLAOnNoRoute, addressFullMessagePolicy,
                   slowConsumerThreshold, slowConsumerCheckPeriod, slowConsumerPolicy, autoCreateJmsQueues,
                   autoDeleteJmsQueues, autoCreateJmsTopics, autoDeleteJmsTopics, autoCreateQueues, autoDeleteQueues,
-                  autoCreateAddresses, autoDeleteAddresses, configDeleteQueues, configDeleteAddresses, maxSizeBytesRejectThreshold,
-                  defaultLastValueKey, defaultNonDestructive, defaultExclusiveQueue, defaultGroupRebalance, defaultGroupBuckets,
-                  defaultGroupFirstKey, defaultMaxConsumers, defaultPurgeOnNoConsumers, defaultConsumersBeforeDispatch,
-                  defaultDelayBeforeDispatch, defaultQueueRoutingType, defaultAddressRoutingType, defaultConsumerWindowSize,
-                  defaultRingSize, autoDeleteCreatedQueues, autoDeleteQueuesDelay, autoDeleteQueuesMessageCount,
-                  autoDeleteAddressesDelay, redeliveryCollisionAvoidanceFactor, retroactiveMessageCount, autoCreateDeadLetterResources,
-                  deadLetterQueuePrefix, deadLetterQueueSuffix, autoCreateExpiryResources, expiryQueuePrefix,
-                  expiryQueueSuffix);
+                  autoCreateAddresses, autoDeleteAddresses);
       }
       checkStarted();
 
@@ -3130,8 +2639,8 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
       addressSettings.setDeadLetterAddress(DLA == null ? null : new SimpleString(DLA));
       addressSettings.setExpiryAddress(expiryAddress == null ? null : new SimpleString(expiryAddress));
       addressSettings.setExpiryDelay(expiryDelay);
-      addressSettings.setDefaultLastValueQueue(defaultLastValueQueue);
-      addressSettings.setMaxDeliveryAttempts(maxDeliveryAttempts);
+      addressSettings.setDefaultLastValueQueue(lastValueQueue);
+      addressSettings.setMaxDeliveryAttempts(deliveryAttempts);
       addressSettings.setPageCacheMaxSize(pageMaxCacheSize);
       addressSettings.setMaxSizeBytes(maxSizeBytes);
       addressSettings.setPageSizeBytes(pageSizeBytes);
@@ -3140,10 +2649,26 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
       addressSettings.setMaxRedeliveryDelay(maxRedeliveryDelay);
       addressSettings.setRedistributionDelay(redistributionDelay);
       addressSettings.setSendToDLAOnNoRoute(sendToDLAOnNoRoute);
-      addressSettings.setAddressFullMessagePolicy(addressFullMessagePolicy == null ? AddressSettings.DEFAULT_ADDRESS_FULL_MESSAGE_POLICY : AddressFullMessagePolicy.valueOf(addressFullMessagePolicy.toUpperCase()));
+      if (addressFullMessagePolicy == null) {
+         addressSettings.setAddressFullMessagePolicy(AddressFullMessagePolicy.PAGE);
+      } else if (addressFullMessagePolicy.equalsIgnoreCase("PAGE")) {
+         addressSettings.setAddressFullMessagePolicy(AddressFullMessagePolicy.PAGE);
+      } else if (addressFullMessagePolicy.equalsIgnoreCase("DROP")) {
+         addressSettings.setAddressFullMessagePolicy(AddressFullMessagePolicy.DROP);
+      } else if (addressFullMessagePolicy.equalsIgnoreCase("BLOCK")) {
+         addressSettings.setAddressFullMessagePolicy(AddressFullMessagePolicy.BLOCK);
+      } else if (addressFullMessagePolicy.equalsIgnoreCase("FAIL")) {
+         addressSettings.setAddressFullMessagePolicy(AddressFullMessagePolicy.FAIL);
+      }
       addressSettings.setSlowConsumerThreshold(slowConsumerThreshold);
       addressSettings.setSlowConsumerCheckPeriod(slowConsumerCheckPeriod);
-      addressSettings.setSlowConsumerPolicy(slowConsumerPolicy == null ? AddressSettings.DEFAULT_SLOW_CONSUMER_POLICY : SlowConsumerPolicy.valueOf(slowConsumerPolicy.toUpperCase()));
+      if (slowConsumerPolicy == null) {
+         addressSettings.setSlowConsumerPolicy(SlowConsumerPolicy.NOTIFY);
+      } else if (slowConsumerPolicy.equalsIgnoreCase("NOTIFY")) {
+         addressSettings.setSlowConsumerPolicy(SlowConsumerPolicy.NOTIFY);
+      } else if (slowConsumerPolicy.equalsIgnoreCase("KILL")) {
+         addressSettings.setSlowConsumerPolicy(SlowConsumerPolicy.KILL);
+      }
       addressSettings.setAutoCreateJmsQueues(autoCreateJmsQueues);
       addressSettings.setAutoDeleteJmsQueues(autoDeleteJmsQueues);
       addressSettings.setAutoCreateJmsTopics(autoCreateJmsTopics);
@@ -3152,36 +2677,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
       addressSettings.setAutoDeleteQueues(autoDeleteQueues);
       addressSettings.setAutoCreateAddresses(autoCreateAddresses);
       addressSettings.setAutoDeleteAddresses(autoDeleteAddresses);
-      addressSettings.setConfigDeleteQueues(configDeleteQueues == null ? AddressSettings.DEFAULT_CONFIG_DELETE_QUEUES : DeletionPolicy.valueOf(configDeleteQueues.toUpperCase()));
-      addressSettings.setConfigDeleteAddresses(configDeleteAddresses == null ? AddressSettings.DEFAULT_CONFIG_DELETE_ADDRESSES : DeletionPolicy.valueOf(configDeleteAddresses.toUpperCase()));
-      addressSettings.setMaxSizeBytesRejectThreshold(maxSizeBytesRejectThreshold);
-      addressSettings.setDefaultLastValueKey(defaultLastValueKey == null ? ActiveMQDefaultConfiguration.getDefaultLastValueKey() : new SimpleString(defaultLastValueKey));
-      addressSettings.setDefaultNonDestructive(defaultNonDestructive);
-      addressSettings.setDefaultExclusiveQueue(defaultExclusiveQueue);
-      addressSettings.setDefaultGroupRebalance(defaultGroupRebalance);
-      addressSettings.setDefaultGroupBuckets(defaultGroupBuckets);
-      addressSettings.setDefaultGroupFirstKey(defaultGroupFirstKey == null ? ActiveMQDefaultConfiguration.getDefaultGroupFirstKey() : new SimpleString(defaultGroupFirstKey));
-      addressSettings.setDefaultMaxConsumers(defaultMaxConsumers);
-      addressSettings.setDefaultPurgeOnNoConsumers(defaultPurgeOnNoConsumers);
-      addressSettings.setDefaultConsumersBeforeDispatch(defaultConsumersBeforeDispatch);
-      addressSettings.setDefaultDelayBeforeDispatch(defaultDelayBeforeDispatch);
-      addressSettings.setDefaultQueueRoutingType(defaultQueueRoutingType == null ? ActiveMQDefaultConfiguration.getDefaultRoutingType() : RoutingType.valueOf(defaultQueueRoutingType.toUpperCase()));
-      addressSettings.setDefaultAddressRoutingType(defaultAddressRoutingType == null ? ActiveMQDefaultConfiguration.getDefaultRoutingType() : RoutingType.valueOf(defaultAddressRoutingType.toUpperCase()));
-      addressSettings.setDefaultConsumerWindowSize(defaultConsumerWindowSize);
-      addressSettings.setDefaultRingSize(defaultRingSize);
-      addressSettings.setAutoDeleteCreatedQueues(autoDeleteCreatedQueues);
-      addressSettings.setAutoDeleteQueuesDelay(autoDeleteQueuesDelay);
-      addressSettings.setAutoDeleteQueuesMessageCount(autoDeleteQueuesMessageCount);
-      addressSettings.setAutoDeleteAddressesDelay(autoDeleteAddressesDelay);
-      addressSettings.setRedeliveryCollisionAvoidanceFactor(redeliveryCollisionAvoidanceFactor);
-      addressSettings.setRetroactiveMessageCount(retroactiveMessageCount);
-      addressSettings.setAutoCreateDeadLetterResources(autoCreateDeadLetterResources);
-      addressSettings.setDeadLetterQueuePrefix(deadLetterQueuePrefix == null ? null : new SimpleString(deadLetterQueuePrefix));
-      addressSettings.setDeadLetterQueueSuffix(deadLetterQueueSuffix == null ? null : new SimpleString(deadLetterQueueSuffix));
-      addressSettings.setAutoCreateExpiryResources(autoCreateExpiryResources);
-      addressSettings.setExpiryQueuePrefix(expiryQueuePrefix == null ? null : new SimpleString(expiryQueuePrefix));
-      addressSettings.setExpiryQueueSuffix(expiryQueueSuffix == null ? null : new SimpleString(expiryQueueSuffix));
-
       server.getAddressSettingsRepository().addMatch(address, addressSettings);
 
       storageManager.storeAddressSetting(new PersistedAddressSetting(new SimpleString(address), addressSettings));
@@ -3798,7 +3293,7 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
       if (AuditLogger.isEnabled()) {
          AuditLogger.getNodeID(this.server);
       }
-      return server.getNodeID() == null ? null : server.getNodeID().toString();
+      return server.getNodeID().toString();
    }
 
    @Override
@@ -3818,7 +3313,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
    }
 
    @Override
-   @Deprecated
    public long getMessageExpiryThreadPriority() {
       if (AuditLogger.isEnabled()) {
          AuditLogger.getMessageExpiryThreadPriority(this.server);
@@ -3937,7 +3431,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
 
       return (String) tcclCall(ActiveMQServerControlImpl.class.getClassLoader(), () -> internaListUser(username));
    }
-
    private String internaListUser(String username) throws Exception {
       PropertiesLoginModuleConfigurator config = getPropertiesLoginModuleConfigurator();
       Map<String, Set<String>> info = config.listUser(username);
@@ -3962,7 +3455,6 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
       }
       tcclInvoke(ActiveMQServerControlImpl.class.getClassLoader(), () -> internalRemoveUser(username));
    }
-
    private void internalRemoveUser(String username) throws Exception {
       PropertiesLoginModuleConfigurator config = getPropertiesLoginModuleConfigurator();
       config.removeUser(username);
@@ -3970,22 +3462,15 @@ public class ActiveMQServerControlImpl extends AbstractControl implements Active
    }
 
    @Override
-   public void resetUser(String username, String password, String roles, boolean plaintext) throws Exception {
+   public void resetUser(String username, String password, String roles) throws Exception {
       if (AuditLogger.isEnabled()) {
-         AuditLogger.resetUser(this.server, username, "****", roles, plaintext);
+         AuditLogger.resetUser(this.server, username, "****", roles);
       }
-      tcclInvoke(ActiveMQServerControlImpl.class.getClassLoader(), () -> internalresetUser(username, password, roles, plaintext));
-   }
-
-   @Override
-   public void resetUser(String username, String password, String roles) throws Exception {
-      resetUser(username, password, roles, true);
+      tcclInvoke(ActiveMQServerControlImpl.class.getClassLoader(), () -> internalresetUser(username, password, roles));
    }
-
-   private void internalresetUser(String username, String password, String roles, boolean plaintext) throws Exception {
+   private void internalresetUser(String username, String password, String roles) throws Exception {
       PropertiesLoginModuleConfigurator config = getPropertiesLoginModuleConfigurator();
-      // don't hash a null password even if plaintext = false
-      config.updateUser(username, password == null ? password : plaintext ? password : PasswordMaskingUtil.getHashProcessor().hash(password), roles == null ? null : roles.split(","));
+      config.updateUser(username, password, roles == null ? null : roles.split(","));
       config.save();
    }
 