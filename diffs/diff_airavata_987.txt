diff --git a/modules/orchestrator/orchestrator-core/src/main/java/org/apache/airavata/orchestrator/core/utils/OrchestratorUtils.java b/modules/orchestrator/orchestrator-core/src/main/java/org/apache/airavata/orchestrator/core/utils/OrchestratorUtils.java
index afe856c26..6a893f9ea 100644
--- a/modules/orchestrator/orchestrator-core/src/main/java/org/apache/airavata/orchestrator/core/utils/OrchestratorUtils.java
+++ b/modules/orchestrator/orchestrator-core/src/main/java/org/apache/airavata/orchestrator/core/utils/OrchestratorUtils.java
@@ -20,20 +20,16 @@
 */
 package org.apache.airavata.orchestrator.core.utils;
 
-import org.apache.airavata.gfac.GFacException;
-import org.apache.airavata.gfac.utils.GFacUtils;
 import org.apache.airavata.orchestrator.core.NewJobWorker;
 import org.apache.airavata.orchestrator.core.OrchestratorConfiguration;
 import org.apache.airavata.orchestrator.core.exception.OrchestratorException;
 import org.apache.airavata.registry.api.JobRequest;
-import org.apache.airavata.schemas.gfac.ApplicationDeploymentDescriptionType;
-import org.apache.airavata.schemas.gfac.Parameter;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import java.io.IOException;
 import java.net.URL;
-import java.util.*;
+import java.util.Properties;
 
 /**
  * This contains orchestrator specific utilities
@@ -42,7 +38,6 @@ public class OrchestratorUtils {
     private final static Logger logger = LoggerFactory.getLogger(OrchestratorUtils.class);
 
     public static OrchestratorConfiguration loadOrchestratorConfiguration() throws OrchestratorException, IOException {
-        //FIXME: (MEP) why are you using the NewJobWorker class to get the properties file here?
         URL resource =
                 NewJobWorker.class.getClassLoader().getResource(OrchestratorConstants.ORCHESTRATOR_PROPERTIES);
         if (resource == null) {
@@ -53,43 +48,28 @@ public class OrchestratorUtils {
         OrchestratorConfiguration orchestratorConfiguration = new OrchestratorConfiguration();
         Properties orchestratorProps = new Properties();
         orchestratorProps.load(resource.openStream());
-        orchestratorConfiguration.setNewJobSubmitterClass((String) orchestratorProps.get(OrchestratorConstants.JOB_SUBMITTER));
-        orchestratorConfiguration.setSubmitterInterval(Integer.parseInt((String) orchestratorProps.get(OrchestratorConstants.SUBMIT_INTERVAL)));
-        orchestratorConfiguration.setThreadPoolSize(Integer.parseInt((String) orchestratorProps.get(OrchestratorConstants.THREAD_POOL_SIZE)));
+        orchestratorConfiguration.setSubmitterClass((String) orchestratorProps.get(OrchestratorConstants.JOB_SUBMITTER));
+        orchestratorConfiguration.setSubmitterInterval(Integer.parseInt((String)orchestratorProps.get(OrchestratorConstants.SUBMIT_INTERVAL)));
+        orchestratorConfiguration.setThreadPoolSize(Integer.parseInt((String)orchestratorProps.get(OrchestratorConstants.THREAD_POOL_SIZE)));
         orchestratorConfiguration.setStartSubmitter(Boolean.valueOf(orchestratorProps.getProperty(OrchestratorConstants.START_SUBMITTER)));
         orchestratorConfiguration.setEmbeddedMode(Boolean.valueOf(orchestratorProps.getProperty(OrchestratorConstants.EMBEDDED_MODE)));
         return orchestratorConfiguration;
     }
 
-    public static boolean validateJobRequest(JobRequest request) {
+    public static boolean validateJobRequest(JobRequest request){
         /* todo implement a job request validation */
 
         return true;
     }
 
-    public static String getUniqueID(JobRequest jobRequest) {
-        if (jobRequest.getUserExperimentID() != null) {
+    public static String getUniqueID(JobRequest jobRequest){
+        if(jobRequest.getUserExperimentID() != null){
             return jobRequest.getUserExperimentID();
-        } else if (jobRequest.getSystemExperimentID() != null) {
+        }else if(jobRequest.getSystemExperimentID() != null){
             return jobRequest.getSystemExperimentID();
-        } else {
+        }else{
             return null;
         }
 
     }
-
-    public static Map<String, Object> getMessageContext(Map<String, String> experimentData,
-                                                        Parameter[] parameters) throws OrchestratorException {
-        HashMap<String, Object> stringObjectHashMap = new HashMap<String, Object>();
-
-        for (int i = 0; i < parameters.length; i++) {
-            String input = experimentData.get(parameters[i].getParameterName());
-            if (input != null) {
-                stringObjectHashMap.put(parameters[i].getParameterName(), GFacUtils.getInputActualParameter(parameters[i], input));
-            } else {
-                throw new OrchestratorException("Parameter:" + input + "is missing");
-            }
-        }
-        return stringObjectHashMap;
-    }
 }