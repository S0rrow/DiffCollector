diff --git a/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/ServerSession.java b/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/ServerSession.java
index 700b82757d..2b90cbce15 100644
--- a/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/ServerSession.java
+++ b/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/ServerSession.java
@@ -16,21 +16,16 @@
  */
 package org.apache.activemq.artemis.core.server;
 
-import java.util.List;
-import java.util.Set;
-
 import javax.json.JsonArrayBuilder;
 import javax.transaction.xa.Xid;
+import java.util.List;
+import java.util.Set;
 
-import org.apache.activemq.artemis.Closeable;
-import org.apache.activemq.artemis.api.core.Message;
-import org.apache.activemq.artemis.api.core.Pair;
-import org.apache.activemq.artemis.api.core.RoutingType;
 import org.apache.activemq.artemis.api.core.SimpleString;
+import org.apache.activemq.artemis.core.message.impl.MessageInternal;
 import org.apache.activemq.artemis.core.persistence.OperationContext;
 import org.apache.activemq.artemis.core.postoffice.RoutingStatus;
 import org.apache.activemq.artemis.core.security.SecurityAuth;
-import org.apache.activemq.artemis.core.server.impl.AddressInfo;
 import org.apache.activemq.artemis.core.transaction.Transaction;
 import org.apache.activemq.artemis.spi.core.protocol.RemotingConnection;
 
@@ -61,7 +56,7 @@ public interface ServerSession extends SecurityAuth {
 
    void individualAcknowledge(long consumerID, long messageID) throws Exception;
 
-   void individualCancel(long consumerID, long messageID, boolean failed) throws Exception;
+   void individualCancel(final long consumerID, final long messageID, boolean failed) throws Exception;
 
    void expire(long consumerID, long messageID) throws Exception;
 
@@ -91,6 +86,8 @@ public interface ServerSession extends SecurityAuth {
 
    void markTXFailed(Throwable e);
 
+   QueueCreator getQueueCreator();
+
    List<Xid> xaGetInDoubtXids();
 
    int xaGetTimeout();
@@ -101,63 +98,17 @@ public interface ServerSession extends SecurityAuth {
 
    void stop();
 
-   void addCloseable(Closeable closeable);
-
    /**
     * To be used by protocol heads that needs to control the transaction outside the session context.
     */
    void resetTX(Transaction transaction);
 
-   Queue createQueue(SimpleString address,
-                     SimpleString name,
-                     RoutingType routingType,
-                     SimpleString filterString,
-                     boolean temporary,
-                     boolean durable) throws Exception;
-
-   /**
-    * Create queue with default delivery mode
-    *
-    * @param address
-    * @param name
-    * @param filterString
-    * @param temporary
-    * @param durable
-    * @return
-    * @throws Exception
-    */
    Queue createQueue(SimpleString address,
                      SimpleString name,
                      SimpleString filterString,
                      boolean temporary,
                      boolean durable) throws Exception;
 
-   Queue createQueue(SimpleString address,
-                     SimpleString name,
-                     RoutingType routingType,
-                     SimpleString filterString,
-                     boolean temporary,
-                     boolean durable,
-                     int maxConsumers,
-                     boolean purgeOnNoConsumers,
-                     boolean autoCreated) throws Exception;
-
-   Queue createQueue(SimpleString address,
-                     SimpleString name,
-                     RoutingType routingType,
-                     SimpleString filterString,
-                     boolean temporary,
-                     boolean durable,
-                     boolean autoCreated) throws Exception;
-
-   AddressInfo createAddress(SimpleString address,
-                             Set<RoutingType> routingTypes,
-                             boolean autoCreated) throws Exception;
-
-   AddressInfo createAddress(SimpleString address,
-                             RoutingType routingType,
-                             boolean autoCreated) throws Exception;
-
    void deleteQueue(SimpleString name) throws Exception;
 
    ServerConsumer createConsumer(long consumerID,
@@ -165,37 +116,28 @@ public interface ServerSession extends SecurityAuth {
                                  SimpleString filterString,
                                  boolean browseOnly) throws Exception;
 
-   ServerConsumer createConsumer(long consumerID,
-                                 SimpleString queueName,
-                                 SimpleString filterString,
-                                 boolean browseOnly,
-                                 boolean supportLargeMessage,
-                                 Integer credits) throws Exception;
+   ServerConsumer createConsumer(final long consumerID,
+                                 final SimpleString queueName,
+                                 final SimpleString filterString,
+                                 final boolean browseOnly,
+                                 final boolean supportLargeMessage,
+                                 final Integer credits) throws Exception;
 
    QueueQueryResult executeQueueQuery(SimpleString name) throws Exception;
 
-   AddressQueryResult executeAddressQuery(SimpleString name) throws Exception;
-
    BindingQueryResult executeBindingQuery(SimpleString address) throws Exception;
 
    void closeConsumer(long consumerID) throws Exception;
 
    void receiveConsumerCredits(long consumerID, int credits) throws Exception;
 
-   RoutingStatus send(Transaction tx,
-                      Message message,
-                      boolean direct,
-                      boolean noAutoCreateQueue) throws Exception;
+   void sendContinuations(int packetSize, long totalBodySize, byte[] body, boolean continues) throws Exception;
 
-   RoutingStatus doSend(Transaction tx,
-                        Message msg,
-                        SimpleString originalAddress,
-                        boolean direct,
-                        boolean noAutoCreateQueue) throws Exception;
+   RoutingStatus send(ServerMessage message, boolean direct, boolean noAutoCreateQueue) throws Exception;
 
-   RoutingStatus send(Message message, boolean direct, boolean noAutoCreateQueue) throws Exception;
+   RoutingStatus send(ServerMessage message, boolean direct) throws Exception;
 
-   RoutingStatus send(Message message, boolean direct) throws Exception;
+   void sendLarge(MessageInternal msg) throws Exception;
 
    void forceConsumerDelivery(long consumerID, long sequence) throws Exception;
 
@@ -209,9 +151,9 @@ public interface ServerSession extends SecurityAuth {
 
    Set<ServerConsumer> getServerConsumers();
 
-   void addMetaData(String key, String data) throws Exception;
+   void addMetaData(String key, String data);
 
-   boolean addUniqueMetaData(String key, String data) throws Exception;
+   boolean addUniqueMetaData(String key, String data);
 
    String getMetaData(String key);
 
@@ -238,58 +180,10 @@ public interface ServerSession extends SecurityAuth {
 
    boolean isClosed();
 
-   void createSharedQueue(SimpleString address,
-                          SimpleString name,
-                          RoutingType routingType,
-                          boolean durable,
-                          SimpleString filterString) throws Exception;
-
    void createSharedQueue(SimpleString address,
                           SimpleString name,
                           boolean durable,
                           SimpleString filterString) throws Exception;
 
    List<MessageReference> getInTXMessagesForConsumer(long consumerId);
-
-   String getValidatedUser();
-
-   SimpleString getMatchingQueue(SimpleString address, RoutingType routingType) throws Exception;
-
-   SimpleString getMatchingQueue(SimpleString address,
-                                 SimpleString queueName,
-                                 RoutingType routingType) throws Exception;
-
-   AddressInfo getAddress(SimpleString address);
-
-   /**
-    * Strip the prefix (if it exists) from the address based on the prefixes provided to the ServerSession constructor.
-    *
-    * @param address the address to inspect
-    * @return the canonical (i.e. non-prefixed) address name
-    */
-   SimpleString removePrefix(SimpleString address);
-
-   /**
-    * Get the canonical (i.e. non-prefixed) address and the corresponding routing-type.
-    *
-    * @param address the address to inspect
-    * @param defaultRoutingType the {@code org.apache.activemq.artemis.api.core.RoutingType} to return if no prefix
-    *                           match is found.
-    * @return a {@code org.apache.activemq.artemis.api.core.Pair} representing the canonical (i.e. non-prefixed) address
-    *         name and the {@code org.apache.activemq.artemis.api.core.RoutingType} corresponding to the that prefix.
-    */
-   Pair<SimpleString, RoutingType> getAddressAndRoutingType(SimpleString address, RoutingType defaultRoutingType);
-
-   /**
-    * Get the canonical (i.e. non-prefixed) address and the corresponding routing-type.
-    *
-    * @param address the address to inspect
-    * @param defaultRoutingTypes a the {@code java.util.Set} of {@code org.apache.activemq.artemis.api.core.RoutingType}
-    *                            objects to return if no prefix match is found.
-    * @return a {@code org.apache.activemq.artemis.api.core.Pair} representing the canonical (i.e. non-prefixed) address
-    *         name and the {@code java.util.Set} of {@code org.apache.activemq.artemis.api.core.RoutingType} objects
-    *         corresponding to the that prefix.
-    */
-   Pair<SimpleString, Set<RoutingType>> getAddressAndRoutingTypes(SimpleString address,
-                                                                  Set<RoutingType> defaultRoutingTypes);
 }