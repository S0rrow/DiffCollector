diff --git a/core/src/main/java/org/apache/accumulo/core/client/impl/ReplicationOperationsImpl.java b/core/src/main/java/org/apache/accumulo/core/client/impl/ReplicationOperationsImpl.java
index ab6160ef6e..5aed62331e 100644
--- a/core/src/main/java/org/apache/accumulo/core/client/impl/ReplicationOperationsImpl.java
+++ b/core/src/main/java/org/apache/accumulo/core/client/impl/ReplicationOperationsImpl.java
@@ -16,8 +16,7 @@
  */
 package org.apache.accumulo.core.client.impl;
 
-import static com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly;
-import static java.util.Objects.requireNonNull;
+import static com.google.common.base.Preconditions.checkNotNull;
 
 import java.util.Collections;
 import java.util.HashSet;
@@ -52,32 +51,34 @@ import org.apache.hadoop.io.Text;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import static com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly;
+
 public class ReplicationOperationsImpl implements ReplicationOperations {
   private static final Logger log = LoggerFactory.getLogger(ReplicationOperationsImpl.class);
 
   private final ClientContext context;
 
   public ReplicationOperationsImpl(ClientContext context) {
-    requireNonNull(context);
+    checkNotNull(context);
     this.context = context;
   }
 
   @Override
   public void addPeer(final String name, final String replicaType) throws AccumuloException, AccumuloSecurityException, PeerExistsException {
-    requireNonNull(name);
-    requireNonNull(replicaType);
+    checkNotNull(name);
+    checkNotNull(replicaType);
     context.getConnector().instanceOperations().setProperty(Property.REPLICATION_PEERS.getKey() + name, replicaType);
   }
 
   @Override
   public void removePeer(final String name) throws AccumuloException, AccumuloSecurityException, PeerNotFoundException {
-    requireNonNull(name);
+    checkNotNull(name);
     context.getConnector().instanceOperations().removeProperty(Property.REPLICATION_PEERS.getKey() + name);
   }
 
   @Override
   public void drain(String tableName) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {
-    requireNonNull(tableName);
+    checkNotNull(tableName);
 
     Set<String> wals = referencedFiles(tableName);
 
@@ -86,7 +87,7 @@ public class ReplicationOperationsImpl implements ReplicationOperations {
 
   @Override
   public void drain(final String tableName, final Set<String> wals) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {
-    requireNonNull(tableName);
+    checkNotNull(tableName);
 
     final TInfo tinfo = Tracer.traceInfo();
     final TCredentials rpcCreds = context.rpcCreds();
@@ -117,38 +118,38 @@ public class ReplicationOperationsImpl implements ReplicationOperations {
     });
   }
 
-  protected String getTableId(Connector conn, String tableName) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {
+  protected Text getTableId(Connector conn, String tableName) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {
     TableOperations tops = conn.tableOperations();
 
     if (!conn.tableOperations().exists(tableName)) {
       throw new TableNotFoundException(null, tableName, null);
     }
 
-    String tableId = null;
-    while (null == tableId) {
-      tableId = tops.tableIdMap().get(tableName);
-      if (null == tableId) {
+    String strTableId = null;
+    while (null == strTableId) {
+      strTableId = tops.tableIdMap().get(tableName);
+      if (null == strTableId) {
         sleepUninterruptibly(200, TimeUnit.MILLISECONDS);
       }
     }
 
-    return tableId;
+    return new Text(strTableId);
   }
 
   @Override
   public Set<String> referencedFiles(String tableName) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {
-    requireNonNull(tableName);
+    checkNotNull(tableName);
 
     log.debug("Collecting referenced files for replication of table {}", tableName);
 
     Connector conn = context.getConnector();
-    String tableId = getTableId(conn, tableName);
+    Text tableId = getTableId(conn, tableName);
 
     log.debug("Found id of {} for name {}", tableId, tableName);
 
     // Get the WALs currently referenced by the table
     BatchScanner metaBs = conn.createBatchScanner(MetadataTable.NAME, Authorizations.EMPTY, 4);
-    metaBs.setRanges(Collections.singleton(MetadataSchema.TabletsSection.getRange(tableId)));
+    metaBs.setRanges(Collections.singleton(MetadataSchema.TabletsSection.getRange(tableId.toString())));
     metaBs.fetchColumnFamily(LogColumnFamily.NAME);
     Set<String> wals = new HashSet<>();
     try {
@@ -167,7 +168,8 @@ public class ReplicationOperationsImpl implements ReplicationOperations {
     try {
       Text buffer = new Text();
       for (Entry<Key,Value> entry : metaBs) {
-        if (tableId.equals(ReplicationSection.getTableId(entry.getKey()))) {
+        ReplicationSection.getTableId(entry.getKey(), buffer);
+        if (buffer.equals(tableId)) {
           ReplicationSection.getFile(entry.getKey(), buffer);
           wals.add(buffer.toString());
         }