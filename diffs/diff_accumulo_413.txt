diff --git a/test/src/main/java/org/apache/accumulo/test/functional/BatchScanSplitIT.java b/test/src/main/java/org/apache/accumulo/test/functional/BatchScanSplitIT.java
index 528f486d82..7d36cd271d 100644
--- a/test/src/main/java/org/apache/accumulo/test/functional/BatchScanSplitIT.java
+++ b/test/src/main/java/org/apache/accumulo/test/functional/BatchScanSplitIT.java
@@ -16,7 +16,6 @@
  */
 package org.apache.accumulo.test.functional;
 
-import static com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly;
 import static java.nio.charset.StandardCharsets.UTF_8;
 
 import java.util.ArrayList;
@@ -44,6 +43,8 @@ import org.junit.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import static com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly;
+
 public class BatchScanSplitIT extends AccumuloClusterHarness {
   private static final Logger log = LoggerFactory.getLogger(BatchScanSplitIT.class);
 
@@ -88,8 +89,8 @@ public class BatchScanSplitIT extends AccumuloClusterHarness {
     System.out.println("splits : " + splits);
 
     Random random = new Random(19011230);
-    HashMap<Text,Value> expected = new HashMap<>();
-    ArrayList<Range> ranges = new ArrayList<>();
+    HashMap<Text,Value> expected = new HashMap<Text,Value>();
+    ArrayList<Range> ranges = new ArrayList<Range>();
     for (int i = 0; i < 100; i++) {
       int r = random.nextInt(numRows);
       Text row = new Text(String.format("%09x", r));
@@ -99,7 +100,7 @@ public class BatchScanSplitIT extends AccumuloClusterHarness {
 
     // logger.setLevel(Level.TRACE);
 
-    HashMap<Text,Value> found = new HashMap<>();
+    HashMap<Text,Value> found = new HashMap<Text,Value>();
 
     for (int i = 0; i < 20; i++) {
       BatchScanner bs = getConnector().createBatchScanner(tableName, Authorizations.EMPTY, 4);