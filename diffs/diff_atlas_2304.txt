diff --git a/webapp/src/main/java/org/apache/hadoop/metadata/web/resources/TypesResource.java b/webapp/src/main/java/org/apache/hadoop/metadata/web/resources/TypesResource.java
old mode 100755
new mode 100644
index d4c968dd0..95c26005f
--- a/webapp/src/main/java/org/apache/hadoop/metadata/web/resources/TypesResource.java
+++ b/webapp/src/main/java/org/apache/hadoop/metadata/web/resources/TypesResource.java
@@ -18,14 +18,9 @@
 
 package org.apache.hadoop.metadata.web.resources;
 
-import com.google.common.base.Preconditions;
-import org.apache.hadoop.metadata.MetadataException;
-import org.apache.hadoop.metadata.MetadataServiceClient;
 import org.apache.hadoop.metadata.services.MetadataService;
-import org.apache.hadoop.metadata.typesystem.types.DataTypes;
 import org.apache.hadoop.metadata.web.util.Servlets;
 import org.codehaus.jettison.json.JSONArray;
-import org.codehaus.jettison.json.JSONException;
 import org.codehaus.jettison.json.JSONObject;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -33,7 +28,13 @@ import org.slf4j.LoggerFactory;
 import javax.inject.Inject;
 import javax.inject.Singleton;
 import javax.servlet.http.HttpServletRequest;
-import javax.ws.rs.*;
+import javax.ws.rs.Consumes;
+import javax.ws.rs.GET;
+import javax.ws.rs.POST;
+import javax.ws.rs.Path;
+import javax.ws.rs.PathParam;
+import javax.ws.rs.Produces;
+import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.core.Context;
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.Response;
@@ -41,11 +42,9 @@ import java.util.List;
 
 /**
  * This class provides RESTful API for Types.
- *
+ * 
  * A type is the description of any representable item;
  * e.g. a Hive table
- *
- * You could represent any meta model representing any domain using these types.
  */
 @Path("types")
 @Singleton
@@ -55,46 +54,38 @@ public class TypesResource {
 
     private final MetadataService metadataService;
 
-    static final String TYPE_ALL = "all";
-
     @Inject
     public TypesResource(MetadataService metadataService) {
         this.metadataService = metadataService;
     }
 
-    /**
-     * Submits a type definition corresponding to a given type representing a meta model of a
-     * domain. Could represent things like Hive Database, Hive Table, etc.
-     */
     @POST
+    @Path("submit/{typeName}")
     @Consumes(MediaType.APPLICATION_JSON)
     @Produces(MediaType.APPLICATION_JSON)
-    public Response submit(@Context HttpServletRequest request) {
+    public Response submit(@Context HttpServletRequest request,
+                           @PathParam("typeName") String typeName) {
         try {
             final String typeDefinition = Servlets.getRequestPayload(request);
-            LOG.debug("creating type with definition {} ", typeDefinition);
+            LOG.debug("creating type {} with definition {} ", typeName, typeDefinition);
 
-            JSONObject typesAdded = metadataService.createType(typeDefinition);
+            JSONObject typesAdded = metadataService.createType(typeName, typeDefinition);
 
             JSONObject response = new JSONObject();
+            response.put("typeName", typeName);
             response.put("types", typesAdded);
-            response.put(MetadataServiceClient.REQUEST_ID, Servlets.getRequestId());
+            response.put("requestId", Thread.currentThread().getName());
 
             return Response.ok(response).build();
         } catch (Exception e) {
-            LOG.error("Unable to persist types", e);
+            LOG.error("Unable to persist entity object", e);
             throw new WebApplicationException(
                     Servlets.getErrorResponse(e, Response.Status.BAD_REQUEST));
         }
     }
 
-    /**
-     * Fetch the complete definition of a given type name which is unique.
-     *
-     * @param typeName name of a type which is unique.
-     */
     @GET
-    @Path("{typeName}")
+    @Path("definition/{typeName}")
     @Produces(MediaType.APPLICATION_JSON)
     public Response getDefinition(@Context HttpServletRequest request,
                                   @PathParam("typeName") String typeName) {
@@ -104,48 +95,30 @@ public class TypesResource {
             JSONObject response = new JSONObject();
             response.put("typeName", typeName);
             response.put("definition", typeDefinition);
-            response.put(MetadataServiceClient.REQUEST_ID, Servlets.getRequestId());
+            response.put("requestId", Thread.currentThread().getName());
 
             return Response.ok(response).build();
-        } catch (MetadataException e) {
-            LOG.error("Unable to get type definition for type {}", typeName, e);
-            throw new WebApplicationException(
-                    Servlets.getErrorResponse(e, Response.Status.NOT_FOUND));
-        } catch (JSONException e) {
-            LOG.error("Unable to get type definition for type {}", typeName, e);
+        } catch (Exception e) {
+            LOG.error("Unable to persist entity object", e);
             throw new WebApplicationException(
                     Servlets.getErrorResponse(e, Response.Status.BAD_REQUEST));
         }
     }
 
-    /**
-     * Gets the list of trait type names registered in the type system.
-     */
     @GET
+    @Path("list")
     @Produces(MediaType.APPLICATION_JSON)
-    public Response getTypesByFilter(@Context HttpServletRequest request,
-                                  @DefaultValue(TYPE_ALL) @QueryParam("type") String type) {
+    public Response getTypeNames(@Context HttpServletRequest request) {
         try {
-            List<String> result = null;
-            if (TYPE_ALL.equals(type)) {
-                result = metadataService.getTypeNamesList();
-            } else {
-                DataTypes.TypeCategory typeCategory = DataTypes.TypeCategory.valueOf(type);
-                result = metadataService.getTypeNamesByCategory(typeCategory);
-            }
+            final List<String> typeNamesList = metadataService.getTypeNamesList();
 
             JSONObject response = new JSONObject();
-            response.put(MetadataServiceClient.RESULTS, new JSONArray(result));
-            response.put(MetadataServiceClient.TOTAL_SIZE, result.size());
-            response.put(MetadataServiceClient.REQUEST_ID, Servlets.getRequestId());
+            response.put("list", new JSONArray(typeNamesList));
+            response.put("requestId", Thread.currentThread().getName());
 
             return Response.ok(response).build();
-        } catch(IllegalArgumentException ie) {
-            LOG.error("Unsupported typeName while retrieving type list {}", type);
-            throw new WebApplicationException(
-                    Servlets.getErrorResponse("Unsupported type " + type, Response.Status.BAD_REQUEST));
         } catch (Exception e) {
-            LOG.error("Unable to get types list", e);
+            LOG.error("Unable to persist entity object", e);
             throw new WebApplicationException(
                     Servlets.getErrorResponse(e, Response.Status.BAD_REQUEST));
         }