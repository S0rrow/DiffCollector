diff --git a/jpa/jpa-container-context/src/main/java/org/apache/aries/jpa/container/context/transaction/impl/JTAPersistenceContextRegistry.java b/jpa/jpa-container-context/src/main/java/org/apache/aries/jpa/container/context/transaction/impl/JTAPersistenceContextRegistry.java
index a1e5501d3..f6114a01c 100644
--- a/jpa/jpa-container-context/src/main/java/org/apache/aries/jpa/container/context/transaction/impl/JTAPersistenceContextRegistry.java
+++ b/jpa/jpa-container-context/src/main/java/org/apache/aries/jpa/container/context/transaction/impl/JTAPersistenceContextRegistry.java
@@ -1,21 +1,3 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
 package org.apache.aries.jpa.container.context.transaction.impl;
 
 import java.util.IdentityHashMap;
@@ -53,25 +35,23 @@ public class JTAPersistenceContextRegistry {
    * automatically be closed when the transaction completes.
    * 
    * @param persistenceUnit The peristence unit to create the persitence context from
-   * @param properties  Any properties that should be passed on the call to {@code createEntityManager()}. 
-   * The properties are NOT used for retrieving an already created persistence context.
+   * @param properties  Any properties that should be passed on the call to {@code createEntityManager()}
    * 
    * @return A persistence context associated with the current transaction. Note that this will
    *         need to be wrappered to obey the JPA spec by throwing the correct exceptions
    * @throws {@link TransactionRequiredException} if there is no active transaction.
    */
-  public EntityManager getCurrentPersistenceContext(EntityManagerFactory persistenceUnit, Map<?,?> properties) throws TransactionRequiredException
+  public EntityManager getCurrentPersistenceContext(EntityManagerFactory persistenceUnit, Map<?,?> properties)
   {
     //There will only ever be one thread associated with a transaction at a given time
     //As a result, it is only the outer map that needs to be thread safe.
-    
     Object transactionKey = tranRegistry.getTransactionKey();
     
     //TODO Globalize and log this problem
     //Throw the error on to the client
-    if(transactionKey == null) {
+    if(transactionKey == null)
       throw new TransactionRequiredException();
-    }
+    
     //Get hold of the Map. If there is no Map already registered then add one.
     //We don't need to worry about a race condition, as no other thread will
     //share our transaction
@@ -81,13 +61,7 @@ public class JTAPersistenceContextRegistry {
     if(contextsForTransaction == null) {
       contextsForTransaction = new IdentityHashMap<EntityManagerFactory, EntityManager>();
       persistenceContextRegistry.put(transactionKey, contextsForTransaction);
-      try {
-        tranRegistry.registerInterposedSynchronization(new EntityManagerClearUp(transactionKey));
-      } catch (IllegalStateException e) {
-        persistenceContextRegistry.remove(transactionKey);
-        //TODO add a message
-        throw new TransactionRequiredException();
-      }
+      tranRegistry.registerInterposedSynchronization(new EntityManagerClearUp(transactionKey));
     }
     
     //Still only one thread for this transaction, so don't worry about any race conditions
@@ -96,59 +70,10 @@ public class JTAPersistenceContextRegistry {
     if(toReturn == null) {
       toReturn = (properties == null) ? persistenceUnit.createEntityManager() : persistenceUnit.createEntityManager(properties);
       contextsForTransaction.put(persistenceUnit, toReturn);
-    } else {
-      //TODO maybe add debug
     }
     
     return toReturn;
   }
-  
-  /**
-   * Get the persistence context for the current transaction if a transaction is active. 
-   * {@link getCurrentPersistenceContext}
-   * 
-   * Otherwise return a freshly created persistence context that is not associated with any
-   * transaction.
-   * 
-   * @param persistenceUnit
-   * @param properties
-   * @return An {@link EntityManager} object
-   */
-  public EntityManager getCurrentOrDetachedPersistenceContext(EntityManagerFactory persistenceUnit, Map<?,?> properties) 
-  {
-    if (tranRegistry.getTransactionKey() != null)
-      return getCurrentPersistenceContext(persistenceUnit, properties);
-    else 
-      return persistenceUnit.createEntityManager(properties);
-  }
-
-  
-  /**
-   * Get the persistence context for the current transaction if a transaction is active. 
-   * {@link getCurrentPersistenceContext}
-   * 
-   * Otherwise return null;
-   * 
-   * @param persistenceUnit
-   * @param properties
-   * @return The {@link EntityManager} object or null if there is no active transaction.
-   */
-  public EntityManager getCurrentOrNoPersistenceContext(EntityManagerFactory persistenceUnit, Map<?,?> properties) 
-  {
-    if (tranRegistry.getTransactionKey() != null)
-      return getCurrentPersistenceContext(persistenceUnit, properties);
-    else 
-      return null;
-  }
-
-  
-  /**
-   * Provide a {@link TransactionSynchronizationRegistry} to use
-   * @param tranRegistry
-   */
-  public void setTranRegistry(TransactionSynchronizationRegistry tranRegistry) {
-    this.tranRegistry = tranRegistry;
-  }
 
   /**
    * This class is used to close EntityManager instances once the transaction has committed,
@@ -163,20 +88,15 @@ public class JTAPersistenceContextRegistry {
     }
     
     public void afterCompletion(int arg0) {
-      //This is a no-op;
-    }
-
-    public void beforeCompletion() {
       Map<EntityManagerFactory, EntityManager> tidyUp = persistenceContextRegistry.remove(key);
       if(tidyUp != null) {
-        for(EntityManager em : tidyUp.values()) {
-          try {
-            em.close();
-          } catch (Exception e) {
-            //TODO Log this, but continue
-          }
-        }
+        for(EntityManager em : tidyUp.values())
+          em.close();
       }
     }
+
+    public void beforeCompletion() {
+      //This is a no-op;
+    }
   }
 }