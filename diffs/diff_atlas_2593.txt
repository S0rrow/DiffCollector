diff --git a/repository/src/main/java/org/apache/atlas/repository/typestore/GraphBackedTypeStore.java b/repository/src/main/java/org/apache/atlas/repository/typestore/GraphBackedTypeStore.java
index ee6306162..71e9028a1 100755
--- a/repository/src/main/java/org/apache/atlas/repository/typestore/GraphBackedTypeStore.java
+++ b/repository/src/main/java/org/apache/atlas/repository/typestore/GraphBackedTypeStore.java
@@ -18,29 +18,25 @@
 
 package org.apache.atlas.repository.typestore;
 
-import static org.apache.atlas.repository.graph.GraphHelper.setProperty;
-
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Set;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableSet;
+import com.google.inject.Inject;
+import com.google.inject.Singleton;
+import com.thinkaurelius.titan.core.TitanGraph;
+import com.tinkerpop.blueprints.Direction;
+import com.tinkerpop.blueprints.Edge;
+import com.tinkerpop.blueprints.Vertex;
 
 import org.apache.atlas.AtlasException;
 import org.apache.atlas.GraphTransaction;
 import org.apache.atlas.repository.Constants;
-import org.apache.atlas.repository.graph.AtlasGraphProvider;
 import org.apache.atlas.repository.graph.GraphHelper;
-import org.apache.atlas.repository.graphdb.AtlasEdge;
-import org.apache.atlas.repository.graphdb.AtlasEdgeDirection;
-import org.apache.atlas.repository.graphdb.AtlasGraph;
-import org.apache.atlas.repository.graphdb.AtlasVertex;
+import org.apache.atlas.repository.graph.GraphProvider;
 import org.apache.atlas.typesystem.TypesDef;
 import org.apache.atlas.typesystem.types.AttributeDefinition;
 import org.apache.atlas.typesystem.types.AttributeInfo;
 import org.apache.atlas.typesystem.types.ClassType;
 import org.apache.atlas.typesystem.types.DataTypes;
-import org.apache.atlas.typesystem.types.DataTypes.TypeCategory;
 import org.apache.atlas.typesystem.types.EnumType;
 import org.apache.atlas.typesystem.types.EnumTypeDefinition;
 import org.apache.atlas.typesystem.types.EnumValue;
@@ -57,10 +53,11 @@ import org.codehaus.jettison.json.JSONException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableSet;
-import com.google.inject.Inject;
-import com.google.inject.Singleton;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Set;
 
 @Singleton
 public class GraphBackedTypeStore implements ITypeStore {
@@ -70,13 +67,11 @@ public class GraphBackedTypeStore implements ITypeStore {
 
     private static Logger LOG = LoggerFactory.getLogger(GraphBackedTypeStore.class);
 
-    private final AtlasGraph graph;
-
-    private GraphHelper graphHelper = GraphHelper.getInstance();
+    private final TitanGraph titanGraph;
 
     @Inject
-    public GraphBackedTypeStore() {
-        graph = AtlasGraphProvider.getGraphInstance();
+    public GraphBackedTypeStore(GraphProvider<TitanGraph> graphProvider) {
+        titanGraph = graphProvider.get();
     }
 
     @Override
@@ -109,15 +104,20 @@ public class GraphBackedTypeStore implements ITypeStore {
         }
     }
 
+    private void addProperty(Vertex vertex, String propertyName, Object value) {
+        LOG.debug("Setting property {} = \"{}\" to vertex {}", propertyName, value, vertex);
+        vertex.setProperty(propertyName, value);
+    }
+
     private void storeInGraph(EnumType dataType) {
-        AtlasVertex AtlasVertex = createVertex(dataType.getTypeCategory(), dataType.getName(), dataType.getDescription());
+        Vertex vertex = createVertex(dataType.getTypeCategory(), dataType.getName(), dataType.getDescription());
         List<String> values = new ArrayList<>(dataType.values().size());
         for (EnumValue enumValue : dataType.values()) {
             String key = getPropertyKey(dataType.getName(), enumValue.value);
-            setProperty(AtlasVertex, key, enumValue.ordinal);
+            addProperty(vertex, key, enumValue.ordinal);
             values.add(enumValue.value);
         }
-        setProperty(AtlasVertex, getPropertyKey(dataType.getName()), values);
+        addProperty(vertex, getPropertyKey(dataType.getName()), values);
     }
 
     private String getPropertyKey(String name) {
@@ -134,13 +134,13 @@ public class GraphBackedTypeStore implements ITypeStore {
 
     private void storeInGraph(TypeSystem typeSystem, DataTypes.TypeCategory category, String typeName, String typeDescription,
             ImmutableList<AttributeInfo> attributes, ImmutableSet<String> superTypes) throws AtlasException {
-        AtlasVertex vertex = createVertex(category, typeName, typeDescription);
+        Vertex vertex = createVertex(category, typeName, typeDescription);
         List<String> attrNames = new ArrayList<>();
         if (attributes != null) {
             for (AttributeInfo attribute : attributes) {
                 String propertyKey = getPropertyKey(typeName, attribute.name);
                 try {
-                    setProperty(vertex, propertyKey, attribute.toJson());
+                    addProperty(vertex, propertyKey, attribute.toJson());
                 } catch (JSONException e) {
                     throw new StorageException(typeName, e);
                 }
@@ -148,42 +148,38 @@ public class GraphBackedTypeStore implements ITypeStore {
                 addReferencesForAttribute(typeSystem, vertex, attribute);
             }
         }
-        setProperty(vertex, getPropertyKey(typeName), attrNames);
+        addProperty(vertex, getPropertyKey(typeName), attrNames);
 
         //Add edges for hierarchy
         if (superTypes != null) {
             for (String superTypeName : superTypes) {
                 HierarchicalType superType = typeSystem.getDataType(HierarchicalType.class, superTypeName);
-                AtlasVertex superVertex = createVertex(superType.getTypeCategory(), superTypeName, superType.getDescription());
-                graphHelper.getOrCreateEdge(vertex, superVertex, SUPERTYPE_EDGE_LABEL);
+                Vertex superVertex = createVertex(superType.getTypeCategory(), superTypeName, superType.getDescription());
+                addEdge(vertex, superVertex, SUPERTYPE_EDGE_LABEL);
             }
         }
     }
 
-    private void addReferencesForAttribute(TypeSystem typeSystem, AtlasVertex vertex, AttributeInfo attribute)
+    private void addReferencesForAttribute(TypeSystem typeSystem, Vertex vertex, AttributeInfo attribute)
             throws AtlasException {
         ImmutableList<String> coreTypes = typeSystem.getCoreTypes();
         List<IDataType> attrDataTypes = new ArrayList<>();
         IDataType attrDataType = attribute.dataType();
-        String vertexTypeName = GraphHelper.getSingleValuedProperty(vertex, Constants.TYPENAME_PROPERTY_KEY, String.class);
+        String vertexTypeName = vertex.getProperty(Constants.TYPENAME_PROPERTY_KEY);
 
         switch (attrDataType.getTypeCategory()) {
         case ARRAY:
             String attrType = TypeUtils.parseAsArrayType(attrDataType.getName());
-            if(attrType != null) {
-                IDataType elementType = typeSystem.getDataType(IDataType.class, attrType);
-                attrDataTypes.add(elementType);
-            }
+            IDataType elementType = typeSystem.getDataType(IDataType.class, attrType);
+            attrDataTypes.add(elementType);
             break;
 
         case MAP:
             String[] attrTypes = TypeUtils.parseAsMapType(attrDataType.getName());
-            if(attrTypes != null && attrTypes.length > 1) {
-                IDataType keyType = typeSystem.getDataType(IDataType.class, attrTypes[0]);
-                IDataType valueType = typeSystem.getDataType(IDataType.class, attrTypes[1]);
-                attrDataTypes.add(keyType);
-                attrDataTypes.add(valueType);
-            }
+            IDataType keyType = typeSystem.getDataType(IDataType.class, attrTypes[0]);
+            IDataType valueType = typeSystem.getDataType(IDataType.class, attrTypes[1]);
+            attrDataTypes.add(keyType);
+            attrDataTypes.add(valueType);
             break;
 
         case ENUM:
@@ -202,44 +198,44 @@ public class GraphBackedTypeStore implements ITypeStore {
 
         for (IDataType attrType : attrDataTypes) {
             if (!coreTypes.contains(attrType.getName())) {
-                AtlasVertex attrVertex = createVertex(attrType.getTypeCategory(), attrType.getName(), attrType.getDescription());
+                Vertex attrVertex = createVertex(attrType.getTypeCategory(), attrType.getName(), attrType.getDescription());
                 String label = getEdgeLabel(vertexTypeName, attribute.name);
-                graphHelper.getOrCreateEdge(vertex, attrVertex, label);
+                addEdge(vertex, attrVertex, label);
             }
         }
     }
 
-    @Override
-    @GraphTransaction
-    public TypesDef restore() throws AtlasException {
-        //Get all vertices for type system
-        Iterator vertices =
-                graph.query().has(Constants.VERTEX_TYPE_PROPERTY_KEY, VERTEX_TYPE).vertices().iterator();
-
-        return getTypesFromVertices(vertices);
+    private void addEdge(Vertex fromVertex, Vertex toVertex, String label) {
+        Iterable<Edge> edges = GraphHelper.getOutGoingEdgesByLabel(fromVertex, label);
+        // ATLAS-474: Check if this type system edge already exists, to avoid duplicates.
+        for (Edge edge : edges) {
+            if (edge.getVertex(Direction.IN).equals(toVertex)) {
+                LOG.debug("Edge from {} to {} with label {} already exists", 
+                    toString(fromVertex), toString(toVertex), label);
+                return;
+            }
+        }        
+        LOG.debug("Adding edge from {} to {} with label {}", toString(fromVertex), toString(toVertex), label);
+        titanGraph.addEdge(null, fromVertex, toVertex, label);
     }
 
     @Override
     @GraphTransaction
-    public TypesDef restoreType(String typeName) throws AtlasException {
-        // Get AtlasVertex for the specified type name.
+    public TypesDef restore() throws AtlasException {
+        //Get all vertices for type system
         Iterator vertices =
-            graph.query().has(Constants.VERTEX_TYPE_PROPERTY_KEY, VERTEX_TYPE).has(Constants.TYPENAME_PROPERTY_KEY, typeName).vertices().iterator();
+                titanGraph.query().has(Constants.VERTEX_TYPE_PROPERTY_KEY, VERTEX_TYPE).vertices().iterator();
 
-        return getTypesFromVertices(vertices);
-    }
-
-    private TypesDef getTypesFromVertices(Iterator<AtlasVertex> vertices) throws AtlasException {
         ImmutableList.Builder<EnumTypeDefinition> enums = ImmutableList.builder();
         ImmutableList.Builder<StructTypeDefinition> structs = ImmutableList.builder();
         ImmutableList.Builder<HierarchicalTypeDefinition<ClassType>> classTypes = ImmutableList.builder();
         ImmutableList.Builder<HierarchicalTypeDefinition<TraitType>> traits = ImmutableList.builder();
 
         while (vertices.hasNext()) {
-            AtlasVertex vertex = vertices.next();
-            DataTypes.TypeCategory typeCategory = GraphHelper.getSingleValuedProperty(vertex, Constants.TYPE_CATEGORY_PROPERTY_KEY, TypeCategory.class);
-            String typeName = GraphHelper.getSingleValuedProperty(vertex, Constants.TYPENAME_PROPERTY_KEY, String.class);
-            String typeDescription = GraphHelper.getSingleValuedProperty(vertex, Constants.TYPEDESCRIPTION_PROPERTY_KEY, String.class);
+            Vertex vertex = (Vertex) vertices.next();
+            DataTypes.TypeCategory typeCategory = vertex.getProperty(Constants.TYPE_CATEGORY_PROPERTY_KEY);
+            String typeName = vertex.getProperty(Constants.TYPENAME_PROPERTY_KEY);
+            String typeDescription = vertex.getProperty(Constants.TYPEDESCRIPTION_PROPERTY_KEY);
             LOG.info("Restoring type {}.{}.{}", typeCategory, typeName, typeDescription);
             switch (typeCategory) {
             case ENUM:
@@ -270,40 +266,36 @@ public class GraphBackedTypeStore implements ITypeStore {
         return TypesUtil.getTypesDef(enums.build(), structs.build(), traits.build(), classTypes.build());
     }
 
-    private EnumTypeDefinition getEnumType(AtlasVertex vertex) throws AtlasException {
-        String typeName = GraphHelper.getSingleValuedProperty(vertex, Constants.TYPENAME_PROPERTY_KEY, String.class);
-        String typeDescription = GraphHelper.getSingleValuedProperty(vertex, Constants.TYPEDESCRIPTION_PROPERTY_KEY, String.class);
+    private EnumTypeDefinition getEnumType(Vertex vertex) {
+        String typeName = vertex.getProperty(Constants.TYPENAME_PROPERTY_KEY);
+        String typeDescription = vertex.getProperty(Constants.TYPEDESCRIPTION_PROPERTY_KEY);
         List<EnumValue> enumValues = new ArrayList<>();
-        List<String> values = vertex.getListProperty(getPropertyKey(typeName));
+        List<String> values = vertex.getProperty(getPropertyKey(typeName));
         for (String value : values) {
             String valueProperty = getPropertyKey(typeName, value);
-            enumValues.add(new EnumValue(value, GraphHelper.getSingleValuedProperty(vertex, valueProperty, Integer.class)));
+            enumValues.add(new EnumValue(value, vertex.<Integer>getProperty(valueProperty)));
         }
         return new EnumTypeDefinition(typeName, typeDescription, enumValues.toArray(new EnumValue[enumValues.size()]));
     }
 
-    private ImmutableSet<String> getSuperTypes(AtlasVertex vertex) {
+    private ImmutableSet<String> getSuperTypes(Vertex vertex) {
         Set<String> superTypes = new HashSet<>();
-        Iterator<AtlasEdge> edges = vertex.getEdges(AtlasEdgeDirection.OUT, SUPERTYPE_EDGE_LABEL).iterator();
+        Iterator<Edge> edges = vertex.getEdges(Direction.OUT, SUPERTYPE_EDGE_LABEL).iterator();
         while (edges.hasNext()) {
-            AtlasEdge edge = edges.next();
-            superTypes.add(edge.getInVertex().getProperty(Constants.TYPENAME_PROPERTY_KEY, String.class));
+            Edge edge = edges.next();
+            superTypes.add((String) edge.getVertex(Direction.IN).getProperty(Constants.TYPENAME_PROPERTY_KEY));
         }
         return ImmutableSet.copyOf(superTypes);
     }
 
-    private AttributeDefinition[] getAttributes(AtlasVertex vertex, String typeName) throws AtlasException {
+    private AttributeDefinition[] getAttributes(Vertex vertex, String typeName) throws AtlasException {
         List<AttributeDefinition> attributes = new ArrayList<>();
-        List<String> attrNames = vertex.getListProperty(getPropertyKey(typeName));
+        List<String> attrNames = vertex.getProperty(getPropertyKey(typeName));
         if (attrNames != null) {
             for (String attrName : attrNames) {
                 try {
                     String propertyKey = getPropertyKey(typeName, attrName);
-                    AttributeDefinition attrValue = AttributeInfo.fromJson((String) vertex.getJsonProperty(propertyKey));
-                    if (attrValue != null)
-                    {
-                        attributes.add(attrValue);
-                    }
+                    attributes.add(AttributeInfo.fromJson((String) vertex.getProperty(propertyKey)));
                 } catch (JSONException e) {
                     throw new AtlasException(e);
                 }
@@ -312,37 +304,41 @@ public class GraphBackedTypeStore implements ITypeStore {
         return attributes.toArray(new AttributeDefinition[attributes.size()]);
     }
 
+    private String toString(Vertex vertex) {
+        return PROPERTY_PREFIX + vertex.getProperty(Constants.TYPENAME_PROPERTY_KEY);
+    }
+
     /**
      * Find vertex for the given type category and name, else create new vertex
      * @param category
      * @param typeName
      * @return vertex
      */
-    AtlasVertex findVertex(DataTypes.TypeCategory category, String typeName) {
-        LOG.debug("Finding AtlasVertex for {}.{}", category, typeName);
+    Vertex findVertex(DataTypes.TypeCategory category, String typeName) {
+        LOG.debug("Finding vertex for {}.{}", category, typeName);
 
-        Iterator results = graph.query().has(Constants.TYPENAME_PROPERTY_KEY, typeName).vertices().iterator();
-        AtlasVertex vertex = null;
+        Iterator results = titanGraph.query().has(Constants.TYPENAME_PROPERTY_KEY, typeName).vertices().iterator();
+        Vertex vertex = null;
         if (results != null && results.hasNext()) {
-            //There should be just one AtlasVertex with the given typeName
-            vertex = (AtlasVertex) results.next();
+            //There should be just one vertex with the given typeName
+            vertex = (Vertex) results.next();
         }
         return vertex;
     }
 
-    private AtlasVertex createVertex(DataTypes.TypeCategory category, String typeName, String typeDescription) {
-        AtlasVertex vertex = findVertex(category, typeName);
+    private Vertex createVertex(DataTypes.TypeCategory category, String typeName, String typeDescription) {
+        Vertex vertex = findVertex(category, typeName);
         if (vertex == null) {
             LOG.debug("Adding vertex {}{}", PROPERTY_PREFIX, typeName);
-            vertex = graph.addVertex();
-            setProperty(vertex, Constants.VERTEX_TYPE_PROPERTY_KEY, VERTEX_TYPE); // Mark as type AtlasVertex
-            setProperty(vertex, Constants.TYPE_CATEGORY_PROPERTY_KEY, category);
-            setProperty(vertex, Constants.TYPENAME_PROPERTY_KEY, typeName);
+            vertex = titanGraph.addVertex(null);
+            addProperty(vertex, Constants.VERTEX_TYPE_PROPERTY_KEY, VERTEX_TYPE); // Mark as type vertex
+            addProperty(vertex, Constants.TYPE_CATEGORY_PROPERTY_KEY, category);
+            addProperty(vertex, Constants.TYPENAME_PROPERTY_KEY, typeName);
         }
         if (typeDescription != null) {
             String oldDescription = getPropertyKey(Constants.TYPEDESCRIPTION_PROPERTY_KEY);
             if (!typeDescription.equals(oldDescription)) {
-                setProperty(vertex, Constants.TYPEDESCRIPTION_PROPERTY_KEY, typeDescription);
+                addProperty(vertex, Constants.TYPEDESCRIPTION_PROPERTY_KEY, typeDescription);
             }
         } else {
             LOG.debug(" type description is null ");