diff --git a/tests/artemis-test-support/src/main/java/org/apache/activemq/transport/amqp/client/AmqpConnection.java b/tests/artemis-test-support/src/main/java/org/apache/activemq/transport/amqp/client/AmqpConnection.java
index fa44c02304..1454dd9a0a 100644
--- a/tests/artemis-test-support/src/main/java/org/apache/activemq/transport/amqp/client/AmqpConnection.java
+++ b/tests/artemis-test-support/src/main/java/org/apache/activemq/transport/amqp/client/AmqpConnection.java
@@ -16,8 +16,6 @@
  */
 package org.apache.activemq.transport.amqp.client;
 
-import static org.apache.activemq.transport.amqp.AmqpSupport.CONNECTION_OPEN_FAILED;
-
 import java.io.IOException;
 import java.net.URI;
 import java.nio.ByteBuffer;
@@ -32,6 +30,9 @@ import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicLong;
 
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
+import io.netty.util.ReferenceCountUtil;
 import org.apache.activemq.transport.InactivityIOException;
 import org.apache.activemq.transport.amqp.client.sasl.SaslAuthenticator;
 import org.apache.activemq.transport.amqp.client.transport.NettyTransportListener;
@@ -49,13 +50,10 @@ import org.apache.qpid.proton.engine.Event.Type;
 import org.apache.qpid.proton.engine.Sasl;
 import org.apache.qpid.proton.engine.Transport;
 import org.apache.qpid.proton.engine.impl.CollectorImpl;
-import org.apache.qpid.proton.engine.impl.TransportImpl;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import io.netty.buffer.ByteBuf;
-import io.netty.buffer.Unpooled;
-import io.netty.util.ReferenceCountUtil;
+import static org.apache.activemq.transport.amqp.AmqpSupport.CONNECTION_OPEN_FAILED;
 
 public class AmqpConnection extends AmqpAbstractResource<Connection> implements NettyTransportListener {
 
@@ -89,8 +87,6 @@ public class AmqpConnection extends AmqpAbstractResource<Connection> implements
    private List<Symbol> offeredCapabilities = Collections.emptyList();
    private Map<Symbol, Object> offeredProperties = Collections.emptyMap();
 
-   private volatile AmqpFrameValidator sentFrameInspector;
-   private volatile AmqpFrameValidator receivedFrameInspector;
    private AmqpConnectionListener listener;
    private SaslAuthenticator authenticator;
    private String mechanismRestriction;
@@ -104,8 +100,6 @@ public class AmqpConnection extends AmqpAbstractResource<Connection> implements
    private long connectTimeout = DEFAULT_CONNECT_TIMEOUT;
    private long closeTimeout = DEFAULT_CLOSE_TIMEOUT;
    private long drainTimeout = DEFAULT_DRAIN_TIMEOUT;
-   private boolean trace;
-   private boolean noContainerID = false;
 
    public AmqpConnection(org.apache.activemq.transport.amqp.client.transport.NettyTransport transport,
                          String username,
@@ -141,9 +135,7 @@ public class AmqpConnection extends AmqpAbstractResource<Connection> implements
          serializer.execute(new Runnable() {
             @Override
             public void run() {
-               if (!noContainerID) {
-                  getEndpoint().setContainer(safeGetContainerId());
-               }
+               getEndpoint().setContainer(safeGetContainerId());
                getEndpoint().setHostname(remoteURI.getHost());
                if (!getOfferedCapabilities().isEmpty()) {
                   getEndpoint().setOfferedCapabilities(getOfferedCapabilities().toArray(new Symbol[0]));
@@ -163,29 +155,20 @@ public class AmqpConnection extends AmqpAbstractResource<Connection> implements
                   sasl.client();
                }
                authenticator = new SaslAuthenticator(sasl, username, password, authzid, mechanismRestriction);
-               ((TransportImpl) protonTransport).setProtocolTracer(new AmqpProtocolTracer(AmqpConnection.this));
                open(future);
 
                pumpToProtonTransport(future);
             }
          });
 
-         try {
-            if (connectTimeout <= 0) {
-               future.sync();
-            } else {
-               future.sync(connectTimeout, TimeUnit.MILLISECONDS);
-               if (getEndpoint().getRemoteState() != EndpointState.ACTIVE) {
-                  throw new IOException("Failed to connect after configured timeout.");
-               }
-            }
-         } catch (Throwable e) {
-            try {
-               close();
-            } catch (Throwable ignore) {
+         if (connectTimeout <= 0) {
+            future.sync();
+         }
+         else {
+            future.sync(connectTimeout, TimeUnit.MILLISECONDS);
+            if (getEndpoint().getRemoteState() != EndpointState.ACTIVE) {
+               throw new IOException("Failed to connect after configured timeout.");
             }
-
-            throw e;
          }
       }
    }
@@ -211,12 +194,14 @@ public class AmqpConnection extends AmqpAbstractResource<Connection> implements
 
                   if (getEndpoint() != null) {
                      close(request);
-                  } else {
+                  }
+                  else {
                      request.onSuccess();
                   }
 
                   pumpToProtonTransport(request);
-               } catch (Exception e) {
+               }
+               catch (Exception e) {
                   LOG.debug("Caught exception while closing proton connection");
                }
             }
@@ -225,27 +210,25 @@ public class AmqpConnection extends AmqpAbstractResource<Connection> implements
          try {
             if (closeTimeout <= 0) {
                request.sync();
-            } else {
+            }
+            else {
                request.sync(closeTimeout, TimeUnit.MILLISECONDS);
             }
-         } catch (IOException e) {
+         }
+         catch (IOException e) {
             LOG.warn("Error caught while closing Provider: ", e.getMessage());
-         } finally {
+         }
+         finally {
             if (transport != null) {
                try {
                   transport.close();
-               } catch (Exception e) {
+               }
+               catch (Exception e) {
                   LOG.debug("Cuaght exception while closing down Transport: {}", e.getMessage());
                }
             }
 
-            serializer.shutdownNow();
-            try {
-               if (!serializer.awaitTermination(10, TimeUnit.SECONDS)) {
-                  LOG.warn("Serializer didn't shutdown cleanly");
-               }
-            } catch (InterruptedException e) {
-            }
+            serializer.shutdown();
          }
       }
    }
@@ -294,9 +277,11 @@ public class AmqpConnection extends AmqpAbstractResource<Connection> implements
             checkClosed();
             try {
                transport.send(Unpooled.wrappedBuffer(rawData));
-            } catch (IOException e) {
+            }
+            catch (IOException e) {
                fireClientException(e);
-            } finally {
+            }
+            finally {
                request.onSuccess();
             }
          }
@@ -457,30 +442,6 @@ public class AmqpConnection extends AmqpAbstractResource<Connection> implements
       return mechanismRestriction;
    }
 
-   public boolean isTraceFrames() {
-      return trace;
-   }
-
-   public void setTraceFrames(boolean trace) {
-      this.trace = trace;
-   }
-
-   public AmqpFrameValidator getSentFrameInspector() {
-      return sentFrameInspector;
-   }
-
-   public void setSentFrameInspector(AmqpFrameValidator amqpFrameInspector) {
-      this.sentFrameInspector = amqpFrameInspector;
-   }
-
-   public AmqpFrameValidator getReceivedFrameInspector() {
-      return receivedFrameInspector;
-   }
-
-   public void setReceivedFrameInspector(AmqpFrameValidator amqpFrameInspector) {
-      this.receivedFrameInspector = amqpFrameInspector;
-   }
-
    //----- Internal getters used from the child AmqpResource classes --------//
 
    ScheduledExecutorService getScheduler() {
@@ -513,11 +474,13 @@ public class AmqpConnection extends AmqpAbstractResource<Connection> implements
                outbound.writeBytes(toWrite);
                transport.send(outbound);
                protonTransport.outputConsumed();
-            } else {
+            }
+            else {
                done = true;
             }
          }
-      } catch (IOException e) {
+      }
+      catch (IOException e) {
          fireClientException(e);
          request.onFailure(e);
       }
@@ -607,10 +570,12 @@ public class AmqpConnection extends AmqpAbstractResource<Connection> implements
                               getScheduler().schedule(this, rescheduleAt, TimeUnit.MILLISECONDS);
                            }
                         }
-                     } catch (Exception e) {
+                     }
+                     catch (Exception e) {
                         try {
                            transport.close();
-                        } catch (IOException e1) {
+                        }
+                        catch (IOException e1) {
                         }
                         fireClientException(e);
                      }
@@ -626,7 +591,8 @@ public class AmqpConnection extends AmqpAbstractResource<Connection> implements
    protected void doOpenInspection() {
       try {
          getStateInspector().inspectOpenedResource(getConnection());
-      } catch (Throwable error) {
+      }
+      catch (Throwable error) {
          getStateInspector().markAsInvalid(error.getMessage());
       }
    }
@@ -635,7 +601,8 @@ public class AmqpConnection extends AmqpAbstractResource<Connection> implements
    protected void doClosedInspection() {
       try {
          getStateInspector().inspectClosedResource(getConnection());
-      } catch (Throwable error) {
+      }
+      catch (Throwable error) {
          getStateInspector().markAsInvalid(error.getMessage());
       }
    }
@@ -710,7 +677,8 @@ public class AmqpConnection extends AmqpAbstractResource<Connection> implements
          if (!authenticated) {
             processSaslAuthentication();
          }
-      } catch (Exception ex) {
+      }
+      catch (Exception ex) {
          LOG.warn("Caught Exception during update processing: {}", ex.getMessage(), ex);
          fireClientException(ex);
       }
@@ -726,7 +694,8 @@ public class AmqpConnection extends AmqpAbstractResource<Connection> implements
             authenticator = null;
             authenticated = true;
          }
-      } catch (SecurityException ex) {
+      }
+      catch (SecurityException ex) {
          failed(ex);
       }
    }
@@ -748,8 +717,4 @@ public class AmqpConnection extends AmqpAbstractResource<Connection> implements
    public String toString() {
       return "AmqpConnection { " + connectionId + " }";
    }
-
-   public void setNoContainerID() {
-      noContainerID = true;
-   }
-}
\ No newline at end of file
+}