diff --git a/client/src/main/java/org/apache/atlas/AtlasBaseClient.java b/client/src/main/java/org/apache/atlas/AtlasBaseClient.java
index 602831a2d..04a418a59 100644
--- a/client/src/main/java/org/apache/atlas/AtlasBaseClient.java
+++ b/client/src/main/java/org/apache/atlas/AtlasBaseClient.java
@@ -6,9 +6,9 @@
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
- * <p>
+ *
  * http://www.apache.org/licenses/LICENSE-2.0
- * <p>
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -21,13 +21,11 @@ import com.google.common.annotations.VisibleForTesting;
 import com.sun.jersey.api.client.Client;
 import com.sun.jersey.api.client.ClientHandlerException;
 import com.sun.jersey.api.client.ClientResponse;
-import com.sun.jersey.api.client.GenericType;
 import com.sun.jersey.api.client.WebResource;
 import com.sun.jersey.api.client.config.DefaultClientConfig;
 import com.sun.jersey.api.client.filter.HTTPBasicAuthFilter;
 import com.sun.jersey.api.json.JSONConfiguration;
 import com.sun.jersey.client.urlconnection.URLConnectionClientHandler;
-import org.apache.atlas.model.metrics.AtlasMetrics;
 import org.apache.atlas.security.SecureClientUtils;
 import org.apache.atlas.utils.AuthenticationUtil;
 import org.apache.commons.configuration.Configuration;
@@ -39,9 +37,7 @@ import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import javax.ws.rs.HttpMethod;
-import javax.ws.rs.core.Cookie;
 import javax.ws.rs.core.MediaType;
-import javax.ws.rs.core.MultivaluedMap;
 import javax.ws.rs.core.Response;
 import javax.ws.rs.core.UriBuilder;
 import java.io.IOException;
@@ -56,12 +52,10 @@ public abstract class AtlasBaseClient {
     public static final String TYPES = "types";
     public static final String ADMIN_VERSION = "admin/version";
     public static final String ADMIN_STATUS = "admin/status";
-    public static final String ADMIN_METRICS = "admin/metrics";
     public static final String HTTP_AUTHENTICATION_ENABLED = "atlas.http.authentication.enabled";
     //Admin operations
     public static final APIInfo VERSION = new APIInfo(BASE_URI + ADMIN_VERSION, HttpMethod.GET, Response.Status.OK);
     public static final APIInfo STATUS = new APIInfo(BASE_URI + ADMIN_STATUS, HttpMethod.GET, Response.Status.OK);
-    public static final APIInfo METRICS = new APIInfo(BASE_URI + ADMIN_METRICS, HttpMethod.GET, Response.Status.OK);
     static final String JSON_MEDIA_TYPE = MediaType.APPLICATION_JSON + "; charset=UTF-8";
     static final String UNKNOWN_STATUS = "Unknown status";
     static final String ATLAS_CLIENT_HA_RETRIES_KEY = "atlas.client.ha.retries";
@@ -78,10 +72,8 @@ public abstract class AtlasBaseClient {
     private String basicAuthPassword;
     private AtlasClientContext atlasClientContext;
     private boolean retryEnabled = false;
-    private Cookie cookie = null;
 
-    protected AtlasBaseClient() {
-    }
+    protected AtlasBaseClient() {}
 
     protected AtlasBaseClient(String[] baseUrl, String[] basicAuthUserNamePassword) {
         if (basicAuthUserNamePassword != null) {
@@ -108,11 +100,6 @@ public abstract class AtlasBaseClient {
         initializeState(baseUrls, ugi, doAsUser);
     }
 
-    protected AtlasBaseClient(String[] baseUrls, Cookie cookie) {
-        this.cookie = cookie;
-        initializeState(baseUrls, null, null);
-    }
-
     @VisibleForTesting
     protected AtlasBaseClient(WebResource service, Configuration configuration) {
         this.service = service;
@@ -133,10 +120,6 @@ public abstract class AtlasBaseClient {
         initializeState(configuration, baseUrl, null, null);
     }
 
-    public void setCookie(Cookie cookie) {
-        this.cookie = cookie;
-    }
-
     protected static UserGroupInformation getCurrentUGI() throws AtlasException {
         try {
             return UserGroupInformation.getCurrentUser();
@@ -168,7 +151,7 @@ public abstract class AtlasBaseClient {
         DefaultClientConfig config = new DefaultClientConfig();
         // Enable POJO mapping feature
         config.getFeatures().put(JSONConfiguration.FEATURE_POJO_MAPPING, Boolean.TRUE);
-        int readTimeout = configuration.getInt("atlas.client.readTimeoutMSecs", 60000);
+        int readTimeout = configuration.getInt("atlas.client.readTimeoutMSecs", 60000);;
         int connectTimeout = configuration.getInt("atlas.client.connectTimeoutMSecs", 60000);
         if (configuration.getBoolean(TLS_ENABLED, false)) {
             // create an SSL properties configuration if one doesn't exist.  SSLFactory expects a file, so forced
@@ -183,14 +166,14 @@ public abstract class AtlasBaseClient {
 
         final URLConnectionClientHandler handler;
 
-        if ((AuthenticationUtil.isKerberosAuthenticationEnabled())) {
-            handler = SecureClientUtils.getClientConnectionHandler(config, configuration, doAsUser, ugi);
-        } else {
+        if ((!AuthenticationUtil.isKerberosAuthenticationEnabled()) && basicAuthUser != null && basicAuthPassword != null) {
             if (configuration.getBoolean(TLS_ENABLED, false)) {
                 handler = SecureClientUtils.getUrlConnectionClientHandler();
             } else {
                 handler = new URLConnectionClientHandler();
             }
+        } else {
+            handler = SecureClientUtils.getClientConnectionHandler(config, configuration, doAsUser, ugi);
         }
         Client client = new Client(handler, config);
         client.setReadTimeout(readTimeout);
@@ -241,16 +224,16 @@ public abstract class AtlasBaseClient {
         String activeServerAddress = null;
         for (int i = 0; i < getNumberOfRetries(); i++) {
             try {
-                service = client.resource(UriBuilder.fromUri(serverInstance).build());
-                String adminStatus = getAdminStatus();
+                WebResource service = client.resource(UriBuilder.fromUri(serverInstance).build());
+                String adminStatus = getAdminStatus(service);
                 if (StringUtils.equals(adminStatus, "ACTIVE")) {
                     activeServerAddress = serverInstance;
                     break;
                 } else {
-                    LOG.info("attempt #{}: Service {} - is not active. status={}", (i + 1), serverInstance, adminStatus);
+                    LOG.info("attempt #{}: Service {} - is not active. status={}", (i+1), serverInstance, adminStatus);
                 }
             } catch (Exception e) {
-                LOG.error("attempt #{}: Service {} - could not get status", (i + 1), serverInstance, e);
+                LOG.error("attempt #{}: Service {} - could not get status", (i+1), serverInstance, e);
             }
             sleepBetweenRetries();
         }
@@ -289,56 +272,30 @@ public abstract class AtlasBaseClient {
     }
 
     protected <T> T callAPIWithResource(APIInfo api, WebResource resource, Object requestObject, Class<T> responseType) throws AtlasServiceException {
-        GenericType<T> genericType = null;
-        if (responseType != null) {
-            genericType = new GenericType<>(responseType);
-        }
-        return callAPIWithResource(api, resource, requestObject, genericType);
-    }
-
-    protected <T> T callAPIWithResource(APIInfo api, WebResource resource, Object requestObject, GenericType<T> responseType) throws AtlasServiceException {
         ClientResponse clientResponse = null;
         int i = 0;
         do {
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Calling API [ {} : {} ] {}", api.getMethod(), api.getPath(), requestObject != null ? "<== " + requestObject : "");
-            }
-
-            WebResource.Builder requestBuilder = resource.getRequestBuilder();
-
-            // Set content headers
-            requestBuilder
+            clientResponse = resource
                     .accept(JSON_MEDIA_TYPE)
-                    .type(JSON_MEDIA_TYPE);
-
-            // Set cookie if present
-            if (cookie != null) {
-                requestBuilder.cookie(cookie);
-            }
-
-            clientResponse = requestBuilder.method(api.getMethod(), ClientResponse.class, requestObject);
-
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("API {} returned status {}", resource.getURI(), clientResponse.getStatus());
-            }
+                    .type(JSON_MEDIA_TYPE)
+                    .method(api.getMethod(), ClientResponse.class, requestObject);
 
+            LOG.debug("API {} returned status {}", resource.getURI(), clientResponse.getStatus());
             if (clientResponse.getStatus() == api.getExpectedStatus().getStatusCode()) {
                 if (null == responseType) {
+                    LOG.warn("No response type specified, returning null");
                     return null;
                 }
                 try {
-                    if (responseType.getRawClass() == JSONObject.class) {
+                    if (responseType == JSONObject.class) {
                         String stringEntity = clientResponse.getEntity(String.class);
                         try {
-                            JSONObject jsonObject = new JSONObject(stringEntity);
-                            LOG.info("Response = {}", jsonObject);
-                            return (T) jsonObject;
+                            return (T) new JSONObject(stringEntity);
                         } catch (JSONException e) {
                             throw new AtlasServiceException(api, e);
                         }
                     } else {
-                        T entity = clientResponse.getEntity(responseType);
-                        return entity;
+                        return clientResponse.getEntity(responseType);
                     }
                 } catch (ClientHandlerException e) {
                     throw new AtlasServiceException(api, e);
@@ -358,7 +315,11 @@ public abstract class AtlasBaseClient {
 
     private WebResource getResource(WebResource service, String path, String... pathParams) {
         WebResource resource = service.path(path);
-        resource = appendPathParams(resource, pathParams);
+        if (pathParams != null) {
+            for (String pathParam : pathParams) {
+                resource = resource.path(pathParam);
+            }
+        }
         return resource;
     }
 
@@ -386,6 +347,10 @@ public abstract class AtlasBaseClient {
      * @throws AtlasServiceException if there is a HTTP error.
      */
     public String getAdminStatus() throws AtlasServiceException {
+        return getAdminStatus(service);
+    }
+
+    private String getAdminStatus(WebResource service) throws AtlasServiceException {
         String result = AtlasBaseClient.UNKNOWN_STATUS;
         WebResource resource = getResource(service, STATUS.getPath());
         JSONObject response = callAPIWithResource(STATUS, resource, null, JSONObject.class);
@@ -397,14 +362,6 @@ public abstract class AtlasBaseClient {
         return result;
     }
 
-    /**
-     * @return Return metrics of the service instance the client is pointing to
-     * @throws AtlasServiceException
-     */
-    public AtlasMetrics getAtlasMetrics() throws AtlasServiceException {
-        return callAPI(METRICS, AtlasMetrics.class, null);
-    }
-
     boolean isRetryableException(ClientHandlerException che) {
         return che.getCause().getClass().equals(IOException.class)
                 || che.getCause().getClass().equals(ConnectException.class);
@@ -423,14 +380,23 @@ public abstract class AtlasBaseClient {
         throw che;
     }
 
+    public boolean isRetryEnabled() {
+        return retryEnabled;
+    }
+
+    public void setRetryEnabled(boolean retryEnabled) {
+        this.retryEnabled = retryEnabled;
+    }
+
     @VisibleForTesting
     JSONObject callAPIWithRetries(APIInfo api, Object requestObject, ResourceCreator resourceCreator)
             throws AtlasServiceException {
         for (int i = 0; i < getNumberOfRetries(); i++) {
             WebResource resource = resourceCreator.createResource();
             try {
-                LOG.debug("Using resource {} for {} times", resource.getURI(), i + 1);
-                return callAPIWithResource(api, resource, requestObject, JSONObject.class);
+                LOG.debug("Using resource {} for {} times", resource.getURI(), i);
+                JSONObject result = callAPIWithResource(api, resource, requestObject);
+                return result;
             } catch (ClientHandlerException che) {
                 if (i == (getNumberOfRetries() - 1)) {
                     throw che;
@@ -443,33 +409,24 @@ public abstract class AtlasBaseClient {
         throw new AtlasServiceException(api, new RuntimeException("Could not get response after retries."));
     }
 
-    public <T> T callAPI(APIInfo api, Class<T> responseType, Object requestObject, String... params)
+    protected JSONObject callAPIWithResource(APIInfo api, WebResource resource, Object requestObject)
             throws AtlasServiceException {
-        return callAPIWithResource(api, getResource(api, params), requestObject, responseType);
+        return callAPIWithResource(api, resource, requestObject, JSONObject.class);
     }
 
-    public <T> T callAPI(APIInfo api, GenericType<T> responseType, Object requestObject, String... params)
+    protected JSONObject callAPI(final APIInfo api, Object requestObject, final String... pathParams)
             throws AtlasServiceException {
-        return callAPIWithResource(api, getResource(api, params), requestObject, responseType);
-    }
-
-
-    public <T> T callAPI(APIInfo api, Class<T> responseType, Object requestBody,
-                         MultivaluedMap<String, String> queryParams, String... params) throws AtlasServiceException {
-        WebResource resource = getResource(api, queryParams, params);
-        return callAPIWithResource(api, resource, requestBody, responseType);
-    }
-
-    public <T> T callAPI(APIInfo api, Class<T> responseType, MultivaluedMap<String, String> queryParams, String... params)
-            throws AtlasServiceException {
-        WebResource resource = getResource(api, queryParams, params);
-        return callAPIWithResource(api, resource, null, responseType);
+        return callAPIWithRetries(api, requestObject, new ResourceCreator() {
+            @Override
+            public WebResource createResource() {
+                return getResource(api, pathParams);
+            }
+        });
     }
 
-    public <T> T callAPI(APIInfo api, GenericType<T> responseType, MultivaluedMap<String, String> queryParams, String... params)
+    protected <T> T callAPI(APIInfo api, Object requestObject, Class<T> responseType, String... params)
             throws AtlasServiceException {
-        WebResource resource = getResource(api, queryParams, params);
-        return callAPIWithResource(api, resource, null, responseType);
+        return callAPIWithResource(api, getResource(api, params), requestObject, responseType);
     }
 
     protected WebResource getResource(APIInfo api, String... pathParams) {
@@ -479,38 +436,6 @@ public abstract class AtlasBaseClient {
     // Modify URL to include the path params
     private WebResource getResource(WebResource service, APIInfo api, String... pathParams) {
         WebResource resource = service.path(api.getPath());
-        resource = appendPathParams(resource, pathParams);
-        return resource;
-    }
-
-    public <T> T callAPI(APIInfo api, Class<T> responseType, MultivaluedMap<String, String> queryParams)
-            throws AtlasServiceException {
-        return callAPIWithResource(api, getResource(api, queryParams), null, responseType);
-    }
-
-    public <T> T callAPI(APIInfo api, Class<T> responseType, String queryParamKey, List<String> queryParamValues)
-            throws AtlasServiceException {
-        return callAPIWithResource(api, getResource(api, queryParamKey, queryParamValues), null, responseType);
-    }
-
-    private WebResource getResource(APIInfo api, String queryParamKey, List<String> queryParamValues) {
-        WebResource resource = service.path(api.getPath());
-        for (String queryParamValue : queryParamValues) {
-            if (StringUtils.isNotBlank(queryParamKey) && StringUtils.isNotBlank(queryParamValue)) {
-                resource = resource.queryParam(queryParamKey, queryParamValue);
-            }
-        }
-        return resource;
-    }
-
-    protected WebResource getResource(APIInfo api, MultivaluedMap<String, String> queryParams, String... pathParams) {
-        WebResource resource = service.path(api.getPath());
-        resource = appendPathParams(resource, pathParams);
-        resource = appendQueryParams(queryParams, resource);
-        return resource;
-    }
-
-    private WebResource appendPathParams(WebResource resource, String[] pathParams) {
         if (pathParams != null) {
             for (String pathParam : pathParams) {
                 resource = resource.path(pathParam);
@@ -519,31 +444,27 @@ public abstract class AtlasBaseClient {
         return resource;
     }
 
-    protected WebResource getResource(APIInfo api, MultivaluedMap<String, String> queryParams) {
+    protected <T> T callAPI(APIInfo api, Object requestObject, Class<T> responseType, Map<String, String> queryParams)
+            throws AtlasServiceException {
+        return callAPIWithResource(api, getResource(api, queryParams), requestObject, responseType);
+    }
+
+    protected WebResource getResource(APIInfo api, Map<String, String> queryParams) {
         return getResource(service, api, queryParams);
     }
 
     // Modify URL to include the query params
-    private WebResource getResource(WebResource service, APIInfo api, MultivaluedMap<String, String> queryParams) {
+    private WebResource getResource(WebResource service, APIInfo api, Map<String, String> queryParams) {
         WebResource resource = service.path(api.getPath());
-        resource = appendQueryParams(queryParams, resource);
-        return resource;
-    }
-
-    private WebResource appendQueryParams(MultivaluedMap<String, String> queryParams, WebResource resource) {
         if (null != queryParams && !queryParams.isEmpty()) {
-            for (Map.Entry<String, List<String>> entry : queryParams.entrySet()) {
-                for (String value : entry.getValue()) {
-                    if (StringUtils.isNotBlank(value)) {
-                        resource = resource.queryParam(entry.getKey(), value);
-                    }
-                }
+            for (Map.Entry<String, String> entry : queryParams.entrySet()) {
+                resource = resource.queryParam(entry.getKey(), entry.getValue());
             }
         }
         return resource;
     }
 
-    protected APIInfo updatePathParameters(APIInfo apiInfo, String... params) {
+    protected APIInfo formatPath(APIInfo apiInfo, String ... params) {
         return new APIInfo(String.format(apiInfo.getPath(), params), apiInfo.getMethod(), apiInfo.getExpectedStatus());
     }
 
@@ -563,7 +484,7 @@ public abstract class AtlasBaseClient {
         private final String path;
         private final Response.Status status;
 
-        public APIInfo(String path, String method, Response.Status status) {
+        APIInfo(String path, String method, Response.Status status) {
             this.path = path;
             this.method = method;
             this.status = status;