diff --git a/archiva-modules/plugins/maven2-repository/src/main/java/org/apache/archiva/metadata/repository/storage/maven2/Maven2RepositoryStorage.java b/archiva-modules/plugins/maven2-repository/src/main/java/org/apache/archiva/metadata/repository/storage/maven2/Maven2RepositoryStorage.java
index d99f1644b..223db1ffb 100644
--- a/archiva-modules/plugins/maven2-repository/src/main/java/org/apache/archiva/metadata/repository/storage/maven2/Maven2RepositoryStorage.java
+++ b/archiva-modules/plugins/maven2-repository/src/main/java/org/apache/archiva/metadata/repository/storage/maven2/Maven2RepositoryStorage.java
@@ -29,14 +29,9 @@
 import org.apache.archiva.metadata.repository.storage.RepositoryStorage;
 import org.apache.archiva.metadata.repository.storage.RepositoryStorageMetadataInvalidException;
 import org.apache.archiva.metadata.repository.storage.RepositoryStorageMetadataNotFoundException;
-import org.apache.archiva.proxy.common.WagonFactory;
-import org.apache.archiva.reports.RepositoryProblemFacet;
 import org.apache.maven.archiva.common.utils.VersionUtil;
 import org.apache.maven.archiva.configuration.ArchivaConfiguration;
 import org.apache.maven.archiva.configuration.ManagedRepositoryConfiguration;
-import org.apache.maven.archiva.configuration.NetworkProxyConfiguration;
-import org.apache.maven.archiva.configuration.ProxyConnectorConfiguration;
-import org.apache.maven.archiva.configuration.RemoteRepositoryConfiguration;
 import org.apache.maven.archiva.xml.XMLException;
 import org.apache.maven.model.CiManagement;
 import org.apache.maven.model.Dependency;
@@ -46,19 +41,18 @@
 import org.apache.maven.model.Model;
 import org.apache.maven.model.Organization;
 import org.apache.maven.model.Scm;
-import org.apache.maven.model.building.DefaultModelBuilderFactory;
+import org.apache.maven.model.building.DefaultModelBuilder;
 import org.apache.maven.model.building.DefaultModelBuildingRequest;
 import org.apache.maven.model.building.ModelBuilder;
 import org.apache.maven.model.building.ModelBuildingException;
 import org.apache.maven.model.building.ModelBuildingRequest;
-import org.apache.maven.model.building.ModelProblem;
-import org.apache.maven.wagon.proxy.ProxyInfo;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.springframework.stereotype.Service;
 
+import javax.annotation.PostConstruct;
+import javax.inject.Inject;
+import javax.inject.Named;
 import java.io.File;
-import java.io.FileNotFoundException;
 import java.io.FilenameFilter;
 import java.io.IOException;
 import java.util.ArrayList;
@@ -66,60 +60,48 @@
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Date;
-import java.util.HashMap;
 import java.util.List;
-import java.util.Map;
-import javax.annotation.PostConstruct;
-import javax.inject.Inject;
-import javax.inject.Named;
 
 /**
  * Maven 2 repository format storage implementation. This class currently takes parameters to indicate the repository to
  * deal with rather than being instantiated per-repository.
  * FIXME: instantiate one per repository and allocate permanently from a factory (which can be obtained within the session).
  * TODO: finish Maven 1 implementation to prove this API
- * <p/>
+ *
  * The session is passed in as an argument to obtain any necessary resources, rather than the class being instantiated
  * within the session in the context of a single managed repository's resolution needs.
- * <p/>
+ *
  * plexus.component role="org.apache.archiva.metadata.repository.storage.RepositoryStorage" role-hint="maven2"
  */
-@Service( "repositoryStorage#maven2" )
 public class Maven2RepositoryStorage
     implements RepositoryStorage
 {
     /**
-     * plexus.requirement
+     * @plexus.requirement
      */
-    private ModelBuilder builder;
+    private ModelBuilder builders;
 
     /**
      * plexus.requirement
      */
-    @Inject
-    @Named( value = "archivaConfiguration#default" )
+    @Inject @Named(value = "archivaConfiguration#default")
     private ArchivaConfiguration archivaConfiguration;
 
     /**
      * plexus.requirement role-hint="maven2"
      */
-    @Inject
-    @Named( value = "repositoryPathTranslator#maven2" )
+    @Inject @Named(value = "repositoryPathTranslator#maven2")
     private RepositoryPathTranslator pathTranslator;
 
-    @Inject
-    private WagonFactory wagonFactory;
-
     private final static Logger log = LoggerFactory.getLogger( Maven2RepositoryStorage.class );
 
     private static final String METADATA_FILENAME = "maven-metadata.xml";
 
-
     @PostConstruct
     public void initialize()
     {
-        DefaultModelBuilderFactory defaultModelBuilderFactory = new DefaultModelBuilderFactory();
-        builder = defaultModelBuilderFactory.newInstance();
+        //
+        ou ou
     }
 
     public ProjectMetadata readProjectMetadata( String repoId, String namespace, String projectId )
@@ -140,8 +122,8 @@ public ProjectVersionMetadata readProjectVersionMetadata( String repoId, String
         File basedir = new File( repositoryConfiguration.getLocation() );
         if ( VersionUtil.isSnapshot( projectVersion ) )
         {
-            File metadataFile =
-                pathTranslator.toFile( basedir, namespace, projectId, projectVersion, METADATA_FILENAME );
+            File metadataFile = pathTranslator.toFile( basedir, namespace, projectId, projectVersion,
+                                                       METADATA_FILENAME );
             try
             {
                 MavenRepositoryMetadata metadata = MavenRepositoryMetadataReader.read( metadataFile );
@@ -150,8 +132,8 @@ public ProjectVersionMetadata readProjectVersionMetadata( String repoId, String
                 MavenRepositoryMetadata.Snapshot snapshotVersion = metadata.getSnapshotVersion();
                 if ( snapshotVersion != null )
                 {
-                    artifactVersion =
-                        artifactVersion.substring( 0, artifactVersion.length() - 8 ); // remove SNAPSHOT from end
+                    artifactVersion = artifactVersion.substring( 0, artifactVersion.length() -
+                        8 ); // remove SNAPSHOT from end
                     artifactVersion =
                         artifactVersion + snapshotVersion.getTimestamp() + "-" + snapshotVersion.getBuildNumber();
                 }
@@ -174,48 +156,10 @@ public ProjectVersionMetadata readProjectVersionMetadata( String repoId, String
                 "The artifact's POM file '" + file.getAbsolutePath() + "' was missing" );
         }
 
-        List<RemoteRepositoryConfiguration> remoteRepositories = new ArrayList<RemoteRepositoryConfiguration>();
-        Map<String, ProxyInfo> networkProxies = new HashMap<String, ProxyInfo>();
-
-        Map<String, List<ProxyConnectorConfiguration>> proxyConnectorsMap = archivaConfiguration.getConfiguration().getProxyConnectorAsMap();
-        List<ProxyConnectorConfiguration> proxyConnectors = proxyConnectorsMap.get( repoId );
-        if( proxyConnectors != null )
-        {
-            for( ProxyConnectorConfiguration proxyConnector : proxyConnectors )
-            {
-                RemoteRepositoryConfiguration remoteRepoConfig = archivaConfiguration.getConfiguration().findRemoteRepositoryById(
-                    proxyConnector.getTargetRepoId() );
-
-                if( remoteRepoConfig != null )
-                {
-                    remoteRepositories.add( remoteRepoConfig );
-
-                    NetworkProxyConfiguration networkProxyConfig = archivaConfiguration.getConfiguration().getNetworkProxiesAsMap().get(
-                        proxyConnector.getProxyId() );
-
-                    if( networkProxyConfig != null )
-                    {
-                        ProxyInfo proxy = new ProxyInfo();
-                        proxy.setType( networkProxyConfig.getProtocol() );
-                        proxy.setHost( networkProxyConfig.getHost() );
-                        proxy.setPort( networkProxyConfig.getPort() );
-                        proxy.setUserName( networkProxyConfig.getUsername() );
-                        proxy.setPassword( networkProxyConfig.getPassword() );
-
-                        // key/value: remote repo ID/proxy info
-                        networkProxies.put( proxyConnector.getTargetRepoId(), proxy );
-                    }
-                }
-            }
-        }
-
         ModelBuildingRequest req = new DefaultModelBuildingRequest();
         req.setProcessPlugins( false );
         req.setPomFile( file );
-
-        // MRM-1411
-        req.setModelResolver( new RepositoryModelResolver( basedir, pathTranslator, wagonFactory, remoteRepositories,
-                                                           networkProxies, repositoryConfiguration ) );
+        req.setModelResolver( new RepositoryModelResolver( basedir, pathTranslator ) );
         req.setValidationLevel( ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL );
 
         Model model;
@@ -227,42 +171,6 @@ public ProjectVersionMetadata readProjectVersionMetadata( String repoId, String
         {
             String msg = "The artifact's POM file '" + file + "' was invalid: " + e.getMessage();
 
-            List<ModelProblem> modelProblems = e.getProblems();
-            for( ModelProblem problem : modelProblems )
-            {
-                // MRM-1411, related to MRM-1335
-                // this means that the problem was that the parent wasn't resolved!
-                if( problem.getException() instanceof FileNotFoundException && e.getModelId() != null &&
-                    !e.getModelId().equals( problem.getModelId() ) )
-                {
-                    log.warn( "The artifact's parent POM file '" + file + "' cannot be resolved. " +
-                        "Using defaults for project version metadata.." );
-
-                    ProjectVersionMetadata metadata = new ProjectVersionMetadata();
-                    metadata.setId( projectVersion );
-
-                    MavenProjectFacet facet = new MavenProjectFacet();
-                    facet.setGroupId( namespace );
-                    facet.setArtifactId( projectId );
-                    facet.setPackaging( "jar" );
-                    metadata.addFacet( facet );
-
-                    String errMsg = "Error in resolving artifact's parent POM file. " + problem.getException().getMessage();
-                    RepositoryProblemFacet repoProblemFacet = new RepositoryProblemFacet();
-                    repoProblemFacet.setRepositoryId( repoId );
-                    repoProblemFacet.setId( repoId );
-                    repoProblemFacet.setMessage( errMsg );
-                    repoProblemFacet.setProblem( errMsg );
-                    repoProblemFacet.setProject( projectId );
-                    repoProblemFacet.setVersion( projectVersion );
-                    repoProblemFacet.setNamespace( namespace );
-                    
-                    metadata.addFacet( repoProblemFacet );
-                    
-                    return metadata;
-                }
-            }
-
             throw new RepositoryStorageMetadataInvalidException( "invalid-pom", msg, e );
         }
 
@@ -319,11 +227,6 @@ public ProjectVersionMetadata readProjectVersionMetadata( String repoId, String
         return metadata;
     }
 
-    public void setWagonFactory( WagonFactory wagonFactory )
-    {
-        this.wagonFactory = wagonFactory;
-    }
-
     private List<org.apache.archiva.metadata.model.Dependency> convertDependencies( List<Dependency> dependencies )
     {
         List<org.apache.archiva.metadata.model.Dependency> l =
@@ -540,8 +443,8 @@ public ArtifactMetadata readArtifactMetadataFromPath( String repoId, String path
     private ArtifactMetadata getArtifactFromFile( String repoId, String namespace, String projectId,
                                                   String projectVersion, File file )
     {
-        ArtifactMetadata metadata =
-            pathTranslator.getArtifactFromId( repoId, namespace, projectId, projectVersion, file.getName() );
+        ArtifactMetadata metadata = pathTranslator.getArtifactFromId( repoId, namespace, projectId, projectVersion,
+                                                                      file.getName() );
 
         populateArtifactMetadataFromFile( metadata, file );
 