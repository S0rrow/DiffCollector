diff --git a/server/master/src/main/java/org/apache/accumulo/master/tableOps/TableRangeOp.java b/server/master/src/main/java/org/apache/accumulo/master/tableOps/TableRangeOp.java
index 77a66067e1..0ad2196a30 100644
--- a/server/master/src/main/java/org/apache/accumulo/master/tableOps/TableRangeOp.java
+++ b/server/master/src/main/java/org/apache/accumulo/master/tableOps/TableRangeOp.java
@@ -16,8 +16,6 @@
  */
 package org.apache.accumulo.master.tableOps;
 
-import org.apache.accumulo.core.client.Instance;
-import org.apache.accumulo.core.client.impl.Tables;
 import org.apache.accumulo.core.client.impl.thrift.TableOperation;
 import org.apache.accumulo.core.client.impl.thrift.TableOperationExceptionType;
 import org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException;
@@ -26,10 +24,9 @@ import org.apache.accumulo.core.metadata.RootTable;
 import org.apache.accumulo.core.util.TextUtil;
 import org.apache.accumulo.fate.Repo;
 import org.apache.accumulo.master.Master;
-import org.apache.accumulo.server.client.HdfsZooInstance;
 import org.apache.accumulo.server.master.state.MergeInfo;
-import org.apache.accumulo.server.master.state.MergeInfo.Operation;
 import org.apache.accumulo.server.master.state.MergeState;
+import org.apache.accumulo.server.master.state.MergeInfo.Operation;
 import org.apache.hadoop.io.Text;
 
 /**
@@ -46,17 +43,14 @@ import org.apache.hadoop.io.Text;
  * and prevent merges (writes) while they run. Merge operations will lock out some operations while they run.
  */
 class TableRangeOpWait extends MasterRepo {
-
+  
   private static final long serialVersionUID = 1L;
   private String tableId;
-  private String namespaceId;
-
+  
   public TableRangeOpWait(String tableId) {
     this.tableId = tableId;
-    Instance inst = HdfsZooInstance.getInstance();
-    this.namespaceId = Tables.getNamespace(inst, tableId);
   }
-
+  
   @Override
   public long isReady(long tid, Master env) throws Exception {
     Text tableIdText = new Text(tableId);
@@ -65,74 +59,69 @@ class TableRangeOpWait extends MasterRepo {
     }
     return 0;
   }
-
+  
   @Override
   public Repo<Master> call(long tid, Master master) throws Exception {
     Text tableIdText = new Text(tableId);
     MergeInfo mergeInfo = master.getMergeInfo(tableIdText);
     log.info("removing merge information " + mergeInfo);
     master.clearMergeState(tableIdText);
-    Utils.unreserveTableNamespace(namespaceId, tid, false);
     Utils.unreserveTable(tableId, tid, true);
     return null;
   }
-
+  
 }
 
 public class TableRangeOp extends MasterRepo {
-
+  
   private static final long serialVersionUID = 1L;
-
+  
   private String tableId;
   private byte[] startRow;
   private byte[] endRow;
   private Operation op;
-  private String namespaceId;
-
+  
   @Override
   public long isReady(long tid, Master environment) throws Exception {
-    return Utils.reserveTableNamespace(namespaceId, tid, false, true, TableOperation.MERGE)
-        + Utils.reserveTable(tableId, tid, true, true, TableOperation.MERGE);
+    return Utils.reserveTable(tableId, tid, true, true, TableOperation.MERGE);
   }
-
+  
   public TableRangeOp(MergeInfo.Operation op, String tableId, Text startRow, Text endRow) throws ThriftTableOperationException {
-
+    
     this.tableId = tableId;
     this.startRow = TextUtil.getBytes(startRow);
     this.endRow = TextUtil.getBytes(endRow);
     this.op = op;
-    Instance inst = HdfsZooInstance.getInstance();
-    this.namespaceId = Tables.getNamespace(inst, tableId);
   }
-
+  
   @Override
   public Repo<Master> call(long tid, Master env) throws Exception {
-
+    
     if (RootTable.ID.equals(tableId) && TableOperation.MERGE.equals(op)) {
       log.warn("Attempt to merge tablets for " + RootTable.NAME + " does nothing. It is not splittable.");
     }
-
+    
     Text start = startRow.length == 0 ? null : new Text(startRow);
     Text end = endRow.length == 0 ? null : new Text(endRow);
     Text tableIdText = new Text(tableId);
-
+    
     if (start != null && end != null)
       if (start.compareTo(end) >= 0)
         throw new ThriftTableOperationException(tableId, null, TableOperation.MERGE, TableOperationExceptionType.BAD_RANGE,
             "start row must be less than end row");
-
+    
     env.mustBeOnline(tableId);
-
+    
     MergeInfo info = env.getMergeInfo(tableIdText);
-
+    
     if (info.getState() == MergeState.NONE) {
       KeyExtent range = new KeyExtent(tableIdText, end, start);
       env.setMergeState(new MergeInfo(range, op), MergeState.STARTED);
     }
-
+    
     return new TableRangeOpWait(tableId);
   }
-
+  
   @Override
   public void undo(long tid, Master env) throws Exception {
     // Not sure this is a good thing to do. The Master state engine should be the one to remove it.
@@ -141,8 +130,7 @@ public class TableRangeOp extends MasterRepo {
     if (mergeInfo.getState() != MergeState.NONE)
       log.info("removing merge information " + mergeInfo);
     env.clearMergeState(tableIdText);
-    Utils.unreserveTableNamespace(namespaceId, tid, false);
     Utils.unreserveTable(tableId, tid, true);
   }
-
+  
 }