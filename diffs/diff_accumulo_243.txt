diff --git a/core/src/main/java/org/apache/accumulo/core/client/security/tokens/KerberosToken.java b/core/src/main/java/org/apache/accumulo/core/client/security/tokens/KerberosToken.java
index c122a46430..d7d2e15c91 100644
--- a/core/src/main/java/org/apache/accumulo/core/client/security/tokens/KerberosToken.java
+++ b/core/src/main/java/org/apache/accumulo/core/client/security/tokens/KerberosToken.java
@@ -18,7 +18,6 @@ package org.apache.accumulo.core.client.security.tokens;
 
 import java.io.DataInput;
 import java.io.DataOutput;
-import java.io.File;
 import java.io.IOException;
 import java.util.Collections;
 import java.util.Set;
@@ -41,7 +40,6 @@ public class KerberosToken implements AuthenticationToken {
   private static final int VERSION = 1;
 
   private String principal;
-  private File keytab;
 
   /**
    * Creates a token using the provided principal and the currently logged-in user via {@link UserGroupInformation}.
@@ -57,24 +55,6 @@ public class KerberosToken implements AuthenticationToken {
     this.principal = ugi.getUserName();
   }
 
-  /**
-   * Creates a token and logs in via {@link UserGroupInformation} using the provided principal and keytab. A key for the principal must exist in the keytab,
-   * otherwise login will fail.
-   *
-   * @param principal
-   *          The Kerberos principal
-   * @param keytab
-   *          A keytab file
-   */
-  public KerberosToken(String principal, File keytab) throws IOException {
-    Preconditions.checkNotNull(principal, "Principal was null");
-    Preconditions.checkNotNull(keytab, "Keytab was null");
-    Preconditions.checkArgument(keytab.exists() && keytab.isFile(), "Keytab was not a normal file");
-    UserGroupInformation ugi = UserGroupInformation.loginUserFromKeytabAndReturnUGI(principal, keytab.getAbsolutePath());
-    this.principal = ugi.getUserName();
-    this.keytab = keytab;
-  }
-
   /**
    * Creates a token using the login user as returned by {@link UserGroupInformation#getCurrentUser()}
    *
@@ -116,13 +96,6 @@ public class KerberosToken implements AuthenticationToken {
     return principal;
   }
 
-  /**
-   * The keytab file used to perform Kerberos login. Optional, may be null.
-   */
-  public File getKeytab() {
-    return keytab;
-  }
-
   @Override
   public void write(DataOutput out) throws IOException {
     out.writeInt(VERSION);