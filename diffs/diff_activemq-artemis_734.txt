diff --git a/artemis-server/src/main/java/org/apache/activemq/artemis/core/persistence/impl/journal/DescribeJournal.java b/artemis-server/src/main/java/org/apache/activemq/artemis/core/persistence/impl/journal/DescribeJournal.java
index 6cd417bf6c..fa1e1706fb 100644
--- a/artemis-server/src/main/java/org/apache/activemq/artemis/core/persistence/impl/journal/DescribeJournal.java
+++ b/artemis-server/src/main/java/org/apache/activemq/artemis/core/persistence/impl/journal/DescribeJournal.java
@@ -1,4 +1,4 @@
-/*
+/**
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements. See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -16,121 +16,102 @@
  */
 package org.apache.activemq.artemis.core.persistence.impl.journal;
 
-import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.ACKNOWLEDGE_CURSOR;
-import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.ACKNOWLEDGE_REF;
-import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.ADDRESS_BINDING_RECORD;
-import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.ADDRESS_SETTING_RECORD;
-import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.ADD_LARGE_MESSAGE;
-import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.ADD_LARGE_MESSAGE_PENDING;
-import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.ADD_MESSAGE;
-import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.ADD_MESSAGE_PROTOCOL;
-import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.ADD_REF;
-import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.DUPLICATE_ID;
-import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.HEURISTIC_COMPLETION;
-import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.ID_COUNTER_RECORD;
-import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.PAGE_CURSOR_COMPLETE;
-import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.PAGE_CURSOR_COUNTER_INC;
-import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.PAGE_CURSOR_COUNTER_VALUE;
-import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.PAGE_CURSOR_PENDING_COUNTER;
-import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.PAGE_TRANSACTION;
-import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.QUEUE_BINDING_RECORD;
-import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.QUEUE_STATUS_RECORD;
-import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.SECURITY_RECORD;
-import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.SET_SCHEDULED_DELIVERY_TIME;
-import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.UPDATE_DELIVERY_COUNT;
-
-import java.io.File;
+import javax.transaction.xa.Xid;
 import java.io.PrintStream;
 import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 
-import javax.transaction.xa.Xid;
-
 import org.apache.activemq.artemis.api.core.ActiveMQBuffer;
 import org.apache.activemq.artemis.api.core.ActiveMQBuffers;
 import org.apache.activemq.artemis.api.core.Message;
 import org.apache.activemq.artemis.core.config.impl.ConfigurationImpl;
-import org.apache.activemq.artemis.core.io.SequentialFileFactory;
-import org.apache.activemq.artemis.core.io.nio.NIOSequentialFileFactory;
 import org.apache.activemq.artemis.core.journal.EncodingSupport;
-import org.apache.activemq.artemis.core.journal.Journal;
 import org.apache.activemq.artemis.core.journal.PreparedTransactionInfo;
 import org.apache.activemq.artemis.core.journal.RecordInfo;
+import org.apache.activemq.artemis.core.journal.SequentialFileFactory;
 import org.apache.activemq.artemis.core.journal.TransactionFailureCallback;
 import org.apache.activemq.artemis.core.journal.impl.JournalFile;
 import org.apache.activemq.artemis.core.journal.impl.JournalImpl;
 import org.apache.activemq.artemis.core.journal.impl.JournalReaderCallback;
+import org.apache.activemq.artemis.core.journal.impl.NIOSequentialFileFactory;
 import org.apache.activemq.artemis.core.paging.cursor.impl.PageSubscriptionCounterImpl;
 import org.apache.activemq.artemis.core.paging.impl.PageTransactionInfoImpl;
 import org.apache.activemq.artemis.core.persistence.impl.journal.BatchingIDGenerator.IDCounterEncoding;
-import org.apache.activemq.artemis.core.persistence.impl.journal.codec.CursorAckRecordEncoding;
-import org.apache.activemq.artemis.core.persistence.impl.journal.codec.DeliveryCountUpdateEncoding;
-import org.apache.activemq.artemis.core.persistence.impl.journal.codec.DuplicateIDEncoding;
-import org.apache.activemq.artemis.core.persistence.impl.journal.codec.HeuristicCompletionEncoding;
-import org.apache.activemq.artemis.core.persistence.impl.journal.codec.LargeMessagePersister;
-import org.apache.activemq.artemis.core.persistence.impl.journal.codec.PageCountPendingImpl;
-import org.apache.activemq.artemis.core.persistence.impl.journal.codec.PageCountRecord;
-import org.apache.activemq.artemis.core.persistence.impl.journal.codec.PageCountRecordInc;
-import org.apache.activemq.artemis.core.persistence.impl.journal.codec.PageUpdateTXEncoding;
-import org.apache.activemq.artemis.core.persistence.impl.journal.codec.PendingLargeMessageEncoding;
-import org.apache.activemq.artemis.core.persistence.impl.journal.codec.RefEncoding;
-import org.apache.activemq.artemis.core.persistence.impl.journal.codec.ScheduledDeliveryEncoding;
+import org.apache.activemq.artemis.core.persistence.impl.journal.JournalStorageManager.AckDescribe;
+import org.apache.activemq.artemis.core.persistence.impl.journal.JournalStorageManager.CursorAckRecordEncoding;
+import org.apache.activemq.artemis.core.persistence.impl.journal.JournalStorageManager.DeliveryCountUpdateEncoding;
+import org.apache.activemq.artemis.core.persistence.impl.journal.JournalStorageManager.DuplicateIDEncoding;
+import org.apache.activemq.artemis.core.persistence.impl.journal.JournalStorageManager.HeuristicCompletionEncoding;
+import org.apache.activemq.artemis.core.persistence.impl.journal.JournalStorageManager.LargeMessageEncoding;
+import org.apache.activemq.artemis.core.persistence.impl.journal.JournalStorageManager.PageCountPendingImpl;
+import org.apache.activemq.artemis.core.persistence.impl.journal.JournalStorageManager.PageCountRecord;
+import org.apache.activemq.artemis.core.persistence.impl.journal.JournalStorageManager.PageCountRecordInc;
+import org.apache.activemq.artemis.core.persistence.impl.journal.JournalStorageManager.PageUpdateTXEncoding;
+import org.apache.activemq.artemis.core.persistence.impl.journal.JournalStorageManager.PendingLargeMessageEncoding;
+import org.apache.activemq.artemis.core.persistence.impl.journal.JournalStorageManager.RefEncoding;
+import org.apache.activemq.artemis.core.persistence.impl.journal.JournalStorageManager.ScheduledDeliveryEncoding;
 import org.apache.activemq.artemis.core.server.LargeServerMessage;
-import org.apache.activemq.artemis.spi.core.protocol.MessagePersister;
+import org.apache.activemq.artemis.core.server.ServerMessage;
+import org.apache.activemq.artemis.core.server.impl.ServerMessageImpl;
 import org.apache.activemq.artemis.utils.Base64;
 import org.apache.activemq.artemis.utils.XidCodecSupport;
 
+import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.ACKNOWLEDGE_CURSOR;
+import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.ACKNOWLEDGE_REF;
+import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.ADDRESS_SETTING_RECORD;
+import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.ADD_LARGE_MESSAGE;
+import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.ADD_LARGE_MESSAGE_PENDING;
+import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.ADD_MESSAGE;
+import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.ADD_REF;
+import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.DUPLICATE_ID;
+import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.HEURISTIC_COMPLETION;
+import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.ID_COUNTER_RECORD;
+import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.PAGE_CURSOR_COMPLETE;
+import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.PAGE_CURSOR_COUNTER_INC;
+import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.PAGE_CURSOR_COUNTER_VALUE;
+import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.PAGE_CURSOR_PENDING_COUNTER;
+import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.PAGE_TRANSACTION;
+import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.QUEUE_BINDING_RECORD;
+import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.SECURITY_RECORD;
+import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.SET_SCHEDULED_DELIVERY_TIME;
+import static org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.UPDATE_DELIVERY_COUNT;
 
 /**
  * Outputs a String description of the Journals contents.
- * <p>
+ * <p/>
  * Meant to be used in debugging.
  */
-public final class DescribeJournal {
-
-   private final List<RecordInfo> records;
-   private final List<PreparedTransactionInfo> preparedTransactions;
+public final class DescribeJournal
+{
+   public static void describeBindingsJournal(final String bindingsDir) throws Exception
+   {
 
-   public DescribeJournal(List<RecordInfo> records, List<PreparedTransactionInfo> preparedTransactions) {
-      this.records = records;
-      this.preparedTransactions = preparedTransactions;
-   }
+      SequentialFileFactory bindingsFF = new NIOSequentialFileFactory(bindingsDir, null);
 
-   public List<RecordInfo> getRecords() {
-      return records;
+      JournalImpl bindings = new JournalImpl(1024 * 1024, 2, -1, 0, bindingsFF, "activemq-bindings", "bindings", 1);
+      describeJournal(bindingsFF, bindings, bindingsDir);
    }
 
-   public List<PreparedTransactionInfo> getPreparedTransactions() {
-      return preparedTransactions;
-   }
+   public static void describeMessagesJournal(final String messagesDir) throws Exception
+   {
 
-   public static void describeBindingsJournal(final File bindingsDir) throws Exception {
-      describeBindingsJournal(bindingsDir, System.out);
-   }
-
-   public static void describeBindingsJournal(final File bindingsDir, PrintStream out) throws Exception {
-
-      SequentialFileFactory bindingsFF = new NIOSequentialFileFactory(bindingsDir, null, 1);
-
-      JournalImpl bindings = new JournalImpl(1024 * 1024, 2, 2, -1, 0, bindingsFF, "activemq-bindings", "bindings", 1);
-      describeJournal(bindingsFF, bindings, bindingsDir, out);
-   }
-
-   public static DescribeJournal describeMessagesJournal(final File messagesDir) throws Exception {
-      return describeMessagesJournal(messagesDir, System.out);
-   }
-
-   public static DescribeJournal describeMessagesJournal(final File messagesDir, PrintStream out) throws Exception {
-      SequentialFileFactory messagesFF = new NIOSequentialFileFactory(messagesDir, null, 1);
+      SequentialFileFactory messagesFF = new NIOSequentialFileFactory(messagesDir, null);
 
       // Will use only default values. The load function should adapt to anything different
       ConfigurationImpl defaultValues = new ConfigurationImpl();
 
-      JournalImpl messagesJournal = new JournalImpl(defaultValues.getJournalFileSize(), defaultValues.getJournalMinFiles(), defaultValues.getJournalPoolFiles(), 0, 0, messagesFF, "activemq-data", "amq", 1);
+      JournalImpl messagesJournal = new JournalImpl(defaultValues.getJournalFileSize(),
+                                                    defaultValues.getJournalMinFiles(),
+                                                    0,
+                                                    0,
+                                                    messagesFF,
+                                                    "activemq-data",
+                                                    "amq",
+                                                    1);
 
-      return describeJournal(messagesFF, messagesJournal, messagesDir, out);
+      describeJournal(messagesFF, messagesJournal, messagesDir);
    }
 
    /**
@@ -138,107 +119,118 @@ public final class DescribeJournal {
     * @param journal
     * @throws Exception
     */
-   private static DescribeJournal describeJournal(SequentialFileFactory fileFactory,
-                                                  JournalImpl journal,
-                                                  final File path,
-                                                  PrintStream out) throws Exception {
+   private static void describeJournal(SequentialFileFactory fileFactory, JournalImpl journal, final String path) throws Exception
+   {
       List<JournalFile> files = journal.orderFiles();
 
-      final Map<Long, PageSubscriptionCounterImpl> counters = new HashMap<>();
+      final PrintStream out = System.out;
+
+      final Map<Long, PageSubscriptionCounterImpl> counters = new HashMap<Long, PageSubscriptionCounterImpl>();
 
       out.println("Journal path: " + path);
 
-      for (JournalFile file : files) {
+      for (JournalFile file : files)
+      {
          out.println("#" + file + " (size=" + file.getFile().size() + ")");
 
-         JournalImpl.readJournalFile(fileFactory, file, new JournalReaderCallback() {
+         JournalImpl.readJournalFile(fileFactory, file, new JournalReaderCallback()
+         {
 
-            @Override
-            public void onReadUpdateRecordTX(final long transactionID, final RecordInfo recordInfo) throws Exception {
+            public void onReadUpdateRecordTX(final long transactionID, final RecordInfo recordInfo) throws Exception
+            {
                out.println("operation@UpdateTX;txID=" + transactionID + "," + describeRecord(recordInfo));
                checkRecordCounter(recordInfo);
             }
 
-            @Override
-            public void onReadUpdateRecord(final RecordInfo recordInfo) throws Exception {
+            public void onReadUpdateRecord(final RecordInfo recordInfo) throws Exception
+            {
                out.println("operation@Update;" + describeRecord(recordInfo));
                checkRecordCounter(recordInfo);
             }
 
-            @Override
-            public void onReadRollbackRecord(final long transactionID) throws Exception {
+            public void onReadRollbackRecord(final long transactionID) throws Exception
+            {
                out.println("operation@Rollback;txID=" + transactionID);
             }
 
-            @Override
-            public void onReadPrepareRecord(final long transactionID,
-                                            final byte[] extraData,
-                                            final int numberOfRecords) throws Exception {
+            public void onReadPrepareRecord(final long transactionID, final byte[] extraData, final int numberOfRecords) throws Exception
+            {
                out.println("operation@Prepare,txID=" + transactionID + ",numberOfRecords=" + numberOfRecords +
                               ",extraData=" + encode(extraData) + ", xid=" + toXid(extraData));
             }
 
-            @Override
-            public void onReadDeleteRecordTX(final long transactionID, final RecordInfo recordInfo) throws Exception {
+            public void onReadDeleteRecordTX(final long transactionID, final RecordInfo recordInfo) throws Exception
+            {
                out.println("operation@DeleteRecordTX;txID=" + transactionID + "," + describeRecord(recordInfo));
             }
 
-            @Override
-            public void onReadDeleteRecord(final long recordID) throws Exception {
+            public void onReadDeleteRecord(final long recordID) throws Exception
+            {
                out.println("operation@DeleteRecord;recordID=" + recordID);
             }
 
-            @Override
-            public void onReadCommitRecord(final long transactionID, final int numberOfRecords) throws Exception {
+            public void onReadCommitRecord(final long transactionID, final int numberOfRecords) throws Exception
+            {
                out.println("operation@Commit;txID=" + transactionID + ",numberOfRecords=" + numberOfRecords);
             }
 
-            @Override
-            public void onReadAddRecordTX(final long transactionID, final RecordInfo recordInfo) throws Exception {
+            public void onReadAddRecordTX(final long transactionID, final RecordInfo recordInfo) throws Exception
+            {
                out.println("operation@AddRecordTX;txID=" + transactionID + "," + describeRecord(recordInfo));
             }
 
-            @Override
-            public void onReadAddRecord(final RecordInfo recordInfo) throws Exception {
+            public void onReadAddRecord(final RecordInfo recordInfo) throws Exception
+            {
                out.println("operation@AddRecord;" + describeRecord(recordInfo));
             }
 
-            @Override
-            public void markAsDataFile(final JournalFile file1) {
+            public void markAsDataFile(final JournalFile file1)
+            {
             }
 
-            public void checkRecordCounter(RecordInfo info) {
-               if (info.getUserRecordType() == JournalRecordIds.PAGE_CURSOR_COUNTER_VALUE) {
-                  PageCountRecord encoding = (PageCountRecord) newObjectEncoding(info);
-                  long queueIDForCounter = encoding.getQueueID();
+            public void checkRecordCounter(RecordInfo info)
+            {
+               if (info.getUserRecordType() == JournalRecordIds.PAGE_CURSOR_COUNTER_VALUE)
+               {
+                  PageCountRecord encoding = (PageCountRecord)newObjectEncoding(info);
+                  long queueIDForCounter = encoding.queueID;
 
                   PageSubscriptionCounterImpl subsCounter = lookupCounter(counters, queueIDForCounter);
 
-                  if (subsCounter.getValue() != 0 && subsCounter.getValue() != encoding.getValue()) {
-                     out.println("####### Counter replace wrongly on queue " + queueIDForCounter + " oldValue=" + subsCounter.getValue() + " newValue=" + encoding.getValue());
+                  if (subsCounter.getValue() != 0 && subsCounter.getValue() != encoding.value)
+                  {
+                     out.println("####### Counter replace wrongly on queue " + queueIDForCounter + " oldValue=" + subsCounter.getValue() + " newValue=" + encoding.value);
                   }
 
-                  subsCounter.loadValue(info.id, encoding.getValue(), encoding.getPersistentSize());
+                  subsCounter.loadValue(info.id, encoding.value);
                   subsCounter.processReload();
-                  out.print("#Counter queue " + queueIDForCounter + " value=" + subsCounter.getValue() + " persistentSize=" + subsCounter.getPersistentSize() + ", result=" + subsCounter.getValue());
-                  if (subsCounter.getValue() < 0) {
+                  out.print("#Counter queue " + queueIDForCounter + " value=" + subsCounter.getValue() + ", result=" + subsCounter.getValue());
+                  if (subsCounter.getValue() < 0)
+                  {
                      out.println(" #NegativeCounter!!!!");
-                  } else {
+                  }
+                  else
+                  {
                      out.println();
                   }
                   out.println();
-               } else if (info.getUserRecordType() == JournalRecordIds.PAGE_CURSOR_COUNTER_INC) {
-                  PageCountRecordInc encoding = (PageCountRecordInc) newObjectEncoding(info);
-                  long queueIDForCounter = encoding.getQueueID();
+               }
+               else if (info.getUserRecordType() == JournalRecordIds.PAGE_CURSOR_COUNTER_INC)
+               {
+                  PageCountRecordInc encoding = (PageCountRecordInc)newObjectEncoding(info);
+                  long queueIDForCounter = encoding.queueID;
 
                   PageSubscriptionCounterImpl subsCounter = lookupCounter(counters, queueIDForCounter);
 
-                  subsCounter.loadInc(info.id, encoding.getValue(), encoding.getPersistentSize());
+                  subsCounter.loadInc(info.id, encoding.value);
                   subsCounter.processReload();
-                  out.print("#Counter queue " + queueIDForCounter + " value=" + subsCounter.getValue() + " persistentSize=" + subsCounter.getPersistentSize() + " increased by " + encoding.getValue());
-                  if (subsCounter.getValue() < 0) {
+                  out.print("#Counter queue " + queueIDForCounter + " value=" + subsCounter.getValue() + " increased by " + encoding.value);
+                  if (subsCounter.getValue() < 0)
+                  {
                      out.println(" #NegativeCounter!!!!");
-                  } else {
+                  }
+                  else
+                  {
                      out.println();
                   }
                   out.println();
@@ -249,134 +241,160 @@ public final class DescribeJournal {
 
       out.println();
 
-      if (counters.size() != 0) {
+      if (counters.size() != 0)
+      {
          out.println("#Counters during initial load:");
          printCounters(out, counters);
       }
 
-      return printSurvivingRecords(journal, out);
-   }
-
-   public static DescribeJournal printSurvivingRecords(Journal journal,
-                                                       PrintStream out) throws Exception {
-
-      final Map<Long, PageSubscriptionCounterImpl> counters = new HashMap<>();
       out.println("### Surviving Records Summary ###");
 
-      List<RecordInfo> records = new LinkedList<>();
-      List<PreparedTransactionInfo> preparedTransactions = new LinkedList<>();
+      List<RecordInfo> records = new LinkedList<RecordInfo>();
+      List<PreparedTransactionInfo> preparedTransactions = new LinkedList<PreparedTransactionInfo>();
 
       journal.start();
 
       final StringBuffer bufferFailingTransactions = new StringBuffer();
 
       int messageCount = 0;
-      Map<Long, Integer> messageRefCounts = new HashMap<>();
+      Map<Long, Integer> messageRefCounts = new HashMap<Long, Integer>();
       int preparedMessageCount = 0;
-      Map<Long, Integer> preparedMessageRefCount = new HashMap<>();
-      journal.load(records, preparedTransactions, new TransactionFailureCallback() {
+      Map<Long, Integer> preparedMessageRefCount = new HashMap<Long, Integer>();
+      journal.load(records, preparedTransactions, new TransactionFailureCallback()
+      {
 
-         @Override
-         public void failedTransaction(long transactionID,
-                                       List<RecordInfo> records1,
-                                       List<RecordInfo> recordsToDelete) {
+         public void failedTransaction(long transactionID, List<RecordInfo> records1, List<RecordInfo> recordsToDelete)
+         {
             bufferFailingTransactions.append("Transaction " + transactionID + " failed with these records:\n");
-            for (RecordInfo info : records1) {
+            for (RecordInfo info : records1)
+            {
                bufferFailingTransactions.append("- " + describeRecord(info) + "\n");
             }
 
-            for (RecordInfo info : recordsToDelete) {
+            for (RecordInfo info : recordsToDelete)
+            {
                bufferFailingTransactions.append("- " + describeRecord(info) + " <marked to delete>\n");
             }
 
          }
       }, false);
 
-      for (RecordInfo info : records) {
+      counters.clear();
+
+      for (RecordInfo info : records)
+      {
          PageSubscriptionCounterImpl subsCounter = null;
          long queueIDForCounter = 0;
 
          Object o = newObjectEncoding(info);
-         if (info.getUserRecordType() == JournalRecordIds.ADD_MESSAGE) {
+         if (info.getUserRecordType() == JournalRecordIds.ADD_MESSAGE)
+         {
             messageCount++;
-         } else if (info.getUserRecordType() == JournalRecordIds.ADD_REF) {
-            ReferenceDescribe ref = (ReferenceDescribe) o;
+         }
+         else if (info.getUserRecordType() == JournalRecordIds.ADD_REF)
+         {
+            ReferenceDescribe ref = (ReferenceDescribe)o;
             Integer count = messageRefCounts.get(ref.refEncoding.queueID);
-            if (count == null) {
+            if (count == null)
+            {
                count = 1;
                messageRefCounts.put(ref.refEncoding.queueID, count);
-            } else {
+            }
+            else
+            {
                messageRefCounts.put(ref.refEncoding.queueID, count + 1);
             }
-         } else if (info.getUserRecordType() == JournalRecordIds.ACKNOWLEDGE_REF) {
-            AckDescribe ref = (AckDescribe) o;
+         }
+         else if (info.getUserRecordType() == JournalRecordIds.ACKNOWLEDGE_REF)
+         {
+            AckDescribe ref = (AckDescribe)o;
             Integer count = messageRefCounts.get(ref.refEncoding.queueID);
-            if (count == null) {
+            if (count == null)
+            {
                messageRefCounts.put(ref.refEncoding.queueID, 0);
-            } else {
+            }
+            else
+            {
                messageRefCounts.put(ref.refEncoding.queueID, count - 1);
             }
-         } else if (info.getUserRecordType() == JournalRecordIds.PAGE_CURSOR_COUNTER_VALUE) {
-            PageCountRecord encoding = (PageCountRecord) o;
-            queueIDForCounter = encoding.getQueueID();
+         }
+         else if (info.getUserRecordType() == JournalRecordIds.PAGE_CURSOR_COUNTER_VALUE)
+         {
+            PageCountRecord encoding = (PageCountRecord)o;
+            queueIDForCounter = encoding.queueID;
 
             subsCounter = lookupCounter(counters, queueIDForCounter);
 
-            subsCounter.loadValue(info.id, encoding.getValue(), encoding.getPersistentSize());
+            subsCounter.loadValue(info.id, encoding.value);
             subsCounter.processReload();
-         } else if (info.getUserRecordType() == JournalRecordIds.PAGE_CURSOR_COUNTER_INC) {
-            PageCountRecordInc encoding = (PageCountRecordInc) o;
-            queueIDForCounter = encoding.getQueueID();
+         }
+         else if (info.getUserRecordType() == JournalRecordIds.PAGE_CURSOR_COUNTER_INC)
+         {
+            PageCountRecordInc encoding = (PageCountRecordInc)o;
+            queueIDForCounter = encoding.queueID;
 
             subsCounter = lookupCounter(counters, queueIDForCounter);
 
-            subsCounter.loadInc(info.id, encoding.getValue(), encoding.getPersistentSize());
+            subsCounter.loadInc(info.id, encoding.value);
             subsCounter.processReload();
          }
 
          out.println(describeRecord(info, o));
 
-         if (subsCounter != null) {
+         if (subsCounter != null)
+         {
             out.println("##SubsCounter for queue=" + queueIDForCounter + ", value=" + subsCounter.getValue());
             out.println();
          }
       }
 
-      if (counters.size() > 0) {
+      if (counters.size() > 0)
+      {
          out.println("### Page Counters");
          printCounters(out, counters);
       }
 
+
       out.println();
       out.println("### Prepared TX ###");
 
-      for (PreparedTransactionInfo tx : preparedTransactions) {
-         out.println(tx.getId());
-         for (RecordInfo info : tx.getRecords()) {
+      for (PreparedTransactionInfo tx : preparedTransactions)
+      {
+         out.println(tx.id);
+         for (RecordInfo info : tx.records)
+         {
             Object o = newObjectEncoding(info);
             out.println("- " + describeRecord(info, o));
-            if (info.getUserRecordType() == 31) {
+            if (info.getUserRecordType() == 31)
+            {
                preparedMessageCount++;
-            } else if (info.getUserRecordType() == 32) {
-               ReferenceDescribe ref = (ReferenceDescribe) o;
+            }
+            else if (info.getUserRecordType() == 32)
+            {
+               ReferenceDescribe ref = (ReferenceDescribe)o;
                Integer count = preparedMessageRefCount.get(ref.refEncoding.queueID);
-               if (count == null) {
+               if (count == null)
+               {
                   count = 1;
                   preparedMessageRefCount.put(ref.refEncoding.queueID, count);
-               } else {
+               }
+               else
+               {
                   preparedMessageRefCount.put(ref.refEncoding.queueID, count + 1);
                }
             }
          }
 
-         for (RecordInfo info : tx.getRecordsToDelete()) {
+         for (RecordInfo info : tx.recordsToDelete)
+         {
             out.println("- " + describeRecord(info) + " <marked to delete>");
          }
       }
 
       String missingTX = bufferFailingTransactions.toString();
 
-      if (missingTX.length() > 0) {
+      if (missingTX.length() > 0)
+      {
          out.println();
          out.println("### Failed Transactions (Missing commit/prepare/rollback record) ###");
       }
@@ -386,116 +404,141 @@ public final class DescribeJournal {
       out.println("### Message Counts ###");
       out.println("message count=" + messageCount);
       out.println("message reference count");
-      for (Map.Entry<Long, Integer> longIntegerEntry : messageRefCounts.entrySet()) {
+      for (Map.Entry<Long, Integer> longIntegerEntry : messageRefCounts.entrySet())
+      {
          System.out.println("queue id " + longIntegerEntry.getKey() + ",count=" + longIntegerEntry.getValue());
       }
 
       out.println("prepared message count=" + preparedMessageCount);
 
-      for (Map.Entry<Long, Integer> longIntegerEntry : preparedMessageRefCount.entrySet()) {
+      for (Map.Entry<Long, Integer> longIntegerEntry : preparedMessageRefCount.entrySet())
+      {
          System.out.println("queue id " + longIntegerEntry.getKey() + ",count=" + longIntegerEntry.getValue());
       }
 
       journal.stop();
-
-      return new DescribeJournal(records, preparedTransactions);
    }
 
-   protected static void printCounters(final PrintStream out, final Map<Long, PageSubscriptionCounterImpl> counters) {
-      for (Map.Entry<Long, PageSubscriptionCounterImpl> entry : counters.entrySet()) {
+   protected static void printCounters(final PrintStream out, final Map<Long, PageSubscriptionCounterImpl> counters)
+   {
+      for (Map.Entry<Long, PageSubscriptionCounterImpl> entry : counters.entrySet())
+      {
          out.println("Queue " + entry.getKey() + " value=" + entry.getValue().getValue());
       }
    }
 
    protected static PageSubscriptionCounterImpl lookupCounter(Map<Long, PageSubscriptionCounterImpl> counters,
-                                                              long queueIDForCounter) {
+                                                              long queueIDForCounter)
+   {
       PageSubscriptionCounterImpl subsCounter;
       subsCounter = counters.get(queueIDForCounter);
-      if (subsCounter == null) {
+      if (subsCounter == null)
+      {
          subsCounter = new PageSubscriptionCounterImpl(null, null, null, false, -1);
          counters.put(queueIDForCounter, subsCounter);
       }
       return subsCounter;
    }
 
-   private static String describeRecord(RecordInfo info) {
+   private static String describeRecord(RecordInfo info)
+   {
       return "recordID=" + info.id + ";userRecordType=" + info.userRecordType + ";isUpdate=" + info.isUpdate + ";compactCount=" + info.compactCount + ";" + newObjectEncoding(info);
    }
 
-   private static String describeRecord(RecordInfo info, Object o) {
+   private static String describeRecord(RecordInfo info, Object o)
+   {
       return "recordID=" + info.id + ";userRecordType=" + info.userRecordType + ";isUpdate=" + info.isUpdate + ";compactCount=" + info.compactCount + ";" + o;
    }
 
-   private static String encode(final byte[] data) {
+   private static String encode(final byte[] data)
+   {
       return Base64.encodeBytes(data, 0, data.length, Base64.DONT_BREAK_LINES | Base64.URL_SAFE);
    }
 
-   private static Xid toXid(final byte[] data) {
-      try {
+   private static Xid toXid(final byte[] data)
+   {
+      try
+      {
          return XidCodecSupport.decodeXid(ActiveMQBuffers.wrappedBuffer(data));
-      } catch (Exception e) {
+      }
+      catch (Exception e)
+      {
          return null;
       }
    }
 
-   public static Object newObjectEncoding(RecordInfo info) {
+   public static Object newObjectEncoding(RecordInfo info)
+   {
       return newObjectEncoding(info, null);
    }
 
-   public static Object newObjectEncoding(RecordInfo info, JournalStorageManager storageManager) {
+   public static Object newObjectEncoding(RecordInfo info, JournalStorageManager storageManager)
+   {
       ActiveMQBuffer buffer = ActiveMQBuffers.wrappedBuffer(info.data);
       long id = info.id;
       int rec = info.getUserRecordType();
 
-      switch (rec) {
-         case ADD_LARGE_MESSAGE_PENDING: {
+      switch (rec)
+      {
+         case ADD_LARGE_MESSAGE_PENDING:
+         {
             PendingLargeMessageEncoding lmEncoding = new PendingLargeMessageEncoding();
             lmEncoding.decode(buffer);
 
             return lmEncoding;
          }
-         case ADD_LARGE_MESSAGE: {
+         case ADD_LARGE_MESSAGE:
+         {
 
             LargeServerMessage largeMessage = new LargeServerMessageImpl(storageManager);
 
-            LargeMessagePersister.getInstance().decode(buffer, largeMessage);
+            LargeMessageEncoding messageEncoding = new LargeMessageEncoding(largeMessage);
+
+            messageEncoding.decode(buffer);
 
             return new MessageDescribe(largeMessage);
          }
-         case ADD_MESSAGE: {
-            return "ADD-MESSAGE is not supported any longer, use export/import";
-         }
-         case ADD_MESSAGE_PROTOCOL: {
-            Message message = MessagePersister.getInstance().decode(buffer, null);
+         case ADD_MESSAGE:
+         {
+            ServerMessage message = new ServerMessageImpl(rec, 50);
+
+            message.decode(buffer);
 
             return new MessageDescribe(message);
          }
-         case ADD_REF: {
+         case ADD_REF:
+         {
             final RefEncoding encoding = new RefEncoding();
             encoding.decode(buffer);
             return new ReferenceDescribe(encoding);
          }
 
-         case ACKNOWLEDGE_REF: {
+         case ACKNOWLEDGE_REF:
+         {
             final RefEncoding encoding = new RefEncoding();
             encoding.decode(buffer);
             return new AckDescribe(encoding);
          }
 
-         case UPDATE_DELIVERY_COUNT: {
+         case UPDATE_DELIVERY_COUNT:
+         {
             DeliveryCountUpdateEncoding updateDeliveryCount = new DeliveryCountUpdateEncoding();
             updateDeliveryCount.decode(buffer);
             return updateDeliveryCount;
          }
 
-         case PAGE_TRANSACTION: {
-            if (info.isUpdate) {
+         case PAGE_TRANSACTION:
+         {
+            if (info.isUpdate)
+            {
                PageUpdateTXEncoding pageUpdate = new PageUpdateTXEncoding();
 
                pageUpdate.decode(buffer);
 
                return pageUpdate;
-            } else {
+            }
+            else
+            {
                PageTransactionInfoImpl pageTransactionInfo = new PageTransactionInfoImpl();
 
                pageTransactionInfo.decode(buffer);
@@ -506,35 +549,40 @@ public final class DescribeJournal {
             }
          }
 
-         case SET_SCHEDULED_DELIVERY_TIME: {
+         case SET_SCHEDULED_DELIVERY_TIME:
+         {
             ScheduledDeliveryEncoding encoding = new ScheduledDeliveryEncoding();
 
             encoding.decode(buffer);
 
             return encoding;
          }
-         case DUPLICATE_ID: {
+         case DUPLICATE_ID:
+         {
             DuplicateIDEncoding encoding = new DuplicateIDEncoding();
 
             encoding.decode(buffer);
 
             return encoding;
          }
-         case HEURISTIC_COMPLETION: {
+         case HEURISTIC_COMPLETION:
+         {
             HeuristicCompletionEncoding encoding = new HeuristicCompletionEncoding();
 
             encoding.decode(buffer);
 
             return encoding;
          }
-         case ACKNOWLEDGE_CURSOR: {
+         case ACKNOWLEDGE_CURSOR:
+         {
             CursorAckRecordEncoding encoding = new CursorAckRecordEncoding();
 
             encoding.decode(buffer);
 
             return encoding;
          }
-         case PAGE_CURSOR_COUNTER_VALUE: {
+         case PAGE_CURSOR_COUNTER_VALUE:
+         {
             PageCountRecord encoding = new PageCountRecord();
 
             encoding.decode(buffer);
@@ -542,7 +590,8 @@ public final class DescribeJournal {
             return encoding;
          }
 
-         case PAGE_CURSOR_COMPLETE: {
+         case PAGE_CURSOR_COMPLETE:
+         {
             CursorAckRecordEncoding encoding = new PageCompleteCursorAckRecordEncoding();
 
             encoding.decode(buffer);
@@ -550,7 +599,8 @@ public final class DescribeJournal {
             return encoding;
          }
 
-         case PAGE_CURSOR_COUNTER_INC: {
+         case PAGE_CURSOR_COUNTER_INC:
+         {
             PageCountRecordInc encoding = new PageCountRecordInc();
 
             encoding.decode(buffer);
@@ -558,18 +608,16 @@ public final class DescribeJournal {
             return encoding;
          }
 
-         case PAGE_CURSOR_PENDING_COUNTER: {
+         case PAGE_CURSOR_PENDING_COUNTER:
+         {
             PageCountPendingImpl encoding = new PageCountPendingImpl();
             encoding.decode(buffer);
             encoding.setID(info.id);
             return encoding;
          }
 
-         case QUEUE_STATUS_RECORD:
-            return AbstractJournalStorageManager.newQueueStatusEncoding(id, buffer);
-
          case QUEUE_BINDING_RECORD:
-            return AbstractJournalStorageManager.newQueueBindingEncoding(id, buffer);
+            return JournalStorageManager.newBindingEncoding(id, buffer);
 
          case ID_COUNTER_RECORD:
             EncodingSupport idReturn = new IDCounterEncoding();
@@ -578,44 +626,46 @@ public final class DescribeJournal {
             return idReturn;
 
          case JournalRecordIds.GROUP_RECORD:
-            return AbstractJournalStorageManager.newGroupEncoding(id, buffer);
+            return JournalStorageManager.newGroupEncoding(id, buffer);
 
          case ADDRESS_SETTING_RECORD:
-            return AbstractJournalStorageManager.newAddressEncoding(id, buffer);
+            return JournalStorageManager.newAddressEncoding(id, buffer);
 
          case SECURITY_RECORD:
-            return AbstractJournalStorageManager.newSecurityRecord(id, buffer);
-
-         case ADDRESS_BINDING_RECORD:
-            return AbstractJournalStorageManager.newAddressBindingEncoding(id, buffer);
+            return JournalStorageManager.newSecurityRecord(id, buffer);
 
          default:
             return null;
       }
    }
 
-   private static final class PageCompleteCursorAckRecordEncoding extends CursorAckRecordEncoding {
+   private static final class PageCompleteCursorAckRecordEncoding extends CursorAckRecordEncoding
+   {
 
       @Override
-      public String toString() {
+      public String toString()
+      {
          return "PGComplete [queueID=" + queueID + ", position=" + position + "]";
       }
    }
 
-   public static final class MessageDescribe {
-
-      public MessageDescribe(Message msg) {
+   public static final class MessageDescribe
+   {
+      public MessageDescribe(Message msg)
+      {
          this.msg = msg;
       }
 
       Message msg;
 
       @Override
-      public String toString() {
+      public String toString()
+      {
          StringBuffer buffer = new StringBuffer();
          buffer.append(msg.isLargeMessage() ? "LargeMessage(" : "Message(");
          buffer.append("messageID=" + msg.getMessageID());
-         if (msg.getUserID() != null) {
+         if (msg.getUserID() != null)
+         {
             buffer.append(";userMessageID=" + msg.getUserID().toString());
          }
 
@@ -624,27 +674,31 @@ public final class DescribeJournal {
          return buffer.toString();
       }
 
-      public Message getMsg() {
+      public Message getMsg()
+      {
          return msg;
       }
 
    }
 
-   public static final class ReferenceDescribe {
-
+   public static final class ReferenceDescribe
+   {
       public RefEncoding refEncoding;
 
-      public ReferenceDescribe(RefEncoding refEncoding) {
+      public ReferenceDescribe(RefEncoding refEncoding)
+      {
          this.refEncoding = refEncoding;
       }
 
       @Override
-      public String toString() {
+      public String toString()
+      {
          return "AddRef;" + refEncoding;
       }
 
       @Override
-      public int hashCode() {
+      public int hashCode()
+      {
          final int prime = 31;
          int result = 1;
          result = prime * result + ((refEncoding == null) ? 0 : refEncoding.hashCode());
@@ -652,18 +706,21 @@ public final class DescribeJournal {
       }
 
       @Override
-      public boolean equals(Object obj) {
+      public boolean equals(Object obj)
+      {
          if (this == obj)
             return true;
          if (obj == null)
             return false;
          if (!(obj instanceof ReferenceDescribe))
             return false;
-         ReferenceDescribe other = (ReferenceDescribe) obj;
-         if (refEncoding == null) {
+         ReferenceDescribe other = (ReferenceDescribe)obj;
+         if (refEncoding == null)
+         {
             if (other.refEncoding != null)
                return false;
-         } else if (!refEncoding.equals(other.refEncoding))
+         }
+         else if (!refEncoding.equals(other.refEncoding))
             return false;
          return true;
       }