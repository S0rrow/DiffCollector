diff --git a/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java b/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
index 0da90c930..092650fae 100644
--- a/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
+++ b/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
@@ -44,6 +44,8 @@ import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.CopyOnWriteArraySet;
+import java.util.concurrent.locks.ReadWriteLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
 import javax.xml.XMLConstants;
 import javax.xml.transform.Source;
 import javax.xml.transform.stream.StreamSource;
@@ -51,7 +53,6 @@ import javax.xml.validation.Schema;
 import javax.xml.validation.SchemaFactory;
 
 import org.apache.aries.blueprint.NamespaceHandler;
-import org.apache.aries.blueprint.NamespaceHandler2;
 import org.apache.aries.blueprint.container.NamespaceHandlerRegistry;
 import org.apache.aries.blueprint.parser.NamespaceHandlerSet;
 import org.osgi.framework.Bundle;
@@ -91,17 +92,20 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
     private final ConcurrentHashMap<URI, CopyOnWriteArraySet<NamespaceHandler>> handlers =
                         new ConcurrentHashMap<URI, CopyOnWriteArraySet<NamespaceHandler>>();
 
-    // Access to the LRU schemas map is synchronized on itself
-    private final LRUMap<Map<URI, NamespaceHandler>, Reference<Schema>> schemas =
+    // Access to the LRU schemas map is synchronized on the lock object
+    private final Map<Map<URI, NamespaceHandler>, Reference<Schema>> schemas =
                         new LRUMap<Map<URI, NamespaceHandler>, Reference<Schema>>(10);
 
+    // Lock to protect access to the schema list
+    private final ReadWriteLock lock = new ReentrantReadWriteLock();
+
     // Access to this factory is synchronized on itself
     private final SchemaFactory schemaFactory =
                         SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
 
-    // Access to this variable is must be synchronized on itself
-    private final ArrayList<NamespaceHandlerSetImpl> sets =
-                        new ArrayList<NamespaceHandlerSetImpl>();
+    // Access to this variable is not synchronized.  The list itself is concurrent
+    private final CopyOnWriteArrayList<NamespaceHandlerSetImpl> sets =
+                        new CopyOnWriteArrayList<NamespaceHandlerSetImpl>();
 
     public NamespaceHandlerRegistryImpl(BundleContext bundleContext) {
         this.bundleContext = bundleContext;
@@ -123,13 +127,8 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
                 LOGGER.warn("Error registering NamespaceHandler", e);
             }
         } else {
-            Bundle bundle = reference.getBundle();
-            // If bundle is null, the service has already been unregistered,
-            // so do nothing in that case
-            if (bundle != null) {
-                LOGGER.warn("Error resolving NamespaceHandler, null Service obtained from tracked ServiceReference {} for bundle {}/{}",
-                        reference.toString(), reference.getBundle().getSymbolicName(), reference.getBundle().getVersion());
-            }
+            LOGGER.warn("Error resolving NamespaceHandler, null Service obtained from tracked ServiceReference {} for bundle {}, ver {}",
+                    new Object[] { reference.toString(), reference.getBundle().getSymbolicName(), reference.getBundle().getVersion() });
         }
         return handler;
     }
@@ -161,10 +160,6 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
                 h = handlers.get(uri);
             }
             if (h.add(handler)) {
-                List<NamespaceHandlerSetImpl> sets;
-                synchronized (this.sets) {
-                    sets = new ArrayList<NamespaceHandlerSetImpl>(this.sets);
-                }
                 for (NamespaceHandlerSetImpl s : sets) {
                     s.registerHandler(uri, handler);
                 }
@@ -179,10 +174,6 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
             if (!h.remove(handler)) {
                 continue;
             }
-            List<NamespaceHandlerSetImpl> sets;
-            synchronized (this.sets) {
-                sets = new ArrayList<NamespaceHandlerSetImpl>(this.sets);
-            }
             for (NamespaceHandlerSetImpl s : sets) {
                 s.unregisterHandler(uri, handler);
             }
@@ -240,11 +231,8 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
     }
     
     public NamespaceHandlerSet getNamespaceHandlers(Set<URI> uris, Bundle bundle) {
-        NamespaceHandlerSetImpl s;
-        synchronized (sets) {
-            s = new NamespaceHandlerSetImpl(uris, bundle);
-            sets.add(s);
-        }
+        NamespaceHandlerSetImpl s = new NamespaceHandlerSetImpl(uris, bundle);
+        sets.add(s);
         return s;
     }
 
@@ -254,81 +242,99 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
 
     private Schema getSchema(Map<URI, NamespaceHandler> handlers,
                              final Bundle bundle,
-                             final Properties schemaMap,
-                             Map<String, String> locations) throws IOException, SAXException {
+                             final Properties schemaMap) throws IOException, SAXException {
         if (schemaMap != null && !schemaMap.isEmpty()) {
-            return createSchema(handlers, bundle, schemaMap, locations);
+            return createSchema(handlers, bundle, schemaMap);
         }
         // Find a schema that can handle all the requested namespaces
         // If it contains additional namespaces, it should not be a problem since
         // they won't be used at all
-        Schema schema = getExistingSchema(handlers);
-        if (schema == null) {
-            // Create schema
-            schema = createSchema(handlers, bundle, schemaMap, locations);
-            cacheSchema(handlers, schema);
+        lock.readLock().lock();
+        try {
+            Schema schema = getExistingSchema(handlers);
+            if (schema != null) {
+                return schema;
+            }
+        } finally {
+            lock.readLock().unlock();
+        }
+        // Create schema
+        lock.writeLock().lock();
+        try {
+            Schema schema = getExistingSchema(handlers);
+            if (schema == null) {
+                schema = createSchema(handlers, bundle, schemaMap);
+                cacheSchema(handlers, schema);
+            }
+            return schema;
+        } finally {
+            lock.writeLock().unlock();
         }
-        return schema;
     }
 
     private Schema getExistingSchema(Map<URI, NamespaceHandler> handlers) {
-        synchronized (schemas) {
-            for (Map<URI, NamespaceHandler> key : schemas.keySet()) {
-                boolean found = true;
-                for (URI uri : handlers.keySet()) {
-                    if (!handlers.get(uri).equals(key.get(uri))) {
-                        found = false;
-                        break;
-                    }
-                }
-                if (found) {
-                    return schemas.get(key).get();
+        for (Map<URI, NamespaceHandler> key : schemas.keySet()) {
+            boolean found = true;
+            for (URI uri : handlers.keySet()) {
+                if (!handlers.get(uri).equals(key.get(uri))) {
+                    found = false;
+                    break;
                 }
             }
-            return null;
+            if (found) {
+                return schemas.get(key).get();
+            }
         }
+        return null;
     }
 
     private void removeSchemasFor(NamespaceHandler handler) {
-        synchronized (schemas) {
-            List<Map<URI, NamespaceHandler>> keys = new ArrayList<Map<URI, NamespaceHandler>>();
+        List<Map<URI, NamespaceHandler>> keys = new ArrayList<Map<URI, NamespaceHandler>>();
+        lock.readLock().lock();
+        try {
             for (Map<URI, NamespaceHandler> key : schemas.keySet()) {
                 if (key.values().contains(handler)) {
                     keys.add(key);
                 }
             }
-            for (Map<URI, NamespaceHandler> key : keys) {
-                schemas.remove(key);
+        } finally {
+            lock.readLock().unlock();
+        }
+        if (!keys.isEmpty()) {
+            lock.writeLock().lock();
+            try {
+                for (Map<URI, NamespaceHandler> key : keys) {
+                    schemas.remove(key);
+                }
+            } finally {
+                lock.writeLock().unlock();
             }
         }
     }
 
     private void cacheSchema(Map<URI, NamespaceHandler> handlers, Schema schema) {
-        synchronized (schemas) {
-            // Remove schemas that are fully included
-            for (Iterator<Map<URI, NamespaceHandler>> iterator = schemas.keySet().iterator(); iterator.hasNext();) {
-                Map<URI, NamespaceHandler> key = iterator.next();
-                boolean found = true;
-                for (URI uri : key.keySet()) {
-                    if (!key.get(uri).equals(handlers.get(uri))) {
-                        found = false;
-                        break;
-                    }
-                }
-                if (found) {
-                    iterator.remove();
+        // Remove schemas that are fully included
+        for (Iterator<Map<URI, NamespaceHandler>> iterator = schemas.keySet().iterator(); iterator.hasNext();) {
+            Map<URI, NamespaceHandler> key = iterator.next();
+            boolean found = true;
+            for (URI uri : key.keySet()) {
+                if (!key.get(uri).equals(handlers.get(uri))) {
+                    found = false;
                     break;
                 }
             }
-            // Add our new schema
-            schemas.put(handlers, new SoftReference<Schema>(schema));
+            if (found) {
+                iterator.remove();
+                break;
+            }
         }
+        // Add our new schema
+        schemas.put(handlers, new SoftReference<Schema>(schema));
     }
 
     private Schema createSchema(Map<URI, NamespaceHandler> handlers,
                                 Bundle bundle,
-                                Properties schemaMap,
-                                Map<String, String> locations) throws IOException, SAXException {
+                                Properties schemaMap) throws IOException, SAXException {
         final List<StreamSource> schemaSources = new ArrayList<StreamSource>();
         try {
             schemaSources.add(new StreamSource(getClass().getResourceAsStream("/org/apache/aries/blueprint/blueprint.xsd")));
@@ -336,12 +342,6 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
             // It will speed things as it can be reused for all other blueprint containers
             for (URI ns : handlers.keySet()) {
                 URL url = handlers.get(ns).getSchemaLocation(ns.toString());
-                if (url == null && locations != null) {
-                    String loc = locations.get(ns.toString());
-                    if (loc != null) {
-                        url = handlers.get(ns).getSchemaLocation(loc);
-                    }
-                }
                 if (url == null) {
                     LOGGER.warn("No URL is defined for schema " + ns + ". This schema will not be validated");
                 } else {
@@ -357,7 +357,7 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
                 }
             }
             synchronized (schemaFactory) {
-                schemaFactory.setResourceResolver(new BundleResourceResolver(handlers, schemaMap, bundle, schemaSources));
+                schemaFactory.setResourceResolver(new BundleResourceResolver(schemaMap, bundle, schemaSources));
                 return schemaFactory.newSchema(schemaSources.toArray(new Source[schemaSources.size()]));
             }
         } finally {
@@ -378,13 +378,11 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
     }
 
     private class BundleResourceResolver implements LSResourceResolver {
-        private final Map<URI, NamespaceHandler> handlers;
         private final Properties schemaMap;
         private final Bundle bundle;
         private final List<StreamSource> schemaSources;
 
-        public BundleResourceResolver(Map<URI, NamespaceHandler> handlers, Properties schemaMap, Bundle bundle, List<StreamSource> schemaSources) {
-            this.handlers = handlers;
+        public BundleResourceResolver(Properties schemaMap, Bundle bundle, List<StreamSource> schemaSources) {
             this.schemaMap = schemaMap;
             this.bundle = bundle;
             this.schemaSources = schemaSources;
@@ -419,45 +417,31 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
             }
             URI uri = URI.create(namespaceURI);
             Set<NamespaceHandler> hs = NamespaceHandlerRegistryImpl.this.handlers.get(uri);
-            // first check registered handlers
-            if (hs != null) {
-                for (NamespaceHandler h : hs) {
-                    URL url = h.getSchemaLocation(namespaceURI);
-                    if (url != null) {
-                        return createLSInput(publicId, systemId, url);
-                    }
-                }
+            if (hs == null) {
+                return null;
             }
-            // then check if some handler may resolve the namespace
-            for (NamespaceHandler h : handlers.values()) {
-                if (h instanceof NamespaceHandler2 && ((NamespaceHandler2) h).mayResolve(namespaceURI)) {
-                    URL url = h.getSchemaLocation(namespaceURI);
-                    if (url != null) {
-                        return createLSInput(publicId, systemId, url);
-
+            for (NamespaceHandler h : hs) {
+                URL url = h.getSchemaLocation(namespaceURI);
+                if (url != null) {
+                    // handling include-relative-path case
+                    if (systemId != null && !systemId.matches("^[a-z][-+.0-9a-z]*:.*")) {
+                        try {
+                            url = new URL(url, systemId);
+                        } catch (Exception e) {
+                            // ignore and use the given systemId
+                        }
+                    }
+                    try {
+                        final StreamSource source = new StreamSource(url.openStream(), url.toExternalForm());
+                        schemaSources.add(source);
+                        return new SourceLSInput(source, publicId, url);
+                    } catch (IOException e) {
+                        throw new RuntimeException(e);
                     }
                 }
             }
             return null;
         }
-
-        private LSInput createLSInput(String publicId, String systemId, URL url) {
-            // handling include-relative-path case
-            if (systemId != null && !systemId.matches("^[a-z][-+.0-9a-z]*:.*")) {
-                try {
-                    url = new URL(url, systemId);
-                } catch (Exception e) {
-                    // ignore and use the given systemId
-                }
-            }
-            try {
-                final StreamSource source = new StreamSource(url.openStream(), url.toExternalForm());
-                schemaSources.add(source);
-                return new SourceLSInput(source, publicId, url);
-            } catch (IOException e) {
-                throw new RuntimeException(e);
-            }
-        }
     }
 
     private class SourceLSInput implements LSInput {
@@ -541,7 +525,7 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
             this.listeners = new CopyOnWriteArrayList<Listener>();
             this.namespaces = namespaces;
             this.bundle = bundle;
-            handlers = new ConcurrentHashMap<URI, NamespaceHandler>();
+            handlers = new HashMap<URI, NamespaceHandler>();
             for (URI ns : namespaces) {
                 findCompatibleNamespaceHandler(ns);
             }
@@ -580,15 +564,11 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
         }
 
         public Schema getSchema() throws SAXException, IOException {
-            return getSchema(null);
-        }
-
-        public Schema getSchema(Map<String, String> locations) throws SAXException, IOException {
             if (!isComplete()) {
                 throw new IllegalStateException("NamespaceHandlerSet is not complete");
             }
             if (schema == null) {
-                schema = NamespaceHandlerRegistryImpl.this.getSchema(handlers, bundle, schemaMap, locations);
+                schema = NamespaceHandlerRegistryImpl.this.getSchema(handlers, bundle, schemaMap);
             }
             return schema;
         }
@@ -602,9 +582,7 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
         }
 
         public void destroy() {
-            synchronized (NamespaceHandlerRegistryImpl.this.sets) {
-                NamespaceHandlerRegistryImpl.this.sets.remove(this);
-            }
+            NamespaceHandlerRegistryImpl.this.sets.remove(this);
         }
 
         public void registerHandler(URI uri, NamespaceHandler handler) {