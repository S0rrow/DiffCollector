diff --git a/jndi/jndi-core/src/main/java/org/apache/aries/jndi/startup/Activator.java b/jndi/jndi-core/src/main/java/org/apache/aries/jndi/startup/Activator.java
index c835e951e..f9eed31d2 100644
--- a/jndi/jndi-core/src/main/java/org/apache/aries/jndi/startup/Activator.java
+++ b/jndi/jndi-core/src/main/java/org/apache/aries/jndi/startup/Activator.java
@@ -18,25 +18,39 @@
  */
 package org.apache.aries.jndi.startup;
 
-import org.apache.aries.jndi.*;
+import java.lang.reflect.Field;
+import java.util.Arrays;
+
+import javax.naming.NamingException;
+import javax.naming.spi.InitialContextFactory;
+import javax.naming.spi.InitialContextFactoryBuilder;
+import javax.naming.spi.NamingManager;
+import javax.naming.spi.ObjectFactory;
+import javax.naming.spi.ObjectFactoryBuilder;
+
+import org.apache.aries.jndi.ContextManagerServiceFactory;
+import org.apache.aries.jndi.JREInitialContextFactoryBuilder;
+import org.apache.aries.jndi.OSGiInitialContextFactoryBuilder;
+import org.apache.aries.jndi.OSGiObjectFactoryBuilder;
+import org.apache.aries.jndi.ProviderAdminServiceFactory;
+import org.apache.aries.jndi.Utils;
+import org.apache.aries.jndi.AugmenterInvokerImpl;
+import org.apache.aries.jndi.spi.EnvironmentAugmentation;
+import org.apache.aries.jndi.spi.EnvironmentUnaugmentation;
 import org.apache.aries.jndi.spi.AugmenterInvoker;
-import org.apache.aries.jndi.tracker.CachingServiceTracker;
+import org.apache.aries.jndi.tracker.ServiceTrackerCustomizers;
 import org.apache.aries.jndi.urls.URLObjectFactoryFinder;
-import org.osgi.framework.*;
+import org.osgi.framework.BundleActivator;
+import org.osgi.framework.BundleContext;
+import org.osgi.framework.ServiceReference;
 import org.osgi.framework.wiring.BundleRevision;
-import org.osgi.service.jndi.JNDIConstants;
 import org.osgi.service.jndi.JNDIContextManager;
 import org.osgi.service.jndi.JNDIProviderAdmin;
-import org.osgi.util.tracker.BundleTracker;
+import org.osgi.util.tracker.ServiceTracker;
+import org.osgi.util.tracker.ServiceTrackerCustomizer;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import javax.naming.NamingException;
-import javax.naming.spi.*;
-import java.lang.reflect.Field;
-import java.util.*;
-import java.util.concurrent.ConcurrentHashMap;
-
 /**
  * The activator for this bundle makes sure the static classes in it are
  * driven so they can do their magic stuff properly.
@@ -45,207 +59,96 @@ public class Activator implements BundleActivator {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(Activator.class.getName());
 
-    private static final String DISABLE_BUILDER = "org.apache.aries.jndi.disable.builder";
-    private static final String FORCE_BUILDER = "org.apache.aries.jndi.force.builder";
-
-    private static volatile Activator instance;
+    private static String FORCE_BUILDER = "org.apache.aries.jndi.force.builder";
 
-    private BundleTracker<ServiceCache> bundleServiceCaches;
-
-    private CachingServiceTracker<InitialContextFactoryBuilder> icfBuilders;
-    private CachingServiceTracker<URLObjectFactoryFinder> urlObjectFactoryFinders;
-    private CachingServiceTracker<InitialContextFactory> initialContextFactories;
-    private CachingServiceTracker<ObjectFactory> objectFactories;
-
-    private AugmenterInvoker augmenterInvoker;
-
-    private InitialContextFactoryBuilder originalICFBuilder;
     private OSGiInitialContextFactoryBuilder icfBuilder;
-
-    private ObjectFactoryBuilder originalOFBuilder;
+    private static InitialContextFactoryBuilder originalICFBuilder;
     private OSGiObjectFactoryBuilder ofBuilder;
-
-    public static Collection<ServiceReference<InitialContextFactoryBuilder>> getInitialContextFactoryBuilderServices() {
-        return instance.icfBuilders.getReferences();
-    }
-
-    public static Collection<ServiceReference<InitialContextFactory>> getInitialContextFactoryServices() {
-        return instance.initialContextFactories.getReferences();
-    }
-
-    public static Collection<ServiceReference<URLObjectFactoryFinder>> getURLObjectFactoryFinderServices() {
-        return instance.urlObjectFactoryFinders.getReferences();
-    }
-
-    public static ServiceReference<ObjectFactory> getUrlFactory(String scheme) {
-        return instance.objectFactories.find(scheme);
-    }
-
-    public static ServiceReference<InitialContextFactory> getInitialContextFactory(String interfaceName) {
-        return instance.initialContextFactories.find(interfaceName);
-    }
-
-    public static AugmenterInvoker getAugmenterInvoker() {
-        return instance.augmenterInvoker;
-    }
-
-    public static <T> T getService(BundleContext context, ServiceReference<T> ref) {
-        ServiceCache cache = getServiceCache(context);
-        return cache.getService(ref);
-    }
-
-    public static <T> Collection<ServiceReference<T>> getReferences(BundleContext context, Class<T> clazz) {
-        ServiceCache cache = getServiceCache(context);
-        return cache.getReferences(clazz);
-    }
-
-    public static <T> Iterable<T> getServices(BundleContext context, Class<T> clazz) {
-        ServiceCache cache = getServiceCache(context);
-        if (cache == null) {
-            cache = new ServiceCache(context);
-        }
-        Collection<ServiceReference<T>> refs = cache.getReferences(clazz);
-        return () -> Utils.map(refs.iterator(), ref -> Activator.getService(context, ref));
-    }
-
-    private static ServiceCache getServiceCache(BundleContext context) {
-        ServiceCache cache = instance.bundleServiceCaches.getObject(context.getBundle());
-        if (cache == null) {
-            cache = new ServiceCache(context);
-        }
-        return cache;
-    }
-
+    private static ObjectFactoryBuilder originalOFBuilder;
+    private static volatile ServiceTracker icfBuilders;
+    private static volatile ServiceTracker urlObjectFactoryFinders;
+    private static volatile ServiceTracker initialContextFactories;
+    private static volatile ServiceTracker objectFactories;
+    private static volatile ServiceTracker environmentAugmentors;
+    private static volatile ServiceTracker environmentUnaugmentors;
 
     public void start(BundleContext context) {
-        instance = this;
-
-        bundleServiceCaches = new BundleTracker<ServiceCache>(context, Bundle.ACTIVE, null) {
-            @Override
-            public ServiceCache addingBundle(Bundle bundle, BundleEvent event) {
-                return new ServiceCache(bundle.getBundleContext());
-            }
-            @Override
-            public void modifiedBundle(Bundle bundle, BundleEvent event, ServiceCache object) {
-            }
-            @Override
-            public void removedBundle(Bundle bundle, BundleEvent event, ServiceCache object) {
-                object.close();
-            }
-        };
-        bundleServiceCaches.open();
 
-        initialContextFactories = new CachingServiceTracker<>(context, InitialContextFactory.class, Activator::getInitialContextFactoryInterfaces);
-        objectFactories = new CachingServiceTracker<>(context, ObjectFactory.class, Activator::getObjectFactorySchemes);
-        icfBuilders = new CachingServiceTracker<>(context, InitialContextFactoryBuilder.class);
-        urlObjectFactoryFinders = new CachingServiceTracker<>(context, URLObjectFactoryFinder.class);
+        initialContextFactories = initServiceTracker(context, InitialContextFactory.class, ServiceTrackerCustomizers.ICF_CACHE);
+        objectFactories = initServiceTracker(context, ObjectFactory.class, ServiceTrackerCustomizers.URL_FACTORY_CACHE);
+        icfBuilders = initServiceTracker(context, InitialContextFactoryBuilder.class, ServiceTrackerCustomizers.LAZY);
+        urlObjectFactoryFinders = initServiceTracker(context, URLObjectFactoryFinder.class, ServiceTrackerCustomizers.LAZY);
+        environmentAugmentors = initServiceTracker(context, EnvironmentAugmentation.class, null);
+        environmentUnaugmentors = initServiceTracker(context, EnvironmentUnaugmentation.class, null);
 
-        if (!disableBuilder(context)) {
+        try {
+            OSGiInitialContextFactoryBuilder builder = new OSGiInitialContextFactoryBuilder();
             try {
-                OSGiInitialContextFactoryBuilder builder = new OSGiInitialContextFactoryBuilder();
-                try {
-                    NamingManager.setInitialContextFactoryBuilder(builder);
-                } catch (IllegalStateException e) {
-                    // use reflection to force the builder to be used
-                    if (forceBuilder(context)) {
-                        originalICFBuilder = swapStaticField(InitialContextFactoryBuilder.class, builder);
-                    }
-                }
-                icfBuilder = builder;
-            } catch (NamingException e) {
-                LOGGER.debug("A failure occurred when attempting to register an InitialContextFactoryBuilder with the NamingManager. " +
-                        "Support for calling new InitialContext() will not be enabled.", e);
+                NamingManager.setInitialContextFactoryBuilder(builder);
             } catch (IllegalStateException e) {
-                // Log the problem at info level, but only log the exception at debug level, as in many cases this is not a real issue and people
-                // don't want to see stack traces at info level when everything it working as expected.
-                String msg = "It was not possible to register an InitialContextFactoryBuilder with the NamingManager because " +
-                        "another builder called " + getClassName(InitialContextFactoryBuilder.class) + " was already registered. Support for calling new InitialContext() will not be enabled.";
-                LOGGER.info(msg);
-                LOGGER.debug(msg, e);
+                // use reflection to force the builder to be used
+                if (forceBuilder(context)) {
+                    setField(InitialContextFactoryBuilder.class, builder, true);
+                }
             }
+            icfBuilder = builder;
+        } catch (NamingException e) {
+            LOGGER.debug(Utils.MESSAGES.getMessage("unable.to.set.static.ICFB"), e);
+        } catch (IllegalStateException e) {
+            // Log the problem at info level, but only log the exception at debug level, as in many cases this is not a real issue and people
+            // don't want to see stack traces at info level when everything it working as expected.
+            LOGGER.info(Utils.MESSAGES.getMessage("unable.to.set.static.ICFB.already.exists", getClassName(InitialContextFactoryBuilder.class)));
+            LOGGER.debug(Utils.MESSAGES.getMessage("unable.to.set.static.ICFB.already.exists", getClassName(InitialContextFactoryBuilder.class)), e);
+        }
 
+        try {
+            OSGiObjectFactoryBuilder builder = new OSGiObjectFactoryBuilder(context);
             try {
-                OSGiObjectFactoryBuilder builder = new OSGiObjectFactoryBuilder(context);
-                try {
-                    NamingManager.setObjectFactoryBuilder(builder);
-                } catch (IllegalStateException e) {
-                    // use reflection to force the builder to be used
-                    if (forceBuilder(context)) {
-                        originalOFBuilder = swapStaticField(ObjectFactoryBuilder.class, builder);
-                    }
-                }
-                ofBuilder = builder;
-            } catch (NamingException e) {
-                LOGGER.info("A failure occurred when attempting to register an ObjectFactoryBuilder with the NamingManager. " +
-                        "Looking up certain objects may not work correctly.", e);
+                NamingManager.setObjectFactoryBuilder(builder);
             } catch (IllegalStateException e) {
-                // Log the problem at info level, but only log the exception at debug level, as in many cases this is not a real issue and people
-                // don't want to see stack traces at info level when everything it working as expected.
-                String msg = "It was not possible to register an ObjectFactoryBuilder with the NamingManager because " +
-                        "another builder called " + getClassName(ObjectFactoryBuilder.class) + " was already registered. Looking up certain objects may not work correctly.";
-                LOGGER.info(msg);
-                LOGGER.debug(msg, e);
+                // use reflection to force the builder to be used
+                if (forceBuilder(context)) {
+                    setField(ObjectFactoryBuilder.class, builder, true);
+                }
             }
+            ofBuilder = builder;
+        } catch (NamingException e) {
+        	LOGGER.info(Utils.MESSAGES.getMessage("unable.to.set.static.OFB"), e);
+        } catch (IllegalStateException e) {
+            // Log the problem at info level, but only log the exception at debug level, as in many cases this is not a real issue and people
+            // don't want to see stack traces at info level when everything it working as expected.
+            LOGGER.info(Utils.MESSAGES.getMessage("unable.to.set.static.OFB.already.exists", getClassName(ObjectFactoryBuilder.class)));
+            LOGGER.debug(Utils.MESSAGES.getMessage("unable.to.set.static.OFB.already.exists", getClassName(ObjectFactoryBuilder.class)), e);
         }
 
         context.registerService(JNDIProviderAdmin.class.getName(),
-                new ProviderAdminServiceFactory(context),
-                null);
+                                new ProviderAdminServiceFactory(context),
+                                null);
 
         context.registerService(InitialContextFactoryBuilder.class.getName(),
-                new JREInitialContextFactoryBuilder(),
-                null);
+                                new JREInitialContextFactoryBuilder(),
+                                null);
 
         context.registerService(JNDIContextManager.class.getName(),
-                new ContextManagerServiceFactory(),
-                null);
+                                new ContextManagerServiceFactory(),
+                                null);
 
         context.registerService(AugmenterInvoker.class.getName(),
-                augmenterInvoker = new AugmenterInvokerImpl(context),
-                null);
-    }
-
-    public void stop(BundleContext context) {
-        bundleServiceCaches.close();
-
-        /*
-         * Try to reset the InitialContextFactoryBuilder and ObjectFactoryBuilder
-         * on the NamingManager.
-         */
-        if (icfBuilder != null) {
-            swapStaticField(InitialContextFactoryBuilder.class, originalICFBuilder);
-        }
-        if (ofBuilder != null) {
-            swapStaticField(ObjectFactoryBuilder.class, originalOFBuilder);
-        }
-
-        icfBuilders.close();
-        urlObjectFactoryFinders.close();
-        objectFactories.close();
-        initialContextFactories.close();
-
-        instance = null;
+                                AugmenterInvokerImpl.getInstance(),
+                                null);
     }
 
     private boolean forceBuilder(BundleContext context) {
         String forceBuilderProp = context.getProperty(FORCE_BUILDER);
         if (forceBuilderProp != null) {
-            return !"false".equals(forceBuilderProp) && !"no".equals(forceBuilderProp);
+            return true;
         }
         BundleRevision revision = context.getBundle().adapt(BundleRevision.class);
         return !(revision.getDeclaredCapabilities(FORCE_BUILDER).isEmpty());
     }
 
-    private boolean disableBuilder(BundleContext context) {
-        String disableBuilder = context.getProperty(DISABLE_BUILDER);
-        if (disableBuilder != null) {
-            return !"false".equals(disableBuilder) && !"no".equals(disableBuilder);
-        }
-        BundleRevision revision = context.getBundle().adapt(BundleRevision.class);
-        return !(revision.getDeclaredCapabilities(DISABLE_BUILDER).isEmpty());
-    }
-
-    private String getClassName(Class<?> expectedType) {
+	private String getClassName(Class<?> expectedType)
+    {
         try {
             for (Field field : NamingManager.class.getDeclaredFields()) {
                 if (expectedType.equals(field.getType())) {
@@ -260,18 +163,52 @@ public class Activator implements BundleActivator {
         return "";
     }
 
+    private ServiceTracker initServiceTracker(BundleContext context,
+                                              Class<?> type, ServiceTrackerCustomizer custom)
+    {
+        ServiceTracker t = new ServiceTracker(context, type.getName(), custom);
+        t.open();
+        return t;
+    }
+
+    public void stop(BundleContext context) {
+        /*
+         * Try to reset the InitialContextFactoryBuilder and ObjectFactoryBuilder
+         * on the NamingManager.
+         */
+        if (icfBuilder != null) {
+            setField(InitialContextFactoryBuilder.class, originalICFBuilder, false);
+        }
+        if (ofBuilder != null) {
+            setField(ObjectFactoryBuilder.class, originalOFBuilder, false);
+        }
+
+        icfBuilders.close();
+        urlObjectFactoryFinders.close();
+        objectFactories.close();
+        initialContextFactories.close();
+        environmentAugmentors.close();
+        environmentUnaugmentors.close();
+    }
+
     /*
      * There are no public API to reset the InitialContextFactoryBuilder or
      * ObjectFactoryBuilder on the NamingManager so try to use reflection.
      */
-    private static <T> T swapStaticField(Class<T> expectedType, Object value) throws IllegalStateException {
+    private static void setField(Class<?> expectedType, Object value, boolean saveOriginal) throws IllegalStateException {
         try {
             for (Field field : NamingManager.class.getDeclaredFields()) {
                 if (expectedType.equals(field.getType())) {
                     field.setAccessible(true);
-                    T original = expectedType.cast(field.get(null));
+                    if (saveOriginal) {
+                        if (expectedType.equals(InitialContextFactoryBuilder.class)) {
+                            originalICFBuilder = (InitialContextFactoryBuilder) field.get(null);
+                        } else {
+                            originalOFBuilder = (ObjectFactoryBuilder) field.get(null);
+                        }
+                    }
+
                     field.set(null, value);
-                    return original;
                 }
             }
         } catch (Throwable t) {
@@ -279,68 +216,47 @@ public class Activator implements BundleActivator {
             LOGGER.debug("Error setting field.", t);
             throw new IllegalStateException(t);
         }
-        throw new IllegalStateException("Error setting field: no field found for type " + expectedType);
     }
 
-    private static List<String> getInitialContextFactoryInterfaces(ServiceReference<InitialContextFactory> ref) {
-        String[] interfaces = (String[]) ref.getProperty(Constants.OBJECTCLASS);
-        List<String> resultList = new ArrayList<>();
-        for (String interfaceName : interfaces) {
-            if (!InitialContextFactory.class.getName().equals(interfaceName)) {
-                resultList.add(interfaceName);
-            }
-        }
-
-        return resultList;
-    }
+    public static ServiceReference[] getInitialContextFactoryBuilderServices()
+    {
+        ServiceReference[] refs = icfBuilders.getServiceReferences();
 
-    private static List<String> getObjectFactorySchemes(ServiceReference<ObjectFactory> reference) {
-        Object scheme = reference.getProperty(JNDIConstants.JNDI_URLSCHEME);
-        List<String> result;
-
-        if (scheme instanceof String) {
-            result = new ArrayList<>();
-            result.add((String) scheme);
-        } else if (scheme instanceof String[]) {
-            result = Arrays.asList((String[]) scheme);
-        } else {
-            result = Collections.emptyList();
+        if (refs != null) {
+            Arrays.sort(refs, Utils.SERVICE_REFERENCE_COMPARATOR);
         }
 
-        return result;
+        return refs;
     }
 
-    private static class ServiceCache {
-
-        private final BundleContext context;
-        private final Map<ServiceReference<?>, Object> cache = new ConcurrentHashMap<>();
-        private final Map<Class<?>, CachingServiceTracker<?>> trackers = new ConcurrentHashMap<>();
-
-        ServiceCache(BundleContext context) {
-            this.context = context;
-        }
+    public static ServiceReference[] getInitialContextFactoryServices()
+    {
+        ServiceReference[] refs = initialContextFactories.getServiceReferences();
 
-        @SuppressWarnings("unchecked")
-        <T> T getService(ServiceReference<T> ref) {
-            return (T) cache.computeIfAbsent(ref, this::doGetService);
+        if (refs != null) {
+            Arrays.sort(refs, Utils.SERVICE_REFERENCE_COMPARATOR);
         }
 
-        @SuppressWarnings("unchecked")
-        <T> Collection<ServiceReference<T>> getReferences(Class<T> clazz) {
-            return (List) trackers.computeIfAbsent(clazz, c -> new CachingServiceTracker<>(context, c)).getReferences();
-        }
+        return refs;
+    }
 
-        void close() {
-            cache.forEach(this::doUngetService);
-        }
+    public static ServiceReference[] getURLObectFactoryFinderServices()
+    {
+        ServiceReference[] refs = urlObjectFactoryFinders.getServiceReferences();
 
-        Object doGetService(ServiceReference<?> ref) {
-            return Utils.doPrivileged(() -> context.getService(ref));
+        if (refs != null) {
+            Arrays.sort(refs, Utils.SERVICE_REFERENCE_COMPARATOR);
         }
+        return refs;
+    }
 
-        void doUngetService(ServiceReference<?> ref, Object svc) {
-            Utils.doPrivileged(() -> context.ungetService(ref));
-        }
+    public static Object[] getEnvironmentAugmentors()
+    {
+        return environmentAugmentors.getServices();
     }
 
+    public static Object[] getEnvironmentUnaugmentors()
+    {
+        return environmentUnaugmentors.getServices();
+    }
 }