diff --git a/webapp/src/main/java/org/apache/atlas/web/resources/BaseService.java b/webapp/src/main/java/org/apache/atlas/web/resources/BaseService.java
index 83bbd22ea..3982df8f7 100644
--- a/webapp/src/main/java/org/apache/atlas/web/resources/BaseService.java
+++ b/webapp/src/main/java/org/apache/atlas/web/resources/BaseService.java
@@ -22,7 +22,6 @@ import com.google.gson.Gson;
 import com.google.gson.JsonSyntaxException;
 import org.apache.atlas.catalog.*;
 import org.apache.atlas.catalog.exception.*;
-import org.apache.atlas.repository.graph.TitanGraphProvider;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -44,7 +43,6 @@ public abstract class BaseService {
     protected Result getResource(ResourceProvider provider, Request request)
             throws ResourceNotFoundException {
 
-        initializeGraphTransaction();
         try {
             return provider.getResourceById(request);
         } catch (RuntimeException e) {
@@ -55,7 +53,6 @@ public abstract class BaseService {
     protected Result getResources(ResourceProvider provider, Request request)
             throws ResourceNotFoundException, InvalidQueryException {
 
-        initializeGraphTransaction();
         try {
             return provider.getResources(request);
         } catch (RuntimeException e) {
@@ -64,7 +61,6 @@ public abstract class BaseService {
     }
 
     protected void createResource(ResourceProvider provider, Request request) throws CatalogException {
-        initializeGraphTransaction();
         try {
             provider.createResource(request);
         } catch (RuntimeException e) {
@@ -72,18 +68,8 @@ public abstract class BaseService {
         }
     }
 
-    protected void deleteResource(ResourceProvider provider, Request request) throws CatalogException {
-        initializeGraphTransaction();
-        try {
-            provider.deleteResourceById(request);
-
-        } catch (RuntimeException e) {
-            throw wrapRuntimeException(e);
-        }
-    }
-
     protected Collection<String> createResources(ResourceProvider provider, Request request) throws CatalogException {
-        initializeGraphTransaction();
+
         try {
             return provider.createResources(request);
         } catch (RuntimeException e) {
@@ -110,6 +96,10 @@ public abstract class BaseService {
         return properties;
     }
 
+    private RuntimeException wrapRuntimeException(RuntimeException e) {
+        return e instanceof CatalogRuntimeException ? e : new CatalogRuntimeException(e);
+    }
+
     protected String decode(String s) throws CatalogException {
         try {
             return s == null ? null : URLDecoder.decode(s, "UTF-8");
@@ -118,16 +108,6 @@ public abstract class BaseService {
         }
     }
 
-    private RuntimeException wrapRuntimeException(RuntimeException e) {
-        return e instanceof CatalogRuntimeException ? e : new CatalogRuntimeException(e);
-    }
-
-    //todo: abstract via AtlasTypeSystem
-    // ensure that the thread wasn't re-pooled with an existing transaction
-    private void initializeGraphTransaction() {
-        TitanGraphProvider.getGraphInstance().rollback();
-    }
-
     @XmlRootElement
     // the name of this class is used as the collection name in the returned json when returning a collection
     public static class Results {