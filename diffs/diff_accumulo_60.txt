diff --git a/src/server/src/main/java/org/apache/accumulo/server/master/LiveTServerSet.java b/src/server/src/main/java/org/apache/accumulo/server/master/LiveTServerSet.java
index 6b60ead952..e490f84441 100644
--- a/src/server/src/main/java/org/apache/accumulo/server/master/LiveTServerSet.java
+++ b/src/server/src/main/java/org/apache/accumulo/server/master/LiveTServerSet.java
@@ -41,7 +41,6 @@ import org.apache.accumulo.server.conf.ServerConfiguration;
 import org.apache.accumulo.server.master.state.TServerInstance;
 import org.apache.accumulo.server.security.SecurityConstants;
 import org.apache.accumulo.server.util.AddressUtil;
-import org.apache.accumulo.server.util.Halt;
 import org.apache.accumulo.server.util.time.SimpleTimer;
 import org.apache.accumulo.server.zookeeper.ZooCache;
 import org.apache.accumulo.server.zookeeper.ZooLock;
@@ -52,7 +51,6 @@ import org.apache.thrift.TException;
 import org.apache.zookeeper.KeeperException;
 import org.apache.zookeeper.WatchedEvent;
 import org.apache.zookeeper.Watcher;
-import org.apache.zookeeper.data.Stat;
 
 public class LiveTServerSet implements Watcher {
   
@@ -69,123 +67,76 @@ public class LiveTServerSet implements Watcher {
   public class TServerConnection {
     private final InetSocketAddress address;
     
+    TabletClientService.Iface client = null;
+    
     public TServerConnection(InetSocketAddress addr) throws TException {
       address = addr;
+      try {
+        client = ThriftUtil.getClient(new TabletClientService.Client.Factory(), address, ServerConfiguration.getSystemConfiguration());
+      } catch (Exception ex) {
+        log.error(ex, ex);
+      }
     }
     
     private String lockString(ZooLock mlock) {
       return mlock.getLockID().serialize(ZooUtil.getRoot(instance) + Constants.ZMASTER_LOCK);
     }
     
-    public void assignTablet(ZooLock lock, KeyExtent extent) throws TException {
-      TabletClientService.Iface client = ThriftUtil.getClient(new TabletClientService.Client.Factory(), address, ServerConfiguration.getSystemConfiguration());
-      try {
-        client.loadTablet(null, SecurityConstants.getSystemCredentials(), lockString(lock), extent.toThrift());
-      } finally {
+    synchronized public void close() {
+      if (client != null) {
         ThriftUtil.returnClient(client);
+        client = null;
       }
     }
     
-    public void unloadTablet(ZooLock lock, KeyExtent extent, boolean save) throws TException {
-      TabletClientService.Iface client = ThriftUtil.getClient(new TabletClientService.Client.Factory(), address, ServerConfiguration.getSystemConfiguration());
-      try {
-        client.unloadTablet(null, SecurityConstants.getSystemCredentials(), lockString(lock), extent.toThrift(), save);
-      } finally {
-        ThriftUtil.returnClient(client);
-      }
+    synchronized public void assignTablet(ZooLock lock, KeyExtent extent) throws TException {
+      client.loadTablet(null, SecurityConstants.getSystemCredentials(), lockString(lock), extent.toThrift());
     }
     
-    public TabletServerStatus getTableMap() throws TException, ThriftSecurityException {
-      TabletClientService.Iface client = ThriftUtil.getClient(new TabletClientService.Client.Factory(), address, ServerConfiguration.getSystemConfiguration());
-      try {
-        return client.getTabletServerStatus(null, SecurityConstants.getSystemCredentials());
-      } finally {
-        ThriftUtil.returnClient(client);
-      }
+    synchronized public void unloadTablet(ZooLock lock, KeyExtent extent, boolean save) throws TException {
+      client.unloadTablet(null, SecurityConstants.getSystemCredentials(), lockString(lock), extent.toThrift(), save);
     }
     
-    public void halt(ZooLock lock) throws TException, ThriftSecurityException {
-      TabletClientService.Iface client = ThriftUtil.getClient(new TabletClientService.Client.Factory(), address, ServerConfiguration.getSystemConfiguration());
-      try {
-        client.halt(null, SecurityConstants.getSystemCredentials(), lockString(lock));
-      } finally {
-        ThriftUtil.returnClient(client);
-      }
+    synchronized public TabletServerStatus getTableMap() throws TException, ThriftSecurityException {
+      return client.getTabletServerStatus(null, SecurityConstants.getSystemCredentials());
+    }
+    
+    synchronized public void halt(ZooLock lock) throws TException, ThriftSecurityException {
+      if (client != null) client.halt(null, SecurityConstants.getSystemCredentials(), lockString(lock));
     }
     
     public void fastHalt(ZooLock lock) throws TException {
-      TabletClientService.Iface client = ThriftUtil.getClient(new TabletClientService.Client.Factory(), address, ServerConfiguration.getSystemConfiguration());
-      try {
-        client.fastHalt(null, SecurityConstants.getSystemCredentials(), lockString(lock));
-      } finally {
-        ThriftUtil.returnClient(client);
-      }
+      if (client != null) client.fastHalt(null, SecurityConstants.getSystemCredentials(), lockString(lock));
     }
     
-    public void flush(ZooLock lock, String tableId, byte[] startRow, byte[] endRow) throws TException {
-      TabletClientService.Iface client = ThriftUtil.getClient(new TabletClientService.Client.Factory(), address, ServerConfiguration.getSystemConfiguration());
-      try {
-        client.flush(null, SecurityConstants.getSystemCredentials(), lockString(lock), tableId, startRow == null ? null : ByteBuffer.wrap(startRow),
-            endRow == null ? null : ByteBuffer.wrap(endRow));
-      } finally {
-        ThriftUtil.returnClient(client);
-      }
+    synchronized public void flush(ZooLock lock, String tableId, byte[] startRow, byte[] endRow) throws TException {
+      client.flush(null, SecurityConstants.getSystemCredentials(), lockString(lock), tableId, startRow == null ? null : ByteBuffer.wrap(startRow),
+          endRow == null ? null : ByteBuffer.wrap(endRow));
     }
     
-    public void useLoggers(Set<String> loggers) throws TException {
-      TabletClientService.Iface client = ThriftUtil.getClient(new TabletClientService.Client.Factory(), address, ServerConfiguration.getSystemConfiguration());
-      try {
-        client.useLoggers(null, SecurityConstants.getSystemCredentials(), loggers);
-      } finally {
-        ThriftUtil.returnClient(client);
-      }
+    synchronized public void useLoggers(Set<String> loggers) throws TException {
+      client.useLoggers(null, SecurityConstants.getSystemCredentials(), loggers);
     }
     
-    public void chop(ZooLock lock, KeyExtent extent) throws TException {
-      TabletClientService.Iface client = ThriftUtil.getClient(new TabletClientService.Client.Factory(), address, ServerConfiguration.getSystemConfiguration());
-      try {
-        client.chop(null, SecurityConstants.getSystemCredentials(), lockString(lock), extent.toThrift());
-      } finally {
-        ThriftUtil.returnClient(client);
-      }
+    synchronized public void chop(ZooLock lock, KeyExtent extent) throws TException {
+      client.chop(null, SecurityConstants.getSystemCredentials(), lockString(lock), extent.toThrift());
     }
     
-    public void splitTablet(ZooLock lock, KeyExtent extent, Text splitPoint) throws TException, ThriftSecurityException, NotServingTabletException {
-      TabletClientService.Iface client = ThriftUtil.getClient(new TabletClientService.Client.Factory(), address, ServerConfiguration.getSystemConfiguration());
-      try {
-        client
-            .splitTablet(null, SecurityConstants.getSystemCredentials(), extent.toThrift(), ByteBuffer.wrap(splitPoint.getBytes(), 0, splitPoint.getLength()));
-      } finally {
-        ThriftUtil.returnClient(client);
-      }
+    synchronized public void splitTablet(ZooLock lock, KeyExtent extent, Text splitPoint) throws TException, ThriftSecurityException, NotServingTabletException {
+      client.splitTablet(null, SecurityConstants.getSystemCredentials(), extent.toThrift(), ByteBuffer.wrap(splitPoint.getBytes(), 0, splitPoint.getLength()));
     }
     
-    public void flushTablet(ZooLock lock, KeyExtent extent) throws TException {
-      TabletClientService.Iface client = ThriftUtil.getClient(new TabletClientService.Client.Factory(), address, ServerConfiguration.getSystemConfiguration());
-      try {
-        client.flushTablet(null, SecurityConstants.getSystemCredentials(), lockString(lock), extent.toThrift());
-      } finally {
-        ThriftUtil.returnClient(client);
-      }
+    synchronized public void flushTablet(ZooLock lock, KeyExtent extent) throws TException {
+      client.flushTablet(null, SecurityConstants.getSystemCredentials(), lockString(lock), extent.toThrift());
     }
     
-    public void compact(ZooLock lock, String tableId, byte[] startRow, byte[] endRow) throws TException {
-      TabletClientService.Iface client = ThriftUtil.getClient(new TabletClientService.Client.Factory(), address, ServerConfiguration.getSystemConfiguration());
-      try {
-        client.compact(null, SecurityConstants.getSystemCredentials(), lockString(lock), tableId, startRow == null ? null : ByteBuffer.wrap(startRow),
-            endRow == null ? null : ByteBuffer.wrap(endRow));
-      } finally {
-        ThriftUtil.returnClient(client);
-      }
+    synchronized public void compact(ZooLock lock, String tableId, byte[] startRow, byte[] endRow) throws TException {
+      client.compact(null, SecurityConstants.getSystemCredentials(), lockString(lock), tableId, startRow == null ? null : ByteBuffer.wrap(startRow),
+          endRow == null ? null : ByteBuffer.wrap(endRow));
     }
     
-    public boolean isActive(long tid) throws TException {
-      TabletClientService.Iface client = ThriftUtil.getClient(new TabletClientService.Client.Factory(), address, ServerConfiguration.getSystemConfiguration());
-      try {
-        return client.isActive(null, tid);
-      } finally {
-        ThriftUtil.returnClient(client);
-      }
+    synchronized public boolean isActive(long tid) throws TException {
+      return client.isActive(null, tid);
     }
     
   }
@@ -205,6 +156,7 @@ public class LiveTServerSet implements Watcher {
     
     void cleanup() throws InterruptedException, KeeperException {
       lock.tryToCancelAsyncLockOrUnlock();
+      connection.close();
     }
   };
   
@@ -218,8 +170,7 @@ public class LiveTServerSet implements Watcher {
   }
   
   public synchronized ZooCache getZooCache() {
-    if (zooCache == null)
-      zooCache = new ZooCache(this);
+    if (zooCache == null) zooCache = new ZooCache(this);
     return zooCache;
   }
   
@@ -261,15 +212,14 @@ public class LiveTServerSet implements Watcher {
           // Nope... there's a server out there: is this is a new server?
           if (info == null) {
             // Yep: hold onto the information about this server
-            Stat stat = new Stat();
-            byte[] lockData = ZooLock.getLockData(lockPath, stat);
+            byte[] lockData = ZooLock.getLockData(lockPath);
             String lockString = new String(lockData == null ? new byte[] {} : lockData);
             if (lockString.length() > 0 && !lockString.equals("master")) {
               ServerServices services = new ServerServices(new String(lockData));
               InetSocketAddress client = services.getAddress(ServerServices.Service.TSERV_CLIENT);
               InetSocketAddress addr = AddressUtil.parseAddress(server, Property.TSERV_CLIENTPORT);
               TServerConnection conn = new TServerConnection(addr);
-              instance = new TServerInstance(client, stat.getEphemeralOwner());
+              instance = new TServerInstance(client, lock.getSessionId());
               info = new TServerInfo(lock, instance, conn, watcher);
               current.put(server, info);
               updates.add(instance);
@@ -288,8 +238,7 @@ public class LiveTServerSet implements Watcher {
         }
       }
       // log.debug("Current: " + current.keySet());
-      if (!doomed.isEmpty() || !updates.isEmpty())
-        this.cback.update(this, doomed, updates);
+      if (!doomed.isEmpty() && !updates.isEmpty()) this.cback.update(this, doomed, updates);
     } catch (Exception ex) {
       log.error(ex, ex);
     }
@@ -303,15 +252,12 @@ public class LiveTServerSet implements Watcher {
   public synchronized TServerConnection getConnection(TServerInstance server) throws TException {
     TServerConnection result;
     synchronized (this) {
-      if (server == null)
-        return null;
+      if (server == null) return null;
       TServerInfo serverInfo = current.get(server.hostPort());
       // lock was lost?
-      if (serverInfo == null)
-        return null;
+      if (serverInfo == null) return null;
       // instance changed?
-      if (!serverInfo.instance.equals(server))
-        return null;
+      if (!serverInfo.instance.equals(server)) return null;
       result = serverInfo.connection;
     }
     return result;
@@ -353,11 +299,9 @@ public class LiveTServerSet implements Watcher {
     log.info("Removing zookeeper lock for " + server);
     String zpath = ZooUtil.getRoot(instance) + Constants.ZTSERVERS + "/" + server.hostPort();
     try {
-      ZooReaderWriter.getRetryingInstance().recursiveDelete(zpath, SKIP);
+      ZooReaderWriter.getInstance().recursiveDelete(zpath, SKIP);
     } catch (Exception e) {
-      String msg = "error removing tablet server lock";
-      log.fatal(msg, e);
-      Halt.halt(msg, -1);
+      log.error("error removing tablet server lock", e);
     }
     getZooCache().clear(zpath);
   }