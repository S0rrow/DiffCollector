diff --git a/src/core/src/main/java/org/apache/accumulo/core/iterators/user/TimestampFilter.java b/src/core/src/main/java/org/apache/accumulo/core/iterators/user/TimestampFilter.java
index 5b652aa244..a733b1c69c 100644
--- a/src/core/src/main/java/org/apache/accumulo/core/iterators/user/TimestampFilter.java
+++ b/src/core/src/main/java/org/apache/accumulo/core/iterators/user/TimestampFilter.java
@@ -18,9 +18,7 @@ package org.apache.accumulo.core.iterators.user;
 
 import java.io.IOException;
 import java.text.SimpleDateFormat;
-import java.util.Date;
 import java.util.Map;
-import java.util.TimeZone;
 
 import org.apache.accumulo.core.client.IteratorSetting;
 import org.apache.accumulo.core.data.Key;
@@ -33,13 +31,7 @@ import org.apache.accumulo.core.iterators.SortedKeyValueIterator;
  * A Filter that matches entries whose timestamps fall within a range.
  */
 public class TimestampFilter extends Filter {
-  private final SimpleDateFormat dateParser = initDateParser();
-  
-  private static SimpleDateFormat initDateParser() {
-    SimpleDateFormat dateParser = new SimpleDateFormat("yyyyMMddHHmmssz");
-    dateParser.setTimeZone(TimeZone.getTimeZone("GMT"));
-    return dateParser;
-  }
+  private final SimpleDateFormat dateParser = new SimpleDateFormat("yyyyMMddHHmmssz");
   
   public static final String START = "start";
   public static final String START_INCL = "startInclusive";
@@ -95,7 +87,7 @@ public class TimestampFilter extends Filter {
       hasEnd = true;
     if (!hasStart && !hasEnd)
       throw new IllegalArgumentException("must have either start or end for " + TimestampFilter.class.getName());
-    
+
     try {
       if (hasStart)
         start = dateParser.parse(options.get(START)).getTime();
@@ -207,69 +199,4 @@ public class TimestampFilter extends Filter {
     is.addOption(END, end);
     is.addOption(END_INCL, Boolean.toString(endInclusive));
   }
-  
-  /**
-   * A convenience method for setting the range of timestamps accepted by the timestamp filter.
-   * 
-   * @param is
-   *          the iterator setting object to configure
-   * @param start
-   *          the start timestamp, inclusive
-   * @param end
-   *          the end timestamp, inclusive
-   */
-  public static void setRange(IteratorSetting is, long start, long end) {
-    setRange(is, start, true, end, true);
-  }
-  
-  /**
-   * A convenience method for setting the range of timestamps accepted by the timestamp filter.
-   * 
-   * @param is
-   *          the iterator setting object to configure
-   * @param start
-   *          the start timestamp
-   * @param startInclusive
-   *          boolean indicating whether the start is inclusive
-   * @param end
-   *          the end timestamp
-   * @param endInclusive
-   *          boolean indicating whether the end is inclusive
-   */
-  public static void setRange(IteratorSetting is, long start, boolean startInclusive, long end, boolean endInclusive) {
-    setStart(is, start, startInclusive);
-    setEnd(is, end, endInclusive);
-  }
-  
-  /**
-   * A convenience method for setting the start timestamp accepted by the timestamp filter.
-   * 
-   * @param is
-   *          the iterator setting object to configure
-   * @param start
-   *          the start timestamp
-   * @param startInclusive
-   *          boolean indicating whether the start is inclusive
-   */
-  public static void setStart(IteratorSetting is, long start, boolean startInclusive) {
-    SimpleDateFormat dateParser = initDateParser();
-    is.addOption(START, dateParser.format(new Date(start)));
-    is.addOption(START_INCL, Boolean.toString(startInclusive));
-  }
-  
-  /**
-   * A convenience method for setting the end timestamp accepted by the timestamp filter.
-   * 
-   * @param is
-   *          the iterator setting object to configure
-   * @param end
-   *          the end timestamp
-   * @param endInclusive
-   *          boolean indicating whether the end is inclusive
-   */
-  public static void setEnd(IteratorSetting is, long end, boolean endInclusive) {
-    SimpleDateFormat dateParser = initDateParser();
-    is.addOption(END, dateParser.format(new Date(end)));
-    is.addOption(END_INCL, Boolean.toString(endInclusive));
-  }
 }