diff --git a/application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java b/application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
index 107ce1527..417dacc41 100644
--- a/application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
+++ b/application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
@@ -35,33 +35,31 @@ import java.util.Set;
 import java.util.jar.Manifest;
 
 import org.apache.aries.application.ApplicationMetadata;
-import org.apache.aries.application.ApplicationMetadataFactory;
+import org.apache.aries.application.ApplicationMetadataManager;
 import org.apache.aries.application.DeploymentMetadata;
 import org.apache.aries.application.DeploymentMetadataFactory;
 import org.apache.aries.application.filesystem.IDirectory;
 import org.apache.aries.application.filesystem.IFile;
+import org.apache.aries.application.management.ApplicationContext;
+import org.apache.aries.application.management.ApplicationContextManager;
+import org.apache.aries.application.management.ApplicationListener;
 import org.apache.aries.application.management.AriesApplication;
-import org.apache.aries.application.management.AriesApplicationContext;
-import org.apache.aries.application.management.AriesApplicationContextManager;
-import org.apache.aries.application.management.AriesApplicationListener;
 import org.apache.aries.application.management.AriesApplicationManager;
 import org.apache.aries.application.management.AriesApplicationResolver;
-import org.apache.aries.application.management.BundleConversion;
 import org.apache.aries.application.management.BundleConverter;
 import org.apache.aries.application.management.BundleInfo;
 import org.apache.aries.application.management.ConversionException;
 import org.apache.aries.application.management.LocalPlatform;
 import org.apache.aries.application.management.ManagementException;
 import org.apache.aries.application.management.ResolveConstraint;
-import org.apache.aries.application.management.ResolverException;
 import org.apache.aries.application.management.internal.MessageUtil;
 import org.apache.aries.application.utils.AppConstants;
 import org.apache.aries.application.utils.filesystem.FileSystem;
 import org.apache.aries.application.utils.filesystem.IOUtils;
-import org.apache.aries.application.utils.management.SimpleBundleInfo;
 import org.apache.aries.application.utils.manifest.BundleManifest;
 import org.apache.aries.application.utils.manifest.ManifestDefaultsInjector;
 import org.apache.aries.application.utils.manifest.ManifestProcessor;
+import org.osgi.framework.Bundle;
 import org.osgi.framework.BundleException;
 import org.osgi.framework.ServiceException;
 import org.slf4j.Logger;
@@ -69,17 +67,17 @@ import org.slf4j.LoggerFactory;
 
 public class AriesApplicationManagerImpl implements AriesApplicationManager {
 
-  private ApplicationMetadataFactory _applicationMetadataFactory;
+  private ApplicationMetadataManager _applicationMetadataManager;
   private DeploymentMetadataFactory _deploymentMetadataFactory;
   private List<BundleConverter> _bundleConverters;
   private AriesApplicationResolver _resolver;
   private LocalPlatform _localPlatform;
-  private AriesApplicationContextManager _applicationContextManager;
+  private ApplicationContextManager _applicationContextManager;
 
   private static final Logger _logger = LoggerFactory.getLogger("org.apache.aries.application.management.impl");
 
-  public void setApplicationMetadataFactory (ApplicationMetadataFactory amf) { 
-    _applicationMetadataFactory = amf;
+  public void setApplicationMetadataManager (ApplicationMetadataManager amm) { 
+    _applicationMetadataManager = amm;
   }
   
   public void setDeploymentMetadataFactory (DeploymentMetadataFactory dmf) { 
@@ -98,7 +96,7 @@ public class AriesApplicationManagerImpl implements AriesApplicationManager {
     _localPlatform = lp;
   }
   
-  public void setApplicationContextManager (AriesApplicationContextManager acm) { 
+  public void setApplicationContextManager (ApplicationContextManager acm) { 
     _applicationContextManager = acm;
   }
   
@@ -110,92 +108,88 @@ public class AriesApplicationManagerImpl implements AriesApplicationManager {
   public AriesApplication createApplication(IDirectory ebaFile) throws ManagementException {
     ApplicationMetadata applicationMetadata = null;
     DeploymentMetadata deploymentMetadata = null;
-    Map<String, BundleConversion> modifiedBundles = new HashMap<String, BundleConversion>();
+    Map<String, InputStream> modifiedBundles = new HashMap<String, InputStream>();
     AriesApplicationImpl application = null;
     
     try { 
-    	
-        /* We require that all other .jar and .war files included by-value be valid bundles
-         * because a DEPLOYMENT.MF has been provided. If no DEPLOYMENT.MF, migrate 
-         * wars to wabs, plain jars to bundles
-         */
-          
-        Set<BundleInfo> extraBundlesInfo = new HashSet<BundleInfo>();
-        for (IFile f : ebaFile) { 
-          if (f.isDirectory()) { 
-            continue;
-          }
-          
-          BundleManifest bm = getBundleManifest (f);
-          if (bm != null) {
-            if (bm.isValid()) {
-              extraBundlesInfo.add(new SimpleBundleInfo(_applicationMetadataFactory, bm, f.toURL().toExternalForm()));
-            } else if (deploymentMetadata != null) {
-              throw new ManagementException (MessageUtil.getMessage("APPMANAGEMENT0003E", f.getName(), ebaFile.getName()));
-            } else { 
-              // We have a jar that needs converting to a bundle, or a war to migrate to a WAB             
-           	  BundleConversion convertedBinary = null;
-              Iterator<BundleConverter> converters = _bundleConverters.iterator();
-              List<ConversionException> conversionExceptions = Collections.emptyList();
-              while (converters.hasNext() && convertedBinary == null) { 
-                try {                 	
-                  convertedBinary = converters.next().convert(ebaFile, f);
-                } catch (ServiceException sx) {
-                  // We'll get this if our optional BundleConverter has not been injected. 
-                } catch (ConversionException cx) { 
-                  conversionExceptions.add(cx);
-                }
-              }
-              if (conversionExceptions.size() > 0) {
-                for (ConversionException cx : conversionExceptions) { 
-                  _logger.error("APPMANAGEMENT0004E", new Object[]{f.getName(), ebaFile.getName(), cx});
-                }
-                throw new ManagementException (MessageUtil.getMessage("APPMANAGEMENT0005E", ebaFile.getName()));
-              }
-              if (convertedBinary != null) { 
-                modifiedBundles.put (f.getName(), convertedBinary);
-                bm = BundleManifest.fromBundle(f);
-                extraBundlesInfo.add(new SimpleBundleInfo(_applicationMetadataFactory, bm, f.getName()));
-              }
-            }
-          } 
-        }
-      Manifest applicationManifest = parseApplicationManifest (ebaFile); 
-      String appName = ebaFile.getName();
-      //If the application name is null, we will try to get the file name.
-      if ((appName == null) || (appName.isEmpty())) {
-    	  String fullPath = ebaFile.toString();
-    	  if (fullPath.endsWith("/"))
-    		  fullPath = fullPath.substring(0, fullPath.length() -1);
-          int last_slash = fullPath.lastIndexOf("/");
-          appName = fullPath.substring(last_slash + 1, fullPath.length()); 
-      }
-      
-     
-      ManifestDefaultsInjector.updateManifest(applicationManifest, appName, ebaFile); 
-      applicationMetadata = _applicationMetadataFactory.createApplicationMetadata(applicationManifest);
+      Manifest applicationManifest = parseApplicationManifest (ebaFile);
+      ManifestDefaultsInjector.updateManifest(applicationManifest, ebaFile.getName(), ebaFile); 
+      applicationMetadata = _applicationMetadataManager.createApplicationMetadata(applicationManifest);
+
       IFile deploymentManifest = ebaFile.getFile(AppConstants.DEPLOYMENT_MF);
       if (deploymentManifest != null) { 
         deploymentMetadata = _deploymentMetadataFactory.createDeploymentMetadata(deploymentManifest);
         
         // Validate: symbolic names must match
         String appSymbolicName = applicationMetadata.getApplicationSymbolicName();
-        String depSymbolicName = deploymentMetadata.getApplicationSymbolicName();
+        String depSymbolicName = applicationMetadata.getApplicationSymbolicName();
         if (!appSymbolicName.equals(depSymbolicName)) {
           throw new ManagementException (MessageUtil.getMessage("APPMANAGEMENT0002E", ebaFile.getName(), appSymbolicName, depSymbolicName));
         }
       }
       
-
-
-      application = new AriesApplicationImpl (applicationMetadata, extraBundlesInfo, _localPlatform);
-      application.setDeploymentMetadata(deploymentMetadata);
-      // Store a reference to any modified bundles
-      application.setModifiedBundles (modifiedBundles);
-    } catch (IOException iox) {
+      /* We require that all other .jar and .war files included by-value be valid bundles
+       * because a DEPLOYMENT.MF has been provided. If no DEPLOYMENT.MF, migrate 
+       * wars to wabs, plain jars to bundles
+       */
+        
+      Set<BundleInfo> extraBundlesInfo = new HashSet<BundleInfo>();
+      for (IFile f : ebaFile) { 
+        if (f.isDirectory()) { 
+          continue;
+        }
+        
+        BundleManifest bm = getBundleManifest (f);
+        if (bm != null) {
+          if (bm.isValid()) {
+            extraBundlesInfo.add(new BundleInfoImpl(bm, f.toURL().toExternalForm()));
+          } else if (deploymentMetadata != null) {
+            throw new ManagementException (MessageUtil.getMessage("APPMANAGEMENT0003E", f.getName(), ebaFile.getName()));
+          } else { 
+            // We have a jar that needs converting to a bundle, or a war to migrate to a WAB
+            InputStream convertedBinary = null;
+            Iterator<BundleConverter> converters = _bundleConverters.iterator();
+            List<ConversionException> conversionExceptions = Collections.emptyList();
+            while (converters.hasNext() && convertedBinary == null) { 
+              try { 
+                convertedBinary = converters.next().convert(ebaFile, f);
+              } catch (ServiceException sx) {
+                // We'll get this if our optional BundleConverter has not been injected. 
+              } catch (ConversionException cx) { 
+                conversionExceptions.add(cx);
+              }
+            }
+            if (conversionExceptions.size() > 0) {
+              for (ConversionException cx : conversionExceptions) { 
+                _logger.error("APPMANAGEMENT0004E", new Object[]{f.getName(), ebaFile.getName(), cx});
+              }
+              throw new ManagementException (MessageUtil.getMessage("APPMANAGEMENT0005E", ebaFile.getName()));
+            }
+            if (convertedBinary != null) { 
+              modifiedBundles.put (f.getName(), convertedBinary);
+              bm = BundleManifest.fromBundle(f);
+              extraBundlesInfo.add(new BundleInfoImpl(bm, f.getName()));
+            }
+          }
+        } 
+        if (deploymentMetadata != null) { 
+          application = new AriesApplicationImpl (applicationMetadata, deploymentMetadata, extraBundlesInfo, _localPlatform);
+        } else { 
+          application = new AriesApplicationImpl (applicationMetadata, extraBundlesInfo, _localPlatform);
+          Set<BundleInfo> additionalBundlesRequired = _resolver.resolve(application);
+          deploymentMetadata = _deploymentMetadataFactory.createDeploymentMetadata(application, additionalBundlesRequired);
+          application.setDeploymentMetadata(deploymentMetadata);
+        
+          // Store a reference to any modified bundles
+          application.setModifiedBundles (modifiedBundles);
+        }
+        
+      }
+    } catch (IOException iox) { 
       _logger.error ("APPMANAGEMENT0006E", new Object []{ebaFile.getName(), iox});
       throw new ManagementException(iox);
     }
+    
     return application;
   }
 
@@ -223,37 +217,30 @@ public class AriesApplicationManagerImpl implements AriesApplicationManager {
     return app;
   }
 
-  public AriesApplication resolve(AriesApplication originalApp, ResolveConstraint... constraints) throws ResolverException {
-    AriesApplicationImpl application = new AriesApplicationImpl(originalApp.getApplicationMetadata(), originalApp.getBundleInfo(), _localPlatform);
-    Set<BundleInfo> additionalBundlesRequired = _resolver.resolve(application, constraints);
-    DeploymentMetadata deploymentMetadata = _deploymentMetadataFactory.createDeploymentMetadata(application, additionalBundlesRequired);
-    application.setDeploymentMetadata(deploymentMetadata);
-    // Store a reference to any modified bundles
-    if (originalApp instanceof AriesApplicationImpl) {
-        // TODO: are we really passing streams around ?
-        application.setModifiedBundles(((AriesApplicationImpl) originalApp).getModifiedBundles());
-    }
-    return application;
+  public AriesApplication resolve(AriesApplication originalApp,
+      ResolveConstraint... constraints) {
+    // TODO Auto-generated method stub
+    return null;
   } 
 
-  public AriesApplicationContext install(AriesApplication app) throws BundleException, ManagementException, ResolverException {
-    if (!app.isResolved()) {
-        app = resolve(app);
-    }
-    AriesApplicationContext result = _applicationContextManager.getApplicationContext(app);
+  public ApplicationContext install(AriesApplication app) {
+    ApplicationContext result = _applicationContextManager.getApplicationContext(app);
     return result;
   }
   
-  public void uninstall(AriesApplicationContext app) throws BundleException 
-  {
-    _applicationContextManager.remove(app);
+  public void uninstall(ApplicationContext app) throws BundleException {
+    Set<Bundle> bundles = app.getApplicationContent();
+    for (Bundle b : bundles) { 
+      b.uninstall();
+    }
+
   }
 
-  public void addApplicationListener(AriesApplicationListener l) {
+  public void addApplicationListener(ApplicationListener l) {
     // Need application listener lifecycle support
   }
 
-  public void removeApplicationListener(AriesApplicationListener l) {
+  public void removeApplicationListener(ApplicationListener l) {
     // TODO Auto-generated method stub
 
   }
@@ -263,11 +250,11 @@ public class AriesApplicationManagerImpl implements AriesApplicationManager {
   /**
    * Locate and parse an application.mf in an eba
    * @param source An aries application file
-   * @return parsed manifest, or an empty Manifest
+   * @return parsed manifest, or null
    * @throws IOException
    */
   private Manifest parseApplicationManifest (IDirectory source) throws IOException {
-    Manifest result = new Manifest();
+    Manifest result = null;
     IFile f = source.getFile(AppConstants.APPLICATION_MF);
     if (f != null) { 
       InputStream is = null;