diff --git a/asterixdb/asterix-app/src/main/java/org/apache/asterix/api/http/server/UdfApiServlet.java b/asterixdb/asterix-app/src/main/java/org/apache/asterix/api/http/server/UdfApiServlet.java
index c3d68779ee..d293ee8876 100644
--- a/asterixdb/asterix-app/src/main/java/org/apache/asterix/api/http/server/UdfApiServlet.java
+++ b/asterixdb/asterix-app/src/main/java/org/apache/asterix/api/http/server/UdfApiServlet.java
@@ -33,8 +33,6 @@ import org.apache.asterix.app.message.LoadUdfMessage;
 import org.apache.asterix.common.dataflow.ICcApplicationContext;
 import org.apache.asterix.common.messaging.api.ICCMessageBroker;
 import org.apache.asterix.common.messaging.api.INcAddressedMessage;
-import org.apache.asterix.common.metadata.DataverseName;
-import org.apache.hyracks.algebricks.common.utils.Pair;
 import org.apache.hyracks.api.client.IHyracksClientConnection;
 import org.apache.hyracks.api.deployment.DeploymentId;
 import org.apache.hyracks.http.api.IServletRequest;
@@ -56,7 +54,6 @@ public class UdfApiServlet extends AbstractServlet {
     private final ICCMessageBroker broker;
     public static final String UDF_TMP_DIR_PREFIX = "udf_temp";
     public static final int UDF_RESPONSE_TIMEOUT = 5000;
-    public static final int URL_PREFIX_LENGTH = 3;
 
     public UdfApiServlet(ICcApplicationContext appCtx, ConcurrentMap<String, Object> ctx, String... paths) {
         super(ctx, paths);
@@ -64,28 +61,28 @@ public class UdfApiServlet extends AbstractServlet {
         this.broker = (ICCMessageBroker) appCtx.getServiceContext().getMessageBroker();
     }
 
-    private Pair<String, DataverseName> getResource(FullHttpRequest req) throws IllegalArgumentException {
+    private String[] getResource(FullHttpRequest req) throws IllegalArgumentException {
         String[] path = new QueryStringDecoder(req.uri()).path().split("/");
         if (path.length != 5) {
             throw new IllegalArgumentException("Invalid resource.");
         }
         String resourceName = path[path.length - 1];
-        DataverseName dataverseName = DataverseName.createFromCanonicalForm(path[path.length - 2]); // TODO: use path separators instead for multiparts
-        return new Pair<>(resourceName, dataverseName);
+        String dataverseName = path[path.length - 2];
+        return new String[] { resourceName, dataverseName };
     }
 
     @Override
     protected void post(IServletRequest request, IServletResponse response) {
         FullHttpRequest req = request.getHttpRequest();
-        Pair<String, DataverseName> resourceNames;
+        String[] resourceNames;
         try {
             resourceNames = getResource(req);
         } catch (IllegalArgumentException e) {
             response.setStatus(HttpResponseStatus.BAD_REQUEST);
             return;
         }
-        String resourceName = resourceNames.first;
-        DataverseName dataverse = resourceNames.second;
+        String resourceName = resourceNames[0];
+        String dataverse = resourceNames[1];
         File udf = null;
         try {
             File workingDir = new File(appCtx.getServiceContext().getServerCtx().getBaseDir().getAbsolutePath(),
@@ -104,7 +101,7 @@ public class UdfApiServlet extends AbstractServlet {
                 }
             }
             IHyracksClientConnection hcc = appCtx.getHcc();
-            DeploymentId udfName = new DeploymentId(makeDeploymentId(dataverse, resourceName));
+            DeploymentId udfName = new DeploymentId(dataverse + "." + resourceName);
             ClassLoader cl = appCtx.getLibraryManager().getLibraryClassLoader(dataverse, resourceName);
             if (cl != null) {
                 deleteUdf(dataverse, resourceName);
@@ -132,34 +129,26 @@ public class UdfApiServlet extends AbstractServlet {
 
     }
 
-    public static String makeDeploymentId(DataverseName dv, String resourceName) {
-        List<String> dvParts = dv.getParts();
-        dvParts.add(resourceName);
-        DataverseName dvWithLibrarySuffix = DataverseName.create(dvParts);
-        return dvWithLibrarySuffix.getCanonicalForm();
-    }
-
-    private void deleteUdf(DataverseName dataverse, String resourceName) throws Exception {
-        long reqId = broker.newRequestId();
-        List<INcAddressedMessage> requests = new ArrayList<>();
-        List<String> ncs = new ArrayList<>(appCtx.getClusterStateManager().getParticipantNodes());
-        ncs.forEach(s -> requests.add(new DeleteUdfMessage(dataverse, resourceName, reqId)));
-        broker.sendSyncRequestToNCs(reqId, ncs, requests, UDF_RESPONSE_TIMEOUT);
+    private void deleteUdf(String dataverse, String resourceName) throws Exception {
+        DeleteUdfMessage msg = new DeleteUdfMessage(dataverse, resourceName);
+        for (String nc : appCtx.getClusterStateManager().getParticipantNodes()) {
+            broker.sendApplicationMessageToNC(msg, nc);
+        }
         appCtx.getLibraryManager().deregisterLibraryClassLoader(dataverse, resourceName);
-        appCtx.getHcc().unDeployBinary(new DeploymentId(makeDeploymentId(dataverse, resourceName)));
+        appCtx.getHcc().unDeployBinary(new DeploymentId(resourceName));
     }
 
     @Override
     protected void delete(IServletRequest request, IServletResponse response) {
-        Pair<String, DataverseName> resourceNames;
+        String[] resourceNames;
         try {
             resourceNames = getResource(request.getHttpRequest());
         } catch (IllegalArgumentException e) {
             response.setStatus(HttpResponseStatus.BAD_REQUEST);
             return;
         }
-        String resourceName = resourceNames.first;
-        DataverseName dataverse = resourceNames.second;
+        String resourceName = resourceNames[0];
+        String dataverse = resourceNames[1];
         try {
             deleteUdf(dataverse, resourceName);
         } catch (Exception e) {