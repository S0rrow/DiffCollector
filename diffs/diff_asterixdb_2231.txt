diff --git a/asterixdb/asterix-om/src/main/java/org/apache/asterix/dataflow/data/nontagged/serde/ARecordSerializerDeserializer.java b/asterixdb/asterix-om/src/main/java/org/apache/asterix/dataflow/data/nontagged/serde/ARecordSerializerDeserializer.java
index af36c78827..1d3a42044c 100644
--- a/asterixdb/asterix-om/src/main/java/org/apache/asterix/dataflow/data/nontagged/serde/ARecordSerializerDeserializer.java
+++ b/asterixdb/asterix-om/src/main/java/org/apache/asterix/dataflow/data/nontagged/serde/ARecordSerializerDeserializer.java
@@ -25,6 +25,7 @@ import java.util.List;
 
 import org.apache.asterix.builders.IARecordBuilder;
 import org.apache.asterix.builders.RecordBuilder;
+import org.apache.asterix.common.exceptions.AsterixException;
 import org.apache.asterix.formats.nontagged.BinaryComparatorFactoryProvider;
 import org.apache.asterix.formats.nontagged.BinaryHashFunctionFactoryProvider;
 import org.apache.asterix.formats.nontagged.SerializerDeserializerProvider;
@@ -38,8 +39,7 @@ import org.apache.asterix.om.types.ATypeTag;
 import org.apache.asterix.om.types.AUnionType;
 import org.apache.asterix.om.types.BuiltinType;
 import org.apache.asterix.om.types.IAType;
-import org.apache.asterix.om.utils.NonTaggedFormatUtil;
-import org.apache.asterix.om.utils.RecordUtil;
+import org.apache.asterix.om.util.NonTaggedFormatUtil;
 import org.apache.hyracks.algebricks.common.utils.Pair;
 import org.apache.hyracks.api.dataflow.value.IBinaryComparator;
 import org.apache.hyracks.api.dataflow.value.IBinaryHashFunction;
@@ -53,15 +53,13 @@ public class ARecordSerializerDeserializer implements ISerializerDeserializer<AR
 
     public static final ARecordSerializerDeserializer SCHEMALESS_INSTANCE = new ARecordSerializerDeserializer();
 
-    private static final IAObject[] NO_FIELDS = new IAObject[0];
-
     private final ARecordType recordType;
     private final int numberOfSchemaFields;
 
     @SuppressWarnings("rawtypes")
-    private final ISerializerDeserializer[] serializers;
+    private final ISerializerDeserializer serializers[];
     @SuppressWarnings("rawtypes")
-    private final ISerializerDeserializer[] deserializers;
+    private final ISerializerDeserializer deserializers[];
 
     private ARecordSerializerDeserializer() {
         this(null);
@@ -75,7 +73,12 @@ public class ARecordSerializerDeserializer implements ISerializerDeserializer<AR
             deserializers = new ISerializerDeserializer[numberOfSchemaFields];
             for (int i = 0; i < numberOfSchemaFields; i++) {
                 IAType t = recordType.getFieldTypes()[i];
-                IAType t2 = (t.getTypeTag() == ATypeTag.UNION) ? ((AUnionType) t).getActualType() : t;
+                IAType t2;
+                if (t.getTypeTag() == ATypeTag.UNION) {
+                    t2 = ((AUnionType) t).getActualType();
+                } else {
+                    t2 = t;
+                }
                 serializers[i] = SerializerDeserializerProvider.INSTANCE.getSerializerDeserializer(t2);
                 deserializers[i] = SerializerDeserializerProvider.INSTANCE.getNonTaggedSerializerDeserializer(t2);
             }
@@ -90,8 +93,47 @@ public class ARecordSerializerDeserializer implements ISerializerDeserializer<AR
     @Override
     public ARecord deserialize(DataInput in) throws HyracksDataException {
         try {
-            boolean isExpanded = isExpandedRecord(in);
-            IAObject[] schemaFields = getValuesForSchemaFields(in);
+            boolean isExpanded = false;
+            in.readInt(); // recordSize
+            if (recordType == null) {
+                isExpanded = in.readBoolean();
+                in.readInt(); // openPartOffset
+            } else {
+                if (recordType.isOpen()) {
+                    isExpanded = in.readBoolean();
+                    if (isExpanded) {
+                        in.readInt(); // openPartOffset
+                    }
+                } else {
+                    isExpanded = false;
+                }
+            }
+            IAObject[] closedFields = null;
+            if (numberOfSchemaFields > 0) {
+                in.readInt(); // read number of closed fields.
+                boolean hasOptionalFields = NonTaggedFormatUtil.hasOptionalField(this.recordType);
+                byte[] nullBitMap = null;
+                if (hasOptionalFields) {
+                    int nullBitMapSize = (int) (Math.ceil(numberOfSchemaFields / 4.0));
+                    nullBitMap = new byte[nullBitMapSize];
+                    in.readFully(nullBitMap);
+                }
+                closedFields = new IAObject[numberOfSchemaFields];
+                for (int i = 0; i < numberOfSchemaFields; i++) {
+                    in.readInt();
+                }
+                for (int fieldId = 0; fieldId < numberOfSchemaFields; fieldId++) {
+                    if (hasOptionalFields && ((nullBitMap[fieldId / 4] & (1 << (7 - 2 * (fieldId % 4)))) == 0)) {
+                        closedFields[fieldId] = ANull.NULL;
+                        continue;
+                    }
+                    if (hasOptionalFields && ((nullBitMap[fieldId / 4] & (1 << (7 - 2 * (fieldId % 4) - 1))) == 0)) {
+                        closedFields[fieldId] = AMissing.MISSING;
+                        continue;
+                    }
+                    closedFields[fieldId] = (IAObject) deserializers[fieldId].deserialize(in);
+                }
+            }
 
             if (isExpanded) {
                 int numberOfOpenFields = in.readInt();
@@ -110,65 +152,19 @@ public class ARecordSerializerDeserializer implements ISerializerDeserializer<AR
                 ARecordType openPartRecType = new ARecordType(null, fieldNames, fieldTypes, true);
                 if (numberOfSchemaFields > 0) {
                     ARecordType mergedRecordType = mergeRecordTypes(this.recordType, openPartRecType);
-                    IAObject[] mergedFields = mergeFields(schemaFields, openFields);
+                    IAObject[] mergedFields = mergeFields(closedFields, openFields);
                     return new ARecord(mergedRecordType, mergedFields);
                 } else {
                     return new ARecord(openPartRecType, openFields);
                 }
             } else {
-                return new ARecord(this.recordType, schemaFields);
+                return new ARecord(this.recordType, closedFields);
             }
-        } catch (IOException e) {
-            throw HyracksDataException.create(e);
+        } catch (IOException | AsterixException e) {
+            throw new HyracksDataException(e);
         }
     }
 
-    private boolean isExpandedRecord(DataInput in) throws IOException {
-        in.readInt(); // recordSize
-        if (recordType == null) {
-            boolean exp = in.readBoolean();
-            in.readInt(); // openPartOffset
-            return exp;
-        } else {
-            if (recordType.isOpen()) {
-                boolean exp = in.readBoolean();
-                if (exp) {
-                    in.readInt(); // openPartOffset
-                }
-                return exp;
-            }
-            return false;
-        }
-    }
-
-    private IAObject[] getValuesForSchemaFields(DataInput in) throws IOException {
-        if (numberOfSchemaFields <= 0) {
-            return NO_FIELDS;
-        }
-        in.readInt(); // read number of schema fields.
-        boolean hasOptionalFields = NonTaggedFormatUtil.hasOptionalField(this.recordType);
-        byte[] nullBitMap = null;
-        if (hasOptionalFields) {
-            int nullBitMapSize = (int) (Math.ceil(numberOfSchemaFields / 4.0));
-            nullBitMap = new byte[nullBitMapSize];
-            in.readFully(nullBitMap);
-        }
-        for (int i = 0; i < numberOfSchemaFields; i++) {
-            in.readInt();
-        }
-        IAObject[] schemaFields = new IAObject[numberOfSchemaFields];
-        for (int fieldId = 0; fieldId < numberOfSchemaFields; fieldId++) {
-            if (hasOptionalFields && ((nullBitMap[fieldId / 4] & (1 << (7 - 2 * (fieldId % 4)))) == 0)) {
-                schemaFields[fieldId] = ANull.NULL;
-            } else if (hasOptionalFields && ((nullBitMap[fieldId / 4] & (1 << (7 - 2 * (fieldId % 4) - 1))) == 0)) {
-                schemaFields[fieldId] = AMissing.MISSING;
-            } else {
-                schemaFields[fieldId] = (IAObject) deserializers[fieldId].deserialize(in);
-            }
-        }
-        return schemaFields;
-    }
-
     @Override
     public void serialize(ARecord instance, DataOutput out) throws HyracksDataException {
         this.serialize(instance, out, false);
@@ -197,10 +193,10 @@ public class ARecordSerializerDeserializer implements ISerializerDeserializer<AR
     @SuppressWarnings({ "unchecked", "rawtypes" })
     public static void serializeSchemalessRecord(ARecord record, DataOutput dataOutput, boolean writeTypeTag)
             throws HyracksDataException {
-        ISerializerDeserializer<AString> stringSerde =
-                SerializerDeserializerProvider.INSTANCE.getSerializerDeserializer(BuiltinType.ASTRING);
+        ISerializerDeserializer<AString> stringSerde = SerializerDeserializerProvider.INSTANCE
+                .getSerializerDeserializer(BuiltinType.ASTRING);
         RecordBuilder confRecordBuilder = new RecordBuilder();
-        confRecordBuilder.reset(RecordUtil.FULLY_OPEN_RECORD_TYPE);
+        confRecordBuilder.reset(ARecordType.FULLY_OPEN_RECORD_TYPE);
         ArrayBackedValueStorage fieldNameBytes = new ArrayBackedValueStorage();
         ArrayBackedValueStorage fieldValueBytes = new ArrayBackedValueStorage();
         for (int i = 0; i < record.getType().getFieldNames().length; i++) {
@@ -219,10 +215,10 @@ public class ARecordSerializerDeserializer implements ISerializerDeserializer<AR
     @SuppressWarnings("unchecked")
     public static void serializeSimpleSchemalessRecord(List<Pair<String, String>> record, DataOutput dataOutput,
             boolean writeTypeTag) throws HyracksDataException {
-        ISerializerDeserializer<AString> stringSerde =
-                SerializerDeserializerProvider.INSTANCE.getSerializerDeserializer(BuiltinType.ASTRING);
+        ISerializerDeserializer<AString> stringSerde = SerializerDeserializerProvider.INSTANCE
+                .getSerializerDeserializer(BuiltinType.ASTRING);
         RecordBuilder confRecordBuilder = new RecordBuilder();
-        confRecordBuilder.reset(RecordUtil.FULLY_OPEN_RECORD_TYPE);
+        confRecordBuilder.reset(ARecordType.FULLY_OPEN_RECORD_TYPE);
         ArrayBackedValueStorage fieldNameBytes = new ArrayBackedValueStorage();
         ArrayBackedValueStorage fieldValueBytes = new ArrayBackedValueStorage();
         for (int i = 0; i < record.size(); i++) {
@@ -247,7 +243,8 @@ public class ARecordSerializerDeserializer implements ISerializerDeserializer<AR
         return fields;
     }
 
-    private ARecordType mergeRecordTypes(ARecordType recType1, ARecordType recType2) {
+    private ARecordType mergeRecordTypes(ARecordType recType1, ARecordType recType2) throws AsterixException {
+
         String[] fieldNames = new String[recType1.getFieldNames().length + recType2.getFieldNames().length];
         IAType[] fieldTypes = new IAType[recType1.getFieldTypes().length + recType2.getFieldTypes().length];
 
@@ -268,7 +265,7 @@ public class ARecordSerializerDeserializer implements ISerializerDeserializer<AR
         return AInt32SerializerDeserializer.getInt(serRecord, offset);
     }
 
-    public static int getFieldOffsetById(byte[] serRecord, int offset, int fieldId, int nullBitmapSize,
+    public static final int getFieldOffsetById(byte[] serRecord, int offset, int fieldId, int nullBitmapSize,
             boolean isOpen) {
         final byte nullTestCode = (byte) (1 << (7 - 2 * (fieldId % 4)));
         final byte missingTestCode = (byte) (1 << (7 - 2 * (fieldId % 4) - 1));
@@ -305,23 +302,35 @@ public class ARecordSerializerDeserializer implements ISerializerDeserializer<AR
         return offset + AInt32SerializerDeserializer.getInt(serRecord, pointer + nullBitmapSize + (4 * fieldId));
     }
 
-    public static int getFieldOffsetByName(byte[] serRecord, int start, int len, byte[] fieldName, int nstart)
+    public static final int getFieldOffsetByName(byte[] serRecord, int start, int len, byte[] fieldName, int nstart)
             throws HyracksDataException {
-        // 5 is the index of the byte that determines whether the record is expanded or not, i.e. it has an open part.
-        if (hasNoFields(serRecord, start, len) || serRecord[start + 5] != 1) {
-            return -1;
+        int openPartOffset;
+        if (serRecord[start] == ATypeTag.SERIALIZED_RECORD_TYPE_TAG) {
+            if (len <= 5) {
+                // Empty record
+                return -1;
+            }
+            // 5 is the index of the byte that determines whether the record is
+            // expanded or not, i.e. it has an open part.
+            if (serRecord[start + 5] == 1) { // true
+                // 6 is the index of the first byte of the openPartOffset value.
+                openPartOffset = start + AInt32SerializerDeserializer.getInt(serRecord, start + 6);
+            } else {
+                return -1; // this record does not have an open part
+            }
+        } else {
+            return -1; // this record does not have an open part
         }
-        // 6 is the index of the first byte of the openPartOffset value.
-        int openPartOffset = start + AInt32SerializerDeserializer.getInt(serRecord, start + 6);
+
         int numberOfOpenField = AInt32SerializerDeserializer.getInt(serRecord, openPartOffset);
         int fieldUtflength = UTF8StringUtil.getUTFLength(fieldName, nstart + 1);
         int fieldUtfMetaLen = UTF8StringUtil.getNumBytesToStoreLength(fieldUtflength);
 
-        IBinaryHashFunction utf8HashFunction =
-                BinaryHashFunctionFactoryProvider.UTF8STRING_POINTABLE_INSTANCE.createBinaryHashFunction();
+        IBinaryHashFunction utf8HashFunction = BinaryHashFunctionFactoryProvider.UTF8STRING_POINTABLE_INSTANCE
+                .createBinaryHashFunction();
 
-        IBinaryComparator utf8BinaryComparator =
-                BinaryComparatorFactoryProvider.UTF8STRING_POINTABLE_INSTANCE.createBinaryComparator();
+        IBinaryComparator utf8BinaryComparator = BinaryComparatorFactoryProvider.UTF8STRING_POINTABLE_INSTANCE
+                .createBinaryComparator();
 
         int fieldNameHashCode = utf8HashFunction.hash(fieldName, nstart + 1, fieldUtflength + fieldUtfMetaLen);
 
@@ -366,11 +375,6 @@ public class ARecordSerializerDeserializer implements ISerializerDeserializer<AR
         return -1; // no field with this name.
     }
 
-    public static boolean hasNoFields(byte[] serRecord, int start, int len) {
-        // a record with len <= 6 is empty
-        return serRecord[start] != ATypeTag.SERIALIZED_RECORD_TYPE_TAG || len <= 6;
-    }
-
     @Override
     public String toString() {
         return " ";