diff --git a/notification/src/main/java/org/apache/atlas/hook/AtlasHook.java b/notification/src/main/java/org/apache/atlas/hook/AtlasHook.java
index c8df08cfa..7e09a1929 100644
--- a/notification/src/main/java/org/apache/atlas/hook/AtlasHook.java
+++ b/notification/src/main/java/org/apache/atlas/hook/AtlasHook.java
@@ -18,15 +18,12 @@
 
 package org.apache.atlas.hook;
 
-import com.google.common.annotations.VisibleForTesting;
 import com.google.inject.Guice;
 import com.google.inject.Injector;
 import org.apache.atlas.ApplicationProperties;
-import org.apache.atlas.notification.NotificationException;
 import org.apache.atlas.notification.NotificationInterface;
 import org.apache.atlas.notification.NotificationModule;
 import org.apache.atlas.notification.hook.HookNotification;
-import org.apache.atlas.security.InMemoryJAASConfiguration;
 import org.apache.atlas.typesystem.Referenceable;
 import org.apache.atlas.typesystem.json.InstanceSerialization;
 import org.apache.commons.configuration.Configuration;
@@ -49,21 +46,13 @@ public abstract class AtlasHook {
 
     private static final Logger LOG = LoggerFactory.getLogger(AtlasHook.class);
 
+    /**
+     * Hadoop Cluster name for this instance, typically used for namespace.
+     */
     protected static Configuration atlasProperties;
 
     protected static NotificationInterface notifInterface;
 
-    private static boolean logFailedMessages;
-    private static FailedMessagesLogger failedMessagesLogger;
-    private static int notificationRetryInterval;
-    public static final String ATLAS_NOTIFICATION_RETRY_INTERVAL = "atlas.notification.hook.retry.interval";
-
-    public static final String ATLAS_NOTIFICATION_FAILED_MESSAGES_FILENAME_KEY =
-            "atlas.notification.failed.messages.filename";
-    public static final String ATLAS_HOOK_FAILED_MESSAGES_LOG_DEFAULT_NAME = "atlas_hook_failed_messages.log";
-    public static final String ATLAS_NOTIFICATION_LOG_FAILED_MESSAGES_ENABLED_KEY =
-            "atlas.notification.log.failed.messages";
-
     static {
         try {
             atlasProperties = ApplicationProperties.get();
@@ -71,21 +60,6 @@ public abstract class AtlasHook {
             LOG.info("Failed to load application properties", e);
         }
 
-        String failedMessageFile = atlasProperties.getString(ATLAS_NOTIFICATION_FAILED_MESSAGES_FILENAME_KEY,
-                ATLAS_HOOK_FAILED_MESSAGES_LOG_DEFAULT_NAME);
-        logFailedMessages = atlasProperties.getBoolean(ATLAS_NOTIFICATION_LOG_FAILED_MESSAGES_ENABLED_KEY, true);
-        if (logFailedMessages) {
-            failedMessagesLogger = new FailedMessagesLogger(failedMessageFile);
-            failedMessagesLogger.init();
-        }
-
-        if (!isLoginKeytabBased()) {
-            if (isLoginTicketBased()) {
-                InMemoryJAASConfiguration.setConfigSectionRedirect("KafkaClient", "ticketBased-KafkaClient");
-            }
-        }
-
-        notificationRetryInterval = atlasProperties.getInt(ATLAS_NOTIFICATION_RETRY_INTERVAL, 1000);
         Injector injector = Guice.createInjector(new NotificationModule());
         notifInterface = injector.getInstance(NotificationInterface.class);
 
@@ -118,44 +92,20 @@ public abstract class AtlasHook {
      * @param maxRetries maximum number of retries while sending message to messaging system
      */
     public static void notifyEntities(List<HookNotification.HookNotificationMessage> messages, int maxRetries) {
-        notifyEntitiesInternal(messages, maxRetries, notifInterface, logFailedMessages, failedMessagesLogger);
-    }
-
-    @VisibleForTesting
-    static void notifyEntitiesInternal(List<HookNotification.HookNotificationMessage> messages, int maxRetries,
-                                       NotificationInterface notificationInterface,
-                                       boolean shouldLogFailedMessages, FailedMessagesLogger logger) {
-        if (messages == null || messages.isEmpty()) {
-            return;
-        }
-
         final String message = messages.toString();
+
         int numRetries = 0;
         while (true) {
             try {
-                notificationInterface.send(NotificationInterface.NotificationType.HOOK, messages);
+                notifInterface.send(NotificationInterface.NotificationType.HOOK, messages);
                 return;
-            } catch (Exception e) {
+            } catch(Exception e) {
                 numRetries++;
                 if (numRetries < maxRetries) {
-                    LOG.error("Failed to send notification - attempt #{}; error={}", numRetries, e.getMessage());
-                    try {
-                        LOG.debug("Sleeping for {} ms before retry", notificationRetryInterval);
-                        Thread.sleep(notificationRetryInterval);
-                    } catch (InterruptedException ie){
-                        LOG.error("Notification hook thread sleep interrupted");
-                    }
-
+                    LOG.debug("Failed to notify atlas for entity {}. Retrying", message, e);
                 } else {
-                    if (shouldLogFailedMessages && e instanceof NotificationException) {
-                        List<String> failedMessages = ((NotificationException) e).getFailedMessages();
-                        for (String msg : failedMessages) {
-                            logger.log(msg);
-                        }
-                    }
                     LOG.error("Failed to notify atlas for entity {} after {} retries. Quitting",
                             message, maxRetries, e);
-                    return;
                 }
             }
         }
@@ -182,10 +132,6 @@ public abstract class AtlasHook {
         return getUser(null, null);
     }
 
-    public static String getUser(String userName) {
-        return getUser(userName, null);
-    }
-
     /**
      * Returns the user. Order of preference:
      * 1. Given userName
@@ -196,49 +142,18 @@ public abstract class AtlasHook {
 
     public static String getUser(String userName, UserGroupInformation ugi) {
         if (StringUtils.isNotEmpty(userName)) {
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Returning userName {}", userName);
-            }
             return userName;
         }
 
         if (ugi != null && StringUtils.isNotEmpty(ugi.getShortUserName())) {
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Returning ugi.getShortUserName {}", userName);
-            }
             return ugi.getShortUserName();
         }
 
         try {
             return UserGroupInformation.getCurrentUser().getShortUserName();
         } catch (IOException e) {
-            LOG.warn("Failed for UserGroupInformation.getCurrentUser() ", e);
+            LOG.warn("Failed for UserGroupInformation.getCurrentUser()");
             return System.getProperty("user.name");
         }
     }
-
-    private static boolean isLoginKeytabBased() {
-        boolean ret = false;
-
-        try {
-            ret = UserGroupInformation.isLoginKeytabBased();
-        } catch (Exception excp) {
-            LOG.error("error in determining whether to use ticket-cache or keytab for KafkaClient JAAS configuration", excp);
-        }
-
-        return ret;
-    }
-
-    private static boolean isLoginTicketBased() {
-        boolean ret = false;
-
-        try {
-            ret = UserGroupInformation.isLoginTicketBased();
-        } catch (Exception excp) {
-            LOG.error("error in determining whether to use ticket-cache or keytab for KafkaClient JAAS configuration", excp);
-        }
-
-        return ret;
-    }
-
 }