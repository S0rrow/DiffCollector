diff --git a/core/src/main/java/org/apache/accumulo/core/cli/ClientOpts.java b/core/src/main/java/org/apache/accumulo/core/cli/ClientOpts.java
index 1d26a00a90..210d023c39 100644
--- a/core/src/main/java/org/apache/accumulo/core/cli/ClientOpts.java
+++ b/core/src/main/java/org/apache/accumulo/core/cli/ClientOpts.java
@@ -16,9 +16,10 @@
  */
 package org.apache.accumulo.core.cli;
 
-import java.util.LinkedHashMap;
-import java.util.Map;
+import java.nio.charset.Charset;
+import java.util.Iterator;
 import java.util.Map.Entry;
+import java.util.TreeMap;
 import java.util.UUID;
 
 import org.apache.accumulo.core.Constants;
@@ -27,21 +28,18 @@ import org.apache.accumulo.core.client.AccumuloSecurityException;
 import org.apache.accumulo.core.client.Connector;
 import org.apache.accumulo.core.client.Instance;
 import org.apache.accumulo.core.client.ZooKeeperInstance;
-import org.apache.accumulo.core.client.impl.thrift.SecurityErrorCode;
 import org.apache.accumulo.core.client.mapreduce.AccumuloInputFormat;
 import org.apache.accumulo.core.client.mapreduce.AccumuloOutputFormat;
 import org.apache.accumulo.core.client.mock.MockInstance;
-import org.apache.accumulo.core.client.security.tokens.AuthenticationToken;
-import org.apache.accumulo.core.client.security.tokens.AuthenticationToken.Properties;
-import org.apache.accumulo.core.client.security.tokens.PasswordToken;
 import org.apache.accumulo.core.conf.AccumuloConfiguration;
-import org.apache.accumulo.core.conf.ClientConfiguration;
-import org.apache.accumulo.core.conf.ClientConfiguration.ClientProperty;
 import org.apache.accumulo.core.conf.DefaultConfiguration;
 import org.apache.accumulo.core.conf.Property;
 import org.apache.accumulo.core.security.Authorizations;
 import org.apache.accumulo.core.security.ColumnVisibility;
-import org.apache.accumulo.core.zookeeper.ZooUtil;
+import org.apache.accumulo.core.security.CredentialHelper;
+import org.apache.accumulo.core.security.thrift.Credential;
+import org.apache.accumulo.core.security.thrift.tokens.PasswordToken;
+import org.apache.accumulo.core.security.thrift.tokens.SecurityToken;
 import org.apache.accumulo.trace.instrument.Trace;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.Path;
@@ -49,7 +47,6 @@ import org.apache.hadoop.mapreduce.Job;
 import org.apache.log4j.Level;
 import org.apache.log4j.Logger;
 
-import com.beust.jcommander.DynamicParameter;
 import com.beust.jcommander.IStringConverter;
 import com.beust.jcommander.Parameter;
 
@@ -80,7 +77,7 @@ public class ClientOpts extends Help {
     public byte[] value;
     
     public Password(String dfault) {
-      value = dfault.getBytes(Constants.UTF8);
+      value = dfault.getBytes(Charset.forName("UTF-8"));
     }
     
     @Override
@@ -107,41 +104,19 @@ public class ClientOpts extends Help {
   public String principal = System.getProperty("user.name");
   
   @Parameter(names = "-p", converter = PasswordConverter.class, description = "Connection password")
-  public Password password = null;
+  public Password password = new Password("secret");
   
   @Parameter(names = "--password", converter = PasswordConverter.class, description = "Enter the connection password", password = true)
   public Password securePassword = null;
   
-  @Parameter(names = {"-tc", "--tokenClass"}, description = "Token class")
-  public String tokenClassName = PasswordToken.class.getName();
-  
-  @DynamicParameter(names = "-l",
-      description = "login properties in the format key=value. Reuse -l for each property (prompt for properties if this option is missing")
-  public Map<String,String> loginProps = new LinkedHashMap<String,String>();
-  
-  public AuthenticationToken getToken() {
-    if (!loginProps.isEmpty()) {
-      Properties props = new Properties();
-      for (Entry<String,String> loginOption : loginProps.entrySet())
-        props.put(loginOption.getKey(), loginOption.getValue());
-      
-      try {
-        AuthenticationToken token = Class.forName(tokenClassName).asSubclass(AuthenticationToken.class).newInstance();
-        token.init(props);
-        return token;
-      } catch (Exception e) {
-        throw new RuntimeException(e);
-      }
-      
+  public SecurityToken getToken() {
+    PasswordToken pt = new PasswordToken();
+    if (securePassword == null) {
+      if (password.value == null)
+        return null;
+      return pt.setPassword(password.value);
     }
-    
-    if (securePassword != null)
-      return new PasswordToken(securePassword.value);
-    
-    if (password != null)
-      return new PasswordToken(password.value);
-    
-    return null;
+    return pt.setPassword(securePassword.value);
   }
   
   @Parameter(names = {"-z", "--keepers"}, description = "Comma separated list of zookeeper hosts (host:port,host:port)")
@@ -151,7 +126,7 @@ public class ClientOpts extends Help {
   public String instance = null;
   
   @Parameter(names = {"-auths", "--auths"}, converter = AuthConverter.class, description = "the authorizations to use when reading or writing")
-  public Authorizations auths = Authorizations.EMPTY;
+  public Authorizations auths = Constants.NO_AUTHS;
   
   @Parameter(names = "--debug", description = "turn on TRACE-level log messages")
   public boolean debug = false;
@@ -162,12 +137,6 @@ public class ClientOpts extends Help {
   @Parameter(names = "--site-file", description = "Read the given accumulo site file to find the accumulo instance")
   public String siteFile = null;
   
-  @Parameter(names = "--ssl", description = "Connect to accumulo over SSL")
-  public boolean sslEnabled = false;
-
-  @Parameter(names = "--config-file", description = "Read the given client config file.  If omitted, the path searched can be specified with $ACCUMULO_CLIENT_CONF_PATH, which defaults to ~/.accumulo/config:$ACCUMULO_CONF_DIR/client.conf:/etc/accumulo/client.conf")
-  public String clientConfigFile = null;
-
   public void startDebugLogging() {
     if (debug)
       Logger.getLogger(Constants.CORE_PACKAGE_NAME).setLevel(Level.TRACE);
@@ -194,39 +163,13 @@ public class ClientOpts extends Help {
   }
   
   protected Instance cachedInstance = null;
-  protected ClientConfiguration cachedClientConfig = null;
   
+  @SuppressWarnings("deprecation")
   synchronized public Instance getInstance() {
     if (cachedInstance != null)
       return cachedInstance;
     if (mock)
       return cachedInstance = new MockInstance(instance);
-    return cachedInstance = new ZooKeeperInstance(this.getClientConfiguration());
-  }
-
-  public Connector getConnector() throws AccumuloException, AccumuloSecurityException {
-    if (this.principal == null || this.getToken() == null)
-      throw new AccumuloSecurityException("You must provide a user (-u) and password (-p)", SecurityErrorCode.BAD_CREDENTIALS);
-    return getInstance().getConnector(principal, getToken());
-  }
-
-  public void setAccumuloConfigs(Job job) throws AccumuloSecurityException {
-    AccumuloInputFormat.setZooKeeperInstance(job, this.getClientConfiguration());
-    AccumuloOutputFormat.setZooKeeperInstance(job, this.getClientConfiguration());
-  }
-
-  protected ClientConfiguration getClientConfiguration() throws IllegalArgumentException {
-    if (cachedClientConfig != null)
-      return cachedClientConfig;
-
-    ClientConfiguration clientConfig;
-    try {
-      clientConfig = ClientConfiguration.loadDefault(clientConfigFile);
-    } catch (Exception e) {
-      throw new IllegalArgumentException(e);
-    }
-    if (sslEnabled)
-      clientConfig.setProperty(ClientProperty.INSTANCE_RPC_SSL_ENABLED, "true");
     if (siteFile != null) {
       AccumuloConfiguration config = new AccumuloConfiguration() {
         Configuration xml = new Configuration();
@@ -235,13 +178,13 @@ public class ClientOpts extends Help {
         }
         
         @Override
-        public void getProperties(Map<String,String> props, PropertyFilter filter) {
-          for (Entry<String,String> prop : DefaultConfiguration.getInstance())
-            if (filter.accept(prop.getKey()))
-              props.put(prop.getKey(), prop.getValue());
-          for (Entry<String,String> prop : xml)
-            if (filter.accept(prop.getKey()))
-              props.put(prop.getKey(), prop.getValue());
+        public Iterator<Entry<String,String>> iterator() {
+          TreeMap<String,String> map = new TreeMap<String,String>();
+          for (Entry<String,String> props : DefaultConfiguration.getInstance())
+            map.put(props.getKey(), props.getValue());
+          for (Entry<String,String> props : xml)
+            map.put(props.getKey(), props.getValue());
+          return map.entrySet().iterator();
         }
         
         @Override
@@ -254,12 +197,22 @@ public class ClientOpts extends Help {
       };
       this.zookeepers = config.get(Property.INSTANCE_ZK_HOST);
       Path instanceDir = new Path(config.get(Property.INSTANCE_DFS_DIR), "instance_id");
-      String instanceIDFromFile = ZooUtil.getInstanceIDFromHdfs(instanceDir);
-      if (config.getBoolean(Property.INSTANCE_RPC_SSL_ENABLED))
-        clientConfig.setProperty(ClientProperty.INSTANCE_RPC_SSL_ENABLED, "true");
-      return cachedClientConfig = clientConfig.withInstance(UUID.fromString(instanceIDFromFile)).withZkHosts(zookeepers);
+      return cachedInstance = new ZooKeeperInstance(UUID.fromString(ZooKeeperInstance.getInstanceIDFromHdfs(instanceDir)), zookeepers);
     }
-    return cachedClientConfig = clientConfig.withInstance(instance).withZkHosts(zookeepers);
+    return cachedInstance = new ZooKeeperInstance(this.instance, this.zookeepers);
+  }
+  
+  public Connector getConnector() throws AccumuloException, AccumuloSecurityException {
+    return getInstance().getConnector(this.principal, this.getToken());
+  }
+  
+  public Credential getCredentials() throws AccumuloSecurityException {
+    return CredentialHelper.create(principal, getToken(), getInstance().getInstanceID());
+  }
+  
+  public void setAccumuloConfigs(Job job) throws AccumuloSecurityException {
+    AccumuloInputFormat.setZooKeeperInstance(job, instance, zookeepers);
+    AccumuloOutputFormat.setZooKeeperInstance(job, instance, zookeepers);
   }
   
 }