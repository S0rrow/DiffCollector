diff --git a/artemis-protocols/artemis-openwire-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/openwire/amq/AMQServerConsumer.java b/artemis-protocols/artemis-openwire-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/openwire/amq/AMQServerConsumer.java
index 625adcd230..3e4159224a 100644
--- a/artemis-protocols/artemis-openwire-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/openwire/amq/AMQServerConsumer.java
+++ b/artemis-protocols/artemis-openwire-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/openwire/amq/AMQServerConsumer.java
@@ -1,4 +1,4 @@
-/*
+/**
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements. See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -18,7 +18,6 @@ package org.apache.activemq.artemis.core.protocol.openwire.amq;
 
 import java.util.List;
 
-import org.apache.activemq.artemis.api.core.ActiveMQException;
 import org.apache.activemq.artemis.core.filter.Filter;
 import org.apache.activemq.artemis.core.persistence.StorageManager;
 import org.apache.activemq.artemis.core.postoffice.QueueBinding;
@@ -32,56 +31,62 @@ import org.apache.activemq.artemis.core.server.impl.ServerConsumerImpl;
 import org.apache.activemq.artemis.core.server.management.ManagementService;
 import org.apache.activemq.artemis.spi.core.protocol.SessionCallback;
 
-public class AMQServerConsumer extends ServerConsumerImpl {
-
-   public AMQServerConsumer(long consumerID,
-                            AMQServerSession serverSession,
-                            QueueBinding binding,
-                            Filter filter,
-                            boolean started,
-                            boolean browseOnly,
-                            StorageManager storageManager,
-                            SessionCallback callback,
-                            boolean preAcknowledge,
-                            boolean strictUpdateDeliveryCount,
-                            ManagementService managementService,
-                            boolean supportLargeMessage,
-                            Integer credits) throws Exception {
-      super(consumerID, serverSession, binding, filter, started, browseOnly, storageManager, callback, preAcknowledge, strictUpdateDeliveryCount, managementService, supportLargeMessage, credits);
+public class AMQServerConsumer extends ServerConsumerImpl
+{
+
+   public AMQServerConsumer(long consumerID, AMQServerSession serverSession,
+         QueueBinding binding, Filter filter, boolean started,
+         boolean browseOnly, StorageManager storageManager,
+         SessionCallback callback, boolean preAcknowledge,
+         boolean strictUpdateDeliveryCount,
+         ManagementService managementService, boolean supportLargeMessage,
+         Integer credits) throws Exception
+   {
+      super(consumerID, serverSession, binding, filter, started, browseOnly, storageManager,
+            callback, preAcknowledge, strictUpdateDeliveryCount, managementService,
+            supportLargeMessage, credits);
    }
 
-   public void setBrowserListener(BrowserListener listener) {
+   public void setBrowserListener(BrowserListener listener)
+   {
       AMQBrowserDeliverer newBrowserDeliverer = new AMQBrowserDeliverer(this.browserDeliverer);
       newBrowserDeliverer.listener = listener;
       this.browserDeliverer = newBrowserDeliverer;
    }
 
-   private class AMQBrowserDeliverer extends BrowserDeliverer {
-
+   private class AMQBrowserDeliverer extends BrowserDeliverer
+   {
       private BrowserListener listener = null;
 
-      public AMQBrowserDeliverer(final BrowserDeliverer other) {
+      public AMQBrowserDeliverer(final BrowserDeliverer other)
+      {
          super(other.iterator);
       }
 
       @Override
-      public synchronized void run() {
+      public synchronized void run()
+      {
          // if the reference was busy during the previous iteration, handle it now
-         if (current != null) {
-            try {
+         if (current != null)
+         {
+            try
+            {
                HandleStatus status = handle(current);
 
-               if (status == HandleStatus.BUSY) {
+               if (status == HandleStatus.BUSY)
+               {
                   return;
                }
 
-               if (status == HandleStatus.HANDLED) {
+               if (status == HandleStatus.HANDLED)
+               {
                   proceedDeliver(current);
                }
 
                current = null;
             }
-            catch (Exception e) {
+            catch (Exception e)
+            {
                ActiveMQServerLogger.LOGGER.errorBrowserHandlingMessage(e, current);
                return;
             }
@@ -90,13 +95,18 @@ public class AMQServerConsumer extends ServerConsumerImpl {
          MessageReference ref = null;
          HandleStatus status;
 
-         while (true) {
-            try {
+         while (true)
+         {
+            try
+            {
                ref = null;
-               synchronized (messageQueue) {
-                  if (!iterator.hasNext()) {
+               synchronized (messageQueue)
+               {
+                  if (!iterator.hasNext())
+                  {
                      //here we need to send a null for amq browsers
-                     if (listener != null) {
+                     if (listener != null)
+                     {
                         listener.browseFinished();
                      }
                      break;
@@ -107,17 +117,20 @@ public class AMQServerConsumer extends ServerConsumerImpl {
                   status = handle(ref);
                }
 
-               if (status == HandleStatus.HANDLED) {
+               if (status == HandleStatus.HANDLED)
+               {
                   proceedDeliver(ref);
                }
-               else if (status == HandleStatus.BUSY) {
+               else if (status == HandleStatus.BUSY)
+               {
                   // keep a reference on the current message reference
                   // to handle it next time the browser deliverer is executed
                   current = ref;
                   break;
                }
             }
-            catch (Exception e) {
+            catch (Exception e)
+            {
                ActiveMQServerLogger.LOGGER.errorBrowserHandlingMessage(e, ref);
                break;
             }
@@ -125,45 +138,47 @@ public class AMQServerConsumer extends ServerConsumerImpl {
       }
    }
 
-   public void amqPutBackToDeliveringList(final List<MessageReference> refs) {
-      try {
-         synchronized (this.deliveringRefs) {
-            for (MessageReference ref : refs) {
-               ref.incrementDeliveryCount();
-               deliveringRefs.add(ref);
-            }
-            //adjust the order. Suppose deliveringRefs has 2 existing
-            //refs m1, m2, and refs has 3 m3, m4, m5
-            //new order must be m3, m4, m5, m1, m2
-            if (refs.size() > 0) {
-               long first = refs.get(0).getMessage().getMessageID();
-               MessageReference m = deliveringRefs.peek();
-               while (m.getMessage().getMessageID() != first) {
-                  deliveringRefs.poll();
-                  deliveringRefs.add(m);
-                  m = deliveringRefs.peek();
-               }
+   public void amqPutBackToDeliveringList(final List<MessageReference> refs)
+   {
+      synchronized (this.deliveringRefs)
+      {
+         for (MessageReference ref : refs)
+         {
+            ref.incrementDeliveryCount();
+            deliveringRefs.add(ref);
+         }
+         //adjust the order. Suppose deliveringRefs has 2 existing
+         //refs m1, m2, and refs has 3 m3, m4, m5
+         //new order must be m3, m4, m5, m1, m2
+         if (refs.size() > 0)
+         {
+            long first = refs.get(0).getMessage().getMessageID();
+            MessageReference m = deliveringRefs.peek();
+            while (m.getMessage().getMessageID() != first)
+            {
+               deliveringRefs.poll();
+               deliveringRefs.add(m);
+               m = deliveringRefs.peek();
             }
          }
       }
-      catch (ActiveMQException e) {
-         // TODO: what to do here?
-         throw new IllegalStateException(e.getMessage(), e);
-      }
    }
 
-   public void moveToDeadLetterAddress(long mid, Throwable cause) throws Exception {
+   public void moveToDeadLetterAddress(long mid, Throwable cause) throws Exception
+   {
       MessageReference ref = removeReferenceByID(mid);
 
-      if (ref == null) {
+      if (ref == null)
+      {
          throw new IllegalStateException("Cannot find ref to ack " + mid);
       }
 
       ServerMessage coreMsg = ref.getMessage();
       coreMsg.putStringProperty(OpenWireMessageConverter.AMQ_MSG_DLQ_DELIVERY_FAILURE_CAUSE_PROPERTY, cause.toString());
 
-      QueueImpl queue = (QueueImpl) ref.getQueue();
-      synchronized (queue) {
+      QueueImpl queue = (QueueImpl)ref.getQueue();
+      synchronized (queue)
+      {
          queue.sendToDeadLetterAddress(ref);
          queue.decDelivering();
       }