diff --git a/archiva-base/archiva-consumers/archiva-database-consumers/src/main/java/org/apache/maven/archiva/consumers/database/ProjectModelToDatabaseConsumer.java b/archiva-base/archiva-consumers/archiva-database-consumers/src/main/java/org/apache/maven/archiva/consumers/database/ProjectModelToDatabaseConsumer.java
index e586ac3d5..688e52add 100644
--- a/archiva-base/archiva-consumers/archiva-database-consumers/src/main/java/org/apache/maven/archiva/consumers/database/ProjectModelToDatabaseConsumer.java
+++ b/archiva-base/archiva-consumers/archiva-database-consumers/src/main/java/org/apache/maven/archiva/consumers/database/ProjectModelToDatabaseConsumer.java
@@ -21,45 +21,54 @@
 
 import org.apache.commons.lang.StringUtils;
 import org.apache.maven.archiva.configuration.ArchivaConfiguration;
+import org.apache.maven.archiva.configuration.ConfigurationNames;
 import org.apache.maven.archiva.configuration.RepositoryConfiguration;
 import org.apache.maven.archiva.consumers.AbstractMonitoredConsumer;
 import org.apache.maven.archiva.consumers.ConsumerException;
 import org.apache.maven.archiva.consumers.DatabaseUnprocessedArtifactConsumer;
+import org.apache.maven.archiva.consumers.database.project.WrappedDatabaseProjectModelResolver;
 import org.apache.maven.archiva.database.ArchivaDAO;
 import org.apache.maven.archiva.database.ArchivaDatabaseException;
 import org.apache.maven.archiva.database.ObjectNotFoundException;
 import org.apache.maven.archiva.model.ArchivaArtifact;
 import org.apache.maven.archiva.model.ArchivaProjectModel;
-import org.apache.maven.archiva.model.RepositoryProblem;
 import org.apache.maven.archiva.model.RepositoryURL;
-import org.apache.maven.archiva.reporting.artifact.CorruptArtifactReport;
+import org.apache.maven.archiva.model.RepositoryProblem;
 import org.apache.maven.archiva.repository.layout.BidirectionalRepositoryLayout;
 import org.apache.maven.archiva.repository.layout.BidirectionalRepositoryLayoutFactory;
-import org.apache.maven.archiva.repository.layout.FilenameParts;
 import org.apache.maven.archiva.repository.layout.LayoutException;
+import org.apache.maven.archiva.repository.layout.FilenameParts;
 import org.apache.maven.archiva.repository.layout.RepositoryLayoutUtils;
 import org.apache.maven.archiva.repository.project.ProjectModelException;
 import org.apache.maven.archiva.repository.project.ProjectModelFilter;
 import org.apache.maven.archiva.repository.project.ProjectModelReader;
+import org.apache.maven.archiva.repository.project.ProjectModelResolver;
 import org.apache.maven.archiva.repository.project.filters.EffectiveProjectModelFilter;
-import org.apache.maven.archiva.common.utils.VersionUtil;
+import org.apache.maven.archiva.repository.project.resolvers.RepositoryProjectModelResolverFactory;
+import org.apache.maven.archiva.reporting.artifact.CorruptArtifactReport;
+import org.codehaus.plexus.personality.plexus.lifecycle.phase.Initializable;
+import org.codehaus.plexus.personality.plexus.lifecycle.phase.InitializationException;
+import org.codehaus.plexus.registry.Registry;
+import org.codehaus.plexus.registry.RegistryListener;
 
 import java.io.File;
 import java.util.ArrayList;
+import java.util.Iterator;
 import java.util.List;
 
 /**
- * ProjectModelToDatabaseConsumer
+ * ProjectModelToDatabaseConsumer 
  *
  * @author <a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>
  * @version $Id$
+ * 
  * @plexus.component role="org.apache.maven.archiva.consumers.DatabaseUnprocessedArtifactConsumer"
- * role-hint="update-db-project"
- * instantiation-strategy="per-lookup"
+ *                   role-hint="update-db-project"
+ *                   instantiation-strategy="per-lookup"
  */
 public class ProjectModelToDatabaseConsumer
     extends AbstractMonitoredConsumer
-    implements DatabaseUnprocessedArtifactConsumer
+    implements DatabaseUnprocessedArtifactConsumer, RegistryListener, Initializable
 {
     /**
      * @plexus.configuration default-value="update-db-project"
@@ -101,12 +110,22 @@
      */
     private ProjectModelFilter expressionModelFilter;
 
+    /**
+     * @plexus.requirement
+     */
+    private RepositoryProjectModelResolverFactory resolverFactory;
+
     /**
      * @plexus.requirement role="org.apache.maven.archiva.repository.project.ProjectModelFilter"
-     * role-hint="effective"
+     *                     role-hint="effective"
      */
     private EffectiveProjectModelFilter effectiveModelFilter;
 
+    /**
+     * @plexus.requirement role-hint="database"
+     */
+    private ProjectModelResolver databaseResolver;
+
     private List includes;
 
     public ProjectModelToDatabaseConsumer()
@@ -166,31 +185,22 @@ public void processArchivaArtifact( ArchivaArtifact artifact )
             // Resolve the project model
             model = effectiveModelFilter.filter( model );
 
-            // The version should be updated to the filename version if it is a unique snapshot
-            FilenameParts parts = RepositoryLayoutUtils.splitFilename( artifactFile.getName(), null );
-            if ( model.getVersion().equals( VersionUtil.getBaseVersion( parts.version ) ) &&
-                VersionUtil.isUniqueSnapshot( parts.version ) )
-            {
-                model.setVersion( parts.version );
-            }
-
-            if ( isValidModel( model, artifact ) )
+            if( isValidModel( model, artifact ) )
             {
-                getLogger().info( "Add project model " + model + " to database." );
-
                 dao.getProjectModelDAO().saveProjectModel( model );
             }
             else
             {
-                getLogger().warn(
-                    "Invalid or corrupt pom. Project model " + model + " was not added in the database." );
+                getLogger().warn( "Invalid or corrupt pom. Project model " + model
+                    + " was not added in the database." );
             }
 
+            dao.getProjectModelDAO().saveProjectModel( model );
         }
         catch ( ProjectModelException e )
         {
             getLogger().warn( "Unable to read project model " + artifactFile + " : " + e.getMessage(), e );
-
+                        
             addProblem( artifact, "Unable to read project model " + artifactFile + " : " + e.getMessage() );
         }
         catch ( ArchivaDatabaseException e )
@@ -201,8 +211,9 @@ public void processArchivaArtifact( ArchivaArtifact artifact )
         catch ( Throwable t )
         {
             // Catch the other errors in the process to allow the rest of the process to complete.
-            getLogger().error( "Unable to process model " + artifactFile + " due to : " + t.getClass().getName() +
-                " : " + t.getMessage(), t );
+            getLogger().error(
+                               "Unable to process model " + artifactFile + " due to : " + t.getClass().getName()
+                                   + " : " + t.getMessage(), t );
         }
     }
 
@@ -262,10 +273,49 @@ public String getId()
 
     public boolean isPermanent()
     {
-        // Tells the configuration that this consumer cannot be disabled.
         return true;
     }
 
+    public void beforeConfigurationChange( Registry registry, String propertyName, Object propertyValue )
+    {
+        /* nothing to do here */
+    }
+
+    public void afterConfigurationChange( Registry registry, String propertyName, Object propertyValue )
+    {
+        if ( ConfigurationNames.isRepositories( propertyName ) )
+        {
+            update();
+        }
+    }
+
+    public void initialize()
+        throws InitializationException
+    {
+        update();
+        archivaConfiguration.addChangeListener( this );
+    }
+
+    private void update()
+    {
+        synchronized ( effectiveModelFilter )
+        {
+            effectiveModelFilter.clearResolvers();
+
+            // Add the database resolver first!
+            effectiveModelFilter.addProjectModelResolver( databaseResolver );
+
+            List ret = this.resolverFactory.getAllResolvers();
+            Iterator it = ret.iterator();
+            while ( it.hasNext() )
+            {
+                ProjectModelResolver resolver = (ProjectModelResolver) it.next();
+                ProjectModelResolver wrapped = new WrappedDatabaseProjectModelResolver( dao, resolver );
+                effectiveModelFilter.addProjectModelResolver( wrapped );
+            }
+        }
+    }
+
     private String toPath( ArchivaArtifact artifact )
     {
         try
@@ -288,7 +338,6 @@ private boolean isValidModel( ArchivaProjectModel model, ArchivaArtifact artifac
         try
         {
             FilenameParts parts = RepositoryLayoutUtils.splitFilename( artifactFile.getName(), null );
-
             if ( !parts.artifactId.equalsIgnoreCase( model.getArtifactId() ) )
             {
                 getLogger().warn( "Project Model " + model + " artifactId: " + model.getArtifactId() +
@@ -300,11 +349,10 @@ private boolean isValidModel( ArchivaProjectModel model, ArchivaArtifact artifac
                 return false;
             }
 
-            if ( !parts.version.equalsIgnoreCase( model.getVersion() ) &&
-                !VersionUtil.getBaseVersion( parts.version ).equalsIgnoreCase( model.getVersion() ) )
+            if ( !parts.version.equalsIgnoreCase( model.getVersion() ) )
             {
-                getLogger().warn( "Project Model " + model + " version: " + model.getVersion() +
-                    " does not match the pom file's version: " + parts.version );
+                getLogger().warn( "Project Model " + model + " artifactId: " + model.getArtifactId() +
+                    " does not match the pom file's artifactId: " + parts.artifactId );
 
                 addProblem( artifact, "Project Model " + model + " version: " + model.getVersion() +
                     " does not match the pom file's version: " + parts.version );
@@ -312,6 +360,18 @@ private boolean isValidModel( ArchivaProjectModel model, ArchivaArtifact artifac
                 return false;
             }
 
+            //check if the file name matches the values indicated in the pom
+           if( !artifactFile.getName().equalsIgnoreCase( model.getArtifactId() + "-" + model.getVersion() + "-" + parts.classifier) )
+            {
+                getLogger().warn( "Artifact " + artifact + " does not match the artifactId and/or version " +
+                    "specified in the project model " + model );
+
+                addProblem( artifact, "Artifact " + artifact + " does not match the artifactId and/or version " +
+                    "specified in the project model " + model );
+
+                return false;
+            }
+
         }
         catch ( LayoutException le )
         {
@@ -345,5 +405,4 @@ private void addProblem( ArchivaArtifact artifact, String msg )
             throw new ConsumerException( emsg, e );
         }
     }
-
 }