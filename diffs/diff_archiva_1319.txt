diff --git a/archiva-cli/src/main/java/org/apache/maven/archiva/cli/ArchivaCli.java b/archiva-cli/src/main/java/org/apache/maven/archiva/cli/ArchivaCli.java
index 921bd8883..26ee4db77 100644
--- a/archiva-cli/src/main/java/org/apache/maven/archiva/cli/ArchivaCli.java
+++ b/archiva-cli/src/main/java/org/apache/maven/archiva/cli/ArchivaCli.java
@@ -20,32 +20,19 @@
  */
 
 import org.apache.commons.cli.CommandLine;
-import org.apache.commons.cli.Option;
+import org.apache.commons.cli.OptionBuilder;
 import org.apache.commons.cli.Options;
 import org.apache.commons.lang.StringUtils;
-import org.apache.maven.archiva.common.utils.DateUtil;
-import org.apache.maven.archiva.consumers.ConsumerException;
-import org.apache.maven.archiva.consumers.RepositoryContentConsumer;
 import org.apache.maven.archiva.converter.RepositoryConversionException;
 import org.apache.maven.archiva.converter.legacy.LegacyRepositoryConverter;
-import org.apache.maven.archiva.model.ArchivaRepository;
-import org.apache.maven.archiva.model.RepositoryContentStatistics;
-import org.apache.maven.archiva.repository.RepositoryException;
-import org.apache.maven.archiva.repository.scanner.RepositoryScanner;
 import org.codehaus.plexus.PlexusContainer;
-import org.codehaus.plexus.component.repository.exception.ComponentLookupException;
 import org.codehaus.plexus.tools.cli.AbstractCli;
 
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
-import java.text.SimpleDateFormat;
-import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Collection;
-import java.util.Iterator;
 import java.util.List;
-import java.util.Map;
 import java.util.Properties;
 
 /**
@@ -60,12 +47,6 @@
 
     public static final char CONVERT = 'c';
 
-    public static final char SCAN = 's';
-
-    public static final char CONSUMERS = 'u';
-
-    public static final char LIST_CONSUMERS = 'l';
-
     // ----------------------------------------------------------------------------
     // Properties controlling Repository conversion
     // ----------------------------------------------------------------------------
@@ -87,36 +68,11 @@ public String getPomPropertiesPath()
         return "META-INF/maven/org.apache.maven.archiva/archiva-cli/pom.properties";
     }
 
-    private Option createOption( char shortOpt, String longOpt, int argCount, String description )
-    {
-        boolean hasArg = ( argCount > 0 );
-        Option opt = new Option( String.valueOf( shortOpt ), hasArg, description );
-        opt.setLongOpt( longOpt );
-        if ( hasArg )
-        {
-            opt.setArgs( argCount );
-        }
-        return opt;
-    }
-
     public Options buildCliOptions( Options options )
     {
-        Option convertOption = createOption( CONVERT, "convert", 1, "Convert a legacy Maven 1.x repository to a "
-            + "Maven 2.x repository using a properties file to describe the conversion." );
-        convertOption.setArgName( "conversion.properties" );
-        options.addOption( convertOption );
-
-        Option scanOption = createOption( SCAN, "scan", 1, "Scan the specified repository." );
-        scanOption.setArgName( "repository directory" );
-        options.addOption( scanOption );
-
-        Option consumerOption = createOption( CONSUMERS, "consumers", 1, "The consumers to use. "
-            + "(comma delimited. default: 'count-artifacts')" );
-        consumerOption.setArgName( "consumer list" );
-        options.addOption( consumerOption );
-
-        Option listConsumersOption = createOption( LIST_CONSUMERS, "listconsumers", 0, "List available consumers." );
-        options.addOption( listConsumersOption );
+        options.addOption( OptionBuilder.withLongOpt( "convert" ).hasArg().withDescription(
+            "Convert a legacy Maven 1.x repository to a Maven 2.x repository using a properties file to describe the conversion." )
+            .create( CONVERT ) );
 
         return options;
     }
@@ -124,147 +80,47 @@ public Options buildCliOptions( Options options )
     public void invokePlexusComponent( CommandLine cli, PlexusContainer plexus )
         throws Exception
     {
-        if ( cli.hasOption( CONVERT ) )
-        {
-            doConversion( cli, plexus );
-        }
-        else if ( cli.hasOption( SCAN ) )
-        {
-            doScan( cli, plexus );
-        }
-        else if ( cli.hasOption( LIST_CONSUMERS ) )
-        {
-            dumpAvailableConsumers( plexus );
-        }
-        else
-        {
-            displayHelp();
-        }
-    }
-
-    private void doScan( CommandLine cli, PlexusContainer plexus )
-        throws ConsumerException, ComponentLookupException
-    {
-        String path = cli.getOptionValue( SCAN );
-
-        ArchivaRepository repo = new ArchivaRepository( "cliRepo", "Archiva CLI Provided Repo", "file://" + path );
-
-        List consumerList = new ArrayList();
-
-        consumerList.addAll( getConsumerList( cli, plexus ) );
-
-        RepositoryScanner scanner = new RepositoryScanner();
-
-        try
-        {
-            RepositoryContentStatistics stats = scanner.scan( repo, consumerList, true );
+        LegacyRepositoryConverter legacyRepositoryConverter =
+            (LegacyRepositoryConverter) plexus.lookup( LegacyRepositoryConverter.ROLE );
 
-            SimpleDateFormat df = new SimpleDateFormat();
-            System.out.println( ".\\ Scan of " + repo.getId() + " \\.__________________________________________" );
-            System.out.println( "  Repository URL    : " + repo.getUrl() );
-            System.out.println( "  Repository Name   : " + repo.getModel().getName() );
-            System.out.println( "  Repository Layout : " + repo.getModel().getLayoutName() );
-            System.out.println( "  Duration          : " + DateUtil.getDuration( stats.getDuration() ) );
-            System.out.println( "  When Gathered     : " + df.format( stats.getWhenGathered() ) );
-            System.out.println( "  Total File Count  : " + stats.getTotalFileCount() );
-            System.out.println( "  New File Count    : " + stats.getNewFileCount() );
-            System.out.println( "______________________________________________________________" );
-        }
-        catch ( RepositoryException e )
-        {
-            e.printStackTrace( System.err );
-        }
-    }
-
-    private Collection getConsumerList( CommandLine cli, PlexusContainer plexus )
-        throws ComponentLookupException, ConsumerException
-    {
-        String specifiedConsumers = "count-artifacts";
-
-        if ( cli.hasOption( CONSUMERS ) )
+        if ( cli.hasOption( CONVERT ) )
         {
-            specifiedConsumers = cli.getOptionValue( CONSUMERS );
-        }
-
-        List consumerList = new ArrayList();
-
-        Map availableConsumers = plexus.lookupMap( RepositoryContentConsumer.class );
+            Properties p = new Properties();
 
-        String consumerArray[] = StringUtils.split( specifiedConsumers, ',' );
-
-        for ( int i = 0; i < consumerArray.length; i++ )
-        {
-            String specifiedConsumer = consumerArray[i];
-            if ( !availableConsumers.containsKey( specifiedConsumer ) )
+            try
             {
-                System.err.println( "Specified consumer [" + specifiedConsumer + "] not found." );
-                dumpAvailableConsumers( plexus );
-                System.exit( 1 );
+                p.load( new FileInputStream( cli.getOptionValue( CONVERT ) ) );
+            }
+            catch ( IOException e )
+            {
+                showFatalError( "Cannot find properties file which describes the conversion.", e, true );
             }
 
-            consumerList.add( availableConsumers.get( specifiedConsumer ) );
-        }
-
-        return consumerList;
-    }
-
-    private void dumpAvailableConsumers( PlexusContainer plexus )
-        throws ComponentLookupException
-    {
-        Map availableConsumers = plexus.lookupMap( RepositoryContentConsumer.class );
-
-        System.out.println( ".\\ Available Consumer List \\.______________________________" );
-
-        for ( Iterator iter = availableConsumers.entrySet().iterator(); iter.hasNext(); )
-        {
-            Map.Entry entry = (Map.Entry) iter.next();
-            String consumerHint = (String) entry.getKey();
-            RepositoryContentConsumer consumer = (RepositoryContentConsumer) entry.getValue();
-            System.out.println( "  " + consumerHint + ": " + consumer.getDescription() + " ("
-                + consumer.getClass().getName() + ")" );
-        }
-    }
-
-    private void doConversion( CommandLine cli, PlexusContainer plexus )
-        throws ComponentLookupException
-    {
-        LegacyRepositoryConverter legacyRepositoryConverter = (LegacyRepositoryConverter) plexus
-            .lookup( LegacyRepositoryConverter.ROLE );
-
-        Properties p = new Properties();
-
-        try
-        {
-            p.load( new FileInputStream( cli.getOptionValue( CONVERT ) ) );
-        }
-        catch ( IOException e )
-        {
-            showFatalError( "Cannot find properties file which describes the conversion.", e, true );
-        }
-
-        File oldRepositoryPath = new File( p.getProperty( SOURCE_REPO_PATH ) );
+            File oldRepositoryPath = new File( p.getProperty( SOURCE_REPO_PATH ) );
 
-        File newRepositoryPath = new File( p.getProperty( TARGET_REPO_PATH ) );
+            File newRepositoryPath = new File( p.getProperty( TARGET_REPO_PATH ) );
 
-        System.out.println( "Converting " + oldRepositoryPath + " to " + newRepositoryPath );
+            System.out.println( "Converting " + oldRepositoryPath + " to " + newRepositoryPath );
 
-        List fileExclusionPatterns = null;
+            List fileExclusionPatterns = null;
 
-        String s = p.getProperty( BLACKLISTED_PATTERNS );
+            String s = p.getProperty( BLACKLISTED_PATTERNS );
 
-        if ( s != null )
-        {
-            fileExclusionPatterns = Arrays.asList( StringUtils.split( s, "," ) );
-        }
+            if ( s != null )
+            {
+                fileExclusionPatterns = Arrays.asList( StringUtils.split( s, "," ) );
+            }
 
-        try
-        {
-            legacyRepositoryConverter.convertLegacyRepository( oldRepositoryPath, newRepositoryPath,
-                                                               fileExclusionPatterns, true );
-        }
-        catch ( RepositoryConversionException e )
-        {
-            showFatalError( "Error converting repository.", e, true );
+            try
+            {
+                legacyRepositoryConverter.convertLegacyRepository( oldRepositoryPath, newRepositoryPath,
+                                                                   fileExclusionPatterns,
+                                                                   true );
+            }
+            catch ( RepositoryConversionException e )
+            {
+                showFatalError( "Error converting repository.", e, true );
+            }
         }
     }
 }