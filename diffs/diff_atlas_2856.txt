diff --git a/intg/src/main/java/org/apache/atlas/type/AtlasTypeRegistry.java b/intg/src/main/java/org/apache/atlas/type/AtlasTypeRegistry.java
index aebd4d1ac..4b2e32520 100644
--- a/intg/src/main/java/org/apache/atlas/type/AtlasTypeRegistry.java
+++ b/intg/src/main/java/org/apache/atlas/type/AtlasTypeRegistry.java
@@ -17,1114 +17,426 @@
  */
 package org.apache.atlas.type;
 
+import org.apache.atlas.exception.AtlasBaseException;
+import org.apache.atlas.model.typedef.*;
 import static org.apache.atlas.model.typedef.AtlasBaseTypeDef.ATLAS_TYPE_ARRAY_PREFIX;
 import static org.apache.atlas.model.typedef.AtlasBaseTypeDef.ATLAS_TYPE_ARRAY_SUFFIX;
-import static org.apache.atlas.model.typedef.AtlasBaseTypeDef.ATLAS_TYPE_MAP_KEY_VAL_SEP;
 import static org.apache.atlas.model.typedef.AtlasBaseTypeDef.ATLAS_TYPE_MAP_PREFIX;
 import static org.apache.atlas.model.typedef.AtlasBaseTypeDef.ATLAS_TYPE_MAP_SUFFIX;
+import static org.apache.atlas.model.typedef.AtlasBaseTypeDef.ATLAS_TYPE_MAP_KEY_VAL_SEP;
+import org.apache.commons.lang.StringUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
-import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
-import java.util.List;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.locks.ReentrantLock;
 
-import javax.inject.Singleton;
-
-import org.apache.atlas.AtlasErrorCode;
-import org.apache.atlas.exception.AtlasBaseException;
-import org.apache.atlas.model.typedef.AtlasBaseTypeDef;
-import org.apache.atlas.model.typedef.AtlasClassificationDef;
-import org.apache.atlas.model.typedef.AtlasEntityDef;
-import org.apache.atlas.model.typedef.AtlasEnumDef;
-import org.apache.atlas.model.typedef.AtlasRelationshipDef;
-import org.apache.atlas.model.typedef.AtlasStructDef;
-import org.apache.atlas.model.typedef.AtlasTypesDef;
-import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-import org.springframework.stereotype.Component;
 /**
  * registry for all types defined in Atlas.
  */
-@Singleton
-@Component
 public class AtlasTypeRegistry {
     private static final Logger LOG = LoggerFactory.getLogger(AtlasStructType.class);
-    private static final int    DEFAULT_LOCK_MAX_WAIT_TIME_IN_SECONDS = 15;
 
-    protected       RegistryData                   registryData;
-    private   final TypeRegistryUpdateSynchronizer updateSynchronizer;
+    private final Map<String, AtlasType>               allTypes;
+    private final TypeDefCache<AtlasEnumDef>           enumDefs;
+    private final TypeDefCache<AtlasStructDef>         structDefs;
+    private final TypeDefCache<AtlasClassificationDef> classificationDefs;
+    private final TypeDefCache<AtlasEntityDef>         entityDefs;
+
 
     public AtlasTypeRegistry() {
-        registryData       = new RegistryData();
-        updateSynchronizer = new TypeRegistryUpdateSynchronizer(this);
-    }
+        allTypes           = new ConcurrentHashMap<String, AtlasType>();
+        enumDefs           = new TypeDefCache<AtlasEnumDef>(this);
+        structDefs         = new TypeDefCache<AtlasStructDef>(this);
+        classificationDefs = new TypeDefCache<AtlasClassificationDef>(this);
+        entityDefs         = new TypeDefCache<AtlasEntityDef>(this);
 
-    // used only by AtlasTransientTypeRegistry
-    protected AtlasTypeRegistry(AtlasTypeRegistry other) {
-        registryData       = new RegistryData();
-        updateSynchronizer = other.updateSynchronizer;
+        registerType(new AtlasBuiltInTypes.AtlasBooleanType());
+        registerType(new AtlasBuiltInTypes.AtlasByteType());
+        registerType(new AtlasBuiltInTypes.AtlasShortType());
+        registerType(new AtlasBuiltInTypes.AtlasIntType());
+        registerType(new AtlasBuiltInTypes.AtlasLongType());
+        registerType(new AtlasBuiltInTypes.AtlasFloatType());
+        registerType(new AtlasBuiltInTypes.AtlasDoubleType());
+        registerType(new AtlasBuiltInTypes.AtlasBigIntegerType());
+        registerType(new AtlasBuiltInTypes.AtlasBigDecimalType());
+        registerType(new AtlasBuiltInTypes.AtlasDateType());
+        registerType(new AtlasBuiltInTypes.AtlasStringType());
+        registerType(new AtlasBuiltInTypes.AtlasObjectIdType());
     }
 
-    public Collection<String> getAllTypeNames() { return registryData.allTypes.getAllTypeNames(); }
-
-    public Collection<AtlasType> getAllTypes() { return registryData.allTypes.getAllTypes(); }
-
-    public boolean isRegisteredType(String typeName) {
-        return registryData.allTypes.isKnownType(typeName);
+    public void resolveReferences() throws AtlasBaseException {
+        for (Map.Entry<String, AtlasType> e : allTypes.entrySet()) {
+            e.getValue().resolveReferences(this);
+        }
     }
 
-    public AtlasType getType(String typeName) throws AtlasBaseException {
+    public Collection<String> getAllTypeNames() { return Collections.unmodifiableSet(allTypes.keySet()); }
+
+    public AtlasType getType(String typeName) {
         if (LOG.isDebugEnabled()) {
-            LOG.debug("==> AtlasTypeRegistry.getType({})", typeName);
+            LOG.debug("==> AtlasTypeRegistry.getType(" + typeName + ")");
         }
 
-        AtlasType ret = registryData.allTypes.getTypeByName(typeName);
+        AtlasType ret = allTypes.get(typeName);
 
         if (ret == null) {
-            if (typeName.startsWith(ATLAS_TYPE_ARRAY_PREFIX) && typeName.endsWith(ATLAS_TYPE_ARRAY_SUFFIX)) {
-                int    startIdx        = ATLAS_TYPE_ARRAY_PREFIX.length();
-                int    endIdx          = typeName.length() - ATLAS_TYPE_ARRAY_SUFFIX.length();
-                String elementTypeName = typeName.substring(startIdx, endIdx);
-
-                ret = new AtlasArrayType(elementTypeName, this);
-            } else if (typeName.startsWith(ATLAS_TYPE_MAP_PREFIX) && typeName.endsWith(ATLAS_TYPE_MAP_SUFFIX)) {
-                int      startIdx      = ATLAS_TYPE_MAP_PREFIX.length();
-                int      endIdx        = typeName.length() - ATLAS_TYPE_MAP_SUFFIX.length();
-                String[] keyValueTypes = typeName.substring(startIdx, endIdx).split(ATLAS_TYPE_MAP_KEY_VAL_SEP, 2);
-                String   keyTypeName   = keyValueTypes.length > 0 ? keyValueTypes[0] : null;
-                String   valueTypeName = keyValueTypes.length > 1 ? keyValueTypes[1] : null;
-
-                ret = new AtlasMapType(keyTypeName, valueTypeName, this);
-            } else {
-                throw new AtlasBaseException(AtlasErrorCode.TYPE_NAME_NOT_FOUND, typeName);
+            try {
+                if (typeName.startsWith(ATLAS_TYPE_ARRAY_PREFIX) && typeName.endsWith(ATLAS_TYPE_ARRAY_SUFFIX)) {
+                    int startIdx = ATLAS_TYPE_ARRAY_PREFIX.length();
+                    int endIdx = typeName.length() - ATLAS_TYPE_ARRAY_SUFFIX.length();
+                    String elementTypeName = typeName.substring(startIdx, endIdx);
+
+                    ret = new AtlasArrayType(elementTypeName, this);
+                } else if (typeName.startsWith(ATLAS_TYPE_MAP_PREFIX) && typeName.endsWith(ATLAS_TYPE_MAP_SUFFIX)) {
+                    int startIdx = ATLAS_TYPE_MAP_PREFIX.length();
+                    int endIdx = typeName.length() - ATLAS_TYPE_MAP_SUFFIX.length();
+                    String[] keyValueTypes = typeName.substring(startIdx, endIdx).split(ATLAS_TYPE_MAP_KEY_VAL_SEP, 2);
+                    String keyTypeName = keyValueTypes.length > 0 ? keyValueTypes[0] : null;
+                    String valueTypeName = keyValueTypes.length > 1 ? keyValueTypes[1] : null;
+
+                    ret = new AtlasMapType(keyTypeName, valueTypeName, this);
+                }
+            } catch(AtlasBaseException excp) {
+                LOG.warn("failed to instantiate type for " + typeName, excp);
             }
         }
 
         if (LOG.isDebugEnabled()) {
-            LOG.debug("<== AtlasTypeRegistry.getType({}): {}", typeName, ret);
+            LOG.debug("<== AtlasTypeRegistry.getType(" + typeName + ")");
         }
 
         return ret;
     }
 
-    public AtlasType getTypeByGuid(String guid) {
+
+    public void addEnumDef(AtlasEnumDef enumDef) {
         if (LOG.isDebugEnabled()) {
-            LOG.debug("==> AtlasTypeRegistry.getTypeByGuid({})", guid);
+            LOG.debug("==> AtlasTypeRegistry.addEnumDef(" + enumDef + ")");
         }
 
-        AtlasType ret = registryData.allTypes.getTypeByGuid(guid);
+        enumDefs.addType(enumDef, new AtlasEnumType(enumDef));
 
         if (LOG.isDebugEnabled()) {
-            LOG.debug("<== AtlasTypeRegistry.getTypeByGuid({}): {}", guid, ret);
+            LOG.debug("<== AtlasTypeRegistry.addEnumDef(" + enumDef + ")");
         }
-
-        return ret;
     }
 
-    public AtlasBaseTypeDef getTypeDefByName(String name) { return registryData.getTypeDefByName(name); }
-
-    public AtlasBaseTypeDef getTypeDefByGuid(String guid) { return registryData.getTypeDefByGuid(guid); }
-
-
-    public Collection<AtlasEnumDef> getAllEnumDefs() { return registryData.enumDefs.getAll(); }
+    public Collection<AtlasEnumDef> getAllEnumDefs() { return enumDefs.getAll(); }
 
     public AtlasEnumDef getEnumDefByGuid(String guid) {
-        return registryData.enumDefs.getTypeDefByGuid(guid);
+        return enumDefs.getTypeDefByGuid(guid);
     }
 
     public AtlasEnumDef getEnumDefByName(String name) {
-        return registryData.enumDefs.getTypeDefByName(name);
-    }
-
-    public Collection<String> getAllEnumDefNames() { return registryData.enumDefs.getAllNames(); }
-
-    public Collection<AtlasEnumType> getAllEnumTypes() { return registryData.enumDefs.getAllTypes(); }
-
-    public AtlasEnumType getEnumTypeByName(String name) { return registryData.enumDefs.getTypeByName(name); }
-
-
-    public Collection<AtlasStructDef> getAllStructDefs() { return registryData.structDefs.getAll(); }
-
-    public AtlasStructDef getStructDefByGuid(String guid) {
-        return registryData.structDefs.getTypeDefByGuid(guid);
-    }
-
-    public AtlasStructDef getStructDefByName(String name) { return registryData.structDefs.getTypeDefByName(name); }
-
-    public Collection<String> getAllStructDefNames() { return registryData.structDefs.getAllNames(); }
-
-    public Collection<AtlasStructType> getAllStructTypes() { return registryData.structDefs.getAllTypes(); }
-
-    public AtlasStructType getStructTypeByName(String name) { return registryData.structDefs.getTypeByName(name); }
-
-
-    public Collection<AtlasClassificationDef> getAllClassificationDefs() {
-        return registryData.classificationDefs.getAll();
-    }
-
-    public AtlasClassificationDef getClassificationDefByGuid(String guid) {
-        return registryData.classificationDefs.getTypeDefByGuid(guid);
+        return enumDefs.getTypeDefByName(name);
     }
 
-    public AtlasClassificationDef getClassificationDefByName(String name) {
-        return registryData.classificationDefs.getTypeDefByName(name);
-    }
-
-    public Collection<String> getAllClassificationDefNames() { return registryData.classificationDefs.getAllNames(); }
-
-    public Collection<AtlasClassificationType> getAllClassificationTypes() {
-        return registryData.classificationDefs.getAllTypes();
-    }
-
-    public AtlasClassificationType getClassificationTypeByName(String name) {
-        return registryData.classificationDefs.getTypeByName(name);
-    }
-
-
-    public Collection<AtlasEntityDef> getAllEntityDefs() { return registryData.entityDefs.getAll(); }
-    public AtlasEntityDef getEntityDefByGuid(String guid) {
-        return registryData.entityDefs.getTypeDefByGuid(guid);
-    }
-
-    public AtlasEntityDef getEntityDefByName(String name) {
-        return registryData.entityDefs.getTypeDefByName(name);
-    }
-
-    public Collection<String> getAllEntityDefNames() { return registryData.entityDefs.getAllNames(); }
-    public Collection<AtlasEntityType> getAllEntityTypes() { return registryData.entityDefs.getAllTypes(); }
-    public AtlasEntityType getEntityTypeByName(String name) { return registryData.entityDefs.getTypeByName(name); }
-    /**
-     * @return relationshipTypes
-     */
-    public Collection<AtlasRelationshipType> getAllRelationshipTypes() { return registryData.relationshipDefs.getAllTypes(); }
-
-    public AtlasRelationshipDef getRelationshipDefByGuid(String guid) {
-        return registryData.relationshipDefs.getTypeDefByGuid(guid);
-    }
-    public AtlasRelationshipDef getRelationshipDefByName(String name) {
-        return registryData.relationshipDefs.getTypeDefByName(name);
-    }
-    public AtlasRelationshipType getRelationshipTypeByName(String name) { return registryData.relationshipDefs.getTypeByName(name); }
-    public AtlasTransientTypeRegistry lockTypeRegistryForUpdate() throws AtlasBaseException {
-        return lockTypeRegistryForUpdate(DEFAULT_LOCK_MAX_WAIT_TIME_IN_SECONDS);
-    }
-
-    public AtlasTransientTypeRegistry lockTypeRegistryForUpdate(int lockMaxWaitTimeInSeconds) throws AtlasBaseException {
-        return updateSynchronizer.lockTypeRegistryForUpdate(lockMaxWaitTimeInSeconds);
-    }
-
-    public void releaseTypeRegistryForUpdate(AtlasTransientTypeRegistry transientTypeRegistry, boolean commitUpdates) {
-        updateSynchronizer.releaseTypeRegistryForUpdate(transientTypeRegistry, commitUpdates);
-    }
-
-
-    static class RegistryData {
-        final TypeCache                                                       allTypes;
-        final TypeDefCache<AtlasEnumDef, AtlasEnumType>                       enumDefs;
-        final TypeDefCache<AtlasStructDef, AtlasStructType>                   structDefs;
-        final TypeDefCache<AtlasClassificationDef, AtlasClassificationType>   classificationDefs;
-        final TypeDefCache<AtlasEntityDef, AtlasEntityType>                   entityDefs;
-        final TypeDefCache<AtlasRelationshipDef, AtlasRelationshipType>       relationshipDefs;
-        final TypeDefCache<? extends AtlasBaseTypeDef, ? extends AtlasType>[] allDefCaches;
-
-        RegistryData() {
-            allTypes           = new TypeCache();
-            enumDefs           = new TypeDefCache<>(allTypes);
-            structDefs         = new TypeDefCache<>(allTypes);
-            classificationDefs = new TypeDefCache<>(allTypes);
-            entityDefs         = new TypeDefCache<>(allTypes);
-            relationshipDefs   = new TypeDefCache<>(allTypes);
-            allDefCaches       = new TypeDefCache[] { enumDefs, structDefs, classificationDefs, entityDefs, relationshipDefs };
-
-            init();
-        }
-
-        void init() {
-            allTypes.addType(new AtlasBuiltInTypes.AtlasBooleanType());
-            allTypes.addType(new AtlasBuiltInTypes.AtlasByteType());
-            allTypes.addType(new AtlasBuiltInTypes.AtlasShortType());
-            allTypes.addType(new AtlasBuiltInTypes.AtlasIntType());
-            allTypes.addType(new AtlasBuiltInTypes.AtlasLongType());
-            allTypes.addType(new AtlasBuiltInTypes.AtlasFloatType());
-            allTypes.addType(new AtlasBuiltInTypes.AtlasDoubleType());
-            allTypes.addType(new AtlasBuiltInTypes.AtlasBigIntegerType());
-            allTypes.addType(new AtlasBuiltInTypes.AtlasBigDecimalType());
-            allTypes.addType(new AtlasBuiltInTypes.AtlasDateType());
-            allTypes.addType(new AtlasBuiltInTypes.AtlasStringType());
-            allTypes.addType(new AtlasBuiltInTypes.AtlasObjectIdType());
+    public void removeEnumDefByGuid(String guid) {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("==> AtlasTypeRegistry.removeEnumDefByGuid(" + guid + ")");
         }
 
-        AtlasBaseTypeDef getTypeDefByName(String name) {
-            AtlasBaseTypeDef ret = null;
+        AtlasEnumDef enumDef = enumDefs.getTypeDefByGuid(guid);
 
-            if (name != null) {
-                for (TypeDefCache typeDefCache : allDefCaches) {
-                    ret = typeDefCache.getTypeDefByName(name);
-
-                    if (ret != null) {
-                        break;
-                    }
-                }
-            }
-
-            return ret;
+        if (enumDef != null) {
+            enumDefs.removeTypeDefByGuid(guid);
         }
 
-        AtlasBaseTypeDef getTypeDefByGuid(String guid) {
-            AtlasBaseTypeDef ret = null;
-
-            if (guid != null) {
-                for (TypeDefCache typeDefCache : allDefCaches) {
-                    ret = typeDefCache.getTypeDefByGuid(guid);
-
-                    if (ret != null) {
-                        break;
-                    }
-                }
-            }
-
-            return ret;
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("<== AtlasTypeRegistry.removeEnumDefByGuid(" + guid + ")");
         }
+    }
 
-        void updateGuid(String typeName, String guid) {
-            if (typeName != null) {
-                enumDefs.updateGuid(typeName, guid);
-                structDefs.updateGuid(typeName, guid);
-                classificationDefs.updateGuid(typeName, guid);
-                entityDefs.updateGuid(typeName, guid);
-                relationshipDefs.updateGuid(typeName, guid);
-            }
+    public void removeEnumDefByName(String name) {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("==> AtlasTypeRegistry.removeEnumDefByName(" + name + ")");
         }
 
-        void removeByGuid(String guid) {
-            if (guid != null) {
-                enumDefs.removeTypeDefByGuid(guid);
-                structDefs.removeTypeDefByGuid(guid);
-                classificationDefs.removeTypeDefByGuid(guid);
-                entityDefs.removeTypeDefByGuid(guid);
-                relationshipDefs.removeTypeDefByGuid(guid);
-            }
-        }
+        AtlasEnumDef enumDef = enumDefs.getTypeDefByName(name);
 
-        void removeByName(String typeName) {
-            if (typeName != null) {
-                enumDefs.removeTypeDefByName(typeName);
-                structDefs.removeTypeDefByName(typeName);
-                classificationDefs.removeTypeDefByName(typeName);
-                entityDefs.removeTypeDefByName(typeName);
-                relationshipDefs.removeTypeDefByName(typeName);
-            }
+        if (enumDef != null) {
+            enumDefs.removeTypeDefByName(name);
         }
 
-        void clear() {
-            allTypes.clear();
-            enumDefs.clear();
-            structDefs.clear();
-            classificationDefs.clear();
-            entityDefs.clear();
-            relationshipDefs.clear();
-
-            init();
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("<== AtlasTypeRegistry.removeEnumDefByName(" + name + ")");
         }
     }
 
-    public static class AtlasTransientTypeRegistry extends AtlasTypeRegistry {
-        private List<AtlasBaseTypeDef> addedTypes   = new ArrayList<>();
-        private List<AtlasBaseTypeDef> updatedTypes = new ArrayList<>();
-        private List<AtlasBaseTypeDef> deletedTypes = new ArrayList<>();
-
 
-        private AtlasTransientTypeRegistry(AtlasTypeRegistry parent) throws AtlasBaseException {
-            super(parent);
-
-            addTypesWithNoRefResolve(parent.getAllEnumDefs());
-            addTypesWithNoRefResolve(parent.getAllStructDefs());
-            addTypesWithNoRefResolve(parent.getAllClassificationDefs());
-            addTypesWithNoRefResolve(parent.getAllEntityDefs());
-
-            addedTypes.clear();
-            updatedTypes.clear();
-            deletedTypes.clear();
+    public void addStructDefWithNoRefResolve(AtlasStructDef structDef) {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("==> AtlasTypeRegistry.addStructDefWithNoRefResolve(" + structDef + ")");
         }
 
-        private void resolveReferences() throws AtlasBaseException {
-            for (AtlasType type : registryData.allTypes.getAllTypes()) {
-                type.resolveReferences(this);
-            }
-
-            for (AtlasType type : registryData.allTypes.getAllTypes()) {
-                type.resolveReferencesPhase2(this);
-            }
-        }
+        structDefs.addType(structDef, new AtlasStructType(structDef));
 
-        public void clear() {
-            registryData.clear();
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("<== AtlasTypeRegistry.addStructDefWithNoRefResolve(" + structDef + ")");
         }
+    }
 
-        public void addType(AtlasBaseTypeDef typeDef) throws AtlasBaseException {
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("==> AtlasTypeRegistry.addType({})", typeDef);
-            }
-
-            if (typeDef != null) {
-                addTypeWithNoRefResolve(typeDef);
-
-                resolveReferences();
-            }
-
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("<== AtlasTypeRegistry.addType({})", typeDef);
-            }
+    public void addStructDef(AtlasStructDef structDef) throws AtlasBaseException {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("==> AtlasTypeRegistry.addStructDef(" + structDef + ")");
         }
 
-        public void updateGuid(String typeName, String guid) {
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("==> AtlasTypeRegistry.updateGuid({}, {})", typeName, guid);
-            }
-
-            registryData.updateGuid(typeName, guid);
+        structDefs.addType(structDef, new AtlasStructType(structDef, this));
 
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("<== AtlasTypeRegistry.updateGuid({}, {})", typeName, guid);
-            }
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("<== AtlasTypeRegistry.addStructDef(" + structDef + ")");
         }
+    }
 
-        public void addTypes(Collection<? extends AtlasBaseTypeDef> typeDefs) throws AtlasBaseException {
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("==> AtlasTypeRegistry.addTypes(length={})", (typeDefs == null ? 0 : typeDefs.size()));
-            }
+    public Collection<AtlasStructDef> getAllStructDefs() { return structDefs.getAll(); }
 
-            if (CollectionUtils.isNotEmpty(typeDefs)) {
-                addTypesWithNoRefResolve(typeDefs);
+    public AtlasStructDef getStructDefByGuid(String guid) {
+        return structDefs.getTypeDefByGuid(guid);
+    }
 
-                resolveReferences();
-            }
+    public AtlasStructDef getStructDefByName(String name) { return structDefs.getTypeDefByName(name); }
 
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("<== AtlasTypeRegistry.addTypes(length={})", (typeDefs == null ? 0 : typeDefs.size()));
-            }
+    public void removeStructDefByGuid(String guid) {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("==> AtlasTypeRegistry.removeStructDefByGuid(" + guid + ")");
         }
 
-        public void addTypes(AtlasTypesDef typesDef) throws AtlasBaseException {
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("==> AtlasTypeRegistry.addTypes({})", typesDef);
-            }
-
-            if (typesDef != null) {
-                addTypesWithNoRefResolve(typesDef.getEnumDefs());
-                addTypesWithNoRefResolve(typesDef.getStructDefs());
-                addTypesWithNoRefResolve(typesDef.getClassificationDefs());
-                addTypesWithNoRefResolve(typesDef.getEntityDefs());
-                addTypesWithNoRefResolve(typesDef.getRelationshipDefs());
-
-                resolveReferences();
-            }
+        AtlasStructDef structDef = structDefs.getTypeDefByGuid(guid);
 
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("<== AtlasTypeRegistry.addTypes({})", typesDef);
-            }
+        if (structDef != null) {
+            structDefs.removeTypeDefByGuid(guid);
         }
 
-        public void updateType(AtlasBaseTypeDef typeDef) throws AtlasBaseException {
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("==> AtlasTypeRegistry.updateType({})", typeDef);
-            }
-
-            if (typeDef != null) {
-                updateTypeWithNoRefResolve(typeDef);
-
-                resolveReferences();
-            }
-
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("<== AtlasTypeRegistry.updateType({})", typeDef);
-            }
-        }
-
-        public void updateTypeByGuid(String guid, AtlasBaseTypeDef typeDef) throws AtlasBaseException {
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("==> AtlasTypeRegistry.updateTypeByGuid({})", guid);
-            }
-
-            if (guid != null && typeDef != null) {
-                updateTypeByGuidWithNoRefResolve(guid, typeDef);
-
-                resolveReferences();
-            }
-
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("<== AtlasTypeRegistry.updateTypeByGuid({})", guid);
-            }
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("<== AtlasTypeRegistry.removeStructDefByGuid(" + guid + ")");
         }
+    }
 
-        public void updateTypeByName(String name, AtlasBaseTypeDef typeDef) throws AtlasBaseException {
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("==> AtlasTypeRegistry.updateEnumDefByName({})", name);
-            }
-
-            if (name != null && typeDef != null) {
-                updateTypeByNameWithNoRefResolve(name, typeDef);
-
-                resolveReferences();
-            }
-
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("<== AtlasTypeRegistry.updateEnumDefByName({})", name);
-            }
+    public void removeStructDefByName(String name) {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("==> AtlasTypeRegistry.removeStructDefByName(" + name + ")");
         }
 
-        public void updateTypes(Collection<? extends AtlasBaseTypeDef> typeDefs) throws AtlasBaseException {
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("==> AtlasTypeRegistry.updateTypes(length={})", (typeDefs == null ? 0 : typeDefs.size()));
-            }
-
-            if (CollectionUtils.isNotEmpty(typeDefs)) {
-                updateTypesWithNoRefResolve(typeDefs);
-
-                resolveReferences();
-            }
+        AtlasStructDef structDef = structDefs.getTypeDefByName(name);
 
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("<== AtlasTypeRegistry.updateTypes(length={})", (typeDefs == null ? 0 : typeDefs.size()));
-            }
+        if (structDef != null) {
+            structDefs.removeTypeDefByName(name);
         }
 
-        public void updateTypes(AtlasTypesDef typesDef) throws AtlasBaseException {
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("==> AtlasTypeRegistry.updateTypes({})", typesDef);
-            }
-
-            if (typesDef != null) {
-                updateTypesWithNoRefResolve(typesDef);
-
-                resolveReferences();
-            }
-
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("<== AtlasTypeRegistry.updateTypes({})", typesDef);
-            }
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("<== AtlasTypeRegistry.removeStructDefByName(" + name + ")");
         }
+    }
 
-        public void updateTypesWithNoRefResolve(AtlasTypesDef typesDef) throws AtlasBaseException {
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("==> AtlasTypeRegistry.updateTypesWithNoRefResolve({})", typesDef);
-            }
 
-            if (typesDef != null) {
-                updateTypesWithNoRefResolve(typesDef.getEnumDefs());
-                updateTypesWithNoRefResolve(typesDef.getStructDefs());
-                updateTypesWithNoRefResolve(typesDef.getClassificationDefs());
-                updateTypesWithNoRefResolve(typesDef.getEntityDefs());
-                updateTypesWithNoRefResolve(typesDef.getRelationshipDefs());
-            }
-
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("<== AtlasTypeRegistry.updateTypesWithNoRefResolve({})", typesDef);
-            }
+    public void addClassificationDefWithNoRefResolve(AtlasClassificationDef classificationDef) {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("==> AtlasTypeRegistry.addClassificationDefWithNoRefResolve(" + classificationDef + ")");
         }
 
-        public void removeTypesDef(AtlasTypesDef typesDef) throws AtlasBaseException {
-            if (null != typesDef && !typesDef.isEmpty()) {
-                removeTypesWithNoRefResolve(typesDef.getEnumDefs());
-                removeTypesWithNoRefResolve(typesDef.getStructDefs());
-                removeTypesWithNoRefResolve(typesDef.getClassificationDefs());
-                removeTypesWithNoRefResolve(typesDef.getEntityDefs());
-                removeTypesWithNoRefResolve(typesDef.getRelationshipDefs());
+        classificationDefs.addType(classificationDef, new AtlasClassificationType(classificationDef));
 
-                resolveReferences();
-            }
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("<== AtlasTypeRegistry.addClassificationDefWithNoRefResolve(" + classificationDef + ")");
         }
+    }
 
-        private void removeTypesWithNoRefResolve(Collection<? extends AtlasBaseTypeDef> typeDefs) {
-            if (CollectionUtils.isNotEmpty(typeDefs)) {
-                for (AtlasBaseTypeDef typeDef : typeDefs) {
-                    if (StringUtils.isNotEmpty(typeDef.getGuid())) {
-                        removeTypeByGuidWithNoRefResolve(typeDef);
-                    } else {
-                        removeTypeByNameWithNoRefResolve(typeDef);
-                    }
-                }
-            }
+    public void addClassificationDef(AtlasClassificationDef classificationDef)
+        throws AtlasBaseException {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("==> AtlasTypeRegistry.addClassificationDef(" + classificationDef + ")");
         }
 
-        private void removeTypeByNameWithNoRefResolve(AtlasBaseTypeDef typeDef) {
-            switch (typeDef.getCategory()) {
-                case ENUM:
-                    registryData.enumDefs.removeTypeDefByName(typeDef.getName());
-                    break;
-                case STRUCT:
-                    registryData.structDefs.removeTypeDefByName(typeDef.getName());
-                    break;
-                case CLASSIFICATION:
-                    registryData.classificationDefs.removeTypeDefByName(typeDef.getName());
-                    break;
-                case ENTITY:
-                    registryData.entityDefs.removeTypeDefByName(typeDef.getName());
-                    break;
-                case RELATIONSHIP:
-                    registryData.relationshipDefs.removeTypeDefByName(typeDef.getName());
-                    break;
-            }
-            deletedTypes.add(typeDef);
-        }
+        classificationDefs.addType(classificationDef, new AtlasClassificationType(classificationDef, this));
 
-        private void removeTypeByGuidWithNoRefResolve(AtlasBaseTypeDef typeDef) {
-            switch (typeDef.getCategory()) {
-                case ENUM:
-                    registryData.enumDefs.removeTypeDefByGuid(typeDef.getGuid());
-                    break;
-                case STRUCT:
-                    registryData.structDefs.removeTypeDefByGuid(typeDef.getGuid());
-                    break;
-                case CLASSIFICATION:
-                    registryData.classificationDefs.removeTypeDefByGuid(typeDef.getGuid());
-                    break;
-                case ENTITY:
-                    registryData.entityDefs.removeTypeDefByGuid(typeDef.getGuid());
-                    break;
-                case RELATIONSHIP:
-                    registryData.relationshipDefs.removeTypeDefByGuid(typeDef.getGuid());
-                    break;
-            }
-            deletedTypes.add(typeDef);
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("<== AtlasTypeRegistry.addClassificationDef(" + classificationDef + ")");
         }
+    }
 
-        public void removeTypeByGuid(String guid) throws AtlasBaseException {
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("==> AtlasTypeRegistry.removeTypeByGuid({})", guid);
-            }
-
-            if (guid != null) {
-                AtlasBaseTypeDef typeDef = getTypeDefByGuid(guid);
-
-                registryData.removeByGuid(guid);
+    public Collection<AtlasClassificationDef> getAllClassificationDefs() { return classificationDefs.getAll(); }
 
-                resolveReferences();
+    public AtlasClassificationDef getClassificationDefByGuid(String guid) {
+        return classificationDefs.getTypeDefByGuid(guid);
+    }
 
-                if (typeDef != null) {
-                    deletedTypes.add(typeDef);
-                }
-            }
+    public AtlasClassificationDef getClassificationDefByName(String name) {
+        return classificationDefs.getTypeDefByName(name);
+    }
 
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("<== AtlasTypeRegistry.removeTypeByGuid({})", guid);
-            }
+    public void removeClassificationDefByGuid(String guid) {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("==> AtlasTypeRegistry.removeClassificationDefByGuid(" + guid + ")");
         }
 
-        public void removeTypeByName(String name) throws AtlasBaseException {
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("==> AtlasTypeRegistry.removeTypeByName({})", name);
-            }
-
-            if (name != null) {
-                AtlasBaseTypeDef typeDef = getTypeDefByName(name);
-
-                registryData.removeByName(name);
-
-                resolveReferences();
+        AtlasClassificationDef classificationDef = classificationDefs.getTypeDefByGuid(guid);
 
-                if (typeDef != null) {
-                    deletedTypes.add(typeDef);
-                }
-            }
-
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("<== AtlasTypeRegistry.removeEnumDefByName({})", name);
-            }
+        if (classificationDef != null) {
+            classificationDefs.removeTypeDefByGuid(guid);
         }
 
-        public List<AtlasBaseTypeDef> getAddedTypes() { return addedTypes; }
-
-        public List<AtlasBaseTypeDef> getUpdatedTypes() { return updatedTypes; }
-
-        public List<AtlasBaseTypeDef> getDeleteedTypes() { return deletedTypes; }
-
-
-        private void addTypeWithNoRefResolve(AtlasBaseTypeDef typeDef) throws AtlasBaseException{
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("==> AtlasTypeRegistry.addTypeWithNoRefResolve({})", typeDef);
-            }
-
-            if (typeDef != null) {
-                if (this.isRegisteredType(typeDef.getName())) {
-                    throw new AtlasBaseException(AtlasErrorCode.TYPE_ALREADY_EXISTS, typeDef.getName());
-                }
-
-                if (typeDef.getClass().equals(AtlasEnumDef.class)) {
-                    AtlasEnumDef enumDef = (AtlasEnumDef) typeDef;
-
-                    registryData.enumDefs.addType(enumDef, new AtlasEnumType(enumDef));
-                } else if (typeDef.getClass().equals(AtlasStructDef.class)) {
-                    AtlasStructDef structDef = (AtlasStructDef) typeDef;
-
-                    registryData.structDefs.addType(structDef, new AtlasStructType(structDef));
-                } else if (typeDef.getClass().equals(AtlasClassificationDef.class)) {
-                    AtlasClassificationDef classificationDef = (AtlasClassificationDef) typeDef;
-
-                    registryData.classificationDefs.addType(classificationDef,
-                            new AtlasClassificationType(classificationDef));
-                } else if (typeDef.getClass().equals(AtlasEntityDef.class)) {
-                    AtlasEntityDef entityDef = (AtlasEntityDef) typeDef;
-
-                    registryData.entityDefs.addType(entityDef, new AtlasEntityType(entityDef));
-                } else if (typeDef.getClass().equals(AtlasRelationshipDef.class)) {
-                    AtlasRelationshipDef relationshipDef = (AtlasRelationshipDef) typeDef;
-
-                    registryData.relationshipDefs.addType(relationshipDef, new AtlasRelationshipType(relationshipDef));
-                }
-
-                addedTypes.add(typeDef);
-            }
-
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("<== AtlasTypeRegistry.addTypeWithNoRefResolve({})", typeDef);
-            }
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("<== AtlasTypeRegistry.removeClassificationDefByGuid(" + guid + ")");
         }
+    }
 
-        private void addTypesWithNoRefResolve(Collection<? extends AtlasBaseTypeDef> typeDefs) throws AtlasBaseException {
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("==> AtlasTypeRegistry.addTypesWithNoRefResolve(length={})",
-                        (typeDefs == null ? 0 : typeDefs.size()));
-            }
-
-            if (CollectionUtils.isNotEmpty(typeDefs)) {
-                for (AtlasBaseTypeDef typeDef : typeDefs) {
-                    addTypeWithNoRefResolve(typeDef);
-                }
-            }
-
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("<== AtlasTypeRegistry.addTypesWithNoRefResolve(length={})",
-                        (typeDefs == null ? 0 : typeDefs.size()));
-            }
+    public void removeClassificationDefByName(String name) {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("==> AtlasTypeRegistry.removeClassificationDefByName(" + name + ")");
         }
 
-        private void updateTypeWithNoRefResolve(AtlasBaseTypeDef typeDef) {
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("==> AtlasTypeRegistry.updateType({})", typeDef);
-            }
-
-            if (typeDef != null) {
-                if (StringUtils.isNotBlank(typeDef.getGuid())) {
-                    updateTypeByGuidWithNoRefResolve(typeDef.getGuid(), typeDef);
-                } else if (StringUtils.isNotBlank(typeDef.getName())) {
-                    updateTypeByNameWithNoRefResolve(typeDef.getName(), typeDef);
-                }
-            }
+        AtlasClassificationDef classificationDef = classificationDefs.getTypeDefByName(name);
 
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("<== AtlasTypeRegistry.updateType({})", typeDef);
-            }
+        if (classificationDef != null) {
+            classificationDefs.removeTypeDefByName(name);
         }
 
-        private void updateTypeByGuidWithNoRefResolve(String guid, AtlasBaseTypeDef typeDef) {
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("==> AtlasTypeRegistry.updateTypeByGuidWithNoRefResolve({})", guid);
-            }
-
-            if (guid != null && typeDef != null) {
-                // ignore
-                if (typeDef.getClass().equals(AtlasEnumDef.class)) {
-                    AtlasEnumDef enumDef = (AtlasEnumDef) typeDef;
-
-                    registryData.enumDefs.removeTypeDefByGuid(guid);
-                    registryData.enumDefs.addType(enumDef, new AtlasEnumType(enumDef));
-                } else if (typeDef.getClass().equals(AtlasStructDef.class)) {
-                    AtlasStructDef structDef = (AtlasStructDef) typeDef;
-
-                    registryData.structDefs.removeTypeDefByGuid(guid);
-                    registryData.structDefs.addType(structDef, new AtlasStructType(structDef));
-                } else if (typeDef.getClass().equals(AtlasClassificationDef.class)) {
-                    AtlasClassificationDef classificationDef = (AtlasClassificationDef) typeDef;
-
-                    registryData.classificationDefs.removeTypeDefByGuid(guid);
-                    registryData.classificationDefs.addType(classificationDef,
-                            new AtlasClassificationType(classificationDef));
-                } else if (typeDef.getClass().equals(AtlasEntityDef.class)) {
-                    AtlasEntityDef entityDef = (AtlasEntityDef) typeDef;
-
-                    registryData.entityDefs.removeTypeDefByGuid(guid);
-                    registryData.entityDefs.addType(entityDef, new AtlasEntityType(entityDef));
-                } else if (typeDef.getClass().equals(AtlasRelationshipDef.class)) {
-                    AtlasRelationshipDef relationshipDef = (AtlasRelationshipDef) typeDef;
-
-                    registryData.relationshipDefs.removeTypeDefByGuid(guid);
-                    registryData.relationshipDefs.addType(relationshipDef, new AtlasRelationshipType(relationshipDef));
-                }
-
-                updatedTypes.add(typeDef);
-            }
-
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("<== AtlasTypeRegistry.updateTypeByGuidWithNoRefResolve({})", guid);
-            }
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("<== AtlasTypeRegistry.removeClassificationDefByName(" + name + ")");
         }
+    }
 
-        private void updateTypeByNameWithNoRefResolve(String name, AtlasBaseTypeDef typeDef) {
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("==> AtlasTypeRegistry.updateTypeByNameWithNoRefResolve({})", name);
-            }
-
-            if (name != null && typeDef != null) {
-                if (typeDef.getClass().equals(AtlasEnumDef.class)) {
-                    AtlasEnumDef enumDef = (AtlasEnumDef) typeDef;
-
-                    registryData.enumDefs.removeTypeDefByName(name);
-                    registryData.enumDefs.addType(enumDef, new AtlasEnumType(enumDef));
-                } else if (typeDef.getClass().equals(AtlasStructDef.class)) {
-                    AtlasStructDef structDef = (AtlasStructDef) typeDef;
-
-                    registryData.structDefs.removeTypeDefByName(name);
-                    registryData.structDefs.addType(structDef, new AtlasStructType(structDef));
-                } else if (typeDef.getClass().equals(AtlasClassificationDef.class)) {
-                    AtlasClassificationDef classificationDef = (AtlasClassificationDef) typeDef;
-
-                    registryData.classificationDefs.removeTypeDefByName(name);
-                    registryData.classificationDefs.addType(classificationDef,
-                            new AtlasClassificationType(classificationDef));
-                } else if (typeDef.getClass().equals(AtlasEntityDef.class)) {
-                    AtlasEntityDef entityDef = (AtlasEntityDef) typeDef;
-
-                    registryData.entityDefs.removeTypeDefByName(name);
-                    registryData.entityDefs.addType(entityDef, new AtlasEntityType(entityDef));
-                } else if (typeDef.getClass().equals(AtlasRelationshipDef.class)) {
-                    AtlasRelationshipDef relationshipDef = (AtlasRelationshipDef) typeDef;
-
-                    registryData.relationshipDefs.removeTypeDefByName(name);
-                    registryData.relationshipDefs.addType(relationshipDef, new AtlasRelationshipType(relationshipDef));
-                }
-
-                updatedTypes.add(typeDef);
-            }
 
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("<== AtlasTypeRegistry.updateTypeByNameWithNoRefResolve({})", name);
-            }
+    public void addEntityDefWithNoRefResolve(AtlasEntityDef entityDef) {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("==> AtlasTypeRegistry.addEntityDefWithNoRefResolve(" + entityDef + ")");
         }
 
-        private void updateTypesWithNoRefResolve(Collection<? extends AtlasBaseTypeDef> typeDefs) {
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("==> AtlasTypeRegistry.updateTypesWithNoRefResolve(length={})",
-                        (typeDefs == null ? 0 : typeDefs.size()));
-            }
+        entityDefs.addType(entityDef, new AtlasEntityType(entityDef));
 
-            if (CollectionUtils.isNotEmpty(typeDefs)) {
-                for (AtlasBaseTypeDef typeDef : typeDefs) {
-                    updateTypeWithNoRefResolve(typeDef);
-                }
-            }
-
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("<== AtlasTypeRegistry.updateTypesWithNoRefResolve(length={})",
-                        (typeDefs == null ? 0 : typeDefs.size()));
-            }
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("<== AtlasTypeRegistry.addEntityDefWithNoRefResolve(" + entityDef + ")");
         }
     }
 
-    static class TypeRegistryUpdateSynchronizer {
-        private final AtlasTypeRegistry typeRegistry;
-        private final ReentrantLock     typeRegistryUpdateLock;
-        private AtlasTransientTypeRegistry typeRegistryUnderUpdate = null;
-        private String                     lockedByThread          = null;
-
-        TypeRegistryUpdateSynchronizer(AtlasTypeRegistry typeRegistry) {
-            this.typeRegistry           = typeRegistry;
-            this.typeRegistryUpdateLock = new ReentrantLock();
-        }
-
-        AtlasTransientTypeRegistry lockTypeRegistryForUpdate(int lockMaxWaitTimeInSeconds) throws AtlasBaseException {
-            LOG.debug("==> lockTypeRegistryForUpdate()");
-
-            boolean alreadyLockedByCurrentThread = typeRegistryUpdateLock.isHeldByCurrentThread();
-
-            if (!alreadyLockedByCurrentThread) {
-                if (LOG.isDebugEnabled()) {
-                    LOG.debug("lockTypeRegistryForUpdate(): waiting for lock to be released by thread {}", lockedByThread);
-                }
-            } else {
-                LOG.warn("lockTypeRegistryForUpdate(): already locked. currentLockCount={}",
-                        typeRegistryUpdateLock.getHoldCount());
-            }
-
-            try {
-                boolean isLocked = typeRegistryUpdateLock.tryLock(lockMaxWaitTimeInSeconds, TimeUnit.SECONDS);
-
-                if (!isLocked) {
-                    throw new AtlasBaseException(AtlasErrorCode.FAILED_TO_OBTAIN_TYPE_UPDATE_LOCK);
-                }
-            } catch (InterruptedException excp) {
-                throw new AtlasBaseException(AtlasErrorCode.FAILED_TO_OBTAIN_TYPE_UPDATE_LOCK, excp);
-            }
-
-            if (!alreadyLockedByCurrentThread) {
-                if (LOG.isDebugEnabled()) {
-                    LOG.debug("lockTypeRegistryForUpdate(): wait over..got the lock");
-                }
-
-                typeRegistryUnderUpdate = new AtlasTransientTypeRegistry(typeRegistry);
-                lockedByThread          = Thread.currentThread().getName();
-            }
-
-            LOG.debug("<== lockTypeRegistryForUpdate()");
-
-            return typeRegistryUnderUpdate;
+    public void addEntityDef(AtlasEntityDef entityDef) throws AtlasBaseException {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("==> AtlasTypeRegistry.addEntityDef(" + entityDef + ")");
         }
 
-        void releaseTypeRegistryForUpdate(AtlasTransientTypeRegistry ttr, boolean commitUpdates) {
-            LOG.debug("==> releaseTypeRegistryForUpdate()");
-
-            if (typeRegistryUpdateLock.isHeldByCurrentThread()) {
-                try {
-                    if (typeRegistryUnderUpdate != ttr) {
-                        LOG.error("releaseTypeRegistryForUpdate(): incorrect typeRegistry returned for release" +
-                                        ": found=" + ttr + "; expected=" + typeRegistryUnderUpdate,
-                                new Exception().fillInStackTrace());
-                    } else if (typeRegistryUpdateLock.getHoldCount() == 1) {
-                        if (ttr != null && commitUpdates) {
-                            typeRegistry.registryData = ttr.registryData;
-                        }
-                    }
-
-                    if (typeRegistryUpdateLock.getHoldCount() == 1) {
-                        lockedByThread          = null;
-                        typeRegistryUnderUpdate = null;
-                    } else {
-                        LOG.warn("releaseTypeRegistryForUpdate(): pendingReleaseCount={}", typeRegistryUpdateLock.getHoldCount() - 1);
-                    }
-                } finally {
-                    typeRegistryUpdateLock.unlock();
-                }
-            } else {
-                LOG.error("releaseTypeRegistryForUpdate(): current thread does not hold the lock",
-                        new Exception().fillInStackTrace());
-            }
+        entityDefs.addType(entityDef, new AtlasEntityType(entityDef, this));
 
-            LOG.debug("<== releaseTypeRegistryForUpdate()");
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("<== AtlasTypeRegistry.addEntityDef(" + entityDef + ")");
         }
-
     }
-}
 
-class TypeCache {
-    private final Map<String, AtlasType> typeGuidMap;
-    private final Map<String, AtlasType> typeNameMap;
+    public Collection<AtlasEntityDef> getAllEntityDefs() { return entityDefs.getAll(); }
 
-    public TypeCache() {
-        typeGuidMap = new ConcurrentHashMap<>();
-        typeNameMap = new ConcurrentHashMap<>();
+    public AtlasEntityDef getEntityDefByGuid(String guid) {
+        return entityDefs.getTypeDefByGuid(guid);
     }
 
-    public TypeCache(TypeCache other) {
-        typeGuidMap = new ConcurrentHashMap<>(other.typeGuidMap);
-        typeNameMap = new ConcurrentHashMap<>(other.typeNameMap);
+    public AtlasEntityDef getEntityDefByName(String name) {
+        return entityDefs.getTypeDefByName(name);
     }
 
-    public void addType(AtlasType type) {
-        if (type != null) {
-            if (StringUtils.isNotEmpty(type.getTypeName())) {
-                typeNameMap.put(type.getTypeName(), type);
-            }
+    public void removeEntityDefByGuid(String guid) {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("==> AtlasTypeRegistry.removeEntityDefByGuid(" + guid + ")");
         }
-    }
 
-    public void addType(AtlasBaseTypeDef typeDef, AtlasType type) {
-        if (typeDef != null && type != null) {
-            if (StringUtils.isNotEmpty(typeDef.getGuid())) {
-                typeGuidMap.put(typeDef.getGuid(), type);
-            }
+        AtlasEntityDef entityDef = entityDefs.getTypeDefByGuid(guid);
 
-            if (StringUtils.isNotEmpty(typeDef.getName())) {
-                typeNameMap.put(typeDef.getName(), type);
-            }
+        if (entityDef != null) {
+            entityDefs.removeTypeDefByGuid(guid);
         }
-    }
-
-    public boolean isKnownType(String typeName) {
-        return typeNameMap.containsKey(typeName);
-    }
-
-    public Collection<String> getAllTypeNames() {
-        return Collections.unmodifiableCollection(typeNameMap.keySet());
-    }
 
-    public Collection<AtlasType> getAllTypes() {
-        return Collections.unmodifiableCollection(typeNameMap.values());
-    }
-
-    public AtlasType getTypeByGuid(String guid) {
-
-        return guid != null ? typeGuidMap.get(guid) : null;
-    }
-
-    public AtlasType getTypeByName(String name) {
-
-        return name != null ? typeNameMap.get(name) : null;
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("<== AtlasTypeRegistry.removeEntityDefByGuid(" + guid + ")");
+        }
     }
 
-    public void updateGuid(String typeName, String currGuid, String newGuid) {
-        if (currGuid != null) {
-            typeGuidMap.remove(currGuid);
+    public void removeEntityDefByName(String name) {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("==> AtlasTypeRegistry.removeEntityDefByName(" + name + ")");
         }
 
-        if (typeName != null && newGuid != null) {
-            AtlasType type = typeNameMap.get(typeName);
+        AtlasEntityDef entityDef = entityDefs.getTypeDefByName(name);
 
-            if (type != null) {
-                typeGuidMap.put(newGuid, type);
-            }
+        if (entityDef != null) {
+            entityDefs.removeTypeDefByName(name);
         }
-    }
 
-    public void removeTypeByGuid(String guid) {
-        if (guid != null) {
-            typeGuidMap.remove(guid);
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("<== AtlasTypeRegistry.removeEntityDefByName(" + name + ")");
         }
     }
 
-    public void removeTypeByName(String name) {
-        if (name != null) {
-            typeNameMap.remove(name);
-        }
+    private void registerType(AtlasType dataType) {
+        allTypes.put(dataType.getTypeName(), dataType);
     }
 
-    public void clear() {
-        typeGuidMap.clear();
-        typeNameMap.clear();
+    private void unregisterType(AtlasType dataType) {
+        allTypes.remove(dataType.getTypeName());
     }
-}
 
-class TypeDefCache<T1 extends AtlasBaseTypeDef, T2 extends AtlasType> {
-    private static final Logger LOG = LoggerFactory.getLogger(TypeDefCache.class);
+    private void unregisterTypeByName(String typeName) {
+        allTypes.remove(typeName);
+    }
 
-    private final TypeCache       typeCache;
-    private final Map<String, T1> typeDefGuidMap;
-    private final Map<String, T1> typeDefNameMap;
-    private final Map<String, T2> typeNameMap;
+    class TypeDefCache<T extends AtlasBaseTypeDef> {
+        private final AtlasTypeRegistry typeRegistry;
+        private final Map<String, T>    typeDefGuidMap = new ConcurrentHashMap<String, T>();
+        private final Map<String, T>    typeDefNameMap = new ConcurrentHashMap<String, T>();
 
-    public TypeDefCache(TypeCache typeCache) {
-        this.typeCache      = typeCache;
-        this.typeDefGuidMap = new ConcurrentHashMap<>();
-        this.typeDefNameMap = new ConcurrentHashMap<>();
-        this.typeNameMap    = new ConcurrentHashMap<>();
-    }
+        public TypeDefCache(AtlasTypeRegistry typeRegistry) {
+            this.typeRegistry = typeRegistry;
+        }
 
-    public TypeDefCache(TypeDefCache other, TypeCache typeCache) {
-        this.typeCache      = typeCache;
-        this.typeDefGuidMap = new ConcurrentHashMap<>(other.typeDefGuidMap);
-        this.typeDefNameMap = new ConcurrentHashMap<>(other.typeDefNameMap);
-        this.typeNameMap    = new ConcurrentHashMap<>(other.typeNameMap);
-    }
+        public void addType(T typeDef, AtlasType type) {
+            if (type != null) {
+                if (StringUtils.isNotEmpty(typeDef.getGuid())) {
+                    typeDefGuidMap.put(typeDef.getGuid(), typeDef);
+                }
 
-    public void addType(T1 typeDef, T2 type) {
-        if (typeDef != null && type != null) {
-            if (StringUtils.isNotEmpty(typeDef.getGuid())) {
-                typeDefGuidMap.put(typeDef.getGuid(), typeDef);
-            }
+                if (StringUtils.isNotEmpty(typeDef.getName())) {
+                    typeDefNameMap.put(typeDef.getName(), typeDef);
+                }
 
-            if (StringUtils.isNotEmpty(typeDef.getName())) {
-                typeDefNameMap.put(typeDef.getName(), typeDef);
-                typeNameMap.put(typeDef.getName(), type);
+                typeRegistry.registerType(type);
             }
-
-            typeCache.addType(typeDef, type);
         }
-    }
 
-    public Collection<T1> getAll() {
-        return Collections.unmodifiableCollection(typeDefNameMap.values());
-    }
+        public Collection<T> getAll() {
+            return Collections.unmodifiableCollection(typeDefNameMap.values());
+        }
 
-    public Collection<String> getAllNames() { return Collections.unmodifiableCollection(typeDefNameMap.keySet()); }
+        public T getTypeDefByGuid(String guid) {
+            T ret = guid != null ? typeDefGuidMap.get(guid) : null;
 
-    public T1 getTypeDefByGuid(String guid) {
-        return guid != null ? typeDefGuidMap.get(guid) : null;
-    }
-
-    public T1 getTypeDefByName(String name) {
-        return name != null ? typeDefNameMap.get(name) : null;
-    }
+            return ret;
+        }
 
-    public Collection<T2> getAllTypes() {
-        return Collections.unmodifiableCollection(typeNameMap.values());
-    }
+        public T getTypeDefByName(String name) {
+            T ret = name != null ? typeDefNameMap.get(name) : null;
 
-    public T2 getTypeByName(String name) {
-        return name != null ? typeNameMap.get(name) : null;
-    }
+            return ret;
+        }
 
-    public void updateGuid(String typeName, String newGuid) {
-        if (typeName != null) {
-            T1 typeDef = typeDefNameMap.get(typeName);
+        public void removeTypeDefByGuid(String guid) {
+            T typeDef = guid != null ? typeDefGuidMap.remove(guid) : null;
 
             if (typeDef != null) {
-                String currGuid = typeDef.getGuid();
-                if (!typeDefGuidMap.containsKey(newGuid) || !StringUtils.equals(currGuid, newGuid)) {
-                    if(LOG.isDebugEnabled()) {
-                        if (!typeDefGuidMap.containsKey(newGuid)) {
-                            LOG.debug("TypeDefGuidMap doesn't contain entry for guid {}. Adding new entry", newGuid);
-                        } else {
-                            LOG.debug("Removing entry for guid {} and adding entry for guid {}", currGuid, newGuid);
-                        }
-                    }
-                    if (currGuid != null) {
-                        typeDefGuidMap.remove(currGuid);
-                    }
-
-                    typeDef.setGuid(newGuid);
-
-                    if (newGuid != null) {
-                        typeDefGuidMap.put(newGuid, typeDef);
-                    }
-
-                    typeCache.updateGuid(typeName, currGuid, newGuid);
+                if (StringUtils.isNotEmpty(typeDef.getName())) {
+                    typeDefNameMap.remove(typeDef.getName());
+                    typeRegistry.unregisterTypeByName(typeDef.getName());
                 }
             }
         }
-    }
-
-    public void removeTypeDefByGuid(String guid) {
-        if (guid != null) {
-            T1 typeDef = typeDefGuidMap.remove(guid);
-
-            typeCache.removeTypeByGuid(guid);
 
-            String name = typeDef != null ? typeDef.getName() : null;
-
-            if (name != null) {
-                typeDefNameMap.remove(name);
-                typeNameMap.remove(name);
-                typeCache.removeTypeByName(name);
-            }
+        public void removeTypeDefByName(String name) {
+            T typeDef = name != null ? typeDefNameMap.get(name) : null;
 
-        }
-    }
-
-    public void removeTypeDefByName(String name) {
-        if (name != null) {
-            T1 typeDef = typeDefNameMap.remove(name);
-
-            typeNameMap.remove(name);
-            typeCache.removeTypeByName(name);
-
-            String guid = typeDef != null ? typeDef.getGuid() : null;
-
-            if (guid != null) {
-                typeDefGuidMap.remove(guid);
-                typeCache.removeTypeByGuid(guid);
+            if (typeDef != null) {
+                if (StringUtils.isNotEmpty(typeDef.getGuid())) {
+                    typeDefGuidMap.remove(typeDef.getGuid());
+                    typeRegistry.unregisterTypeByName(typeDef.getName());
+                }
             }
         }
     }
-
-    public void clear() {
-        typeCache.clear();
-        typeDefGuidMap.clear();
-        typeDefNameMap.clear();
-        typeNameMap.clear();
-    }
 }