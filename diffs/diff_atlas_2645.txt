diff --git a/webapp/src/main/java/org/apache/atlas/util/RestUtils.java b/webapp/src/main/java/org/apache/atlas/util/RestUtils.java
index 08dac8a97..bc937e400 100644
--- a/webapp/src/main/java/org/apache/atlas/util/RestUtils.java
+++ b/webapp/src/main/java/org/apache/atlas/util/RestUtils.java
@@ -18,35 +18,24 @@
 
 package org.apache.atlas.util;
 
-import static org.apache.atlas.AtlasErrorCode.INVALID_TYPE_DEFINITION;
-import static org.apache.atlas.model.typedef.AtlasStructDef.AtlasConstraintDef.CONSTRAINT_TYPE_OWNED_REF;
-import static org.apache.atlas.model.typedef.AtlasStructDef.AtlasConstraintDef.CONSTRAINT_TYPE_INVERSE_REF;
-import static org.apache.atlas.model.typedef.AtlasStructDef.AtlasConstraintDef.CONSTRAINT_PARAM_ATTRIBUTE;
-import static org.apache.atlas.type.AtlasTypeUtil.isArrayType;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Set;
-
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableSet;
 import org.apache.atlas.exception.AtlasBaseException;
 import org.apache.atlas.model.TypeCategory;
+import org.apache.atlas.model.instance.AtlasEntity;
 import org.apache.atlas.model.typedef.AtlasClassificationDef;
 import org.apache.atlas.model.typedef.AtlasEntityDef;
 import org.apache.atlas.model.typedef.AtlasEnumDef;
 import org.apache.atlas.model.typedef.AtlasEnumDef.AtlasEnumElementDef;
 import org.apache.atlas.model.typedef.AtlasStructDef;
+import org.apache.atlas.model.typedef.AtlasStructDef.AtlasConstraintDef;
 import org.apache.atlas.model.typedef.AtlasStructDef.AtlasAttributeDef;
 import org.apache.atlas.model.typedef.AtlasStructDef.AtlasAttributeDef.Cardinality;
-import org.apache.atlas.model.typedef.AtlasStructDef.AtlasConstraintDef;
 import org.apache.atlas.model.typedef.AtlasTypeDefHeader;
 import org.apache.atlas.model.typedef.AtlasTypesDef;
-import org.apache.atlas.repository.store.graph.v1.AtlasStructDefStoreV1;
-import org.apache.atlas.type.AtlasClassificationType;
+import org.apache.atlas.type.AtlasArrayType;
 import org.apache.atlas.type.AtlasEntityType;
-import org.apache.atlas.type.AtlasEnumType;
 import org.apache.atlas.type.AtlasStructType;
-import org.apache.atlas.type.AtlasStructType.AtlasAttribute;
 import org.apache.atlas.type.AtlasType;
 import org.apache.atlas.type.AtlasTypeRegistry;
 import org.apache.atlas.type.AtlasTypeUtil;
@@ -63,18 +52,20 @@ import org.apache.atlas.typesystem.types.TraitType;
 import org.apache.atlas.typesystem.types.utils.TypesUtil;
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.lang.StringUtils;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableSet;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 import java.util.Set;
 
 import static org.apache.atlas.AtlasErrorCode.INVALID_TYPE_DEFINITION;
+import static org.apache.atlas.model.typedef.AtlasStructDef.AtlasConstraintDef.CONSTRAINT_PARAM_ON_DELETE;
+import static org.apache.atlas.model.typedef.AtlasStructDef.AtlasConstraintDef.CONSTRAINT_TYPE_FOREIGN_KEY;
+import static org.apache.atlas.model.typedef.AtlasStructDef.AtlasConstraintDef.CONSTRAINT_TYPE_MAPPED_FROM_REF;
+import static org.apache.atlas.model.typedef.AtlasStructDef.AtlasConstraintDef.CONSTRAINT_PARAM_VAL_CASCADE;
 import static org.apache.atlas.type.AtlasTypeUtil.isArrayType;
 
 
@@ -82,72 +73,51 @@ public final class RestUtils {
     private RestUtils() {}
     private static final Logger LOG = LoggerFactory.getLogger(RestUtils.class);
 
-    public static TypesDef toTypesDef(AtlasType type, AtlasTypeRegistry typeRegistry) throws AtlasBaseException {
-        final TypesDef ret;
-
-        if (type instanceof AtlasEnumType) {
-            ret = RestUtils.enumToTypesDef((AtlasEnumType)type);
-        } else if (type instanceof AtlasEntityType) {
-            ret = RestUtils.entityToTypesDef((AtlasEntityType)type, typeRegistry);
-        } else if (type instanceof AtlasClassificationType) {
-            ret = RestUtils.classificationToTypesDef((AtlasClassificationType)type, typeRegistry);
-        } else if (type instanceof AtlasStructType) {
-            ret = RestUtils.structToTypesDef((AtlasStructType)type, typeRegistry);
-        } else {
-            ret = new TypesDef();
-        }
-
-        return ret;
-    }
-
-    private static TypesDef enumToTypesDef(AtlasEnumType enumType) {
+    public static TypesDef toTypesDef(AtlasEnumDef enumDef) {
         TypesDef ret = null;
 
-        AtlasEnumDef enumDef = enumType.getEnumDef();
+        if (enumDef != null) {
+            String      enumName    = enumDef.getName();
+            String      enumDesc    = enumDef.getDescription();
+            String      enumVersion = enumDef.getTypeVersion();
+            EnumValue[] enumValues  = getEnumValues(enumDef.getElementDefs());
 
-        String      enumName    = enumDef.getName();
-        String      enumDesc    = enumDef.getDescription();
-        String      enumVersion = enumDef.getTypeVersion();
-        EnumValue[] enumValues  = getEnumValues(enumDef.getElementDefs());
+            if (enumName != null && enumValues != null && enumValues.length > 0) {
+                EnumTypeDefinition enumTypeDef = new EnumTypeDefinition(enumName, enumDesc, enumVersion, enumValues);
 
-        if (enumName != null && enumValues != null && enumValues.length > 0) {
-            EnumTypeDefinition enumTypeDef = new EnumTypeDefinition(enumName, enumDesc, enumVersion, enumValues);
-
-            ret = TypesUtil.getTypesDef(ImmutableList.of(enumTypeDef),
-                                        ImmutableList.<StructTypeDefinition>of(),
-                                        ImmutableList.<HierarchicalTypeDefinition<TraitType>>of(),
-                                        ImmutableList.<HierarchicalTypeDefinition<ClassType>>of());
+                ret = TypesUtil.getTypesDef(ImmutableList.of(enumTypeDef),
+                                            ImmutableList.<StructTypeDefinition>of(),
+                                            ImmutableList.<HierarchicalTypeDefinition<TraitType>>of(),
+                                            ImmutableList.<HierarchicalTypeDefinition<ClassType>>of());
+            }
         }
 
         return ret;
     }
 
-    private static TypesDef structToTypesDef(AtlasStructType structType, AtlasTypeRegistry registry)
-                                                                                            throws AtlasBaseException {
-        String                typeName      = structType.getStructDef().getName();
-        String                typeDesc      = structType.getStructDef().getDescription();
-        String                typeVersion   = structType.getStructDef().getTypeVersion();
-        AttributeDefinition[] attributes    = getAttributes(structType, registry);
-        StructTypeDefinition  structTypeDef = TypesUtil.createStructTypeDef(typeName, typeDesc, typeVersion, attributes);
+    public static TypesDef toTypesDef(AtlasStructDef structDef, AtlasTypeRegistry registry) throws AtlasBaseException {
+        String                typeName   = structDef.getName();
+        String                typeDesc   = structDef.getDescription();
+        AttributeDefinition[] attributes = getAttributes(structDef, registry);
+        StructTypeDefinition  structType = TypesUtil.createStructTypeDef(typeName, typeDesc, attributes);
 
         TypesDef ret = TypesUtil.getTypesDef(ImmutableList.<EnumTypeDefinition>of(),
-                                             ImmutableList.of(structTypeDef),
+                                             ImmutableList.of(structType),
                                              ImmutableList.<HierarchicalTypeDefinition<TraitType>>of(),
                                              ImmutableList.<HierarchicalTypeDefinition<ClassType>>of());
 
         return ret;
     }
 
-    private static TypesDef entityToTypesDef(AtlasEntityType entityType, AtlasTypeRegistry registry)
-                                                                                             throws AtlasBaseException {
-        String                typeName    = entityType.getEntityDef().getName();
-        String                typeDesc    = entityType.getEntityDef().getDescription();
-        String                typeVersion = entityType.getEntityDef().getTypeVersion();
-        ImmutableSet          superTypes  = ImmutableSet.copyOf(entityType.getEntityDef().getSuperTypes());
-        AttributeDefinition[] attributes  = getAttributes(entityType, registry);
+    public static TypesDef toTypesDef(AtlasEntityDef entityDef, AtlasTypeRegistry registry) throws AtlasBaseException {
+        String                typeName    = entityDef.getName();
+        String                typeDesc    = entityDef.getDescription();
+        String                typeVersion = entityDef.getTypeVersion();
+        ImmutableSet          superTypes  = ImmutableSet.copyOf(entityDef.getSuperTypes());
+        AttributeDefinition[] attributes  = getAttributes(entityDef, registry);
 
         HierarchicalTypeDefinition<ClassType> classType = TypesUtil.createClassTypeDef(typeName, typeDesc, typeVersion,
-                                                                                       superTypes, attributes);
+                                                                                        superTypes, attributes);
         TypesDef ret = TypesUtil.getTypesDef(ImmutableList.<EnumTypeDefinition>of(),
                                              ImmutableList.<StructTypeDefinition>of(),
                                              ImmutableList.<HierarchicalTypeDefinition<TraitType>>of(),
@@ -156,13 +126,12 @@ public final class RestUtils {
         return ret;
     }
 
-    private static TypesDef classificationToTypesDef(AtlasClassificationType classificationType,
-                                                     AtlasTypeRegistry registry) throws AtlasBaseException {
-        String                typeName    = classificationType.getClassificationDef().getName();
-        String                typeDesc    = classificationType.getClassificationDef().getDescription();
-        String                typeVersion = classificationType.getClassificationDef().getTypeVersion();
-        ImmutableSet          superTypes  = ImmutableSet.copyOf(classificationType.getClassificationDef().getSuperTypes());
-        AttributeDefinition[] attributes  = getAttributes(classificationType, registry);
+    public static TypesDef toTypesDef(AtlasClassificationDef classifDef, AtlasTypeRegistry registry) throws AtlasBaseException {
+        String                typeName    = classifDef.getName();
+        String                typeDesc    = classifDef.getDescription();
+        String                typeVersion = classifDef.getTypeVersion();
+        ImmutableSet          superTypes  = ImmutableSet.copyOf(classifDef.getSuperTypes());
+        AttributeDefinition[] attributes  = getAttributes(classifDef, registry);
 
         HierarchicalTypeDefinition traitType = TypesUtil.createTraitTypeDef(typeName, typeDesc, typeVersion, superTypes,
                                                                              attributes);
@@ -310,6 +279,83 @@ public final class RestUtils {
             AttributeDefinition[] attrDefinitions = classType.attributeDefinitions;
             for (AttributeDefinition oldAttr : attrDefinitions) {
                 AtlasAttributeDef newAttr = toAtlasAttributeDef(oldAttr);
+
+                // isComposite and reverseAttributeName applicable only for entities/classes.
+                if (oldAttr.isComposite) {
+                    String attrType = oldAttr.dataTypeName;
+                    attrType = isArrayType(attrType) ? getArrayTypeName(attrType) : attrType;
+
+                    if (!AtlasTypeUtil.isBuiltInType(attrType)) {
+                        String refAttrName = null;
+
+                        // 1. Check if attribute datatype is present in payload definition, if present get the typeDefinition,
+                        // check all its attributes and find attribute that matches with classTypeDefName and reverseAttributeName
+                        HierarchicalTypeDefinition<ClassType> refType = findClassType(classTypeDefinitions, attrType);
+                        if (refType != null) {
+                            for (AttributeDefinition refAttr : refType.attributeDefinitions) {
+                                String refAttrDataTypeName = refAttr.dataTypeName;
+                                String refAttrRevAttrName  = refAttr.reverseAttributeName;
+
+                                if (StringUtils.equals(refAttrDataTypeName, classTypeDefName) &&
+                                        StringUtils.equals(refAttrRevAttrName, oldAttr.name)) {
+                                    refAttrName = refAttr.name;
+                                    break;
+                                }
+                            }
+                        }
+
+                        // 2. Check if attribute present in typeRegistry. If present fetch all attributes associated with the type and
+                        // check revAttrName equals base type attr name AND classTypeDefName equals attribute name
+                        else {
+                            if (registry.isRegisteredType(attrType)) {
+                                AtlasType atlasType = registry.getType(attrType);
+
+                                if (isEntity(atlasType)) {
+                                    AtlasEntityType         entityType    = (AtlasEntityType) atlasType;
+                                    List<AtlasAttributeDef> atlasAttrDefs = entityType.getEntityDef().getAttributeDefs();
+
+                                    for (AtlasAttributeDef attrDef : atlasAttrDefs) {
+                                        boolean isForeignKey = entityType.isForeignKeyAttribute(attrDef.getName());
+
+                                        if (isForeignKey) {
+                                            AtlasType attribType = entityType.getAttributeType(attrDef.getName());
+
+                                            if (attribType.getTypeCategory() == TypeCategory.ARRAY) {
+                                                attribType = ((AtlasArrayType) attribType).getElementType();
+                                            }
+
+                                            if (attribType.getTypeCategory() == TypeCategory.ENTITY) {
+                                                String revAttrName = ((AtlasEntityType) attribType).
+                                                        getMappedFromRefAttribute(entityType.getTypeName(), attrDef.getName());
+
+                                                if (StringUtils.equals(classTypeDefName , attrDef.getTypeName()) &&
+                                                        StringUtils.equals(oldAttr.name, revAttrName)) {
+                                                    refAttrName = attrDef.getName();
+                                                }
+                                            }
+                                        }
+
+                                    }
+                                }
+                            }
+                        }
+
+                        if (StringUtils.isNotBlank(refAttrName)) { // ex: hive_table.columns, hive_column.table
+                            Map<String, Object> params = new HashMap<>();
+                            params.put(AtlasConstraintDef.CONSTRAINT_PARAM_REF_ATTRIBUTE, refAttrName);
+
+                            newAttr.addConstraint(new AtlasConstraintDef(CONSTRAINT_TYPE_MAPPED_FROM_REF, params));
+                        } else { // ex: hive_table.partitionKeys, with no reverseAttribute-reference
+                            newAttr.addConstraint(new AtlasConstraintDef(CONSTRAINT_TYPE_FOREIGN_KEY));
+                        }
+                    }
+
+                } else if (StringUtils.isNotEmpty(oldAttr.reverseAttributeName)) {
+                    Map<String, Object> params = new HashMap<>();
+                    params.put(CONSTRAINT_PARAM_ON_DELETE, CONSTRAINT_PARAM_VAL_CASCADE);
+
+                    newAttr.addConstraint(new AtlasConstraintDef(CONSTRAINT_TYPE_FOREIGN_KEY, params));
+                }
                 attrDefs.add(newAttr);
             }
 
@@ -356,23 +402,13 @@ public final class RestUtils {
         return ret.toArray(new EnumValue[ret.size()]);
     }
 
-    private static AtlasAttributeDef toAtlasAttributeDef(final AttributeDefinition attrDefinition) {
+    private static AtlasAttributeDef toAtlasAttributeDef(AttributeDefinition attrDefinition) {
         AtlasAttributeDef ret = new AtlasAttributeDef();
 
         ret.setName(attrDefinition.name);
         ret.setTypeName(attrDefinition.dataTypeName);
         ret.setIsIndexable(attrDefinition.isIndexable);
         ret.setIsUnique(attrDefinition.isUnique);
-        if (attrDefinition.isComposite) {
-            ret.addConstraint(new AtlasConstraintDef(CONSTRAINT_TYPE_OWNED_REF));
-        }
-
-        if (StringUtils.isNotBlank(attrDefinition.reverseAttributeName)) {
-            ret.addConstraint(new AtlasConstraintDef(CONSTRAINT_TYPE_INVERSE_REF,
-                                       new HashMap<String, Object>() {{
-                                           put(CONSTRAINT_PARAM_ATTRIBUTE, attrDefinition.reverseAttributeName);
-                                       }}));
-        }
 
         // Multiplicity attribute mapping
         Multiplicity multiplicity = attrDefinition.multiplicity;
@@ -404,15 +440,59 @@ public final class RestUtils {
         return ret;
     }
 
-    private static AttributeDefinition[] getAttributes(AtlasStructType structType, AtlasTypeRegistry registry) throws AtlasBaseException {
+    private static AttributeDefinition[] getAttributes(AtlasStructDef structDef, AtlasTypeRegistry registry) throws AtlasBaseException {
         List<AttributeDefinition> ret      = new ArrayList<>();
-        List<AtlasAttributeDef>   attrDefs = structType.getStructDef().getAttributeDefs();
+        List<AtlasAttributeDef>   attrDefs = structDef.getAttributeDefs();
 
         if (CollectionUtils.isNotEmpty(attrDefs)) {
-            for (AtlasAttributeDef attrDef : attrDefs) {
-                AtlasAttribute attribute = structType.getAttribute(attrDef.getName());
 
-                ret.add(AtlasStructDefStoreV1.toAttributeDefintion(attribute));
+            for (AtlasAttributeDef attrDef : attrDefs) {
+                String  name              = attrDef.getName();
+                String  dataTypeName      = attrDef.getTypeName();
+                Boolean isUnique          = attrDef.getIsUnique();
+                Boolean isIndexable       = attrDef.getIsIndexable();
+                String  reverseAttribName = null;
+                boolean isComposite;
+
+                // Multiplicity mapping
+                final int lower;
+                final int upper;
+
+                if (attrDef.getCardinality() == Cardinality.SINGLE) {
+                    lower = attrDef.getIsOptional() ? 0 : 1;
+                    upper = 1;
+                } else {
+                    if(attrDef.getIsOptional()) {
+                        lower = 0;
+                    } else {
+                        lower = attrDef.getValuesMinCount() < 1 ? 1 : attrDef.getValuesMinCount();
+                    }
+
+                    upper = attrDef.getValuesMaxCount() < 2 ? Integer.MAX_VALUE : attrDef.getValuesMaxCount();
+                }
+                
+                Multiplicity multiplicity = new Multiplicity(lower, upper, Cardinality.SET.equals(attrDef.getCardinality()));
+
+                // Constraint checks:
+                // 1. [ mappedFromRef -> isComposite ]
+                // 2. [ foreignKey(onDelete=cascade) -> reverseAttribute ]
+                AtlasStructType structType      = (AtlasStructType) registry.getType(structDef.getName());
+                boolean         isForeignKey    = structType.isForeignKeyAttribute(attrDef.getName());
+                boolean         isMappedFromRef = structType.isMappedFromRefAttribute(attrDef.getName());
+                AtlasType       attrType        = structType.getAttributeType(attrDef.getName());
+
+                if (attrType != null && isForeignKey) {
+                    if (attrType.getTypeCategory() == TypeCategory.ARRAY) {
+                        attrType = ((AtlasArrayType) attrType).getElementType();
+                    }
+
+                    if (attrType.getTypeCategory() == TypeCategory.ENTITY) {
+                        reverseAttribName = ((AtlasStructType) attrType).
+                                                 getMappedFromRefAttribute(structType.getTypeName(), attrDef.getName());
+                    }
+                }
+                isComposite = isMappedFromRef || (isForeignKey && StringUtils.isBlank(reverseAttribName));
+                ret.add(new AttributeDefinition(name, dataTypeName, multiplicity, isComposite, isUnique, isIndexable, reverseAttribName));
             }
         }
 
@@ -437,5 +517,4 @@ public final class RestUtils {
     private static boolean isEntity(AtlasType type) {
         return type.getTypeCategory() == TypeCategory.ENTITY;
     }
-    
-}
+}
\ No newline at end of file