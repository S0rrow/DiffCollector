diff --git a/server/tserver/src/main/java/org/apache/accumulo/tserver/replication/AccumuloReplicaSystem.java b/server/tserver/src/main/java/org/apache/accumulo/tserver/replication/AccumuloReplicaSystem.java
index 0bd467c879..417a107b08 100644
--- a/server/tserver/src/main/java/org/apache/accumulo/tserver/replication/AccumuloReplicaSystem.java
+++ b/server/tserver/src/main/java/org/apache/accumulo/tserver/replication/AccumuloReplicaSystem.java
@@ -16,9 +16,6 @@
  */
 package org.apache.accumulo.tserver.replication;
 
-import static com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly;
-import static java.util.Objects.requireNonNull;
-
 import java.io.ByteArrayOutputStream;
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
@@ -82,7 +79,9 @@ import org.apache.thrift.transport.TTransportException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.common.base.Preconditions;
 import com.google.common.net.HostAndPort;
+import static com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly;
 
 public class AccumuloReplicaSystem implements ReplicaSystem {
   private static final Logger log = LoggerFactory.getLogger(AccumuloReplicaSystem.class);
@@ -133,7 +132,7 @@ public class AccumuloReplicaSystem implements ReplicaSystem {
 
   @Override
   public void configure(String configuration) {
-    requireNonNull(configuration);
+    Preconditions.checkNotNull(configuration);
 
     // instance_name,zookeepers
     int index = configuration.indexOf(',');
@@ -599,8 +598,8 @@ public class AccumuloReplicaSystem implements ReplicaSystem {
   }
 
   protected String getPassword(AccumuloConfiguration localConf, ReplicationTarget target) {
-    requireNonNull(localConf);
-    requireNonNull(target);
+    Preconditions.checkNotNull(localConf);
+    Preconditions.checkNotNull(target);
 
     Map<String,String> peerPasswords = localConf.getAllPropertiesWithPrefix(Property.REPLICATION_PEER_PASSWORD);
     String password = peerPasswords.get(Property.REPLICATION_PEER_PASSWORD.getKey() + target.getPeerName());
@@ -611,8 +610,8 @@ public class AccumuloReplicaSystem implements ReplicaSystem {
   }
 
   protected String getKeytab(AccumuloConfiguration localConf, ReplicationTarget target) {
-    requireNonNull(localConf);
-    requireNonNull(target);
+    Preconditions.checkNotNull(localConf);
+    Preconditions.checkNotNull(target);
 
     Map<String,String> peerKeytabs = localConf.getAllPropertiesWithPrefix(Property.REPLICATION_PEER_KEYTAB);
     String keytab = peerKeytabs.get(Property.REPLICATION_PEER_KEYTAB.getKey() + target.getPeerName());
@@ -623,8 +622,8 @@ public class AccumuloReplicaSystem implements ReplicaSystem {
   }
 
   protected String getPrincipal(AccumuloConfiguration localConf, ReplicationTarget target) {
-    requireNonNull(localConf);
-    requireNonNull(target);
+    Preconditions.checkNotNull(localConf);
+    Preconditions.checkNotNull(target);
 
     String peerName = target.getPeerName();
     String userKey = Property.REPLICATION_PEER_USER.getKey() + peerName;
@@ -638,10 +637,10 @@ public class AccumuloReplicaSystem implements ReplicaSystem {
   }
 
   protected ClientContext getContextForPeer(AccumuloConfiguration localConf, ReplicationTarget target, String principal, AuthenticationToken token) {
-    requireNonNull(localConf);
-    requireNonNull(target);
-    requireNonNull(principal);
-    requireNonNull(token);
+    Preconditions.checkNotNull(localConf);
+    Preconditions.checkNotNull(target);
+    Preconditions.checkNotNull(principal);
+    Preconditions.checkNotNull(token);
 
     return new ClientContext(getPeerInstance(target), new Credentials(principal, token), localConf);
   }
@@ -671,7 +670,7 @@ public class AccumuloReplicaSystem implements ReplicaSystem {
 
       switch (key.event) {
         case DEFINE_TABLET:
-          if (target.getSourceTableId().equals(key.tablet.getTableId())) {
+          if (target.getSourceTableId().equals(key.tablet.getTableId().toString())) {
             desiredTids.add(key.tid);
           }
           break;
@@ -716,7 +715,7 @@ public class AccumuloReplicaSystem implements ReplicaSystem {
       switch (key.event) {
         case DEFINE_TABLET:
           // For new DEFINE_TABLETs, we also need to record the new tids we see
-          if (target.getSourceTableId().equals(key.tablet.getTableId())) {
+          if (target.getSourceTableId().equals(key.tablet.getTableId().toString())) {
             desiredTids.add(key.tid);
           }
           break;