diff --git a/typesystem/src/main/java/org/apache/atlas/typesystem/types/HierarchicalType.java b/typesystem/src/main/java/org/apache/atlas/typesystem/types/HierarchicalType.java
index 7c8db8476..80c6c015c 100755
--- a/typesystem/src/main/java/org/apache/atlas/typesystem/types/HierarchicalType.java
+++ b/typesystem/src/main/java/org/apache/atlas/typesystem/types/HierarchicalType.java
@@ -49,6 +49,7 @@ public abstract class HierarchicalType<ST extends HierarchicalType, T> extends A
 
     public final TypeSystem typeSystem;
     public final Class<ST> superTypeClass;
+    public final String name;
     public final FieldMapping fieldMapping;
     public final int numFields;
     public final ImmutableList<String> superTypes;
@@ -57,19 +58,14 @@ public abstract class HierarchicalType<ST extends HierarchicalType, T> extends A
     protected ImmutableMap<String, List<Path>> superTypePaths;
     protected ImmutableMap<String, Path> pathNameToPathMap;
 
-    HierarchicalType(TypeSystem typeSystem, Class<ST> superTypeClass, String name, ImmutableList<String> superTypes,
-        int numFields) {
-        this(typeSystem, superTypeClass, name, null, superTypes, numFields);
-    }
-
     /**
      * Used when creating a Type, to support recursive Structs.
      */
-    HierarchicalType(TypeSystem typeSystem, Class<ST> superTypeClass, String name, String description, ImmutableList<String> superTypes,
+    HierarchicalType(TypeSystem typeSystem, Class<ST> superTypeClass, String name, ImmutableList<String> superTypes,
             int numFields) {
-        super(name, description);
         this.typeSystem = typeSystem;
         this.superTypeClass = superTypeClass;
+        this.name = name;
         this.fieldMapping = null;
         this.numFields = numFields;
         this.superTypes = superTypes;
@@ -78,14 +74,10 @@ public abstract class HierarchicalType<ST extends HierarchicalType, T> extends A
     }
 
     HierarchicalType(TypeSystem typeSystem, Class<ST> superTypeClass, String name, ImmutableList<String> superTypes,
-        AttributeInfo... fields) throws AtlasException {
-        this(typeSystem, superTypeClass, name, null, superTypes, fields);
-    }
-    HierarchicalType(TypeSystem typeSystem, Class<ST> superTypeClass, String name, String description, ImmutableList<String> superTypes,
             AttributeInfo... fields) throws AtlasException {
-        super(name, description);
         this.typeSystem = typeSystem;
         this.superTypeClass = superTypeClass;
+        this.name = name;
         Pair<FieldMapping, ImmutableMap<String, String>> p = constructFieldMapping(superTypes, fields);
         this.fieldMapping = p.left;
         this.attributeNameToType = p.right;
@@ -94,6 +86,11 @@ public abstract class HierarchicalType<ST extends HierarchicalType, T> extends A
         this.immediateAttrs = ImmutableList.copyOf(fields);
     }
 
+    @Override
+    public String getName() {
+        return name;
+    }
+
     public FieldMapping fieldMapping() {
         return fieldMapping;
     }
@@ -108,30 +105,6 @@ public abstract class HierarchicalType<ST extends HierarchicalType, T> extends A
         return (cType == this || cType.superTypePaths.containsKey(getName()));
     }
 
-    /**
-     * Validate that current definition can be updated with the new definition
-     * @param newType
-     * @return true if the current definition can be updated with the new definition, else false
-     */
-    @Override
-    public void validateUpdate(IDataType newType) throws TypeUpdateException {
-        super.validateUpdate(newType);
-
-        HierarchicalType newHierarchicalType = (HierarchicalType) newType;
-
-        //validate on supertypes
-        if (!newHierarchicalType.superTypes.containsAll(superTypes)) {
-            throw new TypeUpdateException(newType, "New type doesn't contain all super types of old type");
-        }
-
-        //validate on fields
-        try {
-            TypeUtils.validateUpdate(fieldMapping, newHierarchicalType.fieldMapping);
-        } catch (TypeUpdateException e) {
-            throw new TypeUpdateException(newType, e);
-        }
-    }
-
     protected void setupSuperTypesGraph() throws AtlasException {
         setupSuperTypesGraph(superTypes);
     }
@@ -174,9 +147,9 @@ public abstract class HierarchicalType<ST extends HierarchicalType, T> extends A
     protected Pair<FieldMapping, ImmutableMap<String, String>> constructFieldMapping(ImmutableList<String> superTypes,
             AttributeInfo... fields) throws AtlasException {
 
-        Map<String, AttributeInfo> fieldsMap = new LinkedHashMap();
-        Map<String, Integer> fieldPos = new HashMap();
-        Map<String, Integer> fieldNullPos = new HashMap();
+        Map<String, AttributeInfo> fieldsMap = new LinkedHashMap<String, AttributeInfo>();
+        Map<String, Integer> fieldPos = new HashMap<String, Integer>();
+        Map<String, Integer> fieldNullPos = new HashMap<String, Integer>();
         Map<String, String> attributeNameToType = new HashMap<>();
 
         int numBools = 0;
@@ -367,16 +340,12 @@ public abstract class HierarchicalType<ST extends HierarchicalType, T> extends A
     @Override
     public int compareTo(ST o) {
         String oName = o.getName();
-        try {
-            if (o.isSubType(getName())) {
-                return 1;
-            } else if (isSubType(oName)) {
-                return -1;
-            } else {
-                return getName().compareTo(oName);
-            }
-        } catch(AtlasException e) {
-            throw new RuntimeException(e);
+        if (superTypes.contains(oName)) {
+            return 1;
+        } else if (o.superTypes.contains(getName())) {
+            return -1;
+        } else {
+            return getName().compareTo(oName);
         }
     }
 
@@ -493,4 +462,6 @@ public abstract class HierarchicalType<ST extends HierarchicalType, T> extends A
             throw new UnsupportedOperationException();
         }
     }
+
+
 }