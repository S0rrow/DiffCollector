diff --git a/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/SubstringDescriptor.java b/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/SubstringDescriptor.java
index 660fbb82f3..3ba9d61531 100644
--- a/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/SubstringDescriptor.java
+++ b/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/SubstringDescriptor.java
@@ -1,20 +1,16 @@
 /*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
+ * Copyright 2009-2013 by The Regents of the University of California
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * you may obtain a copy of the License from
  *
- *   http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 package org.apache.asterix.runtime.evaluators.functions;
 
@@ -28,20 +24,16 @@ import org.apache.asterix.om.types.ATypeTag;
 import org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;
 import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;
 import org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;
-import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;
-import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;
-import org.apache.hyracks.api.context.IHyracksTaskContext;
-import org.apache.hyracks.data.std.api.IPointable;
+import org.apache.hyracks.algebricks.runtime.base.ICopyEvaluator;
+import org.apache.hyracks.algebricks.runtime.base.ICopyEvaluatorFactory;
+import org.apache.hyracks.data.std.api.IDataOutputProvider;
 import org.apache.hyracks.data.std.primitive.DoublePointable;
 import org.apache.hyracks.data.std.primitive.FloatPointable;
 import org.apache.hyracks.data.std.primitive.IntegerPointable;
 import org.apache.hyracks.data.std.primitive.LongPointable;
 import org.apache.hyracks.data.std.primitive.ShortPointable;
 import org.apache.hyracks.data.std.primitive.UTF8StringPointable;
-import org.apache.hyracks.data.std.primitive.VoidPointable;
 import org.apache.hyracks.data.std.util.ArrayBackedValueStorage;
-import org.apache.hyracks.data.std.util.GrowableArray;
-import org.apache.hyracks.data.std.util.UTF8StringBuilder;
 import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference;
 
 public class SubstringDescriptor extends AbstractScalarFunctionDynamicDescriptor {
@@ -49,129 +41,133 @@ public class SubstringDescriptor extends AbstractScalarFunctionDynamicDescriptor
     private static final long serialVersionUID = 1L;
 
     public static final IFunctionDescriptorFactory FACTORY = new IFunctionDescriptorFactory() {
-        @Override
         public IFunctionDescriptor createFunctionDescriptor() {
             return new SubstringDescriptor();
         }
     };
 
     @Override
-    public IScalarEvaluatorFactory createEvaluatorFactory(final IScalarEvaluatorFactory[] args)
-            throws AlgebricksException {
-        return new IScalarEvaluatorFactory() {
+    public ICopyEvaluatorFactory createEvaluatorFactory(final ICopyEvaluatorFactory[] args) throws AlgebricksException {
+        return new ICopyEvaluatorFactory() {
             private static final long serialVersionUID = 1L;
 
             @Override
-            public IScalarEvaluator createScalarEvaluator(final IHyracksTaskContext ctx) throws AlgebricksException {
-                return new IScalarEvaluator() {
+            public ICopyEvaluator createEvaluator(final IDataOutputProvider output) throws AlgebricksException {
+                return new ICopyEvaluator() {
 
-                    private final ArrayBackedValueStorage resultStorage = new ArrayBackedValueStorage();
-                    private final DataOutput out = resultStorage.getDataOutput();
-                    private final IPointable argPtr = new VoidPointable();
-                    private final IScalarEvaluator evalString = args[0].createScalarEvaluator(ctx);
-                    private final IScalarEvaluator evalStart = args[1].createScalarEvaluator(ctx);
-                    private final IScalarEvaluator evalLen = args[2].createScalarEvaluator(ctx);
-
-                    private final GrowableArray array = new GrowableArray();
-                    private final UTF8StringBuilder builder = new UTF8StringBuilder();
-                    private final UTF8StringPointable string = new UTF8StringPointable();
+                    private DataOutput out = output.getDataOutput();
+                    private ArrayBackedValueStorage argOut = new ArrayBackedValueStorage();
+                    private ICopyEvaluator evalString = args[0].createEvaluator(argOut);
+                    private ICopyEvaluator evalStart = args[1].createEvaluator(argOut);
+                    private ICopyEvaluator evalLen = args[2].createEvaluator(argOut);
+                    private final byte stt = ATypeTag.STRING.serialize();
 
                     @Override
-                    public void evaluate(IFrameTupleReference tuple, IPointable result) throws AlgebricksException {
-                        resultStorage.reset();
-                        evalStart.evaluate(tuple, argPtr);
-                        byte[] bytes = argPtr.getByteArray();
-                        int offset = argPtr.getStartOffset();
+                    public void evaluate(IFrameTupleReference tuple) throws AlgebricksException {
+                        argOut.reset();
+                        evalStart.evaluate(tuple);
                         int start = 0;
 
-                        ATypeTag argPtrTypeTag = ATypeTag.VALUE_TYPE_MAPPING[bytes[offset]];
+                        ATypeTag argOutTypeTag = ATypeTag.VALUE_TYPE_MAPPING[argOut.getByteArray()[0]];
 
-                        switch (argPtrTypeTag) {
+                        switch (argOutTypeTag) {
                             case INT64:
-                                start = (int) LongPointable.getLong(bytes, offset + 1) - 1;
+                                start = (int) LongPointable.getLong(argOut.getByteArray(), 1) - 1;
                                 break;
                             case INT32:
-                                start = IntegerPointable.getInteger(bytes, offset + 1) - 1;
+                                start = IntegerPointable.getInteger(argOut.getByteArray(), 1) - 1;
                                 break;
                             case INT8:
-                                start = bytes[offset + 1] - 1;
+                                start = argOut.getByteArray()[1] - 1;
                                 break;
                             case INT16:
-                                start = ShortPointable.getShort(bytes, offset + 1) - 1;
+                                start = (int) ShortPointable.getShort(argOut.getByteArray(), 1) - 1;
                                 break;
                             case FLOAT:
-                                start = (int) FloatPointable.getFloat(bytes, offset + 1) - 1;
+                                start = (int) FloatPointable.getFloat(argOut.getByteArray(), 1) - 1;
                                 break;
                             case DOUBLE:
-                                start = (int) DoublePointable.getDouble(bytes, offset + 1) - 1;
+                                start = (int) DoublePointable.getDouble(argOut.getByteArray(), 1) - 1;
                                 break;
                             default:
                                 throw new AlgebricksException(AsterixBuiltinFunctions.SUBSTRING.getName()
                                         + ": expects type INT8/16/32/64/FLOAT/DOUBLE for the second argument but got "
-                                        + argPtrTypeTag);
+                                        + argOutTypeTag);
                         }
 
-                        evalLen.evaluate(tuple, argPtr);
-                        bytes = argPtr.getByteArray();
-                        offset = argPtr.getStartOffset();
+                        argOut.reset();
+                        evalLen.evaluate(tuple);
                         int len = 0;
 
-                        argPtrTypeTag = ATypeTag.VALUE_TYPE_MAPPING[bytes[offset]];
+                        argOutTypeTag = ATypeTag.VALUE_TYPE_MAPPING[argOut.getByteArray()[0]];
 
-                        switch (argPtrTypeTag) {
+                        switch (argOutTypeTag) {
                             case INT64:
-                                len = (int) LongPointable.getLong(bytes, offset + 1);
+                                len = (int) LongPointable.getLong(argOut.getByteArray(), 1);
                                 break;
                             case INT32:
-                                len = IntegerPointable.getInteger(bytes, offset + 1);
+                                len = IntegerPointable.getInteger(argOut.getByteArray(), 1);
                                 break;
                             case INT8:
-                                len = bytes[offset + 1];
+                                len = argOut.getByteArray()[1];
                                 break;
                             case INT16:
-                                len = ShortPointable.getShort(bytes, offset + 1);
+                                len = (int) ShortPointable.getShort(argOut.getByteArray(), 1);
                                 break;
                             case FLOAT:
-                                len = (int) FloatPointable.getFloat(bytes, offset + 1);
+                                len = (int) FloatPointable.getFloat(argOut.getByteArray(), 1);
                                 break;
                             case DOUBLE:
-                                len = (int) DoublePointable.getDouble(bytes, offset + 1);
+                                len = (int) DoublePointable.getDouble(argOut.getByteArray(), 1);
                                 break;
                             default:
                                 throw new AlgebricksException(AsterixBuiltinFunctions.SUBSTRING.getName()
                                         + ": expects type INT8/16/32/64/FLOAT/DOUBLE for the third argument but got "
-                                        + argPtrTypeTag);
+                                        + argOutTypeTag);
                         }
 
-                        evalString.evaluate(tuple, argPtr);
-                        bytes = argPtr.getByteArray();
-                        offset = argPtr.getStartOffset();
-                        int length = argPtr.getLength();
-                        argPtrTypeTag = ATypeTag.VALUE_TYPE_MAPPING[bytes[offset]];
+                        argOut.reset();
+                        evalString.evaluate(tuple);
+
+                        byte[] bytes = argOut.getByteArray();
+                        argOutTypeTag = ATypeTag.VALUE_TYPE_MAPPING[bytes[0]];
 
-                        if (argPtrTypeTag != ATypeTag.STRING) {
+                        if (argOutTypeTag != ATypeTag.STRING) {
                             throw new AlgebricksException(AsterixBuiltinFunctions.SUBSTRING.getName()
-                                    + ": expects type STRING for the first argument but got " + argPtrTypeTag);
+                                    + ": expects type STRING for the first argument but got " + argOutTypeTag);
+                        }
+                        int utflen = UTF8StringPointable.getUTFLength(bytes, 1);
+                        int sStart = 3;
+                        int c = 0;
+                        int idxPos1 = 0;
+                        // skip to start
+                        while (idxPos1 < start && c < utflen) {
+                            c += UTF8StringPointable.charSize(bytes, sStart + c);
+                            ++idxPos1;
+                        }
+                        int startSubstr = c;
+                        int idxPos2 = 0;
+                        while (idxPos2 < len && c < utflen) {
+                            c += UTF8StringPointable.charSize(bytes, sStart + c);
+                            ++idxPos2;
                         }
 
-                        string.set(bytes, offset + 1, length - 1);
-                        array.reset();
-                        try {
-                            UTF8StringPointable.substr(string, start, len, builder, array);
-                        } catch (StringIndexOutOfBoundsException e) {
+                        if (idxPos2 < len) {
                             throw new AlgebricksException(AsterixBuiltinFunctions.SUBSTRING.getName() + ": start="
-                                    + start + "\tgoing past the input length.");
-                        } catch (IOException e) {
-                            throw new AlgebricksException(e);
+                                    + start + "\tlen=" + len + "\tgoing past the input length=" + (idxPos1 + idxPos2)
+                                    + ".");
                         }
 
+                        int substrByteLen = c - startSubstr;
                         try {
-                            out.writeByte(ATypeTag.SERIALIZED_STRING_TYPE_TAG);
-                            out.write(array.getByteArray(), 0, array.getLength());
+                            out.writeByte(stt);
+                            out.writeByte((byte) ((substrByteLen >>> 8) & 0xFF));
+                            out.writeByte((byte) ((substrByteLen >>> 0) & 0xFF));
+                            out.write(bytes, sStart + startSubstr, substrByteLen);
+
                         } catch (IOException e) {
                             throw new AlgebricksException(e);
                         }
-                        result.set(resultStorage);
                     }
                 };
             }