diff --git a/server/master/src/test/java/org/apache/accumulo/master/replication/StatusMakerTest.java b/server/master/src/test/java/org/apache/accumulo/master/replication/StatusMakerTest.java
index e0fc421e39..d0d47dce2d 100644
--- a/server/master/src/test/java/org/apache/accumulo/master/replication/StatusMakerTest.java
+++ b/server/master/src/test/java/org/apache/accumulo/master/replication/StatusMakerTest.java
@@ -16,10 +16,7 @@
  */
 package org.apache.accumulo.master.replication;
 
-import java.util.Arrays;
 import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
@@ -35,12 +32,9 @@ import org.apache.accumulo.core.data.Key;
 import org.apache.accumulo.core.data.Mutation;
 import org.apache.accumulo.core.data.Value;
 import org.apache.accumulo.core.metadata.schema.MetadataSchema.ReplicationSection;
-import org.apache.accumulo.core.protobuf.ProtobufUtil;
-import org.apache.accumulo.core.replication.ReplicationSchema.OrderSection;
 import org.apache.accumulo.core.replication.ReplicationSchema.StatusSection;
 import org.apache.accumulo.core.replication.StatusUtil;
 import org.apache.accumulo.core.replication.proto.Replication.Status;
-import org.apache.accumulo.core.security.Authorizations;
 import org.apache.accumulo.core.security.Credentials;
 import org.apache.accumulo.server.replication.ReplicationTable;
 import org.apache.accumulo.server.util.ReplicationTableUtil;
@@ -50,7 +44,6 @@ import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TestName;
 
-import com.google.common.collect.Iterables;
 import com.google.common.collect.Sets;
 
 /**
@@ -69,7 +62,7 @@ public class StatusMakerTest {
 
     String sourceTable = "source";
     conn.tableOperations().create(sourceTable);
-    ReplicationTableUtil.configureMetadataTable(conn, sourceTable);
+    ReplicationTableUtil.configureReplicationCombiner(conn, sourceTable);
 
     BatchWriter bw = conn.createBatchWriter(sourceTable, new BatchWriterConfig());
     String walPrefix = "hdfs://localhost:8020/accumulo/wals/tserver+port/";
@@ -106,149 +99,4 @@ public class StatusMakerTest {
     }
   }
 
-  @Test
-  public void openMessagesAreNotDeleted() throws Exception {
-    MockInstance inst = new MockInstance(test.getMethodName());
-    Credentials creds = new Credentials("root", new PasswordToken(""));
-    Connector conn = inst.getConnector(creds.getPrincipal(), creds.getToken());
-
-    String sourceTable = "source";
-    conn.tableOperations().create(sourceTable);
-    ReplicationTableUtil.configureMetadataTable(conn, sourceTable);
-
-    BatchWriter bw = conn.createBatchWriter(sourceTable, new BatchWriterConfig());
-    String walPrefix = "hdfs://localhost:8020/accumulo/wals/tserver+port/";
-    Set<String> files = Sets.newHashSet(walPrefix + UUID.randomUUID(), walPrefix + UUID.randomUUID(), walPrefix + UUID.randomUUID(),
-        walPrefix + UUID.randomUUID());
-    Map<String,Integer> fileToTableId = new HashMap<>();
-
-    int index = 1;
-    for (String file : files) {
-      Mutation m = new Mutation(ReplicationSection.getRowPrefix() + file);
-      m.put(ReplicationSection.COLF, new Text(Integer.toString(index)), StatusUtil.newFileValue());
-      bw.addMutation(m);
-      fileToTableId.put(file, index);
-      index++;
-    }
-
-    bw.close();
-
-    StatusMaker statusMaker = new StatusMaker(conn);
-    statusMaker.setSourceTableName(sourceTable);
-
-    statusMaker.run();
-
-    Scanner s = conn.createScanner(sourceTable, Authorizations.EMPTY);
-    s.setRange(ReplicationSection.getRange());
-    s.fetchColumnFamily(ReplicationSection.COLF);
-    Assert.assertEquals(files.size(), Iterables.size(s));
-  }
-
-  @Test
-  public void closedMessagesAreDeleted() throws Exception {
-    MockInstance inst = new MockInstance(test.getMethodName());
-    Credentials creds = new Credentials("root", new PasswordToken(""));
-    Connector conn = inst.getConnector(creds.getPrincipal(), creds.getToken());
-
-    String sourceTable = "source";
-    conn.tableOperations().create(sourceTable);
-    ReplicationTableUtil.configureMetadataTable(conn, sourceTable);
-
-    BatchWriter bw = conn.createBatchWriter(sourceTable, new BatchWriterConfig());
-    String walPrefix = "hdfs://localhost:8020/accumulo/wals/tserver+port/";
-    Set<String> files = Sets.newHashSet(walPrefix + UUID.randomUUID(), walPrefix + UUID.randomUUID(), walPrefix + UUID.randomUUID(),
-        walPrefix + UUID.randomUUID());
-    Map<String,Integer> fileToTableId = new HashMap<>();
-
-    Status stat = Status.newBuilder().setBegin(0).setEnd(0).setInfiniteEnd(true).setClosed(true).build();
-
-    int index = 1;
-    for (String file : files) {
-      Mutation m = new Mutation(ReplicationSection.getRowPrefix() + file);
-      m.put(ReplicationSection.COLF, new Text(Integer.toString(index)), ProtobufUtil.toValue(stat));
-      bw.addMutation(m);
-      fileToTableId.put(file, index);
-      index++;
-    }
-
-    bw.close();
-
-    StatusMaker statusMaker = new StatusMaker(conn);
-    statusMaker.setSourceTableName(sourceTable);
-
-    statusMaker.run();
-
-    Scanner s = conn.createScanner(sourceTable, Authorizations.EMPTY);
-    s.setRange(ReplicationSection.getRange());
-    s.fetchColumnFamily(ReplicationSection.COLF);
-    for (Entry<Key,Value> e : s) {
-      System.out.println(e.getKey().toStringNoTruncate() + " " + e.getValue());
-    }
-    s = conn.createScanner(sourceTable, Authorizations.EMPTY);
-    s.setRange(ReplicationSection.getRange());
-    s.fetchColumnFamily(ReplicationSection.COLF);
-    Assert.assertEquals(0, Iterables.size(s));
-    
-  }
-
-  @Test
-  public void closedMessagesCreateOrderRecords() throws Exception {
-    MockInstance inst = new MockInstance(test.getMethodName());
-    Credentials creds = new Credentials("root", new PasswordToken(""));
-    Connector conn = inst.getConnector(creds.getPrincipal(), creds.getToken());
-
-    String sourceTable = "source";
-    conn.tableOperations().create(sourceTable);
-    ReplicationTableUtil.configureMetadataTable(conn, sourceTable);
-
-    BatchWriter bw = conn.createBatchWriter(sourceTable, new BatchWriterConfig());
-    String walPrefix = "hdfs://localhost:8020/accumulo/wals/tserver+port/";
-    List<String> files = Arrays.asList(walPrefix + UUID.randomUUID(), walPrefix + UUID.randomUUID(), walPrefix + UUID.randomUUID(),
-        walPrefix + UUID.randomUUID());
-    Map<String,Integer> fileToTableId = new HashMap<>();
-
-    Status.Builder statBuilder = Status.newBuilder().setBegin(0).setEnd(0).setInfiniteEnd(true).setClosed(true);
-
-    int index = 1;
-    long time = System.currentTimeMillis();
-    for (String file : files) {
-      statBuilder.setClosedTime(time++);
-      Mutation m = new Mutation(ReplicationSection.getRowPrefix() + file);
-      m.put(ReplicationSection.COLF, new Text(Integer.toString(index)), ProtobufUtil.toValue(statBuilder.build()));
-      bw.addMutation(m);
-      fileToTableId.put(file, index);
-      index++;
-    }
-
-    bw.close();
-
-    StatusMaker statusMaker = new StatusMaker(conn);
-    statusMaker.setSourceTableName(sourceTable);
-
-    statusMaker.run();
-
-    Scanner s = conn.createScanner(sourceTable, Authorizations.EMPTY);
-    s.setRange(ReplicationSection.getRange());
-    s.fetchColumnFamily(ReplicationSection.COLF);
-    Assert.assertEquals(0, Iterables.size(s));
-
-    s = ReplicationTable.getScanner(conn);
-    OrderSection.limit(s);
-    Iterator<Entry<Key,Value>> iter = s.iterator();
-    Assert.assertTrue("Found no order records in replication table", iter.hasNext());
-
-    Iterator<String> expectedFiles = files.iterator();
-    Text buff = new Text();
-    while (expectedFiles.hasNext() && iter.hasNext()) {
-      String file = expectedFiles.next();
-      Entry<Key,Value> entry  = iter.next();
-
-      Assert.assertEquals(file, OrderSection.getFile(entry.getKey(), buff));
-      OrderSection.getTableId(entry.getKey(), buff);
-      Assert.assertEquals(fileToTableId.get(file).intValue(), Integer.parseInt(buff.toString()));
-    }
-
-    Assert.assertFalse("Found more files unexpectedly", expectedFiles.hasNext());
-    Assert.assertFalse("Found more entries in replication table unexpectedly", iter.hasNext());
-  }
 }