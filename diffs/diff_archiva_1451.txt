diff --git a/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/maven/archiva/webdav/ArchivaDavResourceFactory.java b/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/maven/archiva/webdav/ArchivaDavResourceFactory.java
index ff34eee1c..3b4d0b27d 100644
--- a/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/maven/archiva/webdav/ArchivaDavResourceFactory.java
+++ b/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/maven/archiva/webdav/ArchivaDavResourceFactory.java
@@ -19,27 +19,23 @@
  * under the License.
  */
 
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.FileReader;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import javax.servlet.http.HttpServletResponse;
-
-import org.apache.commons.lang.StringUtils;
-import org.apache.jackrabbit.webdav.DavException;
-import org.apache.jackrabbit.webdav.DavResource;
-import org.apache.jackrabbit.webdav.DavResourceFactory;
-import org.apache.jackrabbit.webdav.DavResourceLocator;
-import org.apache.jackrabbit.webdav.DavServletRequest;
-import org.apache.jackrabbit.webdav.DavServletResponse;
-import org.apache.jackrabbit.webdav.DavSession;
-import org.apache.jackrabbit.webdav.lock.LockManager;
-import org.apache.jackrabbit.webdav.lock.SimpleLockManager;
+import com.opensymphony.xwork.ActionContext;
+import org.apache.jackrabbit.webdav.*;
+import org.apache.maven.archiva.repository.ManagedRepositoryContent;
+import org.apache.maven.archiva.repository.RepositoryNotFoundException;
+import org.apache.maven.archiva.repository.RepositoryException;
+import org.apache.maven.archiva.repository.RepositoryContentFactory;
+import org.apache.maven.archiva.repository.layout.LayoutException;
+import org.apache.maven.archiva.repository.content.RepositoryRequest;
+import org.apache.maven.archiva.repository.audit.AuditListener;
+import org.apache.maven.archiva.repository.audit.Auditable;
+import org.apache.maven.archiva.repository.audit.AuditEvent;
+import org.apache.maven.archiva.repository.metadata.MetadataTools;
+import org.apache.maven.archiva.repository.metadata.RepositoryMetadataException;
+import org.apache.maven.archiva.webdav.util.WebdavMethodUtil;
+import org.apache.maven.archiva.webdav.util.MimeTypes;
+import org.apache.maven.archiva.webdav.util.RepositoryPathUtil;
+import org.apache.maven.archiva.proxy.RepositoryProxyConnectors;
 import org.apache.maven.archiva.common.utils.PathUtil;
 import org.apache.maven.archiva.configuration.ArchivaConfiguration;
 import org.apache.maven.archiva.configuration.RepositoryGroupConfiguration;
@@ -47,24 +43,8 @@
 import org.apache.maven.archiva.model.ProjectReference;
 import org.apache.maven.archiva.model.VersionedReference;
 import org.apache.maven.archiva.policies.ProxyDownloadException;
-import org.apache.maven.archiva.proxy.RepositoryProxyConnectors;
-import org.apache.maven.archiva.repository.ManagedRepositoryContent;
-import org.apache.maven.archiva.repository.RepositoryContentFactory;
-import org.apache.maven.archiva.repository.RepositoryException;
-import org.apache.maven.archiva.repository.RepositoryNotFoundException;
-import org.apache.maven.archiva.repository.audit.AuditEvent;
-import org.apache.maven.archiva.repository.audit.AuditListener;
-import org.apache.maven.archiva.repository.audit.Auditable;
-import org.apache.maven.archiva.repository.content.RepositoryRequest;
-import org.apache.maven.archiva.repository.layout.LayoutException;
-import org.apache.maven.archiva.repository.metadata.MetadataTools;
-import org.apache.maven.archiva.repository.metadata.RepositoryMetadataException;
-import org.apache.maven.archiva.repository.scanner.RepositoryContentConsumers;
 import org.apache.maven.archiva.security.ArchivaXworkUser;
 import org.apache.maven.archiva.security.ServletAuthenticator;
-import org.apache.maven.archiva.webdav.util.MimeTypes;
-import org.apache.maven.archiva.webdav.util.RepositoryPathUtil;
-import org.apache.maven.archiva.webdav.util.WebdavMethodUtil;
 import org.apache.maven.model.DistributionManagement;
 import org.apache.maven.model.Model;
 import org.apache.maven.model.Relocation;
@@ -82,7 +62,12 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.opensymphony.xwork.ActionContext;
+import javax.servlet.http.HttpServletResponse;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.io.*;
 
 /**
  * @author <a href="mailto:james@atlassian.com">James William Dumay</a>
@@ -91,10 +76,6 @@
 public class ArchivaDavResourceFactory
     implements DavResourceFactory, Auditable
 {
-    private static final String PROXIED_SUFFIX = " (proxied)";
-
-    private static final String HTTP_PUT_METHOD = "PUT";
-    
     private Logger log = LoggerFactory.getLogger( ArchivaDavResourceFactory.class );
 
     /**
@@ -142,15 +123,6 @@
      */
     private HttpAuthenticator httpAuth;
     
-    
-    /**
-     * Lock Manager - use simple implementation from JackRabbit
-     */
-    private final LockManager lockManager = new SimpleLockManager();
-
-    /** @plexus.requirement */
-    private RepositoryContentConsumers consumers;
-    
     public DavResource createResource( final DavResourceLocator locator, final DavServletRequest request,
                                        final DavServletResponse response )
         throws DavException
@@ -159,7 +131,8 @@ public DavResource createResource( final DavResourceLocator locator, final DavSe
         ArchivaDavResourceLocator archivaLocator = (ArchivaDavResourceLocator) locator;
         
         RepositoryGroupConfiguration repoGroupConfig =
-            archivaConfiguration.getConfiguration().getRepositoryGroupsAsMap().get( archivaLocator.getRepositoryId() );
+            archivaConfiguration.getConfiguration().getRepositoryGroupsAsMap().get(
+                                                                                    ( (RepositoryLocator) locator ).getRepositoryId() );
         List<String> repositories = new ArrayList<String>();
 
         boolean isGet = WebdavMethodUtil.isReadMethod( request.getMethod() );
@@ -169,8 +142,8 @@ public DavResource createResource( final DavResourceLocator locator, final DavSe
         {   
             if( WebdavMethodUtil.isWriteMethod( request.getMethod() ) )
             {
-                throw new DavException( HttpServletResponse.SC_METHOD_NOT_ALLOWED,
-                                        "Write method not allowed for repository groups." );
+                throw new DavException( HttpServletResponse.SC_BAD_REQUEST, "Bad request to repository group <" +
+                    repoGroupConfig.getId() + ">" );
             }
             repositories.addAll( repoGroupConfig.getRepositories() );
             
@@ -182,13 +155,7 @@ public DavResource createResource( final DavResourceLocator locator, final DavSe
         }
         else
         {
-            repositories.add( archivaLocator.getRepositoryId() );
-        }
-       
-        //MRM-419 - Windows Webdav support. Should not 404 if there is no content.
-        if (StringUtils.isEmpty(archivaLocator.getRepositoryId()))
-        {
-            throw new DavException(HttpServletResponse.SC_NO_CONTENT);
+            repositories.add( ( (RepositoryLocator) locator ).getRepositoryId() );
         }
 
         DavResource resource = null;
@@ -238,18 +205,18 @@ public DavResource createResource( final DavResourceLocator locator, final DavSe
                                         
                     if( resource == null )
                     {
-                        e = new DavException( HttpServletResponse.SC_NOT_FOUND, "Resource does not exist" );
+                        e = new DavException( HttpServletResponse.SC_NOT_FOUND, "Repository does not exist" );
                     }
                     else
                     {
                         setHeaders( locator, response );
 
                         // compatibility with MRM-440 to ensure browsing the repository works ok
-                        if ( resource.isCollection() && !request.getRequestURI().endsWith("/" ) )
+                        if ( resource.isCollection() && !resource.getLocator().getResourcePath().endsWith( "/" ) )
                         {
                             throw new BrowserRedirectException( resource.getHref() );
                         }
-                        resource.addLockManager(lockManager);
+
                         return resource;
                     }
                 }
@@ -276,11 +243,9 @@ public DavResource createResource( final DavResourceLocator locator, final DavSe
             String logicalResource = RepositoryPathUtil.getLogicalResource( locator.getResourcePath() );
             File resourceFile = new File( managedRepository.getRepoRoot(), logicalResource );
             resource =
-                new ArchivaDavResource( resourceFile.getAbsolutePath(), logicalResource,
-                                        managedRepository.getRepository(), davSession, archivaLocator, this, mimeTypes,
-                                        auditListeners, consumers );
+                new ArchivaDavResource( resourceFile.getAbsolutePath(), logicalResource, mimeTypes, archivaLocator,
+                                        this );
         }
-        resource.addLockManager(lockManager);
         return resource;
     }
 
@@ -290,18 +255,16 @@ private DavResource doGet( ManagedRepositoryContent managedRepository, DavServle
     {
         File resourceFile = new File( managedRepository.getRepoRoot(), logicalResource.getPath() );
         ArchivaDavResource resource =
-            new ArchivaDavResource( resourceFile.getAbsolutePath(), logicalResource.getPath(),
-                                    managedRepository.getRepository(), request.getRemoteAddr(),
-                                    request.getDavSession(), locator, this, mimeTypes, auditListeners, consumers );
+            new ArchivaDavResource( resourceFile.getAbsolutePath(), logicalResource.getPath(), mimeTypes, locator, this );
 
         if ( !resource.isCollection() )
         {
-            boolean previouslyExisted = resourceFile.exists();
-
             // At this point the incoming request can either be in default or
             // legacy layout format.
             boolean fromProxy = fetchContentFromProxies( managedRepository, request, logicalResource );
 
+            boolean previouslyExisted = resourceFile.exists();
+
             try
             {
                 // Perform an adjustment of the resource to the managed
@@ -322,23 +285,17 @@ private DavResource doGet( ManagedRepositoryContent managedRepository, DavServle
             // Attempt to fetch the resource from any defined proxy.
             if ( fromProxy )
             {
-                String repositoryId = locator.getRepositoryId();
-                String event = ( previouslyExisted ? AuditEvent.MODIFY_FILE : AuditEvent.CREATE_FILE ) + PROXIED_SUFFIX;
-                triggerAuditEvent( request.getRemoteAddr(), repositoryId, logicalResource.getPath(), event );
+                processAuditEvents( request, locator.getWorkspaceName(), logicalResource.getPath(), previouslyExisted,
+                                    resourceFile, " (proxied)" );
             }
+            resource =
+                new ArchivaDavResource( resourceFile.getAbsolutePath(), logicalResource.getPath(), mimeTypes, locator,
+                                        this );
 
             if ( !resourceFile.exists() )
             {
                 resource = null;
             }
-            else
-            {
-                resource =
-                    new ArchivaDavResource( resourceFile.getAbsolutePath(), logicalResource.getPath(),
-                                            managedRepository.getRepository(), request.getRemoteAddr(),
-                                            request.getDavSession(), locator, this, mimeTypes, auditListeners,
-                                            consumers );
-            }
         }
         return resource;
     }
@@ -355,18 +312,22 @@ private DavResource doPut( ManagedRepositoryContent managedRepository, DavServle
 
         File rootDirectory = new File( managedRepository.getRepoRoot() );
         File destDir = new File( rootDirectory, logicalResource.getPath() ).getParentFile();
-        if ( request.getMethod().equals(HTTP_PUT_METHOD) && !destDir.exists() )
+        if ( !destDir.exists() )
         {
             destDir.mkdirs();
             String relPath = PathUtil.getRelative( rootDirectory.getAbsolutePath(), destDir );
-            triggerAuditEvent( request.getRemoteAddr(), logicalResource.getPath(), relPath, AuditEvent.CREATE_DIR );
+            triggerAuditEvent( request, logicalResource.getPath(), relPath, AuditEvent.CREATE_DIR );
         }
 
         File resourceFile = new File( managedRepository.getRepoRoot(), logicalResource.getPath() );
 
-        return new ArchivaDavResource( resourceFile.getAbsolutePath(), logicalResource.getPath(),
-                                       managedRepository.getRepository(), request.getRemoteAddr(),
-                                       request.getDavSession(), locator, this, mimeTypes, auditListeners, consumers );
+        boolean previouslyExisted = resourceFile.exists();
+
+        processAuditEvents( request, locator.getRepositoryId(), logicalResource.getPath(), previouslyExisted,
+                            resourceFile, null );
+
+        return new ArchivaDavResource( resourceFile.getAbsolutePath(), logicalResource.getPath(), mimeTypes, locator,
+                                       this );
     }
 
     private boolean fetchContentFromProxies( ManagedRepositoryContent managedRepository, DavServletRequest request,
@@ -528,11 +489,51 @@ protected void applyServerSideRelocation( ManagedRepositoryContent managedReposi
         }
     }
 
-    // TODO: remove?
-    private void triggerAuditEvent( String remoteIP, String repositoryId, String resource, String action )
+    private void processAuditEvents( DavServletRequest request, String repositoryId, String resource,
+                                     boolean previouslyExisted, File resourceFile, String suffix )
+    {
+        if ( suffix == null )
+        {
+            suffix = "";
+        }
+
+        // Process Create Audit Events.
+        if ( !previouslyExisted && resourceFile.exists() )
+        {
+            if ( resourceFile.isFile() )
+            {
+                triggerAuditEvent( request, repositoryId, resource, AuditEvent.CREATE_FILE + suffix );
+            }
+            else if ( resourceFile.isDirectory() )
+            {
+                triggerAuditEvent( request, repositoryId, resource, AuditEvent.CREATE_DIR + suffix );
+            }
+        }
+        // Process Remove Audit Events.
+        else if ( previouslyExisted && !resourceFile.exists() )
+        {
+            if ( resourceFile.isFile() )
+            {
+                triggerAuditEvent( request, repositoryId, resource, AuditEvent.REMOVE_FILE + suffix );
+            }
+            else if ( resourceFile.isDirectory() )
+            {
+                triggerAuditEvent( request, repositoryId, resource, AuditEvent.REMOVE_DIR + suffix );
+            }
+        }
+        // Process modify events.
+        else
+        {
+            if ( resourceFile.isFile() )
+            {
+                triggerAuditEvent( request, repositoryId, resource, AuditEvent.MODIFY_FILE + suffix );
+            }
+        }
+    }
+
+    private void triggerAuditEvent( String user, String remoteIP, String repositoryId, String resource, String action )
     {
-        String activePrincipal = ArchivaXworkUser.getActivePrincipal( ActionContext.getContext().getSession() );
-        AuditEvent event = new AuditEvent( repositoryId, activePrincipal, resource, action );
+        AuditEvent event = new AuditEvent( repositoryId, user, resource, action );
         event.setRemoteIP( remoteIP );
 
         for ( AuditListener listener : auditListeners )
@@ -541,6 +542,17 @@ private void triggerAuditEvent( String remoteIP, String repositoryId, String res
         }
     }
 
+    private void triggerAuditEvent( DavServletRequest request, String repositoryId, String resource, String action )
+    {
+        triggerAuditEvent( ArchivaXworkUser.getActivePrincipal( ActionContext.getContext().getSession() ),
+                           getRemoteIP( request ), repositoryId, resource, action );
+    }
+
+    private String getRemoteIP( DavServletRequest request )
+    {
+        return request.getRemoteAddr();
+    }
+
     public void addAuditListener( AuditListener listener )
     {
         this.auditListeners.add( listener );
@@ -723,7 +735,7 @@ private DavResource getResource( DavServletRequest request, List<String> reposit
             new ArchivaVirtualDavResource( mergedRepositoryContents, logicalResource.getPath(), mimeTypes, locator, this );
        
         // compatibility with MRM-440 to ensure browsing the repository group works ok
-        if ( resource.isCollection() && !request.getRequestURI().endsWith("/" ) )
+        if ( resource.isCollection() && !resource.getLocator().getResourcePath().endsWith( "/" ) )
         {
             throw new BrowserRedirectException( resource.getHref() );
         }