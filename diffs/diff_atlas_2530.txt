diff --git a/webapp/src/main/java/org/apache/atlas/web/resources/AdminResource.java b/webapp/src/main/java/org/apache/atlas/web/resources/AdminResource.java
index 4b45927fb..606800770 100755
--- a/webapp/src/main/java/org/apache/atlas/web/resources/AdminResource.java
+++ b/webapp/src/main/java/org/apache/atlas/web/resources/AdminResource.java
@@ -18,21 +18,7 @@
 
 package org.apache.atlas.web.resources;
 
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.Set;
-
-import javax.inject.Singleton;
-import javax.ws.rs.GET;
-import javax.ws.rs.Path;
-import javax.ws.rs.Produces;
-import javax.ws.rs.WebApplicationException;
-import javax.ws.rs.core.MediaType;
-import javax.ws.rs.core.Response;
-
-import org.apache.atlas.AtlasClient;
-import org.apache.atlas.utils.AtlasPerfTracer;
-import org.apache.atlas.web.filters.AtlasCSRFPreventionFilter;
+import com.google.inject.Inject;
 import org.apache.atlas.web.service.ServiceState;
 import org.apache.atlas.web.util.Servlets;
 import org.apache.commons.configuration.ConfigurationException;
@@ -40,12 +26,14 @@ import org.apache.commons.configuration.PropertiesConfiguration;
 import org.apache.commons.lang.StringUtils;
 import org.codehaus.jettison.json.JSONException;
 import org.codehaus.jettison.json.JSONObject;
-import org.slf4j.Logger;
-import org.springframework.security.core.Authentication;
-import org.springframework.security.core.GrantedAuthority;
-import org.springframework.security.core.context.SecurityContextHolder;
 
-import com.google.inject.Inject;
+import javax.inject.Singleton;
+import javax.ws.rs.GET;
+import javax.ws.rs.Path;
+import javax.ws.rs.Produces;
+import javax.ws.rs.WebApplicationException;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
 
 /**
  * Jersey Resource for admin operations.
@@ -53,14 +41,7 @@ import com.google.inject.Inject;
 @Path("admin")
 @Singleton
 public class AdminResource {
-    private static final Logger PERF_LOG = AtlasPerfTracer.getPerfLogger("rest.AdminResource");
 
-    private static final String isCSRF_ENABLED = "atlas.rest-csrf.enabled";
-    private static final String BROWSER_USER_AGENT_PARAM = "atlas.rest-csrf.browser-useragents-regex";
-    private static final String CUSTOM_METHODS_TO_IGNORE_PARAM = "atlas.rest-csrf.methods-to-ignore";
-    private static final String CUSTOM_HEADER_PARAM = "atlas.rest-csrf.custom-header";
-    private static final String isTaxonomyEnabled = "atlas.feature.taxonomy.enable";
-    
     private Response version;
     private ServiceState serviceState;
 
@@ -78,32 +59,22 @@ public class AdminResource {
     @Path("stack")
     @Produces(MediaType.TEXT_PLAIN)
     public String getThreadDump() {
-        AtlasPerfTracer perf = null;
-
-        try {
-            if (AtlasPerfTracer.isPerfTraceEnabled(PERF_LOG)) {
-                perf = AtlasPerfTracer.getPerfTracer(PERF_LOG, "AdminResource.getThreadDump()");
-            }
-
-            ThreadGroup topThreadGroup = Thread.currentThread().getThreadGroup();
+        ThreadGroup topThreadGroup = Thread.currentThread().getThreadGroup();
 
-            while (topThreadGroup.getParent() != null) {
-                topThreadGroup = topThreadGroup.getParent();
-            }
-            Thread[] threads = new Thread[topThreadGroup.activeCount()];
-
-            int nr = topThreadGroup.enumerate(threads);
-            StringBuilder builder = new StringBuilder();
-            for (int i = 0; i < nr; i++) {
-                builder.append(threads[i].getName()).append("\nState: ").
-                        append(threads[i].getState()).append("\n");
-                String stackTrace = StringUtils.join(threads[i].getStackTrace(), "\n");
-                builder.append(stackTrace);
-            }
-            return builder.toString();
-        } finally {
-            AtlasPerfTracer.log(perf);
+        while (topThreadGroup.getParent() != null) {
+            topThreadGroup = topThreadGroup.getParent();
         }
+        Thread[] threads = new Thread[topThreadGroup.activeCount()];
+
+        int nr = topThreadGroup.enumerate(threads);
+        StringBuilder builder = new StringBuilder();
+        for (int i = 0; i < nr; i++) {
+            builder.append(threads[i].getName()).append("\nState: ").
+                    append(threads[i].getState()).append("\n");
+            String stackTrace = StringUtils.join(threads[i].getStackTrace(), "\n");
+            builder.append(stackTrace);
+        }
+        return builder.toString();
     }
 
     /**
@@ -115,101 +86,38 @@ public class AdminResource {
     @Path("version")
     @Produces(Servlets.JSON_MEDIA_TYPE)
     public Response getVersion() {
-        AtlasPerfTracer perf = null;
-
-        try {
-            if (AtlasPerfTracer.isPerfTraceEnabled(PERF_LOG)) {
-                perf = AtlasPerfTracer.getPerfTracer(PERF_LOG, "AdminResource.getVersion()");
-            }
-
-            if (version == null) {
-                try {
-                    PropertiesConfiguration configProperties = new PropertiesConfiguration("atlas-buildinfo.properties");
-
-                    JSONObject response = new JSONObject();
-                    response.put("Version", configProperties.getString("build.version", "UNKNOWN"));
-                    response.put("Name", configProperties.getString("project.name", "apache-atlas"));
-                    response.put("Description", configProperties.getString("project.description",
-                            "Metadata Management and Data Governance Platform over Hadoop"));
-
-                    // todo: add hadoop version?
-                    // response.put("Hadoop", VersionInfo.getVersion() + "-r" + VersionInfo.getRevision());
-                    version = Response.ok(response).build();
-                } catch (JSONException | ConfigurationException e) {
-                    throw new WebApplicationException(Servlets.getErrorResponse(e, Response.Status.INTERNAL_SERVER_ERROR));
-                }
+        if (version == null) {
+            try {
+                PropertiesConfiguration configProperties = new PropertiesConfiguration("atlas-buildinfo.properties");
+
+                JSONObject response = new JSONObject();
+                response.put("Version", configProperties.getString("build.version", "UNKNOWN"));
+                response.put("Name", configProperties.getString("project.name", "apache-atlas"));
+                response.put("Description", configProperties.getString("project.description",
+                        "Metadata Management and Data Governance Platform over Hadoop"));
+
+                // todo: add hadoop version?
+                // response.put("Hadoop", VersionInfo.getVersion() + "-r" + VersionInfo.getRevision());
+                version = Response.ok(response).build();
+            } catch (JSONException | ConfigurationException e) {
+                throw new WebApplicationException(Servlets.getErrorResponse(e, Response.Status.INTERNAL_SERVER_ERROR));
             }
-
-            return version;
-        } finally {
-            AtlasPerfTracer.log(perf);
         }
+
+        return version;
     }
 
     @GET
     @Path("status")
     @Produces(Servlets.JSON_MEDIA_TYPE)
     public Response getStatus() {
-        AtlasPerfTracer perf = null;
-
-        try {
-            if (AtlasPerfTracer.isPerfTraceEnabled(PERF_LOG)) {
-                perf = AtlasPerfTracer.getPerfTracer(PERF_LOG, "AdminResource.getStatus()");
-            }
-
-            JSONObject responseData = new JSONObject();
-            try {
-                responseData.put(AtlasClient.STATUS, serviceState.getState().toString());
-                Response response = Response.ok(responseData).build();
-                return response;
-            } catch (JSONException e) {
-                throw new WebApplicationException(Servlets.getErrorResponse(e, Response.Status.INTERNAL_SERVER_ERROR));
-            }
-        } finally {
-            AtlasPerfTracer.log(perf);
-        }
-    }
-    
-    @GET
-    @Path("session")
-    @Produces(Servlets.JSON_MEDIA_TYPE)
-    public Response getUserProfile() {
         JSONObject responseData = new JSONObject();
-        Boolean enableTaxonomy = null;
-        AtlasPerfTracer perf = null;
         try {
-            if (AtlasPerfTracer.isPerfTraceEnabled(PERF_LOG)) {
-                perf = AtlasPerfTracer.getPerfTracer(PERF_LOG, "AdminResource.getUserProfile()");
-            }
-
-            PropertiesConfiguration configProperties = new PropertiesConfiguration("atlas-application.properties");
-            enableTaxonomy = new Boolean(configProperties.getString(isTaxonomyEnabled, "false"));
-            Authentication auth = SecurityContextHolder.getContext().getAuthentication();
-            String userName = null;
-            Set<String> groups = new HashSet<String>();
-            if (auth != null) {
-                userName = auth.getName();
-                Collection<? extends GrantedAuthority> authorities = auth.getAuthorities();
-                for (GrantedAuthority c : authorities) {
-                    groups.add(c.getAuthority());
-                }
-            } 
-            
-            responseData.put(isCSRF_ENABLED,  AtlasCSRFPreventionFilter.isCSRF_ENABLED);
-            responseData.put(BROWSER_USER_AGENT_PARAM, AtlasCSRFPreventionFilter.BROWSER_USER_AGENTS_DEFAULT);
-            responseData.put(CUSTOM_METHODS_TO_IGNORE_PARAM, AtlasCSRFPreventionFilter.METHODS_TO_IGNORE_DEFAULT);
-            responseData.put(CUSTOM_HEADER_PARAM, AtlasCSRFPreventionFilter.HEADER_DEFAULT);
-            
-            responseData.put(isTaxonomyEnabled, enableTaxonomy);
-            
-            responseData.put("userName", userName);
-            responseData.put("groups", groups);
+            responseData.put("Status", serviceState.getState().toString());
             Response response = Response.ok(responseData).build();
             return response;
-        } catch (JSONException | ConfigurationException e) {
+        } catch (JSONException e) {
             throw new WebApplicationException(Servlets.getErrorResponse(e, Response.Status.INTERNAL_SERVER_ERROR));
-        } finally {
-            AtlasPerfTracer.log(perf);
         }
     }
 }