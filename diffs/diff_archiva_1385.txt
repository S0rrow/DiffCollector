diff --git a/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/layout/BidirectionalRepositoryLayout.java b/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/layout/BidirectionalRepositoryLayout.java
index 7ac1a9e9e..68a897753 100644
--- a/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/layout/BidirectionalRepositoryLayout.java
+++ b/archiva-base/archiva-repository-layer/src/main/java/org/apache/maven/archiva/repository/layout/BidirectionalRepositoryLayout.java
@@ -22,11 +22,10 @@
 import org.apache.maven.archiva.model.ArchivaArtifact;
 import org.apache.maven.archiva.model.ArtifactReference;
 import org.apache.maven.archiva.model.ProjectReference;
-import org.apache.maven.archiva.model.VersionedReference;
 
 /**
  * BidirectionalRepositoryLayout - Similar in scope to ArtifactRepositoryLayout, but does
- * the both the Path to Artifact, and Artifact to Path conversions.
+ * the both the Path to Artifact, and Artifact to Path conversions.  
  *
  * @author <a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>
  * @version $Id$
@@ -35,90 +34,50 @@
 {
     /**
      * Get the identifier for this layout.
-     *
+     * 
      * @return the identifier for this layout.
      */
     public String getId();
-
-    /**
-     * Given a repository relative path, return <code>true</code> if the path is valid
-     * according to the repository layout.
-     */
-    public boolean isValidPath( String path );
-
+    
     /**
      * Given an ArchivaArtifact, return the relative path to the artifact.
-     *
+     * 
      * @param artifact the artifact to use.
-     * @return the relative path to the artifact.
+     * @return the relative path to the artifact. 
      */
     public String toPath( ArchivaArtifact artifact );
-
+    
     /**
      * Given an ArtifactReference, return the relative path to the artifact.
-     *
-     * @param reference the artifact reference to use.
-     * @return the relative path to the artifact.
+     * 
+     * @param artifact the artifact reference to use.
+     * @return the relative path to the artifact. 
      */
-    public String toPath( ArtifactReference reference );
-
-    /**
-     * Given an {@link VersionedReference}, return the relative path to that reference.
-     *
-     * @param reference the versioned project reference to use.
-     * @return the relative path to the project reference.
-     */
-    public String toPath( VersionedReference reference );
-
+    public String toPath( ArtifactReference artifact );
+    
     /**
      * Given an ProjectReference, return the relative path to that reference.
-     *
-     * @param reference the project reference to use.
-     * @return the relative path to the project reference.
-     */
-    public String toPath( ProjectReference reference );
-
-    /**
-     * Given a repository relative path to a filename, return the {@link ArchivaArtifact} object suitable for the path.
-     *
-     * @param path the path relative to the repository base dir for the artifact.
-     * @return the {@link ArchivaArtifact} representing the path. (or null if path cannot be converted to
-     *         an {@link ArchivaArtifact})
-     * @throws LayoutException if there was a problem converting the path to an artifact.
-     */
-    public ArchivaArtifact toArtifact( String path )
-        throws LayoutException;
-
-    /**
-     * Given a repository relative path to a filename, return the {@link ProjectReference} object suitable for the path.
-     *
-     * @param path the path relative to the repository base dir for the artifact.
-     * @return the {@link ProjectReference} representing the path.  (or null if path cannot be converted to
-     *         a {@link ProjectReference})
-     * @throws LayoutException if there was a problem converting the path to an artifact.
+     * 
+     * @param project the project reference to use.
+     * @return the relative path to the project reference. 
      */
-    public ProjectReference toProjectReference( String path )
-        throws LayoutException;
+    public String toPath( ProjectReference project );
 
     /**
-     * Given a repository relative path to a filename, return the {@link VersionedReference} object suitable for the path.
-     *
+     * Given a repository relative path to a filename, return the ArchivaArtifact object suitable for the path.
+     * 
      * @param path the path relative to the repository base dir for the artifact.
-     * @return the {@link VersionedReference} representing the path.  (or null if path cannot be converted to
-     *         a {@link VersionedReference})
+     * @return the ArchivaArtifact representing the path. (or null if path cannot be converted to an ArchivaArtifact)
      * @throws LayoutException if there was a problem converting the path to an artifact.
      */
-    public VersionedReference toVersionedReference( String path )
-        throws LayoutException;
-
+    public ArchivaArtifact toArtifact( String path ) throws LayoutException;
+    
     /**
-     * Given a repository relative path to a filename, return the {@link VersionedReference} object suitable for the path.
-     *
+     * Given a repository relateive path to a filename, return the ProjectReference object suitable for the path.
+     * 
      * @param path the path relative to the repository base dir for the artifact.
-     * @return the {@link ArtifactReference} representing the path.  (or null if path cannot be converted to
-     *         a {@link ArtifactReference})
+     * @return the ProjectReference representing the path.  (or null if path cannot be converted to a ProjectReference)
      * @throws LayoutException if there was a problem converting the path to an artifact.
      */
-    public ArtifactReference toArtifactReference( String path )
-        throws LayoutException;
+    public ProjectReference toProjectReference( String path ) throws LayoutException;
 }