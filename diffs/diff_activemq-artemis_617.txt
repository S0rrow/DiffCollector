diff --git a/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/AddressControlImpl.java b/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/AddressControlImpl.java
index 5808bd372f..bf01fbb27e 100644
--- a/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/AddressControlImpl.java
+++ b/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/AddressControlImpl.java
@@ -16,19 +16,13 @@
  */
 package org.apache.activemq.artemis.core.management.impl;
 
-import javax.json.JsonArrayBuilder;
-import javax.management.MBeanAttributeInfo;
 import javax.management.MBeanOperationInfo;
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.List;
-import java.util.Map;
 import java.util.Set;
 
 import org.apache.activemq.artemis.api.core.SimpleString;
 import org.apache.activemq.artemis.api.core.management.AddressControl;
-import org.apache.activemq.artemis.api.core.management.QueueControl;
-import org.apache.activemq.artemis.api.core.management.ResourceNames;
 import org.apache.activemq.artemis.core.paging.PagingManager;
 import org.apache.activemq.artemis.core.paging.PagingStore;
 import org.apache.activemq.artemis.core.persistence.StorageManager;
@@ -38,15 +32,9 @@ import org.apache.activemq.artemis.core.postoffice.PostOffice;
 import org.apache.activemq.artemis.core.postoffice.QueueBinding;
 import org.apache.activemq.artemis.core.security.CheckType;
 import org.apache.activemq.artemis.core.security.Role;
-import org.apache.activemq.artemis.core.security.SecurityAuth;
-import org.apache.activemq.artemis.core.security.SecurityStore;
-import org.apache.activemq.artemis.core.server.impl.AddressInfo;
-import org.apache.activemq.artemis.core.server.impl.ServerMessageImpl;
-import org.apache.activemq.artemis.core.server.management.ManagementService;
 import org.apache.activemq.artemis.core.settings.HierarchicalRepository;
-import org.apache.activemq.artemis.spi.core.protocol.RemotingConnection;
-import org.apache.activemq.artemis.utils.Base64;
-import org.apache.activemq.artemis.utils.JsonLoader;
+import org.apache.activemq.artemis.utils.json.JSONArray;
+import org.apache.activemq.artemis.utils.json.JSONObject;
 
 public class AddressControlImpl extends AbstractControl implements AddressControl {
 
@@ -54,7 +42,7 @@ public class AddressControlImpl extends AbstractControl implements AddressContro
 
    // Attributes ----------------------------------------------------
 
-   private AddressInfo addressInfo;
+   private final SimpleString address;
 
    private final PostOffice postOffice;
 
@@ -62,28 +50,20 @@ public class AddressControlImpl extends AbstractControl implements AddressContro
 
    private final HierarchicalRepository<Set<Role>> securityRepository;
 
-   private final SecurityStore securityStore;
-
-   private final ManagementService managementService;
-
    // Static --------------------------------------------------------
 
    // Constructors --------------------------------------------------
 
-   public AddressControlImpl(AddressInfo addressInfo,
+   public AddressControlImpl(final SimpleString address,
                              final PostOffice postOffice,
                              final PagingManager pagingManager,
                              final StorageManager storageManager,
-                             final HierarchicalRepository<Set<Role>> securityRepository,
-                             final SecurityStore securityStore,
-                             final ManagementService managementService)throws Exception {
+                             final HierarchicalRepository<Set<Role>> securityRepository) throws Exception {
       super(AddressControl.class, storageManager);
-      this.addressInfo = addressInfo;
+      this.address = address;
       this.postOffice = postOffice;
       this.pagingManager = pagingManager;
       this.securityRepository = securityRepository;
-      this.securityStore = securityStore;
-      this.managementService = managementService;
    }
 
    // Public --------------------------------------------------------
@@ -92,19 +72,14 @@ public class AddressControlImpl extends AbstractControl implements AddressContro
 
    @Override
    public String getAddress() {
-      return addressInfo.getName().toString();
-   }
-
-   @Override
-   public String getRoutingType() {
-      return addressInfo.getRoutingType().toString();
+      return address.toString();
    }
 
    @Override
    public String[] getQueueNames() throws Exception {
       clearIO();
       try {
-         Bindings bindings = postOffice.getBindingsForAddress(addressInfo.getName());
+         Bindings bindings = postOffice.getBindingsForAddress(address);
          List<String> queueNames = new ArrayList<>();
          for (Binding binding : bindings.getBindings()) {
             if (binding instanceof QueueBinding) {
@@ -112,9 +87,11 @@ public class AddressControlImpl extends AbstractControl implements AddressContro
             }
          }
          return queueNames.toArray(new String[queueNames.size()]);
-      } catch (Throwable t) {
+      }
+      catch (Throwable t) {
          throw new IllegalStateException(t.getMessage());
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -123,16 +100,18 @@ public class AddressControlImpl extends AbstractControl implements AddressContro
    public String[] getBindingNames() throws Exception {
       clearIO();
       try {
-         Bindings bindings = postOffice.getBindingsForAddress(addressInfo.getName());
+         Bindings bindings = postOffice.getBindingsForAddress(address);
          String[] bindingNames = new String[bindings.getBindings().size()];
          int i = 0;
          for (Binding binding : bindings.getBindings()) {
             bindingNames[i++] = binding.getUniqueName().toString();
          }
          return bindingNames;
-      } catch (Throwable t) {
+      }
+      catch (Throwable t) {
          throw new IllegalStateException(t.getMessage());
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -141,7 +120,7 @@ public class AddressControlImpl extends AbstractControl implements AddressContro
    public Object[] getRoles() throws Exception {
       clearIO();
       try {
-         Set<Role> roles = securityRepository.getMatch(addressInfo.getName().toString());
+         Set<Role> roles = securityRepository.getMatch(address.toString());
 
          Object[] objRoles = new Object[roles.size()];
 
@@ -150,7 +129,8 @@ public class AddressControlImpl extends AbstractControl implements AddressContro
             objRoles[i++] = new Object[]{role.getName(), CheckType.SEND.hasRole(role), CheckType.CONSUME.hasRole(role), CheckType.CREATE_DURABLE_QUEUE.hasRole(role), CheckType.DELETE_DURABLE_QUEUE.hasRole(role), CheckType.CREATE_NON_DURABLE_QUEUE.hasRole(role), CheckType.DELETE_NON_DURABLE_QUEUE.hasRole(role), CheckType.MANAGE.hasRole(role)};
          }
          return objRoles;
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -159,14 +139,15 @@ public class AddressControlImpl extends AbstractControl implements AddressContro
    public String getRolesAsJSON() throws Exception {
       clearIO();
       try {
-         JsonArrayBuilder json = JsonLoader.createArrayBuilder();
-         Set<Role> roles = securityRepository.getMatch(addressInfo.getName().toString());
+         JSONArray json = new JSONArray();
+         Set<Role> roles = securityRepository.getMatch(address.toString());
 
          for (Role role : roles) {
-            json.add(role.toJson());
+            json.put(new JSONObject(role));
          }
-         return json.build().toString();
-      } finally {
+         return json.toString();
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -175,8 +156,9 @@ public class AddressControlImpl extends AbstractControl implements AddressContro
    public long getNumberOfBytesPerPage() throws Exception {
       clearIO();
       try {
-         return pagingManager.getPageStore(addressInfo.getName()).getPageSizeBytes();
-      } finally {
+         return pagingManager.getPageStore(address).getPageSizeBytes();
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -185,8 +167,9 @@ public class AddressControlImpl extends AbstractControl implements AddressContro
    public long getAddressSize() throws Exception {
       clearIO();
       try {
-         return pagingManager.getPageStore(addressInfo.getName()).getAddressSize();
-      } finally {
+         return pagingManager.getPageStore(address).getAddressSize();
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -196,16 +179,19 @@ public class AddressControlImpl extends AbstractControl implements AddressContro
       clearIO();
       long totalMsgs = 0;
       try {
-         Bindings bindings = postOffice.getBindingsForAddress(addressInfo.getName());
+         Bindings bindings = postOffice.getBindingsForAddress(address);
+         List<String> queueNames = new ArrayList<>();
          for (Binding binding : bindings.getBindings()) {
             if (binding instanceof QueueBinding) {
                totalMsgs += ((QueueBinding) binding).getQueue().getMessageCount();
             }
          }
          return totalMsgs;
-      } catch (Throwable t) {
+      }
+      catch (Throwable t) {
          throw new IllegalStateException(t.getMessage());
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -214,8 +200,9 @@ public class AddressControlImpl extends AbstractControl implements AddressContro
    public boolean isPaging() throws Exception {
       clearIO();
       try {
-         return pagingManager.getPageStore(addressInfo.getName()).isPaging();
-      } finally {
+         return pagingManager.getPageStore(address).isPaging();
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -224,60 +211,18 @@ public class AddressControlImpl extends AbstractControl implements AddressContro
    public int getNumberOfPages() throws Exception {
       clearIO();
       try {
-         PagingStore pageStore = pagingManager.getPageStore(addressInfo.getName());
+         PagingStore pageStore = pagingManager.getPageStore(address);
 
          if (!pageStore.isPaging()) {
             return 0;
-         } else {
-            return pagingManager.getPageStore(addressInfo.getName()).getNumberOfPages();
          }
-      } finally {
-         blockOnIO();
-      }
-   }
-
-   @Override
-   public long getMessageCount() {
-      return getMessageCount(DurabilityType.ALL);
-   }
-
-
-   @Override
-   public String sendMessage(final Map<String, String> headers,
-                             final int type,
-                             final String body,
-                             boolean durable,
-                             final String user,
-                             final String password) throws Exception {
-      securityStore.check(addressInfo.getName(), CheckType.SEND, new SecurityAuth() {
-         @Override
-         public String getUsername() {
-            return user;
+         else {
+            return pagingManager.getPageStore(address).getNumberOfPages();
          }
-
-         @Override
-         public String getPassword() {
-            return password;
-         }
-
-         @Override
-         public RemotingConnection getRemotingConnection() {
-            return null;
-         }
-      });
-      ServerMessageImpl message = new ServerMessageImpl(storageManager.generateID(), 50);
-      for (String header : headers.keySet()) {
-         message.putStringProperty(new SimpleString(header), new SimpleString(headers.get(header)));
       }
-      message.setType((byte) type);
-      message.setDurable(durable);
-      message.setTimestamp(System.currentTimeMillis());
-      if (body != null) {
-         message.getBodyBuffer().writeBytes(Base64.decode(body));
+      finally {
+         blockOnIO();
       }
-      message.setAddress(addressInfo.getName());
-      postOffice.route(message, null, true);
-      return "" + message.getMessageID();
    }
 
    @Override
@@ -285,50 +230,11 @@ public class AddressControlImpl extends AbstractControl implements AddressContro
       return MBeanInfoHelper.getMBeanOperationsInfo(AddressControl.class);
    }
 
-   @Override
-   protected MBeanAttributeInfo[] fillMBeanAttributeInfo() {
-      return MBeanInfoHelper.getMBeanAttributesInfo(AddressControl.class);
-   }
-
    // Package protected ---------------------------------------------
 
    // Protected -----------------------------------------------------
 
    // Private -------------------------------------------------------
 
-   private int getMessageCount(final DurabilityType durability) {
-      List<QueueControl> queues = getQueues(durability);
-      int count = 0;
-      for (QueueControl queue : queues) {
-         count += queue.getMessageCount();
-      }
-      return count;
-   }
-
-   private List<QueueControl> getQueues(final DurabilityType durability) {
-      try {
-         List<QueueControl> matchingQueues = new ArrayList<>();
-         String[] queues = getQueueNames();
-         for (String queue : queues) {
-            QueueControl coreQueueControl = (QueueControl) managementService.getResource(ResourceNames.QUEUE + queue);
-
-            // Ignore the "special" subscription
-            if (coreQueueControl != null && !coreQueueControl.getName().equals(getAddress())) {
-               if (durability == DurabilityType.ALL || durability == DurabilityType.DURABLE && coreQueueControl.isDurable() ||
-                     durability == DurabilityType.NON_DURABLE && !coreQueueControl.isDurable()) {
-                  matchingQueues.add(coreQueueControl);
-               }
-            }
-         }
-         return matchingQueues;
-      } catch (Exception e) {
-         return Collections.emptyList();
-      }
-   }
-
    // Inner classes -------------------------------------------------
-
-   private enum DurabilityType {
-      ALL, DURABLE, NON_DURABLE
-   }
 }