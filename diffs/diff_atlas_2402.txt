diff --git a/webapp/src/test/java/org/apache/atlas/web/resources/EntityJerseyResourceIT.java b/webapp/src/test/java/org/apache/atlas/web/resources/EntityJerseyResourceIT.java
index 585da72e6..9e28383f3 100755
--- a/webapp/src/test/java/org/apache/atlas/web/resources/EntityJerseyResourceIT.java
+++ b/webapp/src/test/java/org/apache/atlas/web/resources/EntityJerseyResourceIT.java
@@ -19,16 +19,10 @@
 package org.apache.atlas.web.resources;
 
 import com.google.common.collect.ImmutableList;
-import com.google.inject.Inject;
 import com.sun.jersey.api.client.ClientResponse;
 import com.sun.jersey.api.client.WebResource;
-
 import org.apache.atlas.AtlasClient;
 import org.apache.atlas.AtlasServiceException;
-import org.apache.atlas.notification.NotificationConsumer;
-import org.apache.atlas.notification.NotificationInterface;
-import org.apache.atlas.notification.NotificationModule;
-import org.apache.atlas.notification.entity.EntityNotification;
 import org.apache.atlas.typesystem.IStruct;
 import org.apache.atlas.typesystem.Referenceable;
 import org.apache.atlas.typesystem.Struct;
@@ -38,12 +32,16 @@ import org.apache.atlas.typesystem.json.InstanceSerialization$;
 import org.apache.atlas.typesystem.json.TypesSerialization;
 import org.apache.atlas.typesystem.json.TypesSerialization$;
 import org.apache.atlas.typesystem.persistence.Id;
+import org.apache.atlas.typesystem.types.AttributeDefinition;
 import org.apache.atlas.typesystem.types.ClassType;
 import org.apache.atlas.typesystem.types.DataTypes;
 import org.apache.atlas.typesystem.types.EnumTypeDefinition;
+import org.apache.atlas.typesystem.types.EnumValue;
 import org.apache.atlas.typesystem.types.HierarchicalTypeDefinition;
+import org.apache.atlas.typesystem.types.Multiplicity;
 import org.apache.atlas.typesystem.types.StructTypeDefinition;
 import org.apache.atlas.typesystem.types.TraitType;
+import org.apache.atlas.typesystem.types.TypeUtils;
 import org.apache.atlas.typesystem.types.utils.TypesUtil;
 import org.apache.atlas.web.util.Servlets;
 import org.apache.commons.lang.RandomStringUtils;
@@ -54,58 +52,40 @@ import org.slf4j.LoggerFactory;
 import org.testng.Assert;
 import org.testng.annotations.BeforeClass;
 import org.testng.annotations.DataProvider;
-import org.testng.annotations.Guice;
 import org.testng.annotations.Test;
 
 import javax.ws.rs.HttpMethod;
 import javax.ws.rs.core.Response;
-
-import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.List;
-import java.util.Map;
 import java.util.UUID;
 
-import static org.testng.Assert.assertEquals;
-import static org.testng.Assert.fail;
-
-
 /**
  * Integration tests for Entity Jersey Resource.
  */
-@Guice(modules = NotificationModule.class)
 public class EntityJerseyResourceIT extends BaseResourceIT {
 
     private static final Logger LOG = LoggerFactory.getLogger(EntityJerseyResourceIT.class);
 
-    private final String DATABASE_NAME = "db" + randomString();
-    private final String TABLE_NAME = "table" + randomString();
-    private static final String ENTITIES = "api/atlas/entities";
+    private static final String DATABASE_TYPE = "hive_database";
+    private static final String DATABASE_NAME = "foo";
+    private static final String TABLE_TYPE = "hive_table_type";
+    private static final String TABLE_NAME = "bar";
     private static final String TRAITS = "traits";
 
     private Referenceable tableInstance;
     private Id tableId;
     private String traitName;
 
-    @Inject
-    private NotificationInterface notificationInterface;
-    private NotificationConsumer<EntityNotification> notificationConsumer;
-
     @BeforeClass
     public void setUp() throws Exception {
         super.setUp();
 
-        createTypeDefinitions();
-
-        List<NotificationConsumer<EntityNotification>> consumers =
-                notificationInterface.createConsumers(NotificationInterface.NotificationType.ENTITIES, 1);
-
-        notificationConsumer = consumers.iterator().next();
+        createHiveTypes();
     }
 
     @Test
     public void testSubmitEntity() throws Exception {
-        tableInstance = createHiveTableInstance(DATABASE_NAME, TABLE_NAME);
+        tableInstance = createHiveTableInstance();
         tableId = createInstance(tableInstance);
 
         final String guid = tableId._getId();
@@ -116,107 +96,9 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         }
     }
 
-    @Test
-    //API should accept single entity (or jsonarray of entities)
-    public void testSubmitSingleEntity() throws Exception {
-        Referenceable databaseInstance = new Referenceable(DATABASE_TYPE);
-        databaseInstance.set("name", randomString());
-        databaseInstance.set("description", randomString());
-
-        ClientResponse clientResponse =
-                service.path(ENTITIES).accept(Servlets.JSON_MEDIA_TYPE).type(Servlets.JSON_MEDIA_TYPE)
-                        .method(HttpMethod.POST, ClientResponse.class,
-                                InstanceSerialization.toJson(databaseInstance, true));
-        Assert.assertEquals(clientResponse.getStatus(), Response.Status.CREATED.getStatusCode());
-
-        String responseAsString = clientResponse.getEntity(String.class);
-        Assert.assertNotNull(responseAsString);
-
-        JSONObject response = new JSONObject(responseAsString);
-        Assert.assertNotNull(response.get(AtlasClient.REQUEST_ID));
-        Assert.assertNotNull(response.get(AtlasClient.GUID));
-    }
-
-    @Test
-    public void testEntityDeduping() throws Exception {
-        final Referenceable db = new Referenceable(DATABASE_TYPE);
-        final String dbName = "db" + randomString();
-        db.set("name", dbName);
-        db.set("description", randomString());
-
-        final String dbid = serviceClient.createEntity(db).getString(0);
-
-        waitForNotification(notificationConsumer, MAX_WAIT_TIME, new NotificationPredicate() {
-            @Override
-            public boolean evaluate(EntityNotification notification) throws Exception {
-                return notification != null && notification.getEntity().getId()._getId().equals(dbid);
-            }
-        });
-
-        JSONArray results =
-                serviceClient.searchByDSL(String.format("%s where name='%s'", DATABASE_TYPE, dbName));
-        assertEquals(results.length(), 1);
-
-        //create entity again shouldn't create another instance with same unique attribute value
-        results = serviceClient.createEntity(db);
-        assertEquals(results.length(), 0);
-        try {
-            waitForNotification(notificationConsumer, MAX_WAIT_TIME, new NotificationPredicate() {
-                @Override
-                public boolean evaluate(EntityNotification notification) throws Exception {
-                    return notification != null && notification.getEntity().getId()._getId().equals(dbid);
-                }
-            });
-            fail("Expected time out exception");
-        } catch (Exception e) {
-            //expected timeout
-        }
-
-        results = serviceClient.searchByDSL(String.format("%s where name='%s'", DATABASE_TYPE, dbName));
-        assertEquals(results.length(), 1);
-
-        //Test the same across references
-        Referenceable table = new Referenceable(HIVE_TABLE_TYPE);
-        final String tableName = randomString();
-        table.set("name", tableName);
-        table.set("db", db);
-
-        serviceClient.createEntity(table);
-        results = serviceClient.searchByDSL(String.format("%s where name='%s'", DATABASE_TYPE, dbName));
-        assertEquals(results.length(), 1);
-    }
-
-    @Test
-    public void testEntityDefinitionAcrossTypeUpdate() throws Exception {
-        //create type
-        HierarchicalTypeDefinition<ClassType> typeDefinition = TypesUtil
-                .createClassTypeDef(randomString(), ImmutableList.<String>of(),
-                        TypesUtil.createUniqueRequiredAttrDef("name", DataTypes.STRING_TYPE));
-        serviceClient.createType(TypesSerialization.toJson(typeDefinition, false));
-
-        //create entity for the type
-        Referenceable instance = new Referenceable(typeDefinition.typeName);
-        instance.set("name", randomString());
-        String guid = serviceClient.createEntity(instance).getString(0);
-
-        //update type - add attribute
-        typeDefinition = TypesUtil.createClassTypeDef(typeDefinition.typeName, ImmutableList.<String>of(),
-                TypesUtil.createUniqueRequiredAttrDef("name", DataTypes.STRING_TYPE),
-                TypesUtil.createOptionalAttrDef("description", DataTypes.STRING_TYPE));
-        TypesDef typeDef = TypesUtil.getTypesDef(ImmutableList.<EnumTypeDefinition>of(),
-                ImmutableList.<StructTypeDefinition>of(), ImmutableList.<HierarchicalTypeDefinition<TraitType>>of(),
-                ImmutableList.of(typeDefinition));
-        serviceClient.updateType(typeDef);
-
-        //Get definition after type update - new attributes should be null
-        Referenceable entity = serviceClient.getEntity(guid);
-        Assert.assertNull(entity.get("description"));
-        Assert.assertEquals(entity.get("name"), instance.get("name"));
-    }
-
     @DataProvider
     public Object[][] invalidAttrValues() {
-        return new Object[][]{{null}, {""}};
+        return new Object[][]{{null}, {""}, {" "}};
     }
 
     @Test(dataProvider = "invalidAttrValues")
@@ -227,31 +109,44 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
 
         try {
             createInstance(databaseInstance);
-            Assert.fail("Expected AtlasServiceException");
+            Assert.fail("Exptected MetadataServiceException");
         } catch (AtlasServiceException e) {
             Assert.assertEquals(e.getStatus(), ClientResponse.Status.BAD_REQUEST);
         }
     }
 
-    @Test
-    public void testGetEntityByAttribute() throws Exception {
-        Referenceable databaseInstance = new Referenceable(DATABASE_TYPE);
-        String dbName = randomString();
-        databaseInstance.set("name", dbName);
-        databaseInstance.set("description", "foo database");
-        createInstance(databaseInstance);
-
-        //get entity by attribute
-        Referenceable referenceable = serviceClient.getEntity(DATABASE_TYPE, "name", dbName);
-        Assert.assertEquals(referenceable.getTypeName(), DATABASE_TYPE);
-        Assert.assertEquals(referenceable.get("name"), dbName);
-    }
-
     @Test
     public void testSubmitEntityWithBadDateFormat() throws Exception {
+
         try {
-            Referenceable tableInstance = createHiveTableInstance("db" + randomString(), "table" + randomString());
-            tableInstance.set("lastAccessTime", "2014-07-11");
+            Referenceable databaseInstance = new Referenceable(DATABASE_TYPE);
+            databaseInstance.set("name", DATABASE_NAME);
+            databaseInstance.set("description", "foo database");
+
+            Referenceable tableInstance =
+                    new Referenceable(TABLE_TYPE, "classification", "pii", "phi", "pci", "sox", "sec", "finance");
+            tableInstance.set("name", TABLE_NAME);
+            tableInstance.set("description", "bar table");
+            tableInstance.set("date", "2014-07-11");
+            tableInstance.set("type", "managed");
+            tableInstance.set("level", 2);
+            tableInstance.set("tableType", 1); // enum
+            tableInstance.set("database", databaseInstance);
+            tableInstance.set("compressed", false);
+
+            Struct traitInstance = (Struct) tableInstance.getTrait("classification");
+            traitInstance.set("tag", "foundation_etl");
+
+            Struct serde1Instance = new Struct("serdeType");
+            serde1Instance.set("name", "serde1");
+            serde1Instance.set("serde", "serde1");
+            tableInstance.set("serde1", serde1Instance);
+
+            Struct serde2Instance = new Struct("serdeType");
+            serde2Instance.set("name", "serde2");
+            serde2Instance.set("serde", "serde2");
+            tableInstance.set("serde2", serde2Instance);
+
             tableId = createInstance(tableInstance);
             Assert.fail("Was expecting an  exception here ");
         } catch (AtlasServiceException e) {
@@ -265,7 +160,8 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         final String guid = tableId._getId();
         //add property
         String description = "bar table - new desc";
-        addProperty(guid, "description", description);
+        ClientResponse clientResponse = addProperty(guid, "description", description);
+        Assert.assertEquals(clientResponse.getStatus(), Response.Status.OK.getStatusCode());
 
         String entityRef = getEntityDefinition(getEntityDefinition(guid));
         Assert.assertNotNull(entityRef);
@@ -273,21 +169,17 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         tableInstance.set("description", description);
 
         //invalid property for the type
-        try {
-            addProperty(guid, "invalid_property", "bar table");
-            Assert.fail("Expected AtlasServiceException");
-        } catch (AtlasServiceException e) {
-            Assert.assertEquals(e.getStatus().getStatusCode(), Response.Status.BAD_REQUEST.getStatusCode());
-        }
+        clientResponse = addProperty(guid, "invalid_property", "bar table");
+        Assert.assertEquals(clientResponse.getStatus(), Response.Status.BAD_REQUEST.getStatusCode());
 
         //non-string property, update
-        String currentTime = String.valueOf(System.currentTimeMillis());
-        addProperty(guid, "createTime", currentTime);
+        clientResponse = addProperty(guid, "level", "4");
+        Assert.assertEquals(clientResponse.getStatus(), Response.Status.OK.getStatusCode());
 
         entityRef = getEntityDefinition(getEntityDefinition(guid));
         Assert.assertNotNull(entityRef);
 
-        tableInstance.set("createTime", currentTime);
+        tableInstance.set("level", 4);
     }
 
     @Test(dependsOnMethods = "testSubmitEntity", expectedExceptions = IllegalArgumentException.class)
@@ -298,23 +190,19 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         Assert.fail();
     }
 
-    @Test(dependsOnMethods = "testSubmitEntity")
+    @Test(dependsOnMethods = "testSubmitEntity", expectedExceptions = IllegalArgumentException.class)
     public void testAddNullPropertyValue() throws Exception {
         final String guid = tableId._getId();
         //add property
-        try {
-            addProperty(guid, "description", null);
-            Assert.fail("Expected AtlasServiceException");
-        } catch(AtlasServiceException e) {
-            Assert.assertEquals(e.getStatus().getStatusCode(), Response.Status.BAD_REQUEST.getStatusCode());
-        }
+        addProperty(guid, "description", null);
+        Assert.fail();
     }
 
     @Test(dependsOnMethods = "testSubmitEntity")
     public void testAddReferenceProperty() throws Exception {
         //Create new db instance
         Referenceable databaseInstance = new Referenceable(DATABASE_TYPE);
-        databaseInstance.set("name", randomString());
+        databaseInstance.set("name", "newdb");
         databaseInstance.set("description", "new database");
 
         Id dbInstance = createInstance(databaseInstance);
@@ -322,7 +210,8 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
 
         //Add reference property
         final String guid = tableId._getId();
-        addProperty(guid, "db", dbId);
+        ClientResponse clientResponse = addProperty(guid, "database", dbId);
+        Assert.assertEquals(clientResponse.getStatus(), Response.Status.OK.getStatusCode());
     }
 
     @Test(dependsOnMethods = "testSubmitEntity")
@@ -343,12 +232,15 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         InstanceSerialization.fromJsonReferenceable(definition, true);
     }
 
-    private void addProperty(String guid, String property, String value) throws AtlasServiceException {
-        serviceClient.updateEntityAttribute(guid, property, value);
+    private ClientResponse addProperty(String guid, String property, String value) {
+        WebResource resource = service.path("api/atlas/entities").path(guid);
+
+        return resource.queryParam("property", property).queryParam("value", value).accept(Servlets.JSON_MEDIA_TYPE)
+                .type(Servlets.JSON_MEDIA_TYPE).method(HttpMethod.PUT, ClientResponse.class);
     }
 
     private ClientResponse getEntityDefinition(String guid) {
-        WebResource resource = service.path(ENTITIES).path(guid);
+        WebResource resource = service.path("api/atlas/entities").path(guid);
         return resource.accept(Servlets.JSON_MEDIA_TYPE).type(Servlets.JSON_MEDIA_TYPE)
                 .method(HttpMethod.GET, ClientResponse.class);
     }
@@ -364,7 +256,7 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
 
     @Test
     public void testGetInvalidEntityDefinition() throws Exception {
-        WebResource resource = service.path(ENTITIES).path("blah");
+        WebResource resource = service.path("api/atlas/entities").path("blah");
 
         ClientResponse clientResponse = resource.accept(Servlets.JSON_MEDIA_TYPE).type(Servlets.JSON_MEDIA_TYPE)
                 .method(HttpMethod.GET, ClientResponse.class);
@@ -380,15 +272,26 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
 
     @Test(dependsOnMethods = "testSubmitEntity")
     public void testGetEntityList() throws Exception {
-        List<String> entities = serviceClient.listEntities(HIVE_TABLE_TYPE);
-        Assert.assertNotNull(entities);
-        Assert.assertTrue(entities.contains(tableId._getId()));
+        ClientResponse clientResponse =
+                service.path("api/atlas/entities").queryParam("type", TABLE_TYPE).accept(Servlets.JSON_MEDIA_TYPE)
+                        .type(Servlets.JSON_MEDIA_TYPE).method(HttpMethod.GET, ClientResponse.class);
+        Assert.assertEquals(clientResponse.getStatus(), Response.Status.OK.getStatusCode());
+
+        String responseAsString = clientResponse.getEntity(String.class);
+        Assert.assertNotNull(responseAsString);
+
+        JSONObject response = new JSONObject(responseAsString);
+        Assert.assertNotNull(response.get(AtlasClient.REQUEST_ID));
+
+        final JSONArray list = response.getJSONArray(AtlasClient.RESULTS);
+        Assert.assertNotNull(list);
+        Assert.assertEquals(list.length(), 1);
     }
 
     @Test
     public void testGetEntityListForBadEntityType() throws Exception {
         ClientResponse clientResponse =
-                service.path(ENTITIES).queryParam("type", "blah").accept(Servlets.JSON_MEDIA_TYPE)
+                service.path("api/atlas/entities").queryParam("type", "blah").accept(Servlets.JSON_MEDIA_TYPE)
                         .type(Servlets.JSON_MEDIA_TYPE).method(HttpMethod.GET, ClientResponse.class);
         Assert.assertEquals(clientResponse.getStatus(), Response.Status.BAD_REQUEST.getStatusCode());
 
@@ -403,10 +306,10 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
 
     @Test
     public void testGetEntityListForNoInstances() throws Exception {
-        String typeName = addNewType();
+        addNewType();
 
         ClientResponse clientResponse =
-                service.path(ENTITIES).queryParam("type", typeName).accept(Servlets.JSON_MEDIA_TYPE)
+                service.path("api/atlas/entities").queryParam("type", "test").accept(Servlets.JSON_MEDIA_TYPE)
                         .type(Servlets.JSON_MEDIA_TYPE).method(HttpMethod.GET, ClientResponse.class);
         Assert.assertEquals(clientResponse.getStatus(), Response.Status.OK.getStatusCode());
 
@@ -420,23 +323,21 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         Assert.assertEquals(list.length(), 0);
     }
 
-    private String addNewType() throws Exception {
-        String typeName = "test" + randomString();
+    private void addNewType() throws Exception {
         HierarchicalTypeDefinition<ClassType> testTypeDefinition = TypesUtil
-                .createClassTypeDef(typeName, ImmutableList.<String>of(),
+                .createClassTypeDef("test", ImmutableList.<String>of(),
                         TypesUtil.createRequiredAttrDef("name", DataTypes.STRING_TYPE),
                         TypesUtil.createRequiredAttrDef("description", DataTypes.STRING_TYPE));
 
-        String typesAsJSON = TypesSerialization.toJson(testTypeDefinition, false);
+        String typesAsJSON = TypesSerialization.toJson(testTypeDefinition);
         createType(typesAsJSON);
-        return typeName;
     }
 
     @Test(dependsOnMethods = "testSubmitEntity")
     public void testGetTraitNames() throws Exception {
         final String guid = tableId._getId();
         ClientResponse clientResponse =
-                service.path(ENTITIES).path(guid).path(TRAITS).accept(Servlets.JSON_MEDIA_TYPE)
+                service.path("api/atlas/entities").path(guid).path(TRAITS).accept(Servlets.JSON_MEDIA_TYPE)
                         .type(Servlets.JSON_MEDIA_TYPE).method(HttpMethod.GET, ClientResponse.class);
         Assert.assertEquals(clientResponse.getStatus(), Response.Status.OK.getStatusCode());
 
@@ -466,7 +367,7 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
 
         final String guid = tableId._getId();
         ClientResponse clientResponse =
-                service.path(ENTITIES).path(guid).path(TRAITS).accept(Servlets.JSON_MEDIA_TYPE)
+                service.path("api/atlas/entities").path(guid).path(TRAITS).accept(Servlets.JSON_MEDIA_TYPE)
                         .type(Servlets.JSON_MEDIA_TYPE)
                         .method(HttpMethod.POST, ClientResponse.class, traitInstanceAsJSON);
         Assert.assertEquals(clientResponse.getStatus(), Response.Status.CREATED.getStatusCode());
@@ -489,7 +390,7 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
 
         final String guid = tableId._getId();
         ClientResponse clientResponse =
-                service.path(ENTITIES).path(guid).path(TRAITS).accept(Servlets.JSON_MEDIA_TYPE)
+                service.path("api/atlas/entities").path(guid).path(TRAITS).accept(Servlets.JSON_MEDIA_TYPE)
                         .type(Servlets.JSON_MEDIA_TYPE)
                         .method(HttpMethod.POST, ClientResponse.class, traitInstanceAsJSON);
         Assert.assertEquals(clientResponse.getStatus(), Response.Status.NOT_FOUND.getStatusCode());
@@ -512,7 +413,7 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
 
         final String guid = tableId._getId();
         ClientResponse clientResponse =
-                service.path(ENTITIES).path(guid).path(TRAITS).accept(Servlets.JSON_MEDIA_TYPE)
+                service.path("api/atlas/entities").path(guid).path(TRAITS).accept(Servlets.JSON_MEDIA_TYPE)
                         .type(Servlets.JSON_MEDIA_TYPE)
                         .method(HttpMethod.POST, ClientResponse.class, traitInstanceAsJSON);
         Assert.assertEquals(clientResponse.getStatus(), Response.Status.CREATED.getStatusCode());
@@ -553,7 +454,7 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         LOG.debug("traitInstanceAsJSON = " + traitInstanceAsJSON);
 
         ClientResponse clientResponse =
-                service.path(ENTITIES).path("random").path(TRAITS).accept(Servlets.JSON_MEDIA_TYPE)
+                service.path("api/atlas/entities").path("random").path(TRAITS).accept(Servlets.JSON_MEDIA_TYPE)
                         .type(Servlets.JSON_MEDIA_TYPE)
                         .method(HttpMethod.POST, ClientResponse.class, traitInstanceAsJSON);
         Assert.assertEquals(clientResponse.getStatus(), Response.Status.NOT_FOUND.getStatusCode());
@@ -563,7 +464,7 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
     public void testDeleteTrait() throws Exception {
         final String guid = tableId._getId();
 
-        ClientResponse clientResponse = service.path(ENTITIES).path(guid).path(TRAITS).path(traitName)
+        ClientResponse clientResponse = service.path("api/atlas/entities").path(guid).path(TRAITS).path(traitName)
                 .accept(Servlets.JSON_MEDIA_TYPE).type(Servlets.JSON_MEDIA_TYPE)
                 .method(HttpMethod.DELETE, ClientResponse.class);
         Assert.assertEquals(clientResponse.getStatus(), Response.Status.OK.getStatusCode());
@@ -581,7 +482,7 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
     public void testDeleteTraitNonExistent() throws Exception {
         final String traitName = "blah_trait";
 
-        ClientResponse clientResponse = service.path(ENTITIES).path("random").path(TRAITS).path(traitName)
+        ClientResponse clientResponse = service.path("api/atlas/entities").path("random").path(TRAITS).path(traitName)
                 .accept(Servlets.JSON_MEDIA_TYPE).type(Servlets.JSON_MEDIA_TYPE)
                 .method(HttpMethod.DELETE, ClientResponse.class);
         Assert.assertEquals(clientResponse.getStatus(), Response.Status.NOT_FOUND.getStatusCode());
@@ -595,36 +496,15 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
                 "trait=" + traitName + " should be defined in type system before it can be deleted");
         Assert.assertNotNull(response.get(AtlasClient.STACKTRACE));
     }
-@Test(dependsOnMethods = "testSubmitEntity()")
-    public void testDeleteExistentTraitNonExistentForEntity() throws Exception {
-    
-        final String guid = tableId._getId();
-        final String traitName = "PII_Trait" + randomString();
-        HierarchicalTypeDefinition<TraitType> piiTrait = TypesUtil
-                .createTraitTypeDef(traitName, ImmutableList.<String>of(),
-                        TypesUtil.createRequiredAttrDef("type", DataTypes.STRING_TYPE));
-        String traitDefinitionAsJSON = TypesSerialization$.MODULE$.toJson(piiTrait, true);
-        createType(traitDefinitionAsJSON);
-        
-        ClientResponse clientResponse = service.path(ENTITIES).path(guid).path(TRAITS).path(traitName)
-                .accept(Servlets.JSON_MEDIA_TYPE).type(Servlets.JSON_MEDIA_TYPE)
-                .method(HttpMethod.DELETE, ClientResponse.class);
-        
-        Assert.assertEquals(clientResponse.getStatus(), Response.Status.NOT_FOUND.getStatusCode());
 
-        String responseAsString = clientResponse.getEntity(String.class);
-        Assert.assertNotNull(responseAsString);
-
-        JSONObject response = new JSONObject(responseAsString);
-        Assert.assertNotNull(response.get(AtlasClient.ERROR));
-        Assert.assertNotNull(response.get(AtlasClient.STACKTRACE));
-     
-        
-    }
     private String random() {
         return RandomStringUtils.random(10);
     }
 
+    private String randomString() {
+        return RandomStringUtils.randomAlphanumeric(10);
+    }
+
     @Test
     public void testUTF8() throws Exception {
         String classType = random();
@@ -634,9 +514,10 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         HierarchicalTypeDefinition<ClassType> classTypeDefinition = TypesUtil
                 .createClassTypeDef(classType, ImmutableList.<String>of(),
                         TypesUtil.createUniqueRequiredAttrDef(attrName, DataTypes.STRING_TYPE));
-        TypesDef typesDef = TypesUtil.getTypesDef(ImmutableList.<EnumTypeDefinition>of(), ImmutableList.<StructTypeDefinition>of(),
-                ImmutableList.<HierarchicalTypeDefinition<TraitType>>of(),
-                ImmutableList.of(classTypeDefinition));
+        TypesDef typesDef = TypeUtils
+                .getTypesDef(ImmutableList.<EnumTypeDefinition>of(), ImmutableList.<StructTypeDefinition>of(),
+                        ImmutableList.<HierarchicalTypeDefinition<TraitType>>of(),
+                        ImmutableList.of(classTypeDefinition));
         createType(typesDef);
 
         Referenceable instance = new Referenceable(classType);
@@ -649,162 +530,89 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         Assert.assertEquals(getReferenceable.get(attrName), attrValue);
     }
 
-    @Test(dependsOnMethods = "testSubmitEntity")
-    public void testPartialUpdate() throws Exception {
-        final List<Referenceable> columns = new ArrayList<>();
-        Map<String, Object> values = new HashMap<>();
-        values.put("name", "col1");
-        values.put("dataType", "string");
-        values.put("comment", "col1 comment");
-
-        Referenceable ref = new Referenceable(BaseResourceIT.COLUMN_TYPE, values);
-        columns.add(ref);
-        Referenceable tableUpdated = new Referenceable(BaseResourceIT.HIVE_TABLE_TYPE, new HashMap<String, Object>() {{
-            put("columns", columns);
-        }});
-
-        LOG.debug("Updating entity= " + tableUpdated);
-        serviceClient.updateEntity(tableId._getId(), tableUpdated);
-
-        ClientResponse response = getEntityDefinition(tableId._getId());
-        String definition = getEntityDefinition(response);
-        Referenceable getReferenceable = InstanceSerialization.fromJsonReferenceable(definition, true);
-        List<Referenceable> refs = (List<Referenceable>) getReferenceable.get("columns");
+    private void createHiveTypes() throws Exception {
+        HierarchicalTypeDefinition<ClassType> databaseTypeDefinition = TypesUtil
+                .createClassTypeDef(DATABASE_TYPE, ImmutableList.<String>of(),
+                        TypesUtil.createUniqueRequiredAttrDef("name", DataTypes.STRING_TYPE),
+                        TypesUtil.createRequiredAttrDef("description", DataTypes.STRING_TYPE));
 
-        Assert.assertTrue(refs.get(0).equalsContents(columns.get(0)));
+        StructTypeDefinition structTypeDefinition = new StructTypeDefinition("serdeType",
+                new AttributeDefinition[]{TypesUtil.createRequiredAttrDef("name", DataTypes.STRING_TYPE),
+                        TypesUtil.createRequiredAttrDef("serde", DataTypes.STRING_TYPE)});
+
+        EnumValue values[] = {new EnumValue("MANAGED", 1), new EnumValue("EXTERNAL", 2),};
+
+        EnumTypeDefinition enumTypeDefinition = new EnumTypeDefinition("tableType", values);
+
+        HierarchicalTypeDefinition<ClassType> tableTypeDefinition = TypesUtil
+                .createClassTypeDef(TABLE_TYPE, ImmutableList.<String>of(),
+                        TypesUtil.createUniqueRequiredAttrDef("name", DataTypes.STRING_TYPE),
+                        TypesUtil.createOptionalAttrDef("description", DataTypes.STRING_TYPE),
+                        TypesUtil.createRequiredAttrDef("type", DataTypes.STRING_TYPE),
+                        TypesUtil.createRequiredAttrDef("date", DataTypes.DATE_TYPE),
+                        TypesUtil.createRequiredAttrDef("level", DataTypes.INT_TYPE),
+                        new AttributeDefinition("tableType", "tableType", Multiplicity.REQUIRED, false, null),
+                        new AttributeDefinition("serde1", "serdeType", Multiplicity.REQUIRED, false, null),
+                        new AttributeDefinition("serde2", "serdeType", Multiplicity.REQUIRED, false, null),
+                        new AttributeDefinition("database", DATABASE_TYPE, Multiplicity.REQUIRED, true, null),
+                        new AttributeDefinition("compressed", DataTypes.BOOLEAN_TYPE.getName(), Multiplicity.OPTIONAL,
+                                true, null));
+
+        HierarchicalTypeDefinition<TraitType> classificationTraitDefinition = TypesUtil
+                .createTraitTypeDef("classification", ImmutableList.<String>of(),
+                        TypesUtil.createRequiredAttrDef("tag", DataTypes.STRING_TYPE));
+        HierarchicalTypeDefinition<TraitType> piiTrait =
+                TypesUtil.createTraitTypeDef("pii", ImmutableList.<String>of());
+        HierarchicalTypeDefinition<TraitType> phiTrait =
+                TypesUtil.createTraitTypeDef("phi", ImmutableList.<String>of());
+        HierarchicalTypeDefinition<TraitType> pciTrait =
+                TypesUtil.createTraitTypeDef("pci", ImmutableList.<String>of());
+        HierarchicalTypeDefinition<TraitType> soxTrait =
+                TypesUtil.createTraitTypeDef("sox", ImmutableList.<String>of());
+        HierarchicalTypeDefinition<TraitType> secTrait =
+                TypesUtil.createTraitTypeDef("sec", ImmutableList.<String>of());
+        HierarchicalTypeDefinition<TraitType> financeTrait =
+                TypesUtil.createTraitTypeDef("finance", ImmutableList.<String>of());
+
+        TypesDef typesDef = TypeUtils
+                .getTypesDef(ImmutableList.of(enumTypeDefinition), ImmutableList.of(structTypeDefinition), ImmutableList
+                                .of(classificationTraitDefinition, piiTrait, phiTrait, pciTrait, soxTrait, secTrait,
+                                        financeTrait), ImmutableList.of(databaseTypeDefinition, tableTypeDefinition));
+        createType(typesDef);
+    }
 
-        //Update by unique attribute
-        values.put("dataType", "int");
-        ref = new Referenceable(BaseResourceIT.COLUMN_TYPE, values);
-        columns.set(0, ref);
-        tableUpdated = new Referenceable(BaseResourceIT.HIVE_TABLE_TYPE, new HashMap<String, Object>() {{
-            put("columns", columns);
-        }});
+    private Referenceable createHiveTableInstance() throws Exception {
+        Referenceable databaseInstance = new Referenceable(DATABASE_TYPE);
+        databaseInstance.set("name", DATABASE_NAME);
+        databaseInstance.set("description", "foo database");
 
-        LOG.debug("Updating entity= " + tableUpdated);
-        serviceClient.updateEntity(BaseResourceIT.HIVE_TABLE_TYPE, "name", (String) tableInstance.get("name"),
-                tableUpdated);
+        Referenceable tableInstance =
+                new Referenceable(TABLE_TYPE, "classification", "pii", "phi", "pci", "sox", "sec", "finance");
+        tableInstance.set("name", TABLE_NAME);
+        tableInstance.set("description", "bar table");
+        tableInstance.set("date", "2014-07-11T08:00:00.000Z");
+        tableInstance.set("type", "managed");
+        tableInstance.set("level", 2);
+        tableInstance.set("tableType", 1); // enum
+        tableInstance.set("database", databaseInstance);
+        tableInstance.set("compressed", false);
 
-        response = getEntityDefinition(tableId._getId());
-        definition = getEntityDefinition(response);
-        getReferenceable = InstanceSerialization.fromJsonReferenceable(definition, true);
-        refs = (List<Referenceable>) getReferenceable.get("columns");
+        Struct traitInstance = (Struct) tableInstance.getTrait("classification");
+        traitInstance.set("tag", "foundation_etl");
 
-        Assert.assertTrue(refs.get(0).equalsContents(columns.get(0)));
-        Assert.assertEquals(refs.get(0).get("dataType"), "int");
+        Struct serde1Instance = new Struct("serdeType");
+        serde1Instance.set("name", "serde1");
+        serde1Instance.set("serde", "serde1");
+        tableInstance.set("serde1", serde1Instance);
 
-    }
+        Struct serde2Instance = new Struct("serdeType");
+        serde2Instance.set("name", "serde2");
+        serde2Instance.set("serde", "serde2");
+        tableInstance.set("serde2", serde2Instance);
 
-    @Test(dependsOnMethods = "testSubmitEntity")
-    public void testCompleteUpdate() throws Exception {
-        final List<Referenceable> columns = new ArrayList<>();
-        Map<String, Object> values1 = new HashMap<>();
-        values1.put("name", "col3");
-        values1.put("dataType", "string");
-        values1.put("comment", "col3 comment");
-
-        Map<String, Object> values2 = new HashMap<>();
-        values2.put("name", "col4");
-        values2.put("dataType", "string");
-        values2.put("comment", "col4 comment");
-
-        Referenceable ref1 = new Referenceable(BaseResourceIT.COLUMN_TYPE, values1);
-        Referenceable ref2 = new Referenceable(BaseResourceIT.COLUMN_TYPE, values2);
-        columns.add(ref1);
-        columns.add(ref2);
-        tableInstance.set("columns", columns);
-
-        LOG.debug("Replacing entity= " + tableInstance);
-        serviceClient.updateEntities(tableInstance);
-
-        ClientResponse response = getEntityDefinition(tableId._getId());
-        String definition = getEntityDefinition(response);
-        Referenceable getReferenceable = InstanceSerialization.fromJsonReferenceable(definition, true);
-        List<Referenceable> refs = (List<Referenceable>) getReferenceable.get("columns");
-        Assert.assertEquals(refs.size(), 2);
+        List<String> traits = tableInstance.getTraits();
+        Assert.assertEquals(traits.size(), 7);
 
-        Assert.assertTrue(refs.get(0).equalsContents(columns.get(0)));
-        Assert.assertTrue(refs.get(1).equalsContents(columns.get(1)));
+        return tableInstance;
     }
-    
-    @Test
-    public void testDeleteEntitiesViaRestApi() throws Exception {
-        // Create 2 database entities
-        Referenceable db1 = new Referenceable(DATABASE_TYPE);
-        db1.set("name", randomString());
-        db1.set("description", randomString());
-        Id db1Id = createInstance(db1);
-        Referenceable db2 = new Referenceable(DATABASE_TYPE);
-        db2.set("name", randomString());
-        db2.set("description", randomString());
-        Id db2Id = createInstance(db2);
-        
-        // Delete the database entities
-        ClientResponse clientResponse = service.path(ENTITIES).
-            queryParam(AtlasClient.GUID.toLowerCase(), db1Id._getId()).
-            queryParam(AtlasClient.GUID.toLowerCase(), db2Id._getId()).
-            accept(Servlets.JSON_MEDIA_TYPE).type(Servlets.JSON_MEDIA_TYPE).method(HttpMethod.DELETE, ClientResponse.class);
-        Assert.assertEquals(clientResponse.getStatus(), Response.Status.OK.getStatusCode());
-
-        // Verify that response has guids for both database entities
-        JSONObject response = new JSONObject(clientResponse.getEntity(String.class));
-        final String deletedGuidsJson = response.getString(AtlasClient.GUID);
-        Assert.assertNotNull(deletedGuidsJson);
-        JSONArray guidsArray = new JSONArray(deletedGuidsJson);
-        Assert.assertEquals(guidsArray.length(), 2);
-        List<String> deletedGuidsList = new ArrayList<>(2);
-        for (int index = 0; index < guidsArray.length(); index++) {
-            deletedGuidsList.add(guidsArray.getString(index));
-        }
-        Assert.assertTrue(deletedGuidsList.contains(db1Id._getId()));
-        Assert.assertTrue(deletedGuidsList.contains(db2Id._getId()));
-
-        // Verify entities were deleted from the repository.
-        for (String guid : deletedGuidsList) {
-            try {
-                serviceClient.getEntity(guid);
-                Assert.fail(AtlasServiceException.class.getSimpleName() + 
-                    " was expected but not thrown.  The entity with guid " + guid + 
-                    " still exists in the repository after being deleted.");
-            }
-            catch (AtlasServiceException e) {
-                Assert.assertTrue(e.getMessage().contains(Integer.toString(Response.Status.NOT_FOUND.getStatusCode())));
-            }
-        }
-    }
-    
-    @Test
-    public void testDeleteEntitiesViaClientApi() throws Exception {
-        // Create 2 database entities
-        Referenceable db1 = new Referenceable(DATABASE_TYPE);
-        db1.set("name", randomString());
-        db1.set("description", randomString());
-        Id db1Id = createInstance(db1);
-        Referenceable db2 = new Referenceable(DATABASE_TYPE);
-        db2.set("name", randomString());
-        db2.set("description", randomString());
-        Id db2Id = createInstance(db2);
-        
-        // Delete the database entities
-        List<String> deletedGuidsList = serviceClient.deleteEntities(db1Id._getId(), db2Id._getId());
-        
-        // Verify that deleteEntities() response has database entity guids 
-        Assert.assertEquals(deletedGuidsList.size(), 2);
-        Assert.assertTrue(deletedGuidsList.contains(db1Id._getId()));   
-        Assert.assertTrue(deletedGuidsList.contains(db2Id._getId()));
-        
-        // Verify entities were deleted from the repository.
-        for (String guid : deletedGuidsList) {
-            try {
-                serviceClient.getEntity(guid);
-                Assert.fail(AtlasServiceException.class.getSimpleName() + 
-                    " was expected but not thrown.  The entity with guid " + guid + 
-                    " still exists in the repository after being deleted.");
-            }
-            catch (AtlasServiceException e) {
-                Assert.assertTrue(e.getMessage().contains(Integer.toString(Response.Status.NOT_FOUND.getStatusCode())));
-            }
-        }
-    }
-
 }