diff --git a/examples/jms/embedded-simple/src/main/java/org/apache/activemq/artemis/jms/example/EmbeddedExample.java b/examples/jms/embedded-simple/src/main/java/org/apache/activemq/artemis/jms/example/EmbeddedExample.java
index 2bf15a2a39..98fc8b290c 100644
--- a/examples/jms/embedded-simple/src/main/java/org/apache/activemq/artemis/jms/example/EmbeddedExample.java
+++ b/examples/jms/embedded-simple/src/main/java/org/apache/activemq/artemis/jms/example/EmbeddedExample.java
@@ -1,4 +1,4 @@
-/*
+/**
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements. See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -16,11 +16,9 @@
  */
 package org.apache.activemq.artemis.jms.example;
 
-import org.apache.activemq.artemis.api.jms.JMSFactoryType;
-import org.apache.activemq.artemis.core.config.impl.SecurityConfiguration;
-import org.apache.activemq.artemis.jms.server.JMSServerManager;
-import org.apache.activemq.artemis.jms.server.embedded.EmbeddedJMS;
-import org.apache.activemq.artemis.spi.core.security.ActiveMQSecurityManagerImpl;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
 
 import javax.jms.Connection;
 import javax.jms.ConnectionFactory;
@@ -29,62 +27,82 @@ import javax.jms.MessageProducer;
 import javax.jms.Queue;
 import javax.jms.Session;
 import javax.jms.TextMessage;
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.List;
+
+import org.apache.activemq.artemis.common.example.ActiveMQExample;
+import org.apache.activemq.artemis.core.config.impl.SecurityConfiguration;
+import org.apache.activemq.artemis.jms.server.embedded.EmbeddedJMS;
+import org.apache.activemq.artemis.jms.server.JMSServerManager;
+import org.apache.activemq.artemis.spi.core.security.ActiveMQSecurityManagerImpl;
+import org.apache.activemq.artemis.api.jms.JMSFactoryType;
 
 /**
- * This example demonstrates how to run an ActiveMQ Artemis embedded with JMS
+ * This example demonstrates how to run a ActiveMQ embedded with JMS
  */
-public class EmbeddedExample
+public class EmbeddedExample extends ActiveMQExample
 {
+
    public static void main(final String[] args) throws Exception
    {
-      EmbeddedJMS jmsServer = new EmbeddedJMS();
+      new EmbeddedExample().runExample();
+   }
 
-      SecurityConfiguration securityConfig = new SecurityConfiguration();
-      securityConfig.addUser("guest", "guest");
-      securityConfig.addRole("guest", "guest");
-      securityConfig.setDefaultUser("guest");
-      jmsServer.setSecurityManager(new ActiveMQSecurityManagerImpl(securityConfig));
+   @Override
+   public boolean runExample() throws Exception
+   {
+      try
+      {
+         EmbeddedJMS jmsServer = new EmbeddedJMS();
 
-      jmsServer.start();
-      System.out.println("Started Embedded JMS Server");
+         SecurityConfiguration securityConfig = new SecurityConfiguration();
+         securityConfig.addUser("guest", "guest");
+         securityConfig.addRole("guest", "guest");
+         securityConfig.setDefaultUser("guest");
+         jmsServer.setSecurityManager(new ActiveMQSecurityManagerImpl(securityConfig));
 
-      JMSServerManager jmsServerManager = jmsServer.getJMSServerManager();
-      List<String> connectors = new ArrayList<String>();
-      connectors.add("in-vm");
-      jmsServerManager.createConnectionFactory("ConnectionFactory", false, JMSFactoryType.CF, connectors, "ConnectionFactory");
-      jmsServerManager.createQueue(false, "exampleQueue", null, false, "queue/exampleQueue");
+         jmsServer.start();
+         System.out.println("Started Embedded JMS Server");
 
-      ConnectionFactory cf = (ConnectionFactory) jmsServer.lookup("ConnectionFactory");
-      Queue queue = (Queue) jmsServer.lookup("queue/exampleQueue");
+         JMSServerManager jmsServerManager = jmsServer.getJMSServerManager();
+         List<String> connectors = new ArrayList<String>();
+         connectors.add("in-vm");
+         jmsServerManager.createConnectionFactory("ConnectionFactory", false, JMSFactoryType.CF, connectors, "ConnectionFactory");
+         jmsServerManager.createQueue(false, "exampleQueue", null, false, "queue/exampleQueue");
 
-      // Step 10. Send and receive a message using JMS API
-      Connection connection = null;
-      try
-      {
-         connection = cf.createConnection();
-         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
-         MessageProducer producer = session.createProducer(queue);
-         TextMessage message = session.createTextMessage("Hello sent at " + new Date());
-         System.out.println("Sending message: " + message.getText());
-         producer.send(message);
-         MessageConsumer messageConsumer = session.createConsumer(queue);
-         connection.start();
-         TextMessage messageReceived = (TextMessage) messageConsumer.receive(1000);
-         System.out.println("Received message:" + messageReceived.getText());
-      }
-      finally
-      {
-         if (connection != null)
+         ConnectionFactory cf = (ConnectionFactory)jmsServer.lookup("ConnectionFactory");
+         Queue queue = (Queue)jmsServer.lookup("queue/exampleQueue");
+
+         // Step 10. Send and receive a message using JMS API
+         Connection connection = null;
+         try
          {
-            connection.close();
+            connection = cf.createConnection();
+            Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
+            MessageProducer producer = session.createProducer(queue);
+            TextMessage message = session.createTextMessage("Hello sent at " + new Date());
+            System.out.println("Sending message: " + message.getText());
+            producer.send(message);
+            MessageConsumer messageConsumer = session.createConsumer(queue);
+            connection.start();
+            TextMessage messageReceived = (TextMessage)messageConsumer.receive(1000);
+            System.out.println("Received message:" + messageReceived.getText());
          }
+         finally
+         {
+            if (connection != null)
+            {
+               connection.close();
+            }
 
-         // Step 11. Stop the JMS server
-         jmsServer.stop();
-         System.out.println("Stopped the JMS Server");
+            // Step 11. Stop the JMS server
+            jmsServer.stop();
+            System.out.println("Stopped the JMS Server");
+         }
+      }
+      catch (Exception e)
+      {
+         e.printStackTrace();
+         return false;
       }
+      return true;
    }
 }