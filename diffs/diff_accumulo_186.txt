diff --git a/test/src/test/java/org/apache/accumulo/test/VolumeIT.java b/test/src/test/java/org/apache/accumulo/test/VolumeIT.java
index 6c1da2ce1f..2f64d58878 100644
--- a/test/src/test/java/org/apache/accumulo/test/VolumeIT.java
+++ b/test/src/test/java/org/apache/accumulo/test/VolumeIT.java
@@ -23,18 +23,14 @@ import java.io.BufferedOutputStream;
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
-import java.net.URI;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
 import java.util.List;
 import java.util.Map.Entry;
 import java.util.SortedSet;
 import java.util.TreeSet;
 
-import org.apache.accumulo.core.Constants;
 import org.apache.accumulo.core.client.AccumuloException;
 import org.apache.accumulo.core.client.AccumuloSecurityException;
 import org.apache.accumulo.core.client.BatchWriter;
@@ -53,13 +49,11 @@ import org.apache.accumulo.core.data.Mutation;
 import org.apache.accumulo.core.data.Range;
 import org.apache.accumulo.core.data.Value;
 import org.apache.accumulo.core.metadata.MetadataTable;
-import org.apache.accumulo.core.metadata.RootTable;
 import org.apache.accumulo.core.metadata.schema.MetadataSchema;
 import org.apache.accumulo.core.metadata.schema.MetadataSchema.TabletsSection.DataFileColumnFamily;
 import org.apache.accumulo.core.security.Authorizations;
 import org.apache.accumulo.core.security.TablePermission;
 import org.apache.accumulo.core.util.CachedConfiguration;
-import org.apache.accumulo.core.zookeeper.ZooUtil;
 import org.apache.accumulo.minicluster.impl.MiniAccumuloConfigImpl;
 import org.apache.accumulo.server.ServerConstants;
 import org.apache.accumulo.server.init.Initialize;
@@ -70,9 +64,7 @@ import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.FileStatus;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
-import org.apache.hadoop.fs.RawLocalFileSystem;
 import org.apache.hadoop.io.Text;
-import org.apache.zookeeper.ZooKeeper;
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.BeforeClass;
@@ -99,24 +91,20 @@ public class VolumeIT extends ConfigurableMacIT {
 
   @After
   public void clearDirs() throws IOException {
-    FileUtils.deleteQuietly(new File(v1.getParent().toUri()));
+    FileUtils.deleteDirectory(new File(v1.toUri()));
+    FileUtils.deleteDirectory(new File(v2.toUri()));
   }
 
   @Override
-  public void configure(MiniAccumuloConfigImpl cfg, Configuration hadoopCoreSite) {
+  public void configure(MiniAccumuloConfigImpl cfg) {
     // Run MAC on two locations in the local file system
-    URI v1Uri = v1.toUri();
-    cfg.setProperty(Property.INSTANCE_DFS_DIR, v1Uri.getPath());
-    cfg.setProperty(Property.INSTANCE_DFS_URI, v1Uri.getScheme() + v1Uri.getHost());
+    cfg.setProperty(Property.INSTANCE_DFS_URI, v1.toString());
+    cfg.setProperty(Property.INSTANCE_DFS_DIR, "/accumulo");
     cfg.setProperty(Property.INSTANCE_VOLUMES, v1.toString() + "," + v2.toString());
-
-    // use raw local file system so walogs sync and flush will work
-    hadoopCoreSite.set("fs.file.impl", RawLocalFileSystem.class.getName());
-
-    super.configure(cfg, hadoopCoreSite);
+    super.configure(cfg);
   }
 
-  @Test(timeout = 2 * 60 * 1000)
+  @Test
   public void test() throws Exception {
     // create a table
     Connector connector = getConnector();
@@ -178,7 +166,7 @@ public class VolumeIT extends ConfigurableMacIT {
     Assert.assertEquals(expected, actual);
   }
 
-  @Test(timeout = 2 * 60 * 1000)
+  @Test
   public void testRelativePaths() throws Exception {
 
     List<String> expected = new ArrayList<String>();
@@ -263,83 +251,41 @@ public class VolumeIT extends ConfigurableMacIT {
 
   }
 
-  @Test
-  public void testAddVolumes() throws Exception {
-
-    String[] tableNames = getTableNames(2);
-
-    // grab this before shutting down cluster
-    String uuid = new ZooKeeperInstance(cluster.getInstanceName(), cluster.getZooKeepers()).getInstanceID();
-
-    verifyVolumesUsed(tableNames[0], false, v1, v2);
-
-    Assert.assertEquals(0, cluster.exec(Admin.class, "stopAll").waitFor());
-    cluster.stop();
-
-    Configuration conf = new Configuration(false);
-    conf.addResource(new Path(cluster.getConfig().getConfDir().toURI().toString(), "accumulo-site.xml"));
-
-    File v3f = new File(volDirBase, "v3");
-    v3f.mkdir();
-    Path v3 = new Path("file://" + v3f.getAbsolutePath());
-
-    conf.set(Property.INSTANCE_VOLUMES.getKey(), v1.toString() + "," + v2.toString() + "," + v3.toString());
-    BufferedOutputStream fos = new BufferedOutputStream(new FileOutputStream(new File(cluster.getConfig().getConfDir(), "accumulo-site.xml")));
-    conf.writeXml(fos);
-    fos.close();
-
-    // initialize volume
-    Assert.assertEquals(0, cluster.exec(Initialize.class, "--add-volumes").waitFor());
-
-    // check that all volumes are initialized
-    for (Path volumePath : Arrays.asList(v1, v2, v3)) {
-      FileSystem fs = volumePath.getFileSystem(CachedConfiguration.getInstance());
-      Path vp = new Path(volumePath, ServerConstants.INSTANCE_ID_DIR);
-      FileStatus[] iids = fs.listStatus(vp);
-      Assert.assertEquals(1, iids.length);
-      Assert.assertEquals(uuid, iids[0].getPath().getName());
-    }
-
-    // start cluster and verify that new volume is used
-    cluster.start();
-
-    verifyVolumesUsed(tableNames[1], false, v1, v2, v3);
-
-  }
 
   @Test
-  public void testNonConfiguredVolumes() throws Exception {
+  public void testAddVolumes() throws Exception {
 
     String[] tableNames = getTableNames(2);
 
     // grab this before shutting down cluster
     String uuid = new ZooKeeperInstance(cluster.getInstanceName(), cluster.getZooKeepers()).getInstanceID();
 
-    verifyVolumesUsed(tableNames[0], false, v1, v2);
+    verifyVolumesUsed(tableNames[0], v1, v2);
 
     Assert.assertEquals(0, cluster.exec(Admin.class, "stopAll").waitFor());
     cluster.stop();
-
+    
     Configuration conf = new Configuration(false);
     conf.addResource(new Path(cluster.getConfig().getConfDir().toURI().toString(), "accumulo-site.xml"));
-
+    
     File v3f = new File(volDirBase, "v3");
     v3f.mkdir();
     Path v3 = new Path("file://" + v3f.getAbsolutePath());
-
-    conf.set(Property.INSTANCE_VOLUMES.getKey(), v2.toString() + "," + v3.toString());
+ 
+    conf.set(Property.INSTANCE_VOLUMES.getKey(), v1.toString() + "," + v2.toString()+","+v3.toString());
     BufferedOutputStream fos = new BufferedOutputStream(new FileOutputStream(new File(cluster.getConfig().getConfDir(), "accumulo-site.xml")));
     conf.writeXml(fos);
     fos.close();
-
+    
     // initialize volume
     Assert.assertEquals(0, cluster.exec(Initialize.class, "--add-volumes").waitFor());
 
     // check that all volumes are initialized
     for (Path volumePath : Arrays.asList(v1, v2, v3)) {
       FileSystem fs = volumePath.getFileSystem(CachedConfiguration.getInstance());
-      Path vp = new Path(volumePath, ServerConstants.INSTANCE_ID_DIR);
-      FileStatus[] iids = fs.listStatus(vp);
+      Path vp = new Path(volumePath, "accumulo");
+      Path vpi = new Path(vp, ServerConstants.INSTANCE_ID_DIR);
+      FileStatus[] iids = fs.listStatus(vpi);
       Assert.assertEquals(1, iids.length);
       Assert.assertEquals(uuid, iids[0].getPath().getName());
     }
@@ -347,89 +293,55 @@ public class VolumeIT extends ConfigurableMacIT {
     // start cluster and verify that new volume is used
     cluster.start();
 
-    // Make sure we can still read the tables (tableNames[0] is very likely to have a file still on v1)
-    List<String> expected = new ArrayList<String>();
-    for (int i = 0; i < 100; i++) {
-      String row = String.format("%06d", i * 100 + 3);
-      expected.add(row + ":cf1:cq1:1");
-    }
-
-    verifyData(expected, getConnector().createScanner(tableNames[0], Authorizations.EMPTY));
+    verifyVolumesUsed(tableNames[1], v1, v2, v3);
 
-    // v1 should not have any data for tableNames[1]
-    verifyVolumesUsed(tableNames[1], false, v2, v3);
   }
 
-  private void writeData(String tableName, Connector conn) throws AccumuloException, AccumuloSecurityException, TableExistsException, TableNotFoundException,
+  private void verifyVolumesUsed(String tableName, Path... paths) throws AccumuloException, AccumuloSecurityException, TableExistsException,
+      TableNotFoundException,
       MutationsRejectedException {
     TreeSet<Text> splits = new TreeSet<Text>();
-    for (int i = 1; i < 100; i++) {
+    for (int i = 0; i < 100; i++) {
       splits.add(new Text(String.format("%06d", i * 100)));
     }
 
+    Connector conn = cluster.getConnector("root", ROOT_PASSWORD);
     conn.tableOperations().create(tableName);
     conn.tableOperations().addSplits(tableName, splits);
 
+    List<String> expected = new ArrayList<String>();
+
     BatchWriter bw = conn.createBatchWriter(tableName, new BatchWriterConfig());
     for (int i = 0; i < 100; i++) {
       String row = String.format("%06d", i * 100 + 3);
       Mutation m = new Mutation(row);
       m.put("cf1", "cq1", "1");
       bw.addMutation(m);
-    }
-
-    bw.close();
-  }
-
-  private void verifyVolumesUsed(String tableName, boolean shouldExist, Path... paths) throws AccumuloException, AccumuloSecurityException,
-      TableExistsException, TableNotFoundException, MutationsRejectedException {
-
-    Connector conn = getConnector();
-
-    List<String> expected = new ArrayList<String>();
-    for (int i = 0; i < 100; i++) {
-      String row = String.format("%06d", i * 100 + 3);
       expected.add(row + ":cf1:cq1:1");
     }
 
-    if (!conn.tableOperations().exists(tableName)) {
-      Assert.assertFalse(shouldExist);
-
-      writeData(tableName, conn);
+    bw.close();
 
-      verifyData(expected, conn.createScanner(tableName, Authorizations.EMPTY));
+    verifyData(expected, conn.createScanner(tableName, Authorizations.EMPTY));
 
-      conn.tableOperations().flush(tableName, null, null, true);
-    }
+    conn.tableOperations().flush(tableName, null, null, true);
 
     verifyData(expected, conn.createScanner(tableName, Authorizations.EMPTY));
 
     String tableId = conn.tableOperations().tableIdMap().get(tableName);
     Scanner metaScanner = conn.createScanner(MetadataTable.NAME, Authorizations.EMPTY);
-    MetadataSchema.TabletsSection.ServerColumnFamily.DIRECTORY_COLUMN.fetch(metaScanner);
     metaScanner.fetchColumnFamily(MetadataSchema.TabletsSection.DataFileColumnFamily.NAME);
     metaScanner.setRange(new KeyExtent(new Text(tableId), null, null).toMetadataRange());
 
     int counts[] = new int[paths.length];
 
-    outer: for (Entry<Key,Value> entry : metaScanner) {
-      String cf = entry.getKey().getColumnFamily().toString();
+    for (Entry<Key,Value> entry : metaScanner) {
       String cq = entry.getKey().getColumnQualifier().toString();
-
-      String path;
-      if (cf.equals(MetadataSchema.TabletsSection.DataFileColumnFamily.NAME.toString()))
-        path = cq;
-      else
-        path = entry.getValue().toString();
-
       for (int i = 0; i < paths.length; i++) {
-        if (path.startsWith(paths[i].toString())) {
+        if (cq.startsWith(paths[i].toString())) {
           counts[i]++;
-          continue outer;
         }
       }
-
-      Assert.fail("Unexpected volume " + path);
     }
 
     // if a volume is chosen randomly for each tablet, then the probability that a volume will not be chosen for any tablet is ((num_volumes -
@@ -441,120 +353,7 @@ public class VolumeIT extends ConfigurableMacIT {
       sum += count;
     }
 
-    Assert.assertEquals(200, sum);
+    Assert.assertEquals(100, sum);
   }
 
-  @Test(timeout = 5 * 60 * 1000)
-  public void testRemoveVolumes() throws Exception {
-    String[] tableNames = getTableNames(2);
-
-    verifyVolumesUsed(tableNames[0], false, v1, v2);
-
-    Assert.assertEquals(0, cluster.exec(Admin.class, "stopAll").waitFor());
-    cluster.stop();
-
-    Configuration conf = new Configuration(false);
-    conf.addResource(new Path(cluster.getConfig().getConfDir().toURI().toString(), "accumulo-site.xml"));
-
-    conf.set(Property.INSTANCE_VOLUMES.getKey(), v2.toString());
-    BufferedOutputStream fos = new BufferedOutputStream(new FileOutputStream(new File(cluster.getConfig().getConfDir(), "accumulo-site.xml")));
-    conf.writeXml(fos);
-    fos.close();
-
-    // start cluster and verify that volume was decommisioned
-    cluster.start();
-
-    Connector conn = cluster.getConnector("root", ROOT_PASSWORD);
-    conn.tableOperations().compact(tableNames[0], null, null, true, true);
-
-    verifyVolumesUsed(tableNames[0], true, v2);
-
-    // check that root tablet is not on volume 1
-    String zpath = ZooUtil.getRoot(new ZooKeeperInstance(cluster.getInstanceName(), cluster.getZooKeepers())) + RootTable.ZROOT_TABLET_PATH;
-    ZooKeeper zookeeper = new ZooKeeper(cluster.getZooKeepers(), 30000, null);
-    String rootTabletDir = new String(zookeeper.getData(zpath, false, null), Constants.UTF8);
-    Assert.assertTrue(rootTabletDir.startsWith(v2.toString()));
-    zookeeper.close();
-
-    conn.tableOperations().clone(tableNames[0], tableNames[1], true, new HashMap<String,String>(), new HashSet<String>());
-
-    conn.tableOperations().flush(MetadataTable.NAME, null, null, true);
-    conn.tableOperations().flush(RootTable.NAME, null, null, true);
-
-    verifyVolumesUsed(tableNames[0], true, v2);
-    verifyVolumesUsed(tableNames[1], true, v2);
-
-  }
-
-  private void testReplaceVolume(boolean cleanShutdown) throws Exception {
-    String[] tableNames = getTableNames(3);
-
-    verifyVolumesUsed(tableNames[0], false, v1, v2);
-
-    // write to 2nd table, but do not flush data to disk before shutdown
-    writeData(tableNames[1], cluster.getConnector("root", ROOT_PASSWORD));
-
-    if (cleanShutdown)
-      Assert.assertEquals(0, cluster.exec(Admin.class, "stopAll").waitFor());
-
-    cluster.stop();
-
-    File v1f = new File(v1.toUri());
-    File v8f = new File(new File(v1.getParent().toUri()), "v8");
-    Assert.assertTrue("Failed to rename " + v1f + " to " + v8f, v1f.renameTo(v8f));
-    Path v8 = new Path(v8f.toURI());
-
-    File v2f = new File(v2.toUri());
-    File v9f = new File(new File(v2.getParent().toUri()), "v9");
-    Assert.assertTrue("Failed to rename " + v2f + " to " + v9f, v2f.renameTo(v9f));
-    Path v9 = new Path(v9f.toURI());
-
-    Configuration conf = new Configuration(false);
-    conf.addResource(new Path(cluster.getConfig().getConfDir().toURI().toString(), "accumulo-site.xml"));
-
-    conf.set(Property.INSTANCE_VOLUMES.getKey(), v8 + "," + v9);
-    conf.set(Property.INSTANCE_VOLUMES_REPLACEMENTS.getKey(), v1 + " " + v8 + "," + v2 + " " + v9);
-    BufferedOutputStream fos = new BufferedOutputStream(new FileOutputStream(new File(cluster.getConfig().getConfDir(), "accumulo-site.xml")));
-    conf.writeXml(fos);
-    fos.close();
-
-    // start cluster and verify that volumes were replaced
-    cluster.start();
-
-    verifyVolumesUsed(tableNames[0], true, v8, v9);
-    verifyVolumesUsed(tableNames[1], true, v8, v9);
-
-    // verify writes to new dir
-    getConnector().tableOperations().compact(tableNames[0], null, null, true, true);
-    getConnector().tableOperations().compact(tableNames[1], null, null, true, true);
-
-    verifyVolumesUsed(tableNames[0], true, v8, v9);
-    verifyVolumesUsed(tableNames[1], true, v8, v9);
-
-    // check that root tablet is not on volume 1 or 2
-    String zpath = ZooUtil.getRoot(new ZooKeeperInstance(cluster.getInstanceName(), cluster.getZooKeepers())) + RootTable.ZROOT_TABLET_PATH;
-    ZooKeeper zookeeper = new ZooKeeper(cluster.getZooKeepers(), 30000, null);
-    String rootTabletDir = new String(zookeeper.getData(zpath, false, null), Constants.UTF8);
-    Assert.assertTrue(rootTabletDir.startsWith(v8.toString()) || rootTabletDir.startsWith(v9.toString()));
-    zookeeper.close();
-
-    getConnector().tableOperations().clone(tableNames[1], tableNames[2], true, new HashMap<String,String>(), new HashSet<String>());
-
-    getConnector().tableOperations().flush(MetadataTable.NAME, null, null, true);
-    getConnector().tableOperations().flush(RootTable.NAME, null, null, true);
-
-    verifyVolumesUsed(tableNames[0], true, v8, v9);
-    verifyVolumesUsed(tableNames[1], true, v8, v9);
-    verifyVolumesUsed(tableNames[2], true, v8, v9);
-  }
-
-  @Test(timeout = 5 * 60 * 1000)
-  public void testCleanReplaceVolumes() throws Exception {
-    testReplaceVolume(true);
-  }
-
-  @Test(timeout = 5 * 60 * 1000)
-  public void testDirtyReplaceVolumes() throws Exception {
-    testReplaceVolume(false);
-  }
 }