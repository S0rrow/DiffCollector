diff --git a/repository/src/main/java/org/apache/hadoop/metadata/discovery/graph/GraphBackedDiscoveryService.java b/repository/src/main/java/org/apache/hadoop/metadata/discovery/graph/GraphBackedDiscoveryService.java
old mode 100755
new mode 100644
index 11ae66cba..b7ae8882f
--- a/repository/src/main/java/org/apache/hadoop/metadata/discovery/graph/GraphBackedDiscoveryService.java
+++ b/repository/src/main/java/org/apache/hadoop/metadata/discovery/graph/GraphBackedDiscoveryService.java
@@ -19,12 +19,8 @@
 package org.apache.hadoop.metadata.discovery.graph;
 
 import com.thinkaurelius.titan.core.TitanGraph;
-import com.thinkaurelius.titan.core.TitanIndexQuery;
 import com.thinkaurelius.titan.core.TitanProperty;
 import com.thinkaurelius.titan.core.TitanVertex;
-import com.tinkerpop.blueprints.Vertex;
-import org.apache.hadoop.metadata.GraphTransaction;
-import org.apache.hadoop.metadata.MetadataServiceClient;
 import org.apache.hadoop.metadata.discovery.DiscoveryException;
 import org.apache.hadoop.metadata.discovery.DiscoveryService;
 import org.apache.hadoop.metadata.query.Expressions;
@@ -34,33 +30,26 @@ import org.apache.hadoop.metadata.query.GremlinQueryResult;
 import org.apache.hadoop.metadata.query.GremlinTranslator;
 import org.apache.hadoop.metadata.query.QueryParser;
 import org.apache.hadoop.metadata.query.QueryProcessor;
-import org.apache.hadoop.metadata.repository.Constants;
 import org.apache.hadoop.metadata.repository.MetadataRepository;
 import org.apache.hadoop.metadata.repository.graph.GraphProvider;
-import org.codehaus.jettison.json.JSONArray;
-import org.codehaus.jettison.json.JSONException;
-import org.codehaus.jettison.json.JSONObject;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import scala.util.Either;
 import scala.util.parsing.combinator.Parsers;
 
 import javax.inject.Inject;
-import javax.inject.Singleton;
 import javax.script.Bindings;
 import javax.script.ScriptEngine;
 import javax.script.ScriptEngineManager;
 import javax.script.ScriptException;
 import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 
 /**
  * Graph backed implementation of Search.
  */
-@Singleton
 public class GraphBackedDiscoveryService implements DiscoveryService {
 
     private static final Logger LOG = LoggerFactory.getLogger(GraphBackedDiscoveryService.class);
@@ -68,8 +57,6 @@ public class GraphBackedDiscoveryService implements DiscoveryService {
     private final TitanGraph titanGraph;
     private final DefaultGraphPersistenceStrategy graphPersistenceStrategy;
 
-    public final static String SCORE = "score";
-
     @Inject
     GraphBackedDiscoveryService(GraphProvider<TitanGraph> graphProvider,
                                 MetadataRepository metadataRepository) throws DiscoveryException {
@@ -77,40 +64,6 @@ public class GraphBackedDiscoveryService implements DiscoveryService {
         this.graphPersistenceStrategy = new DefaultGraphPersistenceStrategy(metadataRepository);
     }
 
-    //Refer http://s3.thinkaurelius.com/docs/titan/0.5.4/index-backends.html for indexed query
-    //http://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query
-    // .html#query-string-syntax for query syntax
-    @Override
-    @GraphTransaction
-    public String searchByFullText(String query) throws DiscoveryException {
-        String graphQuery = String.format("v.%s:(%s)", Constants.ENTITY_TEXT_PROPERTY_KEY, query);
-        LOG.debug("Full text query: {}", graphQuery);
-        Iterator<TitanIndexQuery.Result<Vertex>> results =
-                        titanGraph.indexQuery(Constants.FULLTEXT_INDEX, graphQuery).vertices().iterator();
-        JSONArray response = new JSONArray();
-
-        while (results.hasNext()) {
-            TitanIndexQuery.Result<Vertex> result = results.next();
-            Vertex vertex = result.getElement();
-
-            JSONObject row = new JSONObject();
-            String guid = vertex.getProperty(Constants.GUID_PROPERTY_KEY);
-            if (guid != null) { //Filter non-class entities
-                try {
-                    row.put("guid", guid);
-                    row.put(MetadataServiceClient.TYPENAME, vertex.<String>getProperty(Constants.ENTITY_TYPE_PROPERTY_KEY));
-                    row.put(SCORE, result.getScore());
-                } catch (JSONException e) {
-                    LOG.error("Unable to create response", e);
-                    throw new DiscoveryException("Unable to create response");
-                }
-
-                response.put(row);
-            }
-        }
-        return response.toString();
-    }
-
     /**
      * Search using query DSL.
      *
@@ -118,36 +71,30 @@ public class GraphBackedDiscoveryService implements DiscoveryService {
      * @return JSON representing the type and results.
      */
     @Override
-    @GraphTransaction
     public String searchByDSL(String dslQuery) throws DiscoveryException {
-        LOG.info("Executing dsl query={}", dslQuery);
-        GremlinQueryResult queryResult = evaluate(dslQuery);
-        return queryResult.toJson();
-    }
-
-    public GremlinQueryResult evaluate(String dslQuery) throws DiscoveryException {
         LOG.info("Executing dsl query={}", dslQuery);
         try {
             QueryParser queryParser = new QueryParser();
             Either<Parsers.NoSuccess, Expressions.Expression> either = queryParser.apply(dslQuery);
             if (either.isRight()) {
                 Expressions.Expression expression = either.right().get();
-                return evaluate(expression);
+                GremlinQueryResult queryResult = evaluate(expression);
+                return queryResult.toJson();
             }
         } catch (Exception e) { // unable to catch ExpressionException
-            throw new DiscoveryException("Invalid expression : " + dslQuery, e);
+            throw new DiscoveryException("Invalid expression : " + dslQuery);
         }
 
         throw new DiscoveryException("Invalid expression : " + dslQuery);
     }
 
-    public GremlinQueryResult evaluate(Expressions.Expression expression) {
+    private GremlinQueryResult evaluate(Expressions.Expression expression) {
         Expressions.Expression validatedExpression = QueryProcessor.validate(expression);
         GremlinQuery gremlinQuery =
                 new GremlinTranslator(validatedExpression, graphPersistenceStrategy).translate();
-        LOG.debug("Query = {}", validatedExpression);
-        LOG.debug("Expression Tree = {}", validatedExpression.treeString());
-        LOG.debug("Gremlin Query = {}", gremlinQuery.queryStr());
+        LOG.debug("Query = " + validatedExpression);
+        LOG.debug("Expression Tree = " + validatedExpression.treeString());
+        LOG.debug("Gremlin Query = " + gremlinQuery.queryStr());
         return new GremlinEvaluator(gremlinQuery, graphPersistenceStrategy, titanGraph).evaluate();
     }
 
@@ -161,7 +108,6 @@ public class GraphBackedDiscoveryService implements DiscoveryService {
      * @throws org.apache.hadoop.metadata.discovery.DiscoveryException
      */
     @Override
-    @GraphTransaction
     public List<Map<String, String>> searchByGremlin(String gremlinQuery)
             throws DiscoveryException {
         LOG.info("Executing gremlin query={}", gremlinQuery);
@@ -172,48 +118,47 @@ public class GraphBackedDiscoveryService implements DiscoveryService {
 
         try {
             Object o = engine.eval(gremlinQuery, bindings);
-            return extractResult(o);
-        } catch (ScriptException se) {
-            throw new DiscoveryException(se);
-        }
-    }
-
-    private List<Map<String, String>> extractResult(Object o) throws DiscoveryException {
-        if (!(o instanceof List)) {
-            throw new DiscoveryException(String.format("Cannot process result %s", o.toString()));
-        }
+            if (!(o instanceof List)) {
+                throw new DiscoveryException(
+                        String.format("Cannot process gremlin result %s", o.toString()));
+            }
 
-        List l = (List) o;
-        List<Map<String, String>> result = new ArrayList<>();
-        for (Object r : l) {
-
-            Map<String, String> oRow = new HashMap<>();
-            if (r instanceof Map) {
-                @SuppressWarnings("unchecked")
-                Map<Object, Object> iRow = (Map) r;
-                for (Map.Entry e : iRow.entrySet()) {
-                    Object k = e.getKey();
-                    Object v = e.getValue();
-                    oRow.put(k.toString(), v.toString());
-                }
-            } else if (r instanceof TitanVertex) {
-                Iterable<TitanProperty> ps = ((TitanVertex) r).getProperties();
-                for (TitanProperty tP : ps) {
-                    String pName = tP.getPropertyKey().getName();
-                    Object pValue = ((TitanVertex) r).getProperty(pName);
-                    if (pValue != null) {
-                        oRow.put(pName, pValue.toString());
+            List l = (List) o;
+            List<Map<String, String>> result = new ArrayList<>();
+            for (Object r : l) {
+
+                Map<String, String> oRow = new HashMap<>();
+                if (r instanceof Map) {
+                    @SuppressWarnings("unchecked")
+                    Map<Object, Object> iRow = (Map) r;
+                    for (Map.Entry e : iRow.entrySet()) {
+                        Object k = e.getKey();
+                        Object v = e.getValue();
+                        oRow.put(k.toString(), v.toString());
+                    }
+                } else if (r instanceof TitanVertex) {
+                    Iterable<TitanProperty> ps = ((TitanVertex) r).getProperties();
+                    for (TitanProperty tP : ps) {
+                        String pName = tP.getPropertyKey().getName();
+                        Object pValue = ((TitanVertex) r).getProperty(pName);
+                        if (pValue != null) {
+                            oRow.put(pName, pValue.toString());
+                        }
                     }
+
+                } else if (r instanceof String) {
+                    oRow.put("", r.toString());
+                } else {
+                    throw new DiscoveryException(
+                            String.format("Cannot process gremlin result %s", o.toString()));
                 }
 
-            } else if (r instanceof String) {
-                oRow.put("", r.toString());
-            } else {
-                throw new DiscoveryException(String.format("Cannot process result %s", o.toString()));
+                result.add(oRow);
             }
+            return result;
 
-            result.add(oRow);
+        } catch (ScriptException se) {
+            throw new DiscoveryException(se);
         }
-        return result;
     }
 }