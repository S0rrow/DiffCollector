diff --git a/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/cluster/ClusterController.java b/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/cluster/ClusterController.java
index 1805b0d0f0..1a115cfb24 100644
--- a/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/cluster/ClusterController.java
+++ b/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/cluster/ClusterController.java
@@ -29,8 +29,8 @@ import org.apache.activemq.artemis.api.core.Interceptor;
 import org.apache.activemq.artemis.api.core.Pair;
 import org.apache.activemq.artemis.api.core.SimpleString;
 import org.apache.activemq.artemis.api.core.TransportConfiguration;
-import org.apache.activemq.artemis.api.core.client.ActiveMQClient;
 import org.apache.activemq.artemis.api.core.client.ClusterTopologyListener;
+import org.apache.activemq.artemis.api.core.client.ActiveMQClient;
 import org.apache.activemq.artemis.api.core.client.ServerLocator;
 import org.apache.activemq.artemis.core.client.impl.ClientSessionFactoryInternal;
 import org.apache.activemq.artemis.core.client.impl.ServerLocatorImpl;
@@ -45,27 +45,30 @@ import org.apache.activemq.artemis.core.protocol.core.impl.PacketImpl;
 import org.apache.activemq.artemis.core.protocol.core.impl.wireformat.ClusterConnectMessage;
 import org.apache.activemq.artemis.core.protocol.core.impl.wireformat.ClusterConnectReplyMessage;
 import org.apache.activemq.artemis.core.protocol.core.impl.wireformat.NodeAnnounceMessage;
+import org.apache.activemq.artemis.core.protocol.core.impl.wireformat.QuorumVoteMessage;
+import org.apache.activemq.artemis.core.protocol.core.impl.wireformat.QuorumVoteReplyMessage;
 import org.apache.activemq.artemis.core.protocol.core.impl.wireformat.ScaleDownAnnounceMessage;
 import org.apache.activemq.artemis.core.server.ActiveMQComponent;
 import org.apache.activemq.artemis.core.server.ActiveMQServer;
 import org.apache.activemq.artemis.core.server.ActiveMQServerLogger;
 import org.apache.activemq.artemis.core.server.cluster.qourum.QuorumManager;
+import org.apache.activemq.artemis.core.server.cluster.qourum.QuorumVoteHandler;
+import org.apache.activemq.artemis.core.server.cluster.qourum.Vote;
 import org.apache.activemq.artemis.core.server.impl.Activation;
 import org.apache.activemq.artemis.spi.core.remoting.Acceptor;
-import org.jboss.logging.Logger;
 
 /**
  * used for creating and managing cluster control connections for each cluster connection and the replication connection
  */
 public class ClusterController implements ActiveMQComponent {
 
-   private static final Logger logger = Logger.getLogger(ClusterController.class);
+   private static final boolean isTrace = ActiveMQServerLogger.LOGGER.isTraceEnabled();
 
    private final QuorumManager quorumManager;
 
    private final ActiveMQServer server;
 
-   private final Map<SimpleString, ServerLocatorInternal> locators = new HashMap<>();
+   private Map<SimpleString, ServerLocatorInternal> locators = new HashMap<>();
 
    private SimpleString defaultClusterConnectionName;
 
@@ -88,9 +91,6 @@ public class ClusterController implements ActiveMQComponent {
 
    @Override
    public void start() throws Exception {
-      if (logger.isDebugEnabled()) {
-         logger.debug("Starting Cluster Controller " + System.identityHashCode(this) + " for server " + server);
-      }
       if (started)
          return;
       //set the default locator that will be used to connecting to the default cluster.
@@ -102,21 +102,16 @@ public class ClusterController implements ActiveMQComponent {
             ActiveMQServerLogger.LOGGER.noClusterConnectionForReplicationCluster();
             replicationLocator = defaultLocator;
          }
-      } else {
+      }
+      else {
          replicationLocator = defaultLocator;
       }
       //latch so we know once we are connected
       replicationClusterConnectedLatch = new CountDownLatch(1);
       //and add the quorum manager as a topology listener
-      if (defaultLocator != null) {
-         defaultLocator.addClusterTopologyListener(quorumManager);
-      }
-
-      if (quorumManager != null) {
-         //start the quorum manager
-         quorumManager.start();
-      }
-
+      defaultLocator.addClusterTopologyListener(quorumManager);
+      //start the quorum manager
+      quorumManager.start();
       started = true;
       //connect all the locators in a separate thread
       for (ServerLocatorInternal serverLocatorInternal : locators.values()) {
@@ -128,17 +123,13 @@ public class ClusterController implements ActiveMQComponent {
 
    @Override
    public void stop() throws Exception {
-      if (logger.isDebugEnabled()) {
-
-         logger.debug("Stopping Cluster Controller " + System.identityHashCode(this) + " for server " + this.server);
-      }
-      started = false;
       //close all the locators
       for (ServerLocatorInternal serverLocatorInternal : locators.values()) {
          serverLocatorInternal.close();
       }
       //stop the quorum manager
       quorumManager.stop();
+      started = false;
    }
 
    @Override
@@ -188,21 +179,10 @@ public class ClusterController implements ActiveMQComponent {
       serverLocator.setConnectionTTL(config.getConnectionTTL());
       serverLocator.setClientFailureCheckPeriod(config.getClientFailureCheckPeriod());
       //if the cluster isn't available we want to hang around until it is
-      serverLocator.setReconnectAttempts(config.getReconnectAttempts());
-      serverLocator.setInitialConnectAttempts(config.getInitialConnectAttempts());
-      serverLocator.setCallTimeout(config.getCallTimeout());
-      serverLocator.setCallFailoverTimeout(config.getCallFailoverTimeout());
-      serverLocator.setRetryInterval(config.getRetryInterval());
-      serverLocator.setRetryIntervalMultiplier(config.getRetryIntervalMultiplier());
-      serverLocator.setMaxRetryInterval(config.getMaxRetryInterval());
+      serverLocator.setReconnectAttempts(-1);
+      serverLocator.setInitialConnectAttempts(-1);
       //this is used for replication so need to use the server packet decoder
-      serverLocator.setProtocolManagerFactory(ActiveMQServerSideProtocolManagerFactory.getInstance(serverLocator, server.getStorageManager()));
-      serverLocator.setThreadPools(server.getThreadPool(), server.getScheduledPool());
-      try {
-         serverLocator.initialize();
-      } catch (Exception e) {
-         throw new IllegalStateException(e.getMessage(), e);
-      }
+      serverLocator.setProtocolManagerFactory(ActiveMQServerSideProtocolManagerFactory.getInstance());
       locators.put(name, serverLocator);
    }
 
@@ -212,9 +192,7 @@ public class ClusterController implements ActiveMQComponent {
     * @param listener
     */
    public void addClusterTopologyListenerForReplication(ClusterTopologyListener listener) {
-      if (replicationLocator != null) {
-         replicationLocator.addClusterTopologyListener(listener);
-      }
+      replicationLocator.addClusterTopologyListener(listener);
    }
 
    /**
@@ -259,7 +237,7 @@ public class ClusterController implements ActiveMQComponent {
     * @return the Cluster Control
     */
    public ClusterControl connectToNodeInCluster(ClientSessionFactoryInternal sf) {
-      sf.getServerLocator().setProtocolManagerFactory(ActiveMQServerSideProtocolManagerFactory.getInstance(sf.getServerLocator(), server.getStorageManager()));
+      sf.getServerLocator().setProtocolManagerFactory(ActiveMQServerSideProtocolManagerFactory.getInstance());
       return new ClusterControl(sf, server);
    }
 
@@ -316,10 +294,6 @@ public class ClusterController implements ActiveMQComponent {
       this.replicatedClusterName = new SimpleString(replicatedClusterName);
    }
 
-   public Map<SimpleString, ServerLocatorInternal> getLocators() {
-      return this.locators;
-   }
-
    /**
     * a handler for handling packets sent between the cluster.
     */
@@ -331,10 +305,10 @@ public class ClusterController implements ActiveMQComponent {
       private final ChannelHandler channelHandler;
       boolean authorized = false;
 
-      private ClusterControllerChannelHandler(Channel clusterChannel,
-                                              Acceptor acceptorUsed,
-                                              CoreRemotingConnection remotingConnection,
-                                              ChannelHandler channelHandler) {
+      public ClusterControllerChannelHandler(Channel clusterChannel,
+                                             Acceptor acceptorUsed,
+                                             CoreRemotingConnection remotingConnection,
+                                             ChannelHandler channelHandler) {
          this.clusterChannel = clusterChannel;
          this.acceptorUsed = acceptorUsed;
          this.remotingConnection = remotingConnection;
@@ -343,49 +317,39 @@ public class ClusterController implements ActiveMQComponent {
 
       @Override
       public void handlePacket(Packet packet) {
-         if (!isStarted()) {
-            if (channelHandler != null) {
-               channelHandler.handlePacket(packet);
-            }
-            return;
-         }
-
          if (!authorized) {
             if (packet.getType() == PacketImpl.CLUSTER_CONNECT) {
                ClusterConnection clusterConnection = acceptorUsed.getClusterConnection();
 
-               //if this acceptor isn't associated with a cluster connection use the default
+               //if this acceptor isnt associated with a cluster connection use the default
                if (clusterConnection == null) {
                   clusterConnection = server.getClusterManager().getDefaultConnection(null);
                }
 
-               //if there is no default cluster connection then just ignore the packet with a log message
-               if (clusterConnection == null) {
-                  ActiveMQServerLogger.LOGGER.failedToFindClusterConnection(packet.toString());
-                  return;
-               }
-
                ClusterConnectMessage msg = (ClusterConnectMessage) packet;
 
                if (server.getConfiguration().isSecurityEnabled() && !clusterConnection.verify(msg.getClusterUser(), msg.getClusterPassword())) {
                   clusterChannel.send(new ClusterConnectReplyMessage(false));
-               } else {
+               }
+               else {
                   authorized = true;
                   clusterChannel.send(new ClusterConnectReplyMessage(true));
                }
             }
-         } else {
+         }
+         else {
             if (packet.getType() == PacketImpl.NODE_ANNOUNCE) {
                NodeAnnounceMessage msg = (NodeAnnounceMessage) packet;
 
                Pair<TransportConfiguration, TransportConfiguration> pair;
                if (msg.isBackup()) {
                   pair = new Pair<>(null, msg.getConnector());
-               } else {
+               }
+               else {
                   pair = new Pair<>(msg.getConnector(), msg.getBackupConnector());
                }
-               if (logger.isTraceEnabled()) {
-                  logger.trace("Server " + server + " receiving nodeUp from NodeID=" + msg.getNodeID() + ", pair=" + pair);
+               if (isTrace) {
+                  ActiveMQServerLogger.LOGGER.trace("Server " + server + " receiving nodeUp from NodeID=" + msg.getNodeID() + ", pair=" + pair);
                }
 
                if (acceptorUsed != null) {
@@ -393,21 +357,30 @@ public class ClusterController implements ActiveMQComponent {
                   if (clusterConn != null) {
                      String scaleDownGroupName = msg.getScaleDownGroupName();
                      clusterConn.nodeAnnounced(msg.getCurrentEventID(), msg.getNodeID(), msg.getBackupGroupName(), scaleDownGroupName, pair, msg.isBackup());
-                  } else {
-                     logger.debug("Cluster connection is null on acceptor = " + acceptorUsed);
                   }
-               } else {
-                  logger.debug("there is no acceptor used configured at the CoreProtocolManager " + this);
+                  else {
+                     ActiveMQServerLogger.LOGGER.debug("Cluster connection is null on acceptor = " + acceptorUsed);
+                  }
                }
-            } else if (packet.getType() == PacketImpl.QUORUM_VOTE) {
-               quorumManager.handleQuorumVote(clusterChannel, packet);
-            } else if (packet.getType() == PacketImpl.SCALEDOWN_ANNOUNCEMENT) {
+               else {
+                  ActiveMQServerLogger.LOGGER.debug("there is no acceptor used configured at the CoreProtocolManager " + this);
+               }
+            }
+            else if (packet.getType() == PacketImpl.QUORUM_VOTE) {
+               QuorumVoteMessage quorumVoteMessage = (QuorumVoteMessage) packet;
+               QuorumVoteHandler voteHandler = quorumManager.getVoteHandler(quorumVoteMessage.getHandler());
+               quorumVoteMessage.decode(voteHandler);
+               Vote vote = quorumManager.vote(quorumVoteMessage.getHandler(), quorumVoteMessage.getVote());
+               clusterChannel.send(new QuorumVoteReplyMessage(quorumVoteMessage.getHandler(), vote));
+            }
+            else if (packet.getType() == PacketImpl.SCALEDOWN_ANNOUNCEMENT) {
                ScaleDownAnnounceMessage message = (ScaleDownAnnounceMessage) packet;
                //we don't really need to check as it should always be true
                if (server.getNodeID().equals(message.getTargetNodeId())) {
                   server.addScaledDownNode(message.getScaledDownNodeId());
                }
-            } else if (channelHandler != null) {
+            }
+            else if (channelHandler != null) {
                channelHandler.handlePacket(packet);
             }
          }
@@ -420,29 +393,23 @@ public class ClusterController implements ActiveMQComponent {
     */
    private final class ConnectRunnable implements Runnable {
 
-      private final ServerLocatorInternal serverLocator;
+      private ServerLocatorInternal serverLocator;
 
-      private ConnectRunnable(ServerLocatorInternal serverLocator) {
+      public ConnectRunnable(ServerLocatorInternal serverLocator) {
          this.serverLocator = serverLocator;
       }
 
       @Override
       public void run() {
          try {
-            if (started) {
-               serverLocator.connect();
-               if (serverLocator == replicationLocator) {
-                  replicationClusterConnectedLatch.countDown();
-               }
+            serverLocator.connect();
+            if (serverLocator == replicationLocator) {
+               replicationClusterConnectedLatch.countDown();
             }
-         } catch (ActiveMQException e) {
-            if (!started) {
+         }
+         catch (ActiveMQException e) {
+            if (!started)
                return;
-            }
-            if (logger.isDebugEnabled()) {
-
-               logger.debug("retry on Cluster Controller " + System.identityHashCode(ClusterController.this) + " server = " + server);
-            }
             server.getScheduledPool().schedule(this, serverLocator.getRetryInterval(), TimeUnit.MILLISECONDS);
          }
       }
@@ -452,8 +419,4 @@ public class ClusterController implements ActiveMQComponent {
       return this.replicationLocator;
    }
 
-   public ServerLocator getServerLocator(SimpleString name) {
-      return locators.get(name);
-   }
-
 }