diff --git a/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java b/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
index 6aeb2a7ab..7f52ff0d7 100644
--- a/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
+++ b/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
@@ -33,19 +33,13 @@ import java.util.List;
 import java.util.Map;
 
 import org.apache.aries.blueprint.BeanProcessor;
-import org.apache.aries.blueprint.ComponentDefinitionRegistry;
 import org.apache.aries.blueprint.ExtendedBlueprintContainer;
-import org.apache.aries.blueprint.Interceptor;
-import org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.CgLibProxyFactory;
-import org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.JdkProxyFactory;
 import org.apache.aries.blueprint.di.AbstractRecipe;
 import org.apache.aries.blueprint.di.Recipe;
-import org.apache.aries.blueprint.proxy.CgLibInterceptorWrapper;
 import org.apache.aries.blueprint.utils.ReflectionUtils;
 import org.osgi.service.blueprint.container.ComponentDefinitionException;
 import org.osgi.service.blueprint.container.ReifiedType;
 import org.osgi.service.blueprint.reflect.BeanMetadata;
-import org.osgi.service.blueprint.reflect.ComponentMetadata;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -500,40 +494,47 @@ public class BeanRecipe extends AbstractRecipe {
      * processed by every BeanProcessor in the chain before it.
      */
     private static class BeanCreatorChain implements BeanProcessor.BeanCreator {
-        public enum ChainType{Before,After};
         private BeanProcessor.BeanCreator parentBeanCreator;
         private BeanProcessor parentBeanProcessor;
         private BeanMetadata beanData;
-        private String beanName;        
-        private ChainType when;
+        private String beanName;
         public BeanCreatorChain(BeanProcessor.BeanCreator parentBeanCreator, 
                                 BeanProcessor parentBeanProcessor,
                                 BeanMetadata beanData,
-                                String beanName,
-                                ChainType when){
+                                String beanName){
             this.parentBeanCreator = parentBeanCreator;
             this.parentBeanProcessor = parentBeanProcessor;
             this.beanData = beanData;
             this.beanName = beanName;
-            this.when = when;
         }
 
         public Object getBean() {
             Object previousBean = parentBeanCreator.getBean();
-            Object processed = null;
-            switch(when){
-                case Before :
-                  processed = parentBeanProcessor.beforeInit(previousBean, beanName, parentBeanCreator, beanData);
-                  break;
-                case After:
-                  processed = parentBeanProcessor.afterInit(previousBean, beanName, parentBeanCreator, beanData);
-                  break;
-            }
-            return processed;
+            return parentBeanProcessor.beforeInit(previousBean, beanName, parentBeanCreator, beanData);
         }   
     }
-    
-    private Object runBeanProcPreInit(Object obj){
+        
+    @Override
+    protected Object internalCreate() throws ComponentDefinitionException {
+        
+        instantiateExplicitDependencies();
+
+        Object obj = getInstance();
+                
+        // check for init lifecycle method (if any)
+        Method initMethod = getInitMethod(obj);
+        
+        // check for destroy lifecycle method (if any)
+        getDestroyMethod(obj);
+        
+        // Add partially created object to the container
+//        if (initMethod == null) {
+            addPartialObject(obj);
+//        }
+
+        // inject properties
+        setProperties(obj);
+        
         String beanName = getName();
         BeanMetadata beanData = (BeanMetadata) blueprintContainer
           .getComponentDefinitionRegistry().getComponentDefinition(beanName);        
@@ -554,12 +555,9 @@ public class BeanRecipe extends AbstractRecipe {
         BeanProcessor.BeanCreator currentCreator = initialBeanCreator;
         for(BeanProcessor processor : processors){
             obj = processor.beforeInit(obj, getName(), currentCreator, beanData);
-            currentCreator = new BeanCreatorChain(currentCreator, processor, beanData, beanName, BeanCreatorChain.ChainType.Before);
+            currentCreator = new BeanCreatorChain(currentCreator, processor, beanData, beanName);
         }
-        return obj;
-    }
-    
-    private void runBeanProcInit(Method initMethod, Object obj){
+        
         // call init method
         if (initMethod != null) {
             try {
@@ -567,94 +565,7 @@ public class BeanRecipe extends AbstractRecipe {
             } catch (Throwable t) {
                 throw new ComponentDefinitionException("Unable to intialize bean " + getName(), getRealCause(t));
             }
-        }   
-    }
-    
-    private Object runBeanProcPostInit(Object obj){
-        String beanName = getName();
-        BeanMetadata beanData = (BeanMetadata) blueprintContainer
-          .getComponentDefinitionRegistry().getComponentDefinition(beanName);        
-        List<BeanProcessor> processors = blueprintContainer.getProcessors(BeanProcessor.class);
-        
-        //The start link of the chain, that provides the 
-        //original, unprocessed bean to the head of the chain.
-        BeanProcessor.BeanCreator initialBeanCreator = new BeanProcessor.BeanCreator() {            
-            public Object getBean() {                                
-                Object obj = getInstance();
-                //getinit, getdestroy, addpartial object don't need calling again.
-                //however, property injection does.
-                setProperties(obj);
-                //as this is the post init chain, new beans need to go thru 
-                //the pre-init chain, and then have init called, before 
-                //being passed along the post-init chain.
-                obj = runBeanProcPreInit(obj);
-                runBeanProcInit(getInitMethod(obj), obj);
-                return obj;
-            }
-        };
-
-        BeanProcessor.BeanCreator currentCreator = initialBeanCreator;
-        for(BeanProcessor processor : processors){
-            obj = processor.afterInit(obj, getName(), currentCreator, beanData);
-            currentCreator = new BeanCreatorChain(currentCreator, processor, beanData, beanName, BeanCreatorChain.ChainType.After);
         }
-        return obj;
-    }    
-    
-    private Object addInterceptors(Object original) throws ComponentDefinitionException{
-        
-        Object intercepted = null;
-        String beanName = getName();
-        ComponentDefinitionRegistry reg = blueprintContainer.getComponentDefinitionRegistry();
-        ComponentMetadata metaData = reg.getComponentDefinition(beanName);
-        List<Interceptor> interceptors = reg.getInterceptors(metaData); 
-        if(interceptors!=null && interceptors.size()>0){
-            try {
-                // Try load load a cglib class (to make sure it's actually available
-                getClass().getClassLoader().loadClass("net.sf.cglib.proxy.Enhancer");
-            } catch (Throwable t) {
-                throw new ComponentDefinitionException("Interceptors have been configured but cglib can not be used", t);
-            }            
-            
-            intercepted = CgLibInterceptorWrapper.createProxyObject(original.getClass().getClassLoader(), 
-                                                                metaData, 
-                                                                interceptors, 
-                                                                original, 
-                                                                original.getClass().getInterfaces());
-        }else{
-            intercepted = original;
-        }
-        return intercepted;
-    }
-        
-    @Override
-    protected Object internalCreate() throws ComponentDefinitionException {
-        
-        instantiateExplicitDependencies();
-
-        Object obj = getInstance();
-                
-        // check for init lifecycle method (if any)
-        Method initMethod = getInitMethod(obj);
-        
-        // check for destroy lifecycle method (if any)
-        getDestroyMethod(obj);
-        
-        // Add partially created object to the container
-//        if (initMethod == null) {
-            addPartialObject(obj);
-//        }
-
-        // inject properties
-        setProperties(obj);
-        
-        obj = runBeanProcPreInit(obj);
-        
-        runBeanProcInit(initMethod, obj);
-        
-        obj = runBeanProcPostInit(obj);
-        
-        obj = addInterceptors(obj);
         
         return obj;
     }