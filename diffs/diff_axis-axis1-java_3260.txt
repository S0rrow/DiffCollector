diff --git a/src/org/apache/axis/utils/BeanPropertyDescriptor.java b/src/org/apache/axis/utils/BeanPropertyDescriptor.java
index 0bcee00b3..d4a65b1d9 100644
--- a/src/org/apache/axis/utils/BeanPropertyDescriptor.java
+++ b/src/org/apache/axis/utils/BeanPropertyDescriptor.java
@@ -54,83 +54,118 @@
  */
 package org.apache.axis.utils;
 
-import java.lang.reflect.Array;
-import java.lang.reflect.InvocationTargetException;
-import java.beans.PropertyDescriptor;
-import java.beans.IndexedPropertyDescriptor;
+import java.io.ByteArrayOutputStream;
 
-import org.apache.axis.components.logger.LogFactory;
-import org.apache.commons.logging.Log;
+import org.apache.axis.utils.JavaUtils;
 
+import java.lang.reflect.Method;
+import java.beans.IntrospectionException;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import java.beans.Introspector;
+import java.beans.PropertyDescriptor;
+import java.lang.reflect.Field;
+import java.lang.reflect.Array;
+import java.lang.reflect.InvocationTargetException;
 
 /**
- * This class represents a field/property in a value type (a class with either
- * bean-style getters/setters or public fields).
- *
- * It is essentially a thin wrapper around the PropertyDescriptor from the
- * JavaBean utilities.  We wrap it with this class so that we can create
- * the subclass FieldPropertyDescriptor and access public fields (who
- * wouldn't have PropertyDescriptors normally) via the same interface.
- *
- * There are also some interesting tricks where indexed properties are
- * concerned, mostly involving the fact that we manage the arrays here
- * rather than relying on the value type class to do it itself.
- *
+ * This class is essentially a copy of the PropertyDescriptor information, except
+ * that the values in it can be modified.
+ * Updated this to include fields that don't have getter/setters.
  * @author Rich Scheuerle <scheu@us.ibm.com>
- * @author Glen Daniels (gdaniels@apache.org)
  **/
 public class BeanPropertyDescriptor
 {
     protected static Log log =
         LogFactory.getLog(BeanPropertyDescriptor.class.getName());
 
-    protected PropertyDescriptor myPD = null;
+    private String name = null;
+    private Method getter = null;
+    private Method setter = null;
+    private Method getterIndexed = null;
+    private Method setterIndexed = null;
+    private Field field = null;
+    private static final Object[] noArgs = new Object[] {};    
 
-    protected static final Object[] noArgs = new Object[] {};
-
-    /**
-     * Constructor (takes a PropertyDescriptor)
-     *
-     * @param pd
+    /** 
+     * Construct a BPD with getter/setter methods
+     * Both must be set
+     * @param String _name is the name of the property
+     * @param Method _getter is the accessor method
+     * @param Method _setter is the modifier method
      */
-    public BeanPropertyDescriptor(PropertyDescriptor pd) {
-        myPD = pd;
+    public BeanPropertyDescriptor(String _name,
+                                  Method _getter, 
+                                  Method _setter) {
+        name = _name;
+        getter = _getter;
+        setter = _setter;
+        if (_getter == null || _setter == null || _name == null) {
+            throw new IllegalArgumentException();
+        }
     }
 
-    /**
-     * Protected constructor for use by our children
+    /** 
+     * Construct a BPD with getter/setter methods for
+     * an indexed property.  All params must be set.
+     * @param String _name is the name of the property
+     * @param Method _getter is the accessor method
+     * @param Method _setter is the modifier method
+     * @param Method _getterIndexed is the accessor method
+     * @param Method _setterIndexed is the modifier method
      */
-    protected BeanPropertyDescriptor() {
+    public BeanPropertyDescriptor(String _name,
+                                  Method _getter, 
+                                  Method _setter,
+                                  Method _getterIndexed,
+                                  Method _setterIndexed) {
+        this(_name, _getter, _setter);
+        getterIndexed = _getterIndexed;
+        setterIndexed = _setterIndexed;
+        if (_getterIndexed == null || _setterIndexed == null) {
+            throw new IllegalArgumentException();
+        }
     }
 
-    /**
-     * Get our property name.
+    /** 
+     * Construct a BPD with a field
+     * Both must be set
+     * @param String _name is the name of the property
+     * @param Field _field is the name of the public instance field
      */
-    public String getName(){
-        return myPD.getName();
+    public BeanPropertyDescriptor(String _name,
+                                  Field _field) {
+        name = _name;
+        field = _field;
+        if (_field == null || _name == null) {
+            throw new IllegalArgumentException();
+        }
     }
-
-    /**
+    
+    /** 
      * Query if property is readable
      * @return true if readable
      */
     public boolean isReadable() {
-        return (myPD.getReadMethod() != null);
+        return (getter != null ||
+                field != null); 
     }
-
-    /**
+    /** 
      * Query if property is writeable
      * @return true if writeable
      */
     public boolean isWriteable() {
-        return (myPD.getWriteMethod() != null);
+        return (setter != null ||
+                field != null);
     }
     /** 
      * Query if property is indexed.
+     * Indexed properties require valid setters/getters
      * @return true if indexed methods exist
      */
     public boolean isIndexed() {
-        return (myPD instanceof IndexedPropertyDescriptor);
+        return (getterIndexed != null && 
+                setterIndexed != null);
     }
 
     /**
@@ -140,22 +175,24 @@ public class BeanPropertyDescriptor
      */
     public Object get(Object obj) 
         throws InvocationTargetException, IllegalAccessException {
-        if (myPD.getReadMethod() != null) {
-            return myPD.getReadMethod().invoke(obj, noArgs);
+        if (getter != null) {
+            return getter.invoke(obj, noArgs);
+        } else if (field != null) {
+            return field.get(obj);
         }
-        throw new IllegalAccessException(JavaUtils.getMessage("badGetter00"));
+        return null;
     }
     /**
      * Set the property value
      * @param obj is the object
-     * @param newValue is the new value
+     * @param is the new value
      */
     public void set(Object obj, Object newValue) 
         throws InvocationTargetException, IllegalAccessException {
-        if (myPD.getWriteMethod() != null) {
-            myPD.getWriteMethod().invoke(obj, new Object[] {newValue});
-        } else {
-            throw new IllegalAccessException(JavaUtils.getMessage("badSetter00"));
+        if (setter != null) {
+            setter.invoke(obj, new Object[] {newValue});
+        } else if (field != null) {
+            field.set(obj, newValue);
         }
     }    
     /** 
@@ -169,13 +206,9 @@ public class BeanPropertyDescriptor
         if (!isIndexed()) {
             return Array.get(get(obj), i);
         } else {
-            IndexedPropertyDescriptor id = (IndexedPropertyDescriptor)myPD;
-            return id.getIndexedReadMethod().invoke(obj,
-                                                    new Object[] {
-                                                        new Integer(i)});
+            return getterIndexed.invoke(obj, new Object[] { new Integer(i)});
         }
     }
-
     /**
      * Set an indexed property value
      * @param obj is the object
@@ -184,27 +217,22 @@ public class BeanPropertyDescriptor
      */
     public void set(Object obj, int i, Object newValue) 
         throws InvocationTargetException, IllegalAccessException {
-        // Set the new value
-        if (isIndexed()) {
-            IndexedPropertyDescriptor id = (IndexedPropertyDescriptor)myPD;
-            growArrayToSize(obj, id.getIndexedPropertyType(), i);
-            id.getIndexedWriteMethod().invoke(obj,
-                                              new Object[] {
-                                                  new Integer(i), newValue});
-        } else {
-            Array.set(get(obj), i, newValue);
-        }
-    }
 
-    protected void growArrayToSize(Object obj, Class componentType, int i)
-            throws InvocationTargetException, IllegalAccessException {
         // Get the entire array and make sure it is large enough
         Object array = get(obj);
         if (array == null || Array.getLength(array) <= i) {
             // Construct a larger array of the same type
-            Object newArray =
-                    Array.newInstance(componentType,i+1);
-
+            Class componentType = null;
+            if (getterIndexed != null) {
+                componentType = getterIndexed.getReturnType();
+            } else if (getter != null) {
+                componentType = getter.getReturnType().getComponentType();
+            } else {
+                componentType = field.getType().getComponentType();
+            }
+            Object newArray = 
+                Array.newInstance(componentType,i+1);
+            
             // Set the object to use the larger array
             set(obj, newArray);
 
@@ -217,6 +245,21 @@ public class BeanPropertyDescriptor
                 set(obj, index, Array.get(array, index));
             }
         }
+        
+        // Set the new value
+        if (isIndexed()) {
+            setterIndexed.invoke(obj, new Object[] {new Integer(i), newValue});
+        } else {
+            Array.set(get(obj), i, newValue);
+        }
+    }    
+
+    /**
+     * Get the name of a property
+     * @return String name of the property
+     */     
+    public String getName() {
+        return name;
     }
 
     /**
@@ -225,9 +268,30 @@ public class BeanPropertyDescriptor
      */     
     public Class getType() {
         if (isIndexed()) {
-            return ((IndexedPropertyDescriptor)myPD).getIndexedPropertyType();
+            return getterIndexed.getReturnType();
+        } else if (getter != null) {
+            return getter.getReturnType();
         } else {
-            return myPD.getPropertyType();
+            return field.getType();
         }
     }
+
+    /**
+     * Get the read Method.
+     * (This is package visibility so that Bean Utils
+     * can access this information.  The other methods
+     * should be used during serialization/deserialization.)
+     */     
+    Method getReadMethod() {
+        return getter;
+    }
+    /**
+     * Get the write Method.
+     * (This is package visibility so that Bean Utils
+     * can access this information.  The other methods
+     * should be used during serialization/deserialization.)
+     */   
+    Method getWriteMethod() {
+        return setter;
+    }
 }