diff --git a/webapp/src/main/java/org/apache/atlas/web/adapters/AtlasInstanceRestAdapters.java b/webapp/src/main/java/org/apache/atlas/web/adapters/AtlasInstanceRestAdapters.java
index 6cdf9d14f..dc42f1031 100644
--- a/webapp/src/main/java/org/apache/atlas/web/adapters/AtlasInstanceRestAdapters.java
+++ b/webapp/src/main/java/org/apache/atlas/web/adapters/AtlasInstanceRestAdapters.java
@@ -17,12 +17,11 @@
  */
 package org.apache.atlas.web.adapters;
 
-import java.util.List;
-
+import com.google.inject.Inject;
+import com.google.inject.Singleton;
 import org.apache.atlas.AtlasClient;
 import org.apache.atlas.AtlasErrorCode;
 import org.apache.atlas.AtlasException;
-import org.apache.atlas.CreateUpdateEntitiesResult;
 import org.apache.atlas.exception.AtlasBaseException;
 import org.apache.atlas.model.TypeCategory;
 import org.apache.atlas.model.instance.AtlasClassification;
@@ -31,10 +30,7 @@ import org.apache.atlas.model.instance.AtlasEntityHeader;
 import org.apache.atlas.model.instance.AtlasEntityWithAssociations;
 import org.apache.atlas.model.instance.EntityMutationResponse;
 import org.apache.atlas.model.instance.EntityMutations;
-import org.apache.atlas.model.instance.GuidMapping;
 import org.apache.atlas.services.MetadataService;
-import org.apache.atlas.type.AtlasClassificationType;
-import org.apache.atlas.type.AtlasEntityType;
 import org.apache.atlas.type.AtlasType;
 import org.apache.atlas.type.AtlasTypeRegistry;
 import org.apache.atlas.typesystem.IReferenceableInstance;
@@ -44,17 +40,11 @@ import org.apache.atlas.typesystem.ITypedStruct;
 import org.apache.atlas.typesystem.Referenceable;
 import org.apache.atlas.typesystem.Struct;
 import org.apache.atlas.typesystem.exception.EntityNotFoundException;
-import org.apache.atlas.typesystem.exception.TraitNotFoundException;
 import org.apache.atlas.typesystem.exception.TypeNotFoundException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Iterator;
-import com.google.inject.Inject;
-import com.google.inject.Singleton;
-import java.util.Map;
+import java.util.List;
 
 @Singleton
 public class AtlasInstanceRestAdapters {
@@ -70,25 +60,22 @@ public class AtlasInstanceRestAdapters {
     @Inject
     private MetadataService metadataService;
 
-    public ITypedReferenceableInstance[] getITypedReferenceables(Collection<AtlasEntity> entities) throws AtlasBaseException {
+    public ITypedReferenceableInstance[] getITypedReferenceables(List<AtlasEntity> entities) throws AtlasBaseException {
         ITypedReferenceableInstance[] entitiesInOldFormat = new ITypedReferenceableInstance[entities.size()];
 
-        AtlasFormatConverter.ConverterContext ctx = new AtlasFormatConverter.ConverterContext();
-        for(Iterator<AtlasEntity> i = entities.iterator(); i.hasNext(); ) {
-            ctx.addEntity(i.next());
-        }
-
-        Iterator<AtlasEntity> entityIterator = entities.iterator();
         for (int i = 0; i < entities.size(); i++) {
-            ITypedReferenceableInstance typedInstance = getITypedReferenceable(entityIterator.next(), ctx);
+            ITypedReferenceableInstance typedInstance = getITypedReferenceable(entities.get(i));
             entitiesInOldFormat[i] = typedInstance;
         }
+
         return entitiesInOldFormat;
     }
 
-    public ITypedReferenceableInstance getITypedReferenceable(AtlasEntity entity, AtlasFormatConverter.ConverterContext ctx) throws AtlasBaseException {
-        Referenceable ref = getReferenceable(entity, ctx);
+    public ITypedReferenceableInstance getITypedReferenceable(AtlasEntity entity) throws AtlasBaseException {
+        AtlasFormatAdapter entityFormatter = instanceFormatters.getConverter(AtlasFormatConverters.VERSION_V2, AtlasFormatConverters.VERSION_V1, TypeCategory.ENTITY);
+        AtlasType entityType = typeRegistry.getType(entity.getTypeName());
 
+        Referenceable ref = (Referenceable) entityFormatter.convert(AtlasFormatConverters.VERSION_V2, AtlasFormatConverters.VERSION_V1, entityType, entity);
         try {
             return metadataService.getTypedReferenceableInstance(ref);
         } catch (AtlasException e) {
@@ -97,21 +84,20 @@ public class AtlasInstanceRestAdapters {
         }
     }
 
-    public Referenceable getReferenceable(AtlasEntity entity, final AtlasFormatConverter.ConverterContext ctx) throws AtlasBaseException {
-        AtlasFormatConverter converter  = instanceFormatters.getConverter(TypeCategory.ENTITY);
-        AtlasType            entityType = typeRegistry.getType(entity.getTypeName());
-        Referenceable        ref        = (Referenceable)converter.fromV2ToV1(entity, entityType, ctx);
+    public Referenceable getReferenceable(AtlasEntity entity) throws AtlasBaseException {
+        AtlasFormatAdapter entityFormatter = instanceFormatters.getConverter(AtlasFormatConverters.VERSION_V2, AtlasFormatConverters.VERSION_V1, TypeCategory.ENTITY);
+        AtlasType entityType = typeRegistry.getType(entity.getTypeName());
 
-        return ref;
+        return (Referenceable) entityFormatter.convert(AtlasFormatConverters.VERSION_V2, AtlasFormatConverters.VERSION_V1, entityType, entity);
     }
 
     public ITypedStruct getTrait(AtlasClassification classification) throws AtlasBaseException {
-        AtlasFormatConverter converter          = instanceFormatters.getConverter(TypeCategory.CLASSIFICATION);
-        AtlasType            classificationType = typeRegistry.getType(classification.getTypeName());
-        Struct               trait               = (Struct)converter.fromV2ToV1(classification, classificationType, new AtlasFormatConverter.ConverterContext());
+        AtlasFormatAdapter formatter = instanceFormatters.getConverter(AtlasFormatConverters.VERSION_V2, AtlasFormatConverters.VERSION_V1, TypeCategory.CLASSIFICATION);
+        AtlasType clsType = typeRegistry.getType(classification.getTypeName());
 
+        Struct ref = (Struct) formatter.convert(AtlasFormatConverters.VERSION_V2, AtlasFormatConverters.VERSION_V1, clsType, classification);
         try {
-            return metadataService.createTraitInstance(trait);
+            return metadataService.createTraitInstance(ref);
         } catch (AtlasException e) {
             LOG.error("Exception while getting a typed reference for the entity ", e);
             throw toAtlasBaseException(e);
@@ -119,51 +105,32 @@ public class AtlasInstanceRestAdapters {
     }
 
     public AtlasClassification getClassification(IStruct classification) throws AtlasBaseException {
-        AtlasFormatConverter converter          = instanceFormatters.getConverter(TypeCategory.CLASSIFICATION);
-        AtlasClassificationType classificationType = typeRegistry.getClassificationTypeByName(classification.getTypeName());
-        if (classificationType == null) {
-            throw new AtlasBaseException(AtlasErrorCode.TYPE_NAME_INVALID, TypeCategory.CLASSIFICATION.name(), classification.getTypeName());
-        }
-        AtlasClassification  ret                = (AtlasClassification)converter.fromV1ToV2(classification, classificationType, new AtlasFormatConverter.ConverterContext());
+        AtlasFormatAdapter formatter = instanceFormatters.getConverter(AtlasFormatConverters.VERSION_V1, AtlasFormatConverters.VERSION_V2, TypeCategory.CLASSIFICATION);
+        AtlasType clsType = typeRegistry.getType(classification.getTypeName());
 
-        return ret;
+        return (AtlasClassification) formatter.convert(AtlasFormatConverters.VERSION_V1, AtlasFormatConverters.VERSION_V2, clsType, classification);
     }
 
-    public Map<String, AtlasEntityWithAssociations> getAtlasEntity(IReferenceableInstance referenceable) throws AtlasBaseException {
-
-        AtlasFormatConverter converter  = instanceFormatters.getConverter(TypeCategory.ENTITY);
-        AtlasEntityType      entityType = typeRegistry.getEntityTypeByName(referenceable.getTypeName());
-
-        if (entityType == null) {
-            throw new AtlasBaseException(AtlasErrorCode.TYPE_NAME_INVALID, TypeCategory.ENTITY.name(), referenceable.getTypeName());
-        }
-
-        AtlasFormatConverter.ConverterContext ctx = new AtlasFormatConverter.ConverterContext();
+    public AtlasEntityWithAssociations getAtlasEntity(IReferenceableInstance referenceable) throws AtlasBaseException {
+        AtlasFormatAdapter entityFormatter = instanceFormatters.getConverter(AtlasFormatConverters.VERSION_V1, AtlasFormatConverters.VERSION_V2, TypeCategory.ENTITY);
+        AtlasType entityType = typeRegistry.getType(referenceable.getTypeName());
 
-        converter.fromV1ToV2(referenceable, entityType, ctx);
-
-        return ctx.getEntities();
+        return (AtlasEntityWithAssociations) entityFormatter.convert(AtlasFormatConverters.VERSION_V1, AtlasFormatConverters.VERSION_V2, entityType, referenceable);
     }
 
-    public static EntityMutationResponse toEntityMutationResponse(AtlasClient.EntityResult entityResult) {
-
-        CreateUpdateEntitiesResult result = new CreateUpdateEntitiesResult();
-        result.setEntityResult(entityResult);
-        return toEntityMutationResponse(result);
-    }
 
-    public static EntityMutationResponse toEntityMutationResponse(CreateUpdateEntitiesResult result) {
+    public static EntityMutationResponse toEntityMutationResponse(AtlasClient.EntityResult result) {
         EntityMutationResponse response = new EntityMutationResponse();
         for (String guid : result.getCreatedEntities()) {
             AtlasEntityHeader header = new AtlasEntityHeader();
             header.setGuid(guid);
-            response.addEntity(EntityMutations.EntityOperation.CREATE, header);
+            response.addEntity(EntityMutations.EntityOperation.CREATE_OR_UPDATE, header);
         }
 
-        for (String guid : result.getUpdatedEntities()) {
+        for (String guid : result.getUpdateEntities()) {
             AtlasEntityHeader header = new AtlasEntityHeader();
             header.setGuid(guid);
-            response.addEntity(EntityMutations.EntityOperation.UPDATE, header);
+            response.addEntity(EntityMutations.EntityOperation.CREATE_OR_UPDATE, header);
         }
 
         for (String guid : result.getDeletedEntities()) {
@@ -171,15 +138,11 @@ public class AtlasInstanceRestAdapters {
             header.setGuid(guid);
             response.addEntity(EntityMutations.EntityOperation.DELETE, header);
         }
-        GuidMapping guidMapping = result.getGuidMapping();
-        if(guidMapping != null) {
-            response.setGuidAssignments(guidMapping.getGuidAssignments());
-        }
         return response;
     }
 
     public static AtlasBaseException toAtlasBaseException(AtlasException e) {
-        if ( e instanceof EntityNotFoundException || e instanceof TraitNotFoundException) {
+        if ( e instanceof EntityNotFoundException) {
             return new AtlasBaseException(AtlasErrorCode.INSTANCE_GUID_NOT_FOUND, e);
         }
 