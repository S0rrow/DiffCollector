diff --git a/src/core/src/main/java/org/apache/accumulo/core/client/impl/ConnectorImpl.java b/src/core/src/main/java/org/apache/accumulo/core/client/impl/ConnectorImpl.java
index 0375c87d89..ba638d845d 100644
--- a/src/core/src/main/java/org/apache/accumulo/core/client/impl/ConnectorImpl.java
+++ b/src/core/src/main/java/org/apache/accumulo/core/client/impl/ConnectorImpl.java
@@ -1,19 +1,3 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
 package org.apache.accumulo.core.client.impl;
 
 import java.nio.ByteBuffer;
@@ -40,14 +24,16 @@ import org.apache.accumulo.core.security.Authorizations;
 import org.apache.accumulo.core.security.thrift.AuthInfo;
 import org.apache.accumulo.core.util.ArgumentChecker;
 
+
 public class ConnectorImpl extends Connector {
     private Instance instance;
     private AuthInfo credentials;
     private SecurityOperations secops = null;
     private TableOperations tableops = null;
     private InstanceOperations instanceops = null;
+
     
-/**
+    /**
      * 
      * Use {@link Instance#getConnector(String, byte[])
      * 
@@ -59,31 +45,33 @@ public class ConnectorImpl extends Connector {
      * @see Instance.getConnector(String user, byte[] password)
      * @deprecated Not for client use
      */
-    public ConnectorImpl(Instance instance, String user, byte[] password) throws AccumuloException, AccumuloSecurityException {
+	public ConnectorImpl(Instance instance, String user, byte[] password) throws AccumuloException, AccumuloSecurityException
+    {
         ArgumentChecker.notNull(instance, user, password);
         this.instance = instance;
         
-        // copy password so that user can clear it.... in future versions we can clear it...
+        //copy password so that user can clear it....  in future versions we can clear it... 
         byte[] passCopy = new byte[password.length];
         System.arraycopy(password, 0, passCopy, 0, password.length);
         this.credentials = new AuthInfo(user, ByteBuffer.wrap(password), instance.getInstanceID());
-        
+
         // hardcoded string for SYSTEM user since the definition is
         // in server code
         if (!user.equals("!SYSTEM")) {
             ServerClient.execute(instance, new ClientExec<ClientService.Iface>() {
                 @Override
                 public void execute(ClientService.Iface iface) throws Exception {
-                    iface.authenticateUser(null, credentials, credentials.user, credentials.password);
+                	iface.authenticateUser(null, credentials, credentials.user, credentials.password);
                 }
             });
         }
     }
     
-    private String getTableId(String tableName) throws TableNotFoundException {
-        String tableId = Tables.getTableId(instance, tableName);
-        if (Tables.getTableState(instance, tableId) == TableState.OFFLINE) throw new TableOfflineException(instance, tableId);
-        return tableId;
+    private String getTableId(String tableName) throws TableNotFoundException{
+    	String tableId = Tables.getTableId(instance, tableName);
+    	if(Tables.getTableState(instance, tableId) == TableState.OFFLINE)
+    		throw new TableOfflineException(instance, tableId);
+    	return tableId;
     }
     
     @Override
@@ -92,79 +80,83 @@ public class ConnectorImpl extends Connector {
     }
     
     @Override
-    public BatchScanner createBatchScanner(String tableName, Authorizations authorizations, int numQueryThreads) throws TableNotFoundException {
+    public BatchScanner createBatchScanner(String tableName, Authorizations authorizations, int numQueryThreads)
+    throws TableNotFoundException
+    {
         ArgumentChecker.notNull(tableName, authorizations);
         return new TabletServerBatchReader(instance, credentials, getTableId(tableName), authorizations, numQueryThreads);
     }
-    
+
     @Override
-    public BatchDeleter createBatchDeleter(String tableName, Authorizations authorizations, int numQueryThreads, long maxMemory, long maxLatency,
-            int maxWriteThreads) throws TableNotFoundException {
+    public BatchDeleter createBatchDeleter(String tableName, Authorizations authorizations, int numQueryThreads, long maxMemory, long maxLatency, int maxWriteThreads)
+    throws TableNotFoundException
+    {
         ArgumentChecker.notNull(tableName, authorizations);
-        return new TabletServerBatchDeleter(instance, credentials, getTableId(tableName), authorizations, numQueryThreads, maxMemory, maxLatency,
-                maxWriteThreads);
+        return new TabletServerBatchDeleter(instance, credentials, getTableId(tableName), authorizations, numQueryThreads, maxMemory, maxLatency, maxWriteThreads);
     }
     
     @Override
-    public BatchWriter createBatchWriter(String tableName, long maxMemory, long maxLatency, int maxWriteThreads) throws TableNotFoundException {
+    public BatchWriter createBatchWriter(String tableName, long maxMemory, long maxLatency, int maxWriteThreads) throws TableNotFoundException
+    {
         ArgumentChecker.notNull(tableName);
         return new BatchWriterImpl(instance, credentials, getTableId(tableName), maxMemory, maxLatency, maxWriteThreads);
     }
-    
+
     @Override
-    public MultiTableBatchWriter createMultiTableBatchWriter(long maxMemory, int maxLatency, int maxWriteThreads) {
+    public MultiTableBatchWriter createMultiTableBatchWriter(long maxMemory, int maxLatency, int maxWriteThreads)
+    {
         return new MultiTableBatchWriterImpl(instance, credentials, maxMemory, maxLatency, maxWriteThreads);
     }
-    
+
     @Override
-    public Scanner createScanner(String tableName, Authorizations authorizations) throws TableNotFoundException {
+    public Scanner createScanner(String tableName, Authorizations authorizations) throws TableNotFoundException
+    {
         ArgumentChecker.notNull(tableName, authorizations);
         return new ScannerImpl(instance, credentials, getTableId(tableName), authorizations);
     }
-    
-    /*
-     * (non-Javadoc)
-     * 
+
+    /* (non-Javadoc)
      * @see accumulo.core.client.Connector#whoami()
      */
     @Override
-    public String whoami() {
+    public String whoami()
+    {
         return credentials.user;
     }
-    
-    /*
-     * (non-Javadoc)
-     * 
+
+    /* (non-Javadoc)
      * @see accumulo.core.client.Connector#tableOperations()
      */
     @Override
-    public synchronized TableOperations tableOperations() {
-        if (tableops == null) tableops = new TableOperationsImpl(instance, credentials);
+    public synchronized TableOperations tableOperations()
+    {
+        if (tableops == null)
+            tableops = new TableOperationsImpl(instance, credentials);
         return tableops;
     }
-    
-    /*
-     * (non-Javadoc)
-     * 
+
+    /* (non-Javadoc)
      * @see accumulo.core.client.Connector#securityOperations()
      */
     @Override
-    public synchronized SecurityOperations securityOperations() {
-        if (secops == null) secops = new SecurityOperationsImpl(instance, credentials);
-        
+    public synchronized SecurityOperations securityOperations()
+    {
+        if (secops == null)
+            secops = new SecurityOperationsImpl(instance, credentials);
+
         return secops;
     }
     
-    /*
-     * (non-Javadoc)
-     * 
+    /* (non-Javadoc)
      * @see accumulo.core.client.Connector#instanceOperations()
      */
     @Override
-    public synchronized InstanceOperations instanceOperations() {
-        if (instanceops == null) instanceops = new InstanceOperations(instance, credentials);
-        
+    public synchronized InstanceOperations instanceOperations()
+    {
+        if (instanceops == null)
+            instanceops = new InstanceOperations(instance, credentials);
+
         return instanceops;
     }
-    
+
 }