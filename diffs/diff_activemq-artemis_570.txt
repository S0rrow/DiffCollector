diff --git a/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/protocol/core/impl/ActiveMQSessionContext.java b/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/protocol/core/impl/ActiveMQSessionContext.java
index f49a22a9d9..5279de2a79 100644
--- a/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/protocol/core/impl/ActiveMQSessionContext.java
+++ b/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/protocol/core/impl/ActiveMQSessionContext.java
@@ -49,18 +49,18 @@ import org.apache.activemq.artemis.core.protocol.core.ChannelHandler;
 import org.apache.activemq.artemis.core.protocol.core.CommandConfirmationHandler;
 import org.apache.activemq.artemis.core.protocol.core.CoreRemotingConnection;
 import org.apache.activemq.artemis.core.protocol.core.Packet;
-import org.apache.activemq.artemis.core.protocol.core.impl.wireformat.ActiveMQExceptionMessage;
 import org.apache.activemq.artemis.core.protocol.core.impl.wireformat.CreateQueueMessage;
 import org.apache.activemq.artemis.core.protocol.core.impl.wireformat.CreateSessionMessage;
 import org.apache.activemq.artemis.core.protocol.core.impl.wireformat.CreateSharedQueueMessage;
 import org.apache.activemq.artemis.core.protocol.core.impl.wireformat.DisconnectConsumerMessage;
+import org.apache.activemq.artemis.core.protocol.core.impl.wireformat.ActiveMQExceptionMessage;
 import org.apache.activemq.artemis.core.protocol.core.impl.wireformat.ReattachSessionMessage;
 import org.apache.activemq.artemis.core.protocol.core.impl.wireformat.ReattachSessionResponseMessage;
 import org.apache.activemq.artemis.core.protocol.core.impl.wireformat.RollbackMessage;
 import org.apache.activemq.artemis.core.protocol.core.impl.wireformat.SessionAcknowledgeMessage;
 import org.apache.activemq.artemis.core.protocol.core.impl.wireformat.SessionAddMetaDataMessageV2;
 import org.apache.activemq.artemis.core.protocol.core.impl.wireformat.SessionBindingQueryMessage;
-import org.apache.activemq.artemis.core.protocol.core.impl.wireformat.SessionBindingQueryResponseMessage_V3;
+import org.apache.activemq.artemis.core.protocol.core.impl.wireformat.SessionBindingQueryResponseMessage_V2;
 import org.apache.activemq.artemis.core.protocol.core.impl.wireformat.SessionCloseMessage;
 import org.apache.activemq.artemis.core.protocol.core.impl.wireformat.SessionConsumerCloseMessage;
 import org.apache.activemq.artemis.core.protocol.core.impl.wireformat.SessionConsumerFlowCreditMessage;
@@ -97,11 +97,9 @@ import org.apache.activemq.artemis.core.protocol.core.impl.wireformat.SessionXAS
 import org.apache.activemq.artemis.core.protocol.core.impl.wireformat.SessionXAStartMessage;
 import org.apache.activemq.artemis.spi.core.protocol.RemotingConnection;
 import org.apache.activemq.artemis.spi.core.remoting.Connection;
-import org.apache.activemq.artemis.spi.core.remoting.ReadyListener;
 import org.apache.activemq.artemis.spi.core.remoting.SessionContext;
 import org.apache.activemq.artemis.utils.TokenBucketLimiterImpl;
 import org.apache.activemq.artemis.utils.VersionLoader;
-import org.jboss.logging.Logger;
 
 import static org.apache.activemq.artemis.core.protocol.core.impl.PacketImpl.DISCONNECT_CONSUMER;
 import static org.apache.activemq.artemis.core.protocol.core.impl.PacketImpl.EXCEPTION;
@@ -111,31 +109,10 @@ import static org.apache.activemq.artemis.core.protocol.core.impl.PacketImpl.SES
 
 public class ActiveMQSessionContext extends SessionContext {
 
-   private static final Logger logger = Logger.getLogger(ActiveMQSessionContext.class);
-
    private final Channel sessionChannel;
    private final int serverVersion;
    private int confirmationWindow;
-   private String name;
-
-   protected Channel getSessionChannel() {
-      return sessionChannel;
-   }
-
-   protected String getName() {
-      return name;
-   }
-
-   @Override
-   public void resetName(String name) {
-      this.name = name;
-   }
-
-
-   protected int getConfirmationWindow() {
-      return confirmationWindow;
-
-   }
+   private final String name;
 
    public ActiveMQSessionContext(String name,
                                  RemotingConnection remotingConnection,
@@ -157,13 +134,7 @@ public class ActiveMQSessionContext extends SessionContext {
       }
    }
 
-   @Override
-   public int getReconnectID() {
-      return sessionChannel.getReconnectID();
-   }
-
    private final CommandConfirmationHandler confirmationHandler = new CommandConfirmationHandler() {
-      @Override
       public void commandConfirmed(final Packet packet) {
          if (packet.getType() == PacketImpl.SESS_SEND) {
             SessionSendMessage ssm = (SessionSendMessage) packet;
@@ -206,7 +177,6 @@ public class ActiveMQSessionContext extends SessionContext {
       sessionChannel.unlock();
    }
 
-   @Override
    public void cleanup() {
       sessionChannel.close();
 
@@ -220,13 +190,11 @@ public class ActiveMQSessionContext extends SessionContext {
       // nothing to be done here... Flow control here is done on the core side
    }
 
-   @Override
    public void setSendAcknowledgementHandler(final SendAcknowledgementHandler handler) {
       sessionChannel.setCommandConfirmationHandler(confirmationHandler);
       this.sendAckHandler = handler;
    }
 
-   @Override
    public void createSharedQueue(SimpleString address,
                                  SimpleString queueName,
                                  SimpleString filterString,
@@ -234,12 +202,10 @@ public class ActiveMQSessionContext extends SessionContext {
       sessionChannel.sendBlocking(new CreateSharedQueueMessage(address, queueName, filterString, durable, true), PacketImpl.NULL_RESPONSE);
    }
 
-   @Override
    public void deleteQueue(final SimpleString queueName) throws ActiveMQException {
       sessionChannel.sendBlocking(new SessionDeleteQueueMessage(queueName), PacketImpl.NULL_RESPONSE);
    }
 
-   @Override
    public ClientSession.QueueQuery queueQuery(final SimpleString queueName) throws ActiveMQException {
       SessionQueueQueryMessage request = new SessionQueueQueryMessage(queueName);
       SessionQueueQueryResponseMessage_V2 response = (SessionQueueQueryResponseMessage_V2) sessionChannel.sendBlocking(request, PacketImpl.SESS_QUEUEQUERY_RESP_V2);
@@ -247,12 +213,6 @@ public class ActiveMQSessionContext extends SessionContext {
       return response.toQueueQuery();
    }
 
-   @Override
-   public boolean isWritable(ReadyListener callback) {
-      return remotingConnection.isWritable(callback);
-   }
-
-   @Override
    public ClientConsumerInternal createConsumer(SimpleString queueName,
                                                 SimpleString filterString,
                                                 int windowSize,
@@ -276,16 +236,14 @@ public class ActiveMQSessionContext extends SessionContext {
       return new ClientConsumerImpl(session, consumerContext, queueName, filterString, browseOnly, calcWindowSize(windowSize), ackBatchSize, maxRate > 0 ? new TokenBucketLimiterImpl(maxRate, false) : null, executor, flowControlExecutor, this, queueInfo.toQueueQuery(), lookupTCCL());
    }
 
-   @Override
    public int getServerVersion() {
       return serverVersion;
    }
 
-   @Override
    public ClientSession.AddressQuery addressQuery(final SimpleString address) throws ActiveMQException {
-      SessionBindingQueryResponseMessage_V3 response = (SessionBindingQueryResponseMessage_V3) sessionChannel.sendBlocking(new SessionBindingQueryMessage(address), PacketImpl.SESS_BINDINGQUERY_RESP_V3);
+      SessionBindingQueryResponseMessage_V2 response = (SessionBindingQueryResponseMessage_V2) sessionChannel.sendBlocking(new SessionBindingQueryMessage(address), PacketImpl.SESS_BINDINGQUERY_RESP_V2);
 
-      return new AddressQueryImpl(response.isExists(), response.getQueueNames(), response.isAutoCreateJmsQueues(), response.isAutoCreateJmsTopics());
+      return new AddressQueryImpl(response.isExists(), response.getQueueNames(), response.isAutoCreateJmsQueues());
    }
 
    @Override
@@ -293,48 +251,39 @@ public class ActiveMQSessionContext extends SessionContext {
       sessionChannel.sendBlocking(new SessionConsumerCloseMessage(getConsumerID(consumer)), PacketImpl.NULL_RESPONSE);
    }
 
-   @Override
    public void sendConsumerCredits(final ClientConsumer consumer, final int credits) {
       sessionChannel.send(new SessionConsumerFlowCreditMessage(getConsumerID(consumer), credits));
    }
 
-   @Override
    public void forceDelivery(final ClientConsumer consumer, final long sequence) throws ActiveMQException {
       SessionForceConsumerDelivery request = new SessionForceConsumerDelivery(getConsumerID(consumer), sequence);
       sessionChannel.send(request);
    }
 
-   @Override
    public void simpleCommit() throws ActiveMQException {
       sessionChannel.sendBlocking(new PacketImpl(PacketImpl.SESS_COMMIT), PacketImpl.NULL_RESPONSE);
    }
 
-   @Override
    public void simpleRollback(boolean lastMessageAsDelivered) throws ActiveMQException {
       sessionChannel.sendBlocking(new RollbackMessage(lastMessageAsDelivered), PacketImpl.NULL_RESPONSE);
    }
 
-   @Override
    public void sessionStart() throws ActiveMQException {
       sessionChannel.send(new PacketImpl(PacketImpl.SESS_START));
    }
 
-   @Override
    public void sessionStop() throws ActiveMQException {
       sessionChannel.sendBlocking(new PacketImpl(PacketImpl.SESS_STOP), PacketImpl.NULL_RESPONSE);
    }
 
-   @Override
    public void addSessionMetadata(String key, String data) throws ActiveMQException {
       sessionChannel.sendBlocking(new SessionAddMetaDataMessageV2(key, data), PacketImpl.NULL_RESPONSE);
    }
 
-   @Override
    public void addUniqueMetaData(String key, String data) throws ActiveMQException {
       sessionChannel.sendBlocking(new SessionUniqueAddMetaDataMessage(key, data), PacketImpl.NULL_RESPONSE);
    }
 
-   @Override
    public void xaCommit(Xid xid, boolean onePhase) throws XAException, ActiveMQException {
       SessionXACommitMessage packet = new SessionXACommitMessage(xid, onePhase);
       SessionXAResponseMessage response = (SessionXAResponseMessage) sessionChannel.sendBlocking(packet, PacketImpl.SESS_XA_RESP);
@@ -343,12 +292,11 @@ public class ActiveMQSessionContext extends SessionContext {
          throw new XAException(response.getResponseCode());
       }
 
-      if (logger.isTraceEnabled()) {
-         logger.trace("finished commit on " + ClientSessionImpl.convert(xid) + " with response = " + response);
+      if (ActiveMQClientLogger.LOGGER.isTraceEnabled()) {
+         ActiveMQClientLogger.LOGGER.trace("finished commit on " + ClientSessionImpl.convert(xid) + " with response = " + response);
       }
    }
 
-   @Override
    public void xaEnd(Xid xid, int flags) throws XAException, ActiveMQException {
       Packet packet;
       if (flags == XAResource.TMSUSPEND) {
@@ -371,7 +319,6 @@ public class ActiveMQSessionContext extends SessionContext {
       }
    }
 
-   @Override
    public void sendProducerCreditsMessage(final int credits, final SimpleString address) {
       sessionChannel.send(new SessionRequestProducerCreditsMessage(credits, address));
    }
@@ -381,7 +328,6 @@ public class ActiveMQSessionContext extends SessionContext {
     *
     * @return
     */
-   @Override
    public boolean supportsLargeMessage() {
       return true;
    }
@@ -391,7 +337,6 @@ public class ActiveMQSessionContext extends SessionContext {
       return msgI.getEncodeSize();
    }
 
-   @Override
    public void sendFullMessage(MessageInternal msgI,
                                boolean sendBlocking,
                                SendAcknowledgementHandler handler,
@@ -421,27 +366,10 @@ public class ActiveMQSessionContext extends SessionContext {
                                     boolean sendBlocking,
                                     boolean lastChunk,
                                     byte[] chunk,
-                                    int reconnectID,
                                     SendAcknowledgementHandler messageHandler) throws ActiveMQException {
       final boolean requiresResponse = lastChunk && sendBlocking;
       final SessionSendContinuationMessage chunkPacket = new SessionSendContinuationMessage(msgI, chunk, !lastChunk, requiresResponse, messageBodySize, messageHandler);
 
-      if (requiresResponse) {
-         // When sending it blocking, only the last chunk will be blocking.
-         sessionChannel.sendBlocking(chunkPacket, reconnectID, PacketImpl.NULL_RESPONSE);
-      }
-      else {
-         sessionChannel.send(chunkPacket, reconnectID);
-      }
-
-      return chunkPacket.getPacketSize();
-   }
-
-   @Override
-   public int sendServerLargeMessageChunk(MessageInternal msgI, long messageBodySize, boolean sendBlocking, boolean lastChunk, byte[] chunk, SendAcknowledgementHandler messageHandler) throws ActiveMQException {
-      final boolean requiresResponse = lastChunk && sendBlocking;
-      final SessionSendContinuationMessage chunkPacket = new SessionSendContinuationMessage(msgI, chunk, !lastChunk, requiresResponse, messageBodySize, messageHandler);
-
       if (requiresResponse) {
          // When sending it blocking, only the last chunk will be blocking.
          sessionChannel.sendBlocking(chunkPacket, PacketImpl.NULL_RESPONSE);
@@ -453,7 +381,6 @@ public class ActiveMQSessionContext extends SessionContext {
       return chunkPacket.getPacketSize();
    }
 
-   @Override
    public void sendACK(boolean individual,
                        boolean block,
                        final ClientConsumer consumer,
@@ -474,19 +401,16 @@ public class ActiveMQSessionContext extends SessionContext {
       }
    }
 
-   @Override
    public void expireMessage(final ClientConsumer consumer, Message message) throws ActiveMQException {
       SessionExpireMessage messagePacket = new SessionExpireMessage(getConsumerID(consumer), message.getMessageID());
 
       sessionChannel.send(messagePacket);
    }
 
-   @Override
    public void sessionClose() throws ActiveMQException {
       sessionChannel.sendBlocking(new SessionCloseMessage(), PacketImpl.NULL_RESPONSE);
    }
 
-   @Override
    public void xaForget(Xid xid) throws XAException, ActiveMQException {
       SessionXAResponseMessage response = (SessionXAResponseMessage) sessionChannel.sendBlocking(new SessionXAForgetMessage(xid), PacketImpl.SESS_XA_RESP);
 
@@ -495,7 +419,6 @@ public class ActiveMQSessionContext extends SessionContext {
       }
    }
 
-   @Override
    public int xaPrepare(Xid xid) throws XAException, ActiveMQException {
       SessionXAPrepareMessage packet = new SessionXAPrepareMessage(xid);
 
@@ -509,7 +432,6 @@ public class ActiveMQSessionContext extends SessionContext {
       }
    }
 
-   @Override
    public Xid[] xaScan() throws ActiveMQException {
       SessionXAGetInDoubtXidsResponseMessage response = (SessionXAGetInDoubtXidsResponseMessage) sessionChannel.sendBlocking(new PacketImpl(PacketImpl.SESS_XA_INDOUBT_XIDS), PacketImpl.SESS_XA_INDOUBT_XIDS_RESP);
 
@@ -520,7 +442,6 @@ public class ActiveMQSessionContext extends SessionContext {
       return xidArray;
    }
 
-   @Override
    public void xaRollback(Xid xid, boolean wasStarted) throws ActiveMQException, XAException {
       SessionXARollbackMessage packet = new SessionXARollbackMessage(xid);
 
@@ -531,7 +452,6 @@ public class ActiveMQSessionContext extends SessionContext {
       }
    }
 
-   @Override
    public void xaStart(Xid xid, int flags) throws XAException, ActiveMQException {
       Packet packet;
       if (flags == XAResource.TMJOIN) {
@@ -556,21 +476,18 @@ public class ActiveMQSessionContext extends SessionContext {
       }
    }
 
-   @Override
    public boolean configureTransactionTimeout(int seconds) throws ActiveMQException {
       SessionXASetTimeoutResponseMessage response = (SessionXASetTimeoutResponseMessage) sessionChannel.sendBlocking(new SessionXASetTimeoutMessage(seconds), PacketImpl.SESS_XA_SET_TIMEOUT_RESP);
 
       return response.isOK();
    }
 
-   @Override
    public int recoverSessionTimeout() throws ActiveMQException {
       SessionXAGetTimeoutResponseMessage response = (SessionXAGetTimeoutResponseMessage) sessionChannel.sendBlocking(new PacketImpl(PacketImpl.SESS_XA_GET_TIMEOUT), PacketImpl.SESS_XA_GET_TIMEOUT_RESP);
 
       return response.getTimeoutSeconds();
    }
 
-   @Override
    public void createQueue(SimpleString address,
                            SimpleString queueName,
                            SimpleString filterString,
@@ -611,7 +528,6 @@ public class ActiveMQSessionContext extends SessionContext {
 
    }
 
-   @Override
    public void recreateSession(final String username,
                                final String password,
                                final int minLargeMessageSize,
@@ -620,7 +536,7 @@ public class ActiveMQSessionContext extends SessionContext {
                                final boolean autoCommitAcks,
                                final boolean preAcknowledge,
                                final SimpleString defaultAddress) throws ActiveMQException {
-      Packet createRequest = newCreateSession(username, password, minLargeMessageSize, xa, autoCommitSends, autoCommitAcks, preAcknowledge, defaultAddress);
+      Packet createRequest = new CreateSessionMessage(name, sessionChannel.getID(), VersionLoader.getVersion().getIncrementingVersion(), username, password, minLargeMessageSize, xa, autoCommitSends, autoCommitAcks, preAcknowledge, confirmationWindow, defaultAddress == null ? null : defaultAddress.toString());
       boolean retry;
       do {
          try {
@@ -648,17 +564,6 @@ public class ActiveMQSessionContext extends SessionContext {
       } while (retry && !session.isClosing());
    }
 
-   protected CreateSessionMessage newCreateSession(String username,
-                                                   String password,
-                                                   int minLargeMessageSize,
-                                                   boolean xa,
-                                                   boolean autoCommitSends,
-                                                   boolean autoCommitAcks,
-                                                   boolean preAcknowledge,
-                                                   SimpleString defaultAddress) {
-      return new CreateSessionMessage(name, sessionChannel.getID(), VersionLoader.getVersion().getIncrementingVersion(), username, password, minLargeMessageSize, xa, autoCommitSends, autoCommitAcks, preAcknowledge, confirmationWindow, defaultAddress == null ? null : defaultAddress.toString());
-   }
-
    @Override
    public void recreateConsumerOnServer(ClientConsumerInternal consumerInternal) throws ActiveMQException {
       ClientSession.QueueQuery queueInfo = consumerInternal.getQueueInfo();
@@ -690,12 +595,10 @@ public class ActiveMQSessionContext extends SessionContext {
       }
    }
 
-   @Override
    public void xaFailed(Xid xid) throws ActiveMQException {
       sendPacketWithoutLock(sessionChannel, new SessionXAAfterFailedMessage(xid));
    }
 
-   @Override
    public void restartSession() throws ActiveMQException {
       sendPacketWithoutLock(sessionChannel, new PacketImpl(PacketImpl.SESS_START));
    }
@@ -761,7 +664,6 @@ public class ActiveMQSessionContext extends SessionContext {
 
    class ClientSessionPacketHandler implements ChannelHandler {
 
-      @Override
       public void handlePacket(final Packet packet) {
          byte type = packet.getType();
 
@@ -822,9 +724,8 @@ public class ActiveMQSessionContext extends SessionContext {
       return ((ActiveMQConsumerContext) consumer.getConsumerContext()).getId();
    }
 
-   protected ClassLoader lookupTCCL() {
+   private ClassLoader lookupTCCL() {
       return AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {
-         @Override
          public ClassLoader run() {
             return Thread.currentThread().getContextClassLoader();
          }
@@ -832,7 +733,7 @@ public class ActiveMQSessionContext extends SessionContext {
 
    }
 
-   protected int calcWindowSize(final int windowSize) {
+   private int calcWindowSize(final int windowSize) {
       int clientWindowSize;
       if (windowSize == -1) {
          // No flow control - buffer can increase without bound! Only use with