diff --git a/webapp/src/main/java/org/apache/atlas/web/security/AtlasAbstractAuthenticationProvider.java b/webapp/src/main/java/org/apache/atlas/web/security/AtlasAbstractAuthenticationProvider.java
index e55d2cf92..595387aec 100644
--- a/webapp/src/main/java/org/apache/atlas/web/security/AtlasAbstractAuthenticationProvider.java
+++ b/webapp/src/main/java/org/apache/atlas/web/security/AtlasAbstractAuthenticationProvider.java
@@ -22,11 +22,7 @@ package org.apache.atlas.web.security;
 import java.util.ArrayList;
 import java.util.List;
 
-import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.security.UserGroupInformation;
-import org.apache.hadoop.security.*;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 import org.springframework.security.authentication.AuthenticationProvider;
 import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
 import org.springframework.security.core.Authentication;
@@ -37,7 +33,6 @@ import org.springframework.security.core.userdetails.UserDetails;
 
 public abstract class AtlasAbstractAuthenticationProvider implements
         AuthenticationProvider {
-    private static final Logger LOG = LoggerFactory.getLogger(AtlasAbstractAuthenticationProvider.class);
 
     @Override
     public boolean supports(Class<?> authentication) {
@@ -55,8 +50,9 @@ public abstract class AtlasAbstractAuthenticationProvider implements
         UsernamePasswordAuthenticationToken result = null;
         if (authentication != null && authentication.isAuthenticated()) {
             final List<GrantedAuthority> grantedAuths = getAuthorities(authentication
-                    .getName());
-            final UserDetails userDetails = new User(authentication.getName(), authentication.getCredentials().toString(),
+                    .getName().toString());
+            final UserDetails userDetails = new User(authentication.getName()
+                    .toString(), authentication.getCredentials().toString(),
                     grantedAuths);
             result = new UsernamePasswordAuthenticationToken(userDetails,
                     authentication.getCredentials(), grantedAuths);
@@ -71,7 +67,7 @@ public abstract class AtlasAbstractAuthenticationProvider implements
      * 
      */
     protected List<GrantedAuthority> getAuthorities(String username) {
-        final List<GrantedAuthority> grantedAuths = new ArrayList<>();
+        final List<GrantedAuthority> grantedAuths = new ArrayList<GrantedAuthority>();
         grantedAuths.add(new SimpleGrantedAuthority("DATA_SCIENTIST"));
         return grantedAuths;
     }
@@ -83,9 +79,10 @@ public abstract class AtlasAbstractAuthenticationProvider implements
         if (authentication != null && authentication.isAuthenticated()) {
 
             List<GrantedAuthority> grantedAuthsUGI = getAuthoritiesFromUGI(authentication
-                    .getName());
+                    .getName().toString());
 
-            final UserDetails userDetails = new User(authentication.getName(), authentication.getCredentials().toString(),
+            final UserDetails userDetails = new User(authentication.getName()
+                    .toString(), authentication.getCredentials().toString(),
                     grantedAuthsUGI);
             result = new UsernamePasswordAuthenticationToken(userDetails,
                     authentication.getCredentials(), grantedAuthsUGI);
@@ -95,9 +92,8 @@ public abstract class AtlasAbstractAuthenticationProvider implements
         return authentication;
     }
 
-    public static List<GrantedAuthority> getAuthoritiesFromUGI(String userName) {
+    public List<GrantedAuthority> getAuthoritiesFromUGI(String userName) {
         List<GrantedAuthority> grantedAuths = new ArrayList<GrantedAuthority>();
-
         UserGroupInformation ugi = UserGroupInformation.createRemoteUser(userName);
         if (ugi != null) {
             String[] userGroups = ugi.getGroupNames();
@@ -107,21 +103,6 @@ public abstract class AtlasAbstractAuthenticationProvider implements
                 }
             }
         }
-        // if group empty take groups from UGI LDAP-based group mapping
-        if (grantedAuths != null && grantedAuths.isEmpty()) {
-            try {
-                Configuration config = new Configuration();
-                Groups gp = new Groups(config);
-                List<String> userGroups = gp.getGroups(userName);
-                if (userGroups != null) {
-                    for (String group : userGroups) {
-                        grantedAuths.add(new SimpleGrantedAuthority(group));
-                    }
-                }
-            } catch (java.io.IOException e) {
-                LOG.error("Exception while fetching groups ", e);
-            }
-        }
         return grantedAuths;
     }
 