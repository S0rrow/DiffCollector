diff --git a/repository/src/main/java/org/apache/atlas/repository/audit/HBaseBasedAuditRepository.java b/repository/src/main/java/org/apache/atlas/repository/audit/HBaseBasedAuditRepository.java
index a22f42173..0ecbb3b3d 100644
--- a/repository/src/main/java/org/apache/atlas/repository/audit/HBaseBasedAuditRepository.java
+++ b/repository/src/main/java/org/apache/atlas/repository/audit/HBaseBasedAuditRepository.java
@@ -19,17 +19,13 @@
 package org.apache.atlas.repository.audit;
 
 import com.google.common.annotations.VisibleForTesting;
+import com.google.inject.Singleton;
 import org.apache.atlas.ApplicationProperties;
 import org.apache.atlas.AtlasException;
 import org.apache.atlas.EntityAuditEvent;
-import org.apache.atlas.annotation.ConditionalOnAtlasProperty;
-import org.apache.atlas.model.audit.EntityAuditEventV2;
-import org.apache.atlas.model.audit.EntityAuditEventV2.EntityAuditAction;
-import org.apache.atlas.exception.AtlasBaseException;
 import org.apache.atlas.ha.HAConfiguration;
 import org.apache.atlas.listener.ActiveStateChangeHandler;
 import org.apache.atlas.service.Service;
-import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.configuration.Configuration;
 import org.apache.commons.lang.StringUtils;
 import org.apache.hadoop.hbase.HBaseConfiguration;
@@ -45,64 +41,48 @@ import org.apache.hadoop.hbase.client.ResultScanner;
 import org.apache.hadoop.hbase.client.Scan;
 import org.apache.hadoop.hbase.client.Table;
 import org.apache.hadoop.hbase.filter.PageFilter;
-import org.apache.hadoop.hbase.io.compress.Compression;
-import org.apache.hadoop.hbase.io.encoding.DataBlockEncoding;
-import org.apache.hadoop.hbase.regionserver.BloomType;
 import org.apache.hadoop.hbase.util.Bytes;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.springframework.stereotype.Component;
 
-import javax.inject.Singleton;
 import java.io.Closeable;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Map;
 
 /**
  * HBase based repository for entity audit events
- * <p>
- * Table -> 1, ATLAS_ENTITY_EVENTS <br>
- * Key -> entity id + timestamp <br>
- * Column Family -> 1,dt <br>
- * Columns -> action, user, detail <br>
- * versions -> 1 <br>
- * <p>
- * Note: The timestamp in the key is assumed to be timestamp in milli seconds. Since the key is
- * entity id + timestamp, and only 1 version is kept, there can be just 1 audit event per entity
- * id + timestamp. This is ok for one atlas server. But if there are more than one atlas servers,
- * we should use server id in the key
+ * Table -> 1, ATLAS_ENTITY_EVENTS
+ * Key -> entity id + timestamp
+ * Column Family -> 1,dt
+ * Columns -> action, user, detail
+ * versions -> 1
+ *
+ * Note: The timestamp in the key is assumed to be timestamp in milli seconds. Since the key is entity id + timestamp,
+ * and only 1 version is kept, there can be just 1 audit event per entity id + timestamp. This is ok for one atlas server.
+ * But if there are more than one atlas servers, we should use server id in the key
  */
 @Singleton
-@Component
-@ConditionalOnAtlasProperty(property = "atlas.EntityAuditRepository.impl", isDefault = true)
 public class HBaseBasedAuditRepository implements Service, EntityAuditRepository, ActiveStateChangeHandler {
     private static final Logger LOG = LoggerFactory.getLogger(HBaseBasedAuditRepository.class);
 
     public static final String CONFIG_PREFIX = "atlas.audit";
     public static final String CONFIG_TABLE_NAME = CONFIG_PREFIX + ".hbase.tablename";
     public static final String DEFAULT_TABLE_NAME = "ATLAS_ENTITY_AUDIT_EVENTS";
-    public static final String CONFIG_PERSIST_ENTITY_DEFINITION = CONFIG_PREFIX + ".persistEntityDefinition";
 
-    public static final byte[] COLUMN_FAMILY = Bytes.toBytes("dt");
-    public static final byte[] COLUMN_ACTION = Bytes.toBytes("a");
-    public static final byte[] COLUMN_DETAIL = Bytes.toBytes("d");
-    public static final byte[] COLUMN_USER = Bytes.toBytes("u");
-    public static final byte[] COLUMN_DEFINITION = Bytes.toBytes("f");
+    private static final String FIELD_SEPARATOR = ":";
 
-    private static final String  AUDIT_REPOSITORY_MAX_SIZE_PROPERTY = "atlas.hbase.client.keyvalue.maxsize";
-    private static final String  AUDIT_EXCLUDE_ATTRIBUTE_PROPERTY   = "atlas.audit.hbase.entity";
-    private static final String  FIELD_SEPARATOR = ":";
-    private static final long    ATLAS_HBASE_KEYVALUE_DEFAULT_SIZE = 1024 * 1024;
-    private static Configuration APPLICATION_PROPERTIES = null;
+    public static final String CONFIG_PERSIST_ENTITY_DEFINITION = CONFIG_PREFIX + ".persistEntityDefinition";
 
-    private static boolean       persistEntityDefinition;
+    public static final byte[] COLUMN_FAMILY = Bytes.toBytes("dt");
+    public static final byte[] COLUMN_ACTION = Bytes.toBytes("action");
+    public static final byte[] COLUMN_DETAIL = Bytes.toBytes("detail");
+    public static final byte[] COLUMN_USER = Bytes.toBytes("user");
+    public static final byte[] COLUMN_DEFINITION = Bytes.toBytes("def");
 
-    private Map<String, List<String>> auditExcludedAttributesCache = new HashMap<>();
+    private static boolean persistEntityDefinition;
 
     static {
         try {
@@ -120,21 +100,18 @@ public class HBaseBasedAuditRepository implements Service, EntityAuditRepository
      * @throws AtlasException
      */
     @Override
-    public void putEventsV1(EntityAuditEvent... events) throws AtlasException {
-        putEventsV1(Arrays.asList(events));
+    public void putEvents(EntityAuditEvent... events) throws AtlasException {
+        putEvents(Arrays.asList(events));
     }
 
+    @Override
     /**
      * Add events to the event repository
      * @param events events to be added
      * @throws AtlasException
      */
-    @Override
-    public void putEventsV1(List<EntityAuditEvent> events) throws AtlasException {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("Putting {} events", events.size());
-        }
-
+    public void putEvents(List<EntityAuditEvent> events) throws AtlasException {
+        LOG.info("Putting {} events", events.size());
         Table table = null;
         try {
             table = connection.getTable(tableName);
@@ -158,146 +135,6 @@ public class HBaseBasedAuditRepository implements Service, EntityAuditRepository
         }
     }
 
-    @Override
-    public void putEventsV2(EntityAuditEventV2... events) throws AtlasBaseException {
-        putEventsV2(Arrays.asList(events));
-    }
-
-    @Override
-    public void putEventsV2(List<EntityAuditEventV2> events) throws AtlasBaseException {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("Putting {} events", events.size());
-        }
-
-        Table table = null;
-
-        try {
-            table          = connection.getTable(tableName);
-            List<Put> puts = new ArrayList<>(events.size());
-
-            for (EntityAuditEventV2 event : events) {
-                if (LOG.isDebugEnabled()) {
-                    LOG.debug("Adding entity audit event {}", event);
-                }
-
-                Put put = new Put(getKey(event.getEntityId(), event.getTimestamp()));
-
-                addColumn(put, COLUMN_ACTION, event.getAction());
-                addColumn(put, COLUMN_USER, event.getUser());
-                addColumn(put, COLUMN_DETAIL, event.getDetails());
-
-                if (persistEntityDefinition) {
-                    addColumn(put, COLUMN_DEFINITION, event.getEntity());
-                }
-
-                puts.add(put);
-            }
-
-            table.put(puts);
-        } catch (IOException e) {
-            throw new AtlasBaseException(e);
-        } finally {
-            try {
-                close(table);
-            } catch (AtlasException e) {
-                throw new AtlasBaseException(e);
-            }
-        }
-    }
-
-    @Override
-    public List<EntityAuditEventV2> listEventsV2(String entityId, String startKey, short n) throws AtlasBaseException {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("Listing events for entity id {}, starting timestamp {}, #records {}", entityId, startKey, n);
-        }
-
-        Table         table   = null;
-        ResultScanner scanner = null;
-
-        try {
-            table = connection.getTable(tableName);
-
-            /**
-             * Scan Details:
-             * In hbase, the events are stored in increasing order of timestamp. So, doing reverse scan to get the latest event first
-             * Page filter is set to limit the number of results returned.
-             * Stop row is set to the entity id to avoid going past the current entity while scanning
-             * small is set to true to optimise RPC calls as the scanner is created per request
-             */
-            Scan scan = new Scan().setReversed(true).setFilter(new PageFilter(n))
-                                  .setStopRow(Bytes.toBytes(entityId))
-                                  .setCaching(n)
-                                  .setSmall(true);
-
-            if (StringUtils.isEmpty(startKey)) {
-                //Set start row to entity id + max long value
-                byte[] entityBytes = getKey(entityId, Long.MAX_VALUE);
-                scan = scan.setStartRow(entityBytes);
-            } else {
-                scan = scan.setStartRow(Bytes.toBytes(startKey));
-            }
-
-            scanner = table.getScanner(scan);
-            List<EntityAuditEventV2> events = new ArrayList<>();
-
-            Result result;
-
-            //PageFilter doesn't ensure n results are returned. The filter is per region server.
-            //So, adding extra check on n here
-            while ((result = scanner.next()) != null && events.size() < n) {
-                EntityAuditEventV2 event = fromKeyV2(result.getRow());
-
-                //In case the user sets random start key, guarding against random events
-                if (!event.getEntityId().equals(entityId)) {
-                    continue;
-                }
-                event.setUser(getResultString(result, COLUMN_USER));
-                event.setAction(EntityAuditAction.valueOf(getResultString(result, COLUMN_ACTION)));
-                event.setDetails(getResultString(result, COLUMN_DETAIL));
-
-                if (persistEntityDefinition) {
-                    String colDef = getResultString(result, COLUMN_DEFINITION);
-
-                    if (colDef != null) {
-                        event.setEntityDefinition(colDef);
-                    }
-                }
-
-                events.add(event);
-            }
-
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Got events for entity id {}, starting timestamp {}, #records {}", entityId, startKey, events.size());
-            }
-
-            return events;
-        } catch (IOException e) {
-            throw new AtlasBaseException(e);
-        } finally {
-            try {
-                close(scanner);
-                close(table);
-            } catch (AtlasException e) {
-                throw new AtlasBaseException(e);
-            }
-        }
-    }
-
-    @Override
-    public List<Object> listEvents(String entityId, String startKey, short maxResults) throws AtlasBaseException {
-        List ret = listEventsV2(entityId, startKey, maxResults);
-
-        try {
-            if (CollectionUtils.isEmpty(ret)) {
-                ret = listEventsV1(entityId, startKey, maxResults);
-            }
-        } catch (AtlasException e) {
-            throw new AtlasBaseException(e);
-        }
-
-        return ret;
-    }
-
     private <T> void addColumn(Put put, byte[] columnName, T columnValue) {
         if (columnValue != null && !columnValue.toString().isEmpty()) {
             put.addColumn(COLUMN_FAMILY, columnName, Bytes.toBytes(columnValue.toString()));
@@ -319,12 +156,9 @@ public class HBaseBasedAuditRepository implements Service, EntityAuditRepository
      * @return list of events
      * @throws AtlasException
      */
-    public List<EntityAuditEvent> listEventsV1(String entityId, String startKey, short n)
+    public List<EntityAuditEvent> listEvents(String entityId, String startKey, short n)
             throws AtlasException {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("Listing events for entity id {}, starting timestamp {}, #records {}", entityId, startKey, n);
-        }
-
+        LOG.info("Listing events for entity id {}, starting timestamp {}, #records {}", entityId, startKey, n);
         Table table = null;
         ResultScanner scanner = null;
         try {
@@ -372,11 +206,7 @@ public class HBaseBasedAuditRepository implements Service, EntityAuditRepository
                 }
                 events.add(event);
             }
-
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Got events for entity id {}, starting timestamp {}, #records {}", entityId, startKey, events.size());
-            }
-
+            LOG.info("Got events for entity id {}, starting timestamp {}, #records {}", entityId, startKey, events.size());
             return events;
         } catch (IOException e) {
             throw new AtlasException(e);
@@ -386,52 +216,6 @@ public class HBaseBasedAuditRepository implements Service, EntityAuditRepository
         }
     }
 
-    @Override
-    public long repositoryMaxSize() {
-        long ret;
-        initApplicationProperties();
-
-        if (APPLICATION_PROPERTIES == null) {
-            ret = ATLAS_HBASE_KEYVALUE_DEFAULT_SIZE;
-        } else {
-            ret = APPLICATION_PROPERTIES.getLong(AUDIT_REPOSITORY_MAX_SIZE_PROPERTY, ATLAS_HBASE_KEYVALUE_DEFAULT_SIZE);
-        }
-
-        return ret;
-    }
-
-    @Override
-    public List<String> getAuditExcludeAttributes(String entityType) {
-        List<String> ret = null;
-
-        initApplicationProperties();
-
-        if (auditExcludedAttributesCache.containsKey(entityType)) {
-            ret = auditExcludedAttributesCache.get(entityType);
-        } else if (APPLICATION_PROPERTIES != null) {
-            String[] excludeAttributes = APPLICATION_PROPERTIES.getStringArray(AUDIT_EXCLUDE_ATTRIBUTE_PROPERTY + "." +
-                    entityType + "." +  "attributes.exclude");
-
-            if (excludeAttributes != null) {
-                ret = Arrays.asList(excludeAttributes);
-            }
-
-            auditExcludedAttributesCache.put(entityType, ret);
-        }
-
-        return ret;
-    }
-
-    private void initApplicationProperties() {
-        if (APPLICATION_PROPERTIES == null) {
-            try {
-                APPLICATION_PROPERTIES = ApplicationProperties.get();
-            } catch (AtlasException ex) {
-                // ignore
-            }
-        }
-    }
-
     private String getResultString(Result result, byte[] columnName) {
         byte[] rawValue = result.getValue(COLUMN_FAMILY, columnName);
         if ( rawValue != null) {
@@ -452,20 +236,6 @@ public class HBaseBasedAuditRepository implements Service, EntityAuditRepository
         return event;
     }
 
-    private EntityAuditEventV2 fromKeyV2(byte[] keyBytes) {
-        String             key   = Bytes.toString(keyBytes);
-        EntityAuditEventV2 event = new EntityAuditEventV2();
-
-        if (StringUtils.isNotEmpty(key)) {
-            String[] parts = key.split(FIELD_SEPARATOR);
-            event.setEntityId(parts[0]);
-            event.setTimestamp(Long.valueOf(parts[1]));
-            event.setEventKey(key);
-        }
-
-        return event;
-    }
-
     private void close(Closeable closeable) throws AtlasException {
         if (closeable != null) {
             try {
@@ -504,9 +274,6 @@ public class HBaseBasedAuditRepository implements Service, EntityAuditRepository
                 HTableDescriptor tableDescriptor = new HTableDescriptor(tableName);
                 HColumnDescriptor columnFamily = new HColumnDescriptor(COLUMN_FAMILY);
                 columnFamily.setMaxVersions(1);
-                columnFamily.setDataBlockEncoding(DataBlockEncoding.FAST_DIFF);
-                columnFamily.setCompressionType(Compression.Algorithm.GZ);
-                columnFamily.setBloomFilterType(BloomType.ROW);
                 tableDescriptor.addFamily(columnFamily);
                 admin.createTable(tableDescriptor);
             } else {
@@ -564,9 +331,4 @@ public class HBaseBasedAuditRepository implements Service, EntityAuditRepository
     public void instanceIsPassive() {
         LOG.info("Reacting to passive: No action for now.");
     }
-
-    @Override
-    public int getHandlerOrder() {
-        return HandlerOrder.HBASE_AUDIT_REPOSITORY.getOrder();
-    }
 }