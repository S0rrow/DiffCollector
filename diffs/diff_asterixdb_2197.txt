diff --git a/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/rules/FullTextContainsParameterCheckRule.java b/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/rules/FullTextContainsParameterCheckRule.java
index e589065819..74a40b8c9a 100644
--- a/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/rules/FullTextContainsParameterCheckRule.java
+++ b/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/rules/FullTextContainsParameterCheckRule.java
@@ -22,9 +22,7 @@ import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 
-import org.apache.asterix.om.base.AString;
-import org.apache.asterix.om.constants.AsterixConstantValue;
-import org.apache.asterix.om.functions.BuiltinFunctions;
+import org.apache.asterix.om.functions.AsterixBuiltinFunctions;
 import org.apache.asterix.om.types.ATypeTag;
 import org.apache.asterix.om.util.ConstantExpressionUtil;
 import org.apache.asterix.runtime.evaluators.functions.FullTextContainsDescriptor;
@@ -36,7 +34,6 @@ import org.apache.hyracks.algebricks.core.algebra.base.ILogicalOperator;
 import org.apache.hyracks.algebricks.core.algebra.base.IOptimizationContext;
 import org.apache.hyracks.algebricks.core.algebra.base.LogicalExpressionTag;
 import org.apache.hyracks.algebricks.core.algebra.expressions.AbstractFunctionCallExpression;
-import org.apache.hyracks.algebricks.core.algebra.expressions.ConstantExpression;
 import org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;
 import org.apache.hyracks.algebricks.core.algebra.operators.logical.AbstractBinaryJoinOperator;
 import org.apache.hyracks.algebricks.core.algebra.operators.logical.AbstractLogicalOperator;
@@ -52,13 +49,6 @@ public class FullTextContainsParameterCheckRule implements IAlgebraicRewriteRule
     // parameter name and its value
     HashMap<MutableObject<ILogicalExpression>, MutableObject<ILogicalExpression>> paramValueMap;
 
-    // the last expression position before the option argument in the arguments array
-    private static final int LAST_EXPRESSION_POS_BEFORE_OPTION = 1;
-    // The number of anticipated arguments for a full-text query when a user doesn't provide any option.
-    private static final int FULLTEXT_QUERY_WITHOUT_OPTION_NO_OF_ARGUMENTS = 2;
-    // The number of anticipated arguments for a full-text query when a user provide option(s) as a record.
-    private static final int FULLTEXT_QUERY_WITH_OPTION_NO_OF_ARGUMENTS = 3;
-
     @Override
     public boolean rewritePost(Mutable<ILogicalOperator> opRef, IOptimizationContext context)
             throws AlgebricksException {
@@ -102,19 +92,7 @@ public class FullTextContainsParameterCheckRule implements IAlgebraicRewriteRule
         AbstractFunctionCallExpression funcExpr = (AbstractFunctionCallExpression) expr;
         FunctionIdentifier fi = funcExpr.getFunctionIdentifier();
 
-        // Collects the correct number of arguments - it can be 2 if a user doesn't provide any option.
-        int numberOfCorrectArguments = 0;
-        String functionName = "";
-        if (fi == BuiltinFunctions.FULLTEXT_CONTAINS) {
-            numberOfCorrectArguments = FULLTEXT_QUERY_WITH_OPTION_NO_OF_ARGUMENTS;
-            functionName = BuiltinFunctions.FULLTEXT_CONTAINS.getName();
-        } else if (fi == BuiltinFunctions.FULLTEXT_CONTAINS_WO_OPTION) {
-            numberOfCorrectArguments = FULLTEXT_QUERY_WITHOUT_OPTION_NO_OF_ARGUMENTS;
-            functionName = BuiltinFunctions.FULLTEXT_CONTAINS_WO_OPTION.getName();
-        }
-
-        // If numberOfCorrectArguments is greater than zero, then this is a full-text search query.
-        if (numberOfCorrectArguments > 0) {
+        if (fi == AsterixBuiltinFunctions.FULLTEXT_CONTAINS) {
             // Don't need to check this operator again.
             context.addToDontApplySet(this, op);
 
@@ -122,26 +100,21 @@ public class FullTextContainsParameterCheckRule implements IAlgebraicRewriteRule
             List<Mutable<ILogicalExpression>> newExprs = new ArrayList<>();
 
             // The number of parameters should be three: exp1, exp2, and the option
-            if (oldExprs.size() != numberOfCorrectArguments) {
+            if (oldExprs.size() != 3) {
                 throw new AlgebricksException(
-                        functionName + " should have " + numberOfCorrectArguments + " parameters.");
+                        AsterixBuiltinFunctions.FULLTEXT_CONTAINS.getName() + " should have three parameters.");
             }
 
-            // The last expression before the option needs to be copied first.
-            for (int i = 0; i <= LAST_EXPRESSION_POS_BEFORE_OPTION; i++) {
+            // The last expression is a record that contains the parameters. That's why we deduct -1.
+            for (int i = 0; i < oldExprs.size() - 1; i++) {
                 newExprs.add(new MutableObject<ILogicalExpression>((ILogicalExpression) oldExprs.get(i).getValue()));
             }
 
             // Sanity check for the types of the first two parameters
-            checkFirstAndSecondParamter(oldExprs, functionName);
+            checkFirstAndSecondParamter(oldExprs);
 
             // Checks and transforms the actual full-text parameters.
-            if (numberOfCorrectArguments == FULLTEXT_QUERY_WITH_OPTION_NO_OF_ARGUMENTS) {
-                checkValueForThirdParameter(oldExprs.get(2), newExprs);
-            } else {
-                // no option provided case: sets the default option here.
-                setDefaultValueForThirdParameter(newExprs);
-            }
+            checkAndSetDefaultValueForThirdParameter(oldExprs.get(2), newExprs);
 
             // Resets the last argument.
             funcExpr.getArguments().clear();
@@ -157,13 +130,13 @@ public class FullTextContainsParameterCheckRule implements IAlgebraicRewriteRule
      * Checks the correctness of the first and second argument. If the argument is a constant, we can check
      * it now. If the argument is not a constant, we will defer the checking until run-time.
      */
-    void checkFirstAndSecondParamter(List<Mutable<ILogicalExpression>> exprs, String functionName)
-            throws AlgebricksException {
+    void checkFirstAndSecondParamter(List<Mutable<ILogicalExpression>> exprs) throws AlgebricksException {
         // Check the first parameter - Expression1. If it's a constant, then we can check the type here.
         ILogicalExpression firstExpr = exprs.get(0).getValue();
         if (firstExpr.getExpressionTag() == LogicalExpressionTag.CONSTANT
                 && ConstantExpressionUtil.getConstantIaObjectType(firstExpr) != ATypeTag.STRING) {
-            throw new AlgebricksException("The first expression of " + functionName + " should be a string.");
+            throw new AlgebricksException("The first expression of "
+                    + AsterixBuiltinFunctions.FULLTEXT_CONTAINS.getName() + " should be a string.");
         }
 
         // Check the second parameter - Expression2. If it's a constant, then we can check the type here.
@@ -176,8 +149,9 @@ public class FullTextContainsParameterCheckRule implements IAlgebraicRewriteRule
                 case ORDEREDLIST:
                     break;
                 default:
-                    throw new AlgebricksException("The second expression of " + functionName
-                            + "should be a string, an unordered list, or an ordered list.");
+                    throw new AlgebricksException(
+                            "The second expression of " + AsterixBuiltinFunctions.FULLTEXT_CONTAINS.getName()
+                                    + "should be a string, an unordered list, or an ordered list.");
             }
         }
     }
@@ -188,13 +162,13 @@ public class FullTextContainsParameterCheckRule implements IAlgebraicRewriteRule
      * @param expr
      * @throws AlgebricksException
      */
-    void checkValueForThirdParameter(Mutable<ILogicalExpression> expr,
+    void checkAndSetDefaultValueForThirdParameter(Mutable<ILogicalExpression> expr,
             List<Mutable<ILogicalExpression>> newArgs) throws AlgebricksException {
         // Get the last parameter - this should be a record-constructor.
         AbstractFunctionCallExpression openRecConsExpr = (AbstractFunctionCallExpression) expr.getValue();
         FunctionIdentifier openRecConsFi = openRecConsExpr.getFunctionIdentifier();
-        if (openRecConsFi != BuiltinFunctions.OPEN_RECORD_CONSTRUCTOR
-                && openRecConsFi != BuiltinFunctions.CLOSED_RECORD_CONSTRUCTOR) {
+        if (openRecConsFi != AsterixBuiltinFunctions.OPEN_RECORD_CONSTRUCTOR
+                && openRecConsFi != AsterixBuiltinFunctions.CLOSED_RECORD_CONSTRUCTOR) {
             throw new AlgebricksException("ftcontains() option should be the form of a record { }.");
         }
 
@@ -269,21 +243,4 @@ public class FullTextContainsParameterCheckRule implements IAlgebraicRewriteRule
                     + " or " + FullTextContainsDescriptor.DISJUNCTIVE_SEARCH_MODE_OPTION + ".");
         }
     }
-
-    /**
-     * Sets the default option value(s) when a user doesn't provide any option.
-     */
-    void setDefaultValueForThirdParameter(List<Mutable<ILogicalExpression>> newArgs)
-            throws AlgebricksException {
-        // Sets the search mode option: the default option is conjunctive search.
-        ILogicalExpression searchModeOptionExpr = new ConstantExpression(
-                new AsterixConstantValue(new AString(FullTextContainsDescriptor.SEARCH_MODE_OPTION)));
-        ILogicalExpression searchModeValExpr = new ConstantExpression(
-                new AsterixConstantValue(new AString(FullTextContainsDescriptor.CONJUNCTIVE_SEARCH_MODE_OPTION)));
-
-        // Add this option as arguments to the ftcontains().
-        newArgs.add(new MutableObject<ILogicalExpression>(searchModeOptionExpr));
-        newArgs.add(new MutableObject<ILogicalExpression>(searchModeValExpr));
-    }
-
 }