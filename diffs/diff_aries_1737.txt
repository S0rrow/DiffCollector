diff --git a/src/main/java/org/apache/aries/jpa/blueprint/aries/impl/NSHandler.java b/src/main/java/org/apache/aries/jpa/blueprint/aries/impl/NSHandler.java
index 2235fb85a..4a389b0d0 100644
--- a/src/main/java/org/apache/aries/jpa/blueprint/aries/impl/NSHandler.java
+++ b/src/main/java/org/apache/aries/jpa/blueprint/aries/impl/NSHandler.java
@@ -16,7 +16,7 @@
  * specific language governing permissions and limitations
  * under the License.
  */
-package org.apache.aries.jpa.blueprint.aries.impl;
+package org.apache.aries.jpa.container.context.namespace;
 
 import java.net.URL;
 import java.util.ArrayList;
@@ -25,7 +25,6 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-import java.util.concurrent.atomic.AtomicBoolean;
 
 import javax.persistence.EntityManager;
 import javax.persistence.EntityManagerFactory;
@@ -43,8 +42,6 @@ import org.apache.aries.blueprint.mutable.MutableReferenceMetadata;
 import org.apache.aries.jpa.container.PersistenceUnitConstants;
 import org.apache.aries.jpa.container.context.PersistenceContextProvider;
 import org.osgi.framework.Bundle;
-import org.osgi.framework.ServiceReference;
-import org.osgi.service.blueprint.reflect.BeanArgument;
 import org.osgi.service.blueprint.reflect.BeanMetadata;
 import org.osgi.service.blueprint.reflect.BeanProperty;
 import org.osgi.service.blueprint.reflect.ComponentMetadata;
@@ -68,16 +65,12 @@ import org.w3c.dom.NodeList;
  * the {@link GlobalPersistenceManager}.
  */
 public class NSHandler implements NamespaceHandler {
-    private static final String ATTR_INDEX = "index";
-
     /** Logger */
     private static final Logger _logger = LoggerFactory
-            .getLogger("org.apache.aries.jpa.blueprint.aries");
+            .getLogger("org.apache.aries.jpa.container.context");
 
-    /** The JPA 1.0.0 namespace */
-    public static final String NS_URI_100 = "http://aries.apache.org/xmlns/jpa/v1.0.0";
-    /** The JPA 1.0.0 namespace */
-    public static final String NS_URI_110 = "http://aries.apache.org/xmlns/jpa/v1.1.0";
+    /** The JPA namespace */
+    public static final String NS_URI = "http://aries.apache.org/xmlns/jpa/v1.0.0";
     /** The standard blueprint namespace */
     private static final String BLUEPRINT_NS = "http://www.osgi.org/xmlns/blueprint/v1.0.0";
 
@@ -107,13 +100,17 @@ public class NSHandler implements NamespaceHandler {
     public static final String EMPTY_UNIT_NAME_FILTER = "("
             + PersistenceUnitConstants.EMPTY_PERSISTENCE_UNIT_NAME + "=true)";
 
+    /**
+     * The service property indicating that a registered EMF is used to create
+     * managed persistence contexts
+     */
+    public static final String PROXY_FACTORY_EMF_ATTRIBUTE = "org.apache.aries.jpa.proxy.factory";
+
     /** The blueprint attribute value to make a bean eager */
     private static final String ACTIVATION_EAGER = "EAGER";
     /** The {@link PersistenceManager} to register contexts with */
     private PersistenceContextProvider manager;
-    /** Used to indicate whether the PersistenceContextProvider is available */
-    private final AtomicBoolean contextsAvailable = new AtomicBoolean();
-    
+
     public void setManager(PersistenceContextProvider manager) {
         this.manager = manager;
     }
@@ -125,93 +122,86 @@ public class NSHandler implements NamespaceHandler {
             ParserContext context) {
         // The node should always be an element
         if (node.getNodeType() != Node.ELEMENT_NODE) {
-            _logger.error("The JPA namespace handler does not understand the DOM node {}.",
+            _logger
+                    .error(
+                            "The JPA namespace handler does not understand the DOM node {}.",
                             new Object[] { node });
-            throw new IllegalArgumentException(node.toString());
+            throw new IllegalArgumentException();
         }
 
         Element element = (Element) node;
         // The surrounding component should always be a bean
         if (!(component instanceof BeanMetadata)) {
-            _logger.error("The JPA namespace should only be used to inject properties or constuctor arguments into a bean." +
-            		" The surrounding component was {}.", new Object[] { component });
-            throw new IllegalArgumentException(component.toString());
-        }
-        
-        if (!(component instanceof MutableBeanMetadata)) {
-            _logger.error("The JPA namespace should only be used to inject properties into beans " +
-                            "that implement the MutableBeanMetadata interface. " +
-                            "The surrounding component was {}.", new Object[] { component });
-            throw new IllegalArgumentException(component.toString());
+            _logger
+                    .error(
+                            "The JPA namespace should only be used to inject properties into a bean. The surrounding component was {}.",
+                            new Object[] { component });
+            throw new IllegalArgumentException();
         }
 
-        MutableBeanMetadata bean = (MutableBeanMetadata) component;
+        final BeanMetadata bean = (BeanMetadata) component;
 
-        if (!NS_URI_100.equals(element.getNamespaceURI())
-            && !NS_URI_110.equals(element.getNamespaceURI())) {
-            _logger.error("The JPA namespace handler should not be called for the namespace {}.",
+        if (!NS_URI.equals(element.getNamespaceURI())) {
+            _logger
+                    .error(
+                            "The JPA namespace handler should not be called for the namespace {}.",
                             new Object[] { element.getNamespaceURI() });
-            throw new IllegalArgumentException("The JPA namespace handler should not be called for the namespace " 
-                   + element.getNamespaceURI());
+            throw new IllegalArgumentException();
         }
 
         if (!TAG_UNIT.equals(element.getLocalName())
                 && !TAG_CONTEXT.equals(element.getLocalName())) {
-            _logger.error("The JPA namespace handler did not recognize the element named {}.",
+            _logger
+                    .error(
+                            "The JPA namespace handler did not recognize the element named {}.",
                             new Object[] { element.getLocalName() });
-            throw new IllegalArgumentException("The JPA namespace handler did not recognize the element named " 
-                   + element.getLocalName());
+            throw new IllegalArgumentException();
         }
 
-        String property = element.getAttribute(ATTR_PROPERTY);
-        property = property.isEmpty() ? null : property;
-        String index = element.getAttribute(ATTR_INDEX);
-        index = index.isEmpty() ? null : index;
-        if(property != null && index != null) {
-          _logger.error("It is invalid to specify a bean property and an index") ;
-        } else if (property != null) {
-            
-                
-            // Create an injection point for the JPA resource (a blueprint property)
-            BeanProperty beanProperty = createBeanProperty(element, property,
-                    TAG_UNIT.equals(element.getLocalName()), context);
-
-            bean.addProperty(beanProperty);
-        } else {
-          
-          //Create a constructor argument for the JPA resource
-          BeanArgument argument = createArgument(element, index, 
-              TAG_UNIT.equals(element.getLocalName()), context);
-          
-          bean.addArgument(argument);
-        }
-        
+        // Create an injection point for the JPA resource (a blueprint property)
+        final BeanProperty beanProperty = createInjectMetadata(element,
+                TAG_UNIT.equals(element.getLocalName()), context);
+
         // If this is a persistence context then register it with the manager
         if (TAG_CONTEXT.equals(element.getLocalName())) {
             Bundle client = getBlueprintBundle(context);
             String unitName = parseUnitName(element);
 
-            if (client != null) {
-                HashMap<String, Object> properties = new HashMap<String, Object>();
-                // Remember to add the PersistenceContextType so that we can create
-                // the correct type of
-                // EntityManager    
-                properties.put(PersistenceContextProvider.PERSISTENCE_CONTEXT_TYPE,
-                        parseType(element));
-                properties.putAll(parseJPAProperties(element, context));
-                if(contextsAvailable.get()) {
-                    manager.registerContext(unitName, client, properties);
-                } else {
-                    _logger.warn("The bundle {} is a client of persistence unit {} with properties {}, but no PersistenceContextProvider is available in the runtime. " +
-                    		"The blueprint for this bundle will not start correctly unless the managed persistence context is registered through some other mechanism",
-                    		new Object[] {client.getSymbolicName() + "_" + client.getVersion(), unitName, properties});
-                }
-            } else {
-                _logger.debug("No bundle: this must be a dry, parse only run.");
-            }
+            HashMap<String, Object> properties = new HashMap<String, Object>();
+            // Remember to add the PersistenceContextType so that we can create
+            // the correct type of
+            // EntityManager
+            properties.put(PersistenceContextProvider.PERSISTENCE_CONTEXT_TYPE,
+                    parseType(element));
+            properties.putAll(parseJPAProperties(element, context));
+
+            manager.registerContext(unitName, client, properties);
         }
 
-        return bean;
+        // Create a new Bean to replace the one passed in
+        if (bean instanceof ExtendedBeanMetadata) {
+            return new ExtendedBeanMetadataProxy((ExtendedBeanMetadata) bean) {
+                @Override
+                public List getProperties() {
+                    // Remember to add the jpa injection property
+                    ArrayList<BeanProperty> result = new ArrayList<BeanProperty>(
+                            bean.getProperties());
+                    result.add(beanProperty);
+                    return result;
+                }
+            };            
+        } else {
+            return new BeanMetadataProxy(bean) {
+                @Override
+                public List getProperties() {
+                    // Remember to add the jpa injection property
+                    ArrayList<BeanProperty> result = new ArrayList<BeanProperty>(
+                            bean.getProperties());
+                    result.add(beanProperty);
+                    return result;
+                }
+            };
+        }
     }
 
     @SuppressWarnings("unchecked")
@@ -221,12 +211,7 @@ public class NSHandler implements NamespaceHandler {
     }
 
     public URL getSchemaLocation(String namespace) {
-        if(NS_URI_100.equals(namespace))
-            return getClass().getResource("/org/apache/aries/jpa/blueprint/namespace/jpa.xsd");
-        else if (NS_URI_110.equals(namespace))
-            return getClass().getResource("/org/apache/aries/jpa/blueprint/namespace/jpa_110.xsd");
-        else
-            return null;
+        return getClass().getResource("jpa.xsd");
     }
 
     public Metadata parse(Element element, ParserContext context) {
@@ -234,30 +219,11 @@ public class NSHandler implements NamespaceHandler {
          * The namespace does not define any top-level elements, so we should
          * never get here. In case we do -> explode.
          */
-        _logger.error("The JPA namespace handler was called to parse a top level element.");
+        _logger
+                .error("The JPA namespace handler was called to parse a top level element.");
         throw new UnsupportedOperationException();
     }
-    
-    /**
-     * Called when a {@link PersistenceContextProvider} is available
-     * @param ref
-     */
-    public void contextAvailable(ServiceReference ref) {
-        boolean log = contextsAvailable.compareAndSet(false, true);
-      
-        if(log && _logger.isDebugEnabled())
-            _logger.debug("Managed persistence context support is now available for use with the Aries Blueprint container");
-    }
 
-    /**
-     * Called when a {@link PersistenceContextProvider} is no longer available
-     * @param ref
-     */
-    public void contextUnavailable(ServiceReference ref) {
-        contextsAvailable.set(false);
-        _logger.warn("Managed persistence context support is no longer available for use with the Aries Blueprint container");
-    }
-    
     /**
      * Create a BeanProperty that will inject a JPA resource into a bean
      * 
@@ -269,21 +235,63 @@ public class NSHandler implements NamespaceHandler {
      *            The current parser context
      * @return
      */
-    private BeanProperty createBeanProperty(Element element, final String property,
+    private BeanProperty createInjectMetadata(Element element,
             boolean isPersistenceUnit, ParserContext ctx) {
         String unitName = parseUnitName(element);
+        final String property = element.getAttribute(ATTR_PROPERTY);
 
         if (_logger.isDebugEnabled()) {
             if (isPersistenceUnit)
-                _logger.debug("Creating blueprint injection metadata to inject the unit {} into bean property {}",
+                _logger
+                        .debug(
+                                "Creating blueprint injection metadata to inject the unit {} into bean property {}",
                                 new Object[] { unitName, property });
             else
-                _logger.debug("Creating blueprint injection metadata to inject the context {} into bean property {}",
+                _logger
+                        .debug(
+                                "Creating blueprint injection metadata to inject the context {} into bean property {}",
                                 new Object[] { unitName, property });
         }
 
-        final Metadata target = createTargetMetadata(isPersistenceUnit, ctx,
-            unitName);
+        // Create a service reference for the EMF (it is an EMF for persistence
+        // contexts and units)
+        final MutableReferenceMetadata refMetadata = (MutableReferenceMetadata) ctx
+                .createMetadata(ReferenceMetadata.class);
+        refMetadata.setActivation(ACTIVATION_EAGER.equalsIgnoreCase(ctx
+                .getDefaultActivation()) ? ReferenceMetadata.ACTIVATION_EAGER
+                : ReferenceMetadata.ACTIVATION_LAZY);
+        refMetadata.setAvailability(ReferenceMetadata.AVAILABILITY_MANDATORY);
+        refMetadata.setInterface(EntityManagerFactory.class.getName());
+
+        // Pick the right EMF by looking for the presence, or absence, of the
+        // PROXY_FACTORY service property
+        StringBuilder filter = new StringBuilder("(&");
+        // Persistence units do not have the property, persistence contexts do
+        if (isPersistenceUnit)
+            filter.append("(!(").append(PROXY_FACTORY_EMF_ATTRIBUTE).append(
+                    "=*))");
+        else
+            filter.append("(").append(PROXY_FACTORY_EMF_ATTRIBUTE)
+                    .append("=*)");
+
+        // Add the empty name filter if necessary
+        if (!"".equals(unitName))
+            filter.append("(" + PersistenceUnitConstants.OSGI_UNIT_NAME + "="
+                    + unitName + ")");
+        else
+            filter.append(EMPTY_UNIT_NAME_FILTER);
+
+        filter.append(")");
+
+        refMetadata.setFilter(filter.toString());
+        refMetadata.setTimeout(Integer.parseInt(ctx.getDefaultTimeout()));
+        refMetadata.setDependsOn((List<String>) Collections.EMPTY_LIST);
+        refMetadata.setId(ctx.generateId());
+
+        // Finally, if this is a persistence context we need to create the
+        // entity manager as the Target
+        final Metadata target = isPersistenceUnit ? refMetadata
+                : createInjectionBeanMetedata(ctx, refMetadata);
 
         return new BeanProperty() {
             public Metadata getValue() {
@@ -295,116 +303,6 @@ public class NSHandler implements NamespaceHandler {
             }
         };
     }
-    
-    /**
-     * Create a BeanProperty that will inject a JPA resource into a bean
-     * 
-     * @param element
-     *            The element being parsed
-     * @param isPersistenceUnit
-     *            true if this is a persistence unit
-     * @param ctx
-     *            The current parser context
-     * @return
-     */
-    private BeanArgument createArgument(Element element, final String index,
-            final boolean isPersistenceUnit, ParserContext ctx) {
-        
-        String unitName = parseUnitName(element);
-        if (_logger.isDebugEnabled()) {
-          if (isPersistenceUnit) {
-              if (index == null)
-                  _logger.debug("Creating blueprint injection metadata to inject the unit {} as a constructor argument",
-                              new Object[] { unitName });
-              else
-                  _logger.debug("Creating blueprint injection metadata to inject the unit {} as a constructor argument" +
-                      " with index {}", new Object[] { unitName, index });
-          } else {
-              if (index == null)
-                  _logger.debug("Creating blueprint injection metadata to inject the context {} as a constructor argument",
-                              new Object[] { unitName });
-              else
-                  _logger.debug("Creating blueprint injection metadata to inject the context {} as a constructor argument" +
-                      " with index {}", new Object[] { unitName, index });
-          }
-      }
-        
-        final int i;
-        
-        if(index == null) {
-            i = -1;
-        } else {
-            try {
-                i = Integer.parseInt(index);
-            } catch (NumberFormatException nfe) {
-                throw new IllegalArgumentException("The string " + index + " could not be parsed as an index.", nfe);
-            }
-        }
-        
-        final Metadata target = createTargetMetadata(isPersistenceUnit, ctx,
-            unitName);
-
-        return new BeanArgument() {
-            public Metadata getValue() {
-                return target;
-            }
-
-            @Override
-            public String getValueType() {
-              return isPersistenceUnit ? "javax.persistence.EntityManagerFactory" 
-                                       : "javax.persistence.EntityManager";
-            }
-
-            @Override
-            public int getIndex() {
-              return i;
-            }
-        };
-    }
-
-    private Metadata createTargetMetadata(boolean isPersistenceUnit,
-        ParserContext ctx, String unitName) {
-      // Create a service reference for the EMF (it is an EMF for persistence
-      // contexts and units)
-      final MutableReferenceMetadata refMetadata = (MutableReferenceMetadata) ctx
-              .createMetadata(ReferenceMetadata.class);
-      refMetadata.setActivation(ACTIVATION_EAGER.equalsIgnoreCase(ctx
-              .getDefaultActivation()) ? ReferenceMetadata.ACTIVATION_EAGER
-              : ReferenceMetadata.ACTIVATION_LAZY);
-      refMetadata.setAvailability(ReferenceMetadata.AVAILABILITY_MANDATORY);
-      refMetadata.setInterface(EntityManagerFactory.class.getName());
-
-      // Pick the right EMF by looking for the presence, or absence, of the
-      // PROXY_FACTORY service property
-      StringBuilder filter = new StringBuilder("(&");
-      // Persistence units do not have the property, persistence contexts do
-      if (isPersistenceUnit)
-          filter.append("(!(").append(PersistenceContextProvider.PROXY_FACTORY_EMF_ATTRIBUTE)
-          .append("=*))");
-      else
-          filter.append("(").append(PersistenceContextProvider.PROXY_FACTORY_EMF_ATTRIBUTE)
-                  .append("=*)");
-
-      // Add the empty name filter if necessary
-      if (!"".equals(unitName))
-          filter.append("(" + PersistenceUnitConstants.OSGI_UNIT_NAME + "="
-                  + unitName + ")");
-      else
-          filter.append(EMPTY_UNIT_NAME_FILTER);
-
-      filter.append(")");
-
-      refMetadata.setFilter(filter.toString());
-      refMetadata.setTimeout(Integer.parseInt(ctx.getDefaultTimeout()));
-      refMetadata.setDependsOn((List<String>) Collections.EMPTY_LIST);
-      refMetadata.setId(ctx.generateId());
-
-      // Finally, if this is a persistence context we need to create the
-      // entity manager as the Target
-      final Metadata target = isPersistenceUnit ? refMetadata
-              : createInjectionBeanMetedata(ctx, refMetadata);
-      return target;
-    }
 
     /**
      * This method turns a persistence context factory into an
@@ -420,7 +318,8 @@ public class NSHandler implements NamespaceHandler {
             ReferenceMetadata factory) {
 
         if (_logger.isDebugEnabled())
-            _logger.debug("Creating a managed persistence context definition for injection");
+            _logger
+                    .debug("Creating a managed persistence context definition for injection");
 
         // Register the factory bean, and then create an entitymanager from it
         ctx.getComponentDefinitionRegistry().registerComponentDefinition(
@@ -495,7 +394,8 @@ public class NSHandler implements NamespaceHandler {
 
                     result.put(key.getStringValue(), value.getStringValue());
                 } else {
-                    _logger.error("There was a problem parsing a map of JPA properties");
+                    _logger
+                            .error("There was a problem parsing a map of JPA properties");
                     throw new UnsupportedOperationException();
                 }
             }
@@ -503,4 +403,78 @@ public class NSHandler implements NamespaceHandler {
 
         return result;
     }
+
+    private static class BeanMetadataProxy implements BeanMetadata {
+        private final BeanMetadata delegate;
+
+        public BeanMetadataProxy(BeanMetadata delegate) {
+            this.delegate = delegate;
+        }
+
+        public List getArguments() {
+            return delegate.getArguments();
+        }
+
+        public String getClassName() {
+            return delegate.getClassName();
+        }
+
+        public String getDestroyMethod() {
+            return delegate.getDestroyMethod();
+        }
+
+        public Target getFactoryComponent() {
+            return delegate.getFactoryComponent();
+        }
+
+        public String getFactoryMethod() {
+            return delegate.getFactoryMethod();
+        }
+
+        public String getInitMethod() {
+            return delegate.getInitMethod();
+        }
+
+        public List getProperties() {
+            return delegate.getProperties();
+        }
+
+        public String getScope() {
+            return delegate.getScope();
+        }
+
+        public int getActivation() {
+            return delegate.getActivation();
+        }
+
+        public List getDependsOn() {
+            return delegate.getDependsOn();
+        }
+
+        public String getId() {
+            return delegate.getId();
+        }
+    }
+    
+    private static class ExtendedBeanMetadataProxy extends BeanMetadataProxy implements ExtendedBeanMetadata {
+        private final ExtendedBeanMetadata delegate;
+        
+        public ExtendedBeanMetadataProxy(ExtendedBeanMetadata delegate) {
+            super(delegate);
+            this.delegate = delegate;
+        }
+        
+        public boolean getFieldInjection() {
+            return delegate.getFieldInjection();
+        }
+
+        public Class<?> getRuntimeClass() {
+            return delegate.getRuntimeClass();
+        }
+
+        public boolean isProcessor() {
+            return delegate.isProcessor();
+        }
+        
+    }
 }