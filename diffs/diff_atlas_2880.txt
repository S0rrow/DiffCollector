diff --git a/repository/src/main/java/org/apache/atlas/discovery/FullTextSearchProcessor.java b/repository/src/main/java/org/apache/atlas/discovery/FullTextSearchProcessor.java
index 22d91e047..4ddd6425a 100644
--- a/repository/src/main/java/org/apache/atlas/discovery/FullTextSearchProcessor.java
+++ b/repository/src/main/java/org/apache/atlas/discovery/FullTextSearchProcessor.java
@@ -19,19 +19,15 @@ package org.apache.atlas.discovery;
 
 import org.apache.atlas.model.discovery.SearchParameters;
 import org.apache.atlas.repository.Constants;
-import org.apache.atlas.repository.graph.GraphHelper;
 import org.apache.atlas.repository.graphdb.AtlasIndexQuery;
 import org.apache.atlas.repository.graphdb.AtlasVertex;
-import org.apache.atlas.repository.store.graph.v1.AtlasGraphUtilsV1;
 import org.apache.atlas.utils.AtlasPerfTracer;
-import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Set;
 
 
 public class FullTextSearchProcessor extends SearchProcessor {
@@ -44,39 +40,9 @@ public class FullTextSearchProcessor extends SearchProcessor {
         super(context);
 
         SearchParameters searchParameters = context.getSearchParameters();
-        StringBuilder    queryString      = new StringBuilder();
+        String           queryString      = String.format("v.\"%s\":(%s)", Constants.ENTITY_TEXT_PROPERTY_KEY, searchParameters.getQuery());
 
-        queryString.append("v.\"").append(Constants.ENTITY_TEXT_PROPERTY_KEY).append("\":(").append(searchParameters.getQuery());
-
-        // if search includes entity-type criteria, adding a filter here can help avoid unnecessary
-        // processing (and rejection) by subsequent EntitySearchProcessor
-        if (context.getEntityType() != null) {
-            Set<String> typeAndSubTypeNames = context.getEntityType().getTypeAndAllSubTypes();
-
-            if (typeAndSubTypeNames.size() <= MAX_ENTITY_TYPES_IN_INDEX_QUERY) {
-                queryString.append(AND_STR).append("(").append(StringUtils.join(typeAndSubTypeNames, SPACE_STRING)).append(")");
-            } else {
-                LOG.warn("'{}' has too many subtypes ({}) to include in index-query; might cause poor performance",
-                         context.getEntityType().getTypeName(), typeAndSubTypeNames.size());
-            }
-        }
-
-        // if search includes classification criteria, adding a filter here can help avoid unnecessary
-        // processing (and rejection) by subsequent ClassificationSearchProcessor or EntitySearchProcessor
-        if (context.getClassificationType() != null) {
-            Set<String> typeAndSubTypeNames = context.getClassificationType().getTypeAndAllSubTypes();
-
-            if (typeAndSubTypeNames.size() <= MAX_CLASSIFICATION_TYPES_IN_INDEX_QUERY) {
-                queryString.append(AND_STR).append("(").append(StringUtils.join(typeAndSubTypeNames, SPACE_STRING)).append(")");
-            } else {
-                LOG.warn("'{}' has too many subtypes ({}) to include in index-query; might cause poor performance",
-                        context.getClassificationType().getTypeName(), typeAndSubTypeNames.size());
-            }
-        }
-
-        queryString.append(")");
-
-        indexQuery = context.getGraph().indexQuery(Constants.FULLTEXT_INDEX, queryString.toString());
+        indexQuery = context.getGraph().indexQuery(Constants.FULLTEXT_INDEX, queryString);
     }
 
     @Override
@@ -94,16 +60,11 @@ public class FullTextSearchProcessor extends SearchProcessor {
         }
 
         try {
-            final int startIdx  = context.getSearchParameters().getOffset();
-            final int limit     = context.getSearchParameters().getLimit();
-            int       qryOffset = nextProcessor == null ? startIdx : 0;
-            int       resultIdx = qryOffset;
-
-            final List<AtlasVertex> entityVertices = new ArrayList<>();
-
-            for (; ret.size() < limit; qryOffset += limit) {
-                entityVertices.clear();
+            int qryOffset = nextProcessor == null ? context.getSearchParameters().getOffset() : 0;
+            int limit     = context.getSearchParameters().getLimit();
+            int resultIdx = qryOffset;
 
+            while (ret.size() < limit) {
                 if (context.terminateSearch()) {
                     LOG.warn("query terminated: {}", context.getSearchParameters());
 
@@ -116,29 +77,20 @@ public class FullTextSearchProcessor extends SearchProcessor {
                     break;
                 }
 
-                while (idxQueryResult.hasNext()) {
-                    AtlasVertex vertex = idxQueryResult.next().getVertex();
-
-                    // skip non-entity vertices
-                    if (!AtlasGraphUtilsV1.isEntityVertex(vertex)) {
-                        LOG.warn("FullTextSearchProcessor.execute(): ignoring non-entity vertex (id={})", vertex.getId()); // might cause duplicate entries in result
+                qryOffset += limit;
 
-                        continue;
-                    }
-
-                    entityVertices.add(vertex);
-                }
+                List<AtlasVertex> vertices = getVerticesFromIndexQueryResult(idxQueryResult);
 
-                super.filter(entityVertices);
+                vertices = super.filter(vertices);
 
-                for (AtlasVertex entityVertex : entityVertices) {
+                for (AtlasVertex vertex : vertices) {
                     resultIdx++;
 
-                    if (resultIdx <= startIdx) {
+                    if (resultIdx < context.getSearchParameters().getOffset()) {
                         continue;
                     }
 
-                    ret.add(entityVertex);
+                    ret.add(vertex);
 
                     if (ret.size() == limit) {
                         break;