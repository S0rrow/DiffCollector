diff --git a/webapp/src/main/java/org/apache/atlas/web/filters/AtlasKnoxSSOAuthenticationFilter.java b/webapp/src/main/java/org/apache/atlas/web/filters/AtlasKnoxSSOAuthenticationFilter.java
index d5fa003e7..75a884dca 100644
--- a/webapp/src/main/java/org/apache/atlas/web/filters/AtlasKnoxSSOAuthenticationFilter.java
+++ b/webapp/src/main/java/org/apache/atlas/web/filters/AtlasKnoxSSOAuthenticationFilter.java
@@ -28,10 +28,8 @@ import com.nimbusds.jose.crypto.RSASSAVerifier;
 import com.nimbusds.jwt.SignedJWT;
 import org.apache.atlas.ApplicationProperties;
 import org.apache.atlas.web.security.AtlasAuthenticationProvider;
-import org.apache.atlas.web.util.Servlets;
 import org.apache.commons.configuration.Configuration;
 import org.apache.commons.lang.StringUtils;
-import org.json.simple.JSONObject;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.security.authentication.AbstractAuthenticationToken;
@@ -49,7 +47,6 @@ import javax.servlet.http.HttpServletResponse;
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
-import java.net.URLEncoder;
 import java.security.PublicKey;
 import java.security.cert.CertificateException;
 import java.security.cert.CertificateFactory;
@@ -58,7 +55,6 @@ import java.security.interfaces.RSAPublicKey;
 import java.text.ParseException;
 import java.util.Date;
 import java.util.List;
-import org.apache.commons.lang.StringUtils;
 
 
 public class AtlasKnoxSSOAuthenticationFilter implements Filter {
@@ -71,7 +67,6 @@ public class AtlasKnoxSSOAuthenticationFilter implements Filter {
     public static final String JWT_ORIGINAL_URL_QUERY_PARAM = "atlas.sso.knox.query.param.originalurl";
     public static final String JWT_COOKIE_NAME_DEFAULT = "hadoop-jwt";
     public static final String JWT_ORIGINAL_URL_QUERY_PARAM_DEFAULT = "originalUrl";
-    public static final String DEFAULT_BROWSER_USERAGENT = "Mozilla,Opera,Chrome";
 
     private SSOAuthenticationProperties jwtProperties;
 
@@ -90,10 +85,8 @@ public class AtlasKnoxSSOAuthenticationFilter implements Filter {
         } catch (Exception e) {
             LOG.error("Error while getting application properties", e);
         }
-        if (configuration != null) {
-            ssoEnabled = configuration.getBoolean("atlas.sso.knox.enabled", false);
-            jwtProperties = loadJwtProperties();
-        }
+        ssoEnabled = configuration.getBoolean("atlas.sso.knox.enabled", false);
+        jwtProperties = loadJwtProperties();
         setJwtProperties();
     }
 
@@ -116,17 +109,13 @@ public class AtlasKnoxSSOAuthenticationFilter implements Filter {
     @Override
     public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
 
-        HttpServletResponse httpResponse = (HttpServletResponse) servletResponse;
-
-        AtlasResponseRequestWrapper responseWrapper = new AtlasResponseRequestWrapper(httpResponse);
-        responseWrapper.setHeader("X-Frame-Options", "DENY");
-
         if (!ssoEnabled) {
             filterChain.doFilter(servletRequest, servletResponse);
             return;
         }
 
         HttpServletRequest httpRequest = (HttpServletRequest) servletRequest;
+
         if (LOG.isDebugEnabled()) {
             LOG.debug("Knox doFilter {}", httpRequest.getRequestURI());
         }
@@ -137,7 +126,7 @@ public class AtlasKnoxSSOAuthenticationFilter implements Filter {
             return;
         }
 
-        if (jwtProperties == null || isAuthenticated()) {
+        if (!isWebUserAgent(httpRequest.getHeader("User-Agent")) || jwtProperties == null || isAuthenticated()) {
             filterChain.doFilter(servletRequest, servletResponse);
             return;
         }
@@ -174,42 +163,26 @@ public class AtlasKnoxSSOAuthenticationFilter implements Filter {
 
                     filterChain.doFilter(servletRequest, httpServletResponse);
                 } else {  // if the token is not valid then redirect to knox sso
-                    redirectToKnox(httpRequest, httpServletResponse, filterChain);
+                    String ssourl = constructLoginURL(httpRequest);
+                    if (LOG.isDebugEnabled()) {
+                        LOG.debug("SSO URL ={} invalid", ssourl);
+                    }
+                    httpServletResponse.sendRedirect(ssourl);
                 }
             } catch (ParseException e) {
                 LOG.warn("Unable to parse the JWT token", e);
-                redirectToKnox(httpRequest, httpServletResponse, filterChain);
             }
         } else {
-            redirectToKnox(httpRequest, httpServletResponse, filterChain);
-        }
-
-    }
-
-    private void redirectToKnox(HttpServletRequest httpRequest, HttpServletResponse httpServletResponse, FilterChain filterChain) throws IOException, ServletException {
-
-        if (!isWebUserAgent(httpRequest.getHeader("User-Agent"))) {
-            filterChain.doFilter(httpRequest, httpServletResponse);
-            return;
-        }
-
-        String ajaxRequestHeader = httpRequest.getHeader("X-Requested-With");
-
-        if ("XMLHttpRequest".equals(ajaxRequestHeader)) {
-            String ssourl = constructLoginURL(httpRequest, true);
-            JSONObject json = new JSONObject();
-            json.put("knoxssoredirectURL", URLEncoder.encode(ssourl, "UTF-8"));
-            httpServletResponse.setContentType("application/json");
-            httpServletResponse.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
-            httpServletResponse.sendError(HttpServletResponse.SC_UNAUTHORIZED, json.toString());
-
-        } else {
-            String ssourl = constructLoginURL(httpRequest, false);
+            String ssourl = constructLoginURL(httpRequest);
+            if (LOG.isDebugEnabled()) {
+                LOG.debug("SSO URL = {}  serializedJWT null", ssourl);
+            }
             httpServletResponse.sendRedirect(ssourl);
         }
 
     }
 
+
     private boolean isWebUserAgent(String userAgent) {
         boolean isWeb = false;
         if (jwtProperties != null) {
@@ -264,7 +237,7 @@ public class AtlasKnoxSSOAuthenticationFilter implements Filter {
             for (Cookie cookie : cookies) {
                 if (cookieName.equals(cookie.getName())) {
                     if (LOG.isDebugEnabled()) {
-                        LOG.debug("{} cookie has been found and is being processed", cookieName);
+                        LOG.debug(cookieName + " cookie has been found and is being processed");
                     }
                     serializedJWT = cookie.getValue();
                     break;
@@ -281,26 +254,13 @@ public class AtlasKnoxSSOAuthenticationFilter implements Filter {
      * @param request for getting the original request URL
      * @return url to use as login url for redirect
      */
-    protected String constructLoginURL(HttpServletRequest request, boolean isXMLRequest) {
+    protected String constructLoginURL(HttpServletRequest request) {
         String delimiter = "?";
         if (authenticationProviderUrl.contains("?")) {
             delimiter = "&";
         }
         StringBuilder loginURL = new StringBuilder();
-        if (isXMLRequest) {
-            String atlasApplicationURL = "";
-            String referalURL = request.getHeader("referer");
-
-            if (referalURL == null) {
-                atlasApplicationURL = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort() + request.getContextPath();
-            } else {
-                atlasApplicationURL = referalURL;
-            }
-
-            loginURL.append(authenticationProviderUrl).append(delimiter).append(originalUrlQueryParam).append("=").append(atlasApplicationURL);
-        } else {
-            loginURL.append(authenticationProviderUrl).append(delimiter).append(originalUrlQueryParam).append("=").append(request.getRequestURL().append(getOriginalQueryString(request)));
-        }
+        loginURL.append(authenticationProviderUrl).append(delimiter).append(originalUrlQueryParam).append("=").append(request.getRequestURL().append(getOriginalQueryString(request)));
         return loginURL.toString();
     }
 
@@ -412,11 +372,9 @@ public class AtlasKnoxSSOAuthenticationFilter implements Filter {
             jwtProperties.setAuthenticationProviderUrl(providerUrl);
             jwtProperties.setCookieName(configuration.getString(JWT_COOKIE_NAME, JWT_COOKIE_NAME_DEFAULT));
             jwtProperties.setOriginalUrlQueryParam(configuration.getString(JWT_ORIGINAL_URL_QUERY_PARAM, JWT_ORIGINAL_URL_QUERY_PARAM_DEFAULT));
-            String[] userAgent = configuration.getStringArray(BROWSER_USERAGENT);
-            if (userAgent != null && userAgent.length > 0) {
-                jwtProperties.setUserAgentList(userAgent);
-            } else {
-                jwtProperties.setUserAgentList(DEFAULT_BROWSER_USERAGENT.split(","));
+            String userAgent = configuration.getString(BROWSER_USERAGENT);
+            if (userAgent != null && !userAgent.isEmpty()) {
+                jwtProperties.setUserAgentList(userAgent.split(","));
             }
             try {
                 RSAPublicKey publicKey = parseRSAPublicKey(publicKeyPathStr);