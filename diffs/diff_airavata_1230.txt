diff --git a/modules/registry-refactoring/src/main/java/org/apache/airavata/registry/core/entities/expcatalog/TaskEntity.java b/modules/registry-refactoring/src/main/java/org/apache/airavata/registry/core/entities/expcatalog/TaskEntity.java
index c7fa8672c..8e4be8292 100644
--- a/modules/registry-refactoring/src/main/java/org/apache/airavata/registry/core/entities/expcatalog/TaskEntity.java
+++ b/modules/registry-refactoring/src/main/java/org/apache/airavata/registry/core/entities/expcatalog/TaskEntity.java
@@ -23,58 +23,28 @@ package org.apache.airavata.registry.core.entities.expcatalog;
 import org.apache.airavata.model.task.TaskTypes;
 
 import javax.persistence.*;
-import java.io.Serializable;
 import java.nio.ByteBuffer;
-import java.sql.Timestamp;
 import java.util.List;
 
 @Entity
-@Table(name = "TASK")
-public class TaskEntity implements Serializable {
-    private static final long serialVersionUID = 1L;
-
-    @Id
-    @Column(name = "TASK_ID")
+@Table(name = "EXPCAT_TASK")
+public class TaskEntity {
     private String taskId;
-
-    @Column(name = "TASK_TYPE")
     private TaskTypes taskType;
-
-    @Column(name = "PARENT_PROCESS_ID")
     private String parentProcessId;
-
-    @Column(name = "CREATION_TIME")
-    private Timestamp creationTime;
-
-    @Column(name = "LAST_UPDATE_TIME")
-    private Timestamp lastUpdateTime;
-
-    @Lob
-    @Column(name = "TASK_DETAIL")
+    private long creationTime;
+    private long lastUpdateTime;
     private String taskDetail;
-
-    @Column(name = "SUB_TASK_MODEL")
     private ByteBuffer subTaskModel;
 
-    @OneToMany(targetEntity = TaskStatusEntity.class, cascade = CascadeType.ALL,
-            mappedBy = "task")
     private List<TaskStatusEntity> taskStatuses;
-
-    @OneToMany(targetEntity = TaskErrorEntity.class, cascade = CascadeType.ALL,
-            mappedBy = "task")
     private List<TaskErrorEntity> taskErrors;
-
-    @OneToMany(targetEntity = JobEntity.class, cascade = CascadeType.ALL,
-            mappedBy = "task")
     private List<JobEntity> jobs;
 
-    @ManyToOne(targetEntity = ProcessEntity.class, cascade = CascadeType.ALL, fetch = FetchType.LAZY)
-    @JoinColumn(name = "PARENT_PROCESS_ID", referencedColumnName = "PROCESS_ID")
     private ProcessEntity process;
 
-    public TaskEntity() {
-    }
-
+    @Id
+    @Column(name = "TASK_ID")
     public String getTaskId() {
         return taskId;
     }
@@ -83,6 +53,7 @@ public class TaskEntity implements Serializable {
         this.taskId = taskId;
     }
 
+    @Column(name = "TASK_TYPE")
     public TaskTypes getTaskType() {
         return taskType;
     }
@@ -91,6 +62,7 @@ public class TaskEntity implements Serializable {
         this.taskType = taskType;
     }
 
+    @Column(name = "PARENT_PROCESS_ID")
     public String getParentProcessId() {
         return parentProcessId;
     }
@@ -99,22 +71,25 @@ public class TaskEntity implements Serializable {
         this.parentProcessId = parentProcessId;
     }
 
-    public Timestamp getCreationTime() {
+    @Column(name = "CREATION_TIME")
+    public long getCreationTime() {
         return creationTime;
     }
 
-    public void setCreationTime(Timestamp creationTime) {
+    public void setCreationTime(long creationTime) {
         this.creationTime = creationTime;
     }
 
-    public Timestamp getLastUpdateTime() {
+    @Column(name = "LAST_UPDATE_TIME")
+    public long getLastUpdateTime() {
         return lastUpdateTime;
     }
 
-    public void setLastUpdateTime(Timestamp lastUpdateTime) {
+    public void setLastUpdateTime(long lastUpdateTime) {
         this.lastUpdateTime = lastUpdateTime;
     }
 
+    @Column(name = "TASK_DETAIL")
     public String getTaskDetail() {
         return taskDetail;
     }
@@ -123,6 +98,8 @@ public class TaskEntity implements Serializable {
         this.taskDetail = taskDetail;
     }
 
+    @Lob
+    @Column(name = "SUB_TASK_MODEL")
     public ByteBuffer getSubTaskModel() {
         return subTaskModel;
     }
@@ -131,22 +108,25 @@ public class TaskEntity implements Serializable {
         this.subTaskModel = subTaskModel;
     }
 
+    @OneToMany(targetEntity = TaskStatusEntity.class, cascade = CascadeType.ALL, mappedBy = "task")
     public List<TaskStatusEntity> getTaskStatuses() {
         return taskStatuses;
     }
 
-    public void setTaskStatuses(List<TaskStatusEntity> taskStatuses) {
-        this.taskStatuses = taskStatuses;
+    public void setTaskStatuses(List<TaskStatusEntity> taskStatus) {
+        this.taskStatuses = taskStatus;
     }
 
+    @OneToMany(targetEntity = TaskErrorEntity.class, cascade = CascadeType.ALL, mappedBy = "task")
     public List<TaskErrorEntity> getTaskErrors() {
         return taskErrors;
     }
 
-    public void setTaskErrors(List<TaskErrorEntity> taskErrors) {
-        this.taskErrors = taskErrors;
+    public void setTaskErrors(List<TaskErrorEntity> taskError) {
+        this.taskErrors = taskError;
     }
 
+    @OneToMany(targetEntity = JobEntity.class, cascade = CascadeType.ALL, mappedBy = "task")
     public List<JobEntity> getJobs() {
         return jobs;
     }
@@ -155,6 +135,8 @@ public class TaskEntity implements Serializable {
         this.jobs = jobs;
     }
 
+    @ManyToOne(targetEntity = ProcessEntity.class, cascade = CascadeType.ALL, fetch = FetchType.LAZY)
+    @JoinColumn(name = "PARENT_PROCESS_ID", referencedColumnName = "PROCESS_ID")
     public ProcessEntity getProcess() {
         return process;
     }