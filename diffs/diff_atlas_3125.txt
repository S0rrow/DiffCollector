diff --git a/addons/hive-bridge/src/main/java/org/apache/atlas/hive/hook/events/BaseHiveEvent.java b/addons/hive-bridge/src/main/java/org/apache/atlas/hive/hook/events/BaseHiveEvent.java
index 1a6e070e2..0bf3ce27a 100644
--- a/addons/hive-bridge/src/main/java/org/apache/atlas/hive/hook/events/BaseHiveEvent.java
+++ b/addons/hive-bridge/src/main/java/org/apache/atlas/hive/hook/events/BaseHiveEvent.java
@@ -65,7 +65,7 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
-import static org.apache.atlas.hive.hook.AtlasHiveHookContext.QNAME_SEP_METADATA_NAMESPACE;
+import static org.apache.atlas.hive.hook.AtlasHiveHookContext.QNAME_SEP_CLUSTER_NAME;
 import static org.apache.atlas.hive.hook.AtlasHiveHookContext.QNAME_SEP_ENTITY_NAME;
 import static org.apache.atlas.hive.hook.AtlasHiveHookContext.QNAME_SEP_PROCESS;
 
@@ -209,21 +209,19 @@ public abstract class BaseHiveEvent {
     }
 
 
-    public static AtlasRelatedObjectId getAtlasRelatedObjectId(AtlasEntity entity, String relationshipType) {
-        return getAtlasRelatedObjectId(getObjectId(entity), relationshipType);
-    }
-
-    public static AtlasRelatedObjectId getAtlasRelatedObjectId(AtlasObjectId objectId, String relationShipType) {
-        AtlasRelatedObjectId atlasRelatedObjectId = new AtlasRelatedObjectId(objectId, relationShipType);
+    public static AtlasRelatedObjectId getObjectIdWithRelationshipType(AtlasEntity entity, String relationShipType) {
+        AtlasRelatedObjectId atlasRelatedObjectId = new AtlasRelatedObjectId(getObjectId(entity), relationShipType);
         return atlasRelatedObjectId;
     }
 
+
+
     public static List<AtlasRelatedObjectId> getObjectIdsWithRelationshipType(List<AtlasEntity> entities,String relationshipType) {
         final List<AtlasRelatedObjectId> ret;
         if (CollectionUtils.isNotEmpty(entities)) {
             ret = new ArrayList<>(entities.size());
             for (AtlasEntity entity : entities) {
-                ret.add(getAtlasRelatedObjectId(entity, relationshipType));
+                ret.add(getObjectIdWithRelationshipType(entity, relationshipType));
             }
         } else {
             ret = Collections.emptyList();
@@ -355,7 +353,7 @@ public abstract class BaseHiveEvent {
             ret.setAttribute(ATTRIBUTE_DESCRIPTION, db.getDescription());
             ret.setAttribute(ATTRIBUTE_OWNER, db.getOwnerName());
 
-            ret.setAttribute(ATTRIBUTE_CLUSTER_NAME, getMetadataNamespace());
+            ret.setAttribute(ATTRIBUTE_CLUSTER_NAME, getClusterName());
             ret.setAttribute(ATTRIBUTE_LOCATION, HdfsNameServiceResolver.getPathWithNameServiceID(db.getLocationUri()));
             ret.setAttribute(ATTRIBUTE_PARAMETERS, db.getParameters());
 
@@ -483,7 +481,7 @@ public abstract class BaseHiveEvent {
                     }
 
 
-                    ret.setRelationshipAttribute(ATTRIBUTE_STORAGEDESC, getAtlasRelatedObjectId(sd, RELATIONSHIP_HIVE_TABLE_STORAGE_DESC));
+                    ret.setRelationshipAttribute(ATTRIBUTE_STORAGEDESC, getObjectIdWithRelationshipType(sd, RELATIONSHIP_HIVE_TABLE_STORAGE_DESC));
                     ret.setRelationshipAttribute(ATTRIBUTE_PARTITION_KEYS, getObjectIdsWithRelationshipType(partitionKeys, RELATIONSHIP_HIVE_TABLE_PART_KEYS));
                     ret.setRelationshipAttribute(ATTRIBUTE_COLUMNS, getObjectIdsWithRelationshipType(columns, RELATIONSHIP_HIVE_TABLE_COLUMNS));
                 }
@@ -601,8 +599,7 @@ public abstract class BaseHiveEvent {
 
     protected AtlasEntity getPathEntity(Path path, AtlasEntityExtInfo extInfo) {
         AtlasEntity ret;
-        String      strPath           = path.toString();
-        String      metadataNamespace = getMetadataNamespace();
+        String strPath = path.toString();
 
         if (strPath.startsWith(HDFS_PATH_PREFIX) && context.isConvertHdfsPathToLowerCase()) {
             strPath = strPath.toLowerCase();
@@ -610,8 +607,8 @@ public abstract class BaseHiveEvent {
 
         if (isS3Path(strPath)) {
             String      bucketName          = path.toUri().getAuthority();
-            String      bucketQualifiedName = (path.toUri().getScheme() + SCHEME_SEPARATOR + path.toUri().getAuthority() + QNAME_SEP_METADATA_NAMESPACE).toLowerCase() + metadataNamespace;
-            String      pathQualifiedName   = (strPath + QNAME_SEP_METADATA_NAMESPACE).toLowerCase() + metadataNamespace;
+            String      bucketQualifiedName = (path.toUri().getScheme() + SCHEME_SEPARATOR + path.toUri().getAuthority() + QNAME_SEP_CLUSTER_NAME).toLowerCase() + getClusterName();
+            String      pathQualifiedName   = (strPath + QNAME_SEP_CLUSTER_NAME).toLowerCase() + getClusterName();
             AtlasEntity bucketEntity        = context.getEntity(bucketQualifiedName);
 
             ret = context.getEntity(pathQualifiedName);
@@ -630,7 +627,7 @@ public abstract class BaseHiveEvent {
 
                 ret = new AtlasEntity(AWS_S3_PSEUDO_DIR);
 
-                ret.setRelationshipAttribute(ATTRIBUTE_BUCKET, getAtlasRelatedObjectId(bucketEntity, RELATIONSHIP_AWS_S3_BUCKET_S3_PSEUDO_DIRS));
+                ret.setRelationshipAttribute(ATTRIBUTE_BUCKET, getObjectIdWithRelationshipType(bucketEntity, RELATIONSHIP_AWS_S3_BUCKET_S3_PSEUDO_DIRS));
                 ret.setAttribute(ATTRIBUTE_OBJECT_PREFIX, Path.getPathWithoutSchemeAndAuthority(path).toString().toLowerCase());
                 ret.setAttribute(ATTRIBUTE_QUALIFIED_NAME, pathQualifiedName);
                 ret.setAttribute(ATTRIBUTE_NAME, Path.getPathWithoutSchemeAndAuthority(path).toString().toLowerCase());
@@ -660,7 +657,7 @@ public abstract class BaseHiveEvent {
                 ret.setAttribute(ATTRIBUTE_PATH, attrPath);
                 ret.setAttribute(ATTRIBUTE_QUALIFIED_NAME, pathQualifiedName);
                 ret.setAttribute(ATTRIBUTE_NAME, name);
-                ret.setAttribute(ATTRIBUTE_CLUSTER_NAME, metadataNamespace);
+                ret.setAttribute(ATTRIBUTE_CLUSTER_NAME, getClusterName());
 
                 context.putEntity(pathQualifiedName, ret);
             }
@@ -757,8 +754,8 @@ public abstract class BaseHiveEvent {
         return hiveDDL;
     }
 
-    protected String getMetadataNamespace() {
-        return context.getMetadataNamespace();
+    protected String getClusterName() {
+        return context.getClusterName();
     }
 
     protected Database getDatabases(String dbName) throws Exception {
@@ -876,7 +873,7 @@ public abstract class BaseHiveEvent {
     protected String getQualifiedName(Table table, FieldSchema column) {
         String tblQualifiedName = getQualifiedName(table);
 
-        int sepPos = tblQualifiedName.lastIndexOf(QNAME_SEP_METADATA_NAMESPACE);
+        int sepPos = tblQualifiedName.lastIndexOf(QNAME_SEP_CLUSTER_NAME);
 
         if (sepPos == -1) {
             return tblQualifiedName + QNAME_SEP_ENTITY_NAME + column.getName().toLowerCase();
@@ -894,20 +891,19 @@ public abstract class BaseHiveEvent {
     }
 
     protected String getQualifiedName(BaseColumnInfo column) {
-        String dbName            = column.getTabAlias().getTable().getDbName();
-        String tableName         = column.getTabAlias().getTable().getTableName();
-        String colName           = column.getColumn() != null ? column.getColumn().getName() : null;
-        String metadataNamespace = getMetadataNamespace();
+        String dbName    = column.getTabAlias().getTable().getDbName();
+        String tableName = column.getTabAlias().getTable().getTableName();
+        String colName   = column.getColumn() != null ? column.getColumn().getName() : null;
 
         if (colName == null) {
-            return (dbName + QNAME_SEP_ENTITY_NAME + tableName + QNAME_SEP_METADATA_NAMESPACE).toLowerCase() + metadataNamespace;
+            return (dbName + QNAME_SEP_ENTITY_NAME + tableName + QNAME_SEP_CLUSTER_NAME).toLowerCase() + getClusterName();
         } else {
-            return (dbName + QNAME_SEP_ENTITY_NAME + tableName + QNAME_SEP_ENTITY_NAME + colName + QNAME_SEP_METADATA_NAMESPACE).toLowerCase() + metadataNamespace;
+            return (dbName + QNAME_SEP_ENTITY_NAME + tableName + QNAME_SEP_ENTITY_NAME + colName + QNAME_SEP_CLUSTER_NAME).toLowerCase() + getClusterName();
         }
     }
 
     protected String getQualifiedName(String dbName, String tableName, String colName) {
-        return (dbName + QNAME_SEP_ENTITY_NAME + tableName + QNAME_SEP_ENTITY_NAME + colName + QNAME_SEP_METADATA_NAMESPACE).toLowerCase() + getMetadataNamespace();
+        return (dbName + QNAME_SEP_ENTITY_NAME + tableName + QNAME_SEP_ENTITY_NAME + colName + QNAME_SEP_CLUSTER_NAME).toLowerCase() + getClusterName();
     }
 
     protected String getQualifiedName(URI location) {
@@ -925,14 +921,14 @@ public abstract class BaseHiveEvent {
 
     protected String getQualifiedName(String path) {
         if (path.startsWith(HdfsNameServiceResolver.HDFS_SCHEME)) {
-            return path + QNAME_SEP_METADATA_NAMESPACE + getMetadataNamespace();
+            return path + QNAME_SEP_CLUSTER_NAME + getClusterName();
         }
 
         return path.toLowerCase();
     }
 
     protected String getColumnQualifiedName(String tblQualifiedName, String columnName) {
-        int sepPos = tblQualifiedName.lastIndexOf(QNAME_SEP_METADATA_NAMESPACE);
+        int sepPos = tblQualifiedName.lastIndexOf(QNAME_SEP_CLUSTER_NAME);
 
         if (sepPos == -1) {
             return tblQualifiedName + QNAME_SEP_ENTITY_NAME + columnName.toLowerCase();
@@ -987,27 +983,26 @@ public abstract class BaseHiveEvent {
     }
 
     protected AtlasEntity toReferencedHBaseTable(Table table, AtlasEntitiesWithExtInfo entities) {
-        AtlasEntity    ret               = null;
-        HBaseTableInfo hBaseTableInfo    = new HBaseTableInfo(table);
-        String         hbaseNameSpace    = hBaseTableInfo.getHbaseNameSpace();
-        String         hbaseTableName    = hBaseTableInfo.getHbaseTableName();
-        String         metadataNamespace = getMetadataNamespace();
+        AtlasEntity    ret            = null;
+        HBaseTableInfo hBaseTableInfo = new HBaseTableInfo(table);
+        String         hbaseNameSpace = hBaseTableInfo.getHbaseNameSpace();
+        String         hbaseTableName = hBaseTableInfo.getHbaseTableName();
 
         if (hbaseTableName != null) {
             AtlasEntity nsEntity = new AtlasEntity(HBASE_TYPE_NAMESPACE);
             nsEntity.setAttribute(ATTRIBUTE_NAME, hbaseNameSpace);
-            nsEntity.setAttribute(ATTRIBUTE_CLUSTER_NAME, metadataNamespace);
-            nsEntity.setAttribute(ATTRIBUTE_QUALIFIED_NAME, getHBaseNameSpaceQualifiedName(metadataNamespace, hbaseNameSpace));
+            nsEntity.setAttribute(ATTRIBUTE_CLUSTER_NAME, getClusterName());
+            nsEntity.setAttribute(ATTRIBUTE_QUALIFIED_NAME, getHBaseNameSpaceQualifiedName(getClusterName(), hbaseNameSpace));
 
             ret = new AtlasEntity(HBASE_TYPE_TABLE);
 
             ret.setAttribute(ATTRIBUTE_NAME, hbaseTableName);
             ret.setAttribute(ATTRIBUTE_URI, hbaseTableName);
 
-            AtlasRelatedObjectId objIdRelatedObject = new AtlasRelatedObjectId(getObjectId(nsEntity), RELATIONSHIP_HBASE_TABLE_NAMESPACE);
+            AtlasRelatedObjectId objIdRelatedObject =     new AtlasRelatedObjectId(getObjectId(nsEntity), RELATIONSHIP_HBASE_TABLE_NAMESPACE);
 
             ret.setRelationshipAttribute(ATTRIBUTE_NAMESPACE, objIdRelatedObject);
-            ret.setAttribute(ATTRIBUTE_QUALIFIED_NAME, getHBaseTableQualifiedName(metadataNamespace, hbaseNameSpace, hbaseTableName));
+            ret.setAttribute(ATTRIBUTE_QUALIFIED_NAME, getHBaseTableQualifiedName(getClusterName(), hbaseNameSpace, hbaseTableName));
 
             entities.addReferredEntity(nsEntity);
             entities.addEntity(ret);
@@ -1029,12 +1024,12 @@ public abstract class BaseHiveEvent {
         return ret;
     }
 
-    private static String getHBaseTableQualifiedName(String metadataNamespace, String nameSpace, String tableName) {
-        return String.format("%s:%s@%s", nameSpace.toLowerCase(), tableName.toLowerCase(), metadataNamespace);
+    private static String getHBaseTableQualifiedName(String clusterName, String nameSpace, String tableName) {
+        return String.format("%s:%s@%s", nameSpace.toLowerCase(), tableName.toLowerCase(), clusterName);
     }
 
-    private static String getHBaseNameSpaceQualifiedName(String metadataNamespace, String nameSpace) {
-        return String.format("%s@%s", nameSpace.toLowerCase(), metadataNamespace);
+    private static String getHBaseNameSpaceQualifiedName(String clusterName, String nameSpace) {
+        return String.format("%s@%s", nameSpace.toLowerCase(), clusterName);
     }
 
     private boolean ignoreHDFSPathsinProcessQualifiedName() {