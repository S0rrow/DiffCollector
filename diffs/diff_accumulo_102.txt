diff --git a/src/core/src/main/java/org/apache/accumulo/core/client/mapreduce/InputFormatBase.java b/src/core/src/main/java/org/apache/accumulo/core/client/mapreduce/InputFormatBase.java
index e09b095164..bf04f32556 100644
--- a/src/core/src/main/java/org/apache/accumulo/core/client/mapreduce/InputFormatBase.java
+++ b/src/core/src/main/java/org/apache/accumulo/core/client/mapreduce/InputFormatBase.java
@@ -310,24 +310,17 @@ public abstract class InputFormatBase<K,V> extends InputFormat<K,V> {
    */
   public static void setRanges(Configuration conf, Collection<Range> ranges) {
     ArgumentChecker.notNull(ranges);
+    ArrayList<String> rangeStrings = new ArrayList<String>(ranges.size());
     try {
-      FileSystem fs = FileSystem.get(conf);
-      Path file = new Path(fs.getWorkingDirectory(), conf.get("mapred.job.name") + System.currentTimeMillis() + ".ranges");
-      conf.set(RANGES, file.toString());
-      FSDataOutputStream fos = fs.create(file, false);
-      fs.setPermission(file, new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));
-      fs.deleteOnExit(file);
-      
-      fos.writeInt(ranges.size());
       for (Range r : ranges) {
-        r.write(fos);
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        r.write(new DataOutputStream(baos));
+        rangeStrings.add(new String(Base64.encodeBase64(baos.toByteArray())));
       }
-      fos.close();
-      
-      DistributedCache.addCacheFile(file.toUri(), conf);
-    } catch (IOException e) {
-      throw new RuntimeException("Unable to write ranges to file", e);
+    } catch (IOException ex) {
+      throw new IllegalArgumentException("Unable to encode ranges to Base64", ex);
     }
+    conf.setStrings(RANGES, rangeStrings.toArray(new String[0]));
   }
   
   /**
@@ -800,21 +793,12 @@ public abstract class InputFormatBase<K,V> extends InputFormat<K,V> {
    */
   protected static List<Range> getRanges(Configuration conf) throws IOException {
     ArrayList<Range> ranges = new ArrayList<Range>();
-    FileSystem fs = FileSystem.get(conf);
-    String rangePath = conf.get(RANGES);
-    if (rangePath == null)
-      return ranges;
-    Path file = new Path(rangePath);
-    
-    FSDataInputStream fdis = fs.open(file);
-    int numRanges = fdis.readInt();
-    while (numRanges > 0) {
-      Range r = new Range();
-      r.readFields(fdis);
-      ranges.add(r);
-      numRanges--;
+    for (String rangeString : conf.getStringCollection(RANGES)) {
+      ByteArrayInputStream bais = new ByteArrayInputStream(Base64.decodeBase64(rangeString.getBytes()));
+      Range range = new Range();
+      range.readFields(new DataInputStream(bais));
+      ranges.add(range);
     }
-    fdis.close();
     return ranges;
   }
   