diff --git a/asterix-metadata/src/main/java/edu/uci/ics/asterix/metadata/utils/DatasetUtils.java b/asterix-metadata/src/main/java/edu/uci/ics/asterix/metadata/utils/DatasetUtils.java
index db86dbbf9e..50ec18cd78 100644
--- a/asterix-metadata/src/main/java/edu/uci/ics/asterix/metadata/utils/DatasetUtils.java
+++ b/asterix-metadata/src/main/java/edu/uci/ics/asterix/metadata/utils/DatasetUtils.java
@@ -7,87 +7,95 @@ import edu.uci.ics.asterix.formats.nontagged.AqlTypeTraitProvider;
 import edu.uci.ics.asterix.metadata.declared.AqlCompiledDatasetDecl;
 import edu.uci.ics.asterix.metadata.declared.AqlCompiledIndexDecl;
 import edu.uci.ics.asterix.metadata.declared.AqlCompiledInternalDatasetDetails;
-import edu.uci.ics.asterix.metadata.entities.Dataset;
-import edu.uci.ics.asterix.metadata.entities.InternalDatasetDetails;
-import edu.uci.ics.asterix.om.types.ARecordType;
+import edu.uci.ics.asterix.metadata.declared.AqlCompiledMetadataDeclarations;
 import edu.uci.ics.asterix.om.types.IAType;
-import edu.uci.ics.hyracks.algebricks.common.exceptions.AlgebricksException;
-import edu.uci.ics.hyracks.algebricks.data.IBinaryComparatorFactoryProvider;
-import edu.uci.ics.hyracks.algebricks.data.IBinaryHashFunctionFactoryProvider;
+import edu.uci.ics.hyracks.algebricks.core.algebra.data.IBinaryComparatorFactoryProvider;
+import edu.uci.ics.hyracks.algebricks.core.algebra.data.IBinaryHashFunctionFactoryProvider;
+import edu.uci.ics.hyracks.algebricks.core.algebra.expressions.ScalarFunctionCallExpression;
+import edu.uci.ics.hyracks.algebricks.core.algebra.operators.logical.OrderOperator.IOrder.OrderKind;
+import edu.uci.ics.hyracks.algebricks.core.algebra.runtime.base.IEvaluatorFactory;
+import edu.uci.ics.hyracks.algebricks.core.api.exceptions.AlgebricksException;
+import edu.uci.ics.hyracks.algebricks.core.utils.Triple;
 import edu.uci.ics.hyracks.api.dataflow.value.IBinaryComparatorFactory;
 import edu.uci.ics.hyracks.api.dataflow.value.IBinaryHashFunctionFactory;
 import edu.uci.ics.hyracks.api.dataflow.value.ITypeTraits;
 
 public class DatasetUtils {
-    public static IBinaryComparatorFactory[] computeKeysBinaryComparatorFactories(Dataset dataset,
-            ARecordType itemType, IBinaryComparatorFactoryProvider comparatorFactoryProvider)
+    public static IBinaryComparatorFactory[] computeKeysBinaryComparatorFactories(
+            AqlCompiledDatasetDecl compiledDatasetDecl, IBinaryComparatorFactoryProvider comparatorFactoryProvider)
             throws AlgebricksException {
-        if (dataset.getType() == DatasetType.EXTERNAL) {
+        if (compiledDatasetDecl.getDatasetType() == DatasetType.EXTERNAL)
             throw new AlgebricksException("not implemented");
-        }
-        List<String> partitioningKeys = getPartitioningKeys(dataset);
-        IBinaryComparatorFactory[] bcfs = new IBinaryComparatorFactory[partitioningKeys.size()];
-        for (int i = 0; i < partitioningKeys.size(); i++) {
-            IAType keyType = itemType.getFieldType(partitioningKeys.get(i));
-            bcfs[i] = comparatorFactoryProvider.getBinaryComparatorFactory(keyType, true);
+        List<Triple<IEvaluatorFactory, ScalarFunctionCallExpression, IAType>> partitioningFunctions;
+        partitioningFunctions = getPartitioningFunctions(compiledDatasetDecl);
+        int numKeys = partitioningFunctions.size();
+        IBinaryComparatorFactory[] bcfs = new IBinaryComparatorFactory[numKeys];
+        for (int i = 0; i < numKeys; i++) {
+            Triple<IEvaluatorFactory, ScalarFunctionCallExpression, IAType> evalFactoryAndType = partitioningFunctions
+                    .get(i);
+            IAType keyType = evalFactoryAndType.third;
+            bcfs[i] = comparatorFactoryProvider.getBinaryComparatorFactory(keyType, OrderKind.ASC);
         }
         return bcfs;
     }
 
-    public static IBinaryHashFunctionFactory[] computeKeysBinaryHashFunFactories(Dataset dataset, ARecordType itemType,
-            IBinaryHashFunctionFactoryProvider hashFunProvider) throws AlgebricksException {
-        if (dataset.getType() == DatasetType.EXTERNAL) {
+    public static IBinaryHashFunctionFactory[] computeKeysBinaryHashFunFactories(
+            AqlCompiledDatasetDecl compiledDatasetDecl, IBinaryHashFunctionFactoryProvider hashFunProvider)
+            throws AlgebricksException {
+        if (compiledDatasetDecl.getDatasetType() == DatasetType.EXTERNAL)
             throw new AlgebricksException("not implemented");
-        }
-        List<String> partitioningKeys = getPartitioningKeys(dataset);
-        IBinaryHashFunctionFactory[] bhffs = new IBinaryHashFunctionFactory[partitioningKeys.size()];
-        for (int i = 0; i < partitioningKeys.size(); i++) {
-            IAType keyType = itemType.getFieldType(partitioningKeys.get(i));
+        List<Triple<IEvaluatorFactory, ScalarFunctionCallExpression, IAType>> partitioningFunctions;
+        partitioningFunctions = ((AqlCompiledInternalDatasetDetails) compiledDatasetDecl.getAqlCompiledDatasetDetails())
+                .getPartitioningFunctions();
+        int numKeys = partitioningFunctions.size();
+        IBinaryHashFunctionFactory[] bhffs = new IBinaryHashFunctionFactory[numKeys];
+        for (int i = 0; i < numKeys; i++) {
+            Triple<IEvaluatorFactory, ScalarFunctionCallExpression, IAType> evalFactoryAndType = partitioningFunctions
+                    .get(i);
+            IAType keyType = evalFactoryAndType.third;
             bhffs[i] = hashFunProvider.getBinaryHashFunctionFactory(keyType);
         }
         return bhffs;
     }
 
-    public static ITypeTraits[] computeTupleTypeTraits(Dataset dataset, ARecordType itemType)
-            throws AlgebricksException {
-        if (dataset.getType() == DatasetType.EXTERNAL) {
+    public static ITypeTraits[] computeTupleTypeTraits(AqlCompiledDatasetDecl compiledDatasetDecl,
+            AqlCompiledMetadataDeclarations datasetDecls) throws AlgebricksException {
+        if (compiledDatasetDecl.getDatasetType() == DatasetType.EXTERNAL)
             throw new AlgebricksException("not implemented");
-        }
-        List<String> partitioningKeys = DatasetUtils.getPartitioningKeys(dataset);
-        int numKeys = partitioningKeys.size();
+        List<Triple<IEvaluatorFactory, ScalarFunctionCallExpression, IAType>> partitioningFunctions;
+        partitioningFunctions = ((AqlCompiledInternalDatasetDetails) compiledDatasetDecl.getAqlCompiledDatasetDetails())
+                .getPartitioningFunctions();
+        int numKeys = partitioningFunctions.size();
         ITypeTraits[] typeTraits = new ITypeTraits[numKeys + 1];
         for (int i = 0; i < numKeys; i++) {
-            IAType keyType = itemType.getFieldType(partitioningKeys.get(i));
+            Triple<IEvaluatorFactory, ScalarFunctionCallExpression, IAType> evalFactoryAndType = partitioningFunctions
+                    .get(i);
+            IAType keyType = evalFactoryAndType.third;
             typeTraits[i] = AqlTypeTraitProvider.INSTANCE.getTypeTrait(keyType);
         }
-        typeTraits[numKeys] = AqlTypeTraitProvider.INSTANCE.getTypeTrait(itemType);
+        IAType payloadType = datasetDecls.findType(compiledDatasetDecl.getItemTypeName());
+        typeTraits[numKeys] = AqlTypeTraitProvider.INSTANCE.getTypeTrait(payloadType);
         return typeTraits;
     }
 
-    public static List<String> getPartitioningKeys(Dataset dataset) {
-        return ((InternalDatasetDetails) dataset.getDatasetDetails()).getPartitioningKey();
+    public static List<Triple<IEvaluatorFactory, ScalarFunctionCallExpression, IAType>> getPartitioningFunctions(
+            AqlCompiledDatasetDecl decl) {
+        return ((AqlCompiledInternalDatasetDetails) decl.getAqlCompiledDatasetDetails()).getPartitioningFunctions();
     }
 
-    public static String getNodegroupName(Dataset dataset) {
-        return (((AqlCompiledInternalDatasetDetails) dataset.getDatasetDetails())).getNodegroupName();
+    public static String getNodegroupName(AqlCompiledDatasetDecl decl) {
+        return (((AqlCompiledInternalDatasetDetails) decl.getAqlCompiledDatasetDetails())).getNodegroupName();
     }
 
-    // TODO: TO be removed.
-    /*
-    public static AqlCompiledIndexDecl getPrimaryIndex(Dataset dataset, AqlCompiledMetadataDeclarations metadata) {
-        List<Index> datasetIndexes = metadata.getDatasetIndexes(dataverseName, datasetName);
-        
+    public static AqlCompiledIndexDecl getPrimaryIndex(AqlCompiledDatasetDecl decl) {
         return (((AqlCompiledInternalDatasetDetails) decl.getAqlCompiledDatasetDetails())).getPrimaryIndex();
+
     }
-    */
 
-    // TODO: To be removed.
-    /*
     public static AqlCompiledIndexDecl findSecondaryIndexByName(AqlCompiledDatasetDecl decl, String indexName) {
         return (((AqlCompiledInternalDatasetDetails) decl.getAqlCompiledDatasetDetails())
                 .findSecondaryIndexByName(indexName));
     }
-    */
 
     public static List<AqlCompiledIndexDecl> findSecondaryIndexesByOneOfTheKeys(AqlCompiledDatasetDecl decl,
             String fieldExpr) {
@@ -95,17 +103,17 @@ public class DatasetUtils {
                 .findSecondaryIndexesByOneOfTheKeys(fieldExpr);
     }
 
-    public static int getPositionOfPartitioningKeyField(Dataset dataset, String fieldExpr) {
-        List<String> partitioningKeys = DatasetUtils.getPartitioningKeys(dataset);
-        for (int i = 0; i < partitioningKeys.size(); i++) {
-            if (partitioningKeys.get(i).equals(fieldExpr)) {
-                return i;
-            }
-        }
-        return -1;
+    public static int getPositionOfPartitioningKeyField(AqlCompiledDatasetDecl decl, String fieldExpr) {
+        return (((AqlCompiledInternalDatasetDetails) decl.getAqlCompiledDatasetDetails()))
+                .getPositionOfPartitioningKeyField(fieldExpr);
+    }
+
+    public static List<String> getPartitioningExpressions(AqlCompiledDatasetDecl decl) {
+        return (((AqlCompiledInternalDatasetDetails) decl.getAqlCompiledDatasetDetails())).getPartitioningExprs();
     }
 
     public static List<AqlCompiledIndexDecl> getSecondaryIndexes(AqlCompiledDatasetDecl decl) {
         return (((AqlCompiledInternalDatasetDetails) decl.getAqlCompiledDatasetDetails())).getSecondaryIndexes();
     }
+
 }