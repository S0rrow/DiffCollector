diff --git a/jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/impl/Activator.java b/jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/impl/Activator.java
index 2dd203b88..9e63641f1 100644
--- a/jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/impl/Activator.java
+++ b/jmx/jmx-blueprint-core/src/main/java/org/apache/aries/jmx/blueprint/impl/Activator.java
@@ -18,6 +18,8 @@
  */
 package org.apache.aries.jmx.blueprint.impl;
 
+import java.util.List;
+import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import javax.management.InstanceAlreadyExistsException;
@@ -35,20 +37,22 @@ import org.osgi.framework.BundleContext;
 import org.osgi.framework.ServiceReference;
 import org.osgi.util.tracker.ServiceTracker;
 import org.osgi.util.tracker.ServiceTrackerCustomizer;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 public class Activator implements BundleActivator {
 
-    private static final Logger LOGGER = LoggerFactory.getLogger("org.apache.aries.jmx.blueprint");
-
     protected BundleContext bundleContext;
 
+    protected StandardMBean blueprintState;
     protected ObjectName blueprintStateName;
+
+    protected StandardMBean blueprintMetadata;
     protected ObjectName blueprintMetadataName;
 
+    protected List<MBeanServer> mbeanServers = new CopyOnWriteArrayList<MBeanServer>();
     protected ServiceTracker mbeanServiceTracker;
 
+    protected AtomicBoolean servicesRegistered = new AtomicBoolean(false);
+
     public void start(BundleContext context) throws Exception {
         this.bundleContext = context;
         this.blueprintStateName = new ObjectName(BlueprintStateMBean.OBJECTNAME);
@@ -58,37 +62,41 @@ public class Activator implements BundleActivator {
         // if there has been already a MBeanServer Service in place, this MBeanServerServiceTracker won't miss it
         mbeanServiceTracker = new ServiceTracker(bundleContext, MBeanServer.class.getCanonicalName(),
                 new MBeanServerServiceTracker());
-        LOGGER.debug("Awaiting MBeanServer service registration");
+        System.out.println("Awaiting MBeanServer service registration"); // Fine
         mbeanServiceTracker.open();
     }
 
     public void stop(BundleContext context) throws Exception {
+        for (MBeanServer mbeanServer : mbeanServers) {
+            this.deregisterMBeans(mbeanServer);
+        }
         mbeanServiceTracker.close();
+        mbeanServers.clear();
     }
 
     class MBeanServerServiceTracker implements ServiceTrackerCustomizer {
 
         public Object addingService(ServiceReference servicereference) {
             try {
-                LOGGER.debug("Adding MBeanServer: {}", servicereference);
+                System.out.println("Adding MBeanServer: " + servicereference); // Fine
                 final MBeanServer mbeanServer = (MBeanServer) bundleContext.getService(servicereference);
-                if (mbeanServer != null) {
-                    Activator.this.registerMBeans(mbeanServer);
-                }
+                Activator.this.mbeanServers.add(mbeanServer);
+                Activator.this.processRegister(mbeanServer);
                 return mbeanServer;
             } catch (RuntimeException e) {
-                LOGGER.error("uncaught exception in addingService", e);
+                System.out.println("uncaught exception in addingService" + e); // Severe
                 throw e;
             }
         }
 
         public void removedService(ServiceReference servicereference, Object obj) {
             try {
-                LOGGER.debug("Removing MBeanServer: {}", servicereference);
+                System.out.println("Removing MBeanServer: " + servicereference); // Fine
                 final MBeanServer mbeanServer = (MBeanServer) bundleContext.getService(servicereference);
-                Activator.this.deregisterMBeans(mbeanServer);
+                Activator.this.mbeanServers.remove(mbeanServer);
+                Activator.this.processDeregister(mbeanServer);
             } catch (Throwable e) {
-                LOGGER.debug("uncaught exception in removedService", e);
+                System.out.println("uncaught exception in removedService"); // Fine
             }
         }
 
@@ -98,54 +106,101 @@ public class Activator implements BundleActivator {
 
     }
 
-    protected void registerMBeans(MBeanServer mbeanServer) {
+    private void processRegister(final MBeanServer mbeanServer) {
+        Runnable registration = new Runnable() {
+            public void run() {
+                Activator.this.registerMBeans(mbeanServer);
+            }
+        };
+        Thread registrationThread = new Thread(registration, "Blueprint MBeans Registration");
+        registrationThread.setDaemon(true);
+        registrationThread.start();
+
+    }
+
+    private void processDeregister(final MBeanServer mbeanServer) {
+        Runnable deregister = new Runnable() {
+            public void run() {
+                Activator.this.deregisterMBeans(mbeanServer);
+            }
+        };
+
+        Thread deregisterThread = new Thread(deregister, "Blueprint MBeans Deregistration");
+        deregisterThread.setDaemon(true);
+        deregisterThread.start();
+    }
+
+    protected synchronized void registerMBeans(MBeanServer mbeanServer) {
+        // create BlueprintStateMBean
+        /* the StardardMBean does not implement the MBeanRegistration in jdk1.5 */
+        try {
+            blueprintState = new RegistrationStandardMBean(new BlueprintState(bundleContext), BlueprintStateMBean.class);
+        } catch (NotCompliantMBeanException e) {
+            System.out.println("Unable to create StandardMBean for BlueprintState" + e); // Severe
+            return;
+        }
+
         // register BlueprintStateMBean to MBean server
-        LOGGER.debug("Registering bundle state monitor with MBeanServer: {} with name: {}",
-                        mbeanServer, blueprintStateName);
+        System.out.println("Registering bundle state monitor with MBeanServer: " + mbeanServer + " with name: "
+                + blueprintStateName); // Fine
         try {
-            StandardMBean blueprintState = new RegistrableStandardEmitterMBean(new BlueprintState(bundleContext), BlueprintStateMBean.class);
             mbeanServer.registerMBean(blueprintState, blueprintStateName);
         } catch (InstanceAlreadyExistsException e) {
-            LOGGER.debug("Cannot register BlueprintStateMBean");
+            System.out.println("Cannot register BlueprintStateMBean"); // Fine
         } catch (MBeanRegistrationException e) {
-            LOGGER.error("Cannot register BlueprintStateMBean", e);
+            System.out.println("Cannot register BlueprintStateMBean" + e); // Severe
         } catch (NotCompliantMBeanException e) {
-            LOGGER.error("Cannot register BlueprintStateMBean", e);
+            System.out.println("Cannot register BlueprintStateMBean" + e); // Severe
         }
 
+        // create BlueprintMetadataMBean
+        try {
+            blueprintMetadata = new StandardMBean(new BlueprintMetadata(bundleContext), BlueprintMetadataMBean.class);
+        } catch (NotCompliantMBeanException e) {
+            System.out.println("Unable to create StandardMBean for BlueprintMetadata" + e); // Severe
+            return;
+        }
         // register BlueprintMetadataMBean to MBean server
-        LOGGER.debug("Registering bundle metadata monitor with MBeanServer: {} with name: {}",
-                    mbeanServer, blueprintMetadataName);
+        System.out.println("Registering bundle metadata monitor with MBeanServer: " + mbeanServer + " with name: "
+                + blueprintMetadataName); // Fine
         try {
-            StandardMBean blueprintMetadata = new StandardMBean(new BlueprintMetadata(bundleContext), BlueprintMetadataMBean.class);
             mbeanServer.registerMBean(blueprintMetadata, blueprintMetadataName);
         } catch (InstanceAlreadyExistsException e) {
-            LOGGER.debug("Cannot register BlueprintMetadataMBean");
+            System.out.println("Cannot register BlueprintMetadataMBean"); // Fine
         } catch (MBeanRegistrationException e) {
-            LOGGER.error("Cannot register BlueprintMetadataMBean", e);
+            System.out.println("Cannot register BlueprintMetadataMBean" + e); // Severe
         } catch (NotCompliantMBeanException e) {
-            LOGGER.error("Cannot register BlueprintMetadataMBean", e);
+            System.out.println("Cannot register BlueprintMetadataMBean" + e); // Severe
         }
+
+        servicesRegistered.set(true);
     }
 
-    protected void deregisterMBeans(MBeanServer mbeanServer) {
+    protected synchronized void deregisterMBeans(MBeanServer mbeanServer) {
+        if (!servicesRegistered.get()) {
+            return;
+        }
         // unregister BlueprintStateMBean from MBean server
         try {
             mbeanServer.unregisterMBean(blueprintStateName);
         } catch (InstanceNotFoundException e) {
-            LOGGER.debug("BlueprintStateMBean not found on deregistration");
+            System.out.println("BlueprintStateMBean not found on deregistration"); // Finest
         } catch (MBeanRegistrationException e) {
-            LOGGER.error("BlueprintStateMBean deregistration problem");
+            System.out.println("BlueprintStateMBean deregistration problem"); // Fine
         }
+        blueprintState = null;
 
         // unregister BlueprintMetadataMBean from MBean server
         try {
             mbeanServer.unregisterMBean(blueprintMetadataName);
         } catch (InstanceNotFoundException e) {
-            LOGGER.debug("BlueprintMetadataMBean not found on deregistration");
+            System.out.println("BlueprintMetadataMBean not found on deregistration"); // Finest
         } catch (MBeanRegistrationException e) {
-            LOGGER.error("BlueprintMetadataMBean deregistration problem");
+            System.out.println("BlueprintMetadataMBean deregistration problem"); // Fine
         }
+        blueprintMetadata = null;
+
+        servicesRegistered.set(false);
     }
 
 }