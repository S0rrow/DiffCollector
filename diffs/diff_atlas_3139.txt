diff --git a/repository/src/main/java/org/apache/atlas/repository/store/graph/v2/AtlasEntityStoreV2.java b/repository/src/main/java/org/apache/atlas/repository/store/graph/v2/AtlasEntityStoreV2.java
index 6f6ee1742..f511e2fc3 100644
--- a/repository/src/main/java/org/apache/atlas/repository/store/graph/v2/AtlasEntityStoreV2.java
+++ b/repository/src/main/java/org/apache/atlas/repository/store/graph/v2/AtlasEntityStoreV2.java
@@ -25,7 +25,6 @@ import org.apache.atlas.annotation.GraphTransaction;
 import org.apache.atlas.authorize.AtlasAdminAccessRequest;
 import org.apache.atlas.authorize.AtlasAuthorizationUtils;
 import org.apache.atlas.authorize.AtlasEntityAccessRequest;
-import org.apache.atlas.authorize.AtlasEntityAccessRequest.AtlasEntityAccessRequestBuilder;
 import org.apache.atlas.authorize.AtlasPrivilege;
 import org.apache.atlas.exception.AtlasBaseException;
 import org.apache.atlas.model.TypeCategory;
@@ -67,7 +66,6 @@ import javax.inject.Inject;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
-import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
@@ -331,11 +329,6 @@ public class AtlasEntityStoreV2 implements AtlasEntityStore {
         return createOrUpdate(entityStream, false, true, true);
     }
 
-    @Override
-    public EntityMutationResponse createOrUpdateForImportNoCommit(EntityStream entityStream) throws AtlasBaseException {
-        return createOrUpdate(entityStream, false, true, true);
-    }
-
     @Override
     @GraphTransaction
     public EntityMutationResponse updateEntity(AtlasObjectId objectId, AtlasEntityWithExtInfo updatedEntityInfo, boolean isPartialUpdate) throws AtlasBaseException {
@@ -841,44 +834,14 @@ public class AtlasEntityStoreV2 implements AtlasEntityStore {
             throw new AtlasBaseException(AtlasErrorCode.INVALID_PARAMETERS, "guid is null/empty");
         }
 
-        if (MapUtils.isEmpty(entityNamespaces)) {
-            throw new AtlasBaseException(AtlasErrorCode.INVALID_PARAMETERS, "entityNamespaces is null/empty");
-        }
-
         AtlasVertex entityVertex = AtlasGraphUtilsV2.findByGuid(guid);
 
         if (entityVertex == null) {
             throw new AtlasBaseException(AtlasErrorCode.INSTANCE_GUID_NOT_FOUND, guid);
         }
 
-        String                           typeName       = getTypeName(entityVertex);
-        AtlasEntityType                  entityType     = typeRegistry.getEntityTypeByName(typeName);
-        AtlasEntityHeader                entityHeader   = entityRetriever.toAtlasEntityHeaderWithClassifications(entityVertex);
-        Map<String, Map<String, Object>> currNamespaces = entityRetriever.getEntityNamespaces(entityVertex);
-        Set<String>                      updatedNsNames = new HashSet<>();
-
-        for (String nsName : entityType.getNamespaceAttributes().keySet()) {
-            Map<String, Object> nsAttrs     = entityNamespaces.get(nsName);
-            Map<String, Object> currNsAttrs = currNamespaces != null ? currNamespaces.get(nsName) : null;
-
-            if (nsAttrs == null && !isOverwrite) {
-                continue;
-            } else if (MapUtils.isEmpty(nsAttrs) && MapUtils.isEmpty(currNsAttrs)) { // no change
-                continue;
-            } else if (Objects.equals(nsAttrs, currNsAttrs)) { // no change
-                continue;
-            }
-
-            updatedNsNames.add(nsName);
-        }
-
-        AtlasEntityAccessRequestBuilder  requestBuilder = new AtlasEntityAccessRequestBuilder(typeRegistry, AtlasPrivilege.ENTITY_UPDATE_NAMESPACE, entityHeader);
-
-        for (String nsName : updatedNsNames) {
-            requestBuilder.setNamespaceName(nsName);
-
-            AtlasAuthorizationUtils.verifyAccess(requestBuilder.build(), "add/update namespace: guid=", guid, ", namespace=", nsName);
-        }
+        String          typeName   = getTypeName(entityVertex);
+        AtlasEntityType entityType = typeRegistry.getEntityTypeByName(typeName);
 
         validateNamespaceAttributes(entityVertex, entityType, entityNamespaces, isOverwrite);
 
@@ -904,27 +867,14 @@ public class AtlasEntityStoreV2 implements AtlasEntityStore {
             throw new AtlasBaseException(AtlasErrorCode.INVALID_PARAMETERS, "guid is null/empty");
         }
 
-        if (MapUtils.isEmpty(entityNamespaces)) {
-            throw new AtlasBaseException(AtlasErrorCode.INVALID_PARAMETERS, "entityNamespaces is null/empty");
-        }
-
         AtlasVertex entityVertex = AtlasGraphUtilsV2.findByGuid(guid);
 
         if (entityVertex == null) {
             throw new AtlasBaseException(AtlasErrorCode.INSTANCE_GUID_NOT_FOUND, guid);
         }
 
-        String                          typeName       = getTypeName(entityVertex);
-        AtlasEntityType                 entityType     = typeRegistry.getEntityTypeByName(typeName);
-        AtlasEntityHeader               entityHeader   = entityRetriever.toAtlasEntityHeaderWithClassifications(entityVertex);
-
-        AtlasEntityAccessRequestBuilder requestBuilder = new AtlasEntityAccessRequestBuilder(typeRegistry, AtlasPrivilege.ENTITY_UPDATE_NAMESPACE, entityHeader);
-
-        for (String nsName : entityNamespaces.keySet()) {
-            requestBuilder.setNamespaceName(nsName);
-
-            AtlasAuthorizationUtils.verifyAccess(requestBuilder.build(), "remove namespace: guid=", guid, ", namespace=", nsName);
-        }
+        String          typeName   = getTypeName(entityVertex);
+        AtlasEntityType entityType = typeRegistry.getEntityTypeByName(typeName);
 
         entityGraphMapper.removeNamespaceAttributes(entityVertex, entityType, entityNamespaces);
 
@@ -952,39 +902,6 @@ public class AtlasEntityStoreV2 implements AtlasEntityStore {
 
         validateLabels(labels);
 
-        AtlasEntityHeader entityHeader  = entityRetriever.toAtlasEntityHeaderWithClassifications(entityVertex);
-        Set<String>       addedLabels   = Collections.emptySet();
-        Set<String>       removedLabels = Collections.emptySet();
-
-        if (CollectionUtils.isEmpty(entityHeader.getLabels())) {
-            addedLabels = labels;
-        } else if (CollectionUtils.isEmpty(labels)) {
-            removedLabels = entityHeader.getLabels();
-        } else {
-            addedLabels   = new HashSet<String>(CollectionUtils.subtract(labels, entityHeader.getLabels()));
-            removedLabels = new HashSet<String>(CollectionUtils.subtract(entityHeader.getLabels(), labels));
-        }
-
-        if (addedLabels != null) {
-            AtlasEntityAccessRequestBuilder requestBuilder = new AtlasEntityAccessRequestBuilder(typeRegistry, AtlasPrivilege.ENTITY_ADD_LABEL, entityHeader);
-
-            for (String label : addedLabels) {
-                requestBuilder.setLabel(label);
-
-                AtlasAuthorizationUtils.verifyAccess(requestBuilder.build(), "add label: guid=", guid, ", label=", label);
-            }
-        }
-
-        if (removedLabels != null) {
-            AtlasEntityAccessRequestBuilder requestBuilder = new AtlasEntityAccessRequestBuilder(typeRegistry, AtlasPrivilege.ENTITY_REMOVE_LABEL, entityHeader);
-
-            for (String label : removedLabels) {
-                requestBuilder.setLabel(label);
-
-                AtlasAuthorizationUtils.verifyAccess(requestBuilder.build(), "remove label: guid=", guid, ", label=", label);
-            }
-        }
-
         entityGraphMapper.setLabels(entityVertex, labels);
 
         if (LOG.isDebugEnabled()) {
@@ -1003,25 +920,12 @@ public class AtlasEntityStoreV2 implements AtlasEntityStore {
             throw new AtlasBaseException(AtlasErrorCode.INVALID_PARAMETERS, "guid is null/empty");
         }
 
-        if (CollectionUtils.isEmpty(labels)) {
-            throw new AtlasBaseException(AtlasErrorCode.INVALID_PARAMETERS, "labels is null/empty");
-        }
-
         AtlasVertex entityVertex = AtlasGraphUtilsV2.findByGuid(guid);
 
         if (entityVertex == null) {
             throw new AtlasBaseException(AtlasErrorCode.INSTANCE_GUID_NOT_FOUND, guid);
         }
 
-        AtlasEntityHeader               entityHeader   = entityRetriever.toAtlasEntityHeaderWithClassifications(entityVertex);
-        AtlasEntityAccessRequestBuilder requestBuilder = new AtlasEntityAccessRequestBuilder(typeRegistry, AtlasPrivilege.ENTITY_REMOVE_LABEL, entityHeader);
-
-        for (String label : labels) {
-            requestBuilder.setLabel(label);
-
-            AtlasAuthorizationUtils.verifyAccess(requestBuilder.build(), "remove label: guid=", guid, ", label=", label);
-        }
-
         validateLabels(labels);
 
         entityGraphMapper.removeLabels(entityVertex, labels);
@@ -1042,25 +946,12 @@ public class AtlasEntityStoreV2 implements AtlasEntityStore {
             throw new AtlasBaseException(AtlasErrorCode.INVALID_PARAMETERS, "guid is null/empty");
         }
 
-        if (CollectionUtils.isEmpty(labels)) {
-            throw new AtlasBaseException(AtlasErrorCode.INVALID_PARAMETERS, "labels is null/empty");
-        }
-
         AtlasVertex entityVertex = AtlasGraphUtilsV2.findByGuid(guid);
 
         if (entityVertex == null) {
             throw new AtlasBaseException(AtlasErrorCode.INSTANCE_GUID_NOT_FOUND, guid);
         }
 
-        AtlasEntityHeader               entityHeader   = entityRetriever.toAtlasEntityHeaderWithClassifications(entityVertex);
-        AtlasEntityAccessRequestBuilder requestBuilder = new AtlasEntityAccessRequestBuilder(typeRegistry, AtlasPrivilege.ENTITY_ADD_LABEL, entityHeader);
-
-        for (String label : labels) {
-            requestBuilder.setLabel(label);
-
-            AtlasAuthorizationUtils.verifyAccess(requestBuilder.build(), "add/update label: guid=", guid, ", label=", label);
-        }
-
         validateLabels(labels);
 
         entityGraphMapper.addLabels(entityVertex, labels);
@@ -1215,10 +1106,8 @@ public class AtlasEntityStoreV2 implements AtlasEntityStore {
 
             ret.setGuidAssignments(context.getGuidAssignments());
 
-            if (!RequestContext.get().isImportInProgress()) {
-                // Notify the change listeners
-                entityChangeNotifier.onEntitiesMutated(ret, RequestContext.get().isImportInProgress());
-            }
+            // Notify the change listeners
+            entityChangeNotifier.onEntitiesMutated(ret, RequestContext.get().isImportInProgress());
 
             if (LOG.isDebugEnabled()) {
                 LOG.debug("<== createOrUpdate()");
@@ -1488,19 +1377,19 @@ public class AtlasEntityStoreV2 implements AtlasEntityStore {
     private void validateNamespaceAttributes(AtlasVertex entityVertex, AtlasEntityType entityType, Map<String, Map<String, Object>> entityNamespaces, boolean isOverwrite) throws AtlasBaseException {
         List<String> messages = new ArrayList<>();
 
-        Map<String, Map<String, AtlasNamespaceAttribute>> entityTypeNamespaces = entityType.getNamespaceAttributes();
+        Map<String, List<AtlasNamespaceAttribute>> entityTypeNamespaces = entityType.getNamespaceAttributes();
 
         for (String nsName : entityNamespaces.keySet()) {
-            if (!entityTypeNamespaces.containsKey(nsName)) {
+            if (!entityNamespaces.containsKey(nsName)) {
                 messages.add(nsName + ": invalid namespace for entity type " + entityType.getTypeName());
 
                 continue;
             }
 
-            Map<String, AtlasNamespaceAttribute> entityTypeNsAttributes = entityTypeNamespaces.get(nsName);
-            Map<String, Object>                  entityNsAttributes     = entityNamespaces.get(nsName);
+            List<AtlasNamespaceAttribute> entityTypeNsAttributes = entityTypeNamespaces.get(nsName);
+            Map<String, Object>           entityNsAttributes     = entityNamespaces.get(nsName);
 
-            for (AtlasNamespaceAttribute nsAttribute : entityTypeNsAttributes.values()) {
+            for (AtlasNamespaceAttribute nsAttribute : entityTypeNsAttributes) {
                 AtlasType attrType  = nsAttribute.getAttributeType();
                 String    attrName  = nsAttribute.getName();
                 Object    attrValue = entityNsAttributes.get(attrName);