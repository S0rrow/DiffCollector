diff --git a/artemis-jdbc-store/src/main/java/org/apache/activemq/artemis/jdbc/store/drivers/AbstractJDBCDriver.java b/artemis-jdbc-store/src/main/java/org/apache/activemq/artemis/jdbc/store/drivers/AbstractJDBCDriver.java
index 79cc1e52ef..6d8be716fa 100644
--- a/artemis-jdbc-store/src/main/java/org/apache/activemq/artemis/jdbc/store/drivers/AbstractJDBCDriver.java
+++ b/artemis-jdbc-store/src/main/java/org/apache/activemq/artemis/jdbc/store/drivers/AbstractJDBCDriver.java
@@ -16,48 +16,38 @@
  */
 package org.apache.activemq.artemis.jdbc.store.drivers;
 
-import javax.sql.DataSource;
 import java.sql.Connection;
 import java.sql.Driver;
-import java.sql.DriverManager;
-import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Statement;
 import java.util.Properties;
 
+import org.apache.activemq.artemis.jdbc.store.JDBCUtils;
 import org.apache.activemq.artemis.jdbc.store.sql.SQLProvider;
 import org.apache.activemq.artemis.journal.ActiveMQJournalLogger;
-import org.jboss.logging.Logger;
 
 /**
  * Class to hold common database functionality such as drivers and connections
  */
 public abstract class AbstractJDBCDriver {
 
-   private static final Logger logger = Logger.getLogger(AbstractJDBCDriver.class);
-
    protected Connection connection;
 
    protected SQLProvider sqlProvider;
 
-   private String jdbcConnectionUrl;
+   protected String jdbcConnectionUrl;
 
-   private String jdbcDriverClass;
+   protected String jdbcDriverClass;
 
-   private DataSource dataSource;
+   protected Driver dbDriver;
 
    public AbstractJDBCDriver() {
    }
 
-   public AbstractJDBCDriver(SQLProvider sqlProvider, String jdbcConnectionUrl, String jdbcDriverClass) {
+   public AbstractJDBCDriver(String tableName, String jdbcConnectionUrl, String jdbcDriverClass) {
       this.jdbcConnectionUrl = jdbcConnectionUrl;
       this.jdbcDriverClass = jdbcDriverClass;
-      this.sqlProvider = sqlProvider;
-   }
-
-   public AbstractJDBCDriver(DataSource dataSource, SQLProvider provider) {
-      this.dataSource = dataSource;
-      this.sqlProvider = provider;
+      this.sqlProvider = JDBCUtils.getSQLProvider(jdbcDriverClass, tableName);
    }
 
    public void start() throws Exception {
@@ -77,75 +67,31 @@ public abstract class AbstractJDBCDriver {
    protected abstract void createSchema() throws SQLException;
 
    protected void createTable(String schemaSql) throws SQLException {
-      createTableIfNotExists(connection, sqlProvider.getTableName(), schemaSql);
+      JDBCUtils.createTableIfNotExists(connection, sqlProvider.getTableName(), schemaSql);
    }
 
    protected void connect() throws Exception {
-      if (dataSource != null) {
-         connection = dataSource.getConnection();
-      } else {
-         try {
-            Driver dbDriver = getDriver(jdbcDriverClass);
-            connection = dbDriver.connect(jdbcConnectionUrl, new Properties());
-         } catch (SQLException e) {
-            ActiveMQJournalLogger.LOGGER.error("Unable to connect to database using URL: " + jdbcConnectionUrl);
-            throw new RuntimeException("Error connecting to database", e);
-         }
+      try {
+         dbDriver = JDBCUtils.getDriver(jdbcDriverClass);
+         connection = dbDriver.connect(jdbcConnectionUrl, new Properties());
+      }
+      catch (SQLException e) {
+         ActiveMQJournalLogger.LOGGER.error("Unable to connect to database using URL: " + jdbcConnectionUrl);
+         throw new RuntimeException("Error connecting to database", e);
       }
    }
 
    public void destroy() throws Exception {
       try {
          connection.setAutoCommit(false);
-         try (Statement statement = connection.createStatement()) {
-            statement.executeUpdate("DROP TABLE " + sqlProvider.getTableName());
-         }
+         Statement statement = connection.createStatement();
+         statement.executeUpdate("DROP TABLE " + sqlProvider.getTableName());
+         statement.close();
          connection.commit();
-      } catch (SQLException e) {
-         connection.rollback();
-         throw e;
       }
-   }
-
-   private static void createTableIfNotExists(Connection connection, String tableName, String sql) throws SQLException {
-      logger.tracef("Validating if table %s didn't exist before creating", tableName);
-      try {
-         connection.setAutoCommit(false);
-         try (ResultSet rs = connection.getMetaData().getTables(null, null, tableName, null)) {
-            if (rs != null && !rs.next()) {
-               logger.tracef("Table %s did not exist, creating it with SQL=%s", tableName, sql);
-               try (Statement statement = connection.createStatement()) {
-                  statement.executeUpdate(sql);
-               }
-            }
-         }
-         connection.commit();
-      } catch (SQLException e) {
+      catch (SQLException e) {
          connection.rollback();
-      }
-   }
-
-   private Driver getDriver(String className) throws Exception {
-      try {
-         Driver driver = (Driver) Class.forName(className).newInstance();
-
-         // Shutdown the derby if using the derby embedded driver.
-         if (className.equals("org.apache.derby.jdbc.EmbeddedDriver")) {
-            Runtime.getRuntime().addShutdownHook(new Thread() {
-               @Override
-               public void run() {
-                  try {
-                     DriverManager.getConnection("jdbc:derby:;shutdown=true");
-                  } catch (Exception e) {
-                  }
-               }
-            });
-         }
-         return driver;
-      } catch (ClassNotFoundException cnfe) {
-         throw new RuntimeException("Could not find class: " + className);
-      } catch (Exception e) {
-         throw new RuntimeException("Unable to instantiate driver class: ", e);
+         throw e;
       }
    }
 
@@ -157,19 +103,27 @@ public abstract class AbstractJDBCDriver {
       this.connection = connection;
    }
 
+   public SQLProvider getSqlProvider() {
+      return sqlProvider;
+   }
+
    public void setSqlProvider(SQLProvider sqlProvider) {
       this.sqlProvider = sqlProvider;
    }
 
+   public String getJdbcConnectionUrl() {
+      return jdbcConnectionUrl;
+   }
+
    public void setJdbcConnectionUrl(String jdbcConnectionUrl) {
       this.jdbcConnectionUrl = jdbcConnectionUrl;
    }
 
-   public void setJdbcDriverClass(String jdbcDriverClass) {
-      this.jdbcDriverClass = jdbcDriverClass;
+   public String getJdbcDriverClass() {
+      return jdbcDriverClass;
    }
 
-   public void setDataSource(DataSource dataSource) {
-      this.dataSource = dataSource;
+   public void setJdbcDriverClass(String jdbcDriverClass) {
+      this.jdbcDriverClass = jdbcDriverClass;
    }
 }