diff --git a/modules/xbaya-gui/src/main/java/org/apache/airavata/xbaya/util/InterpreterUtil.java b/modules/xbaya-gui/src/main/java/org/apache/airavata/xbaya/util/InterpreterUtil.java
index 7a0f88272..7e193b6ed 100644
--- a/modules/xbaya-gui/src/main/java/org/apache/airavata/xbaya/util/InterpreterUtil.java
+++ b/modules/xbaya-gui/src/main/java/org/apache/airavata/xbaya/util/InterpreterUtil.java
@@ -20,40 +20,21 @@
 */
 package org.apache.airavata.xbaya.util;
 
-import java.awt.*;
-import java.util.*;
-import java.util.List;
-
 import org.apache.airavata.xbaya.XBayaException;
 import org.apache.airavata.xbaya.XBayaRuntimeException;
 import org.apache.airavata.xbaya.graph.DataPort;
 import org.apache.airavata.xbaya.graph.Node;
 import org.apache.airavata.xbaya.graph.amazon.InstanceNode;
-import org.apache.airavata.xbaya.graph.gui.NodeGUI;
-import org.apache.airavata.xbaya.graph.impl.NodeImpl;
-import org.apache.airavata.xbaya.graph.subworkflow.SubWorkflowNode;
-import org.apache.airavata.xbaya.graph.system.ConstantNode;
-import org.apache.airavata.xbaya.graph.system.EndForEachNode;
-import org.apache.airavata.xbaya.graph.system.EndifNode;
-import org.apache.airavata.xbaya.graph.system.ForEachNode;
-import org.apache.airavata.xbaya.graph.system.InputNode;
-import org.apache.airavata.xbaya.graph.system.SystemDataPort;
-import org.apache.airavata.xbaya.graph.system.gui.DifferedInputNode;
-import org.apache.airavata.xbaya.graph.ws.WSGraph;
-import org.apache.airavata.xbaya.graph.ws.WSNode;
-import org.apache.airavata.xbaya.graph.ws.WSPort;
+import org.apache.airavata.xbaya.graph.system.*;
 import org.apache.airavata.xbaya.interpretor.SystemComponentInvoker;
 import org.apache.airavata.xbaya.interpretor.WorkFlowInterpreterException;
 import org.apache.airavata.xbaya.invoker.GenericInvoker;
 import org.apache.airavata.xbaya.invoker.Invoker;
 import org.apache.airavata.xbaya.invoker.WorkflowInvokerWrapperForGFacInvoker;
-import org.apache.airavata.xbaya.monitor.gui.MonitorEventHandler;
 import org.xmlpull.infoset.XmlElement;
-
-import org.xmlpull.infoset.impl.XmlElementWithViewsImpl;
 import xsul5.XmlConstants;
-import xsul5.wsdl.WsdlPort;
-import xsul5.wsdl.WsdlService;
+
+import java.util.*;
 
 public class InterpreterUtil {
     /**
@@ -129,14 +110,8 @@ public class InterpreterUtil {
 						}
 					}
 				} else if (workflowInvoker instanceof SystemComponentInvoker) {
-                    int index = forEachInputNode.getOutputPorts().indexOf(inputPort.getEdge(0).getFromPort());
-                    String outputName = "";
-                    if(forEachInputNode.getInputPort(index) instanceof SystemDataPort){
-                       outputName = ((SystemDataPort)forEachInputNode.getInputPort(index)).getWSComponentPort().getName();
-                    }else if(forEachInputNode.getInputPort(index) instanceof WSPort){
-                         outputName = ((SystemDataPort)forEachInputNode.getInputPort(
-                        forEachInputNode.getOutputPorts().indexOf(inputPort.getEdge(0).getFromPort()))).getWSComponentPort().getName();
-                    }
+					String outputName = forEachInputNode.getOutputPort(0)
+							.getName();
 					returnValForProvenance = workflowInvoker
 							.getOutput(outputName);
 					XmlElement msgElmt = XmlConstants.BUILDER
@@ -174,8 +149,6 @@ public class InterpreterUtil {
 			outputVal = ((InputNode) fromNode).getDefaultValue();
 		} else if (fromNode instanceof ConstantNode) {
 			outputVal = ((ConstantNode) fromNode).getValue();
-		} else if (fromNode instanceof DifferedInputNode && ((DifferedInputNode) fromNode).isConfigured()) {
-			outputVal = ((DifferedInputNode) fromNode).getDefaultValue();
 		} else if (fromNode instanceof EndifNode) {
 			Invoker fromInvoker = invokerMap.get(fromNode);
 			outputVal = fromInvoker.getOutput(inputPort.getFromPort().getID());
@@ -184,14 +157,7 @@ public class InterpreterUtil {
 		} else if (fromNode instanceof EndForEachNode) {
 			outputVal = "";
 			Invoker workflowInvoker = invokerMap.get(fromNode);
-			String outputName = "";
-            if (inputPort instanceof SystemDataPort) {
-                outputName = ((SystemDataPort) inputPort).getWSComponentPort().getName();
-
-            } else if (inputPort instanceof WSPort) {
-                outputName = ((SystemDataPort)fromNode.getInputPort(
-                        fromNode.getOutputPorts().indexOf(inputPort.getEdge(0).getFromPort()))).getWSComponentPort().getName();
-            }
+			String outputName = fromNode.getOutputPort(0).getName();
 			XmlElement msgElmt = XmlConstants.BUILDER
 					.parseFragmentFromString("<temp>"
 							+ workflowInvoker.getOutput(outputName) + "</temp>");
@@ -199,13 +165,10 @@ public class InterpreterUtil {
 			while (valItr.hasNext()) {
 				Object object2 = valItr.next();
 				if (object2 instanceof XmlElement) {
-
-                    if(((XmlElement) object2).children().iterator().hasNext()){
 					outputVal = outputVal
 							+ ","
 							+ ((XmlElement) object2).children().iterator()
 									.next().toString();
-                    }
 				}
 			}
 
@@ -221,8 +184,6 @@ public class InterpreterUtil {
 					outputVal = fromInvoker.getOutput(inputPort.getFromPort()
 							.getName());
 
-
-
 			} catch (Exception e) {
 				// if the value is still null look it up from the inputport name
 				// because the value is set to the input port name at some point
@@ -300,8 +261,8 @@ public class InterpreterUtil {
 						}
 					}
 				} else if (workflowInvoker instanceof WorkflowInvokerWrapperForGFacInvoker) {
-                    String outputName = forEachInputNode.getOutputPort(0)
-							.getName();
+
+                    String outputName = forEachInputNode.getOutputPort(0).getName();
 					returnValForProvenance = workflowInvoker
 							.getOutput(outputName);
 					org.xmlpull.v1.builder.XmlElement msgElmt = (org.xmlpull.v1.builder.XmlElement) returnValForProvenance;
@@ -321,13 +282,9 @@ public class InterpreterUtil {
 					}
                         inputNumbers[inputPorts.indexOf(forEachInputPort)] = index;
 				} else if (workflowInvoker instanceof SystemComponentInvoker) {
-				    int portIndex = forEachInputNode.getOutputPorts().indexOf(forEachInputPort.getEdge(0).getFromPort());
-                    String outputName = "";
-                    if(forEachInputNode.getInputPort(portIndex) instanceof SystemDataPort){
-                       outputName = ((SystemDataPort)forEachInputNode.getInputPort(portIndex)).getWSComponentPort().getName();
-                    }else if(forEachInputNode.getInputPort(portIndex) instanceof WSPort){
-                        outputName = ((WSPort)forEachInputNode.getInputPort(portIndex)).getComponentPort().getName();
-                    }
+
+					String outputName = forEachInputNode.getOutputPort(0)
+							.getName();
 					returnValForProvenance = workflowInvoker
 							.getOutput(outputName);
 					XmlElement msgElmt = XmlConstants.BUILDER
@@ -351,74 +308,4 @@ public class InterpreterUtil {
     }
         return inputNumbers;
     }
-    	public static ArrayList<Node> getFinishedNodesDynamically(WSGraph graph) {
-		return getNodesWithBodyColor(MonitorEventHandler.NodeState.FINISHED.color,graph);
-	}
-
-	public static ArrayList<Node> getFailedNodesDynamically(WSGraph graph) {
-		return getNodesWithBodyColor(MonitorEventHandler.NodeState.FAILED.color,graph);
-	}
-
-	public static ArrayList<Node> getWaitingNodesDynamically(WSGraph graph) {
-		return getNodesWithBodyColor(NodeGUI.DEFAULT_BODY_COLOR,graph);
-	}
-
-	public static ArrayList<Node> getNodesWithBodyColor(Color color,WSGraph graph) {
-		ArrayList<Node> list = new ArrayList<Node>();
-		List<NodeImpl> nodes = graph.getNodes();
-		for (Node node : nodes) {
-			if (node.getGUI().getBodyColor() == color) {
-				list.add(node);
-			}
-		}
-		return list;
-	}
-
-	public static int getRunningNodeCountDynamically(WSGraph graph) {
-		return getNodeCountWithBodyColor(MonitorEventHandler.NodeState.EXECUTING.color,graph);
-	}
-
-	public static int getFailedNodeCountDynamically(WSGraph graph) {
-        return getFailedNodesDynamically(graph).size();
-	}
-
-	public static int getWaitingNodeCountDynamically(WSGraph graph) {
-		return getNodeCountWithBodyColor(NodeGUI.DEFAULT_BODY_COLOR,graph);
-	}
-
-	public static int getNodeCountWithBodyColor(Color color,WSGraph graph) {
-		int sum = 0;
-		List<NodeImpl> nodes = graph.getNodes();
-		for (Node node : nodes) {
-			if (node.getGUI().getBodyColor() == color) {
-				++sum;
-			}
-		}
-		return sum;
-	}
-
-    public static String getEPR(WSNode wsNode) {
-		Iterable<WsdlService> services = wsNode.getComponent().getWSDL()
-				.services();
-		Iterator<WsdlService> iterator = services.iterator();
-		if (iterator.hasNext()) {
-			Iterable<WsdlPort> ports = iterator.next().ports();
-			Iterator<WsdlPort> portIterator = ports.iterator();
-			if (portIterator.hasNext()) {
-				WsdlPort port = portIterator.next();
-				Iterable children = port.xml().children();
-				Iterator childIterator = children.iterator();
-				while (childIterator.hasNext()) {
-					Object next = childIterator.next();
-					if (next instanceof XmlElementWithViewsImpl) {
-						org.xmlpull.infoset.XmlAttribute epr = ((XmlElementWithViewsImpl) next)
-								.attribute("location");
-						return epr.getValue();
-					}
-				}
-			}
-		}
-		return null;
-	}
-
 }