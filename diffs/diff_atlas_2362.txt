diff --git a/client/src/main/java/org/apache/atlas/AtlasClient.java b/client/src/main/java/org/apache/atlas/AtlasClient.java
index 114548c7d..06d9206a1 100755
--- a/client/src/main/java/org/apache/atlas/AtlasClient.java
+++ b/client/src/main/java/org/apache/atlas/AtlasClient.java
@@ -25,9 +25,7 @@ import com.sun.jersey.api.client.config.DefaultClientConfig;
 import com.sun.jersey.client.urlconnection.URLConnectionClientHandler;
 import org.apache.atlas.security.SecureClientUtils;
 import org.apache.atlas.typesystem.Referenceable;
-import org.apache.atlas.typesystem.TypesDef;
 import org.apache.atlas.typesystem.json.InstanceSerialization;
-import org.apache.atlas.typesystem.json.TypesSerialization;
 import org.apache.commons.configuration.Configuration;
 import org.apache.commons.lang.StringUtils;
 import org.apache.hadoop.security.UserGroupInformation;
@@ -68,7 +66,8 @@ public class AtlasClient {
 
     public static final String BASE_URI = "api/atlas/";
     public static final String TYPES = "types";
-    public static final String URI_ENTITY = "entities";
+    public static final String URI_ENTITY = "entity";
+    public static final String URI_ENTITIES = "entities";
     public static final String URI_SEARCH = "discovery/search";
     public static final String URI_LINEAGE = "lineage/hive/table";
 
@@ -133,43 +132,39 @@ public class AtlasClient {
     enum API {
 
         //Type operations
-        CREATE_TYPE(BASE_URI + TYPES, HttpMethod.POST, Response.Status.CREATED),
-        UPDATE_TYPE(BASE_URI + TYPES, HttpMethod.PUT, Response.Status.OK),
-        GET_TYPE(BASE_URI + TYPES, HttpMethod.GET, Response.Status.OK),
-        LIST_TYPES(BASE_URI + TYPES, HttpMethod.GET, Response.Status.OK),
-        LIST_TRAIT_TYPES(BASE_URI + TYPES + "?type=trait", HttpMethod.GET, Response.Status.OK),
+        CREATE_TYPE(BASE_URI + TYPES, HttpMethod.POST),
+        GET_TYPE(BASE_URI + TYPES, HttpMethod.GET),
+        LIST_TYPES(BASE_URI + TYPES, HttpMethod.GET),
+        LIST_TRAIT_TYPES(BASE_URI + TYPES + "?type=trait", HttpMethod.GET),
 
         //Entity operations
-        CREATE_ENTITY(BASE_URI + URI_ENTITY, HttpMethod.POST, Response.Status.CREATED),
-        GET_ENTITY(BASE_URI + URI_ENTITY, HttpMethod.GET, Response.Status.OK),
-        UPDATE_ENTITY(BASE_URI + URI_ENTITY, HttpMethod.PUT, Response.Status.OK),
-        UPDATE_ENTITY_PARTIAL(BASE_URI + URI_ENTITY, HttpMethod.POST, Response.Status.OK),
-        LIST_ENTITIES(BASE_URI + URI_ENTITY, HttpMethod.GET, Response.Status.OK),
+        CREATE_ENTITY(BASE_URI + URI_ENTITIES, HttpMethod.POST),
+        GET_ENTITY(BASE_URI + URI_ENTITY, HttpMethod.GET),
+        UPDATE_ENTITY(BASE_URI + URI_ENTITY, HttpMethod.PUT),
+        LIST_ENTITIES(BASE_URI + URI_ENTITIES, HttpMethod.GET),
 
         //Trait operations
-        ADD_TRAITS(BASE_URI + URI_ENTITY, HttpMethod.POST, Response.Status.CREATED),
-        DELETE_TRAITS(BASE_URI + URI_ENTITY, HttpMethod.DELETE, Response.Status.OK),
-        LIST_TRAITS(BASE_URI + URI_ENTITY, HttpMethod.GET, Response.Status.OK),
+        ADD_TRAITS(BASE_URI + URI_ENTITY, HttpMethod.POST),
+        DELETE_TRAITS(BASE_URI + URI_ENTITY, HttpMethod.DELETE),
+        LIST_TRAITS(BASE_URI + URI_ENTITY, HttpMethod.GET),
 
         //Search operations
-        SEARCH(BASE_URI + URI_SEARCH, HttpMethod.GET, Response.Status.OK),
-        SEARCH_DSL(BASE_URI + URI_SEARCH + "/dsl", HttpMethod.GET, Response.Status.OK),
-        SEARCH_GREMLIN(BASE_URI + URI_SEARCH + "/gremlin", HttpMethod.GET, Response.Status.OK),
-        SEARCH_FULL_TEXT(BASE_URI + URI_SEARCH + "/fulltext", HttpMethod.GET, Response.Status.OK),
+        SEARCH(BASE_URI + URI_SEARCH, HttpMethod.GET),
+        SEARCH_DSL(BASE_URI + URI_SEARCH + "/dsl", HttpMethod.GET),
+        SEARCH_GREMLIN(BASE_URI + URI_SEARCH + "/gremlin", HttpMethod.GET),
+        SEARCH_FULL_TEXT(BASE_URI + URI_SEARCH + "/fulltext", HttpMethod.GET),
 
         //Lineage operations
-        LINEAGE_INPUTS_GRAPH(BASE_URI + URI_LINEAGE, HttpMethod.GET, Response.Status.OK),
-        LINEAGE_OUTPUTS_GRAPH(BASE_URI + URI_LINEAGE, HttpMethod.GET, Response.Status.OK),
-        LINEAGE_SCHEMA(BASE_URI + URI_LINEAGE, HttpMethod.GET, Response.Status.OK);
+        LINEAGE_INPUTS_GRAPH(BASE_URI + URI_LINEAGE, HttpMethod.GET),
+        LINEAGE_OUTPUTS_GRAPH(BASE_URI + URI_LINEAGE, HttpMethod.GET),
+        LINEAGE_SCHEMA(BASE_URI + URI_LINEAGE, HttpMethod.GET);
 
         private final String method;
         private final String path;
-        private final Response.Status status;
 
-        API(String path, String method, Response.Status status) {
+        API(String path, String method) {
             this.path = path;
             this.method = method;
-            this.status = status;
         }
 
         public String getMethod() {
@@ -179,8 +174,6 @@ public class AtlasClient {
         public String getPath() {
             return path;
         }
-        
-        public Response.Status getExpectedStatus() { return status; }
     }
 
     /**
@@ -189,45 +182,13 @@ public class AtlasClient {
      * @return result json object
      * @throws AtlasServiceException
      */
-    public List<String> createType(String typeAsJson) throws AtlasServiceException {
-        JSONObject response = callAPI(API.CREATE_TYPE, typeAsJson);
-        return extractResults(response, AtlasClient.TYPES);
-    }
-
-    /**
-     * Register the given type(meta model)
-     * @param typeDef type definition
-     * @return result json object
-     * @throws AtlasServiceException
-     */
-    public List<String> createType(TypesDef typeDef) throws AtlasServiceException {
-        return createType(TypesSerialization.toJson(typeDef));
-    }
-
-    /**
-     * Register the given type(meta model)
-     * @param typeAsJson type definition a jaon
-     * @return result json object
-     * @throws AtlasServiceException
-     */
-    public List<String> updateType(String typeAsJson) throws AtlasServiceException {
-        JSONObject response = callAPI(API.UPDATE_TYPE, typeAsJson);
-        return extractResults(response, AtlasClient.TYPES);
-    }
-
-    /**
-     * Register the given type(meta model)
-     * @param typeDef type definition
-     * @return result json object
-     * @throws AtlasServiceException
-     */
-    public List<String> updateType(TypesDef typeDef) throws AtlasServiceException {
-        return updateType(TypesSerialization.toJson(typeDef));
+    public JSONObject createType(String typeAsJson) throws AtlasServiceException {
+        return callAPI(API.CREATE_TYPE, typeAsJson);
     }
 
     public List<String> listTypes() throws AtlasServiceException {
         final JSONObject jsonObject = callAPI(API.LIST_TYPES, null);
-        return extractResults(jsonObject, AtlasClient.RESULTS);
+        return extractResults(jsonObject);
     }
 
     public String getType(String typeName) throws AtlasServiceException {
@@ -236,7 +197,7 @@ public class AtlasClient {
             JSONObject response = callAPIWithResource(API.GET_TYPE, resource);
             return response.getString(DEFINITION);
         } catch (AtlasServiceException e) {
-            if (Response.Status.NOT_FOUND.equals(e.getStatus())) {
+            if (e.getStatus() == ClientResponse.Status.NOT_FOUND) {
                 return null;
             }
             throw e;
@@ -270,85 +231,6 @@ public class AtlasClient {
         return createEntity(new JSONArray(Arrays.asList(entitiesAsJson)));
     }
 
-    public JSONArray createEntity(Referenceable... entities) throws AtlasServiceException {
-        JSONArray entityArray = getEntitiesArray(entities);
-        return createEntity(entityArray);
-    }
-
-    private JSONArray getEntitiesArray(Referenceable[] entities) {
-        JSONArray entityArray = new JSONArray(entities.length);
-        for (Referenceable entity : entities) {
-            entityArray.put(InstanceSerialization.toJson(entity, true));
-        }
-        return entityArray;
-    }
-
-    /**
-     * Replaces entity definitions identified by their guid or unique attribute
-     * Updates properties set in the definition for the entity corresponding to guid
-     * @param entities entities to be updated
-     * @return json array of guids which were updated/created
-     * @throws AtlasServiceException
-     */
-    public JSONArray updateEntities(Referenceable... entities) throws AtlasServiceException {
-        JSONArray entitiesArray = getEntitiesArray(entities);
-        JSONObject response = callAPI(API.UPDATE_ENTITY, entitiesArray.toString());
-        try {
-            return response.getJSONArray(GUID);
-        } catch (JSONException e) {
-            throw new AtlasServiceException(API.UPDATE_ENTITY, e);
-        }
-    }
-
-    /**
-     * Supports Partial updates
-     * Updates property for the entity corresponding to guid
-     * @param guid      guid
-     * @param attribute  property key
-     * @param value     property value
-     */
-    public void updateEntityAttribute(String guid, String attribute, String value) throws AtlasServiceException {
-        API api = API.UPDATE_ENTITY_PARTIAL;
-        WebResource resource = getResource(api, guid);
-        resource = resource.queryParam(ATTRIBUTE_NAME, attribute);
-        callAPIWithResource(api, resource, value);
-    }
-
-    /**
-     * Supports Partial updates
-     * Updates properties set in the definition for the entity corresponding to guid
-     * @param guid      guid
-     * @param entity entity definition
-     */
-    public void updateEntity(String guid, Referenceable entity) throws AtlasServiceException {
-        String entityJson = InstanceSerialization.toJson(entity, true);
-        callAPI(API.UPDATE_ENTITY_PARTIAL, entityJson, guid);
-    }
-
-    /**
-     * Supports Partial updates
-     * Updates properties set in the definition for the entity corresponding to guid
-     * @param entityType Type of the entity being updated
-     * @param uniqueAttributeName Attribute Name that uniquely identifies the entity
-     * @param uniqueAttributeValue Attribute Value that uniquely identifies the entity
-     * @param entity entity definition
-     */
-    public String updateEntity(String entityType, String uniqueAttributeName, String uniqueAttributeValue,
-                               Referenceable entity) throws AtlasServiceException {
-        API api = API.UPDATE_ENTITY_PARTIAL;
-        WebResource resource = getResource(api, "qualifiedName");
-        resource = resource.queryParam(TYPE, entityType);
-        resource = resource.queryParam(ATTRIBUTE_NAME, uniqueAttributeName);
-        resource = resource.queryParam(ATTRIBUTE_VALUE, uniqueAttributeValue);
-        String entityJson = InstanceSerialization.toJson(entity, true);
-        JSONObject response = callAPIWithResource(api, resource, entityJson);
-        try {
-            return response.getString(GUID);
-        } catch (JSONException e) {
-            throw new AtlasServiceException(api, e);
-        }
-    }
-
     /**
      * Get an entity given the entity id
      * @param guid entity id
@@ -405,20 +287,15 @@ public class AtlasClient {
         WebResource resource = getResource(API.LIST_ENTITIES);
         resource = resource.queryParam(TYPE, entityType);
         JSONObject jsonResponse = callAPIWithResource(API.LIST_ENTITIES, resource);
-        return extractResults(jsonResponse, AtlasClient.RESULTS);
+        return extractResults(jsonResponse);
     }
 
-    private List<String> extractResults(JSONObject jsonResponse, String key) throws AtlasServiceException {
+    private List<String> extractResults(JSONObject jsonResponse) throws AtlasServiceException {
         try {
-            JSONArray results = jsonResponse.getJSONArray(key);
+            JSONArray results = jsonResponse.getJSONArray(AtlasClient.RESULTS);
             ArrayList<String> resultsList = new ArrayList<>();
             for (int index = 0; index < results.length(); index++) {
-                Object element = results.get(index);
-                if (element instanceof String) {
-                    resultsList.add((String) element);
-                } else if (element instanceof JSONObject) {
-                    resultsList.add(((JSONObject) element).getString(AtlasClient.NAME));
-                }
+                resultsList.add(results.getString(index));
             }
             return resultsList;
         } catch (JSONException e) {
@@ -426,6 +303,19 @@ public class AtlasClient {
         }
     }
 
+    /**
+     * Updates property for the entity corresponding to guid
+     * @param guid      guid
+     * @param property  property key
+     * @param value     property value
+     */
+    public JSONObject updateEntity(String guid, String property, String value) throws AtlasServiceException {
+        WebResource resource = getResource(API.UPDATE_ENTITY, guid);
+        resource = resource.queryParam(ATTRIBUTE_NAME, property);
+        resource = resource.queryParam(ATTRIBUTE_VALUE, value);
+        return callAPIWithResource(API.UPDATE_ENTITY, resource);
+    }
+
     /**
      * Search using gremlin/dsl/full text
      * @param searchQuery
@@ -551,11 +441,13 @@ public class AtlasClient {
     }
 
     private JSONObject callAPIWithResource(API api, WebResource resource, Object requestObject)
-        throws AtlasServiceException {
+    throws AtlasServiceException {
         ClientResponse clientResponse = resource.accept(JSON_MEDIA_TYPE).type(JSON_MEDIA_TYPE)
-            .method(api.getMethod(), ClientResponse.class, requestObject);
+                .method(api.getMethod(), ClientResponse.class, requestObject);
 
-        if (clientResponse.getStatus() == api.getExpectedStatus().getStatusCode()) {
+        Response.Status expectedStatus =
+                HttpMethod.POST.equals(api.getMethod()) ? Response.Status.CREATED : Response.Status.OK;
+        if (clientResponse.getStatus() == expectedStatus.getStatusCode()) {
             String responseAsString = clientResponse.getEntity(String.class);
             try {
                 return new JSONObject(responseAsString);