diff --git a/airavata-services/profile-service/profile-service-server/src/main/java/org/apache/airavata/service/profile/handlers/UserProfileServiceHandler.java b/airavata-services/profile-service/profile-service-server/src/main/java/org/apache/airavata/service/profile/handlers/UserProfileServiceHandler.java
index 6c0dcba08..1d479820a 100644
--- a/airavata-services/profile-service/profile-service-server/src/main/java/org/apache/airavata/service/profile/handlers/UserProfileServiceHandler.java
+++ b/airavata-services/profile-service/profile-service-server/src/main/java/org/apache/airavata/service/profile/handlers/UserProfileServiceHandler.java
@@ -20,30 +20,16 @@
 */
 package org.apache.airavata.service.profile.handlers;
 
-import org.apache.airavata.common.exception.ApplicationSettingsException;
-import org.apache.airavata.common.utils.AiravataUtils;
-import org.apache.airavata.common.utils.Constants;
 import org.apache.airavata.common.utils.DBEventManagerConstants;
 import org.apache.airavata.common.utils.DBEventService;
-import org.apache.airavata.common.utils.ServerSettings;
 import org.apache.airavata.model.dbevent.CrudType;
 import org.apache.airavata.model.dbevent.EntityType;
-import org.apache.airavata.model.error.AuthorizationException;
-import org.apache.airavata.model.security.AuthzToken;
-import org.apache.airavata.model.user.Status;
 import org.apache.airavata.model.user.UserProfile;
-import org.apache.airavata.security.AiravataSecurityException;
-import org.apache.airavata.service.profile.client.ProfileServiceClientFactory;
-import org.apache.airavata.service.profile.iam.admin.services.cpi.IamAdminServices;
-import org.apache.airavata.service.profile.iam.admin.services.cpi.exception.IamAdminServicesException;
+import org.apache.airavata.service.profile.commons.user.entities.UserProfileEntity;
 import org.apache.airavata.service.profile.user.core.repositories.UserProfileRepository;
 import org.apache.airavata.service.profile.user.cpi.UserProfileService;
 import org.apache.airavata.service.profile.user.cpi.exception.UserProfileServiceException;
 import org.apache.airavata.service.profile.utils.ProfileServiceUtils;
-import org.apache.airavata.service.security.AiravataSecurityManager;
-import org.apache.airavata.service.security.SecurityManagerFactory;
-import org.apache.airavata.service.security.UserInfo;
-import org.apache.airavata.service.security.interceptor.SecurityCheck;
 import org.apache.thrift.TException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -58,63 +44,13 @@ public class UserProfileServiceHandler implements UserProfileService.Iface {
 
     public UserProfileServiceHandler() {
 
-        userProfileRepository = new UserProfileRepository();
+        userProfileRepository = new UserProfileRepository(UserProfile.class, UserProfileEntity.class);
     }
 
-    @Override
-    @SecurityCheck
-    public String initializeUserProfile(AuthzToken authzToken) throws UserProfileServiceException, AuthorizationException, TException {
-        String gatewayId = authzToken.getClaimsMap().get(Constants.GATEWAY_ID);
-        try {
-            // Load UserInfo for the access token and create an initial UserProfile from it
-            UserInfo userInfo = SecurityManagerFactory.getSecurityManager().getUserInfoFromAuthzToken(authzToken);
-            final UserProfile existingProfile = userProfileRepository.getUserProfileByIdAndGateWay(userInfo.getUsername(), gatewayId);
-            // If a user profile already exists, just return the userId
-            if (existingProfile != null) {
-                return existingProfile.getUserId();
-            }
-            UserProfile userProfile = new UserProfile();
-            userProfile.setUserId(userInfo.getUsername().toLowerCase());
-            userProfile.setGatewayId(gatewayId);
-            userProfile.setAiravataInternalUserId(userProfile.getUserId() + "@" + gatewayId);
-            userProfile.addToEmails(userInfo.getEmailAddress());
-            userProfile.setFirstName(userInfo.getFirstName());
-            userProfile.setLastName(userInfo.getLastName());
-            userProfile.setCreationTime(AiravataUtils.getCurrentTimestamp().getTime());
-            userProfile.setLastAccessTime(AiravataUtils.getCurrentTimestamp().getTime());
-            userProfile.setValidUntil(-1);
-            userProfile.setState(Status.ACTIVE);
-            userProfile = userProfileRepository.createUserProfile(userProfile);
-            if (null != userProfile) {
-                logger.info("Added UserProfile with userId: " + userProfile.getUserId());
-                // replicate userProfile at end-places
-                ProfileServiceUtils.getDbEventPublisher().publish(
-                        ProfileServiceUtils.getDBEventMessageContext(EntityType.USER_PROFILE, CrudType.CREATE, userProfile),
-                        DBEventManagerConstants.getRoutingKey(DBEventService.DB_EVENT.toString())
-                );
-                // return userId
-                return userProfile.getUserId();
-            } else {
-                throw new Exception("User creation failed. Please try again.");
-            }
-        } catch (Exception e) {
-            logger.error("Error while initializing user profile", e);
-            UserProfileServiceException exception = new UserProfileServiceException();
-            exception.setMessage("Error while initializing user profile. More info : " + e.getMessage());
-            throw exception;
-        }
-    }
-
-    @Override
-    @SecurityCheck
-    public String addUserProfile(AuthzToken authzToken, UserProfile userProfile) throws UserProfileServiceException, AuthorizationException, TException {
+    public String addUserProfile(UserProfile userProfile) throws UserProfileServiceException {
         try{
-            // Lowercase user id and internal id
-            userProfile.setUserId(userProfile.getUserId().toLowerCase());
-            userProfile.setAiravataInternalUserId(userProfile.getUserId() + "@" + userProfile.getGatewayId());
-            userProfile = userProfileRepository.updateUserProfile(userProfile, getIAMUserProfileUpdater(authzToken, userProfile));
+            userProfileRepository.create(userProfile);
             if (null != userProfile) {
-                logger.info("Added UserProfile with userId: " + userProfile.getUserId());
                 // replicate userProfile at end-places
                 ProfileServiceUtils.getDbEventPublisher().publish(
                         ProfileServiceUtils.getDBEventMessageContext(EntityType.USER_PROFILE, CrudType.CREATE, userProfile),
@@ -122,9 +58,8 @@ public class UserProfileServiceHandler implements UserProfileService.Iface {
                 );
                 // return userId
                 return userProfile.getUserId();
-            } else {
-                throw new Exception("User creation failed. Please try again.");
             }
+            return null;
         } catch (Exception e) {
             logger.error("Error while creating user profile", e);
             UserProfileServiceException exception = new UserProfileServiceException();
@@ -133,23 +68,10 @@ public class UserProfileServiceHandler implements UserProfileService.Iface {
         }
     }
 
-    @Override
-    @SecurityCheck
-    public boolean updateUserProfile(AuthzToken authzToken, UserProfile userProfile) throws UserProfileServiceException, AuthorizationException, TException {
+    public boolean updateUserProfile(UserProfile userProfile) throws UserProfileServiceException, TException {
         try {
-            // After updating the user profile in the database but before committing the transaction, the
-            // following will update the user profile in the IAM service also. If the update in the IAM service
-            // fails then the transaction will be rolled back.
-            Runnable iamUserProfileUpdater = getIAMUserProfileUpdater(authzToken, userProfile);
-            if(userProfileRepository.updateUserProfile(userProfile, iamUserProfileUpdater) != null) {
-                logger.info("Updated UserProfile with userId: " + userProfile.getUserId());
-                // replicate userProfile at end-places
-                ProfileServiceUtils.getDbEventPublisher().publish(
-                        ProfileServiceUtils.getDBEventMessageContext(EntityType.USER_PROFILE, CrudType.UPDATE, userProfile),
-                        DBEventManagerConstants.getRoutingKey(DBEventService.DB_EVENT.toString())
-                );
+            if(userProfileRepository.update(userProfile) != null)
                 return true;
-            }
             return false;
         } catch (Exception e) {
             logger.error("Error while Updating user profile", e);
@@ -159,29 +81,12 @@ public class UserProfileServiceHandler implements UserProfileService.Iface {
         }
     }
 
-    private Runnable getIAMUserProfileUpdater(AuthzToken authzToken, UserProfile userProfile) throws UserProfileServiceException {
-        String gatewayId = authzToken.getClaimsMap().get(Constants.GATEWAY_ID);
-        return () -> {
-            try {
-                AiravataSecurityManager securityManager = SecurityManagerFactory.getSecurityManager();
-                AuthzToken serviceAccountAuthzToken = securityManager.getUserManagementServiceAccountAuthzToken(gatewayId);
-                IamAdminServices.Client iamAdminServicesClient = getIamAdminServicesClient();
-                iamAdminServicesClient.updateUserProfile(serviceAccountAuthzToken, userProfile);
-            } catch (AiravataSecurityException|TException e) {
-                throw new RuntimeException("Failed to update user profile in IAM service", e);
-            }
-        };
-    }
-
-    @Override
-    @SecurityCheck
-    public UserProfile getUserProfileById(AuthzToken authzToken, String userId, String gatewayId) throws UserProfileServiceException, AuthorizationException, TException {
+    public UserProfile getUserProfileById(String userId, String gatewayId) throws UserProfileServiceException {
         try{
             UserProfile userProfile = userProfileRepository.getUserProfileByIdAndGateWay(userId, gatewayId);
             if(userProfile != null)
                 return userProfile;
-            else
-                throw new Exception("User with userId: " + userId + ", in Gateway: " + gatewayId + ", does not exist.");
+            return null;
         } catch (Exception e) {
             logger.error("Error retrieving user profile by ID", e);
             UserProfileServiceException exception = new UserProfileServiceException();
@@ -190,25 +95,11 @@ public class UserProfileServiceHandler implements UserProfileService.Iface {
         }
     }
 
-    @Override
-    @SecurityCheck
-    public boolean deleteUserProfile(AuthzToken authzToken, String userId, String gatewayId) throws UserProfileServiceException, AuthorizationException, TException {
+    // FIXME: shouldn't deleteUserProfile require the gatewayId as well?
+    public boolean deleteUserProfile(String userId) throws UserProfileServiceException {
         try{
-            // find user-profile
-            UserProfile userProfile = userProfileRepository.getUserProfileByIdAndGateWay(userId, gatewayId);
-
-            // delete user
-            boolean deleteSuccess = userProfileRepository.delete(userId);
-            logger.info("Delete UserProfile with userId: " + userId + ", " + (deleteSuccess? "Success!" : "Failed!"));
-
-            if (deleteSuccess) {
-                // delete userProfile at end-places
-                ProfileServiceUtils.getDbEventPublisher().publish(
-                        ProfileServiceUtils.getDBEventMessageContext(EntityType.USER_PROFILE, CrudType.DELETE, userProfile),
-                        DBEventManagerConstants.getRoutingKey(DBEventService.DB_EVENT.toString())
-                );
-            }
-            return deleteSuccess;
+            boolean deleteResult = userProfileRepository.delete(userId);
+            return deleteResult;
         } catch (Exception e) {
             logger.error("Error while deleting user profile", e);
             UserProfileServiceException exception = new UserProfileServiceException();
@@ -217,15 +108,12 @@ public class UserProfileServiceHandler implements UserProfileService.Iface {
         }
     }
 
-    @Override
-    @SecurityCheck
-    public List<UserProfile> getAllUserProfilesInGateway(AuthzToken authzToken, String gatewayId, int offset, int limit) throws UserProfileServiceException, AuthorizationException, TException {
+    public List<UserProfile> getAllUserProfilesInGateway(String gatewayId, int offset, int limit) throws UserProfileServiceException {
         try{
             List<UserProfile> usersInGateway = userProfileRepository.getAllUserProfilesInGateway(gatewayId, offset, limit);
             if(usersInGateway != null)
                 return usersInGateway;
-            else
-                throw new Exception("There are no users for the requested gatewayId: " + gatewayId);
+            return null;
         } catch (Exception e) {
             logger.error("Error while retrieving user profile List", e);
             UserProfileServiceException exception = new UserProfileServiceException();
@@ -234,28 +122,32 @@ public class UserProfileServiceHandler implements UserProfileService.Iface {
         }
     }
 
-    @Override
-    public boolean doesUserExist(AuthzToken authzToken, String userId, String gatewayId) throws UserProfileServiceException, AuthorizationException, TException {
+
+    public UserProfile getUserProfileByName(String userName, String gatewayId) throws UserProfileServiceException {
         try{
-            UserProfile userProfile = userProfileRepository.getUserProfileByIdAndGateWay(userId, gatewayId);
-            return null != userProfile;
+            UserProfile userProfile = userProfileRepository.getUserProfileByNameAndGateWay(userName, gatewayId);
+            if(userProfile != null)
+                return userProfile;
+            return null;
         } catch (Exception e) {
-            logger.error("Error while finding user profile", e);
+            logger.error("Error while retrieving user profile", e);
             UserProfileServiceException exception = new UserProfileServiceException();
-            exception.setMessage("Error while finding user profile. More info : " + e.getMessage());
+            exception.setMessage("Error while retrieving user profile. More info : " + e.getMessage());
             throw exception;
         }
     }
 
-    private IamAdminServices.Client getIamAdminServicesClient() throws UserProfileServiceException {
-        try {
-            final int serverPort = Integer.parseInt(ServerSettings.getProfileServiceServerPort());
-            final String serverHost = ServerSettings.getProfileServiceServerHost();
-            return ProfileServiceClientFactory.createIamAdminServiceClient(serverHost, serverPort);
-        } catch (IamAdminServicesException|ApplicationSettingsException e) {
-            logger.error("Failed to create IAM Admin Services client", e);
-            UserProfileServiceException ex = new UserProfileServiceException("Failed to create IAM Admin Services client");
-            throw ex;
+    public boolean doesUserExist(String userName, String gatewayId) throws UserProfileServiceException, TException {
+        try{
+            UserProfile userProfile = userProfileRepository.getUserProfileByNameAndGateWay(userName, gatewayId);
+            if (null != userProfile)
+                return true;
+            return false;
+        } catch (Exception e) {
+            logger.error("Error while finding user profile", e);
+            UserProfileServiceException exception = new UserProfileServiceException();
+            exception.setMessage("Error while finding user profile. More info : " + e.getMessage());
+            throw exception;
         }
     }
 }