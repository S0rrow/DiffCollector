diff --git a/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/cluster/qourum/QuorumVoteServerConnect.java b/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/cluster/qourum/QuorumVoteServerConnect.java
index 32fea40ff8..352e5e34f3 100644
--- a/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/cluster/qourum/QuorumVoteServerConnect.java
+++ b/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/cluster/qourum/QuorumVoteServerConnect.java
@@ -16,22 +16,20 @@
  */
 package org.apache.activemq.artemis.core.server.cluster.qourum;
 
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.TimeUnit;
-
 import org.apache.activemq.artemis.api.core.SimpleString;
 import org.apache.activemq.artemis.core.client.impl.Topology;
-import org.apache.activemq.artemis.core.server.ActiveMQServerLogger;
+import org.apache.activemq.artemis.core.persistence.StorageManager;
+
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
 
 /**
- * A Quorum Vote for deciding if a replicated backup should become live.
+ * A Qourum Vote for deciding if a replicated backup should become live.
  */
-public class QuorumVoteServerConnect extends QuorumVote<ServerConnectVote, Boolean> {
+public class QuorumVoteServerConnect extends QuorumVote<BooleanVote, Boolean> {
 
-   public static final SimpleString LIVE_FAILOVER_VOTE = new SimpleString("LiveFailoverQuorumVote");
+   private static final SimpleString LIVE_FAILOVER_VOTE = new SimpleString("LIVE_FAILOVER)VOTE");
    private final CountDownLatch latch;
-   private final String targetNodeId;
-   private final String liveConnector;
 
    private int votesNeeded;
 
@@ -39,29 +37,25 @@ public class QuorumVoteServerConnect extends QuorumVote<ServerConnectVote, Boole
 
    private boolean decision = false;
 
-   // Is this the live requesting to stay live, or a backup requesting to become live.
-   private boolean requestToStayLive = false;
-
    /**
     * live nodes | remaining nodes |  majority   | votes needed
-    * 1      |       0         |     0       |      0
-    * 2      |       1         |     1       |      1
-    * n      |    r = n-1      |   n/2 + 1   |   n/2 + 1 rounded
-    * 3      |       2         |     2.5     |      2
-    * 4      |       3         |      3      |      3
-    * 5      |       4         |     3.5     |      3
-    * 6      |       5         |      4      |      4
+    *     1      |       0         |     0       |      0
+    *     2      |       1         |     1       |      1
+    *     n      |    r = n-1      |   n/2 + 1   |   n/2 + 1 rounded
+    *     3      |       2         |     2.5     |      2
+    *     4      |       3         |      3      |      3
+    *     5      |       4         |     3.5     |      3
+    *     6      |       5         |      4      |      4
     */
-   public QuorumVoteServerConnect(int size, String targetNodeId, boolean requestToStayLive, String liveConnector) {
+   public QuorumVoteServerConnect(int size, StorageManager storageManager) {
       super(LIVE_FAILOVER_VOTE);
-      this.targetNodeId = targetNodeId;
-      this.liveConnector = liveConnector;
       double majority;
       if (size <= 2) {
-         majority = ((double) size) / 2;
-      } else {
+         majority = ((double)size) / 2;
+      }
+      else {
          //even
-         majority = ((double) size) / 2 + 1;
+         majority = ((double)size) / 2 + 1;
       }
       //votes needed could be say 2.5 so we add 1 in this case
       votesNeeded = (int) majority;
@@ -69,12 +63,8 @@ public class QuorumVoteServerConnect extends QuorumVote<ServerConnectVote, Boole
       if (votesNeeded == 0) {
          decision = true;
       }
-      this.requestToStayLive = requestToStayLive;
    }
 
-   public QuorumVoteServerConnect(int size, String targetNodeId) {
-      this(size, targetNodeId, false, null);
-   }
    /**
     * if we can connect to a node
     *
@@ -82,8 +72,9 @@ public class QuorumVoteServerConnect extends QuorumVote<ServerConnectVote, Boole
     */
    @Override
    public Vote connected() {
-      return new ServerConnectVote(targetNodeId, requestToStayLive, null);
+      return new BooleanVote(true);
    }
+
    /**
     * if we cant connect to the node
     *
@@ -96,33 +87,23 @@ public class QuorumVoteServerConnect extends QuorumVote<ServerConnectVote, Boole
 
    /**
     * live nodes | remaining nodes |  majority   | votes needed
-    * 1      |       0         |     0       |      0
-    * 2      |       1         |     1       |      1
-    * n      |    r = n-1      |   n/2 + 1   |   n/2 + 1 rounded
-    * 3      |       2         |     2.5     |      2
-    * 4      |       3         |      3      |      3
-    * 5      |       4         |     3.5     |      3
-    * 6      |       5         |      4      |      4
+    *     1      |       0         |     0       |      0
+    *     2      |       1         |     1       |      1
+    *     n      |    r = n-1      |   n/2 + 1   |   n/2 + 1 rounded
+    *     3      |       2         |     2.5     |      2
+    *     4      |       3         |      3      |      3
+    *     5      |       4         |     3.5     |      3
+    *     6      |       5         |      4      |      4
     *
     * @param vote the vote to make.
     */
    @Override
-   public synchronized void vote(ServerConnectVote vote) {
+   public synchronized void vote(BooleanVote vote) {
       if (decision)
          return;
-      if (!requestToStayLive && vote.getVote()) {
+      if (vote.getVote()) {
          total++;
          latch.countDown();
-         if (total >= votesNeeded) {
-            decision = true;
-         }//do the opposite, if it says there is a node connected it means the backup has come live
-      } else if (requestToStayLive && vote.getVote()) {
-         total++;
-         latch.countDown();
-         if (liveConnector != null && !liveConnector.equals(vote.getTransportConfiguration())) {
-            ActiveMQServerLogger.LOGGER.qourumBackupIsLive(liveConnector);
-            return;
-         }
          if (total >= votesNeeded) {
             decision = true;
          }
@@ -131,9 +112,7 @@ public class QuorumVoteServerConnect extends QuorumVote<ServerConnectVote, Boole
 
    @Override
    public void allVotesCast(Topology voteTopology) {
-      while (latch.getCount() > 0) {
-         latch.countDown();
-      }
+
    }
 
    @Override
@@ -141,15 +120,12 @@ public class QuorumVoteServerConnect extends QuorumVote<ServerConnectVote, Boole
       return decision;
    }
 
-   public void await(int latchTimeout, TimeUnit unit) throws InterruptedException {
-      ActiveMQServerLogger.LOGGER.waitingForQuorumVoteResults(latchTimeout, unit.toString().toLowerCase());
-      if (latch.await(latchTimeout, unit))
-         ActiveMQServerLogger.LOGGER.receivedAllQuorumVotes();
-      else
-         ActiveMQServerLogger.LOGGER.timeoutWaitingForQuorumVoteResponses();
+   @Override
+   public SimpleString getName() {
+      return null;
    }
 
-   public boolean isRequestToStayLive() {
-      return requestToStayLive;
+   public void await(int latchTimeout, TimeUnit unit) throws InterruptedException {
+      latch.await(latchTimeout, unit);
    }
 }