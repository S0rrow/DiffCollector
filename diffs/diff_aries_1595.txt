diff --git a/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java b/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
index c74c887fd..fde1979f2 100644
--- a/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
+++ b/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
@@ -20,10 +20,8 @@
 package org.apache.aries.application.management.impl;
 
 import java.io.File;
-import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
-import java.io.OutputStream;
 import java.net.URL;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -31,6 +29,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.jar.Attributes;
 import java.util.jar.Manifest;
 
 import org.apache.aries.application.ApplicationMetadata;
@@ -46,12 +45,9 @@ import org.apache.aries.application.management.AriesApplicationManager;
 import org.apache.aries.application.management.AriesApplicationResolver;
 import org.apache.aries.application.management.BundleConverter;
 import org.apache.aries.application.management.BundleInfo;
-import org.apache.aries.application.management.LocalPlatform;
 import org.apache.aries.application.management.ManagementException;
-import org.apache.aries.application.management.ResolveConstraint;
 import org.apache.aries.application.utils.AppConstants;
 import org.apache.aries.application.utils.filesystem.FileSystem;
-import org.apache.aries.application.utils.filesystem.IOUtils;
 import org.apache.aries.application.utils.manifest.BundleManifest;
 import org.apache.aries.application.utils.manifest.ManifestDefaultsInjector;
 import org.apache.aries.application.utils.manifest.ManifestProcessor;
@@ -63,7 +59,6 @@ public class AriesApplicationManagerImpl implements AriesApplicationManager {
   private DeploymentMetadataFactory _deploymentMetadataFactory;
   private List<BundleConverter> _bundleConverters;
   private AriesApplicationResolver _resolver;
-  private LocalPlatform _localPlatform;
 
   public void setApplicationMetadataManager (ApplicationMetadataManager amm) { 
     _applicationMetadataManager = amm;
@@ -80,119 +75,98 @@ public class AriesApplicationManagerImpl implements AriesApplicationManager {
   public void setResolver (AriesApplicationResolver resolver) { 
     _resolver = resolver;
   }
-
-  public void setLocalPlatform (LocalPlatform lp) { 
-    _localPlatform = lp;
-  }
+  
   
   
   /**
-   * Create an AriesApplication from a .eba file: a zip file with a '.eba' extension
-   * as per http://incubator.apache.org/aries/applications.html 
+   * Create an AriesApplication from a .eba file
    */
-  public AriesApplication createApplication(IDirectory ebaFile) throws ManagementException {
-    ApplicationMetadata applicationMetadata = null;
-    DeploymentMetadata deploymentMetadata = null;
+  public AriesApplication createApplication(File ebaFile) throws ManagementException {
+    /* 
+     * ebaFile should be a zip file with a '.eba' extension 
+     * as per http://incubator.apache.org/aries/applications.html
+     */    
+
+    ApplicationMetadata applicationMetadata;
+    DeploymentMetadata deploymentMetadata;
     Map<String, InputStream> modifiedBundles = new HashMap<String, InputStream>();
     AriesApplicationImpl application = null;
     
     try { 
-      Manifest applicationManifest = parseApplicationManifest (ebaFile);
-      ManifestDefaultsInjector.updateManifest(applicationManifest, ebaFile.getName(), ebaFile); 
+      if (!ebaFile.isFile()) { 
+        // TODO: NLS this, and implement create-from-directory
+        throw new ManagementException ("Cannot create .eba from directory yet");
+      }
+      
+      // Locate META-INF/APPLICATION.MF and ensure that the 
+      // manifest has the necessary fields set 
+      Manifest applicationManifest = parseManifest (ebaFile, AppConstants.APPLICATION_MF);
+      boolean manifestChanged = ManifestDefaultsInjector.updateManifest(applicationManifest, ebaFile.getName(), ebaFile); 
       applicationMetadata = _applicationMetadataManager.createApplicationMetadata(applicationManifest);
 
-      IFile deploymentManifest = ebaFile.getFile(AppConstants.DEPLOYMENT_MF);
-      if (deploymentManifest != null) { 
-        deploymentMetadata = _deploymentMetadataFactory.createDeploymentMetadata(deploymentManifest);
-      }
-      /* We require that all other .jar and .war files included by-value be valid bundles
-       * because a DEPLOYMENT.MF has been provided. If no DEPLOYMENT.MF, migrate 
-       * wars to wabs, plain jars to bundles
-       */
-        
-      Set<BundleInfo> extraBundlesInfo = new HashSet<BundleInfo>();
-      for (IFile f : ebaFile) { 
-        if (f.isDirectory()) { 
-          continue;
-        }
-        
-        BundleManifest bm = getBundleManifest (f);
-        if (bm != null) {
-          if (bm.isValid()) {
-            extraBundlesInfo.add(new BundleInfoImpl(bm, f.toURL().toExternalForm()));
-          } else if (deploymentMetadata != null) {
-            throw new ManagementException ("Invalid bundle " + f.getName() + " found when DEPLOYMENT.MF present");
-          } else { 
-            // We have a jar that needs converting to a bundle, or a war to migrate to a WAB
-            InputStream convertedBinary = null;
-            Iterator<BundleConverter> converters = _bundleConverters.iterator();
-            while (converters.hasNext() && convertedBinary == null) { 
+      Manifest deploymentManifest = parseManifest (ebaFile, AppConstants.DEPLOYMENT_MF);
+      if (deploymentManifest != null) {
+        // If there's a deployment.mf present, check it matches applicationManifest, and if so, use it
+      } else { 
+        //   -- Look for application.xml to support .war file migration
+        //   -- Process any other files in the .eba, i.e. migrate wars to wabs, plain jars to bundles
+        IDirectory eba = FileSystem.getFSRoot(ebaFile);
+        IFile appXml = eba.getFile(AppConstants.APPLICATION_XML);
+        Set<BundleInfo> bundleInfo = new HashSet<BundleInfo>();
+        for (IFile f : eba) { 
+          BundleManifest bm = getBundleManifest (f);
+          if (bm != null) {
+            Attributes bundleAttributes;
+            if (bm.isValid()) {
+              bundleInfo.add(new BundleInfoImpl(bm, null));
+            } else { 
+              // We have a jar that needs converting to a bundle, or a war to migrate to a WAB
+              InputStream is = null;
               try { 
-                // WarToWabConverter can extract application.xml via
-                // eba.getFile(AppConstants.APPLICATION_XML);
-                convertedBinary = converters.next().convert(ebaFile, f);
-              } catch (ServiceException sx) {
-                // We'll get this if our optional BundleConverter has not been injected. 
+                is = f.open();
+                InputStream convertedBinary = null;
+                Iterator<BundleConverter> converters = _bundleConverters.iterator();
+                while (converters.hasNext() && convertedBinary == null) { 
+                  try { 
+                    convertedBinary = converters.next().convert(is, f.getName());
+                  } catch (ServiceException sx) {
+                    // We'll get this if our optional BundleConverter has not been injected. 
+                  }
+                }
+                if (convertedBinary != null) { 
+                  modifiedBundles.put (f.getName(), convertedBinary); // I expect I'll need the filename in a bit
+                  bm = BundleManifest.fromBundle(is);
+                  bundleInfo.add(new BundleInfoImpl(bm, null));
+                }
+              } finally { 
+                try { 
+                  if (is != null) is.close();
+                } catch (IOException iox) {}
               }
             }
-            if (convertedBinary != null) { 
-              modifiedBundles.put (f.getName(), convertedBinary);
-              bm = BundleManifest.fromBundle(f);
-              extraBundlesInfo.add(new BundleInfoImpl(bm, f.getName()));
-            }
           }
-        } 
-        if (deploymentMetadata != null) { 
-          application = new AriesApplicationImpl (applicationMetadata, deploymentMetadata, extraBundlesInfo, _localPlatform);
-        } else { 
-          application = new AriesApplicationImpl (applicationMetadata, extraBundlesInfo, _localPlatform);
-          Set<BundleInfo> additionalBundlesRequired = _resolver.resolve(application);
-          deploymentMetadata = _deploymentMetadataFactory.createDeploymentMetadata(application, additionalBundlesRequired);
-          application.setDeploymentMetadata(deploymentMetadata);
-        
-          // Store a reference to any modified bundles
-          application.setModifiedBundles (modifiedBundles);
         }
-        
+        application = new AriesApplicationImpl (applicationMetadata, bundleInfo);
+        Set<BundleInfo> resolvedBundles = _resolver.resolve(application);
+        deploymentMetadata = _deploymentMetadataFactory.createDeploymentMetadata(application, resolvedBundles);
+        application.setDeploymentMetadata(deploymentMetadata);
       }
+      
+      // We may have changed parts of its content. The application's store()
+      // method needs to be able to work. Do something with modifiedBundles 
+      // and manifestChanged
+      
     } catch (IOException iox) { 
-      // Log an error
       throw new ManagementException(iox);
     }
     
     return application;
   }
 
-  /**
-   * Create an application from a URL. 
-   * The first version of this method isn't smart enough to check whether
-   * the input URL is file://
-   */
   public AriesApplication createApplication(URL url) throws ManagementException {
-    OutputStream os = null;
-    AriesApplication app = null;
-    try { 
-      File tempFile = _localPlatform.getTemporaryFile();
-      InputStream is = url.openStream();
-      os = new FileOutputStream (tempFile);
-      IOUtils.copy(is, os);
-      IDirectory downloadedSource = FileSystem.getFSRoot(tempFile);
-      app = createApplication (downloadedSource);
-    } catch (IOException iox) {
-      throw new ManagementException (iox);
-    }
-      finally { 
-      IOUtils.close(os);
-    }
-    return app;
+    return null;
   }
 
-  public AriesApplication resolve(AriesApplication originalApp,
-      ResolveConstraint... constraints) {
-    // TODO Auto-generated method stub
-    return null;
-  } 
-  
   public ApplicationContext getApplicationContext(AriesApplication app) {
     // TODO Auto-generated method stub
     return null;
@@ -225,24 +199,32 @@ public class AriesApplicationManagerImpl implements AriesApplicationManager {
 
 
   /**
-   * Locate and parse an application.mf in an eba
-   * @param source An aries application file
+   * Locate and parse an application or deployment.mf in an eba
+   * @param ebaFile An aries application file
+   * @param fileName META-INF/APPLICATION.MF or META-INF/DEPLOYMENT.MF
    * @return parsed manifest, or null
    * @throws IOException
    */
-  private Manifest parseApplicationManifest (IDirectory source) throws IOException {
+  private Manifest parseManifest (File ebaFile, String fileName) throws IOException {
     Manifest result = null;
-    IFile f = source.getFile(AppConstants.APPLICATION_MF);
-    if (f != null) { 
-      InputStream is = null;
-      try { 
-        is = f.open();
-        result = ManifestProcessor.parseManifest(is);
-      } catch (IOException iox) { 
-        // TODO: log error
-        throw iox;
-      } finally { 
-        IOUtils.close(is);
+    IDirectory eba = FileSystem.getFSRoot(ebaFile);
+    List<IFile> files = eba.listFiles();
+    for (IFile f : files) { 
+      if (f.getName().equalsIgnoreCase(fileName)) {
+        InputStream is = null;
+        try { 
+          is = f.open();
+          result = ManifestProcessor.parseManifest(is);
+          is.close();
+        } catch (IOException iox) { 
+          // TODO: log error
+          throw iox;
+        } finally { 
+          try { 
+            if (is != null) is.close();
+          } catch (IOException iox) {}
+        }
+        break;
       }
     }
     return result;
@@ -260,9 +242,12 @@ public class AriesApplicationManagerImpl implements AriesApplicationManager {
       in = file.open();
       mf = BundleManifest.fromBundle(in);
     } finally { 
-      IOUtils.close(in);
+      try { 
+        if (in != null) in.close();
+      } catch (IOException iox) {}
     }    
     return mf;
-  }
-
+  } 
+  
+  
 }