diff --git a/maven-repository-converter/src/main/java/org/apache/maven/repository/converter/DefaultRepositoryConverter.java b/maven-repository-converter/src/main/java/org/apache/maven/repository/converter/DefaultRepositoryConverter.java
index 5f74a6504..0158c9ce2 100644
--- a/maven-repository-converter/src/main/java/org/apache/maven/repository/converter/DefaultRepositoryConverter.java
+++ b/maven-repository-converter/src/main/java/org/apache/maven/repository/converter/DefaultRepositoryConverter.java
@@ -18,24 +18,16 @@
 
 import org.apache.maven.artifact.Artifact;
 import org.apache.maven.artifact.factory.ArtifactFactory;
+import org.apache.maven.artifact.metadata.ArtifactMetadata;
 import org.apache.maven.artifact.repository.ArtifactRepository;
 import org.apache.maven.artifact.repository.metadata.ArtifactRepositoryMetadata;
 import org.apache.maven.artifact.repository.metadata.Metadata;
-import org.apache.maven.artifact.repository.metadata.RepositoryMetadata;
 import org.apache.maven.artifact.repository.metadata.Snapshot;
 import org.apache.maven.artifact.repository.metadata.SnapshotArtifactRepositoryMetadata;
 import org.apache.maven.artifact.repository.metadata.Versioning;
 import org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Reader;
 import org.apache.maven.artifact.repository.metadata.io.xpp3.MetadataXpp3Writer;
-import org.apache.maven.model.DistributionManagement;
-import org.apache.maven.model.Model;
-import org.apache.maven.model.Relocation;
 import org.apache.maven.model.converter.ArtifactPomRewriter;
-import org.apache.maven.model.converter.ModelConverter;
-import org.apache.maven.model.converter.PomTranslationException;
-import org.apache.maven.model.io.xpp3.MavenXpp3Writer;
-import org.apache.maven.model.v3_0_0.io.xpp3.MavenXpp3Reader;
-import org.apache.maven.repository.converter.transaction.FileTransaction;
 import org.apache.maven.repository.digest.Digester;
 import org.apache.maven.repository.reporting.ArtifactReporter;
 import org.codehaus.plexus.i18n.I18N;
@@ -44,16 +36,15 @@
 import org.codehaus.plexus.util.xml.pull.XmlPullParserException;
 
 import java.io.File;
-import java.io.FileNotFoundException;
 import java.io.FileReader;
+import java.io.FileWriter;
 import java.io.IOException;
 import java.io.StringReader;
-import java.io.StringWriter;
+import java.io.Writer;
 import java.security.NoSuchAlgorithmException;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
-import java.util.Properties;
 import java.util.regex.Matcher;
 
 /**
@@ -80,11 +71,6 @@
      */
     private ArtifactPomRewriter rewriter;
 
-    /**
-     * @plexus.requirement
-     */
-    private ModelConverter translator;
-
     /**
      * @plexus.configuration default-value="false"
      */
@@ -103,51 +89,34 @@
     public void convert( Artifact artifact, ArtifactRepository targetRepository, ArtifactReporter reporter )
         throws RepositoryConversionException
     {
-        if ( artifact.getRepository().getUrl().equals( targetRepository.getUrl() ) )
+        if ( copyArtifact( artifact, targetRepository, reporter ) )
         {
-            throw new RepositoryConversionException( getI18NString( "exception.repositories.match" ) );
-        }
+            copyPom( artifact, targetRepository, reporter );
 
-        if ( validateMetadata( artifact, reporter ) )
-        {
-            FileTransaction transaction = new FileTransaction();
+            Metadata metadata = createBaseMetadata( artifact );
+            Versioning versioning = new Versioning();
+            versioning.addVersion( artifact.getBaseVersion() );
+            metadata.setVersioning( versioning );
+            updateMetadata( new ArtifactRepositoryMetadata( artifact ), targetRepository, metadata );
+
+            metadata = createBaseMetadata( artifact );
+            metadata.setVersion( artifact.getBaseVersion() );
+            versioning = new Versioning();
 
-            if ( copyPom( artifact, targetRepository, reporter, transaction ) )
+            Matcher matcher = Artifact.VERSION_FILE_PATTERN.matcher( artifact.getVersion() );
+            if ( matcher.matches() )
             {
-                if ( copyArtifact( artifact, targetRepository, reporter, transaction ) )
-                {
-                    Metadata metadata = createBaseMetadata( artifact );
-                    Versioning versioning = new Versioning();
-                    versioning.addVersion( artifact.getBaseVersion() );
-                    metadata.setVersioning( versioning );
-                    updateMetadata( new ArtifactRepositoryMetadata( artifact ), targetRepository, metadata,
-                                    transaction );
-
-                    metadata = createBaseMetadata( artifact );
-                    metadata.setVersion( artifact.getBaseVersion() );
-                    versioning = new Versioning();
-
-                    Matcher matcher = Artifact.VERSION_FILE_PATTERN.matcher( artifact.getVersion() );
-                    if ( matcher.matches() )
-                    {
-                        Snapshot snapshot = new Snapshot();
-                        snapshot.setBuildNumber( Integer.valueOf( matcher.group( 3 ) ).intValue() );
-                        snapshot.setTimestamp( matcher.group( 2 ) );
-                        versioning.setSnapshot( snapshot );
-                    }
+                Snapshot snapshot = new Snapshot();
+                snapshot.setBuildNumber( Integer.valueOf( matcher.group( 3 ) ).intValue() );
+                snapshot.setTimestamp( matcher.group( 2 ) );
+                versioning.setSnapshot( snapshot );
+            }
 
-                    // TODO: merge latest/release/snapshot from source instead
-                    metadata.setVersioning( versioning );
-                    updateMetadata( new SnapshotArtifactRepositoryMetadata( artifact ), targetRepository, metadata,
-                                    transaction );
+            // TODO: merge latest/release/snapshot from source instead
+            metadata.setVersioning( versioning );
+            updateMetadata( new SnapshotArtifactRepositoryMetadata( artifact ), targetRepository, metadata );
 
-                    if ( !dryrun )
-                    {
-                        transaction.commit();
-                    }
-                    reporter.addSuccess( artifact );
-                }
-            }
+            reporter.addSuccess( artifact );
         }
     }
 
@@ -159,8 +128,8 @@ private static Metadata createBaseMetadata( Artifact artifact )
         return metadata;
     }
 
-    private void updateMetadata( RepositoryMetadata artifactMetadata, ArtifactRepository targetRepository,
-                                 Metadata newMetadata, FileTransaction transaction )
+    private void updateMetadata( ArtifactMetadata artifactMetadata, ArtifactRepository targetRepository,
+                                 Metadata newMetadata )
         throws RepositoryConversionException
     {
         File file = new File( targetRepository.getBasedir(),
@@ -171,7 +140,25 @@ private void updateMetadata( RepositoryMetadata artifactMetadata, ArtifactReposi
 
         if ( file.exists() )
         {
-            metadata = readMetadata( file );
+            MetadataXpp3Reader reader = new MetadataXpp3Reader();
+            FileReader fileReader = null;
+            try
+            {
+                fileReader = new FileReader( file );
+                metadata = reader.read( fileReader );
+            }
+            catch ( IOException e )
+            {
+                throw new RepositoryConversionException( "Error reading target metadata", e );
+            }
+            catch ( XmlPullParserException e )
+            {
+                throw new RepositoryConversionException( "Error reading target metadata", e );
+            }
+            finally
+            {
+                IOUtil.close( fileReader );
+            }
             changed = metadata.merge( newMetadata );
         }
         else
@@ -182,16 +169,15 @@ private void updateMetadata( RepositoryMetadata artifactMetadata, ArtifactReposi
 
         if ( changed )
         {
-            StringWriter writer = null;
+            Writer writer = null;
             try
             {
-                writer = new StringWriter();
+                file.getParentFile().mkdirs();
+                writer = new FileWriter( file );
 
                 MetadataXpp3Writer mappingWriter = new MetadataXpp3Writer();
 
                 mappingWriter.write( writer, metadata );
-
-                transaction.createFile( writer.toString(), file );
             }
             catch ( IOException e )
             {
@@ -204,159 +190,7 @@ private void updateMetadata( RepositoryMetadata artifactMetadata, ArtifactReposi
         }
     }
 
-    private Metadata readMetadata( File file )
-        throws RepositoryConversionException
-    {
-        Metadata metadata;
-        MetadataXpp3Reader reader = new MetadataXpp3Reader();
-        FileReader fileReader = null;
-        try
-        {
-            fileReader = new FileReader( file );
-            metadata = reader.read( fileReader );
-        }
-        catch ( FileNotFoundException e )
-        {
-            throw new RepositoryConversionException( "Error reading target metadata", e );
-        }
-        catch ( IOException e )
-        {
-            throw new RepositoryConversionException( "Error reading target metadata", e );
-        }
-        catch ( XmlPullParserException e )
-        {
-            throw new RepositoryConversionException( "Error reading target metadata", e );
-        }
-        finally
-        {
-            IOUtil.close( fileReader );
-        }
-        return metadata;
-    }
-
-    private boolean validateMetadata( Artifact artifact, ArtifactReporter reporter )
-        throws RepositoryConversionException
-    {
-        ArtifactRepository repository = artifact.getRepository();
-
-        boolean result = true;
-
-        RepositoryMetadata repositoryMetadata = new ArtifactRepositoryMetadata( artifact );
-        File file =
-            new File( repository.getBasedir(), repository.pathOfRemoteRepositoryMetadata( repositoryMetadata ) );
-        if ( file.exists() )
-        {
-            Metadata metadata = readMetadata( file );
-            result = validateMetadata( metadata, repositoryMetadata, artifact, reporter );
-        }
-
-        repositoryMetadata = new SnapshotArtifactRepositoryMetadata( artifact );
-        file = new File( repository.getBasedir(), repository.pathOfRemoteRepositoryMetadata( repositoryMetadata ) );
-        if ( file.exists() )
-        {
-            Metadata metadata = readMetadata( file );
-            result = result && validateMetadata( metadata, repositoryMetadata, artifact, reporter );
-        }
-
-        return result;
-    }
-
-    private boolean validateMetadata( Metadata metadata, RepositoryMetadata repositoryMetadata, Artifact artifact,
-                                      ArtifactReporter reporter )
-    {
-        String key = "failure.incorrect.";
-
-        if ( repositoryMetadata.storedInGroupDirectory() )
-        {
-            key += "groupMetadata.";
-        }
-        else if ( repositoryMetadata.storedInArtifactVersionDirectory() )
-        {
-            key += "snapshotMetadata.";
-        }
-        else
-        {
-            key += "artifactMetadata.";
-        }
-
-        boolean result = true;
-
-        if ( !metadata.getGroupId().equals( artifact.getGroupId() ) )
-        {
-            reporter.addFailure( artifact, getI18NString( key + "groupId" ) );
-            result = false;
-        }
-        if ( !repositoryMetadata.storedInGroupDirectory() )
-        {
-            if ( !metadata.getArtifactId().equals( artifact.getArtifactId() ) )
-            {
-                reporter.addFailure( artifact, getI18NString( key + "artifactId" ) );
-                result = false;
-            }
-            if ( !repositoryMetadata.storedInArtifactVersionDirectory() )
-            {
-                // artifact metadata
-
-                boolean foundVersion = false;
-                if ( metadata.getVersioning() != null )
-                {
-                    for ( Iterator i = metadata.getVersioning().getVersions().iterator();
-                          i.hasNext() && !foundVersion; )
-                    {
-                        String version = (String) i.next();
-                        if ( version.equals( artifact.getBaseVersion() ) )
-                        {
-                            foundVersion = true;
-                        }
-                    }
-                }
-
-                if ( !foundVersion )
-                {
-                    reporter.addFailure( artifact, getI18NString( key + "versions" ) );
-                    result = false;
-                }
-            }
-            else
-            {
-                // snapshot metadata
-                if ( !artifact.getBaseVersion().equals( metadata.getVersion() ) )
-                {
-                    reporter.addFailure( artifact, getI18NString( key + "version" ) );
-                    result = false;
-                }
-
-                if ( artifact.isSnapshot() )
-                {
-                    Matcher matcher = Artifact.VERSION_FILE_PATTERN.matcher( artifact.getVersion() );
-                    if ( matcher.matches() )
-                    {
-                        boolean correct = false;
-                        if ( metadata.getVersioning() != null && metadata.getVersioning().getSnapshot() != null )
-                        {
-                            Snapshot snapshot = metadata.getVersioning().getSnapshot();
-                            int build = Integer.valueOf( matcher.group( 3 ) ).intValue();
-                            String ts = matcher.group( 2 );
-                            if ( build == snapshot.getBuildNumber() && ts.equals( snapshot.getTimestamp() ) )
-                            {
-                                correct = true;
-                            }
-                        }
-
-                        if ( !correct )
-                        {
-                            reporter.addFailure( artifact, getI18NString( key + "snapshot" ) );
-                            result = false;
-                        }
-                    }
-                }
-            }
-        }
-        return result;
-    }
-
-    private boolean copyPom( Artifact artifact, ArtifactRepository targetRepository, ArtifactReporter reporter,
-                             FileTransaction transaction )
+    private void copyPom( Artifact artifact, ArtifactRepository targetRepository, ArtifactReporter reporter )
         throws RepositoryConversionException
     {
         Artifact pom = artifactFactory.createProjectArtifact( artifact.getGroupId(), artifact.getArtifactId(),
@@ -365,7 +199,6 @@ private boolean copyPom( Artifact artifact, ArtifactRepository targetRepository,
         ArtifactRepository repository = artifact.getRepository();
         File file = new File( repository.getBasedir(), repository.pathOf( pom ) );
 
-        boolean result = true;
         if ( file.exists() )
         {
             // TODO: utility methods in the model converter
@@ -399,7 +232,11 @@ private boolean copyPom( Artifact artifact, ArtifactRepository targetRepository,
                     }
                     if ( force || !matching )
                     {
-                        transaction.createFile( contents, targetFile );
+                        if ( !dryrun )
+                        {
+                            targetFile.getParentFile().mkdirs();
+                            FileUtils.fileWrite( targetFile.getAbsolutePath(), contents );
+                        }
                     }
                 }
                 catch ( IOException e )
@@ -411,167 +248,68 @@ private boolean copyPom( Artifact artifact, ArtifactRepository targetRepository,
             {
                 // v3 POM
                 StringReader stringReader = new StringReader( contents );
-                StringWriter writer = null;
+                Writer fileWriter = null;
                 try
                 {
-                    MavenXpp3Reader v3Reader = new MavenXpp3Reader();
-                    org.apache.maven.model.v3_0_0.Model v3Model = v3Reader.read( stringReader );
-
-                    if ( doRelocation( artifact, v3Model, targetRepository, transaction ) )
-                    {
-                        Artifact relocatedPom = artifactFactory.createProjectArtifact( artifact.getGroupId(),
-                                                                                       artifact.getArtifactId(),
-                                                                                       artifact.getVersion() );
-                        targetFile = new File( targetRepository.getBasedir(), targetRepository.pathOf( relocatedPom ) );
-                    }
-
-                    Model v4Model = translator.translate( v3Model );
-
-                    translator.validateV4Basics( v4Model, v3Model.getGroupId(), v3Model.getArtifactId(),
-                                                 v3Model.getVersion(), v3Model.getPackage() );
-
-                    writer = new StringWriter();
-                    MavenXpp3Writer Xpp3Writer = new MavenXpp3Writer();
-                    Xpp3Writer.write( writer, v4Model );
+                    fileWriter = new FileWriter( targetFile );
 
-                    transaction.createFile( writer.toString(), targetFile );
+                    // TODO: this api could be improved - is it worth having or go back to modelConverter?
+                    rewriter.rewrite( stringReader, fileWriter, false, artifact.getGroupId(), artifact.getArtifactId(),
+                                      artifact.getVersion(), artifact.getType() );
 
-                    List warnings = translator.getWarnings();
+                    List warnings = rewriter.getWarnings();
 
                     for ( Iterator i = warnings.iterator(); i.hasNext(); )
                     {
                         String message = (String) i.next();
                         reporter.addWarning( artifact, message );
                     }
+
+                    IOUtil.close( fileWriter );
                 }
-                catch ( XmlPullParserException e )
-                {
-                    reporter.addFailure( artifact, getI18NString( "failure.invalid.source.pom", e.getMessage() ) );
-                    result = false;
-                }
-                catch ( IOException e )
+                catch ( Exception e )
                 {
+                    if ( fileWriter != null )
+                    {
+                        IOUtil.close( fileWriter );
+                        targetFile.delete();
+                    }
                     throw new RepositoryConversionException( "Unable to write converted POM", e );
                 }
-                catch ( PomTranslationException e )
-                {
-                    // TODO! check handling, fix error message
-                    reporter.addFailure( artifact, getI18NString( "failure.invalid.source.pom", e.getMessage() ) );
-                    result = false;
-                }
-                finally
-                {
-                    IOUtil.close( writer );
-                }
             }
         }
-        else
-        {
-            reporter.addWarning( artifact, getI18NString( "warning.missing.pom" ) );
-        }
-        return result;
-    }
-
-    private boolean doRelocation( Artifact artifact, org.apache.maven.model.v3_0_0.Model v3Model,
-                                  ArtifactRepository repository, FileTransaction transaction )
-        throws IOException
-    {
-        Properties properties = v3Model.getProperties();
-        if ( properties.containsKey( "relocated.groupId" ) || properties.containsKey( "relocated.artifactId" ) ||
-            properties.containsKey( "relocated.version" ) )
-        {
-            String newGroupId = properties.getProperty( "relocated.groupId", v3Model.getGroupId() );
-            properties.remove( "relocated.groupId" );
-
-            String newArtifactId = properties.getProperty( "relocated.artifactId", v3Model.getArtifactId() );
-            properties.remove( "relocated.artifactId" );
-
-            String newVersion = properties.getProperty( "relocated.version", v3Model.getVersion() );
-            properties.remove( "relocated.version" );
-
-            String message = properties.getProperty( "relocated.message", "" );
-            properties.remove( "relocated.message" );
-
-            if ( properties.isEmpty() )
-            {
-                v3Model.setProperties( null );
-            }
-
-            writeRelocationPom( v3Model.getGroupId(), v3Model.getArtifactId(), v3Model.getVersion(), newGroupId,
-                                newArtifactId, newVersion, message, repository, transaction );
-
-            v3Model.setGroupId( newGroupId );
-            v3Model.setArtifactId( newArtifactId );
-            v3Model.setVersion( newVersion );
-
-            artifact.setGroupId( newGroupId );
-            artifact.setArtifactId( newArtifactId );
-            artifact.setVersion( newVersion );
-
-            return true;
-        }
-        else
-        {
-            return false;
-        }
-    }
-
-    private void writeRelocationPom( String groupId, String artifactId, String version, String newGroupId,
-                                     String newArtifactId, String newVersion, String message,
-                                     ArtifactRepository repository, FileTransaction transaction )
-        throws IOException
-    {
-        Model pom = new Model();
-        pom.setGroupId( groupId );
-        pom.setArtifactId( artifactId );
-        pom.setVersion( version );
-
-        DistributionManagement dMngt = new DistributionManagement();
-
-        Relocation relocation = new Relocation();
-        relocation.setGroupId( newGroupId );
-        relocation.setArtifactId( newArtifactId );
-        relocation.setVersion( newVersion );
-        if ( message != null && message.length() > 0 )
-        {
-            relocation.setMessage( message );
-        }
-
-        dMngt.setRelocation( relocation );
-
-        pom.setDistributionManagement( dMngt );
-
-        Artifact artifact = artifactFactory.createBuildArtifact( groupId, artifactId, version, "pom" );
-        File pomFile = new File( repository.getBasedir(), repository.pathOf( artifact ) );
-
-        StringWriter strWriter = new StringWriter();
-        MavenXpp3Writer pomWriter = new MavenXpp3Writer();
-        pomWriter.write( strWriter, pom );
-
-        transaction.createFile( strWriter.toString(), pomFile );
-    }
-
-    private String getI18NString( String key, String arg0 )
-    {
-        return i18n.format( getClass().getName(), Locale.getDefault(), key, arg0 );
-    }
-
-    private String getI18NString( String key )
-    {
-        return i18n.getString( getClass().getName(), Locale.getDefault(), key );
     }
 
     private boolean testChecksums( Artifact artifact, File file, ArtifactReporter reporter )
         throws IOException, RepositoryConversionException
     {
-        boolean result;
+        boolean result = true;
 
         try
         {
-            result = verifyChecksum( file, file.getName() + ".md5", Digester.MD5, reporter, artifact,
-                                     "failure.incorrect.md5" );
-            result = result && verifyChecksum( file, file.getName() + ".sha1", Digester.SHA1, reporter, artifact,
-                                               "failure.incorrect.sha1" );
+            File md5 = new File( file.getParentFile(), file.getName() + ".md5" );
+            if ( md5.exists() )
+            {
+                String checksum = FileUtils.fileRead( md5 );
+                if ( !digester.verifyChecksum( file, checksum, Digester.MD5 ) )
+                {
+                    reporter.addFailure( artifact, i18n.getString( getClass().getName(), Locale.getDefault(),
+                                                                   "failure.incorrect.md5" ) );
+                    result = false;
+                }
+            }
+
+            File sha1 = new File( file.getParentFile(), file.getName() + ".sha1" );
+            if ( sha1.exists() )
+            {
+                String checksum = FileUtils.fileRead( sha1 );
+                if ( !digester.verifyChecksum( file, checksum, Digester.SHA1 ) )
+                {
+                    reporter.addFailure( artifact, i18n.getString( getClass().getName(), Locale.getDefault(),
+                                                                   "failure.incorrect.sha1" ) );
+                    result = false;
+                }
+            }
         }
         catch ( NoSuchAlgorithmException e )
         {
@@ -580,27 +318,7 @@ private boolean testChecksums( Artifact artifact, File file, ArtifactReporter re
         return result;
     }
 
-    private boolean verifyChecksum( File file, String fileName, String algorithm, ArtifactReporter reporter,
-                                    Artifact artifact, String key )
-        throws IOException, NoSuchAlgorithmException
-    {
-        boolean result = true;
-
-        File md5 = new File( file.getParentFile(), fileName );
-        if ( md5.exists() )
-        {
-            String checksum = FileUtils.fileRead( md5 );
-            if ( !digester.verifyChecksum( file, checksum, algorithm ) )
-            {
-                reporter.addFailure( artifact, getI18NString( key ) );
-                result = false;
-            }
-        }
-        return result;
-    }
-
-    private boolean copyArtifact( Artifact artifact, ArtifactRepository targetRepository, ArtifactReporter reporter,
-                                  FileTransaction transaction )
+    private boolean copyArtifact( Artifact artifact, ArtifactRepository targetRepository, ArtifactReporter reporter )
         throws RepositoryConversionException
     {
         File sourceFile = artifact.getFile();
@@ -614,25 +332,20 @@ private boolean copyArtifact( Artifact artifact, ArtifactRepository targetReposi
             if ( !force && targetFile.exists() )
             {
                 matching = FileUtils.contentEquals( sourceFile, targetFile );
-                if ( !matching )
-                {
-                    reporter.addFailure( artifact, getI18NString( "failure.target.already.exists" ) );
-                    result = false;
-                }
             }
-            if ( result )
+            if ( force || !matching )
             {
-                if ( force || !matching )
+                if ( testChecksums( artifact, sourceFile, reporter ) )
                 {
-                    if ( testChecksums( artifact, sourceFile, reporter ) )
-                    {
-                        transaction.copyFile( sourceFile, targetFile );
-                    }
-                    else
+                    if ( !dryrun )
                     {
-                        result = false;
+                        FileUtils.copyFile( sourceFile, targetFile );
                     }
                 }
+                else
+                {
+                    result = false;
+                }
             }
         }
         catch ( IOException e )