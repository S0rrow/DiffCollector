diff --git a/artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/PagingManager.java b/artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/PagingManager.java
index c8eb2ec5ea..d55c09f8de 100644
--- a/artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/PagingManager.java
+++ b/artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/PagingManager.java
@@ -17,20 +17,16 @@
 package org.apache.activemq.artemis.core.paging;
 
 import java.util.Map;
-import java.util.Queue;
-import java.util.concurrent.ConcurrentLinkedQueue;
-import java.util.concurrent.atomic.AtomicBoolean;
 
 import org.apache.activemq.artemis.api.core.SimpleString;
 import org.apache.activemq.artemis.core.server.ActiveMQComponent;
-import org.apache.activemq.artemis.core.server.files.FileStoreMonitor;
 import org.apache.activemq.artemis.core.settings.HierarchicalRepositoryChangeListener;
 
 /**
  * <PRE>
  *
  * +--------------+      1  +----------------+       N +--------------+       N +--------+       1 +-------------------+
- * | {@link org.apache.activemq.artemis.core.postoffice.PostOffice} |-------&gt; |{@link PagingManager}|-------&gt; |{@link PagingStore} | ------&gt; | {@link org.apache.activemq.artemis.core.paging.impl.Page}  | ------&gt; | {@link org.apache.activemq.artemis.core.io.SequentialFile} |
+ * | {@link org.apache.activemq.artemis.core.postoffice.PostOffice} |-------&gt; |{@link PagingManager}|-------&gt; |{@link PagingStore} | ------&gt; | {@link org.apache.activemq.artemis.core.paging.impl.Page}  | ------&gt; | {@link SequentialFile} |
  * +--------------+         +----------------+         +--------------+         +--------+         +-------------------+
  * |                  1 ^
  * |                    |
@@ -82,10 +78,6 @@ public interface PagingManager extends ActiveMQComponent, HierarchicalRepository
 
    void resumeCleanup();
 
-   void addBlockedStore(Blockable store);
-
-   void injectMonitor(FileStoreMonitor monitor) throws Exception;
-
    /**
     * Lock the manager. This method should not be called during normal PagingManager usage.
     */
@@ -97,71 +89,4 @@ public interface PagingManager extends ActiveMQComponent, HierarchicalRepository
     * @see #lock()
     */
    void unlock();
-
-   /**
-    * Add size at the global count level.
-    * if totalSize &gt; globalMaxSize it will return true
-    */
-   PagingManager addSize(int size);
-
-   boolean isUsingGlobalSize();
-
-   boolean isGlobalFull();
-
-   boolean isDiskFull();
-
-   default long getGlobalSize() {
-      return 0;
-   }
-
-   boolean checkMemory(Runnable runnable);
-
-   // To be used when the memory is oversized either by local settings or global settings on blocking addresses
-   final class OverSizedRunnable implements Runnable {
-
-      private final AtomicBoolean ran = new AtomicBoolean(false);
-
-      private final Runnable runnable;
-
-      public OverSizedRunnable(final Runnable runnable) {
-         this.runnable = runnable;
-      }
-
-      @Override
-      public void run() {
-         if (ran.compareAndSet(false, true)) {
-            runnable.run();
-         }
-      }
-   }
-
-   interface Blockable {
-      /**
-       * It will return true if the destination is leaving blocking.
-       */
-      boolean checkReleasedMemory();
-   }
-
-   final class MemoryFreedRunnablesExecutor implements Runnable {
-
-      private final Queue<OverSizedRunnable> onMemoryFreedRunnables = new ConcurrentLinkedQueue<>();
-
-      public void addRunnable(PagingManager.OverSizedRunnable runnable) {
-         onMemoryFreedRunnables.add(runnable);
-      }
-
-      @Override
-      public void run() {
-         Runnable runnable;
-
-         while ((runnable = onMemoryFreedRunnables.poll()) != null) {
-            runnable.run();
-         }
-      }
-
-      public boolean isEmpty() {
-         return onMemoryFreedRunnables.isEmpty();
-      }
-   }
-
 }