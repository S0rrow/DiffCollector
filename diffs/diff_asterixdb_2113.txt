diff --git a/asterix-om/src/main/java/edu/uci/ics/asterix/om/types/BuiltinType.java b/asterix-om/src/main/java/edu/uci/ics/asterix/om/types/BuiltinType.java
index 00e0dd8689..d289b01584 100644
--- a/asterix-om/src/main/java/edu/uci/ics/asterix/om/types/BuiltinType.java
+++ b/asterix-om/src/main/java/edu/uci/ics/asterix/om/types/BuiltinType.java
@@ -1,22 +1,5 @@
-/*
- * Copyright 2009-2013 by The Regents of the University of California
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * you may obtain a copy of the License from
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
 package edu.uci.ics.asterix.om.types;
 
-import org.json.JSONException;
-import org.json.JSONObject;
-
 import edu.uci.ics.asterix.common.exceptions.AsterixException;
 import edu.uci.ics.asterix.om.base.IAObject;
 import edu.uci.ics.asterix.om.visitors.IOMVisitor;
@@ -58,13 +41,6 @@ public abstract class BuiltinType implements IAType {
         public String getConstructor() {
             return null;
         }
-
-        @Override
-        public JSONObject toJSON() throws JSONException {
-            JSONObject type = new JSONObject();
-            type.put("type", "AsterixType");
-            return type;
-        }
     };
 
     public final static BuiltinType AINT8 = new LowerCaseConstructorType() {
@@ -85,13 +61,6 @@ public abstract class BuiltinType implements IAType {
         public String getTypeName() {
             return "int8";
         }
-
-        @Override
-        public JSONObject toJSON() throws JSONException {
-            JSONObject type = new JSONObject();
-            type.put("type", "AInt8");
-            return type;
-        }
     };
 
     public final static BuiltinType AINT16 = new LowerCaseConstructorType() {
@@ -112,13 +81,6 @@ public abstract class BuiltinType implements IAType {
         public String getTypeName() {
             return "int16";
         }
-
-        @Override
-        public JSONObject toJSON() throws JSONException {
-            JSONObject type = new JSONObject();
-            type.put("type", "AInt16");
-            return type;
-        }
     };
 
     public final static BuiltinType AINT32 = new LowerCaseConstructorType() {
@@ -139,13 +101,6 @@ public abstract class BuiltinType implements IAType {
         public String getTypeName() {
             return "int32";
         }
-
-        @Override
-        public JSONObject toJSON() throws JSONException {
-            JSONObject type = new JSONObject();
-            type.put("type", "AInt32");
-            return type;
-        }
     };
 
     public static final BuiltinType AINT64 = new LowerCaseConstructorType() {
@@ -167,12 +122,6 @@ public abstract class BuiltinType implements IAType {
             return "int64";
         }
 
-        @Override
-        public JSONObject toJSON() throws JSONException {
-            JSONObject type = new JSONObject();
-            type.put("type", "AInt64");
-            return type;
-        }
     };
 
     public final static BuiltinType ABINARY = new LowerCaseConstructorType() {
@@ -194,12 +143,6 @@ public abstract class BuiltinType implements IAType {
             return "binary";
         }
 
-        @Override
-        public JSONObject toJSON() throws JSONException {
-            JSONObject type = new JSONObject();
-            type.put("type", "ABinary");
-            return type;
-        }
     };
 
     public final static BuiltinType AFLOAT = new LowerCaseConstructorType() {
@@ -221,12 +164,6 @@ public abstract class BuiltinType implements IAType {
             return "float";
         }
 
-        @Override
-        public JSONObject toJSON() throws JSONException {
-            JSONObject type = new JSONObject();
-            type.put("type", "AFloat");
-            return type;
-        }
     };
 
     public final static BuiltinType ADOUBLE = new LowerCaseConstructorType() {
@@ -247,13 +184,6 @@ public abstract class BuiltinType implements IAType {
         public String getTypeName() {
             return "double";
         }
-
-        @Override
-        public JSONObject toJSON() throws JSONException {
-            JSONObject type = new JSONObject();
-            type.put("type", "ADouble");
-            return type;
-        }
     };
 
     public final static BuiltinType ASTRING = new LowerCaseConstructorType() {
@@ -274,13 +204,6 @@ public abstract class BuiltinType implements IAType {
         public String getTypeName() {
             return "string";
         }
-
-        @Override
-        public JSONObject toJSON() throws JSONException {
-            JSONObject type = new JSONObject();
-            type.put("type", "AString");
-            return type;
-        }
     };
 
     public final static BuiltinType ANULL = new LowerCaseConstructorType() {
@@ -302,12 +225,6 @@ public abstract class BuiltinType implements IAType {
             return "null";
         }
 
-        @Override
-        public JSONObject toJSON() throws JSONException {
-            JSONObject type = new JSONObject();
-            type.put("type", "Null");
-            return type;
-        }
     };
 
     public final static BuiltinType ABOOLEAN = new LowerCaseConstructorType() {
@@ -329,12 +246,6 @@ public abstract class BuiltinType implements IAType {
             return "boolean";
         }
 
-        @Override
-        public JSONObject toJSON() throws JSONException {
-            JSONObject type = new JSONObject();
-            type.put("type", "ABoolean");
-            return type;
-        }
     };
 
     public final static BuiltinType ATIME = new LowerCaseConstructorType() {
@@ -355,13 +266,6 @@ public abstract class BuiltinType implements IAType {
         public String getTypeName() {
             return "time";
         }
-
-        @Override
-        public JSONObject toJSON() throws JSONException {
-            JSONObject type = new JSONObject();
-            type.put("type", "ATime");
-            return type;
-        }
     };
 
     public final static BuiltinType ADATE = new LowerCaseConstructorType() {
@@ -382,13 +286,6 @@ public abstract class BuiltinType implements IAType {
         public String getTypeName() {
             return "date";
         }
-
-        @Override
-        public JSONObject toJSON() throws JSONException {
-            JSONObject type = new JSONObject();
-            type.put("type", "ADate");
-            return type;
-        }
     };
 
     public final static BuiltinType ADATETIME = new LowerCaseConstructorType() {
@@ -409,13 +306,6 @@ public abstract class BuiltinType implements IAType {
         public String getTypeName() {
             return "datetime";
         }
-
-        @Override
-        public JSONObject toJSON() throws JSONException {
-            JSONObject type = new JSONObject();
-            type.put("type", "ADateTime");
-            return type;
-        }
     };
 
     public final static BuiltinType ADURATION = new LowerCaseConstructorType() {
@@ -437,91 +327,6 @@ public abstract class BuiltinType implements IAType {
             return "duration";
         }
 
-        @Override
-        public JSONObject toJSON() throws JSONException {
-            JSONObject type = new JSONObject();
-            type.put("type", "ADuration");
-            return type;
-        }
-    };
-
-    public final static BuiltinType AYEARMONTHDURATION = new LowerCaseConstructorType() {
-
-        private static final long serialVersionUID = 1L;
-
-        @Override
-        public String getDisplayName() {
-            return "AYearMonthDuration";
-        }
-
-        @Override
-        public ATypeTag getTypeTag() {
-            return ATypeTag.YEARMONTHDURATION;
-        }
-
-        @Override
-        public String getTypeName() {
-            return "year-month-duration";
-        }
-
-        @Override
-        public JSONObject toJSON() throws JSONException {
-            JSONObject type = new JSONObject();
-            type.put("type", "AYearMonthDuration");
-            return type;
-        }
-    };
-
-    public final static BuiltinType ADAYTIMEDURATION = new LowerCaseConstructorType() {
-
-        private static final long serialVersionUID = 1L;
-
-        @Override
-        public String getDisplayName() {
-            return "ADayTimeDuration";
-        }
-
-        @Override
-        public ATypeTag getTypeTag() {
-            return ATypeTag.DAYTIMEDURATION;
-        }
-
-        @Override
-        public String getTypeName() {
-            return "day-time-duration";
-        }
-
-        @Override
-        public JSONObject toJSON() throws JSONException {
-            JSONObject type = new JSONObject();
-            type.put("type", "ADayTimeDuration");
-            return type;
-        }
-    };
-
-    public final static BuiltinType AINTERVAL = new LowerCaseConstructorType() {
-
-        private static final long serialVersionUID = 1L;
-
-        @Override
-        public String getDisplayName() {
-            return "AInterval";
-        }
-
-        @Override
-        public ATypeTag getTypeTag() {
-            return ATypeTag.INTERVAL;
-        }
-
-        @Override
-        public String getTypeName() {
-            return "interval";
-        }
-
-        @Override
-        public JSONObject toJSON() throws JSONException {
-            return null;
-        }
     };
 
     public final static BuiltinType APOINT = new LowerCaseConstructorType() {
@@ -542,13 +347,6 @@ public abstract class BuiltinType implements IAType {
         public String getTypeName() {
             return "point";
         }
-
-        @Override
-        public JSONObject toJSON() throws JSONException {
-            JSONObject type = new JSONObject();
-            type.put("type", "APoint");
-            return type;
-        }
     };
 
     public final static BuiltinType APOINT3D = new LowerCaseConstructorType() {
@@ -569,13 +367,6 @@ public abstract class BuiltinType implements IAType {
         public String getTypeName() {
             return "point3d";
         }
-
-        @Override
-        public JSONObject toJSON() throws JSONException {
-            JSONObject type = new JSONObject();
-            type.put("type", "APoint3D");
-            return type;
-        }
     };
 
     public final static BuiltinType ALINE = new LowerCaseConstructorType() {
@@ -597,12 +388,6 @@ public abstract class BuiltinType implements IAType {
             return "line";
         }
 
-        @Override
-        public JSONObject toJSON() throws JSONException {
-            JSONObject type = new JSONObject();
-            type.put("type", "ALINE");
-            return type;
-        }
     };
 
     public final static BuiltinType APOLYGON = new LowerCaseConstructorType() {
@@ -624,12 +409,6 @@ public abstract class BuiltinType implements IAType {
             return "polygon";
         }
 
-        @Override
-        public JSONObject toJSON() throws JSONException {
-            JSONObject type = new JSONObject();
-            type.put("type", "APOLYGON");
-            return type;
-        }
     };
 
     public final static BuiltinType ACIRCLE = new LowerCaseConstructorType() {
@@ -651,12 +430,6 @@ public abstract class BuiltinType implements IAType {
             return "circle";
         }
 
-        @Override
-        public JSONObject toJSON() throws JSONException {
-            JSONObject type = new JSONObject();
-            type.put("type", "ACIRCLE");
-            return type;
-        }
     };
 
     public final static BuiltinType ARECTANGLE = new LowerCaseConstructorType() {
@@ -678,12 +451,6 @@ public abstract class BuiltinType implements IAType {
             return "rectangle";
         }
 
-        @Override
-        public JSONObject toJSON() throws JSONException {
-            JSONObject type = new JSONObject();
-            type.put("type", "ARECTANGLE");
-            return type;
-        }
     };
 
     public static final IAType ABITARRAY = new LowerCaseConstructorType() {
@@ -704,66 +471,6 @@ public abstract class BuiltinType implements IAType {
         public String getTypeName() {
             return "abitarray";
         }
-
-        @Override
-        public JSONObject toJSON() throws JSONException {
-            JSONObject type = new JSONObject();
-            type.put("type", "ABitArray");
-            return type;
-        }
-    };
-
-    public static final BuiltinType AUUID = new LowerCaseConstructorType() {
-
-        @Override
-        public ATypeTag getTypeTag() {
-            return ATypeTag.UUID;
-        }
-
-        @Override
-        public String getDisplayName() {
-            return "UUID";
-        }
-
-        @Override
-        public String getTypeName() {
-            return "uuid";
-        }
-
-        @Override
-        public JSONObject toJSON() throws JSONException {
-            JSONObject type = new JSONObject();
-            type.put("type", getDisplayName());
-            return type;
-        }
-    };
-
-    // AUUID_STRING is used when converting between the string representation of        
-    // UUID and corresponding a UUID instance       
-    public static final BuiltinType AUUID_STRING = new LowerCaseConstructorType() {
-        private static final long serialVersionUID = 1L;
-
-        @Override
-        public ATypeTag getTypeTag() {
-            return ATypeTag.UUID_STRING;
-        }
-
-        @Override
-        public String getDisplayName() {
-            return "UUID_STRING";
-        }
-
-        @Override
-        public String getTypeName() {
-            return "uuid_string";
-        }
-
-        @Override
-        public JSONObject toJSON() throws JSONException {
-            JSONObject type = new JSONObject();
-            type.put("type", getDisplayName());
-            return type;
-        }
     };
 
     public static final IAType ANY = new BuiltinType() {
@@ -789,45 +496,6 @@ public abstract class BuiltinType implements IAType {
         public String getConstructor() {
             return null;
         }
-
-        @Override
-        public JSONObject toJSON() throws JSONException {
-            JSONObject type = new JSONObject();
-            type.put("type", "ANY");
-            return type;
-        }
-    };
-
-    public static final BuiltinType SHORTWITHOUTTYPEINFO = new BuiltinType() {
-
-        private static final long serialVersionUID = 1L;
-
-        @Override
-        public ATypeTag getTypeTag() {
-            return ATypeTag.SHORTWITHOUTTYPEINFO;
-        }
-
-        @Override
-        public String getTypeName() {
-            return "shortwithouttypeinfo";
-        }
-
-        @Override
-        public String getDisplayName() {
-            return "SHORTWITHOUTTYPEINFO";
-        }
-
-        @Override
-        public String getConstructor() {
-            return null;
-        }
-
-        @Override
-        public JSONObject toJSON() throws JSONException {
-            JSONObject type = new JSONObject();
-            type.put("type", "SHORTWITHOUTTYPEINFO");
-            return type;
-        }
     };
 
     public abstract String getConstructor();
@@ -849,23 +517,7 @@ public abstract class BuiltinType implements IAType {
 
     @Override
     public boolean deepEqual(IAObject obj) {
-        if (obj == this) {
-            return true;
-        }
-        if (!(obj instanceof BuiltinType)) {
-            return false;
-        }
-        return ((BuiltinType) obj).getTypeTag().equals(getTypeTag());
-    }
-
-    @Override
-    public boolean equals(Object object) {
-        return this.deepEqual((IAObject) object);
-    }
-
-    @Override
-    public int hashCode() {
-        return getTypeTag().hashCode();
+        return obj == this;
     }
 
     @Override
@@ -899,4 +551,4 @@ public abstract class BuiltinType implements IAType {
         throw new AsterixException("No string translation for type: " + str + " .");
     }
 
-}
+}
\ No newline at end of file