diff --git a/repository/src/main/java/org/apache/atlas/repository/graph/GraphBackedSearchIndexer.java b/repository/src/main/java/org/apache/atlas/repository/graph/GraphBackedSearchIndexer.java
index 803881538..c7cc97283 100755
--- a/repository/src/main/java/org/apache/atlas/repository/graph/GraphBackedSearchIndexer.java
+++ b/repository/src/main/java/org/apache/atlas/repository/graph/GraphBackedSearchIndexer.java
@@ -18,272 +18,220 @@
 
 package org.apache.atlas.repository.graph;
 
-import java.math.BigDecimal;
-import java.math.BigInteger;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-
-import javax.inject.Inject;
-
-import org.apache.atlas.ApplicationProperties;
-import org.apache.atlas.AtlasException;
+import com.thinkaurelius.titan.core.Cardinality;
+import com.thinkaurelius.titan.core.PropertyKey;
+import com.thinkaurelius.titan.core.TitanGraph;
+import com.thinkaurelius.titan.core.schema.Mapping;
+import com.thinkaurelius.titan.core.schema.TitanGraphIndex;
+import com.thinkaurelius.titan.core.schema.TitanManagement;
+import com.tinkerpop.blueprints.Edge;
+import com.tinkerpop.blueprints.Vertex;
+import org.apache.atlas.MetadataException;
 import org.apache.atlas.discovery.SearchIndexer;
-import org.apache.atlas.ha.HAConfiguration;
-import org.apache.atlas.listener.ActiveStateChangeHandler;
 import org.apache.atlas.repository.Constants;
 import org.apache.atlas.repository.IndexCreationException;
 import org.apache.atlas.repository.IndexException;
 import org.apache.atlas.repository.RepositoryException;
-import org.apache.atlas.repository.graphdb.AtlasCardinality;
-import org.apache.atlas.repository.graphdb.AtlasGraph;
-import org.apache.atlas.repository.graphdb.AtlasGraphIndex;
-import org.apache.atlas.repository.graphdb.AtlasGraphManagement;
-import org.apache.atlas.repository.graphdb.AtlasPropertyKey;
 import org.apache.atlas.typesystem.types.AttributeInfo;
 import org.apache.atlas.typesystem.types.ClassType;
 import org.apache.atlas.typesystem.types.DataTypes;
 import org.apache.atlas.typesystem.types.IDataType;
-import org.apache.atlas.typesystem.types.Multiplicity;
 import org.apache.atlas.typesystem.types.StructType;
 import org.apache.atlas.typesystem.types.TraitType;
-import org.apache.commons.configuration.Configuration;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.common.annotations.VisibleForTesting;
-
+import javax.inject.Inject;
+import java.math.BigDecimal;
+import java.math.BigInteger;
+import java.util.Collection;
+import java.util.Date;
+import java.util.Map;
 
 /**
  * Adds index for properties of a given type when its added before any instances are added.
  */
-public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChangeHandler {
+public class GraphBackedSearchIndexer implements SearchIndexer {
 
     private static final Logger LOG = LoggerFactory.getLogger(GraphBackedSearchIndexer.class);
-    
-    private static final List<Class> VERTEX_INDEX_EXCLUSIONS = new ArrayList() {
-        {
-            add(Boolean.class);
-            add(BigDecimal.class);
-            add(BigInteger.class);
-        }
-    };
-    
-    //allows injection of a dummy graph for testing
-    private IAtlasGraphProvider provider;
-    
+
+    private final TitanGraph titanGraph;
+
+    private TitanManagement management;
+
     @Inject
-    public GraphBackedSearchIndexer() throws RepositoryException, AtlasException {
-        this(new AtlasGraphProvider(), ApplicationProperties.get());
-    }
+    public GraphBackedSearchIndexer(GraphProvider<TitanGraph> graphProvider)
+        throws RepositoryException {
 
-    @VisibleForTesting
-    GraphBackedSearchIndexer( IAtlasGraphProvider provider, Configuration configuration)
-            throws IndexException, RepositoryException {
-        this.provider = provider;
-        if (!HAConfiguration.isHAEnabled(configuration)) {
-            initialize(provider.get());
-        }
-    }
+        this.titanGraph = graphProvider.get();
 
-    /**
-     * Initializes the indices for the graph - create indices for Global AtlasVertex Keys
-     */
-    private void initialize() throws RepositoryException, IndexException {
-        
-        initialize(provider.get());    
+        /* Create the transaction for indexing.
+         * Commit/rollback is expected to be called from the caller.
+         */
+        management = titanGraph.getManagementSystem();
+        initialize();
     }
-    
+
     /**
-     * Initializes the indices for the graph - create indices for Global AtlasVertex Keys
+     * Initializes the indices for the graph - create indices for Global Vertex Keys
      */
-    private void initialize(AtlasGraph graph) throws RepositoryException, IndexException {
-        AtlasGraphManagement management = graph.getManagementSystem();
+    private void initialize() {
+        if (management.containsPropertyKey(Constants.GUID_PROPERTY_KEY)) {
+            LOG.info("Global indexes already exist for graph");
+            return;
+        }
 
-        try {
-            if (management.containsPropertyKey(Constants.VERTEX_TYPE_PROPERTY_KEY)) {
-                LOG.info("Global indexes already exist for graph");
-                management.commit();
-                return;
-            }
+        /* This is called only once, which is the first time Atlas types are made indexable .*/
+        LOG.info("Indexes do not exist, Creating indexes for titanGraph.");
+        management.buildIndex(Constants.VERTEX_INDEX, Vertex.class)
+                .buildMixedIndex(Constants.BACKING_INDEX);
+        management.buildIndex(Constants.EDGE_INDEX, Edge.class)
+                .buildMixedIndex(Constants.BACKING_INDEX);
 
-            /* This is called only once, which is the first time Atlas types are made indexable .*/
-            LOG.info("Indexes do not exist, Creating indexes for graph.");
-
-            
-            management.createVertexIndex(Constants.VERTEX_INDEX, Constants.BACKING_INDEX, Collections.<AtlasPropertyKey>emptyList());              
-            management.createEdgeIndex(Constants.EDGE_INDEX, Constants.BACKING_INDEX);
-
-            // create a composite index for guid as its unique
-            createIndexes(management, Constants.GUID_PROPERTY_KEY, String.class, true,
-                    AtlasCardinality.SINGLE, true, true);
-
-            // create a composite index for entity creation timestamp
-            createIndexes(management, Constants.TIMESTAMP_PROPERTY_KEY, Long.class, false, AtlasCardinality.SINGLE, true, true);
-
-            // create a mixed index for entity state. Set systemProperty flag deliberately to false
-            // so that it doesnt create a composite index which has issues with
-            // titan 0.5.4 - Refer https://groups.google.com/forum/#!searchin/aureliusgraphs/hemanth/aureliusgraphs/bx7T843mzXU/fjAsclx7GAAJ
-            createIndexes(management, Constants.STATE_PROPERTY_KEY, String.class, false, AtlasCardinality.SINGLE, false, false);
-
-            // create a composite index for entity modification timestamp
-            createIndexes(management, Constants.MODIFICATION_TIMESTAMP_PROPERTY_KEY, Long.class, false,
-                    AtlasCardinality.SINGLE, false, false);
-
-            // create a composite and mixed index for type since it can be combined with other keys
-            createIndexes(management, Constants.ENTITY_TYPE_PROPERTY_KEY, String.class, false, AtlasCardinality.SINGLE,
-                    true, true);
-
-            // create a composite and mixed index for type since it can be combined with other keys
-            createIndexes(management, Constants.SUPER_TYPES_PROPERTY_KEY, String.class, false, AtlasCardinality.SET,
-                    true, true);
-
-            // create a composite and mixed index for traitNames since it can be combined with other
-            // keys. Traits must be a set and not a list.
-            createIndexes(management, Constants.TRAIT_NAMES_PROPERTY_KEY, String.class, false, AtlasCardinality.SET,
-                    true, true);
-
-            // Index for full text search
-            createFullTextIndex(management);
-
-            //Indexes for graph backed type system store
-            createTypeStoreIndexes(management);
-      
-            
-            commit(management);
-            LOG.info("Index creation for global keys complete.");
-        } catch (Throwable t) {
-            rollback(management);
-            throw new RepositoryException(t);
-        }
-    }
-   
+        // create a composite index for guid as its unique
+        createCompositeIndex(Constants.GUID_INDEX,
+                Constants.GUID_PROPERTY_KEY, String.class, true, Cardinality.SINGLE);
+
+        // create a composite and mixed index for type since it can be combined with other keys
+        createCompositeAndMixedIndex(Constants.ENTITY_TYPE_INDEX,
+                Constants.ENTITY_TYPE_PROPERTY_KEY, String.class, false, Cardinality.SINGLE);
+
+        // create a composite and mixed index for type since it can be combined with other keys
+        createCompositeAndMixedIndex(Constants.SUPER_TYPES_INDEX,
+                Constants.SUPER_TYPES_PROPERTY_KEY, String.class, false, Cardinality.SET);
 
-    private void createFullTextIndex(AtlasGraphManagement management) {
-        AtlasPropertyKey fullText =
-                management.makePropertyKey(Constants.ENTITY_TEXT_PROPERTY_KEY, String.class, AtlasCardinality.SINGLE);
+        // create a composite and mixed index for traitNames since it can be combined with other
+        // keys. Traits must be a set and not a list.
+        createCompositeAndMixedIndex(Constants.TRAIT_NAMES_INDEX,
+                Constants.TRAIT_NAMES_PROPERTY_KEY, String.class, false, Cardinality.SET);
 
-        management.createFullTextIndex(Constants.FULLTEXT_INDEX, fullText, Constants.BACKING_INDEX);
+        // Index for full text search
+        createFullTextIndex();
 
+        //Indexes for graph backed type system store
+        createTypeStoreIndexes();
+
+        management.commit();
+        //Make sure we acquire another transaction after commit for subsequent indexing
+        management = titanGraph.getManagementSystem();
+
+        LOG.info("Index creation for global keys complete.");
+    }
+
+    private void createFullTextIndex() {
+        PropertyKey fullText =
+                management.makePropertyKey(Constants.ENTITY_TEXT_PROPERTY_KEY).dataType(String.class).make();
+
+        management.buildIndex(Constants.FULLTEXT_INDEX, Vertex.class)
+                .addKey(fullText, com.thinkaurelius.titan.core.schema.Parameter.of("mapping", Mapping.TEXT))
+                .buildMixedIndex(Constants.BACKING_INDEX);
+        LOG.info("Created mixed index for {}", Constants.ENTITY_TEXT_PROPERTY_KEY);
     }
 
-    private void createTypeStoreIndexes(AtlasGraphManagement management) {
+    private void createTypeStoreIndexes() {
         //Create unique index on typeName
-        createIndexes(management, Constants.TYPENAME_PROPERTY_KEY, String.class, true, AtlasCardinality.SINGLE,
-                true, true);
+        createCompositeIndex(Constants.TYPENAME_PROPERTY_KEY, Constants.TYPENAME_PROPERTY_KEY, String.class,
+                true, Cardinality.SINGLE);
 
         //create index on vertex type
-        createIndexes(management, Constants.VERTEX_TYPE_PROPERTY_KEY, String.class, false, AtlasCardinality.SINGLE,
-                true, true);
+        createCompositeIndex(Constants.VERTEX_TYPE_PROPERTY_KEY, Constants.VERTEX_TYPE_PROPERTY_KEY, String.class,
+                false, Cardinality.SINGLE);
+
     }
 
     /**
      * This is upon adding a new type to Store.
      *
      * @param dataTypes data type
-     * @throws org.apache.atlas.AtlasException
+     * @throws org.apache.atlas.MetadataException
      */
     @Override
-    public void onAdd(Collection<? extends IDataType> dataTypes) throws AtlasException {
-        AtlasGraphManagement management = provider.get().getManagementSystem();
-               
-        for (IDataType dataType : dataTypes) {
-            LOG.debug("Creating indexes for type name={}, definition={}", dataType.getName(), dataType.getClass());
+    public void onAdd(Collection<? extends IDataType> dataTypes) throws MetadataException {
+
+        for(IDataType dataType : dataTypes) {
+            LOG.info("Creating indexes for type name={}, definition={}", dataType.getName(), dataType.getClass());
             try {
-                addIndexForType(management, dataType);
+                addIndexForType(dataType);
                 LOG.info("Index creation for type {} complete", dataType.getName());
             } catch (Throwable throwable) {
                 LOG.error("Error creating index for type {}", dataType, throwable);
-                //Rollback indexes if any failure
-                rollback(management);
                 throw new IndexCreationException("Error while creating index for type " + dataType, throwable);
             }
         }
-
-        //Commit indexes
-        commit(management);
     }
 
-    @Override
-    public void onChange(Collection<? extends IDataType> dataTypes) throws AtlasException {
-        onAdd(dataTypes);
-    }
-
-    private void addIndexForType(AtlasGraphManagement management, IDataType dataType) {
+    private void addIndexForType(IDataType dataType) {
         switch (dataType.getTypeCategory()) {
-        case PRIMITIVE:
-        case ENUM:
-        case ARRAY:
-        case MAP:
-            // do nothing since these are only attributes
-            // and not types like structs, traits or classes
-            break;
-
-        case STRUCT:
-            StructType structType = (StructType) dataType;
-            createIndexForFields(management, structType, structType.fieldMapping().fields);
-            break;
-
-        case TRAIT:
-            TraitType traitType = (TraitType) dataType;
-            createIndexForFields(management, traitType, traitType.fieldMapping().fields);
-            break;
-
-        case CLASS:
-            ClassType classType = (ClassType) dataType;
-            createIndexForFields(management, classType, classType.fieldMapping().fields);
-            break;
-
-        default:
-            throw new IllegalArgumentException("bad data type" + dataType);
+            case PRIMITIVE:
+            case ENUM:
+            case ARRAY:
+            case MAP:
+                // do nothing since these are only attributes
+                // and not types like structs, traits or classes
+                break;
+
+            case STRUCT:
+                StructType structType = (StructType) dataType;
+                createIndexForFields(structType, structType.fieldMapping().fields);
+                break;
+
+            case TRAIT:
+                TraitType traitType = (TraitType) dataType;
+                createIndexForFields(traitType, traitType.fieldMapping().fields);
+                break;
+
+            case CLASS:
+                ClassType classType = (ClassType) dataType;
+                createIndexForFields(classType, classType.fieldMapping().fields);
+                break;
+
+            default:
+                throw new IllegalArgumentException("bad data type" + dataType);
         }
     }
 
-    private void createIndexForFields(AtlasGraphManagement management, IDataType dataType, Map<String, AttributeInfo> fields) {
+    private void createIndexForFields(IDataType dataType, Map<String, AttributeInfo> fields) {
         for (AttributeInfo field : fields.values()) {
-            createIndexForAttribute(management, dataType.getName(), field);
+            if (field.isIndexable) {
+                createIndexForAttribute(dataType.getName(), field);
+            }
         }
     }
 
-    private void createIndexForAttribute(AtlasGraphManagement management, String typeName, AttributeInfo field) {
-        final String propertyName = GraphHelper.encodePropertyKey(typeName + "." + field.name);
+    private void createIndexForAttribute(String typeName, AttributeInfo field) {
+        final String propertyName = typeName + "." + field.name;
         switch (field.dataType().getTypeCategory()) {
-        case PRIMITIVE:
-            AtlasCardinality cardinality = getCardinality(field.multiplicity);
-            createIndexes(management, propertyName, getPrimitiveClass(field.dataType()), field.isUnique,
-                    cardinality, false, field.isIndexable);
-            break;
-
-        case ENUM:
-            cardinality = getCardinality(field.multiplicity);
-            createIndexes(management, propertyName, String.class, field.isUnique, cardinality, false, field.isIndexable);
-            break;
-
-        case ARRAY:
-        case MAP:
-            // todo - how do we overcome this limitation?
-            // IGNORE: Can only index single-valued property keys on vertices in Mixed Index
-            break;
-
-        case STRUCT:
-            StructType structType = (StructType) field.dataType();
-            createIndexForFields(management, structType, structType.fieldMapping().fields);
-            break;
-
-        case TRAIT:
-            // do nothing since this is NOT contained in other types
-            break;
-
-        case CLASS:
-            // this is only A reference, index the attribute for edge
-            // Commenting this out since we do not need an index for edge here
-            //createEdgeMixedIndex(propertyName);
-            break;
-
-        default:
-            throw new IllegalArgumentException("bad data type" + field.dataType().getName());
+            case PRIMITIVE:
+                createVertexMixedIndex(propertyName, getPrimitiveClass(field.dataType()));
+                break;
+
+            case ENUM:
+                createVertexMixedIndex(propertyName, String.class);
+                break;
+
+            case ARRAY:
+            case MAP:
+                // todo - how do we overcome this limitation?
+                // IGNORE: Can only index single-valued property keys on vertices in Mixed Index
+                break;
+
+            case STRUCT:
+                StructType structType = (StructType) field.dataType();
+                createIndexForFields(structType, structType.fieldMapping().fields);
+                break;
+
+            case TRAIT:
+                // do nothing since this is NOT contained in other types
+                break;
+
+            case CLASS:
+                // this is only A reference, index the attribute for edge
+                // Commenting this out since we do not need an index for edge here
+                //createEdgeMixedIndex(propertyName);
+                break;
+
+            default:
+                throw new IllegalArgumentException("bad data type" + field.dataType().getName());
         }
     }
 
@@ -309,165 +257,117 @@ public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChang
         } else if (dataType == DataTypes.BIGDECIMAL_TYPE) {
             return BigDecimal.class;
         } else if (dataType == DataTypes.DATE_TYPE) {
-            //Indexing with date converted to long as of now since Titan is yet to add support for Date type with mixed indexes
-            return Long.class;
+            return Date.class;
         }
 
 
         throw new IllegalArgumentException("unknown data type " + dataType);
     }
-  
 
-    private AtlasCardinality getCardinality(Multiplicity multiplicity) {
+/*
+    private Cardinality getCardinality(Multiplicity multiplicity) {
         if (multiplicity == Multiplicity.OPTIONAL || multiplicity == Multiplicity.REQUIRED) {
-            return AtlasCardinality.SINGLE;
+            return Cardinality.SINGLE;
         } else if (multiplicity == Multiplicity.COLLECTION) {
-            return AtlasCardinality.LIST;
+            return Cardinality.LIST;
         } else if (multiplicity == Multiplicity.SET) {
-            return AtlasCardinality.SET;
+            return Cardinality.SET;
         }
 
         // todo - default to LIST as this is the most forgiving
-        return AtlasCardinality.LIST;
+        return Cardinality.LIST;
     }
-    
-    private AtlasPropertyKey createIndexes(AtlasGraphManagement management, String propertyName, Class propertyClass,
-            boolean isUnique, AtlasCardinality cardinality, boolean createCompositeForAttribute,
-            boolean createCompositeWithTypeandSuperTypes) {
-
-        AtlasPropertyKey propertyKey = management.getPropertyKey(propertyName);
-        if (propertyKey == null) {
-            propertyKey = management.makePropertyKey(propertyName, propertyClass, cardinality);
+*/
 
-            updateVertexIndex(management, propertyName, propertyClass, cardinality, propertyKey);
-
-        }
-
-        if (createCompositeForAttribute) {
-            createExactMatchIndex(management, propertyClass, propertyKey, isUnique);
-        } else if (createCompositeWithTypeandSuperTypes) {
-            // Index with typename since typename+property key queries need to
-            // speed up
-            createExactMatchIndexWithTypeName(management, propertyClass, propertyKey);
-            createExactMatchIndexWithSuperTypeName(management, propertyClass, propertyKey);
-        }
-        return propertyKey;
+    private void createCompositeAndMixedIndex(String indexName,
+                                              String propertyName, Class propertyClass,
+                                              boolean isUnique, Cardinality cardinality) {
+        createCompositeIndex(indexName, propertyName, propertyClass, isUnique, cardinality);
+        createVertexMixedIndex(propertyName, propertyClass);
     }
-    
-    private void createExactMatchIndex(AtlasGraphManagement management, Class propertyClass,
-            AtlasPropertyKey propertyKey, boolean enforceUniqueness) {
-        
-        String propertyName = propertyKey.getName();
-        LOG.debug("Creating composite index for property {} of type {} ", propertyName, propertyClass.getName());
-
-        AtlasGraphIndex existingIndex = management.getGraphIndex(propertyName);
-        if (existingIndex == null) {
-            if (enforceUniqueness) {
-                LOG.debug("Enabling unique index for property {} of type {} ", propertyName, propertyClass.getName());
+
+    private PropertyKey createCompositeIndex(String indexName,
+                                             String propertyName, Class propertyClass,
+                                             boolean isUnique, Cardinality cardinality) {
+        PropertyKey propertyKey = management.getPropertyKey(propertyName);
+        if (propertyKey == null) {
+            propertyKey = management
+                    .makePropertyKey(propertyName)
+                    .dataType(propertyClass)
+                    .cardinality(cardinality)
+                    .make();
+
+            TitanManagement.IndexBuilder indexBuilder = management
+                    .buildIndex(indexName, Vertex.class)
+                    .addKey(propertyKey);
+
+            if (isUnique) {
+                indexBuilder = indexBuilder.unique();
             }
-            management.createExactMatchIndex(propertyName, enforceUniqueness, Collections.singletonList(propertyKey));
 
+            indexBuilder.buildCompositeIndex();
+            LOG.info("Created index for property {} in composite index {}", propertyName, indexName);
         }
-        LOG.info("Created composite index for property {} of type {} ", propertyName, propertyClass.getName());
-    }
-    
-
-    private void createExactMatchIndexWithTypeName(AtlasGraphManagement management,
-            Class propertyClass, AtlasPropertyKey propertyKey) {
-        createExactMatchIndexWithSystemProperty(management, propertyClass, propertyKey,
-                Constants.ENTITY_TYPE_PROPERTY_KEY, AtlasCardinality.SINGLE);
-    }
 
-    private void createExactMatchIndexWithSuperTypeName(AtlasGraphManagement management,
-            Class propertyClass, AtlasPropertyKey propertyKey) {
-        createExactMatchIndexWithSystemProperty(management, propertyClass, propertyKey,
-                Constants.SUPER_TYPES_PROPERTY_KEY, AtlasCardinality.SET);
+        return propertyKey;
     }
 
-    private void createExactMatchIndexWithSystemProperty(AtlasGraphManagement management,
-            Class propertyClass, AtlasPropertyKey propertyKey, final String systemPropertyKey,
-            AtlasCardinality cardinality) {
-
-        LOG.debug("Creating composite index for property {} of type {} and {}", propertyKey.getName(), propertyClass.getName(),
-                systemPropertyKey);
+    private PropertyKey createVertexMixedIndex(String propertyName, Class propertyClass) {
 
-        AtlasPropertyKey typePropertyKey = management.getPropertyKey(systemPropertyKey);
-        if (typePropertyKey == null) {
-            typePropertyKey = management.makePropertyKey(systemPropertyKey, String.class, cardinality);
+        PropertyKey propertyKey = management.getPropertyKey(propertyName);
+        if (propertyKey == null) {
+            // ignored cardinality as Can only index single-valued property keys on vertices
+            propertyKey = management
+                    .makePropertyKey(propertyName)
+                    .dataType(propertyClass)
+                    .make();
+
+            if (!checkIfMixedIndexApplicable(propertyClass)) {
+                LOG.debug("Creating composite index for property {} of type {} ", propertyName, propertyClass.getName());
+                //Use standard index as backing index only supports string, int and geo types
+                management.buildIndex(propertyName, Vertex.class).addKey(propertyKey).buildCompositeIndex();
+                LOG.debug("Created composite index for property {} of type {} ", propertyName, propertyClass.getName());
+            } else {
+                //Use backing index
+                LOG.debug("Creating backing index for property {} of type {} ", propertyName, propertyClass.getName());
+                TitanGraphIndex vertexIndex = management.getGraphIndex(Constants.VERTEX_INDEX);
+                management.addIndexKey(vertexIndex, propertyKey);
+                LOG.debug("Created backing index for property {} of type {} ", propertyName, propertyClass.getName());
+            }
+            LOG.info("Created mixed vertex index for property {}", propertyName);
         }
 
-        final String indexName = propertyKey.getName() + systemPropertyKey;
-        AtlasGraphIndex existingIndex = management.getGraphIndex(indexName);
-
-        if (existingIndex == null) {
-            
-            List<AtlasPropertyKey> keys = new ArrayList<AtlasPropertyKey>(2);
-            keys.add(propertyKey);
-            keys.add(typePropertyKey);
-            management.createExactMatchIndex(indexName, false, keys);
-
-            LOG.info("Created composite index for property {} of type {} and {}", propertyKey.getName(), propertyClass.getName(),
-                    systemPropertyKey);
-        }
+        return propertyKey;
     }
 
-    private void updateVertexIndex(AtlasGraphManagement management, String propertyName, Class propertyClass,
-            AtlasCardinality cardinality, AtlasPropertyKey propertyKey) {
-        if (checkIfVertexIndexApplicable(propertyClass, cardinality)) {
-            // Use backing index
-            management.addVertexIndexKey(Constants.VERTEX_INDEX, propertyKey);
-            LOG.debug("Creating backing index for property {} of type {} ", propertyName, propertyClass.getName());
-
-            LOG.info("Created backing index for property {} of type {} ", propertyName, propertyClass.getName());
+    private boolean checkIfMixedIndexApplicable(Class propertyClass) {
+        //TODO - Check why date types are failing in ES/Solr
+        if (propertyClass == Boolean.class || propertyClass == BigDecimal.class || propertyClass == BigInteger.class || propertyClass == Date.class) {
+            return false;
         }
+        return true;
     }
 
-    private boolean checkIfVertexIndexApplicable(Class propertyClass, AtlasCardinality cardinality) {
-        return !(VERTEX_INDEX_EXCLUSIONS.contains(propertyClass) || cardinality.isMany());
-    }
-    
-
-
-    private void commit(AtlasGraphManagement management) throws IndexException {
+    @Override
+    public void commit() throws IndexException {
         try {
             management.commit();
         } catch (Exception e) {
-            LOG.error("Index commit failed", e);
-            throw new IndexException("Index commit failed ", e);
+            LOG.error("Index commit failed" , e);
+            throw new IndexException("Index commit failed " , e);
         }
     }
 
-    private void rollback(AtlasGraphManagement management) throws IndexException {
+    @Override
+    public void rollback() throws IndexException {
         try {
             management.rollback();
         } catch (Exception e) {
-            LOG.error("Index rollback failed ", e);
-            throw new IndexException("Index rollback failed ", e);
+            LOG.error("Index rollback failed " , e);
+            throw new IndexException("Index rollback failed " , e);
         }
     }
 
-    /**
-     * Initialize global indices for Titan graph on server activation.
-     *
-     * Since the indices are shared state, we need to do this only from an active instance.
-     */
-    @Override
-    public void instanceIsActive() throws AtlasException {
-        LOG.info("Reacting to active: initializing index");
-        try {
-            initialize();
-        } catch (RepositoryException e) {
-            throw new AtlasException("Error in reacting to active on initialization", e);
-        } catch (IndexException e) {
-            throw new AtlasException("Error in reacting to active on initialization", e);
-        }
-    }
-
-    @Override
-    public void instanceIsPassive() {
-        LOG.info("Reacting to passive state: No action right now.");
-    }
-    
     /* Commenting this out since we do not need an index for edge label here
     private void createEdgeMixedIndex(String propertyName) {
         EdgeLabel edgeLabel = management.getEdgeLabel(propertyName);