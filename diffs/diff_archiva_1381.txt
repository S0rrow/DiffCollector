diff --git a/archiva-base/archiva-consumers/archiva-database-consumers/src/main/java/org/apache/maven/archiva/consumers/database/ProjectModelToDatabaseConsumer.java b/archiva-base/archiva-consumers/archiva-database-consumers/src/main/java/org/apache/maven/archiva/consumers/database/ProjectModelToDatabaseConsumer.java
index 688e52add..7abe24297 100644
--- a/archiva-base/archiva-consumers/archiva-database-consumers/src/main/java/org/apache/maven/archiva/consumers/database/ProjectModelToDatabaseConsumer.java
+++ b/archiva-base/archiva-consumers/archiva-database-consumers/src/main/java/org/apache/maven/archiva/consumers/database/ProjectModelToDatabaseConsumer.java
@@ -26,26 +26,21 @@
 import org.apache.maven.archiva.consumers.AbstractMonitoredConsumer;
 import org.apache.maven.archiva.consumers.ConsumerException;
 import org.apache.maven.archiva.consumers.DatabaseUnprocessedArtifactConsumer;
-import org.apache.maven.archiva.consumers.database.project.WrappedDatabaseProjectModelResolver;
 import org.apache.maven.archiva.database.ArchivaDAO;
 import org.apache.maven.archiva.database.ArchivaDatabaseException;
 import org.apache.maven.archiva.database.ObjectNotFoundException;
 import org.apache.maven.archiva.model.ArchivaArtifact;
 import org.apache.maven.archiva.model.ArchivaProjectModel;
 import org.apache.maven.archiva.model.RepositoryURL;
-import org.apache.maven.archiva.model.RepositoryProblem;
 import org.apache.maven.archiva.repository.layout.BidirectionalRepositoryLayout;
 import org.apache.maven.archiva.repository.layout.BidirectionalRepositoryLayoutFactory;
 import org.apache.maven.archiva.repository.layout.LayoutException;
-import org.apache.maven.archiva.repository.layout.FilenameParts;
-import org.apache.maven.archiva.repository.layout.RepositoryLayoutUtils;
 import org.apache.maven.archiva.repository.project.ProjectModelException;
 import org.apache.maven.archiva.repository.project.ProjectModelFilter;
 import org.apache.maven.archiva.repository.project.ProjectModelReader;
 import org.apache.maven.archiva.repository.project.ProjectModelResolver;
 import org.apache.maven.archiva.repository.project.filters.EffectiveProjectModelFilter;
 import org.apache.maven.archiva.repository.project.resolvers.RepositoryProjectModelResolverFactory;
-import org.apache.maven.archiva.reporting.artifact.CorruptArtifactReport;
 import org.codehaus.plexus.personality.plexus.lifecycle.phase.Initializable;
 import org.codehaus.plexus.personality.plexus.lifecycle.phase.InitializationException;
 import org.codehaus.plexus.registry.Registry;
@@ -185,36 +180,17 @@ public void processArchivaArtifact( ArchivaArtifact artifact )
             // Resolve the project model
             model = effectiveModelFilter.filter( model );
 
-            if( isValidModel( model, artifact ) )
-            {
-                dao.getProjectModelDAO().saveProjectModel( model );
-            }
-            else
-            {
-                getLogger().warn( "Invalid or corrupt pom. Project model " + model
-                    + " was not added in the database." );
-            }
-
             dao.getProjectModelDAO().saveProjectModel( model );
         }
         catch ( ProjectModelException e )
         {
             getLogger().warn( "Unable to read project model " + artifactFile + " : " + e.getMessage(), e );
-                        
-            addProblem( artifact, "Unable to read project model " + artifactFile + " : " + e.getMessage() );
         }
         catch ( ArchivaDatabaseException e )
         {
             getLogger().warn( "Unable to save project model " + artifactFile + " to the database : " + e.getMessage(),
                               e );
         }
-        catch ( Throwable t )
-        {
-            // Catch the other errors in the process to allow the rest of the process to complete.
-            getLogger().error(
-                               "Unable to process model " + artifactFile + " due to : " + t.getClass().getName()
-                                   + " : " + t.getMessage(), t );
-        }
     }
 
     private boolean hasProjectModelInDatabase( String groupId, String artifactId, String version )
@@ -310,99 +286,8 @@ private void update()
             while ( it.hasNext() )
             {
                 ProjectModelResolver resolver = (ProjectModelResolver) it.next();
-                ProjectModelResolver wrapped = new WrappedDatabaseProjectModelResolver( dao, resolver );
-                effectiveModelFilter.addProjectModelResolver( wrapped );
-            }
-        }
-    }
-
-    private String toPath( ArchivaArtifact artifact )
-    {
-        try
-        {
-            BidirectionalRepositoryLayout layout = layoutFactory.getLayout( artifact );
-            return layout.toPath( artifact );
-        }
-        catch ( LayoutException e )
-        {
-            getLogger().warn( "Unable to calculate path for artifact: " + artifact );
-            return null;
-        }
-    }
-
-    private boolean isValidModel( ArchivaProjectModel model, ArchivaArtifact artifact )
-        throws ConsumerException
-    {
-        File artifactFile = toFile( artifact );
-
-        try
-        {
-            FilenameParts parts = RepositoryLayoutUtils.splitFilename( artifactFile.getName(), null );
-            if ( !parts.artifactId.equalsIgnoreCase( model.getArtifactId() ) )
-            {
-                getLogger().warn( "Project Model " + model + " artifactId: " + model.getArtifactId() +
-                    " does not match the pom file's artifactId: " + parts.artifactId );
-
-                addProblem( artifact, "Project Model " + model + " artifactId: " + model.getArtifactId() +
-                    " does not match the pom file's artifactId: " + parts.artifactId );
-
-                return false;
-            }
-
-            if ( !parts.version.equalsIgnoreCase( model.getVersion() ) )
-            {
-                getLogger().warn( "Project Model " + model + " artifactId: " + model.getArtifactId() +
-                    " does not match the pom file's artifactId: " + parts.artifactId );
-
-                addProblem( artifact, "Project Model " + model + " version: " + model.getVersion() +
-                    " does not match the pom file's version: " + parts.version );
-
-                return false;
+                effectiveModelFilter.addProjectModelResolver( resolver );
             }
-
-            //check if the file name matches the values indicated in the pom
-           if( !artifactFile.getName().equalsIgnoreCase( model.getArtifactId() + "-" + model.getVersion() + "-" + parts.classifier) )
-            {
-                getLogger().warn( "Artifact " + artifact + " does not match the artifactId and/or version " +
-                    "specified in the project model " + model );
-
-                addProblem( artifact, "Artifact " + artifact + " does not match the artifactId and/or version " +
-                    "specified in the project model " + model );
-
-                return false;
-            }
-
-        }
-        catch ( LayoutException le )
-        {
-            throw new ConsumerException( le.getMessage() );
-        }
-
-        return true;
-    }
-
-    private void addProblem( ArchivaArtifact artifact, String msg )
-        throws ConsumerException
-    {
-        RepositoryProblem problem = new RepositoryProblem();
-        problem.setRepositoryId( artifact.getModel().getRepositoryId() );
-        problem.setPath( toPath( artifact ) );
-        problem.setGroupId( artifact.getGroupId() );
-        problem.setArtifactId( artifact.getArtifactId() );
-        problem.setVersion( artifact.getVersion() );
-        problem.setType( CorruptArtifactReport.PROBLEM_TYPE_CORRUPT_ARTIFACT );
-        problem.setOrigin( getId() );
-        problem.setMessage( msg );
-
-        try
-        {
-            dao.getRepositoryProblemDAO().saveRepositoryProblem( problem );
-        }
-        catch ( ArchivaDatabaseException e )
-        {
-            String emsg = "Unable to save problem with artifact location to DB: " + e.getMessage();
-            getLogger().warn( emsg, e );
-            throw new ConsumerException( emsg, e );
         }
     }
 }