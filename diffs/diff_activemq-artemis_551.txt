diff --git a/artemis-protocols/artemis-openwire-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/openwire/OpenWireConnection.java b/artemis-protocols/artemis-openwire-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/openwire/OpenWireConnection.java
index f9e8838b79..e8259c32b0 100644
--- a/artemis-protocols/artemis-openwire-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/openwire/OpenWireConnection.java
+++ b/artemis-protocols/artemis-openwire-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/openwire/OpenWireConnection.java
@@ -16,18 +16,15 @@
  */
 package org.apache.activemq.artemis.core.protocol.openwire;
 
-import javax.jms.IllegalStateException;
 import javax.jms.InvalidClientIDException;
 import javax.jms.InvalidDestinationException;
 import javax.jms.JMSSecurityException;
-import javax.transaction.xa.XAException;
 import javax.transaction.xa.XAResource;
-import javax.transaction.xa.Xid;
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
-import java.util.ListIterator;
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
@@ -48,30 +45,22 @@ import org.apache.activemq.artemis.core.protocol.openwire.amq.AMQConnectionConte
 import org.apache.activemq.artemis.core.protocol.openwire.amq.AMQConsumer;
 import org.apache.activemq.artemis.core.protocol.openwire.amq.AMQConsumerBrokerExchange;
 import org.apache.activemq.artemis.core.protocol.openwire.amq.AMQProducerBrokerExchange;
+import org.apache.activemq.artemis.core.protocol.openwire.amq.AMQServerConsumer;
 import org.apache.activemq.artemis.core.protocol.openwire.amq.AMQSession;
 import org.apache.activemq.artemis.core.protocol.openwire.amq.AMQSingleConsumerBrokerExchange;
-import org.apache.activemq.artemis.core.protocol.openwire.util.OpenWireUtil;
 import org.apache.activemq.artemis.core.remoting.FailureListener;
 import org.apache.activemq.artemis.core.security.CheckType;
 import org.apache.activemq.artemis.core.security.SecurityAuth;
 import org.apache.activemq.artemis.core.server.ActiveMQMessageBundle;
-import org.apache.activemq.artemis.core.server.ActiveMQServer;
 import org.apache.activemq.artemis.core.server.ActiveMQServerLogger;
 import org.apache.activemq.artemis.core.server.BindingQueryResult;
-import org.apache.activemq.artemis.core.server.MessageReference;
 import org.apache.activemq.artemis.core.server.Queue;
 import org.apache.activemq.artemis.core.server.ServerConsumer;
-import org.apache.activemq.artemis.core.server.ServerSession;
 import org.apache.activemq.artemis.core.server.SlowConsumerDetectionListener;
-import org.apache.activemq.artemis.core.server.impl.RefsOperation;
-import org.apache.activemq.artemis.core.transaction.Transaction;
-import org.apache.activemq.artemis.core.transaction.TransactionOperationAbstract;
-import org.apache.activemq.artemis.core.transaction.TransactionPropertyIndexes;
 import org.apache.activemq.artemis.spi.core.protocol.AbstractRemotingConnection;
 import org.apache.activemq.artemis.spi.core.protocol.RemotingConnection;
 import org.apache.activemq.artemis.spi.core.remoting.Connection;
 import org.apache.activemq.artemis.utils.ConcurrentHashSet;
-import org.apache.activemq.artemis.utils.UUIDGenerator;
 import org.apache.activemq.command.ActiveMQDestination;
 import org.apache.activemq.command.ActiveMQMessage;
 import org.apache.activemq.command.ActiveMQTopic;
@@ -107,7 +96,6 @@ import org.apache.activemq.command.ShutdownInfo;
 import org.apache.activemq.command.TransactionId;
 import org.apache.activemq.command.TransactionInfo;
 import org.apache.activemq.command.WireFormatInfo;
-import org.apache.activemq.command.XATransactionId;
 import org.apache.activemq.openwire.OpenWireFormat;
 import org.apache.activemq.state.CommandVisitor;
 import org.apache.activemq.state.ConnectionState;
@@ -142,42 +130,29 @@ public class OpenWireConnection extends AbstractRemotingConnection implements Se
    // Clebert: Artemis session has meta-data support, perhaps we could reuse it here
    private Map<String, SessionId> sessionIdMap = new ConcurrentHashMap<>();
 
-   private final Map<ConsumerId, AMQConsumerBrokerExchange> consumerExchanges = new ConcurrentHashMap<>();
-   private final Map<ProducerId, AMQProducerBrokerExchange> producerExchanges = new ConcurrentHashMap<>();
+
+   private final Map<ConsumerId, AMQConsumerBrokerExchange> consumerExchanges = new HashMap<>();
+   private final Map<ProducerId, AMQProducerBrokerExchange> producerExchanges = new HashMap<>();
 
    // Clebert TODO: Artemis already stores the Session. Why do we need a different one here
    private Map<SessionId, AMQSession> sessions = new ConcurrentHashMap<>();
 
+
+
    private ConnectionState state;
 
    private final Set<ActiveMQDestination> tempQueues = new ConcurrentHashSet<>();
 
-   /**
-    * Openwire doesn't sen transactions associated with any sessions.
-    * It will however send beingTX / endTX as it would be doing it with XA Transactions.
-    * But always without any association with Sessions.
-    * This collection will hold nonXA transactions. Hopefully while they are in transit only.
-    */
-   private Map<TransactionId, Transaction> txMap = new ConcurrentHashMap<>();
+   private Map<TransactionId, TransactionInfo> txMap = new ConcurrentHashMap<>();
 
    private volatile AMQSession advisorySession;
 
-   private final ActiveMQServer server;
-
-   /**
-    * This is to be used with connection operations that don't have  a session.
-    * Such as TM operations.
-    */
-   private ServerSession internalSession;
-
    // TODO-NOW: check on why there are two connections created for every createConnection on the client.
    public OpenWireConnection(Connection connection,
-                             ActiveMQServer server,
                              Executor executor,
                              OpenWireProtocolManager openWireProtocolManager,
                              OpenWireFormat wf) {
       super(connection, executor);
-      this.server = server;
       this.protocolManager = openWireProtocolManager;
       this.wireFormat = wf;
    }
@@ -231,6 +206,7 @@ public class OpenWireConnection extends AbstractRemotingConnection implements Se
          boolean responseRequired = command.isResponseRequired();
          int commandId = command.getCommandId();
 
+
          // TODO-NOW: the server should send packets to the client based on the requested times
          //           need to look at what Andy did on AMQP
 
@@ -251,10 +227,8 @@ public class OpenWireConnection extends AbstractRemotingConnection implements Se
                response = command.visit(commandProcessorInstance);
             }
             catch (Exception e) {
-               // TODO: logging
-               e.printStackTrace();
                if (responseRequired) {
-                  response = convertException(e);
+                  response = new ExceptionResponse(e);
                }
             }
             finally {
@@ -302,16 +276,6 @@ public class OpenWireConnection extends AbstractRemotingConnection implements Se
    }
 
    public void sendException(Exception e) {
-      Response resp = convertException(e);
-      try {
-         dispatch(resp);
-      }
-      catch (IOException e2) {
-         ActiveMQServerLogger.LOGGER.warn(e.getMessage(), e2);
-      }
-   }
-
-   private Response convertException(Exception e) {
       Response resp;
       if (e instanceof ActiveMQSecurityException) {
          resp = new ExceptionResponse(new JMSSecurityException(e.getMessage()));
@@ -322,7 +286,12 @@ public class OpenWireConnection extends AbstractRemotingConnection implements Se
       else {
          resp = new ExceptionResponse(e);
       }
-      return resp;
+      try {
+         dispatch(resp);
+      }
+      catch (IOException e2) {
+         ActiveMQServerLogger.LOGGER.warn(e.getMessage(), e2);
+      }
    }
 
    private void setLastCommand(Command command) {
@@ -457,7 +426,9 @@ public class OpenWireConnection extends AbstractRemotingConnection implements Se
       }
    }
 
-   private void addConsumerBrokerExchange(ConsumerId id, AMQSession amqSession, List<AMQConsumer> consumerList) {
+   private void addConsumerBrokerExchange(ConsumerId id,
+                                         AMQSession amqSession,
+                                         List<AMQConsumer> consumerList) {
       AMQConsumerBrokerExchange result = consumerExchanges.get(id);
       if (result == null) {
          if (consumerList.size() == 1) {
@@ -500,6 +471,12 @@ public class OpenWireConnection extends AbstractRemotingConnection implements Se
       return result;
    }
 
+   private void removeConsumerBrokerExchange(ConsumerId id) {
+      synchronized (consumerExchanges) {
+         consumerExchanges.remove(id);
+      }
+   }
+
    public void deliverMessage(MessageDispatch dispatch) {
       Message m = dispatch.getMessage();
       if (m != null) {
@@ -527,7 +504,7 @@ public class OpenWireConnection extends AbstractRemotingConnection implements Se
       }
    }
 
-   private void disconnect(ActiveMQException me, String reason, boolean fail) {
+   private void disconnect(ActiveMQException me, String reason, boolean fail)  {
 
       if (context == null || destroyed) {
          return;
@@ -599,7 +576,7 @@ public class OpenWireConnection extends AbstractRemotingConnection implements Se
       }
    }
 
-   public AMQConnectionContext initContext(ConnectionInfo info) throws Exception {
+   public AMQConnectionContext initContext(ConnectionInfo info) {
       WireFormatInfo wireFormatInfo = wireFormat.getPreferedWireFormatInfo();
       // Older clients should have been defaulting this field to true.. but
       // they were not.
@@ -631,15 +608,9 @@ public class OpenWireConnection extends AbstractRemotingConnection implements Se
          info.setClientIp(getRemoteAddress());
       }
 
-      createInternalSession(info);
-
       return context;
    }
 
-   private void createInternalSession(ConnectionInfo info) throws Exception {
-      internalSession = server.createSession(UUIDGenerator.getInstance().generateStringUUID(), context.getUserName(), info.getPassword(), -1, this, true, false, false, false, null, null, true);
-   }
-
    //raise the refCount of context
    public void reconnect(AMQConnectionContext existingContext, ConnectionInfo info) {
       this.context = existingContext;
@@ -692,17 +663,17 @@ public class OpenWireConnection extends AbstractRemotingConnection implements Se
       ActiveMQDestination dest = info.getDestination();
       if (dest.isQueue()) {
          SimpleString qName = OpenWireUtil.toCoreAddress(dest);
-         QueueBinding binding = (QueueBinding) server.getPostOffice().getBinding(qName);
+         QueueBinding binding = (QueueBinding) protocolManager.getServer().getPostOffice().getBinding(qName);
          if (binding == null) {
             if (getState().getInfo() != null) {
 
                CheckType checkType = dest.isTemporary() ? CheckType.CREATE_NON_DURABLE_QUEUE : CheckType.CREATE_DURABLE_QUEUE;
-               server.getSecurityStore().check(qName, checkType, this);
+               protocolManager.getServer().getSecurityStore().check(qName, checkType, this);
 
-               server.checkQueueCreationLimit(getUsername());
+               protocolManager.getServer().checkQueueCreationLimit(getUsername());
             }
             ConnectionInfo connInfo = getState().getInfo();
-            server.createQueue(qName, qName, null, connInfo == null ? null : SimpleString.toSimpleString(connInfo.getUserName()), false, dest.isTemporary());
+            protocolManager.getServer().createQueue(qName, qName, null, connInfo == null ? null : SimpleString.toSimpleString(connInfo.getUserName()), false, dest.isTemporary());
          }
 
          if (dest.isTemporary()) {
@@ -719,12 +690,11 @@ public class OpenWireConnection extends AbstractRemotingConnection implements Se
       }
    }
 
+
    public void updateConsumer(ConsumerControl consumerControl) {
-      ConsumerId consumerId = consumerControl.getConsumerId();
-      AMQConsumerBrokerExchange exchange = this.consumerExchanges.get(consumerId);
-      if (exchange != null) {
-         exchange.updateConsumerPrefetchSize(consumerControl.getPrefetch());
-      }
+      SessionId sessionId = consumerControl.getConsumerId().getParentId();
+      AMQSession amqSession = sessions.get(sessionId);
+      amqSession.updateConsumerPrefetchSize(consumerControl.getConsumerId(), consumerControl.getPrefetch());
    }
 
    public void addConsumer(ConsumerInfo info) throws Exception {
@@ -737,7 +707,7 @@ public class OpenWireConnection extends AbstractRemotingConnection implements Se
       }
       SessionState ss = cs.getSessionState(sessionId);
       if (ss == null) {
-         throw new IllegalStateException(server + " Cannot add a consumer to a session that had not been registered: " + sessionId);
+         throw new IllegalStateException(protocolManager.getServer() + " Cannot add a consumer to a session that had not been registered: " + sessionId);
       }
       // Avoid replaying dup commands
       if (!ss.getConsumerIds().contains(info.getConsumerId())) {
@@ -759,13 +729,13 @@ public class OpenWireConnection extends AbstractRemotingConnection implements Se
 
       @Override
       public void onSlowConsumer(ServerConsumer consumer) {
-         if (consumer.getProtocolData() != null && consumer.getProtocolData() instanceof AMQConsumer) {
-            AMQConsumer amqConsumer = (AMQConsumer) consumer.getProtocolData();
-            ActiveMQTopic topic = AdvisorySupport.getSlowConsumerAdvisoryTopic(amqConsumer.getOpenwireDestination());
+         if (consumer instanceof AMQServerConsumer) {
+            AMQServerConsumer serverConsumer = (AMQServerConsumer)consumer;
+            ActiveMQTopic topic = AdvisorySupport.getSlowConsumerAdvisoryTopic(serverConsumer.getAmqConsumer().getOpenwireDestination());
             ActiveMQMessage advisoryMessage = new ActiveMQMessage();
             try {
-               advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_CONSUMER_ID, amqConsumer.getId().toString());
-               protocolManager.fireAdvisory(context, topic, advisoryMessage, amqConsumer.getId());
+               advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_CONSUMER_ID, serverConsumer.getAmqConsumer().getId().toString());
+               protocolManager.fireAdvisory(context, topic, advisoryMessage, serverConsumer.getAmqConsumer().getId());
             }
             catch (Exception e) {
                // TODO-NOW: LOGGING
@@ -788,13 +758,9 @@ public class OpenWireConnection extends AbstractRemotingConnection implements Se
    }
 
    public AMQSession addSession(SessionInfo ss, boolean internal) {
-      AMQSession amqSession = new AMQSession(getState().getInfo(), ss, server, this, protocolManager.getScheduledPool());
+      AMQSession amqSession = new AMQSession(getState().getInfo(), ss, protocolManager.getServer(), this, protocolManager.getScheduledPool(), protocolManager);
       amqSession.initialize();
-
-      if (internal) {
-         amqSession.disableSecurity();
-      }
-
+      amqSession.setInternal(internal);
       sessions.put(ss.getSessionId(), amqSession);
       sessionIdMap.put(amqSession.getCoreSession().getName(), ss.getSessionId());
       return amqSession;
@@ -814,10 +780,10 @@ public class OpenWireConnection extends AbstractRemotingConnection implements Se
    public void removeDestination(ActiveMQDestination dest) throws Exception {
       if (dest.isQueue()) {
          SimpleString qName = new SimpleString("jms.queue." + dest.getPhysicalName());
-         server.destroyQueue(qName);
+         protocolManager.getServer().destroyQueue(qName);
       }
       else {
-         Bindings bindings = server.getPostOffice().getBindingsForAddress(SimpleString.toSimpleString("jms.topic." + dest.getPhysicalName()));
+         Bindings bindings = protocolManager.getServer().getPostOffice().getBindingsForAddress(SimpleString.toSimpleString("jms.topic." + dest.getPhysicalName()));
          Iterator<Binding> iterator = bindings.getBindings().iterator();
 
          while (iterator.hasNext()) {
@@ -849,15 +815,17 @@ public class OpenWireConnection extends AbstractRemotingConnection implements Se
    private void validateDestination(ActiveMQDestination destination) throws Exception {
       if (destination.isQueue()) {
          SimpleString physicalName = OpenWireUtil.toCoreAddress(destination);
-         BindingQueryResult result = server.bindingQuery(physicalName);
+         BindingQueryResult result = protocolManager.getServer().bindingQuery(physicalName);
          if (!result.isExists() && !result.isAutoCreateJmsQueues()) {
             throw ActiveMQMessageBundle.BUNDLE.noSuchQueue(physicalName);
          }
       }
    }
 
+
    CommandProcessor commandProcessorInstance = new CommandProcessor();
 
+
    // This will listen for commands throught the protocolmanager
    public class CommandProcessor implements CommandVisitor {
 
@@ -966,71 +934,18 @@ public class OpenWireConnection extends AbstractRemotingConnection implements Se
 
       @Override
       public Response processRemoveSubscription(RemoveSubscriptionInfo subInfo) throws Exception {
-         SimpleString subQueueName = new SimpleString(org.apache.activemq.artemis.jms.client.ActiveMQDestination.createQueueNameForDurableSubscription(true, subInfo.getClientId(), subInfo.getSubscriptionName()));
-         server.destroyQueue(subQueueName);
-
+         protocolManager.removeSubscription(subInfo);
          return null;
       }
 
       @Override
       public Response processRollbackTransaction(TransactionInfo info) throws Exception {
-         Transaction tx = lookupTX(info.getTransactionId(), null);
-         if (info.getTransactionId().isXATransaction() && tx == null) {
-            throw newXAException("Transaction '" + info.getTransactionId() + "' has not been started.", XAException.XAER_NOTA);
-         }
-         else if (tx != null) {
-
-            AMQSession amqSession = (AMQSession) tx.getProtocolData();
-
-            if (amqSession != null) {
-               amqSession.getCoreSession().resetTX(tx);
-
-               try {
-                  returnReferences(tx, amqSession);
-               }
-               finally {
-                  amqSession.getCoreSession().resetTX(null);
-               }
-            }
-            tx.rollback();
-         }
-
+         protocolManager.rollbackTransaction(info);
+         TransactionId txId = info.getTransactionId();
+         txMap.remove(txId);
          return null;
       }
 
-      /**
-       * Openwire will redeliver rolled back references.
-       * We need to return those here.
-       */
-      private void returnReferences(Transaction tx, AMQSession session) throws Exception {
-         if (session == null || session.isClosed()) {
-            return;
-         }
-
-         RefsOperation oper = (RefsOperation) tx.getProperty(TransactionPropertyIndexes.REFS_OPERATION);
-
-         if (oper != null) {
-            List<MessageReference> ackRefs = oper.getReferencesToAcknowledge();
-
-            for (ListIterator<MessageReference> referenceIterator = ackRefs.listIterator(ackRefs.size()); referenceIterator.hasPrevious(); ) {
-               MessageReference ref = referenceIterator.previous();
-
-               Long consumerID = ref.getConsumerId();
-
-               ServerConsumer consumer = null;
-               if (consumerID != null) {
-                  consumer = session.getCoreSession().locateConsumer(consumerID);
-               }
-
-               if (consumer != null) {
-                  referenceIterator.remove();
-                  ref.incrementDeliveryCount();
-                  consumer.backToDelivering(ref);
-               }
-            }
-         }
-      }
-
       @Override
       public Response processShutdown(ShutdownInfo info) throws Exception {
          OpenWireConnection.this.shutdown(false);
@@ -1074,134 +989,43 @@ public class OpenWireConnection extends AbstractRemotingConnection implements Se
 
       @Override
       public Response processBeginTransaction(TransactionInfo info) throws Exception {
-         final TransactionId txID = info.getTransactionId();
+         TransactionId txId = info.getTransactionId();
 
-         try {
-            internalSession.resetTX(null);
-            if (txID.isXATransaction()) {
-               Xid xid = OpenWireUtil.toXID(txID);
-               internalSession.xaStart(xid);
-            }
-            else {
-               Transaction transaction = internalSession.newTransaction();
-               txMap.put(txID, transaction);
-               transaction.addOperation(new TransactionOperationAbstract() {
-                  @Override
-                  public void afterCommit(Transaction tx) {
-                     txMap.remove(txID);
-                  }
-               });
-            }
-         }
-         finally {
-            internalSession.resetTX(null);
+         if (!txMap.containsKey(txId)) {
+            txMap.put(txId, info);
          }
          return null;
       }
 
       @Override
-      public Response processCommitTransactionOnePhase(TransactionInfo info) throws Exception {
-         return processCommit(info, true);
-      }
-
-      private Response processCommit(TransactionInfo info, boolean onePhase) throws Exception {
-         TransactionId txID = info.getTransactionId();
-
-         Transaction tx = lookupTX(txID, null);
-
-         AMQSession session = (AMQSession) tx.getProtocolData();
-
-         tx.commit(onePhase);
-
-         return null;
-      }
-
-      @Override
-      public Response processCommitTransactionTwoPhase(TransactionInfo info) throws Exception {
-         return processCommit(info, false);
-      }
-
-      @Override
-      public Response processForgetTransaction(TransactionInfo info) throws Exception {
-         TransactionId txID = info.getTransactionId();
-
-         if (txID.isXATransaction()) {
-            try {
-               Xid xid = OpenWireUtil.toXID(info.getTransactionId());
-               internalSession.xaForget(xid);
-            }
-            catch (Exception e) {
-               e.printStackTrace();
-               throw e;
-            }
-         }
-         else {
-            txMap.remove(txID);
-         }
-
-         return null;
+      public Response processBrokerInfo(BrokerInfo arg0) throws Exception {
+         throw new IllegalStateException("not implemented! ");
       }
 
       @Override
-      public Response processPrepareTransaction(TransactionInfo info) throws Exception {
-         TransactionId txID = info.getTransactionId();
-
+      public Response processCommitTransactionOnePhase(TransactionInfo info) throws Exception {
          try {
-            if (txID.isXATransaction()) {
-               try {
-                  Xid xid = OpenWireUtil.toXID(info.getTransactionId());
-                  internalSession.xaPrepare(xid);
-               }
-               catch (Exception e) {
-                  e.printStackTrace();
-                  throw e;
-               }
-            }
-            else {
-               Transaction tx = lookupTX(txID, null);
-               tx.prepare();
-            }
+            protocolManager.commitTransactionOnePhase(info);
+            TransactionId txId = info.getTransactionId();
+            txMap.remove(txId);
          }
-         finally {
-            internalSession.resetTX(null);
+         catch (Exception e) {
+            e.printStackTrace();
+            throw e;
          }
 
-         return new IntegerResponse(XAResource.XA_RDONLY);
+         return null;
       }
 
       @Override
-      public Response processEndTransaction(TransactionInfo info) throws Exception {
-         TransactionId txID = info.getTransactionId();
-
-         if (txID.isXATransaction()) {
-            try {
-               Transaction tx = lookupTX(txID, null);
-               internalSession.resetTX(tx);
-               try {
-                  Xid xid = OpenWireUtil.toXID(info.getTransactionId());
-                  internalSession.xaEnd(xid);
-               }
-               finally {
-                  internalSession.resetTX(null);
-               }
-            }
-            catch (Exception e) {
-               e.printStackTrace();
-               throw e;
-            }
-         }
-         else {
-            txMap.remove(info);
-         }
+      public Response processCommitTransactionTwoPhase(TransactionInfo info) throws Exception {
+         protocolManager.commitTransactionTwoPhase(info);
+         TransactionId txId = info.getTransactionId();
+         txMap.remove(txId);
 
          return null;
       }
 
-      @Override
-      public Response processBrokerInfo(BrokerInfo arg0) throws Exception {
-         throw new IllegalStateException("not implemented! ");
-      }
-
       @Override
       public Response processConnectionControl(ConnectionControl connectionControl) throws Exception {
          //activemq5 keeps a var to remember only the faultTolerant flag
@@ -1233,11 +1057,31 @@ public class OpenWireConnection extends AbstractRemotingConnection implements Se
          throw new IllegalStateException("not implemented! ");
       }
 
+      @Override
+      public Response processEndTransaction(TransactionInfo info) throws Exception {
+         protocolManager.endTransaction(info);
+         TransactionId txId = info.getTransactionId();
+
+         if (!txMap.containsKey(txId)) {
+            txMap.put(txId, info);
+         }
+         return null;
+      }
+
       @Override
       public Response processFlush(FlushCommand arg0) throws Exception {
          throw new IllegalStateException("not implemented! ");
       }
 
+      @Override
+      public Response processForgetTransaction(TransactionInfo info) throws Exception {
+         TransactionId txId = info.getTransactionId();
+         txMap.remove(txId);
+
+         protocolManager.forgetTransaction(info.getTransactionId());
+         return null;
+      }
+
       @Override
       public Response processKeepAlive(KeepAliveInfo arg0) throws Exception {
          throw new IllegalStateException("not implemented! ");
@@ -1253,32 +1097,15 @@ public class OpenWireConnection extends AbstractRemotingConnection implements Se
 
          AMQSession session = getSession(producerId.getParentId());
 
-         Transaction tx = lookupTX(messageSend.getTransactionId(), session);
-
-         session.getCoreSession().resetTX(tx);
-         try {
-            session.send(producerInfo, messageSend, sendProducerAck);
-         }
-         finally {
-            session.getCoreSession().resetTX(null);
-         }
-
+         session.send(producerInfo, messageSend, sendProducerAck);
          return null;
       }
 
+
       @Override
       public Response processMessageAck(MessageAck ack) throws Exception {
-         AMQSession session = getSession(ack.getConsumerId().getParentId());
-         Transaction tx = lookupTX(ack.getTransactionId(), session);
-         session.getCoreSession().resetTX(tx);
-
-         try {
-            AMQConsumerBrokerExchange consumerBrokerExchange = consumerExchanges.get(ack.getConsumerId());
-            consumerBrokerExchange.acknowledge(ack);
-         }
-         finally {
-            session.getCoreSession().resetTX(null);
-         }
+         AMQConsumerBrokerExchange consumerBrokerExchange = consumerExchanges.get(ack.getConsumerId());
+         consumerBrokerExchange.acknowledge(ack);
          return null;
       }
 
@@ -1302,6 +1129,13 @@ public class OpenWireConnection extends AbstractRemotingConnection implements Se
          return null;
       }
 
+      @Override
+      public Response processPrepareTransaction(TransactionInfo info) throws Exception {
+         protocolManager.prepareTransaction(info);
+         //activemq needs a rdonly response
+         return new IntegerResponse(XAResource.XA_RDONLY);
+      }
+
       @Override
       public Response processProducerAck(ProducerAck arg0) throws Exception {
          // a broker doesn't do producers.. this shouldn't happen
@@ -1310,13 +1144,20 @@ public class OpenWireConnection extends AbstractRemotingConnection implements Se
 
       @Override
       public Response processRecoverTransactions(TransactionInfo info) throws Exception {
-         List<Xid> xids = server.getResourceManager().getInDoubtTransactions();
+         Set<SessionId> sIds = state.getSessionIds();
+
+
          List<TransactionId> recovered = new ArrayList<>();
-         for (Xid xid : xids) {
-            XATransactionId amqXid = new XATransactionId(xid);
-            recovered.add(amqXid);
+         if (sIds != null) {
+            for (SessionId sid : sIds) {
+               AMQSession s = sessions.get(sid);
+               if (s != null) {
+                  s.recover(recovered);
+               }
+            }
          }
-         return new DataArrayResponse(recovered.toArray(new TransactionId[recovered.size()]));
+
+         return new DataArrayResponse(recovered.toArray(new TransactionId[0]));
       }
 
       @Override
@@ -1345,45 +1186,15 @@ public class OpenWireConnection extends AbstractRemotingConnection implements Se
          ConsumerInfo info = consumerState.getInfo();
          info.setLastDeliveredSequenceId(lastDeliveredSequenceId);
 
-         AMQConsumerBrokerExchange consumerBrokerExchange = consumerExchanges.remove(id);
+         AMQConsumerBrokerExchange consumerBrokerExchange = consumerExchanges.get(id);
 
          consumerBrokerExchange.removeConsumer();
 
-         return null;
-      }
-
-   }
+         removeConsumerBrokerExchange(id);
 
-   private Transaction lookupTX(TransactionId txID, AMQSession session) throws IllegalStateException {
-      if (txID == null) {
          return null;
       }
 
-      Xid xid = null;
-      Transaction transaction;
-      if (txID.isXATransaction()) {
-         xid = OpenWireUtil.toXID(txID);
-         transaction = server.getResourceManager().getTransaction(xid);
-      }
-      else {
-         transaction = txMap.get(txID);
-      }
-
-      if (transaction == null) {
-         throw new IllegalStateException("cannot find transactionInfo::" + txID + " xid=" + xid);
-      }
-
-      if (session != null && transaction.getProtocolData() != session) {
-         transaction.setProtocolData(session);
-      }
-
-      return transaction;
-   }
-
-   public static XAException newXAException(String s, int errorCode) {
-      XAException xaException = new XAException(s + " " + "xaErrorCode:" + errorCode);
-      xaException.errorCode = errorCode;
-      return xaException;
    }
 
 }