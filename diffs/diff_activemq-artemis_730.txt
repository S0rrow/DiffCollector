diff --git a/artemis-protocols/artemis-openwire-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/openwire/amq/AMQSession.java b/artemis-protocols/artemis-openwire-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/openwire/amq/AMQSession.java
index aae1a53131..006f05e9a3 100644
--- a/artemis-protocols/artemis-openwire-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/openwire/amq/AMQSession.java
+++ b/artemis-protocols/artemis-openwire-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/openwire/amq/AMQSession.java
@@ -18,36 +18,30 @@ package org.apache.activemq.artemis.core.protocol.openwire.amq;
 
 import javax.jms.InvalidDestinationException;
 import javax.jms.ResourceAllocationException;
-import java.io.IOException;
 import java.util.List;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import org.apache.activemq.advisory.AdvisorySupport;
-import org.apache.activemq.artemis.api.core.ActiveMQQueueExistsException;
-import org.apache.activemq.artemis.api.core.RoutingType;
 import org.apache.activemq.artemis.api.core.SimpleString;
-import org.apache.activemq.artemis.core.io.IOCallback;
-import org.apache.activemq.artemis.core.message.impl.CoreMessageObjectPools;
 import org.apache.activemq.artemis.core.paging.PagingStore;
 import org.apache.activemq.artemis.core.postoffice.RoutingStatus;
 import org.apache.activemq.artemis.core.protocol.openwire.OpenWireConnection;
 import org.apache.activemq.artemis.core.protocol.openwire.OpenWireMessageConverter;
 import org.apache.activemq.artemis.core.protocol.openwire.OpenWireProtocolManager;
+import org.apache.activemq.artemis.core.protocol.openwire.util.OpenWireUtil;
 import org.apache.activemq.artemis.core.server.ActiveMQServer;
 import org.apache.activemq.artemis.core.server.ActiveMQServerLogger;
 import org.apache.activemq.artemis.core.server.BindingQueryResult;
 import org.apache.activemq.artemis.core.server.MessageReference;
 import org.apache.activemq.artemis.core.server.QueueQueryResult;
+import org.apache.activemq.artemis.core.server.RoutingType;
 import org.apache.activemq.artemis.core.server.ServerConsumer;
+import org.apache.activemq.artemis.core.server.ServerMessage;
 import org.apache.activemq.artemis.core.server.ServerSession;
 import org.apache.activemq.artemis.core.server.SlowConsumerDetectionListener;
-import org.apache.activemq.artemis.core.settings.impl.AddressSettings;
-import org.apache.activemq.artemis.reader.MessageUtil;
 import org.apache.activemq.artemis.spi.core.protocol.SessionCallback;
 import org.apache.activemq.artemis.spi.core.remoting.ReadyListener;
-import org.apache.activemq.artemis.utils.CompositeAddress;
 import org.apache.activemq.artemis.utils.IDGenerator;
 import org.apache.activemq.artemis.utils.SimpleIDGenerator;
 import org.apache.activemq.command.ActiveMQDestination;
@@ -60,41 +54,29 @@ import org.apache.activemq.command.ProducerInfo;
 import org.apache.activemq.command.Response;
 import org.apache.activemq.command.SessionInfo;
 import org.apache.activemq.openwire.OpenWireFormat;
-import org.jboss.logging.Logger;
-
-import static org.apache.activemq.artemis.core.protocol.openwire.util.OpenWireUtil.OPENWIRE_WILDCARD;
+import org.apache.activemq.wireformat.WireFormat;
 
 public class AMQSession implements SessionCallback {
-   private final Logger logger = Logger.getLogger(AMQSession.class);
-
    // ConsumerID is generated inside the session, 0, 1, 2, ... as many consumers as you have on the session
    protected final IDGenerator consumerIDGenerator = new SimpleIDGenerator(0);
 
-   private final ConnectionInfo connInfo;
+   private ConnectionInfo connInfo;
    private ServerSession coreSession;
-   private final SessionInfo sessInfo;
-   private final ActiveMQServer server;
-   private final OpenWireConnection connection;
+   private SessionInfo sessInfo;
+   private ActiveMQServer server;
+   private OpenWireConnection connection;
 
-   private final AtomicBoolean started = new AtomicBoolean(false);
+   private AtomicBoolean started = new AtomicBoolean(false);
 
    private final ScheduledExecutorService scheduledPool;
 
    // The sessionWireformat used by the session
    // this object is meant to be used per thread / session
    // so we make a new one per AMQSession
-   private final OpenWireFormat protocolManagerWireFormat;
+   private final OpenWireMessageConverter converter;
 
    private final OpenWireProtocolManager protocolManager;
 
-   private final Runnable enableAutoReadAndTtl;
-
-   private final CoreMessageObjectPools coreMessageObjectPools = new CoreMessageObjectPools();
-
-   private String[] existingQueuesCache;
-
-   private final SimpleString clientId;
-
    public AMQSession(ConnectionInfo connInfo,
                      SessionInfo sessInfo,
                      ActiveMQServer server,
@@ -102,22 +84,22 @@ public class AMQSession implements SessionCallback {
                      OpenWireProtocolManager protocolManager) {
       this.connInfo = connInfo;
       this.sessInfo = sessInfo;
-      this.clientId = SimpleString.toSimpleString(connInfo.getClientId());
+
       this.server = server;
       this.connection = connection;
       this.protocolManager = protocolManager;
       this.scheduledPool = protocolManager.getScheduledPool();
-      this.protocolManagerWireFormat = protocolManager.wireFormat().copy();
-      this.enableAutoReadAndTtl = this::enableAutoReadAndTtl;
-      this.existingQueuesCache = null;
+      OpenWireFormat marshaller = (OpenWireFormat) connection.getMarshaller();
+
+      this.converter = new OpenWireMessageConverter(marshaller.copy());
    }
 
    public boolean isClosed() {
       return coreSession.isClosed();
    }
 
-   public OpenWireFormat wireFormat() {
-      return protocolManagerWireFormat;
+   public OpenWireMessageConverter getConverter() {
+      return converter;
    }
 
    public void initialize() {
@@ -142,13 +124,6 @@ public class AMQSession implements SessionCallback {
 
    }
 
-
-   @Override
-   public boolean supportsDirectDelivery() {
-      return false;
-   }
-
-
    @Override
    public boolean updateDeliveryCountAfterCancel(ServerConsumer consumer, MessageReference ref, boolean failed) {
       if (consumer.getProtocolData() != null) {
@@ -173,22 +148,14 @@ public class AMQSession implements SessionCallback {
       List<AMQConsumer> consumersList = new java.util.LinkedList<>();
 
       for (ActiveMQDestination openWireDest : dests) {
-         boolean isInternalAddress = false;
-         if (AdvisorySupport.isAdvisoryTopic(dest)) {
-            if (!connection.isSuppportAdvisory()) {
-               continue;
-            }
-            isInternalAddress = connection.isSuppressInternalManagementObjects();
-         }
          if (openWireDest.isQueue()) {
-            openWireDest = protocolManager.virtualTopicConsumerToFQQN(openWireDest);
-            SimpleString queueName = new SimpleString(convertWildcard(openWireDest.getPhysicalName()));
+            SimpleString queueName = new SimpleString(OpenWireUtil.convertWildcard(openWireDest.getPhysicalName()));
 
             if (!checkAutoCreateQueue(queueName, openWireDest.isTemporary())) {
                throw new InvalidDestinationException("Destination doesn't exist: " + queueName);
             }
          }
-         AMQConsumer consumer = new AMQConsumer(this, openWireDest, info, scheduledPool, isInternalAddress);
+         AMQConsumer consumer = new AMQConsumer(this, openWireDest, info, scheduledPool);
 
          long nativeID = consumerIDGenerator.generateID();
          consumer.init(slowConsumerDetectionListener, nativeID);
@@ -198,33 +165,6 @@ public class AMQSession implements SessionCallback {
       return consumersList;
    }
 
-   private boolean checkCachedExistingQueues(final SimpleString address,
-                                             final String physicalName,
-                                             final boolean isTemporary) throws Exception {
-      String[] existingQueuesCache = this.existingQueuesCache;
-      //lazy allocation of the cache
-      if (existingQueuesCache == null) {
-         //16 means 64 bytes with 32 bit references or 128 bytes with 64 bit references -> 1 or 2 cache lines with common archs
-         existingQueuesCache = new String[16];
-         assert (Integer.bitCount(existingQueuesCache.length) == 1) : "existingQueuesCache.length must be power of 2";
-         this.existingQueuesCache = existingQueuesCache;
-      }
-      final int hashCode = physicalName.hashCode();
-      //this.existingQueuesCache.length must be power of 2
-      final int mask = existingQueuesCache.length - 1;
-      final int index = hashCode & mask;
-      final String existingQueue = existingQueuesCache[index];
-      if (existingQueue != null && existingQueue.equals(physicalName)) {
-         //if the information is stale (ie no longer valid) it will fail later
-         return true;
-      }
-      final boolean hasQueue = checkAutoCreateQueue(address, isTemporary);
-      if (hasQueue) {
-         existingQueuesCache[index] = physicalName;
-      }
-      return hasQueue;
-   }
-
    private boolean checkAutoCreateQueue(SimpleString queueName, boolean isTemporary) throws Exception {
       boolean hasQueue = true;
       if (!connection.containsKnownDestination(queueName)) {
@@ -232,34 +172,16 @@ public class AMQSession implements SessionCallback {
          BindingQueryResult bindingQuery = server.bindingQuery(queueName);
          QueueQueryResult queueBinding = server.queueQuery(queueName);
 
-         try {
-            if (!queueBinding.isExists()) {
-               if (bindingQuery.isAutoCreateQueues()) {
-                  SimpleString queueNameToUse = queueName;
-                  SimpleString addressToUse = queueName;
-                  RoutingType routingTypeToUse = RoutingType.ANYCAST;
-                  if (CompositeAddress.isFullyQualified(queueName.toString())) {
-                     CompositeAddress compositeAddress = CompositeAddress.getQueueName(queueName.toString());
-                     addressToUse = new SimpleString(compositeAddress.getAddress());
-                     queueNameToUse = new SimpleString(compositeAddress.getQueueName());
-                     if (bindingQuery.getAddressInfo() != null) {
-                        routingTypeToUse = bindingQuery.getAddressInfo().getRoutingType();
-                     } else {
-                        AddressSettings as = server.getAddressSettingsRepository().getMatch(addressToUse.toString());
-                        routingTypeToUse = as.getDefaultAddressRoutingType();
-                     }
-                  }
-                  server.createQueue(addressToUse, routingTypeToUse, queueNameToUse, null, true, isTemporary);
-                  connection.addKnownDestination(queueName);
-               } else {
-                  hasQueue = false;
-               }
+         boolean isAutoCreate = bindingQuery.isExists() ? true : bindingQuery.isAutoCreateQueues();
+
+         if (!queueBinding.isExists()) {
+            if (isAutoCreate) {
+               server.createQueue(queueName, RoutingType.ANYCAST, queueName, null, true, isTemporary);
+               connection.addKnownDestination(queueName);
+            } else {
+               hasQueue = false;
             }
-         } catch (ActiveMQQueueExistsException e) {
-            // In case another thread created the queue before us but after we did the binding query
-            hasQueue = true;
          }
-
       }
       return hasQueue;
    }
@@ -304,17 +226,16 @@ public class AMQSession implements SessionCallback {
 
    @Override
    public int sendMessage(MessageReference reference,
-                          org.apache.activemq.artemis.api.core.Message message,
+                          ServerMessage message,
                           ServerConsumer consumer,
                           int deliveryCount) {
       AMQConsumer theConsumer = (AMQConsumer) consumer.getProtocolData();
-      // TODO: use encoders and proper conversions here
-      return theConsumer.handleDeliver(reference, message.toCore(), deliveryCount);
+      return theConsumer.handleDeliver(reference, message, deliveryCount);
    }
 
    @Override
    public int sendLargeMessage(MessageReference reference,
-                               org.apache.activemq.artemis.api.core.Message message,
+                               ServerMessage message,
                                ServerConsumer consumerID,
                                long bodySize,
                                int deliveryCount) {
@@ -350,130 +271,88 @@ public class AMQSession implements SessionCallback {
    }
 
    @Override
-   public void disconnect(ServerConsumer consumerId, SimpleString queueName) {
+   public void disconnect(ServerConsumer consumerId, String queueName) {
       // TODO Auto-generated method stub
 
    }
 
    public void send(final ProducerInfo producerInfo,
                     final Message messageSend,
-                    final boolean sendProducerAck) throws Exception {
+                    boolean sendProducerAck) throws Exception {
       messageSend.setBrokerInTime(System.currentTimeMillis());
 
-      final ActiveMQDestination destination = messageSend.getDestination();
+      ActiveMQDestination destination = messageSend.getDestination();
 
-      final ActiveMQDestination[] actualDestinations;
-      final int actualDestinationsCount;
+      ActiveMQDestination[] actualDestinations = null;
       if (destination.isComposite()) {
          actualDestinations = destination.getCompositeDestinations();
          messageSend.setOriginalDestination(destination);
-         actualDestinationsCount = actualDestinations.length;
       } else {
-         actualDestinations = null;
-         actualDestinationsCount = 1;
+         actualDestinations = new ActiveMQDestination[]{destination};
       }
 
-      final org.apache.activemq.artemis.api.core.Message originalCoreMsg = OpenWireMessageConverter.inbound(messageSend, protocolManagerWireFormat, coreMessageObjectPools);
-
-      assert clientId.toString().equals(this.connection.getState().getInfo().getClientId()) : "Session cached clientId must be the same of the connection";
-      originalCoreMsg.putStringProperty(MessageUtil.CONNECTION_ID_PROPERTY_NAME, clientId);
+      ServerMessage originalCoreMsg = getConverter().inbound(messageSend);
 
       /* ActiveMQ failover transport will attempt to reconnect after connection failure.  Any sent messages that did
       * not receive acks will be resent.  (ActiveMQ broker handles this by returning a last sequence id received to
       * the client).  To handle this in Artemis we use a duplicate ID cache.  To do this we check to see if the
       * message comes from failover connection.  If so we add a DUPLICATE_ID to handle duplicates after a resend. */
       if (connection.getContext().isFaultTolerant() && !messageSend.getProperties().containsKey(org.apache.activemq.artemis.api.core.Message.HDR_DUPLICATE_DETECTION_ID.toString())) {
-         originalCoreMsg.putStringProperty(org.apache.activemq.artemis.api.core.Message.HDR_DUPLICATE_DETECTION_ID, SimpleString.toSimpleString(messageSend.getMessageId().toString()));
+         originalCoreMsg.putStringProperty(org.apache.activemq.artemis.api.core.Message.HDR_DUPLICATE_DETECTION_ID.toString(), messageSend.getMessageId().toString());
       }
 
-      final boolean shouldBlockProducer = producerInfo.getWindowSize() > 0 || messageSend.isResponseRequired();
+      boolean shouldBlockProducer = producerInfo.getWindowSize() > 0 || messageSend.isResponseRequired();
+
+      final AtomicInteger count = new AtomicInteger(actualDestinations.length);
 
-      final AtomicInteger count = actualDestinations != null ? new AtomicInteger(actualDestinationsCount) : null;
+      final Exception[] anyException = new Exception[] {null};
 
       if (shouldBlockProducer) {
          connection.getContext().setDontSendReponse(true);
       }
 
-      for (int i = 0; i < actualDestinationsCount; i++) {
-         final ActiveMQDestination dest = actualDestinations != null ? actualDestinations[i] : destination;
-         final String physicalName = dest.getPhysicalName();
-         final SimpleString address = SimpleString.toSimpleString(physicalName, coreMessageObjectPools.getAddressStringSimpleStringPool());
-         //the last coreMsg could be directly the original one -> it avoid 1 copy if actualDestinations > 1 and ANY copy if actualDestinations == 1
-         final org.apache.activemq.artemis.api.core.Message coreMsg = (i == actualDestinationsCount - 1) ? originalCoreMsg : originalCoreMsg.copy();
+      for (int i = 0; i < actualDestinations.length; i++) {
+         ActiveMQDestination dest = actualDestinations[i];
+         SimpleString address = new SimpleString(dest.getPhysicalName());
+         ServerMessage coreMsg = originalCoreMsg.copy();
          coreMsg.setAddress(address);
 
-         if (dest.isQueue()) {
-            checkCachedExistingQueues(address, physicalName, dest.isTemporary());
-            coreMsg.setRoutingType(RoutingType.ANYCAST);
+         if (actualDestinations[i].isQueue()) {
+            checkAutoCreateQueue(new SimpleString(actualDestinations[i].getPhysicalName()), actualDestinations[i].isTemporary());
+            coreMsg.putByteProperty(org.apache.activemq.artemis.api.core.Message.HDR_ROUTING_TYPE, RoutingType.ANYCAST.getType());
          } else {
-            coreMsg.setRoutingType(RoutingType.MULTICAST);
+            coreMsg.putByteProperty(org.apache.activemq.artemis.api.core.Message.HDR_ROUTING_TYPE, RoutingType.MULTICAST.getType());
          }
-         final PagingStore store = server.getPagingManager().getPageStore(address);
+         PagingStore store = server.getPagingManager().getPageStore(address);
+
 
          this.connection.disableTtl();
          if (shouldBlockProducer) {
-            sendShouldBlockProducer(producerInfo, messageSend, sendProducerAck, store, dest, count, coreMsg, address);
-         } else {
-            //non-persistent messages goes here, by default we stop reading from
-            //transport
-            connection.getTransportConnection().setAutoRead(false);
-            if (!store.checkMemory(enableAutoReadAndTtl)) {
-               enableAutoReadAndTtl();
-               throw new ResourceAllocationException("Queue is full " + address);
-            }
+            if (!store.checkMemory(() -> {
+               try {
+                  RoutingStatus result = getCoreSession().send(coreMsg, false, dest.isTemporary());
 
-            final RoutingStatus result = getCoreSession().send(coreMsg, false, dest.isTemporary());
-            if (result == RoutingStatus.NO_BINDINGS && dest.isQueue()) {
-               throw new InvalidDestinationException("Cannot publish to a non-existent Destination: " + dest);
-            }
-
-            if (count == null || count.decrementAndGet() == 0) {
-               if (sendProducerAck) {
-                  final ProducerAck ack = new ProducerAck(producerInfo.getProducerId(), messageSend.getSize());
-                  connection.dispatchAsync(ack);
+                  if (result == RoutingStatus.NO_BINDINGS && dest.isQueue()) {
+                     throw new InvalidDestinationException("Cannot publish to a non-existent Destination: " + dest);
+                  }
+               } catch (Exception e) {
+                  if (anyException[0] == null) {
+                     anyException[0] = e;
+                  }
                }
-            }
-         }
-      }
-   }
-
-   private void sendShouldBlockProducer(final ProducerInfo producerInfo,
-                                        final Message messageSend,
-                                        final boolean sendProducerAck,
-                                        final PagingStore store,
-                                        final ActiveMQDestination dest,
-                                        final AtomicInteger count,
-                                        final org.apache.activemq.artemis.api.core.Message coreMsg,
-                                        final SimpleString address) throws ResourceAllocationException {
-      if (!store.checkMemory(() -> {
-         Exception exceptionToSend = null;
-
-         try {
-            RoutingStatus result = getCoreSession().send(coreMsg, false, dest.isTemporary());
-
-            if (result == RoutingStatus.NO_BINDINGS && dest.isQueue()) {
-               throw new InvalidDestinationException("Cannot publish to a non-existent Destination: " + dest);
-            }
-         } catch (Exception e) {
-
-            logger.warn(e.getMessage(), e);
-            exceptionToSend = e;
-         }
-         connection.enableTtl();
-         if (count == null || count.decrementAndGet() == 0) {
-            if (exceptionToSend != null) {
-               this.connection.getContext().setDontSendReponse(false);
-               connection.sendException(exceptionToSend);
-            } else {
-               server.getStorageManager().afterCompleteOperations(new IOCallback() {
-                  @Override
-                  public void done() {
+               connection.enableTtl();
+               if (count.decrementAndGet() == 0) {
+                  if (anyException[0] != null) {
+                     this.connection.getContext().setDontSendReponse(false);
+                     ActiveMQServerLogger.LOGGER.warn(anyException[0].getMessage(), anyException[0]);
+                     connection.sendException(anyException[0]);
+                  } else {
                      if (sendProducerAck) {
                         try {
                            ProducerAck ack = new ProducerAck(producerInfo.getProducerId(), messageSend.getSize());
                            connection.dispatchAsync(ack);
                         } catch (Exception e) {
-                           connection.getContext().setDontSendReponse(false);
+                           this.connection.getContext().setDontSendReponse(false);
                            ActiveMQServerLogger.LOGGER.warn(e.getMessage(), e);
                            connection.sendException(e);
                         }
@@ -489,36 +368,40 @@ public class AMQSession implements SessionCallback {
                         }
                      }
                   }
+               }
+            })) {
+               this.connection.getContext().setDontSendReponse(false);
+               connection.enableTtl();
+               throw new ResourceAllocationException("Queue is full " + address);
+            }
+         } else {
+            //non-persistent messages goes here, by default we stop reading from
+            //transport
+            connection.getTransportConnection().setAutoRead(false);
+            if (!store.checkMemory(() -> {
+               connection.getTransportConnection().setAutoRead(true);
+               connection.enableTtl();
+            })) {
+               connection.getTransportConnection().setAutoRead(true);
+               connection.enableTtl();
+               throw new ResourceAllocationException("Queue is full " + address);
+            }
 
-                  @Override
-                  public void onError(int errorCode, String errorMessage) {
-                     try {
-                        final IOException e = new IOException(errorMessage);
-                        ActiveMQServerLogger.LOGGER.warn(errorMessage);
-                        connection.serviceException(e);
-                     } catch (Exception ex) {
-                        ActiveMQServerLogger.LOGGER.debug(ex);
-                     }
-                  }
-               });
+            RoutingStatus result = getCoreSession().send(coreMsg, false, dest.isTemporary());
+            if (result == RoutingStatus.NO_BINDINGS && dest.isQueue()) {
+               throw new InvalidDestinationException("Cannot publish to a non-existent Destination: " + dest);
+            }
+
+            if (count.decrementAndGet() == 0) {
+               if (sendProducerAck) {
+                  ProducerAck ack = new ProducerAck(producerInfo.getProducerId(), messageSend.getSize());
+                  connection.dispatchAsync(ack);
+               }
             }
          }
-      })) {
-         this.connection.getContext().setDontSendReponse(false);
-         connection.enableTtl();
-         throw new ResourceAllocationException("Queue is full " + address);
       }
    }
 
-   private void enableAutoReadAndTtl() {
-      connection.getTransportConnection().setAutoRead(true);
-      connection.enableTtl();
-   }
-
-   public String convertWildcard(String physicalName) {
-      return OPENWIRE_WILDCARD.convert(physicalName, server.getConfiguration().getWildcardConfiguration());
-   }
-
    public ServerSession getCoreSession() {
       return this.coreSession;
    }
@@ -527,6 +410,10 @@ public class AMQSession implements SessionCallback {
       return this.server;
    }
 
+   public WireFormat getMarshaller() {
+      return this.connection.getMarshaller();
+   }
+
    public ConnectionInfo getConnectionInfo() {
       return this.connInfo;
    }
@@ -546,8 +433,4 @@ public class AMQSession implements SessionCallback {
    public OpenWireConnection getConnection() {
       return connection;
    }
-
-   public boolean isInternal() {
-      return sessInfo.getSessionId().getValue() == -1;
-   }
 }