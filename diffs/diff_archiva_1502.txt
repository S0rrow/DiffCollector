diff --git a/archiva-modules/archiva-base/archiva-indexer/src/main/java/org/apache/archiva/indexer/search/NexusRepositorySearch.java b/archiva-modules/archiva-base/archiva-indexer/src/main/java/org/apache/archiva/indexer/search/NexusRepositorySearch.java
index 2c72edc82..53416912f 100644
--- a/archiva-modules/archiva-base/archiva-indexer/src/main/java/org/apache/archiva/indexer/search/NexusRepositorySearch.java
+++ b/archiva-modules/archiva-base/archiva-indexer/src/main/java/org/apache/archiva/indexer/search/NexusRepositorySearch.java
@@ -19,11 +19,15 @@
  * under the License.
  */
 
-import org.apache.archiva.common.plexusbridge.PlexusSisuBridge;
-import org.apache.archiva.common.plexusbridge.PlexusSisuBridgeException;
+import java.io.File;
+import java.io.IOException;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
 import org.apache.archiva.indexer.util.SearchUtil;
-import org.apache.lucene.search.BooleanClause.Occur;
 import org.apache.lucene.search.BooleanQuery;
+import org.apache.lucene.search.BooleanClause.Occur;
 import org.apache.maven.archiva.common.utils.ArchivaNexusIndexerUtil;
 import org.apache.maven.archiva.configuration.ArchivaConfiguration;
 import org.apache.maven.archiva.configuration.Configuration;
@@ -36,35 +40,22 @@
 import org.sonatype.nexus.index.NexusIndexer;
 import org.sonatype.nexus.index.context.IndexingContext;
 import org.sonatype.nexus.index.context.UnsupportedExistingLuceneIndexException;
-import org.springframework.context.annotation.Scope;
-import org.springframework.stereotype.Service;
-
-import javax.inject.Inject;
-import java.io.File;
-import java.io.IOException;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
 
 /**
  * RepositorySearch implementation which uses the Nexus Indexer for searching.
  */
-@Service( "nexusSearch" )
-@Scope("prototype")
 public class NexusRepositorySearch
     implements RepositorySearch
 {
-    private Logger log = LoggerFactory.getLogger( NexusRepositorySearch.class );
-
+    private static final Logger log = LoggerFactory.getLogger( NexusRepositorySearch.class ); 
+                                                              
     private NexusIndexer indexer;
-
+    
     private ArchivaConfiguration archivaConfig;
-
-    @Inject
-    public NexusRepositorySearch( PlexusSisuBridge plexusSisuBridge, ArchivaConfiguration archivaConfig )
-        throws PlexusSisuBridgeException
+    
+    public NexusRepositorySearch( NexusIndexer indexer, ArchivaConfiguration archivaConfig )
     {
-        this.indexer = plexusSisuBridge.lookup( NexusIndexer.class );
+        this.indexer = indexer;
         this.archivaConfig = archivaConfig;
     }
 
@@ -74,81 +65,81 @@ public NexusRepositorySearch( PlexusSisuBridge plexusSisuBridge, ArchivaConfigur
     public SearchResults search( String principal, List<String> selectedRepos, String term, SearchResultLimits limits,
                                  List<String> previousSearchTerms )
         throws RepositorySearchException
-    {
+    {   
         addIndexingContexts( selectedRepos );
-
+        
         // since upgrade to nexus 2.0.0, query has changed from g:[QUERIED TERM]* to g:*[QUERIED TERM]*
         //      resulting to more wildcard searches so we need to increase max clause count
         BooleanQuery.setMaxClauseCount( Integer.MAX_VALUE );
         BooleanQuery q = new BooleanQuery();
-
-        if ( previousSearchTerms == null || previousSearchTerms.isEmpty() )
-        {
+        
+        if( previousSearchTerms == null || previousSearchTerms.isEmpty() )
+        {            
             constructQuery( term, q );
         }
         else
-        {
-            for ( String previousTerm : previousSearchTerms )
+        {   
+            for( String previousTerm : previousSearchTerms )
             {
                 BooleanQuery iQuery = new BooleanQuery();
                 constructQuery( previousTerm, iQuery );
-
+                
                 q.add( iQuery, Occur.MUST );
             }
-
+            
             BooleanQuery iQuery = new BooleanQuery();
             constructQuery( term, iQuery );
             q.add( iQuery, Occur.MUST );
-        }
-
+        }      
+                    
         return search( limits, q );
     }
-
+    
     /**
      * @see RepositorySearch#search(String, SearchFields, SearchResultLimits)
      */
     public SearchResults search( String principal, SearchFields searchFields, SearchResultLimits limits )
         throws RepositorySearchException
     {
-        if ( searchFields.getRepositories() == null )
+        if( searchFields.getRepositories() == null )
         {
             throw new RepositorySearchException( "Repositories cannot be null." );
         }
-
+        
         addIndexingContexts( searchFields.getRepositories() );
-
+        
         BooleanQuery q = new BooleanQuery();
-        if ( searchFields.getGroupId() != null && !"".equals( searchFields.getGroupId() ) )
-        {
+        if( searchFields.getGroupId() != null && !"".equals( searchFields.getGroupId() ) )
+        {   
             q.add( indexer.constructQuery( ArtifactInfo.GROUP_ID, searchFields.getGroupId() ), Occur.MUST );
         }
-
-        if ( searchFields.getArtifactId() != null && !"".equals( searchFields.getArtifactId() ) )
+        
+        if( searchFields.getArtifactId() != null && !"".equals( searchFields.getArtifactId() ) )
         {
             q.add( indexer.constructQuery( ArtifactInfo.ARTIFACT_ID, searchFields.getArtifactId() ), Occur.MUST );
         }
-
-        if ( searchFields.getVersion() != null && !"".equals( searchFields.getVersion() ) )
+        
+        if( searchFields.getVersion() != null && !"".equals( searchFields.getVersion() ) )
         {
             q.add( indexer.constructQuery( ArtifactInfo.VERSION, searchFields.getVersion() ), Occur.MUST );
         }
-
-        if ( searchFields.getPackaging() != null && !"".equals( searchFields.getPackaging() ) )
+        
+        if( searchFields.getPackaging() != null && !"".equals( searchFields.getPackaging() ) )
         {
             q.add( indexer.constructQuery( ArtifactInfo.PACKAGING, searchFields.getPackaging() ), Occur.MUST );
         }
-
-        if ( searchFields.getClassName() != null && !"".equals( searchFields.getClassName() ) )
+        
+        if( searchFields.getClassName() != null && !"".equals( searchFields.getClassName() ) )
         {
             q.add( indexer.constructQuery( ArtifactInfo.NAMES, searchFields.getClassName() ), Occur.MUST );
         }
-
-        if ( q.getClauses() == null || q.getClauses().length <= 0 )
+        
+        if( q.getClauses() == null || q.getClauses().length <= 0 )
         {
             throw new RepositorySearchException( "No search fields set." );
         }
-
-        return search( limits, q );
+        
+        return search( limits, q );        
     }
 
     private SearchResults search( SearchResultLimits limits, BooleanQuery q )
@@ -158,14 +149,14 @@ private SearchResults search( SearchResultLimits limits, BooleanQuery q )
         {
             FlatSearchRequest request = new FlatSearchRequest( q );
             FlatSearchResponse response = indexer.searchFlat( request );
-
-            if ( response == null || response.getTotalHits() == 0 )
+            
+            if( response == null || response.getTotalHits() == 0 )
             {
                 SearchResults results = new SearchResults();
                 results.setLimits( limits );
                 return results;
             }
-
+            
             return convertToSearchResults( response, limits );
         }
         catch ( IOException e )
@@ -175,20 +166,20 @@ private SearchResults search( SearchResultLimits limits, BooleanQuery q )
         finally
         {
             Map<String, IndexingContext> indexingContexts = indexer.getIndexingContexts();
-
+            
             for ( Map.Entry<String, IndexingContext> entry : indexingContexts.entrySet() )
             {
-                try
-                {
+                try                
+                {   
                     indexer.removeIndexingContext( entry.getValue(), false );
-                    log.debug( "Indexing context '{}' removed from search.", entry.getKey() );
+                    log.debug( "Indexing context '" + entry.getKey() + "' removed from search." );
                 }
                 catch ( IOException e )
                 {
-                    log.warn( "IOException occurred while removing indexing content '" + entry.getKey() + "'." );
+                    log.warn( "IOException occurred while removing indexing content '" + entry.getKey()  + "'." );
                     continue;
                 }
-            }
+            }            
         }
     }
 
@@ -198,24 +189,24 @@ private void constructQuery( String term, BooleanQuery q )
         q.add( indexer.constructQuery( ArtifactInfo.ARTIFACT_ID, term ), Occur.SHOULD );
         q.add( indexer.constructQuery( ArtifactInfo.VERSION, term ), Occur.SHOULD );
         q.add( indexer.constructQuery( ArtifactInfo.PACKAGING, term ), Occur.SHOULD );
-        q.add( indexer.constructQuery( ArtifactInfo.NAMES, term ), Occur.SHOULD );
+        q.add( indexer.constructQuery( ArtifactInfo.NAMES, term ), Occur.SHOULD );        
     }
-
-
+       
+    
     private void addIndexingContexts( List<String> selectedRepos )
     {
-        for ( String repo : selectedRepos )
+        for( String repo : selectedRepos )
         {
             try
             {
                 Configuration config = archivaConfig.getConfiguration();
                 ManagedRepositoryConfiguration repoConfig = config.findManagedRepositoryById( repo );
-
-                if ( repoConfig != null )
+                
+                if( repoConfig != null )
                 {
                     String indexDir = repoConfig.getIndexDir();
                     File indexDirectory = null;
-                    if ( indexDir != null && !"".equals( indexDir ) )
+                    if( indexDir != null && !"".equals( indexDir ) )
                     {
                         indexDirectory = new File( repoConfig.getIndexDir() );
                     }
@@ -223,11 +214,10 @@ private void addIndexingContexts( List<String> selectedRepos )
                     {
                         indexDirectory = new File( repoConfig.getLocation(), ".indexer" );
                     }
-
-                    IndexingContext context = indexer.addIndexingContext( repoConfig.getId(), repoConfig.getId(),
-                                                                          new File( repoConfig.getLocation() ),
-                                                                          indexDirectory, null, null,
-                                                                          ArchivaNexusIndexerUtil.FULL_INDEX );
+                    
+                    IndexingContext context =
+                        indexer.addIndexingContext( repoConfig.getId(), repoConfig.getId(), new File( repoConfig.getLocation() ),
+                                                    indexDirectory, null, null, ArchivaNexusIndexerUtil.FULL_INDEX );
                     context.setSearchable( repoConfig.isScanned() );
                 }
                 else
@@ -236,12 +226,12 @@ private void addIndexingContexts( List<String> selectedRepos )
                 }
             }
             catch ( UnsupportedExistingLuceneIndexException e )
-            {
+            {                
                 log.warn( "Error accessing index of repository '" + repo + "' : " + e.getMessage() );
                 continue;
             }
             catch ( IOException e )
-            {
+            {                
                 log.warn( "IO error occured while accessing index of repository '" + repo + "' : " + e.getMessage() );
                 continue;
             }
@@ -249,10 +239,10 @@ private void addIndexingContexts( List<String> selectedRepos )
     }
 
     private SearchResults convertToSearchResults( FlatSearchResponse response, SearchResultLimits limits )
-    {
+    {   
         SearchResults results = new SearchResults();
         Set<ArtifactInfo> artifactInfos = response.getResults();
-
+        
         for ( ArtifactInfo artifactInfo : artifactInfos )
         {
             String id = SearchUtil.getHitId( artifactInfo.groupId, artifactInfo.artifactId );
@@ -271,7 +261,7 @@ private SearchResults convertToSearchResults( FlatSearchResponse response, Searc
                 // do we still need to set the repository id even though we're merging everything?
                 //hit.setRepositoryId( artifactInfo.repository );
                 hit.setUrl( artifactInfo.repository + "/" + artifactInfo.fname );
-                if ( !hit.getVersions().contains( artifactInfo.version ) )
+                if( !hit.getVersions().contains( artifactInfo.version ) )
                 {
                     hit.addVersion( artifactInfo.version );
                 }
@@ -279,33 +269,33 @@ private SearchResults convertToSearchResults( FlatSearchResponse response, Searc
 
             results.addHit( id, hit );
         }
-
+        
         results.setTotalHits( results.getHitsMap().size() );
         results.setLimits( limits );
-
-        if ( limits == null || limits.getSelectedPage() == SearchResultLimits.ALL_PAGES )
-        {
+        
+        if( limits == null || limits.getSelectedPage() == SearchResultLimits.ALL_PAGES )
+        {   
             return results;
         }
         else
         {
-            return paginate( results );
-        }
+            return paginate( results );            
+        }        
     }
 
     private SearchResults paginate( SearchResults results )
     {
         SearchResultLimits limits = results.getLimits();
-        SearchResults paginated = new SearchResults();
-
+        SearchResults paginated = new SearchResults();  
+        
         int fetchCount = limits.getPageSize();
         int offset = ( limits.getSelectedPage() * limits.getPageSize() );
-
-        if ( fetchCount > results.getTotalHits() )
+        
+        if( fetchCount > results.getTotalHits() )
         {
             fetchCount = results.getTotalHits();
         }
-
+        
         // Goto offset.
         if ( offset < results.getTotalHits() )
         {
@@ -317,9 +307,9 @@ private SearchResults paginate( SearchResults results )
                 {
                     break;
                 }
-
+                
                 SearchResultHit hit = results.getHits().get( ( offset + i ) );
-                if ( hit != null )
+                if( hit != null )
                 {
                     String id = SearchUtil.getHitId( hit.getGroupId(), hit.getArtifactId() );
                     paginated.addHit( id, hit );
@@ -329,10 +319,10 @@ private SearchResults paginate( SearchResults results )
                     break;
                 }
             }
-        }
+        }            
         paginated.setTotalHits( results.getTotalHits() );
         paginated.setLimits( limits );
-
+        
         return paginated;
     }
 }