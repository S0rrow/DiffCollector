diff --git a/src/main/java/org/apache/aries/jndi/ContextHelper.java b/src/main/java/org/apache/aries/jndi/ContextHelper.java
index 3ebc48ab9..9ff162a2c 100644
--- a/src/main/java/org/apache/aries/jndi/ContextHelper.java
+++ b/src/main/java/org/apache/aries/jndi/ContextHelper.java
@@ -18,7 +18,8 @@
  */
 package org.apache.aries.jndi;
 
-import java.security.PrivilegedExceptionAction;
+import java.util.Arrays;
+import java.util.Comparator;
 import java.util.Hashtable;
 
 import javax.naming.Context;
@@ -28,130 +29,145 @@ import javax.naming.spi.InitialContextFactory;
 import javax.naming.spi.InitialContextFactoryBuilder;
 import javax.naming.spi.ObjectFactory;
 
-import org.apache.aries.jndi.startup.Activator;
-import org.apache.aries.jndi.tracker.ServiceTrackerCustomizers;
-import org.apache.aries.jndi.urls.URLObjectFactoryFinder;
 import org.osgi.framework.BundleContext;
+import org.osgi.framework.InvalidSyntaxException;
 import org.osgi.framework.ServiceReference;
+import org.osgi.service.jndi.JNDIConstants;
 
 /**
  * Provides helper methods for the DelegateContext. This provides the methods so
  * there can be many DelegateContexts, but few service trackers.
  */
-public final class ContextHelper {
+public final class ContextHelper
+{
+	/** The bundle context we use for accessing the SR */
+  private static BundleContext context;
+  
+  /** Ensure no one constructs us */
+  private ContextHelper() { throw new RuntimeException(); }
+  
+  public static void setBundleContext(BundleContext ctx)
+  {
+  	context = ctx;
+  }
+      
+  private static Context createIcfContext(Hashtable<?,?> env) throws NamingException
+  {
+    String icfFactory = (String) env.get(Context.INITIAL_CONTEXT_FACTORY);
+    InitialContextFactory icf = null;
 
-    /** Ensure no one constructs us */
-    private ContextHelper() {
-        throw new RuntimeException();
-    }
+    if (icfFactory != null) {
+      try {
+        Class<?> clazz = Class.forName(icfFactory, true, Thread.currentThread()
+            .getContextClassLoader());
+        icf = (InitialContextFactory) clazz.newInstance();
 
-    public static ContextProvider createURLContext(final BundleContext context,
-                                           final String urlScheme, 
-                                           final Hashtable<?, ?> env)
-        throws NamingException {
-        return Utils.doPrivilegedNaming(new PrivilegedExceptionAction<ContextProvider>() {
-            public ContextProvider run() throws Exception {
-                return doCreateURLContext(context, urlScheme, env);
-            }
-        });
+      } catch (ClassNotFoundException e11) {
+        NamingException e4 = new NamingException("Argh this should never happen :)");
+        e4.initCause(e11);
+        throw e4;
+      } catch (InstantiationException e2) {
+        NamingException e4 = new NamingException("Argh this should never happen :)");
+        e4.initCause(e2);
+        throw e4;
+      } catch (IllegalAccessException e1) {
+        NamingException e4 = new NamingException("Argh this should never happen :)");
+        e4.initCause(e1);
+        throw e4;
+      }
     }
-    
-    /**
-     * This method is used to create a URL Context. It does this by looking for
-     * the URL context's ObjectFactory in the service registry.
-     * 
-     * @param urlScheme
-     * @param env
-     * @return a Context
-     * @throws NamingException
-     */
-    private static ContextProvider doCreateURLContext(BundleContext context, String urlScheme, Hashtable<?, ?> env)
-        throws NamingException {
-      
-        ServicePair<ObjectFactory> urlObjectFactory = getURLObjectFactory(context, urlScheme, env);
-        
-        if (urlObjectFactory != null) {
-            ObjectFactory factory = urlObjectFactory.get();
-            
-            if (factory != null) {
-                try {
-                    Context ctx = (Context) factory.getObjectInstance(null, null, null, env);
-                    
-                    return new ContextProvider(context, urlObjectFactory.getReference(), ctx);
-                } catch (Exception e) {
-                    urlObjectFactory.unget();
-                    NamingException e2 = new NamingException();
-                    e2.initCause(e);
-                    throw e2;
-                }
-            }
-        }
+    Context ctx = null;
 
-        // if we got here then we couldn't find a URL context factory so return null.
-        return null;
-    }
+    if (icf != null) {
+      ctx = icf.getInitialContext(env);
+    }    
     
-    public static final ServicePair<ObjectFactory> getURLObjectFactory(BundleContext ctx, String urlScheme, Hashtable<?, ?> environment)
+    return ctx;
+  }
+  
+  /**
+   * This method is used to create a URL Context. It does this by looking for 
+   * the URL context's ObjectFactory in the service registry.
+   * 
+   * @param urlScheme
+   * @param env
+   * @return a Context
+   * @throws NamingException
+   */
+  public static Context createURLContext(String urlScheme, Hashtable<?, ?> env)
       throws NamingException
-    {
-      ServicePair<ObjectFactory> result = null;
-      
-      ServiceReference ref = ServiceTrackerCustomizers.URL_FACTORY_CACHE.find(urlScheme);
-      
-      if (ref == null) {
-        ServiceReference[] refs = Activator.getURLObectFactoryFinderServices();
-        
-        if (refs != null) {
-          for (ServiceReference finderRef : refs) {
-            URLObjectFactoryFinder finder = (URLObjectFactoryFinder) ctx.getService(finderRef);
-            if (finder != null) {
-              ObjectFactory f = finder.findFactory(urlScheme, environment);
-              
-              if (f != null) {
-                result = new ServicePair<ObjectFactory>(ctx, finderRef, f);
-                break;
-              } else {
-                ctx.ungetService(finderRef);
-              }
-            }
-          }
-        }
-      } else {
-        result = new ServicePair<ObjectFactory>(ctx, ref);
+  {
+    ObjectFactory factory = null;
+    ServiceReference ref = null;
+
+    Context ctx = null;
+
+    try {
+      ServiceReference[] services = context.getServiceReferences(ObjectFactory.class.getName(),
+                                                                 "(" + JNDIConstants.JNDI_URLSCHEME + "=" + urlScheme + ")");
+
+      if (services != null) {
+        ref = services[0];
+        factory = (ObjectFactory) context.getService(ref);
       }
-      
-      return result;
+    } catch (InvalidSyntaxException e1) {
+      // TODO nls enable this.
+      NamingException e = new NamingException("Argh this should never happen :)");
+      e.initCause(e1);
+      throw e;
     }
-        
+
+    if (factory != null) {
+      try {
+        ctx = (Context) factory.getObjectInstance(null, null, null, env);
+      } catch (Exception e) {
+        NamingException e2 = new NamingException();
+        e2.initCause(e);
+        throw e2;
+      } finally {
+        if (ref != null) context.ungetService(ref);
+      }
+    }
+
+    // TODO: This works for WAS - we believe - but is incorrect behaviour. We should not use an icf to generate the URLContext.
+    // Rather, the missing URLContext factories should be exported on behalf of WAS.
+    if (ctx == null) {
+      ctx = createIcfContext(env);
+    }
+    
+    if (ctx == null && factory == null) {
+      NamingException e = new NamingException("We could not find an ObjectFactory to use");
+      throw e;
+    } else if (ctx == null && factory != null) {
+      NamingException e = new NamingException("The ICF returned a null context");
+      throw e;
+    }
+
+    return ctx;
+  }
+  
     public static Context getInitialContext(BundleContext context, Hashtable<?, ?> environment)
-        throws NamingException {
+            throws NamingException {
         ContextProvider provider = getContextProvider(context, environment);
-        
-        if (provider != null) {
-          return new DelegateContext(context, provider);
+        String contextFactoryClass = (String) environment.get(Context.INITIAL_CONTEXT_FACTORY);
+        if (contextFactoryClass == null) {
+            if (provider == null) {
+                return new DelegateContext(context, environment);
+            } else {
+                return new DelegateContext(context, provider);
+            }
         } else {
-          String contextFactoryClass = (String) environment.get(Context.INITIAL_CONTEXT_FACTORY);
-          if (contextFactoryClass == null) {
-            return new DelegateContext(context, environment);
-          } else {
-            throw new NoInitialContextException("We could not find an InitialContextFactory to use");
-          }
+            if (provider == null) {
+                throw new NoInitialContextException("We could not find an InitialContextFactory to use");
+            } else {
+                return new DelegateContext(context, provider);
+            }
         }
     }
 
-    public static ContextProvider getContextProvider(final BundleContext context,
-                                                     final Hashtable<?, ?> environment)
-        throws NamingException {
-        return Utils.doPrivilegedNaming(new PrivilegedExceptionAction<ContextProvider>() {
-            public ContextProvider run() throws Exception {
-                return doGetContextProvider(context, environment);
-            }
-        });
-    }
-    
-    private static ContextProvider doGetContextProvider(BundleContext context,
-                                                        Hashtable<?, ?> environment)
-        throws NamingException {
+    public static ContextProvider getContextProvider(BundleContext context,
+                                                     Hashtable<?, ?> environment)
+            throws NamingException {
         ContextProvider provider = null;
         String contextFactoryClass = (String) environment.get(Context.INITIAL_CONTEXT_FACTORY);
         if (contextFactoryClass == null) {
@@ -160,39 +176,59 @@ public final class ContextHelper {
 
             // 2. lookup all ContextFactory services
             if (provider == null) {
-                ServiceReference[] references = Activator.getInitialContextFactoryServices();
+                String filter = "(&(objectClass=javax.naming.spi.InitialContextFactory))";
+                ServiceReference[] references = null;
+                try {
+                    references = context.getAllServiceReferences(InitialContextFactory.class.getName(), filter);
+                } catch (InvalidSyntaxException e) {
+                    NamingException ex = new NamingException("Bad filter: " + filter);
+                    ex.initCause(e);
+                    throw ex;
+                }
                 if (references != null) {
                     Context initialContext = null;
+                    Arrays.sort(references, new ServiceReferenceComparator());
                     for (ServiceReference reference : references) {
                         InitialContextFactory factory = (InitialContextFactory) context.getService(reference);
                         try {
                             initialContext = factory.getInitialContext(environment);
-                            if (initialContext != null) {
-                              provider = new ContextProvider(context, reference, initialContext);
-                              break;
-                          }
                         } finally {
-                            if (provider == null) context.ungetService(reference);
+                            context.ungetService(reference);
+                        }
+                        if (initialContext != null) {
+                            provider = new ContextProvider(reference, initialContext);
+                            break;
                         }
                     }
                 }
             }
         } else {
-            ServiceReference ref = ServiceTrackerCustomizers.ICF_CACHE.find(contextFactoryClass);
-            
-            if (ref != null) {
-              Context initialContext = null;
-              InitialContextFactory factory = (InitialContextFactory) context.getService(ref);
-              if (factory != null) {
+            // 1. lookup ContextFactory using the factory class
+            String filter = "(&(objectClass=javax.naming.spi.InitialContextFactory)(objectClass="+ contextFactoryClass + "))";
+            ServiceReference[] references = null;
+            try {
+                references = context.getServiceReferences(InitialContextFactory.class.getName(), filter);
+            } catch (InvalidSyntaxException e) {
+                NamingException ex = new NamingException("Bad filter: " + filter);
+                ex.initCause(e);
+                throw ex;
+            }
+
+            if (references != null && references.length > 0) {
+                Context initialContext = null;
+                Arrays.sort(references, new ServiceReferenceComparator());
+                ServiceReference reference = references[0];
+                InitialContextFactory factory = (InitialContextFactory) context.getService(reference);
                 try {
                     initialContext = factory.getInitialContext(environment);
-                    provider = new ContextProvider(context, ref, initialContext);
                 } finally {
-                    if (provider == null) context.ungetService(ref);
+                    context.ungetService(reference);
+                }
+                if (initialContext != null) {
+                    provider = new ContextProvider(reference, initialContext);                    
                 }
-              }
             }
-            
+
             // 2. get ContextFactory using builder
             if (provider == null) {
                 provider = getInitialContextUsingBuilder(context, environment);
@@ -206,27 +242,51 @@ public final class ContextHelper {
                                                                  Hashtable<?, ?> environment)
             throws NamingException {
         ContextProvider provider = null;
-        ServiceReference[] refs = Activator.getInitialContextFactoryBuilderServices();
-        if (refs != null) {
-            InitialContextFactory factory = null;
-            for (ServiceReference ref : refs) {                    
-                InitialContextFactoryBuilder builder = (InitialContextFactoryBuilder) context.getService(ref);
-                try {
-                    factory = builder.createInitialContextFactory(environment);
+        try {
+            ServiceReference[] refs = context.getAllServiceReferences(InitialContextFactoryBuilder.class.getName(), null);
+            if (refs != null) {
+                InitialContextFactory factory = null;
+                Arrays.sort(refs, new ServiceReferenceComparator());
+                for (ServiceReference ref : refs) {                    
+                    InitialContextFactoryBuilder builder = (InitialContextFactoryBuilder) context.getService(ref);
+                    try {
+                        factory = builder.createInitialContextFactory(environment);
+                    } catch (NamingException e) {
+                        // TODO: log
+                        // ignore
+                    } finally {
+                        context.ungetService(ref);
+                    }
                     if (factory != null) {
-                      provider = new ContextProvider(context, ref, factory.getInitialContext(environment));
-                      break;
-                    } else {
-                      context.ungetService(ref); // we didn't get something back, so this was no good.
+                        provider = new ContextProvider(ref, factory.getInitialContext(environment));
+                        break;
                     }
-                } catch (NamingException e) {
-                    // TODO: log
-                    // ignore
-                    context.ungetService(ref);
                 }
             }
+        } catch (InvalidSyntaxException e) {
+            // ignore - should never happen
         }
         return provider;
     }
-
+    
+    public static class ContextProvider {
+        
+        ServiceReference reference;
+        Context context;
+        
+        public ContextProvider(ServiceReference reference, Context context) {
+            this.reference = reference;
+            this.context = context;
+        }        
+        
+        public boolean isValid() {
+            return (reference.getBundle() != null);
+        }
+    }
+    
+    public static class ServiceReferenceComparator implements Comparator<ServiceReference> {
+        public int compare(ServiceReference o1, ServiceReference o2) {        
+          return o2.compareTo(o1);
+        }
+    }
 }