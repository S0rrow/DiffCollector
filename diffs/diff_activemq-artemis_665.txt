diff --git a/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/broker/AMQPMessage.java b/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/broker/AMQPMessage.java
index e01d430306..813915d092 100644
--- a/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/broker/AMQPMessage.java
+++ b/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/broker/AMQPMessage.java
@@ -18,12 +18,14 @@ package org.apache.activemq.artemis.protocol.amqp.broker;
 
 import java.nio.ByteBuffer;
 import java.util.Collections;
-import java.util.Date;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
 
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.PooledByteBufAllocator;
+import io.netty.buffer.Unpooled;
 import org.apache.activemq.artemis.api.core.ActiveMQBuffer;
 import org.apache.activemq.artemis.api.core.ActiveMQPropertyConversionException;
 import org.apache.activemq.artemis.api.core.ICoreMessage;
@@ -35,13 +37,9 @@ import org.apache.activemq.artemis.protocol.amqp.converter.AMQPConverter;
 import org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport;
 import org.apache.activemq.artemis.protocol.amqp.util.NettyWritable;
 import org.apache.activemq.artemis.protocol.amqp.util.TLSEncode;
-import org.apache.activemq.artemis.reader.MessageUtil;
 import org.apache.activemq.artemis.utils.DataConstants;
 import org.apache.qpid.proton.amqp.Symbol;
-import org.apache.qpid.proton.amqp.UnsignedByte;
 import org.apache.qpid.proton.amqp.UnsignedInteger;
-import org.apache.qpid.proton.amqp.UnsignedLong;
-import org.apache.qpid.proton.amqp.UnsignedShort;
 import org.apache.qpid.proton.amqp.messaging.ApplicationProperties;
 import org.apache.qpid.proton.amqp.messaging.DeliveryAnnotations;
 import org.apache.qpid.proton.amqp.messaging.Header;
@@ -53,39 +51,32 @@ import org.apache.qpid.proton.codec.WritableBuffer;
 import org.apache.qpid.proton.message.Message;
 import org.apache.qpid.proton.message.impl.MessageImpl;
 
-import io.netty.buffer.ByteBuf;
-import io.netty.buffer.PooledByteBufAllocator;
-import io.netty.buffer.Unpooled;
-
 // see https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#section-message-format
 public class AMQPMessage extends RefCountMessage {
 
    final long messageFormat;
    ByteBuf data;
    boolean bufferValid;
-   boolean durable;
+   byte type;
    long messageID;
    String address;
    MessageImpl protonMessage;
    private volatile int memoryEstimate = -1;
    private long expiration = 0;
    // this is to store where to start sending bytes, ignoring header and delivery annotations.
-   private int sendFrom = 0;
+   private int sendFrom = -1;
    private boolean parsedHeaders = false;
    private Header _header;
    private DeliveryAnnotations _deliveryAnnotations;
    private MessageAnnotations _messageAnnotations;
    private Properties _properties;
-   private int appLocation = -1;
    private ApplicationProperties applicationProperties;
    private long scheduledTime = -1;
-   private String connectionID;
 
    public AMQPMessage(long messageFormat, byte[] data) {
       this.data = Unpooled.wrappedBuffer(data);
       this.messageFormat = messageFormat;
       this.bufferValid = true;
-      parseHeaders();
 
    }
 
@@ -98,7 +89,7 @@ public class AMQPMessage extends RefCountMessage {
 
    public AMQPMessage(long messageFormat, Message message) {
       this.messageFormat = messageFormat;
-      this.protonMessage = (MessageImpl) message;
+      this.protonMessage = (MessageImpl)message;
 
    }
 
@@ -124,12 +115,12 @@ public class AMQPMessage extends RefCountMessage {
    private void initalizeObjects() {
       if (protonMessage == null) {
          if (data == null) {
-            this.sendFrom = 0;
+            this.sendFrom = -1;
             _header = new Header();
             _deliveryAnnotations = new DeliveryAnnotations(new HashMap<>());
             _properties = new Properties();
             this.applicationProperties = new ApplicationProperties(new HashMap<>());
-            this.protonMessage = (MessageImpl) Message.Factory.create();
+            this.protonMessage = (MessageImpl)Message.Factory.create();
             this.protonMessage.setApplicationProperties(applicationProperties);
             this.protonMessage.setDeliveryAnnotations(_deliveryAnnotations);
          }
@@ -137,6 +128,7 @@ public class AMQPMessage extends RefCountMessage {
    }
 
    private Map getApplicationPropertiesMap() {
+
       ApplicationProperties appMap = getApplicationProperties();
       Map map = null;
 
@@ -153,20 +145,6 @@ public class AMQPMessage extends RefCountMessage {
 
    private ApplicationProperties getApplicationProperties() {
       parseHeaders();
-
-      if (applicationProperties == null && appLocation >= 0) {
-         ByteBuffer buffer = getBuffer().nioBuffer();
-         buffer.position(appLocation);
-         TLSEncode.getDecoder().setByteBuffer(buffer);
-         Object section = TLSEncode.getDecoder().readObject();
-         if (section instanceof ApplicationProperties) {
-            this.applicationProperties = (ApplicationProperties) section;
-         }
-         this.appLocation = -1;
-         TLSEncode.getDecoder().setByteBuffer(null);
-
-      }
-
       return applicationProperties;
    }
 
@@ -181,17 +159,6 @@ public class AMQPMessage extends RefCountMessage {
       }
    }
 
-   @Override
-   public org.apache.activemq.artemis.api.core.Message setConnectionID(String connectionID) {
-      this.connectionID = connectionID;
-      return this;
-   }
-
-   @Override
-   public String getConnectionID() {
-      return connectionID;
-   }
-
    public MessageAnnotations getMessageAnnotations() {
       parseHeaders();
       return _messageAnnotations;
@@ -221,16 +188,6 @@ public class AMQPMessage extends RefCountMessage {
       return null;
    }
 
-   private Object removeSymbol(Symbol symbol) {
-      MessageAnnotations annotations = getMessageAnnotations();
-      Map mapAnnotations = annotations != null ? annotations.getValue() : null;
-      if (mapAnnotations != null) {
-         return mapAnnotations.remove(symbol);
-      }
-
-      return null;
-   }
-
 
    private void setSymbol(String symbol, Object value) {
       setSymbol(Symbol.getSymbol(symbol), value);
@@ -238,10 +195,6 @@ public class AMQPMessage extends RefCountMessage {
 
    private void setSymbol(Symbol symbol, Object value) {
       MessageAnnotations annotations = getMessageAnnotations();
-      if (annotations == null) {
-         _messageAnnotations = new MessageAnnotations(new HashMap<>());
-         annotations = _messageAnnotations;
-      }
       Map mapAnnotations = annotations != null ? annotations.getValue() : null;
       if (mapAnnotations != null) {
          mapAnnotations.put(symbol, value);
@@ -264,19 +217,11 @@ public class AMQPMessage extends RefCountMessage {
             return null;
       } */
 
+
       return null;
    }
 
-   @Override
-   public SimpleString getGroupID() {
-      parseHeaders();
 
-      if (_properties != null && _properties.getGroupId() != null) {
-         return SimpleString.toSimpleString(_properties.getGroupId());
-      } else {
-         return null;
-      }
-   }
 
    @Override
    public Long getScheduledDeliveryTime() {
@@ -294,7 +239,7 @@ public class AMQPMessage extends RefCountMessage {
          }
       }
 
-      return scheduledTime;
+      return scheduledTime == 0 ? null : scheduledTime;
    }
 
    @Override
@@ -352,6 +297,7 @@ public class AMQPMessage extends RefCountMessage {
             } else {
                section = null;
             }
+
          }
          if (section instanceof MessageAnnotations) {
             _messageAnnotations = (MessageAnnotations) section;
@@ -361,27 +307,20 @@ public class AMQPMessage extends RefCountMessage {
             } else {
                section = null;
             }
+
          }
          if (section instanceof Properties) {
             _properties = (Properties) section;
 
-            if (_properties.getAbsoluteExpiryTime() != null) {
-               this.expiration = _properties.getAbsoluteExpiryTime().getTime();
+            if (buffer.hasRemaining()) {
+               section = (Section) decoder.readObject();
+            } else {
+               section = null;
             }
-
-            // We don't read the next section on purpose, as we will parse ApplicationProperties
-            // lazily
-            section = null;
          }
 
          if (section instanceof ApplicationProperties) {
             applicationProperties = (ApplicationProperties) section;
-         } else {
-            if (buffer.hasRemaining()) {
-               this.appLocation = buffer.position();
-            } else {
-               this.appLocation = -1;
-            }
          }
       } finally {
          decoder.setByteBuffer(null);
@@ -424,14 +363,7 @@ public class AMQPMessage extends RefCountMessage {
    @Override
    public org.apache.activemq.artemis.api.core.Message copy() {
       checkBuffer();
-
-      byte[] origin = data.array();
-      byte[] newData = new byte[data.array().length - sendFrom];
-      for (int i = 0; i < newData.length; i++) {
-         newData[i] = origin[i + sendFrom];
-      }
-      AMQPMessage newEncode = new AMQPMessage(this.messageFormat, newData);
-      newEncode.setDurable(isDurable());
+      AMQPMessage newEncode = new AMQPMessage(this.messageFormat, data.array());
       return newEncode;
    }
 
@@ -459,16 +391,6 @@ public class AMQPMessage extends RefCountMessage {
 
    @Override
    public AMQPMessage setExpiration(long expiration) {
-
-      Properties properties = getProperties();
-
-      if (properties != null) {
-         if (expiration <= 0) {
-            properties.setAbsoluteExpiryTime(null);
-         } else {
-            properties.setAbsoluteExpiryTime(new Date(expiration));
-         }
-      }
       this.expiration = expiration;
       return this;
    }
@@ -476,8 +398,8 @@ public class AMQPMessage extends RefCountMessage {
    @Override
    public Object getUserID() {
       Properties properties = getProperties();
-      if (properties != null && properties.getMessageId() != null) {
-         return properties.getMessageId();
+      if (properties != null && properties.getUserId() != null) {
+         return properties.getUserId();
       } else {
          return this;
       }
@@ -493,19 +415,13 @@ public class AMQPMessage extends RefCountMessage {
       if (getHeader() != null && getHeader().getDurable() != null) {
          return getHeader().getDurable().booleanValue();
       } else {
-         return durable;
+         return false;
       }
    }
 
-   @Override
-   public Object getDuplicateProperty() {
-      return null;
-   }
-
    @Override
    public org.apache.activemq.artemis.api.core.Message setDurable(boolean durable) {
-      this.durable = durable;
-      return this;
+      return null;
    }
 
    @Override
@@ -513,7 +429,7 @@ public class AMQPMessage extends RefCountMessage {
       if (address == null) {
          Properties properties = getProtonMessage().getProperties();
          if (properties != null) {
-            return properties.getTo();
+            return  properties.getTo();
          } else {
             return null;
          }
@@ -577,27 +493,19 @@ public class AMQPMessage extends RefCountMessage {
       }
    }
 
-   @Override
-   public int getEncodeSize() {
-      checkBuffer();
-      // + 20checkBuffer is an estimate for the Header with the deliveryCount
-      return data.array().length - sendFrom + 20;
-   }
-
    @Override
    public void sendBuffer(ByteBuf buffer, int deliveryCount) {
       checkBuffer();
       Header header = getHeader();
       if (header == null && deliveryCount > 0) {
          header = new Header();
-         header.setDurable(durable);
       }
       if (header != null) {
          synchronized (header) {
             header.setDeliveryCount(UnsignedInteger.valueOf(deliveryCount - 1));
             TLSEncode.getEncoder().setByteBuffer(new NettyWritable(buffer));
             TLSEncode.getEncoder().writeObject(header);
-            TLSEncode.getEncoder().setByteBuffer((WritableBuffer) null);
+            TLSEncode.getEncoder().setByteBuffer((WritableBuffer)null);
          }
       }
       buffer.writeBytes(data, sendFrom, data.writerIndex() - sendFrom);
@@ -734,103 +642,82 @@ public class AMQPMessage extends RefCountMessage {
 
    @Override
    public Boolean getBooleanProperty(String key) throws ActiveMQPropertyConversionException {
-      return (Boolean) getApplicationPropertiesMap().get(key);
+      return (Boolean)getApplicationPropertiesMap().get(key);
    }
 
    @Override
    public Byte getByteProperty(String key) throws ActiveMQPropertyConversionException {
-      return (Byte) getApplicationPropertiesMap().get(key);
+      return (Byte)getApplicationPropertiesMap().get(key);
    }
 
    @Override
    public Double getDoubleProperty(String key) throws ActiveMQPropertyConversionException {
-      return (Double) getApplicationPropertiesMap().get(key);
+      return (Double)getApplicationPropertiesMap().get(key);
    }
 
    @Override
    public Integer getIntProperty(String key) throws ActiveMQPropertyConversionException {
-      return (Integer) getApplicationPropertiesMap().get(key);
+      return (Integer)getApplicationPropertiesMap().get(key);
    }
 
    @Override
    public Long getLongProperty(String key) throws ActiveMQPropertyConversionException {
-      return (Long) getApplicationPropertiesMap().get(key);
+      return (Long)getApplicationPropertiesMap().get(key);
    }
 
    @Override
    public Object getObjectProperty(String key) {
-      if (key.equals(MessageUtil.TYPE_HEADER_NAME.toString())) {
+      if (key.equals("JMSType")) {
          return getProperties().getSubject();
-      } else if (key.equals(MessageUtil.CONNECTION_ID_PROPERTY_NAME.toString())) {
-         return getConnectionID();
-      } else {
-         Object value = getApplicationPropertiesMap().get(key);
-         if (value instanceof UnsignedInteger ||
-             value instanceof UnsignedByte ||
-             value instanceof UnsignedLong ||
-             value instanceof UnsignedShort) {
-            return ((Number)value).longValue();
-         } else {
-            return value;
-         }
       }
+
+      return getApplicationPropertiesMap().get(key);
    }
 
    @Override
    public Short getShortProperty(String key) throws ActiveMQPropertyConversionException {
-      return (Short) getApplicationPropertiesMap().get(key);
+      return (Short)getApplicationPropertiesMap().get(key);
    }
 
    @Override
    public Float getFloatProperty(String key) throws ActiveMQPropertyConversionException {
-      return (Float) getApplicationPropertiesMap().get(key);
+      return (Float)getApplicationPropertiesMap().get(key);
    }
 
    @Override
    public String getStringProperty(String key) throws ActiveMQPropertyConversionException {
-      if (key.equals(MessageUtil.TYPE_HEADER_NAME.toString())) {
+      if (key.equals("JMSType")) {
          return getProperties().getSubject();
-      } else if (key.equals(MessageUtil.CONNECTION_ID_PROPERTY_NAME.toString())) {
-         return getConnectionID();
-      } else {
-         return (String) getApplicationPropertiesMap().get(key);
       }
+      return (String)getApplicationPropertiesMap().get(key);
    }
 
    @Override
-   public Object removeAnnotation(SimpleString key) {
-      return removeSymbol(Symbol.getSymbol(key.toString()));
-   }
-
-   @Override
-   public Object getAnnotation(SimpleString key) {
-      return getSymbol(key.toString());
+   public boolean containsDeliveryAnnotationProperty(SimpleString key) {
+      parseHeaders();
+      if (_deliveryAnnotations == null || _deliveryAnnotations.getValue() == null) {
+         return false;
+      }
+      return _deliveryAnnotations.getValue().containsKey(key.toString());
    }
 
    @Override
-   public AMQPMessage setAnnotation(SimpleString key, Object value) {
-      setSymbol(key.toString(), value);
-      return this;
+   public Object removeDeliveryAnnoationProperty(SimpleString key) {
+      parseHeaders();
+      if (_deliveryAnnotations == null || _deliveryAnnotations.getValue() == null) {
+         return null;
+      }
+      return _deliveryAnnotations.getValue().remove(key.toString());
    }
 
-
    @Override
-   public void reencode() {
-      parseHeaders();
-      ApplicationProperties properties = getApplicationProperties();
-      getProtonMessage().setDeliveryAnnotations(_deliveryAnnotations);
-      getProtonMessage().setMessageAnnotations(_messageAnnotations);
-      getProtonMessage().setApplicationProperties(properties);
-      getProtonMessage().setProperties(this._properties);
-      bufferValid = false;
-      checkBuffer();
+   public Object getDeliveryAnnotationProperty(SimpleString key) {
+      return null;
    }
 
-
-
    @Override
    public SimpleString getSimpleStringProperty(String key) throws ActiveMQPropertyConversionException {
-      return SimpleString.toSimpleString((String) getApplicationPropertiesMap().get(key));
+      return SimpleString.toSimpleString((String)getApplicationPropertiesMap().get(key));
    }
 
    @Override
@@ -908,6 +795,11 @@ public class AMQPMessage extends RefCountMessage {
       return putStringProperty(key.toString(), value.toString());
    }
 
+   @Override
+   public int getEncodeSize() {
+      return 0;
+   }
+
    @Override
    public Set<SimpleString> getPropertyNames() {
       HashSet<SimpleString> values = new HashSet<>();
@@ -920,7 +812,8 @@ public class AMQPMessage extends RefCountMessage {
    @Override
    public int getMemoryEstimate() {
       if (memoryEstimate == -1) {
-         memoryEstimate = memoryOffset + (data != null ? data.capacity() : 0);
+         memoryEstimate = memoryOffset +
+            (data != null ? data.capacity() : 0);
       }
 
       return memoryEstimate;
@@ -935,6 +828,7 @@ public class AMQPMessage extends RefCountMessage {
       }
    }
 
+
    @Override
    public SimpleString getReplyTo() {
       if (getProperties() != null) {
@@ -953,20 +847,18 @@ public class AMQPMessage extends RefCountMessage {
       return this;
    }
 
+
    @Override
    public int getPersistSize() {
-      return DataConstants.SIZE_INT + internalPersistSize();
-   }
-
-   private int internalPersistSize() {
-      return data.array().length - sendFrom;
+      checkBuffer();
+      return data.array().length + DataConstants.SIZE_INT;
    }
 
    @Override
    public void persist(ActiveMQBuffer targetRecord) {
       checkBuffer();
-      targetRecord.writeInt(internalPersistSize());
-      targetRecord.writeBytes(data.array(), sendFrom, data.array().length - sendFrom);
+      targetRecord.writeInt(data.array().length);
+      targetRecord.writeBytes(data.array());
    }
 
    @Override
@@ -974,10 +866,7 @@ public class AMQPMessage extends RefCountMessage {
       int size = record.readInt();
       byte[] recordArray = new byte[size];
       record.readBytes(recordArray);
-      this.sendFrom = 0; // whatever was persisted will be sent
       this.data = Unpooled.wrappedBuffer(recordArray);
       this.bufferValid = true;
-      this.durable = true; // it's coming from the journal, so it's durable
-      parseHeaders();
    }
 }