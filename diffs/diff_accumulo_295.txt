diff --git a/core/src/main/java/org/apache/accumulo/core/client/impl/ConditionalWriterImpl.java b/core/src/main/java/org/apache/accumulo/core/client/impl/ConditionalWriterImpl.java
index c9ef1011f3..6c6a5519f8 100644
--- a/core/src/main/java/org/apache/accumulo/core/client/impl/ConditionalWriterImpl.java
+++ b/core/src/main/java/org/apache/accumulo/core/client/impl/ConditionalWriterImpl.java
@@ -17,14 +17,11 @@
 
 package org.apache.accumulo.core.client.impl;
 
-import static com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly;
 import static java.nio.charset.StandardCharsets.UTF_8;
 
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.Collections;
-import java.util.Comparator;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
@@ -77,7 +74,6 @@ import org.apache.accumulo.core.trace.Tracer;
 import org.apache.accumulo.core.trace.thrift.TInfo;
 import org.apache.accumulo.core.util.BadArgumentException;
 import org.apache.accumulo.core.util.ByteBufferUtil;
-import org.apache.accumulo.core.util.NamingThreadFactory;
 import org.apache.accumulo.core.zookeeper.ZooUtil;
 import org.apache.accumulo.fate.util.LoggingRunnable;
 import org.apache.accumulo.fate.zookeeper.ZooCacheFactory;
@@ -94,6 +90,7 @@ import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import com.google.common.net.HostAndPort;
+import static com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly;
 
 class ConditionalWriterImpl implements ConditionalWriter {
 
@@ -116,7 +113,6 @@ class ConditionalWriterImpl implements ConditionalWriter {
   private String tableId;
   private long timeout;
   private final Durability durability;
-  private final String classLoaderContext;
 
   private static class ServerQueue {
     BlockingQueue<TabletServerMutations<QCMutation>> queue = new LinkedBlockingQueue<TabletServerMutations<QCMutation>>();
@@ -387,13 +383,12 @@ class ConditionalWriterImpl implements ConditionalWriter {
     this.context = context;
     this.auths = config.getAuthorizations();
     this.ve = new VisibilityEvaluator(config.getAuthorizations());
-    this.threadPool = new ScheduledThreadPoolExecutor(config.getMaxWriteThreads(), new NamingThreadFactory(this.getClass().getSimpleName()));
+    this.threadPool = new ScheduledThreadPoolExecutor(config.getMaxWriteThreads());
     this.locator = TabletLocator.getLocator(context, new Text(tableId));
     this.serverQueues = new HashMap<String,ServerQueue>();
     this.tableId = tableId;
     this.timeout = config.getTimeout(TimeUnit.MILLISECONDS);
     this.durability = config.getDurability();
-    this.classLoaderContext = config.getClassLoaderContext();
 
     Runnable failureHandler = new Runnable() {
 
@@ -511,7 +506,7 @@ class ConditionalWriterImpl implements ConditionalWriter {
     }
 
     TConditionalSession tcs = client.startConditionalUpdate(tinfo, context.rpcCreds(), ByteBufferUtil.toByteBuffers(auths.getAuthorizations()), tableId,
-        DurabilityImpl.toThrift(durability), this.classLoaderContext);
+        DurabilityImpl.toThrift(durability));
 
     synchronized (cachedSessionIDs) {
       SessionID sid = new SessionID();
@@ -758,47 +753,10 @@ class ConditionalWriterImpl implements ConditionalWriter {
     }
   }
 
-  static class ConditionComparator implements Comparator<Condition> {
-
-    private static final Long MAX = Long.valueOf(Long.MAX_VALUE);
-
-    @Override
-    public int compare(Condition c1, Condition c2) {
-      int comp = c1.getFamily().compareTo(c2.getFamily());
-      if (comp == 0) {
-        comp = c1.getQualifier().compareTo(c2.getQualifier());
-        if (comp == 0) {
-          comp = c1.getVisibility().compareTo(c2.getVisibility());
-          if (comp == 0) {
-            Long l1 = c1.getTimestamp();
-            Long l2 = c2.getTimestamp();
-            if (l1 == null) {
-              l1 = MAX;
-            }
-
-            if (l2 == null) {
-              l2 = MAX;
-            }
-
-            comp = l2.compareTo(l1);
-          }
-        }
-      }
-
-      return comp;
-    }
-  }
-
-  private static final ConditionComparator CONDITION_COMPARATOR = new ConditionComparator();
-
   private List<TCondition> convertConditions(ConditionalMutation cm, CompressedIterators compressedIters) {
     List<TCondition> conditions = new ArrayList<TCondition>(cm.getConditions().size());
 
-    // sort conditions inorder to get better lookup performance. Sort on client side so tserver does not have to do it.
-    Condition[] ca = cm.getConditions().toArray(new Condition[cm.getConditions().size()]);
-    Arrays.sort(ca, CONDITION_COMPARATOR);
-
-    for (Condition cond : ca) {
+    for (Condition cond : cm.getConditions()) {
       long ts = 0;
       boolean hasTs = false;
 