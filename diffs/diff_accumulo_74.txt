diff --git a/src/server/src/main/java/org/apache/accumulo/server/tabletserver/TabletServer.java b/src/server/src/main/java/org/apache/accumulo/server/tabletserver/TabletServer.java
index d18b02e95a..dec94a419d 100644
--- a/src/server/src/main/java/org/apache/accumulo/server/tabletserver/TabletServer.java
+++ b/src/server/src/main/java/org/apache/accumulo/server/tabletserver/TabletServer.java
@@ -62,10 +62,6 @@ import java.util.concurrent.atomic.AtomicReference;
 import javax.management.ObjectName;
 import javax.management.StandardMBean;
 
-import org.apache.accumulo.cloudtrace.instrument.Span;
-import org.apache.accumulo.cloudtrace.instrument.Trace;
-import org.apache.accumulo.cloudtrace.instrument.thrift.TraceWrap;
-import org.apache.accumulo.cloudtrace.thrift.TInfo;
 import org.apache.accumulo.core.Constants;
 import org.apache.accumulo.core.client.AccumuloException;
 import org.apache.accumulo.core.client.AccumuloSecurityException;
@@ -73,8 +69,8 @@ import org.apache.accumulo.core.client.impl.TabletType;
 import org.apache.accumulo.core.client.impl.Translator;
 import org.apache.accumulo.core.conf.AccumuloConfiguration;
 import org.apache.accumulo.core.conf.Property;
-import org.apache.accumulo.core.constraints.Constraint.Environment;
 import org.apache.accumulo.core.constraints.Violations;
+import org.apache.accumulo.core.constraints.Constraint.Environment;
 import org.apache.accumulo.core.data.Column;
 import org.apache.accumulo.core.data.ConstraintViolationSummary;
 import org.apache.accumulo.core.data.Key;
@@ -124,10 +120,10 @@ import org.apache.accumulo.core.util.ColumnFQ;
 import org.apache.accumulo.core.util.Daemon;
 import org.apache.accumulo.core.util.LoggingRunnable;
 import org.apache.accumulo.core.util.ServerServices;
-import org.apache.accumulo.core.util.ServerServices.Service;
 import org.apache.accumulo.core.util.Stat;
 import org.apache.accumulo.core.util.ThriftUtil;
 import org.apache.accumulo.core.util.UtilWaitThread;
+import org.apache.accumulo.core.util.ServerServices.Service;
 import org.apache.accumulo.core.zookeeper.ZooUtil;
 import org.apache.accumulo.core.zookeeper.ZooUtil.NodeExistsPolicy;
 import org.apache.accumulo.server.Accumulo;
@@ -174,18 +170,17 @@ import org.apache.accumulo.server.util.FileSystemMonitor;
 import org.apache.accumulo.server.util.Halt;
 import org.apache.accumulo.server.util.MapCounter;
 import org.apache.accumulo.server.util.MetadataTable;
-import org.apache.accumulo.server.util.MetadataTable.LogEntry;
 import org.apache.accumulo.server.util.TServerUtils;
+import org.apache.accumulo.server.util.MetadataTable.LogEntry;
 import org.apache.accumulo.server.util.TServerUtils.ServerPort;
 import org.apache.accumulo.server.util.time.RelativeTime;
 import org.apache.accumulo.server.util.time.SimpleTimer;
-import org.apache.accumulo.server.zookeeper.IZooReaderWriter;
 import org.apache.accumulo.server.zookeeper.TransactionWatcher;
 import org.apache.accumulo.server.zookeeper.ZooCache;
 import org.apache.accumulo.server.zookeeper.ZooLock;
+import org.apache.accumulo.server.zookeeper.ZooReaderWriter;
 import org.apache.accumulo.server.zookeeper.ZooLock.LockLossReason;
 import org.apache.accumulo.server.zookeeper.ZooLock.LockWatcher;
-import org.apache.accumulo.server.zookeeper.ZooReaderWriter;
 import org.apache.accumulo.start.Platform;
 import org.apache.accumulo.start.classloader.AccumuloClassLoader;
 import org.apache.hadoop.conf.Configuration;
@@ -198,19 +193,21 @@ import org.apache.thrift.TProcessor;
 import org.apache.thrift.TServiceClient;
 import org.apache.thrift.server.TServer;
 import org.apache.zookeeper.KeeperException;
-import org.apache.zookeeper.KeeperException.NoNodeException;
 
+import cloudtrace.instrument.Span;
+import cloudtrace.instrument.Trace;
+import cloudtrace.instrument.thrift.TraceWrap;
+import cloudtrace.thrift.TInfo;
 
 enum ScanRunState {
   QUEUED, RUNNING, FINISHED
 }
 
-public class TabletServer extends AbstractMetricsImpl implements org.apache.accumulo.server.tabletserver.metrics.TabletServerMBean  {
+public class TabletServer extends AbstractMetricsImpl implements TabletServerMBean {
   private static final Logger log = Logger.getLogger(TabletServer.class);
   
   private static HashMap<String,Long> prevGcTime = new HashMap<String,Long>();
   private static long lastMemorySize = 0;
-  private static long gcTimeIncreasedCount;
   private static AtomicLong scanCount = new AtomicLong();
   private static final Class<? extends LoggerStrategy> DEFAULT_LOGGER_STRATEGY = RoundRobinLoggerStrategy.class;
   
@@ -269,15 +266,6 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
     }
     
     long mem = rt.freeMemory();
-    if (maxIncreaseInCollectionTime == 0) {
-      gcTimeIncreasedCount = 0;
-    } else {
-      gcTimeIncreasedCount++;
-      if (gcTimeIncreasedCount > 3 && mem < rt.totalMemory() * 0.05) {
-        log.warn("Running low on memory");
-        gcTimeIncreasedCount = 0;
-      }
-    }
     
     if (mem > lastMemorySize) {
       sawChange = true;
@@ -359,8 +347,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
     synchronized Session reserveSession(long sessionId) {
       Session session = sessions.get(sessionId);
       if (session != null) {
-        if (session.reserved)
-          throw new IllegalStateException();
+        if (session.reserved) throw new IllegalStateException();
         session.reserved = true;
       }
       
@@ -369,22 +356,19 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
     }
     
     synchronized void unreserveSession(Session session) {
-      if (!session.reserved)
-        throw new IllegalStateException();
+      if (!session.reserved) throw new IllegalStateException();
       session.reserved = false;
       session.lastAccessTime = System.currentTimeMillis();
     }
     
     synchronized void unreserveSession(long sessionId) {
       Session session = getSession(sessionId);
-      if (session != null)
-        unreserveSession(session);
+      if (session != null) unreserveSession(session);
     }
     
     synchronized Session getSession(long sessionId) {
       Session session = sessions.get(sessionId);
-      if (session != null)
-        session.lastAccessTime = System.currentTimeMillis();
+      if (session != null) session.lastAccessTime = System.currentTimeMillis();
       return session;
     }
     
@@ -395,8 +379,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
       }
       
       // do clean up out side of lock..
-      if (session != null)
-        session.cleanup();
+      if (session != null) session.cleanup();
       
       return session;
     }
@@ -437,8 +420,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
             }
             
             // call clean up outside of lock
-            if (sessionToCleanup != null)
-              sessionToCleanup.cleanup();
+            if (sessionToCleanup != null) sessionToCleanup.cleanup();
           }
         };
         
@@ -465,13 +447,11 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
           tableID = mss.threadPoolExtent.getTableId().toString();
         }
         
-        if (nbt == null)
-          continue;
+        if (nbt == null) continue;
         
         ScanRunState srs = nbt.getScanRunState();
         
-        if (nbt == null || srs == ScanRunState.FINISHED)
-          continue;
+        if (nbt == null || srs == ScanRunState.FINISHED) continue;
         
         MapCounter<ScanRunState> stateCounts = counts.get(tableID);
         if (stateCounts == null) {
@@ -571,12 +551,11 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
     
     @Override
     public Authorizations getAuthorizations() {
-      if (auths == null)
-        try {
-          this.auths = authenticator.getUserAuthorizations(credentials, getUser());
-        } catch (AccumuloSecurityException e) {
-          throw new RuntimeException(e);
-        }
+      if (auths == null) try {
+        this.auths = authenticator.getUserAuthorizations(credentials, getUser());
+      } catch (AccumuloSecurityException e) {
+        throw new RuntimeException(e);
+      }
       return auths;
     }
     
@@ -601,19 +580,15 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
     }
     
     protected void addResult(Object o) {
-      if (state.compareAndSet(INITIAL, ADDED))
-        resultQueue.add(o);
-      else if (state.get() == ADDED)
-        throw new IllegalStateException("Tried to add more than one result");
+      if (state.compareAndSet(INITIAL, ADDED)) resultQueue.add(o);
+      else if (state.get() == ADDED) throw new IllegalStateException("Tried to add more than one result");
     }
     
     @Override
     public boolean cancel(boolean mayInterruptIfRunning) {
-      if (!mayInterruptIfRunning)
-        throw new IllegalArgumentException("Cancel will always attempt to interupt running next batch task");
+      if (!mayInterruptIfRunning) throw new IllegalArgumentException("Cancel will always attempt to interupt running next batch task");
       
-      if (state.get() == CANCELED)
-        return true;
+      if (state.get() == CANCELED) return true;
       
       if (state.compareAndSet(INITIAL, CANCELED)) {
         interruptFlag.set(true);
@@ -635,31 +610,26 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
       
       ArrayBlockingQueue<Object> localRQ = resultQueue;
       
-      if (state.get() == CANCELED)
-        throw new CancellationException();
+      if (state.get() == CANCELED) throw new CancellationException();
       
-      if (localRQ == null && state.get() == ADDED)
-        throw new IllegalStateException("Tried to get result twice");
+      if (localRQ == null && state.get() == ADDED) throw new IllegalStateException("Tried to get result twice");
       
       Object r = localRQ.poll(timeout, unit);
       
       // could have been canceled while waiting
       if (state.get() == CANCELED) {
-        if (r != null)
-          throw new IllegalStateException("Nothing should have been added when in canceled state");
+        if (r != null) throw new IllegalStateException("Nothing should have been added when in canceled state");
         
         throw new CancellationException();
       }
       
-      if (r == null)
-        throw new TimeoutException();
+      if (r == null) throw new TimeoutException();
       
       // make this method stop working now that something is being
       // returned
       resultQueue = null;
       
-      if (r instanceof Throwable)
-        throw new ExecutionException((Throwable) r);
+      if (r instanceof Throwable) throw new ExecutionException((Throwable) r);
       
       return (T) r;
     }
@@ -684,7 +654,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
     public Tablet currentTablet;
     public MapCounter<Tablet> successfulCommits = new MapCounter<Tablet>();
     Map<KeyExtent,Long> failures = new HashMap<KeyExtent,Long>();
-    HashSet<KeyExtent> authFailures = new HashSet<KeyExtent>();
+    List<KeyExtent> authFailures = new ArrayList<KeyExtent>();
     public Violations violations;
     public AuthInfo credentials;
     public long totalUpdates = 0;
@@ -713,11 +683,9 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
     @Override
     public void cleanup() {
       try {
-        if (nextBatchTask != null)
-          nextBatchTask.cancel(true);
+        if (nextBatchTask != null) nextBatchTask.cancel(true);
       } finally {
-        if (scanner != null)
-          scanner.close();
+        if (scanner != null) scanner.close();
       }
     }
     
@@ -741,8 +709,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
     
     @Override
     public void cleanup() {
-      if (lookupTask != null)
-        lookupTask.cancel(true);
+      if (lookupTask != null) lookupTask.cancel(true);
     }
   }
   
@@ -768,15 +735,13 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
     }
     
     synchronized void finishWrite(long operationId) {
-      if (operationId == -1)
-        return;
+      if (operationId == -1) return;
       
       boolean removed = false;
       
       for (TabletType ttype : TabletType.values()) {
         removed = inProgressWrites.get(ttype).remove(operationId);
-        if (removed)
-          break;
+        if (removed) break;
       }
       
       if (!removed) {
@@ -798,8 +763,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
     }
     
     public long startWrite(Set<Tablet> keySet) {
-      if (keySet.size() == 0)
-        return -1;
+      if (keySet.size() == 0) return -1;
       
       ArrayList<KeyExtent> extents = new ArrayList<KeyExtent>(keySet.size());
       
@@ -842,8 +806,8 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
         throws ThriftSecurityException {
       
       try {
-        if (!authenticator.hasSystemPermission(credentials, credentials.user, SystemPermission.SYSTEM))
-          throw new ThriftSecurityException(credentials.user, SecurityErrorCode.PERMISSION_DENIED);
+        if (!authenticator.hasSystemPermission(credentials, credentials.user, SystemPermission.SYSTEM)) throw new ThriftSecurityException(credentials.user,
+            SecurityErrorCode.PERMISSION_DENIED);
       } catch (AccumuloSecurityException e) {
         throw e.asThriftException();
       }
@@ -862,7 +826,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
           try {
             importTablet.importMapFiles(tid, fileMap, setTime);
           } catch (IOException ioe) {
-            log.info("files " + fileMap.keySet() + " not imported to " + new KeyExtent(tke) + ": " + ioe.getMessage());
+            log.info("file not imported: " + ioe.getMessage());
             failures.add(tke);
           }
         }
@@ -880,8 +844,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
         this.scanID = scanID;
         this.interruptFlag = interruptFlag;
         
-        if (interruptFlag.get())
-          cancel(true);
+        if (interruptFlag.get()) cancel(true);
       }
       
       @Override
@@ -891,8 +854,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
         
         try {
           runState.set(ScanRunState.RUNNING);
-          if (isCancelled() || scanSession == null)
-            return;
+          if (isCancelled() || scanSession == null) return;
           
           Tablet tablet = onlineTablets.get(scanSession.extent);
           
@@ -945,8 +907,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
         
         try {
           runState.set(ScanRunState.RUNNING);
-          if (isCancelled() || session == null)
-            return;
+          if (isCancelled() || session == null) return;
           
           long maxResultsSize = acuConf.getMemoryInBytes(Property.TABLE_SCAN_MAXMEM);
           long bytesAdded = 0;
@@ -983,8 +944,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
               // do the following check to avoid a race condition
               // between setting false below and the task being
               // canceled
-              if (isCancelled())
-                interruptFlag.set(true);
+              if (isCancelled()) interruptFlag.set(true);
               
               lookupResult = tablet.lookup(entry.getValue(), session.columnSet, session.auths, results, maxResultsSize - bytesAdded, session.ssiList,
                   session.ssio, interruptFlag);
@@ -1056,13 +1016,12 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
       Authorizations userauths = null;
       
       try {
-        if (!authenticator.hasTablePermission(credentials, credentials.user, new String(textent.getTable()), TablePermission.READ))
-          throw new ThriftSecurityException(credentials.user, SecurityErrorCode.PERMISSION_DENIED);
+        if (!authenticator.hasTablePermission(credentials, credentials.user, new String(textent.getTable()), TablePermission.READ)) throw new ThriftSecurityException(
+            credentials.user, SecurityErrorCode.PERMISSION_DENIED);
         
         userauths = authenticator.getUserAuthorizations(credentials, credentials.user);
         for (ByteBuffer auth : authorizations)
-          if (!userauths.contains(ByteBufferUtil.toBytes(auth)))
-            throw new ThriftSecurityException(credentials.user, SecurityErrorCode.BAD_AUTHORIZATIONS);
+          if (!userauths.contains(ByteBufferUtil.toBytes(auth))) throw new ThriftSecurityException(credentials.user, SecurityErrorCode.BAD_AUTHORIZATIONS);
       } catch (AccumuloSecurityException e) {
         throw e.asThriftException();
       }
@@ -1081,12 +1040,10 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
       // the restarted client may not see the write unless we wait here.
       // this behavior is very important when the client is reading the
       // !METADATA table
-      if (waitForWrites)
-        writeTracker.waitForWrites(TabletType.type(extent));
+      if (waitForWrites) writeTracker.waitForWrites(TabletType.type(extent));
       
       Tablet tablet = onlineTablets.get(extent);
-      if (tablet == null)
-        throw new NotServingTabletException(textent);
+      if (tablet == null) throw new NotServingTabletException(textent);
       
       ScanSession scanSession = new ScanSession();
       scanSession.user = credentials.user;
@@ -1147,19 +1104,15 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
         scanSession.nextBatchTask = null;
       } catch (ExecutionException e) {
         sessionManager.removeSession(scanID);
-        if (e.getCause() instanceof NotServingTabletException)
-          throw (NotServingTabletException) e.getCause();
-        else if (e.getCause() instanceof TooManyFilesException)
-          throw new org.apache.accumulo.core.tabletserver.thrift.TooManyFilesException(scanSession.extent.toThrift());
-        else
-          throw new RuntimeException(e);
+        if (e.getCause() instanceof NotServingTabletException) throw (NotServingTabletException) e.getCause();
+        else if (e.getCause() instanceof TooManyFilesException) throw new org.apache.accumulo.core.tabletserver.thrift.TooManyFilesException(
+            scanSession.extent.toThrift());
+        else throw new RuntimeException(e);
       } catch (CancellationException ce) {
         sessionManager.removeSession(scanID);
         Tablet tablet = onlineTablets.get(scanSession.extent);
-        if (tablet == null || tablet.isClosed())
-          throw new NotServingTabletException(scanSession.extent.toThrift());
-        else
-          throw new NoSuchScanIDException();
+        if (tablet == null || tablet.isClosed()) throw new NotServingTabletException(scanSession.extent.toThrift());
+        else throw new NoSuchScanIDException();
       } catch (TimeoutException e) {
         List<TKeyValue> param = Collections.emptyList();
         long timeout = acuConf.getTimeInMillis(Property.TSERV_CLIENT_TIMEOUT);
@@ -1184,8 +1137,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
         resourceManager.executeReadAhead(scanSession.extent, scanSession.nextBatchTask);
       }
       
-      if (!scanResult.more)
-        closeScan(tinfo, scanID);
+      if (!scanResult.more) closeScan(tinfo, scanID);
       
       return scanResult;
     }
@@ -1218,13 +1170,12 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
       Authorizations userauths = null;
       try {
         for (String table : tables)
-          if (!authenticator.hasTablePermission(credentials, credentials.user, table, TablePermission.READ))
-            throw new ThriftSecurityException(credentials.user, SecurityErrorCode.PERMISSION_DENIED);
+          if (!authenticator.hasTablePermission(credentials, credentials.user, table, TablePermission.READ)) throw new ThriftSecurityException(
+              credentials.user, SecurityErrorCode.PERMISSION_DENIED);
         
         userauths = authenticator.getUserAuthorizations(credentials, credentials.user);
         for (ByteBuffer auth : authorizations)
-          if (!userauths.contains(ByteBufferUtil.toBytes(auth)))
-            throw new ThriftSecurityException(credentials.user, SecurityErrorCode.BAD_AUTHORIZATIONS);
+          if (!userauths.contains(ByteBufferUtil.toBytes(auth))) throw new ThriftSecurityException(credentials.user, SecurityErrorCode.BAD_AUTHORIZATIONS);
       } catch (AccumuloSecurityException e) {
         throw e.asThriftException();
       }
@@ -1245,8 +1196,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
         
       }
       
-      if (waitForWrites)
-        writeTracker.waitForWrites(TabletType.type(batch.keySet()));
+      if (waitForWrites) writeTracker.waitForWrites(TabletType.type(batch.keySet()));
       
       MultiScanSession mss = new MultiScanSession();
       mss.user = credentials.user;
@@ -1340,8 +1290,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
       // Make sure user is real
       try {
         if (!authenticator.authenticateUser(credentials, credentials.user, credentials.password)) {
-          if (updateMetrics.isEnabled())
-            updateMetrics.add(TabletServerUpdateMetrics.permissionErrors, 0);
+          if (updateMetrics.isEnabled()) updateMetrics.add(TabletServerUpdateMetrics.permissionErrors, 0);
           throw new ThriftSecurityException(credentials.user, SecurityErrorCode.BAD_CREDENTIALS);
         }
       } catch (AccumuloSecurityException e) {
@@ -1360,14 +1309,6 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
     
     private void setUpdateTablet(UpdateSession us, KeyExtent keyExtent) {
       long t1 = System.currentTimeMillis();
-      if (us.currentTablet != null && us.currentTablet.getExtent().equals(keyExtent))
-        return;
-
-      if (us.currentTablet == null && (us.failures.containsKey(keyExtent) || us.authFailures.contains(keyExtent))) {
-        // if there were previous failures, then do not accept additional writes
-        return;
-      }
-      
       try {
         // if user has no permission to write to this table, add it to
         // the failures list
@@ -1384,8 +1325,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
             // not serving tablet, so report all mutations as
             // failures
             us.failures.put(keyExtent, 0l);
-            if (updateMetrics.isEnabled())
-              updateMetrics.add(TabletServerUpdateMetrics.unknownTabletErrors, 0);
+            if (updateMetrics.isEnabled()) updateMetrics.add(TabletServerUpdateMetrics.unknownTabletErrors, 0);
           }
         } else {
           log.warn("Denying access to table " + keyExtent.getTableId() + " for user " + us.credentials.user);
@@ -1393,8 +1333,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
           us.authTimes.addStat(t2 - t1);
           us.currentTablet = null;
           us.authFailures.add(keyExtent);
-          if (updateMetrics.isEnabled())
-            updateMetrics.add(TabletServerUpdateMetrics.permissionErrors, 0);
+          if (updateMetrics.isEnabled()) updateMetrics.add(TabletServerUpdateMetrics.permissionErrors, 0);
           return;
         }
       } catch (AccumuloSecurityException e) {
@@ -1403,8 +1342,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
         us.authTimes.addStat(t2 - t1);
         us.currentTablet = null;
         us.authFailures.add(keyExtent);
-        if (updateMetrics.isEnabled())
-          updateMetrics.add(TabletServerUpdateMetrics.permissionErrors, 0);
+        if (updateMetrics.isEnabled()) updateMetrics.add(TabletServerUpdateMetrics.permissionErrors, 0);
         return;
       }
     }
@@ -1418,7 +1356,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
       
       try {
         KeyExtent keyExtent = new KeyExtent(tkeyExtent);
-        setUpdateTablet(us, keyExtent);
+        if (us.currentTablet == null || !us.currentTablet.getExtent().equals(keyExtent)) setUpdateTablet(us, keyExtent);
         
         if (us.currentTablet != null) {
           List<Mutation> mutations = us.queuedMutations.get(us.currentTablet);
@@ -1427,8 +1365,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
             mutations.add(mutation);
             us.queuedMutationSize += mutation.numBytes();
           }
-          if (us.queuedMutationSize > ServerConfiguration.getSystemConfiguration().getMemoryInBytes(Property.TSERV_MUTATION_QUEUE_MAX))
-            flush(us);
+          if (us.queuedMutationSize > ServerConfiguration.getSystemConfiguration().getMemoryInBytes(Property.TSERV_MUTATION_QUEUE_MAX)) flush(us);
         }
       } finally {
         sessionManager.unreserveSession(us);
@@ -1445,11 +1382,9 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
       
       boolean containsMetadataTablet = false;
       for (Tablet tablet : us.queuedMutations.keySet())
-        if (tablet.getExtent().getTableId().toString().equals(Constants.METADATA_TABLE_ID))
-          containsMetadataTablet = true;
+        if (tablet.getExtent().getTableId().toString().equals(Constants.METADATA_TABLE_ID)) containsMetadataTablet = true;
       
-      if (!containsMetadataTablet && us.queuedMutations.size() > 0)
-        TabletServer.this.resourceManager.waitUntilCommitsAreEnabled();
+      if (!containsMetadataTablet && us.queuedMutations.size() > 0) TabletServer.this.resourceManager.waitUntilCommitsAreEnabled();
       
       Span prep = Trace.start("prep");
       for (Entry<Tablet,? extends List<Mutation>> entry : us.queuedMutations.entrySet()) {
@@ -1458,8 +1393,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
         List<Mutation> mutations = entry.getValue();
         if (mutations.size() > 0) {
           try {
-            if (updateMetrics.isEnabled())
-              updateMetrics.add(TabletServerUpdateMetrics.mutationArraySize, mutations.size());
+            if (updateMetrics.isEnabled()) updateMetrics.add(TabletServerUpdateMetrics.mutationArraySize, mutations.size());
             
             CommitSession commitSession = tablet.prepareMutationsForCommit(us.cenv, mutations);
             if (commitSession == null) {
@@ -1474,8 +1408,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
             
           } catch (TConstraintViolationException e) {
             us.violations.add(e.getViolations());
-            if (updateMetrics.isEnabled())
-              updateMetrics.add(TabletServerUpdateMetrics.constraintViolations, 0);
+            if (updateMetrics.isEnabled()) updateMetrics.add(TabletServerUpdateMetrics.constraintViolations, 0);
             
             if (e.getNonViolators().size() > 0) {
               // only log and commit mutations if there were some
@@ -1505,8 +1438,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
       long pt2 = System.currentTimeMillis();
       long avgPrepareTime = (long) ((pt2 - pt1) / (double) us.queuedMutations.size());
       us.prepareTimes.addStat(pt2 - pt1);
-      if (updateMetrics.isEnabled())
-        updateMetrics.add(TabletServerUpdateMetrics.commitPrep, (avgPrepareTime));
+      if (updateMetrics.isEnabled()) updateMetrics.add(TabletServerUpdateMetrics.commitPrep, (avgPrepareTime));
       
       if (error != null) {
         for (Entry<CommitSession,List<Mutation>> e : sendables.entrySet()) {
@@ -1523,8 +1455,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
             
             long t2 = System.currentTimeMillis();
             us.walogTimes.addStat(t2 - t1);
-            if (updateMetrics.isEnabled())
-              updateMetrics.add(TabletServerUpdateMetrics.waLogWriteTime, (t2 - t1));
+            if (updateMetrics.isEnabled()) updateMetrics.add(TabletServerUpdateMetrics.waLogWriteTime, (t2 - t1));
             
             break;
           } catch (IOException ex) {
@@ -1564,8 +1495,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
         us.flushTime += (t2 - pt1);
         us.commitTimes.addStat(t2 - t1);
         
-        if (updateMetrics.isEnabled())
-          updateMetrics.add(TabletServerUpdateMetrics.commitTime, avgCommitTime);
+        if (updateMetrics.isEnabled()) updateMetrics.add(TabletServerUpdateMetrics.commitTime, avgCommitTime);
         commit.stop();
       } finally {
         us.queuedMutations.clear();
@@ -1620,8 +1550,8 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
     public void update(TInfo tinfo, AuthInfo credentials, TKeyExtent tkeyExtent, TMutation tmutation) throws NotServingTabletException,
         ConstraintViolationException, ThriftSecurityException {
       try {
-        if (!authenticator.hasTablePermission(credentials, credentials.user, new String(tkeyExtent.getTable()), TablePermission.WRITE))
-          throw new ThriftSecurityException(credentials.user, SecurityErrorCode.PERMISSION_DENIED);
+        if (!authenticator.hasTablePermission(credentials, credentials.user, new String(tkeyExtent.getTable()), TablePermission.WRITE)) throw new ThriftSecurityException(
+            credentials.user, SecurityErrorCode.PERMISSION_DENIED);
       } catch (AccumuloSecurityException e) {
         throw e.asThriftException();
       }
@@ -1632,8 +1562,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
         throw new NotServingTabletException(tkeyExtent);
       }
       
-      if (!keyExtent.getTableId().toString().equals(Constants.METADATA_TABLE_ID))
-        TabletServer.this.resourceManager.waitUntilCommitsAreEnabled();
+      if (!keyExtent.getTableId().toString().equals(Constants.METADATA_TABLE_ID)) TabletServer.this.resourceManager.waitUntilCommitsAreEnabled();
       
       long opid = writeTracker.startWrite(TabletType.type(keyExtent));
       
@@ -1676,8 +1605,8 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
       try {
         if (!authenticator.hasSystemPermission(credentials, credentials.user, SystemPermission.ALTER_TABLE)
             && !authenticator.hasSystemPermission(credentials, credentials.user, SystemPermission.SYSTEM)
-            && !authenticator.hasTablePermission(credentials, credentials.user, tableId, TablePermission.ALTER_TABLE))
-          throw new ThriftSecurityException(credentials.user, SecurityErrorCode.PERMISSION_DENIED);
+            && !authenticator.hasTablePermission(credentials, credentials.user, tableId, TablePermission.ALTER_TABLE)) throw new ThriftSecurityException(
+            credentials.user, SecurityErrorCode.PERMISSION_DENIED);
       } catch (AccumuloSecurityException e) {
         throw e.asThriftException();
       }
@@ -1885,8 +1814,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
       
       synchronized (onlineTablets) {
         for (Tablet tablet : onlineTablets.values())
-          if (ke.overlaps(tablet.getExtent()))
-            tabletsToFlush.add(tablet);
+          if (ke.overlaps(tablet.getExtent())) tabletsToFlush.add(tablet);
       }
       
       Long flushID = null;
@@ -1895,13 +1823,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
         if (flushID == null) {
           // read the flush id once from zookeeper instead of reading
           // it for each tablet
-          try {
-            flushID = tablet.getFlushID();
-          } catch (NoNodeException e) {
-            // table was probably deleted
-            log.info("Asked to flush table that has no flush id " + ke + " " + e.getMessage());
-            return;
-          }
+          flushID = tablet.getFlushID();
         }
         tablet.flush(flushID);
       }
@@ -1918,11 +1840,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
       Tablet tablet = onlineTablets.get(new KeyExtent(textent));
       if (tablet != null) {
         log.info("Flushing " + tablet.getExtent());
-        try {
-          tablet.flush(tablet.getFlushID());
-        } catch (NoNodeException nne) {
-          log.info("Asked to flush tablet that has no flush id " + new KeyExtent(textent) + " " + nne.getMessage());
-        }
+        tablet.flush(tablet.getFlushID());
       }
     }
     
@@ -1968,8 +1886,8 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
     public List<ActiveScan> getActiveScans(TInfo tinfo, AuthInfo credentials) throws ThriftSecurityException, TException {
       
       try {
-        if (!authenticator.hasSystemPermission(credentials, credentials.user, SystemPermission.SYSTEM))
-          throw new ThriftSecurityException(credentials.user, SecurityErrorCode.PERMISSION_DENIED);
+        if (!authenticator.hasSystemPermission(credentials, credentials.user, SystemPermission.SYSTEM)) throw new ThriftSecurityException(credentials.user,
+            SecurityErrorCode.PERMISSION_DENIED);
       } catch (AccumuloSecurityException e) {
         throw e.asThriftException();
       }
@@ -1980,8 +1898,8 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
     @Override
     public void chop(TInfo tinfo, AuthInfo credentials, String lock, TKeyExtent textent) throws TException {
       try {
-        if (!authenticator.hasSystemPermission(credentials, credentials.user, SystemPermission.SYSTEM))
-          throw new ThriftSecurityException(credentials.user, SecurityErrorCode.PERMISSION_DENIED);
+        if (!authenticator.hasSystemPermission(credentials, credentials.user, SystemPermission.SYSTEM)) throw new ThriftSecurityException(credentials.user,
+            SecurityErrorCode.PERMISSION_DENIED);
       } catch (Exception e) {
         throw new RuntimeException(e);
       }
@@ -1996,8 +1914,8 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
     @Override
     public void compact(TInfo tinfo, AuthInfo credentials, String lock, String tableId, ByteBuffer startRow, ByteBuffer endRow) throws TException {
       try {
-        if (!authenticator.hasSystemPermission(credentials, credentials.user, SystemPermission.SYSTEM))
-          throw new ThriftSecurityException(credentials.user, SecurityErrorCode.PERMISSION_DENIED);
+        if (!authenticator.hasSystemPermission(credentials, credentials.user, SystemPermission.SYSTEM)) throw new ThriftSecurityException(credentials.user,
+            SecurityErrorCode.PERMISSION_DENIED);
       } catch (Exception e) {
         throw new RuntimeException(e);
       }
@@ -2007,8 +1925,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
       ArrayList<Tablet> tabletsToCompact = new ArrayList<Tablet>();
       synchronized (onlineTablets) {
         for (Tablet tablet : onlineTablets.values())
-          if (ke.overlaps(tablet.getExtent()))
-            tabletsToCompact.add(tablet);
+          if (ke.overlaps(tablet.getExtent())) tabletsToCompact.add(tablet);
       }
       
       Long compactionId = null;
@@ -2016,13 +1933,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
       for (Tablet tablet : tabletsToCompact) {
         // all for the same table id, so only need to read
         // compaction id once
-        if (compactionId == null)
-          try {
-            compactionId = tablet.getCompactionID();
-          } catch (NoNodeException e) {
-            log.info("Asked to compact table with no compaction id " + ke + " " + e.getMessage());
-            return;
-          }
+        if (compactionId == null) compactionId = tablet.getCompactionID();
         tablet.compactAll(compactionId);
       }
       
@@ -2318,8 +2229,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
             Set<KeyExtent> openingOverlapping = KeyExtent.findOverlapping(extent, openingTablets);
             Set<KeyExtent> onlineOverlapping = KeyExtent.findOverlapping(extent, onlineTablets);
             
-            if (openingOverlapping.contains(extent) || onlineOverlapping.contains(extent))
-              return;
+            if (openingOverlapping.contains(extent) || onlineOverlapping.contains(extent)) return;
             
             if (!unopenedTablets.contains(extent) || unopenedOverlapping.size() != 1 || openingOverlapping.size() > 0 || onlineOverlapping.size() > 0) {
               throw new IllegalStateException("overlaps assigned " + extent + " " + !unopenedTablets.contains(extent) + " " + unopenedOverlapping + " "
@@ -2409,26 +2319,19 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
           // this opens the tablet file and fills in the endKey in the
           // extent
           tablet = new Tablet(TabletServer.this, locationToOpen, extentToOpen, trm, tabletsKeyValues);
-          if (tablet.initiateMinorCompaction()) {
-            /*
-             * If a minor compaction starts after a tablet opens, this indicates a log recovery occurred. This recovered data must be minor compacted.
-             * 
-             * There are three reasons to wait for this minor compaction to finish before placing the tablet in online tablets.
-             * 
-             * 1) The log recovery code does not handle data written to the tablet on multiple tablet servers. 2) The log recovery code does not block if memory
-             * is full. Therefore recovering lots of tablets that use a lot of memory could run out of memory. 3) The minor compaction finish event did not make
-             * it to the logs (the file will be in !METADATA, preventing replay of compacted data)... but do not want a majc to wipe the file out from !METADATA
-             * and then have another process failure... this could cause duplicate data to replay
-             */
-
-            tablet.waitForMinC();
-          } else if (tablet.getNumEntries() > 0) {
+          if (!tablet.initiateMinorCompaction() && tablet.getNumEntriesInMemory() > 0) {
             log.warn("Minor compaction after recovery fails for " + extentToOpen);
+            
+            // it is important to wait for minc in the case that the
+            // minor compaction finish
+            // event did not make it to the logs (the file will be
+            // in !METADATA, preventing replay of compacted data)...
+            // but do not want a majc to wipe the file out from
+            // !METADATA and then have another process failure...
+            // this could cause duplicate data to replay
+            tablet.waitForMinC();
           }
           
-          Assignment assignment = new Assignment(extentToOpen, getTabletSession());
-          TabletStateStore.setLocation(assignment);
-
           synchronized (openingTablets) {
             synchronized (onlineTablets) {
               openingTablets.remove(extentToOpen);
@@ -2440,8 +2343,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
           successful = true;
         } catch (Throwable e) {
           log.warn("exception trying to assign tablet " + extentToOpen + " " + locationToOpen, e);
-          if (e.getMessage() != null)
-            log.warn(e.getMessage());
+          if (e.getMessage() != null) log.warn(e.getMessage());
           String table = extent.getTableId().toString();
           ProblemReports.getInstance().report(new ProblemReport(table, TABLET_LOAD, extentToOpen.getUUID().toString(), getClientAddressString(), e));
         }
@@ -2475,7 +2377,13 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
             }
           }, reschedule);
         } else {
-          enqueueMasterMessage(new TabletStatusMessage(TabletLoadState.LOADED, extentToOpen));
+          try {
+            Assignment assignment = new Assignment(extentToOpen, getTabletSession());
+            TabletStateStore.setLocation(assignment);
+            enqueueMasterMessage(new TabletStatusMessage(TabletLoadState.LOADED, extentToOpen));
+          } catch (DistributedStoreException ex) {
+            log.warn("Unable to update storage", ex);
+          }
         }
       }
     }
@@ -2527,11 +2435,9 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
     Set<String> result = loggerStrategy.getLoggers(Collections.unmodifiableSet(allLoggers));
     Set<String> bogus = new HashSet<String>(result);
     bogus.removeAll(allLoggers);
-    if (!bogus.isEmpty())
-      log.warn("logger strategy is returning loggers that are not candidates");
+    if (!bogus.isEmpty()) log.warn("logger strategy is returning loggers that are not candidates");
     result.removeAll(bogus);
-    if (result.isEmpty())
-      log.warn("strategy returned no useful loggers");
+    if (result.isEmpty()) log.warn("strategy returned no useful loggers");
     return result;
   }
   
@@ -2566,8 +2472,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
   private String getMasterAddress() {
     try {
       List<String> locations = HdfsZooInstance.getInstance().getMasterLocations();
-      if (locations.size() == 0)
-        return null;
+      if (locations.size() == 0) return null;
       return locations.get(0);
     } catch (Exception e) {
       log.warn("Failed to obtain master host " + e);
@@ -2610,7 +2515,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
   }
   
   private void announceExistence() {
-    IZooReaderWriter zoo = ZooReaderWriter.getInstance();
+    ZooReaderWriter zoo = ZooReaderWriter.getInstance();
     try {
       String zPath = ZooUtil.getRoot(HdfsZooInstance.getInstance()) + Constants.ZTSERVERS + "/" + getClientAddressString();
       
@@ -2624,8 +2529,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
         public void lostLock(final LockLossReason reason) {
           Halt.halt(0, new Runnable() {
             public void run() {
-              if (!serverStopRequested)
-                log.fatal("Lost tablet server lock (reason = " + reason + "), exiting.");
+              if (!serverStopRequested) log.fatal("Lost tablet server lock (reason = " + reason + "), exiting.");
               logGCInfo();
             }
           });
@@ -2815,8 +2719,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
         Text metadataEntry = extent.getMetadataEntry();
         for (Entry<Key,Value> entry : tabletsKeyValues.entrySet()) {
           Key key = entry.getKey();
-          if (!metadataEntry.equals(key.getRow()))
-            continue;
+          if (!metadataEntry.equals(key.getRow())) continue;
           Text cf = key.getColumnFamily();
           if (cf.equals(Constants.METADATA_FUTURE_LOCATION_COLUMN_FAMILY)) {
             future = new TServerInstance(entry.getValue(), key.getColumnQualifier());
@@ -2914,15 +2817,13 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
   }
   
   public String getClientAddressString() {
-    if (clientAddress == null)
-      return null;
+    if (clientAddress == null) return null;
     return AddressUtil.toString(clientAddress);
   }
   
   TServerInstance getTabletSession() {
     String address = getClientAddressString();
-    if (address == null)
-      return null;
+    if (address == null) return null;
     
     try {
       return new TServerInstance(address, tabletServerLock.getSessionId());
@@ -2944,9 +2845,8 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
       
       authenticator = ZKAuthenticator.getInstance();
       
-      if (args.length > 0)
-        conf.set("tabletserver.hostname", args[0]);
-      Accumulo.enableTracing(local.getHostName(), "tserver");
+      if (args.length > 0) conf.set("tabletserver.hostname", args[0]);
+      Accumulo.enableTracing(local.getHostAddress(), "tserver");
     } catch (IOException e) {
       log.fatal("couldn't get a reference to the filesystem. quitting");
       throw new RuntimeException(e);
@@ -2960,10 +2860,8 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
       try {
         System.load(path);
         log.info("Trying to lock memory pages to RAM");
-        if (MLock.lockMemoryPages() < 0)
-          log.error("Failed to lock memory pages to RAM");
-        else
-          log.info("Memory pages are now locked into RAM");
+        if (MLock.lockMemoryPages() < 0) log.error("Failed to lock memory pages to RAM");
+        else log.info("Memory pages are now locked into RAM");
       } catch (Throwable t) {
         log.error("Failed to load native library for locking pages to RAM " + path + " (" + t + ")", t);
       }
@@ -3046,14 +2944,10 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
       table.ingestByteRate += tablet.ingestByteRate();
       long recsInMemory = tablet.getNumEntriesInMemory();
       table.recsInMemory += recsInMemory;
-      if (tablet.minorCompactionRunning())
-        table.minor.running++;
-      if (tablet.minorCompactionQueued())
-        table.minor.queued++;
-      if (tablet.majorCompactionRunning())
-        table.major.running++;
-      if (tablet.majorCompactionQueued())
-        table.major.queued++;
+      if (tablet.minorCompactionRunning()) table.minor.running++;
+      if (tablet.minorCompactionQueued()) table.minor.queued++;
+      if (tablet.majorCompactionRunning()) table.major.running++;
+      if (tablet.majorCompactionQueued()) table.major.queued++;
     }
     
     for (Entry<String,MapCounter<ScanRunState>> entry : scanCounts.entrySet()) {
@@ -3063,8 +2957,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
         tables.put(entry.getKey(), table);
       }
       
-      if (table.scans == null)
-        table.scans = new Compacting();
+      if (table.scans == null) table.scans = new Compacting();
       
       table.scans.queued += entry.getValue().get(ScanRunState.QUEUED);
       table.scans.running += entry.getValue().get(ScanRunState.RUNNING);
@@ -3104,13 +2997,9 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
   }
   
   public static void main(String[] args) throws IOException {
-    try {
-      TabletServer server = new TabletServer();
-      server.config(args);
-      server.run();
-    } catch (Exception ex) {
-      log.error("Uncaught exception in TabletServer.main, exiting", ex);
-    }
+    TabletServer server = new TabletServer();
+    server.config(args);
+    server.run();
   }
   
   public void minorCompactionFinished(CommitSession tablet, String newDatafile, int walogSeq) throws IOException {
@@ -3143,8 +3032,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
           break;
         }
       }
-      if (recovery == null)
-        throw new IOException("Unable to find recovery files for extent " + tablet.getExtent() + " logEntry: " + entry);
+      if (recovery == null) throw new IOException("Unable to find recovery files for extent " + tablet.getExtent() + " logEntry: " + entry);
       recoveryLogs.add(recovery);
     }
     logger.recover(tablet, recoveryLogs, tabletFiles, mutationReceiver);
@@ -3204,8 +3092,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
     if (this.isEnabled()) {
       int result = 0;
       for (Tablet tablet : Collections.unmodifiableCollection(onlineTablets.values())) {
-        if (tablet.majorCompactionRunning())
-          result++;
+        if (tablet.majorCompactionRunning()) result++;
       }
       return result;
     }
@@ -3217,8 +3104,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
     if (this.isEnabled()) {
       int result = 0;
       for (Tablet tablet : Collections.unmodifiableCollection(onlineTablets.values())) {
-        if (tablet.majorCompactionQueued())
-          result++;
+        if (tablet.majorCompactionQueued()) result++;
       }
       return result;
     }
@@ -3230,8 +3116,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
     if (this.isEnabled()) {
       int result = 0;
       for (Tablet tablet : Collections.unmodifiableCollection(onlineTablets.values())) {
-        if (tablet.minorCompactionRunning())
-          result++;
+        if (tablet.minorCompactionRunning()) result++;
       }
       return result;
     }
@@ -3243,8 +3128,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
     if (this.isEnabled()) {
       int result = 0;
       for (Tablet tablet : Collections.unmodifiableCollection(onlineTablets.values())) {
-        if (tablet.minorCompactionQueued())
-          result++;
+        if (tablet.minorCompactionQueued()) result++;
       }
       return result;
     }
@@ -3253,15 +3137,13 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
   
   @Override
   public int getOnlineCount() {
-    if (this.isEnabled())
-      return onlineTablets.size();
+    if (this.isEnabled()) return onlineTablets.size();
     return 0;
   }
   
   @Override
   public int getOpeningCount() {
-    if (this.isEnabled())
-      return openingTablets.size();
+    if (this.isEnabled()) return openingTablets.size();
     return 0;
   }
   
@@ -3279,29 +3161,25 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
   
   @Override
   public int getUnopenedCount() {
-    if (this.isEnabled())
-      return unopenedTablets.size();
+    if (this.isEnabled()) return unopenedTablets.size();
     return 0;
   }
   
   @Override
   public String getName() {
-    if (this.isEnabled())
-      return getClientAddressString();
+    if (this.isEnabled()) return getClientAddressString();
     return "";
   }
   
   @Override
   public long getTotalMinorCompactions() {
-    if (this.isEnabled())
-      return totalMinorCompactions;
+    if (this.isEnabled()) return totalMinorCompactions;
     return 0;
   }
   
   @Override
   public double getHoldTime() {
-    if (this.isEnabled())
-      return this.resourceManager.holdTime() / 1000.;
+    if (this.isEnabled()) return this.resourceManager.holdTime() / 1000.;
     return 0;
   }
   
@@ -3314,8 +3192,7 @@ public class TabletServer extends AbstractMetricsImpl implements org.apache.accu
         result += tablet.getDatafiles().size();
         count++;
       }
-      if (count == 0)
-        return 0;
+      if (count == 0) return 0;
       return result / (double) count;
     }
     return 0;