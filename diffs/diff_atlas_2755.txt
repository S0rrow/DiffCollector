diff --git a/repository/src/main/java/org/apache/atlas/discovery/EntityDiscoveryService.java b/repository/src/main/java/org/apache/atlas/discovery/EntityDiscoveryService.java
index e7d6523a5..90f084d36 100644
--- a/repository/src/main/java/org/apache/atlas/discovery/EntityDiscoveryService.java
+++ b/repository/src/main/java/org/apache/atlas/discovery/EntityDiscoveryService.java
@@ -18,7 +18,6 @@
 package org.apache.atlas.discovery;
 
 import org.apache.atlas.AtlasConfiguration;
-import org.apache.atlas.AtlasErrorCode;
 import org.apache.atlas.model.discovery.AtlasSearchResult.AtlasFullTextResult;
 import org.apache.atlas.model.discovery.AtlasSearchResult.AtlasQueryType;
 import org.apache.atlas.model.discovery.AtlasSearchResult.AttributeSearchResult;
@@ -38,7 +37,6 @@ import org.apache.atlas.query.SelectExpressionHelper;
 import org.apache.atlas.repository.Constants;
 import org.apache.atlas.repository.MetadataRepository;
 import org.apache.atlas.repository.graph.AtlasGraphProvider;
-import org.apache.atlas.repository.graph.GraphHelper;
 import org.apache.atlas.repository.graphdb.AtlasGraph;
 import org.apache.atlas.repository.graphdb.AtlasIndexQuery;
 import org.apache.atlas.repository.graphdb.AtlasIndexQuery.Result;
@@ -46,8 +44,6 @@ import org.apache.atlas.repository.graphdb.AtlasVertex;
 import org.apache.atlas.repository.store.graph.v1.EntityGraphRetriever;
 import org.apache.atlas.type.AtlasClassificationType;
 import org.apache.atlas.type.AtlasEntityType;
-import org.apache.atlas.type.AtlasStructType;
-import org.apache.atlas.type.AtlasStructType.AtlasAttribute;
 import org.apache.atlas.type.AtlasTypeRegistry;
 import org.apache.atlas.util.AtlasGremlinQueryProvider;
 import org.apache.atlas.util.AtlasGremlinQueryProvider.AtlasGremlinQuery;
@@ -61,14 +57,11 @@ import scala.util.Either;
 import scala.util.parsing.combinator.Parsers.NoSuccess;
 
 import javax.inject.Inject;
-import javax.script.ScriptEngine;
 import javax.script.ScriptException;
 import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
-import java.util.Set;
 
 import static org.apache.atlas.AtlasErrorCode.DISCOVERY_QUERY_FAILED;
 import static org.apache.atlas.AtlasErrorCode.UNKNOWN_TYPENAME;
@@ -97,48 +90,53 @@ public class EntityDiscoveryService implements AtlasDiscoveryService {
         AtlasSearchResult ret = new AtlasSearchResult(dslQuery, AtlasQueryType.DSL);
         GremlinQuery gremlinQuery = toGremlinQuery(dslQuery, limit, offset);
 
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("Executing DSL query: {}", dslQuery);
-        }
+        try {
+            if (LOG.isDebugEnabled()) {
+                LOG.debug("Executing DSL query: {}", dslQuery);
+            }
 
-        Object result = graph.executeGremlinScript(gremlinQuery.queryStr(), false);
+            Object result = graph.executeGremlinScript(gremlinQuery.queryStr(), false);
 
-        if (result instanceof List && CollectionUtils.isNotEmpty((List)result)) {
-            List   queryResult  = (List) result;
-            Object firstElement = queryResult.get(0);
+            if (result instanceof List && CollectionUtils.isNotEmpty((List)result)) {
+                List   queryResult  = (List) result;
+                Object firstElement = queryResult.get(0);
 
-            if (firstElement instanceof AtlasVertex) {
-                for (Object element : queryResult) {
-                    if (element instanceof AtlasVertex) {
-                        ret.addEntity(entityRetriever.toAtlasEntityHeader((AtlasVertex)element));
-                    } else {
-                        LOG.warn("searchUsingDslQuery({}): expected an AtlasVertex; found unexpected entry in result {}", dslQuery, element);
+                if (firstElement instanceof AtlasVertex) {
+                    for (Object element : queryResult) {
+                        if (element instanceof AtlasVertex) {
+                            ret.addEntity(entityRetriever.toAtlasEntityHeader((AtlasVertex)element));
+                        } else {
+                            LOG.warn("searchUsingDslQuery({}): expected an AtlasVertex; found unexpected entry in result {}", dslQuery, element);
+                        }
                     }
-                }
-            } else if (firstElement instanceof Map &&
-                       (((Map)firstElement).containsKey("theInstance") || ((Map)firstElement).containsKey("theTrait"))) {
-                for (Object element : queryResult) {
-                    if (element instanceof Map) {
-                        Map map = (Map)element;
+                } else if (firstElement instanceof Map &&
+                           (((Map)firstElement).containsKey("theInstance") || ((Map)firstElement).containsKey("theTrait"))) {
+                    for (Object element : queryResult) {
+                        if (element instanceof Map) {
+                            Map map = (Map)element;
 
-                        if (map.containsKey("theInstance")) {
-                            Object value = map.get("theInstance");
+                            if (map.containsKey("theInstance")) {
+                                Object value = map.get("theInstance");
 
-                            if (value instanceof List && CollectionUtils.isNotEmpty((List)value)) {
-                                Object entry = ((List)value).get(0);
+                                if (value instanceof List && CollectionUtils.isNotEmpty((List)value)) {
+                                    Object entry = ((List)value).get(0);
 
-                                if (entry instanceof AtlasVertex) {
-                                    ret.addEntity(entityRetriever.toAtlasEntityHeader((AtlasVertex)entry));
+                                    if (entry instanceof AtlasVertex) {
+                                        ret.addEntity(entityRetriever.toAtlasEntityHeader((AtlasVertex)entry));
+                                    }
                                 }
                             }
+                        } else {
+                            LOG.warn("searchUsingDslQuery({}): expected a trait result; found unexpected entry in result {}", dslQuery, element);
                         }
-                    } else {
-                        LOG.warn("searchUsingDslQuery({}): expected a trait result; found unexpected entry in result {}", dslQuery, element);
                     }
+                } else if (gremlinQuery.hasSelectList()) {
+                    ret.setAttributes(toAttributesResult(queryResult, gremlinQuery));
                 }
-            } else if (gremlinQuery.hasSelectList()) {
-                ret.setAttributes(toAttributesResult(queryResult, gremlinQuery));
             }
+
+        } catch (ScriptException e) {
+            throw new AtlasBaseException(DISCOVERY_QUERY_FAILED, gremlinQuery.queryStr());
         }
 
         return ret;
@@ -159,18 +157,15 @@ public class EntityDiscoveryService implements AtlasDiscoveryService {
     }
 
     @Override
-    public AtlasSearchResult searchUsingBasicQuery(String query, String typeName, String classification, String attrName,
-                                                   String attrValue, int limit, int offset) throws AtlasBaseException {
-        AtlasSearchResult ret = new AtlasSearchResult(AtlasQueryType.BASIC);
+    public AtlasSearchResult searchUsingBasicQuery(String query, String typeName, String classification, int limit, int offset) throws AtlasBaseException {
+        AtlasSearchResult ret = new AtlasSearchResult(query, AtlasQueryType.BASIC);
 
         if (LOG.isDebugEnabled()) {
             LOG.debug("Executing basic search query: {} with type: {} and classification: {}", query, typeName, classification);
         }
 
-        final QueryParams params              = validateSearchParams(limit, offset);
-        Set<String>       typeNames           = null;
-        Set<String>       classificationNames = null;
-        String            attrQualifiedName   = null;
+        QueryParams params     = validateSearchParams(limit, offset);
+        String      basicQuery = "g.V()";
 
         if (StringUtils.isNotEmpty(typeName)) {
             AtlasEntityType entityType = typeRegistry.getEntityTypeByName(typeName);
@@ -179,7 +174,10 @@ public class EntityDiscoveryService implements AtlasDiscoveryService {
                 throw new AtlasBaseException(UNKNOWN_TYPENAME, typeName);
             }
 
-            typeNames = entityType.getTypeAndAllSubTypes();
+            String typeFilterExpr = gremlinQueryProvider.getQuery(AtlasGremlinQuery.BASIC_SEARCH_TYPE_FILTER);
+
+            basicQuery += String.format(typeFilterExpr,
+                                        StringUtils.join(entityType.getTypeAndAllSubTypes(), "','"));
 
             ret.setType(typeName);
         }
@@ -191,141 +189,37 @@ public class EntityDiscoveryService implements AtlasDiscoveryService {
                 throw new AtlasBaseException(CLASSIFICATION_NOT_FOUND, classification);
             }
 
-            classificationNames = classificationType.getTypeAndAllSubTypes();
+            String classificationFilterExpr = gremlinQueryProvider.getQuery(AtlasGremlinQuery.BASIC_SEARCH_CLASSIFICATION_FILTER);
 
-            ret.setClassification(classification);
-        }
+            basicQuery += String.format(classificationFilterExpr,
+                                        StringUtils.join(classificationType.getTypeAndAllSubTypes(), "','"));
 
-        boolean isAttributeSearch = StringUtils.isNotEmpty(attrName) && StringUtils.isNotEmpty(attrValue);
-
-        if (isAttributeSearch) {
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Executing attribute search attrName: {} and attrValue: {}", attrName, attrValue);
-            }
-
-            AtlasEntityType entityType = typeRegistry.getEntityTypeByName(typeName);
-
-            if (entityType != null) {
-                AtlasAttribute attribute = entityType.getAttribute(attrName);
-
-                if (attribute == null) {
-                    throw new AtlasBaseException(AtlasErrorCode.UNKNOWN_ATTRIBUTE, attrName, typeName);
-                }
-
-                attrQualifiedName = entityType.getAttribute(attrName).getQualifiedName();
-            }
-
-            String attrQuery = String.format("%s AND (%s *)", attrName, attrValue.replaceAll("\\.", " "));
-
-            if (StringUtils.isEmpty(query)) {
-                query = attrQuery;
-            } else {
-                query = String.format("(%s) AND (%s)", query, attrQuery);
-            }
-
-            ret.setQueryType(AtlasQueryType.ATTRIBUTE);
+            ret.setClassification(classification);
         }
 
-        // if query was provided, perform indexQuery and filter for typeName & classification in memory; this approach
-        // results in a faster and accurate results than using CONTAINS/CONTAINS_PREFIX filter on entityText property
-        if (StringUtils.isNotEmpty(query)) {
-            final String                idxQuery   = String.format("v.\"%s\":(%s)", Constants.ENTITY_TEXT_PROPERTY_KEY, query);
-            final Iterator<Result<?,?>> qryResult  = graph.indexQuery(Constants.FULLTEXT_INDEX, idxQuery).vertices();
-            final int                   startIdx   = params.offset();
-            final int                   resultSize = params.limit();
-
-            int resultIdx = 0;
+        basicQuery += String.format(gremlinQueryProvider.getQuery(AtlasGremlinQuery.BASIC_SEARCH_QUERY_FILTER), query);
+        basicQuery += String.format(gremlinQueryProvider.getQuery(AtlasGremlinQuery.TO_RANGE_LIST), params.offset(), params.limit());
 
-            while (qryResult.hasNext()) {
-                AtlasVertex<?,?> vertex = qryResult.next().getVertex();
+        try {
+            Object result = graph.executeGremlinScript(basicQuery, false);
 
-                String vertexTypeName = GraphHelper.getTypeName(vertex);
+            if (result instanceof List && CollectionUtils.isNotEmpty((List) result)) {
+                List   queryResult  = (List) result;
+                Object firstElement = queryResult.get(0);
 
-                // skip non-entity vertices
-                if (StringUtils.isEmpty(vertexTypeName) || StringUtils.isEmpty(GraphHelper.getGuid(vertex))) {
-                    continue;
-                }
-
-                if (typeNames != null && !typeNames.contains(vertexTypeName)) {
-                    continue;
-                }
+                if (firstElement instanceof AtlasVertex) {
+                    for (Object element : queryResult) {
+                        if (element instanceof AtlasVertex) {
+                            ret.addEntity(entityRetriever.toAtlasEntityHeader((AtlasVertex) element));
 
-                if (classificationNames != null) {
-                    List<String> traitNames = GraphHelper.getTraitNames(vertex);
-
-                    if (CollectionUtils.isEmpty(traitNames) ||
-                        !CollectionUtils.containsAny(classificationNames, traitNames)) {
-                        continue;
-                    }
-                }
-
-                if (isAttributeSearch) {
-                    String vertexAttrValue = vertex.getProperty(attrQualifiedName, String.class);
-
-                    if (StringUtils.isNotEmpty(vertexAttrValue) && !vertexAttrValue.startsWith(attrValue)) {
-                        continue;
-                    }
-                }
-
-                resultIdx++;
-
-                if (resultIdx <= startIdx) {
-                    continue;
-                }
-
-                AtlasEntityHeader header = entityRetriever.toAtlasEntityHeader(vertex);
-
-                ret.addEntity(header);
-
-                if (ret.getEntities().size() == resultSize) {
-                    break;
-                }
-            }
-        } else {
-            final Map<String, Object> bindings   = new HashMap<>();
-            String                    basicQuery = "g.V()";
-
-            if (classificationNames != null) {
-                bindings.put("traitNames", classificationNames);
-
-                basicQuery += gremlinQueryProvider.getQuery(AtlasGremlinQuery.BASIC_SEARCH_CLASSIFICATION_FILTER);
-            }
-
-            if (typeNames != null) {
-                bindings.put("typeNames", typeNames);
-
-                basicQuery += gremlinQueryProvider.getQuery(AtlasGremlinQuery.BASIC_SEARCH_TYPE_FILTER);
-            }
-
-            bindings.put("startIdx", params.offset());
-            bindings.put("endIdx", params.offset() + params.limit());
-
-            basicQuery += gremlinQueryProvider.getQuery(AtlasGremlinQuery.TO_RANGE_LIST);
-
-            ScriptEngine scriptEngine = graph.getGremlinScriptEngine();
-
-            try {
-                Object result = graph.executeGremlinScript(scriptEngine, bindings, basicQuery, false);
-
-                if (result instanceof List && CollectionUtils.isNotEmpty((List) result)) {
-                    List   queryResult  = (List) result;
-                    Object firstElement = queryResult.get(0);
-
-                    if (firstElement instanceof AtlasVertex) {
-                        for (Object element : queryResult) {
-                            if (element instanceof AtlasVertex) {
-                                ret.addEntity(entityRetriever.toAtlasEntityHeader((AtlasVertex) element));
-                            } else {
-                                LOG.warn("searchUsingBasicQuery({}): expected an AtlasVertex; found unexpected entry in result {}", basicQuery, element);
-                            }
+                        } else {
+                            LOG.warn("searchUsingBasicQuery({}): expected an AtlasVertex; found unexpected entry in result {}", basicQuery, element);
                         }
                     }
                 }
-            } catch (ScriptException e) {
-                throw new AtlasBaseException(DISCOVERY_QUERY_FAILED, basicQuery);
-            } finally {
-                graph.releaseGremlinScriptEngine(scriptEngine);
             }
+        } catch (ScriptException e) {
+            throw new AtlasBaseException(DISCOVERY_QUERY_FAILED, basicQuery);
         }
 
         return ret;