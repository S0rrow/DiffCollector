diff --git a/src/core/src/main/java/org/apache/accumulo/core/client/mapreduce/AccumuloOutputFormat.java b/src/core/src/main/java/org/apache/accumulo/core/client/mapreduce/AccumuloOutputFormat.java
index 546db17ead..02cac78b9b 100644
--- a/src/core/src/main/java/org/apache/accumulo/core/client/mapreduce/AccumuloOutputFormat.java
+++ b/src/core/src/main/java/org/apache/accumulo/core/client/mapreduce/AccumuloOutputFormat.java
@@ -30,7 +30,6 @@ import org.apache.accumulo.core.client.MutationsRejectedException;
 import org.apache.accumulo.core.client.TableExistsException;
 import org.apache.accumulo.core.client.TableNotFoundException;
 import org.apache.accumulo.core.client.ZooKeeperInstance;
-import org.apache.accumulo.core.client.mock.MockInstance;
 import org.apache.accumulo.core.data.ColumnUpdate;
 import org.apache.accumulo.core.data.KeyExtent;
 import org.apache.accumulo.core.data.Mutation;
@@ -73,7 +72,6 @@ public class AccumuloOutputFormat extends OutputFormat<Text,Mutation> {
   
   private static final String INSTANCE_NAME = PREFIX + ".instanceName";
   private static final String ZOOKEEPERS = PREFIX + ".zooKeepers";
-  private static final String MOCK = ".useMockInstance";
   
   private static final String CREATETABLES = PREFIX + ".createtables";
   private static final String LOGLEVEL = PREFIX + ".loglevel";
@@ -101,49 +99,22 @@ public class AccumuloOutputFormat extends OutputFormat<Text,Mutation> {
    *          the output format will create new tables as necessary. Table names can only be alpha-numeric and underscores.
    * @param defaultTable
    *          the table to use when the tablename is null in the write call
-   * @deprecated Use {@link #setOutputInfo(Configuration,String,byte[],boolean,String)} instead
    */
   public static void setOutputInfo(JobContext job, String user, byte[] passwd, boolean createTables, String defaultTable) {
-    setOutputInfo(job.getConfiguration(), user, passwd, createTables, defaultTable);
-  }
-
-  /**
-   * Configure the output format.
-   * 
-   * @param conf
-   *          the Map/Reduce job object
-   * @param user
-   *          the username, which must have the Table.CREATE permission to create tables
-   * @param passwd
-   *          the passwd for the username
-   * @param createTables
-   *          the output format will create new tables as necessary. Table names can only be alpha-numeric and underscores.
-   * @param defaultTable
-   *          the table to use when the tablename is null in the write call
-   */
-  public static void setOutputInfo(Configuration conf, String user, byte[] passwd, boolean createTables, String defaultTable) {
-    if (conf.getBoolean(OUTPUT_INFO_HAS_BEEN_SET, false))
-      throw new IllegalStateException("Output info can only be set once per job");
+    Configuration conf = job.getConfiguration();
+    if (conf.getBoolean(OUTPUT_INFO_HAS_BEEN_SET, false)) throw new IllegalStateException("Output info can only be set once per job");
     conf.setBoolean(OUTPUT_INFO_HAS_BEEN_SET, true);
     
     ArgumentChecker.notNull(user, passwd);
     conf.set(USERNAME, user);
     conf.set(PASSWORD, new String(Base64.encodeBase64(passwd)));
     conf.setBoolean(CREATETABLES, createTables);
-    if (defaultTable != null)
-      conf.set(DEFAULT_TABLE_NAME, defaultTable);
+    if (defaultTable != null) conf.set(DEFAULT_TABLE_NAME, defaultTable);
   }
   
-  /**
-   * @deprecated Use {@link #setZooKeeperInstance(Configuration,String,String)} instead
-   */
   public static void setZooKeeperInstance(JobContext job, String instanceName, String zooKeepers) {
-    setZooKeeperInstance(job.getConfiguration(), instanceName, zooKeepers);
-  }
-
-  public static void setZooKeeperInstance(Configuration conf, String instanceName, String zooKeepers) {
-    if (conf.getBoolean(INSTANCE_HAS_BEEN_SET, false))
-      throw new IllegalStateException("Instance info can only be set once per job");
+    Configuration conf = job.getConfiguration();
+    if (conf.getBoolean(INSTANCE_HAS_BEEN_SET, false)) throw new IllegalStateException("Instance info can only be set once per job");
     conf.setBoolean(INSTANCE_HAS_BEEN_SET, true);
     
     ArgumentChecker.notNull(instanceName, zooKeepers);
@@ -151,194 +122,71 @@ public class AccumuloOutputFormat extends OutputFormat<Text,Mutation> {
     conf.set(ZOOKEEPERS, zooKeepers);
   }
   
-  /**
-   * @deprecated Use {@link #setMockInstance(Configuration,String)} instead
-   */
-  public static void setMockInstance(JobContext job, String instanceName) {
-    setMockInstance(job.getConfiguration(), instanceName);
-  }
-
-  public static void setMockInstance(Configuration conf, String instanceName) {
-    conf.setBoolean(INSTANCE_HAS_BEEN_SET, true);
-    conf.setBoolean(MOCK, true);
-    conf.set(INSTANCE_NAME, instanceName);
-  }
-  
-  /**
-   * @deprecated Use {@link #setMaxMutationBufferSize(Configuration,long)} instead
-   */
   public static void setMaxMutationBufferSize(JobContext job, long numberOfBytes) {
-    setMaxMutationBufferSize(job.getConfiguration(), numberOfBytes);
-  }
-
-  public static void setMaxMutationBufferSize(Configuration conf, long numberOfBytes) {
-    conf.setLong(MAX_MUTATION_BUFFER_SIZE, numberOfBytes);
+    job.getConfiguration().setLong(MAX_MUTATION_BUFFER_SIZE, numberOfBytes);
   }
   
-  /**
-   * @deprecated Use {@link #setMaxLatency(Configuration,int)} instead
-   */
   public static void setMaxLatency(JobContext job, int numberOfMilliseconds) {
-    setMaxLatency(job.getConfiguration(), numberOfMilliseconds);
+    job.getConfiguration().setInt(MAX_LATENCY, numberOfMilliseconds);
   }
   
-  public static void setMaxLatency(Configuration conf, int numberOfMilliseconds) {
-    conf.setInt(MAX_LATENCY, numberOfMilliseconds);
-  }
-  
-  /**
-   * @deprecated Use {@link #setMaxWriteThreads(Configuration,int)} instead
-   */
   public static void setMaxWriteThreads(JobContext job, int numberOfThreads) {
-    setMaxWriteThreads(job.getConfiguration(), numberOfThreads);
-  }
-  
-  public static void setMaxWriteThreads(Configuration conf, int numberOfThreads) {
-    conf.setInt(NUM_WRITE_THREADS, numberOfThreads);
+    job.getConfiguration().setInt(NUM_WRITE_THREADS, numberOfThreads);
   }
   
-  /**
-   * @deprecated Use {@link #setLogLevel(Configuration,Level)} instead
-   */
   public static void setLogLevel(JobContext job, Level level) {
-    setLogLevel(job.getConfiguration(), level);
-  }
-  
-  public static void setLogLevel(Configuration conf, Level level) {
     ArgumentChecker.notNull(level);
-    conf.setInt(LOGLEVEL, level.toInt());
+    job.getConfiguration().setInt(LOGLEVEL, level.toInt());
   }
   
-  /**
-   * @deprecated Use {@link #setSimulationMode(Configurtion)} instead
-   */
   public static void setSimulationMode(JobContext job) {
-    setSimulationMode(job.getConfiguration());
+    job.getConfiguration().setBoolean(SIMULATE, true);
   }
   
-  public static void setSimulationMode(Configuration conf) {
-    conf.setBoolean(SIMULATE, true);
-  }
-  
-  /**
-   * @deprecated Use {@link #getUsername(Configuration)} instead
-   */
   protected static String getUsername(JobContext job) {
-    return getUsername(job.getConfiguration());
-  }
-  
-  protected static String getUsername(Configuration conf) {
-    return conf.get(USERNAME);
+    return job.getConfiguration().get(USERNAME);
   }
   
   /**
    * WARNING: The password is stored in the Configuration and shared with all MapReduce tasks; It is BASE64 encoded to provide a charset safe conversion to a
    * string, and is not intended to be secure.
-   * 
-   * @deprecated Use {@link #getPassword(Configuration)} instead
    */
   protected static byte[] getPassword(JobContext job) {
-    return getPassword(job.getConfiguration());
+    return Base64.decodeBase64(job.getConfiguration().get(PASSWORD, "").getBytes());
   }
   
-  /**
-   * WARNING: The password is stored in the Configuration and shared with all MapReduce tasks; It is BASE64 encoded to provide a charset safe conversion to a
-   * string, and is not intended to be secure.
-   */
-  protected static byte[] getPassword(Configuration conf) {
-    return Base64.decodeBase64(conf.get(PASSWORD, "").getBytes());
-  }
-  
-  /**
-   * @deprecated Use {@link #canCreateTables(Configuration)} instead
-   */
   protected static boolean canCreateTables(JobContext job) {
-    return canCreateTables(job.getConfiguration());
+    return job.getConfiguration().getBoolean(CREATETABLES, false);
   }
   
-  protected static boolean canCreateTables(Configuration conf) {
-    return conf.getBoolean(CREATETABLES, false);
-  }
-  
-  /**
-   * @deprecated Use {@link #getDefaultTableName(Configuration)} instead
-   */
   protected static String getDefaultTableName(JobContext job) {
-    return getDefaultTableName(job.getConfiguration());
+    return job.getConfiguration().get(DEFAULT_TABLE_NAME);
   }
   
-  protected static String getDefaultTableName(Configuration conf) {
-    return conf.get(DEFAULT_TABLE_NAME);
-  }
-  
-  /**
-   * @deprecated Use {@link #getInstance(Configuration)} instead
-   */
   protected static Instance getInstance(JobContext job) {
-    return getInstance(job.getConfiguration());
-  }
-  
-  protected static Instance getInstance(Configuration conf) {
-    if (conf.getBoolean(MOCK, false))
-      return new MockInstance(conf.get(INSTANCE_NAME));
+    Configuration conf = job.getConfiguration();
     return new ZooKeeperInstance(conf.get(INSTANCE_NAME), conf.get(ZOOKEEPERS));
   }
   
-  /**
-   * @deprecated Use {@link #getMaxMutationBufferSize(Configuration)} instead
-   */
   protected static long getMaxMutationBufferSize(JobContext job) {
-    return getMaxMutationBufferSize(job.getConfiguration());
+    return job.getConfiguration().getLong(MAX_MUTATION_BUFFER_SIZE, DEFAULT_MAX_MUTATION_BUFFER_SIZE);
   }
   
-  protected static long getMaxMutationBufferSize(Configuration conf) {
-    return conf.getLong(MAX_MUTATION_BUFFER_SIZE, DEFAULT_MAX_MUTATION_BUFFER_SIZE);
-  }
-  
-  /**
-   * @deprecated Use {@link #getMaxLatency(Configuration)} instead
-   */
   protected static int getMaxLatency(JobContext job) {
-    return getMaxLatency(job.getConfiguration());
-  }
-  
-  protected static int getMaxLatency(Configuration conf) {
-    return conf.getInt(MAX_LATENCY, DEFAULT_MAX_LATENCY);
+    return job.getConfiguration().getInt(MAX_LATENCY, DEFAULT_MAX_LATENCY);
   }
   
-  /**
-   * @deprecated Use {@link #getMaxWriteThreads(Configuration)} instead
-   */
   protected static int getMaxWriteThreads(JobContext job) {
-    return getMaxWriteThreads(job.getConfiguration());
-  }
-  
-  protected static int getMaxWriteThreads(Configuration conf) {
-    return conf.getInt(NUM_WRITE_THREADS, DEFAULT_NUM_WRITE_THREADS);
+    return job.getConfiguration().getInt(NUM_WRITE_THREADS, DEFAULT_NUM_WRITE_THREADS);
   }
   
-  /**
-   * @deprecated Use {@link #getLogLevel(Configuration)} instead
-   */
   protected static Level getLogLevel(JobContext job) {
-    return getLogLevel(job.getConfiguration());
-  }
-  
-  protected static Level getLogLevel(Configuration conf) {
-    if (conf.get(LOGLEVEL) != null)
-      return Level.toLevel(conf.getInt(LOGLEVEL, Level.INFO.toInt()));
+    if (job.getConfiguration().get(LOGLEVEL) != null) return Level.toLevel(job.getConfiguration().getInt(LOGLEVEL, Level.INFO.toInt()));
     return null;
   }
   
-  /**
-   * @deprecated Use {@link #getSimulationMode(Configuration)} instead
-   */
   protected static boolean getSimulationMode(JobContext job) {
-    return getSimulationMode(job.getConfiguration());
-  }
-  
-  protected static boolean getSimulationMode(Configuration conf) {
-    return conf.getBoolean(SIMULATE, false);
+    return job.getConfiguration().getBoolean(SIMULATE, false);
   }
   
   private static class AccumuloRecordWriter extends RecordWriter<Text,Mutation> {
@@ -356,13 +204,11 @@ public class AccumuloOutputFormat extends OutputFormat<Text,Mutation> {
     
     AccumuloRecordWriter(TaskAttemptContext attempt) throws AccumuloException, AccumuloSecurityException {
       Level l = getLogLevel(attempt);
-      if (l != null)
-        log.setLevel(getLogLevel(attempt));
+      if (l != null) log.setLevel(getLogLevel(attempt));
       this.simulate = getSimulationMode(attempt);
       this.createTables = canCreateTables(attempt);
       
-      if (simulate)
-        log.info("Simulating output only. No writes to tables will occur");
+      if (simulate) log.info("Simulating output only. No writes to tables will occur");
       
       this.bws = new HashMap<Text,BatchWriter>();
       
@@ -381,26 +227,22 @@ public class AccumuloOutputFormat extends OutputFormat<Text,Mutation> {
      */
     @Override
     public void write(Text table, Mutation mutation) throws IOException {
-      if (table == null || table.toString().isEmpty())
-        table = this.defaultTableName;
+      if (table == null || table.toString().isEmpty()) table = this.defaultTableName;
       
-      if (!simulate && table == null)
-        throw new IOException("No table or default table specified. Try simulation mode next time");
+      if (!simulate && table == null) throw new IOException("No table or default table specified. Try simulation mode next time");
       
       ++mutCount;
       valCount += mutation.size();
       printMutation(table, mutation);
       
-      if (simulate)
-        return;
+      if (simulate) return;
       
-      if (!bws.containsKey(table))
-        try {
-          addTable(table);
-        } catch (Exception e) {
-          e.printStackTrace();
-          throw new IOException(e);
-        }
+      if (!bws.containsKey(table)) try {
+        addTable(table);
+      } catch (Exception e) {
+        e.printStackTrace();
+        throw new IOException(e);
+      }
       
       try {
         bws.get(table).addMutation(mutation);
@@ -441,8 +283,7 @@ public class AccumuloOutputFormat extends OutputFormat<Text,Mutation> {
         throw e;
       }
       
-      if (bw != null)
-        bws.put(tableName, bw);
+      if (bw != null) bws.put(tableName, bw);
     }
     
     private int printMutation(Text table, Mutation m) {
@@ -460,10 +301,8 @@ public class AccumuloOutputFormat extends OutputFormat<Text,Mutation> {
     private String hexDump(byte[] ba) {
       StringBuilder sb = new StringBuilder();
       for (byte b : ba) {
-        if ((b > 0x20) && (b < 0x7e))
-          sb.append((char) b);
-        else
-          sb.append(String.format("x%02x", b));
+        if ((b > 0x20) && (b < 0x7e)) sb.append((char) b);
+        else sb.append(String.format("x%02x", b));
       }
       return sb.toString();
     }
@@ -471,8 +310,7 @@ public class AccumuloOutputFormat extends OutputFormat<Text,Mutation> {
     @Override
     public void close(TaskAttemptContext attempt) throws IOException, InterruptedException {
       log.debug("mutations written: " + mutCount + ", values written: " + valCount);
-      if (simulate)
-        return;
+      if (simulate) return;
       
       try {
         mtbw.close();
@@ -496,14 +334,11 @@ public class AccumuloOutputFormat extends OutputFormat<Text,Mutation> {
   @Override
   public void checkOutputSpecs(JobContext job) throws IOException {
     Configuration conf = job.getConfiguration();
-    if (!conf.getBoolean(OUTPUT_INFO_HAS_BEEN_SET, false))
-      throw new IOException("Output info has not been set.");
-    if (!conf.getBoolean(INSTANCE_HAS_BEEN_SET, false))
-      throw new IOException("Instance info has not been set.");
+    if (!conf.getBoolean(OUTPUT_INFO_HAS_BEEN_SET, false)) throw new IOException("Output info has not been set.");
+    if (!conf.getBoolean(INSTANCE_HAS_BEEN_SET, false)) throw new IOException("Instance info has not been set.");
     try {
       Connector c = getInstance(job).getConnector(getUsername(job), getPassword(job));
-      if (!c.securityOperations().authenticateUser(getUsername(job), getPassword(job)))
-        throw new IOException("Unable to authenticate user");
+      if (!c.securityOperations().authenticateUser(getUsername(job), getPassword(job))) throw new IOException("Unable to authenticate user");
     } catch (AccumuloException e) {
       throw new IOException(e);
     } catch (AccumuloSecurityException e) {