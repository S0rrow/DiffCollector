diff --git a/archiva-modules/archiva-web/archiva-rest/archiva-rest-services/src/main/java/org/apache/archiva/rest/services/DefaultRepositoriesService.java b/archiva-modules/archiva-web/archiva-rest/archiva-rest-services/src/main/java/org/apache/archiva/rest/services/DefaultRepositoriesService.java
index 09b74a3cd..e1d6bc613 100644
--- a/archiva-modules/archiva-web/archiva-rest/archiva-rest-services/src/main/java/org/apache/archiva/rest/services/DefaultRepositoriesService.java
+++ b/archiva-modules/archiva-web/archiva-rest/archiva-rest-services/src/main/java/org/apache/archiva/rest/services/DefaultRepositoriesService.java
@@ -37,7 +37,6 @@
 import org.apache.archiva.metadata.repository.MetadataResolutionException;
 import org.apache.archiva.metadata.repository.RepositorySession;
 import org.apache.archiva.metadata.repository.RepositorySessionFactory;
-import org.apache.archiva.metadata.repository.storage.maven2.MavenArtifactFacet;
 import org.apache.archiva.model.ArchivaRepositoryMetadata;
 import org.apache.archiva.model.ArtifactReference;
 import org.apache.archiva.model.VersionedReference;
@@ -134,6 +133,9 @@
     @Inject
     private RepositoryContentFactory repositoryFactory;
 
+    @Inject
+    private ArchivaAdministration archivaAdministration;
+
     @Inject
     @Named( value = "archivaTaskScheduler#repository" )
     private ArchivaTaskScheduler scheduler;
@@ -621,11 +623,10 @@ private void updateProjectMetadata( String targetPath, Date lastUpdatedTimestamp
         }
     }
 
-    public Boolean deleteArtifact( Artifact artifact )
+    public Boolean deleteArtifact( Artifact artifact, String repositoryId )
         throws ArchivaRestServiceException
     {
 
-        String repositoryId = artifact.getContext();
         if ( StringUtils.isEmpty( repositoryId ) )
         {
             throw new ArchivaRestServiceException( "repositoryId cannot be null", 400, null );
@@ -670,10 +671,6 @@ public Boolean deleteArtifact( Artifact artifact )
 
             ManagedRepositoryContent repository = repositoryFactory.getManagedRepositoryContent( repositoryId );
 
-            MetadataRepository metadataRepository = repositorySession.getRepository();
-
-            String path = repository.toMetadataPath( ref );
-
             if ( StringUtils.isNotBlank( artifact.getClassifier() ) )
             {
                 if ( StringUtils.isBlank( artifact.getPackaging() ) )
@@ -689,73 +686,45 @@ public Boolean deleteArtifact( Artifact artifact )
                 artifactReference.setType( artifact.getPackaging() );
                 repository.deleteArtifact( artifactReference );
 
+                // TODO cleanup facet which contains classifier information
+                return Boolean.TRUE;
             }
-            else
+
+            String path = repository.toMetadataPath( ref );
+            int index = path.lastIndexOf( '/' );
+            path = path.substring( 0, index );
+            File targetPath = new File( repoConfig.getLocation(), path );
+
+            if ( !targetPath.exists() )
             {
+                throw new ContentNotFoundException(
+                    artifact.getGroupId() + ":" + artifact.getArtifactId() + ":" + artifact.getVersion() );
+            }
 
-                int index = path.lastIndexOf( '/' );
-                path = path.substring( 0, index );
-                File targetPath = new File( repoConfig.getLocation(), path );
+            // TODO: this should be in the storage mechanism so that it is all tied together
+            // delete from file system
+            repository.deleteVersion( ref );
 
-                if ( !targetPath.exists() )
-                {
-                    throw new ContentNotFoundException(
-                        artifact.getGroupId() + ":" + artifact.getArtifactId() + ":" + artifact.getVersion() );
-                }
+            File metadataFile = getMetadata( targetPath.getAbsolutePath() );
+            ArchivaRepositoryMetadata metadata = getMetadata( metadataFile );
 
-                // TODO: this should be in the storage mechanism so that it is all tied together
-                // delete from file system
-                repository.deleteVersion( ref );
+            updateMetadata( metadata, metadataFile, lastUpdatedTimestamp, artifact );
 
-                File metadataFile = getMetadata( targetPath.getAbsolutePath() );
-                ArchivaRepositoryMetadata metadata = getMetadata( metadataFile );
+            MetadataRepository metadataRepository = repositorySession.getRepository();
 
-                updateMetadata( metadata, metadataFile, lastUpdatedTimestamp, artifact );
-            }
             Collection<ArtifactMetadata> artifacts =
                 metadataRepository.getArtifacts( repositoryId, artifact.getGroupId(), artifact.getArtifactId(),
                                                  artifact.getVersion() );
 
             for ( ArtifactMetadata artifactMetadata : artifacts )
             {
-
                 // TODO: mismatch between artifact (snapshot) version and project (base) version here
-                if ( artifactMetadata.getVersion().equals( artifact.getVersion() ) )
+                if ( artifact.getVersion().equals( artifact.getVersion() ) )
                 {
-                    if ( StringUtils.isNotBlank( artifact.getClassifier() ) )
-                    {
-                        if ( StringUtils.isBlank( artifact.getPackaging() ) )
-                        {
-                            throw new ArchivaRestServiceException(
-                                "You must configure a type/packaging when using classifier", 400, null );
-                        }
-                        // cleanup facet which contains classifier information
-                        MavenArtifactFacet mavenArtifactFacet =
-                            (MavenArtifactFacet) artifactMetadata.getFacet( MavenArtifactFacet.FACET_ID );
-
-                        if ( StringUtils.equals( artifact.getClassifier(), mavenArtifactFacet.getClassifier() ) )
-                        {
-                            artifactMetadata.removeFacet( MavenArtifactFacet.FACET_ID );
-                            String groupId = artifact.getGroupId(), artifactId = artifact.getArtifactId(), version =
-                                artifact.getVersion();
-                            //metadataRepository.updateArtifact( repositoryId, groupId, artifactId, version,
-                            //                                   artifactMetadata );
-                            // String repositoryId, String namespace, String project, String version, String projectId, MetadataFacet metadataFacet
-                            MavenArtifactFacet mavenArtifactFacetToCompare = new MavenArtifactFacet();
-                            mavenArtifactFacetToCompare.setClassifier( artifact.getClassifier() );
-                            metadataRepository.removeArtifact( repositoryId, groupId, artifactId, version,
-                                                               mavenArtifactFacetToCompare );
-                            metadataRepository.save();
-                        }
+                    metadataRepository.removeArtifact( artifactMetadata.getRepositoryId(),
+                                                       artifactMetadata.getNamespace(), artifactMetadata.getProject(),
+                                                       artifact.getVersion(), artifactMetadata.getId() );
 
-                    }
-                    else
-                    {
-                        metadataRepository.removeArtifact( artifactMetadata.getRepositoryId(),
-                                                           artifactMetadata.getNamespace(),
-                                                           artifactMetadata.getProject(), artifact.getVersion(),
-                                                           artifactMetadata.getId() );
-                    }
                     // TODO: move into the metadata repository proper - need to differentiate attachment of
                     //       repository metadata to an artifact
                     for ( RepositoryListener listener : listeners )
@@ -768,9 +737,9 @@ public Boolean deleteArtifact( Artifact artifact )
                     triggerAuditEvent( repositoryId, path, AuditEvent.REMOVE_FILE );
                 }
             }
-
-
+            repositorySession.save();
         }
+
         catch ( ContentNotFoundException e )
         {
             throw new ArchivaRestServiceException( "Artifact does not exist: " + e.getMessage(), 400, e );
@@ -796,47 +765,13 @@ public Boolean deleteArtifact( Artifact artifact )
             throw new ArchivaRestServiceException( "RepositoryAdmin exception: " + e.getMessage(), 500, e );
         }
         finally
-        {
-            repositorySession.save();
 
+        {
             repositorySession.close();
         }
         return Boolean.TRUE;
     }
 
-    public Boolean deleteGroupId( String groupId, String repositoryId )
-        throws ArchivaRestServiceException
-    {
-        if ( StringUtils.isEmpty( repositoryId ) )
-        {
-            throw new ArchivaRestServiceException( "repositoryId cannot be null", 400, null );
-        }
-
-        if ( !isAuthorizedToDeleteArtifacts( repositoryId ) )
-        {
-            throw new ArchivaRestServiceException( "not authorized to delete artifacts", 403, null );
-        }
-
-        if ( StringUtils.isEmpty( groupId ) )
-        {
-            throw new ArchivaRestServiceException( "artifact.groupId cannot be null", 400, null );
-        }
-
-        try
-        {
-            ManagedRepositoryContent repository = repositoryFactory.getManagedRepositoryContent( repositoryId );
-
-            repository.deleteGroupId( groupId );
-
-        }
-        catch ( RepositoryException e )
-        {
-            log.error( e.getMessage(), e );
-            throw new ArchivaRestServiceException( "Repository exception: " + e.getMessage(), 500, e );
-        }
-        return true;
-    }
-
     public Boolean isAuthorizedToDeleteArtifacts( String repoId )
         throws ArchivaRestServiceException
     {