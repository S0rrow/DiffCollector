diff --git a/modules/gfac-axis2/src/main/java/org/apache/airavata/services/gfac/axis2/reciever/GFacMessageReciever.java b/modules/gfac-axis2/src/main/java/org/apache/airavata/services/gfac/axis2/reciever/GFacMessageReciever.java
index 490985799..6018a7dd1 100644
--- a/modules/gfac-axis2/src/main/java/org/apache/airavata/services/gfac/axis2/reciever/GFacMessageReciever.java
+++ b/modules/gfac-axis2/src/main/java/org/apache/airavata/services/gfac/axis2/reciever/GFacMessageReciever.java
@@ -21,15 +21,12 @@ package org.apache.airavata.services.gfac.axis2.reciever;
  *
 */
 
-import com.sun.tools.doclets.internal.toolkit.Configuration;
-import org.apache.airavata.core.gfac.api.impl.JCRRegistry;
 import org.apache.airavata.core.gfac.context.InvocationContext;
 import org.apache.airavata.core.gfac.context.SecurityContext;
 import org.apache.airavata.core.gfac.context.impl.ExecutionContextImpl;
 import org.apache.airavata.core.gfac.context.impl.ParameterContextImpl;
 import org.apache.airavata.core.gfac.factory.PropertyServiceFactory;
 import org.apache.airavata.core.gfac.notification.DummyNotification;
-import org.apache.airavata.core.gfac.registry.RegistryService;
 import org.apache.airavata.core.gfac.services.GenericService;
 import org.apache.airavata.core.gfac.type.parameter.StringParameter;
 import org.apache.airavata.services.gfac.axis2.utils.GFacServiceOperations;
@@ -37,7 +34,6 @@ import org.apache.axiom.om.OMAbstractFactory;
 import org.apache.axiom.om.OMElement;
 import org.apache.axiom.om.OMFactory;
 import org.apache.axiom.om.OMNamespace;
-import org.apache.axiom.om.impl.builder.StAXOMBuilder;
 import org.apache.axiom.soap.SOAPEnvelope;
 import org.apache.axiom.soap.SOAPFactory;
 import org.apache.axis2.AxisFault;
@@ -50,11 +46,10 @@ import org.apache.axis2.util.Utils;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
-import javax.jcr.*;
+import javax.jcr.Node;
+import javax.jcr.Property;
+import javax.jcr.Session;
 import javax.xml.namespace.QName;
-import javax.xml.stream.XMLInputFactory;
-import javax.xml.stream.XMLStreamReader;
-import java.io.StringReader;
 import java.util.Iterator;
 import java.util.Map;
 
@@ -74,11 +69,7 @@ public class GFacMessageReciever implements MessageReceiver {
             }
             break;
             case GETWSDL: {
-                try {
-                    processgetWSDLOperation(axisRequestMsgCtx);
-                } catch (Exception e) {
-                    throw new AxisFault("Error retrieving the WSDL");
-                }
+                processgetWSDLOperation(axisRequestMsgCtx);
                 log.info("getWSDL operation invoked !!");
             }
         }
@@ -87,14 +78,13 @@ public class GFacMessageReciever implements MessageReceiver {
     public void processInvokeOperation(MessageContext messageContext) {
         MessageContext response = null;
         String serviceName = getOriginalServiceName(messageContext);
-        try {        
-        ConfigurationContext context = messageContext.getConfigurationContext();
         OMElement input = messageContext.getEnvelope().getBody().getFirstChildWithName(new QName("input"));
-        OMElement output = invokeApplication(serviceName, input,context);
+        OMElement output = invokeApplication(serviceName, input);
         SOAPFactory sf = OMAbstractFactory.getSOAP11Factory();
         SOAPEnvelope responseEnv = sf.createSOAPEnvelope();
         sf.createSOAPBody(responseEnv);
         responseEnv.getBody().addChild(output);
+        try {
             response = MessageContextBuilder.createOutMessageContext(messageContext);
             response.setEnvelope(responseEnv);
             response.getOperationContext().addMessageContext(response);
@@ -104,27 +94,35 @@ public class GFacMessageReciever implements MessageReceiver {
         }
     }
 
-    private OMElement invokeApplication(String serviceName, OMElement input,ConfigurationContext context) {
+    private OMElement invokeApplication(String serviceName, OMElement input) {
         OMElement output = null;
         try {
             InvocationContext ct = new InvocationContext();
-            Repository repository = (Repository)context.getProperty("repository");
-            Credentials credentials = (Credentials)context.getProperty("credentials");
             ct.setExecutionContext(new ExecutionContextImpl());
+
+            ct.getExecutionContext().setNotificationService(new DummyNotification());
+
+            MessageContext msgContext = MessageContext.getCurrentMessageContext();
+            Map<String, Object> m = (Map) msgContext.getProperty(SECURITY_CONTEXT);
+            for (String key : m.keySet()) {
+                ct.addSecurityContext(key, (SecurityContext) m.get(key));
+            }
             ct.setServiceName(serviceName);
-            ct.getExecutionContext().setRegistryService(new JCRRegistry(repository,credentials));
-            ParameterContextImpl x = new ParameterContextImpl();
 
             // TODO define real parameter passing in SOAP body
             //handle parameter
             for (Iterator iterator = input.getChildren(); iterator.hasNext(); ) {
                 OMElement element = (OMElement) iterator.next();
                 String name = element.getQName().getLocalPart();
+
                 StringParameter value = new StringParameter();
                 value.parseStringVal(element.getText());
+
+                ParameterContextImpl x = new ParameterContextImpl();
                 x.addParameter(name, value);
+                ct.addMessageContext("input", x);
             }
-            ct.addMessageContext("input", x);
+
             if (service == null) {
                 service = new PropertyServiceFactory().createService();
             }
@@ -141,12 +139,12 @@ public class GFacMessageReciever implements MessageReceiver {
             OMNamespace omNs = fac.createOMNamespace("http://ws.apache.org/axis2/xsd", "ns1");
             output = fac.createOMElement("output", omNs);
 
-            ParameterContextImpl paramContext = (ParameterContextImpl) ct.getMessageContext("output");
-            for (Iterator<String> iterator = paramContext.getParameterNames(); iterator.hasNext(); ) {
+            ParameterContextImpl context = (ParameterContextImpl) ct.getMessageContext("output");
+            for (Iterator<String> iterator = context.getParameterNames(); iterator.hasNext(); ) {
                 String name = iterator.next();
                 OMElement ele = fac.createOMElement(name, omNs);
-                ele.addAttribute("type", paramContext.getParameterValue(name).getType().toString(), omNs);
-                ele.setText(paramContext.getParameterValue(name).toString());
+                ele.addAttribute("type", context.getParameterValue(name).getType().toString(), omNs);
+                ele.setText(context.getParameterValue(name).toString());
                 output.addChild(ele);
             }
 
@@ -157,22 +155,19 @@ public class GFacMessageReciever implements MessageReceiver {
         return output;
     }
 
-    public void processgetWSDLOperation(MessageContext messageContext)throws Exception {
+    public void processgetWSDLOperation(MessageContext messageContext) {
         MessageContext response = null;
         String serviceName = getOriginalServiceName(messageContext);
         ConfigurationContext context = messageContext.getConfigurationContext();
         //todo this logic has to change based on the logic we are storing data into repository
         try {
-            Credentials credentials = (Credentials) context.getProperty("credentials");
-            Session session = ((Repository)context.getProperty("repository")).login(credentials);
-            Node node = session.getRootNode().getNode("wsdls").getNode(serviceName);
+            Session session = (Session) context.getProperty("repositorySession");
+            Node node = session.getNode("wsdls").getNode(serviceName);
             Property propertyContent = node.getProperty("content");
-            XMLStreamReader reader = XMLInputFactory.newInstance().createXMLStreamReader
-                    (new StringReader(propertyContent.getString()));
-            StAXOMBuilder builder = new StAXOMBuilder(reader);
-            OMElement wsdlElement = builder.getDocumentElement();
+            String wsdlContent = propertyContent.getString();
             SOAPFactory sf = OMAbstractFactory.getSOAP11Factory();
             SOAPEnvelope responseEnv = sf.createSOAPEnvelope();
+            OMElement wsdlElement = sf.createOMElement(wsdlContent, "", "");
             sf.createSOAPBody(responseEnv);
             responseEnv.getBody().addChild(wsdlElement);
             response = MessageContextBuilder.createOutMessageContext(messageContext);
@@ -181,7 +176,6 @@ public class GFacMessageReciever implements MessageReceiver {
             AxisEngine.send(response);
         } catch (Exception fault) {
             log.error("Error creating response");
-            throw fault;
         }
     }
 