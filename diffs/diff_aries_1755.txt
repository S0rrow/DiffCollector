diff --git a/jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/Activator.java b/jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/Activator.java
index 740f1de89..b1eca0138 100644
--- a/jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/Activator.java
+++ b/jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/Activator.java
@@ -22,75 +22,23 @@ import java.util.Hashtable;
 
 import javax.naming.spi.ObjectFactory;
 
-import org.apache.aries.proxy.ProxyManager;
-import org.apache.aries.util.SingleServiceTracker;
-import org.apache.aries.util.SingleServiceTracker.SingleServiceListener;
 import org.osgi.framework.BundleActivator;
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.ServiceRegistration;
 import org.osgi.service.jndi.JNDIConstants;
 
-public class Activator implements BundleActivator, SingleServiceListener 
-{
-    private BundleContext ctx;
-    private volatile ServiceRegistration osgiUrlReg = null;
-    private volatile ServiceRegistration blueprintUrlReg = null;
-    private static SingleServiceTracker<ProxyManager> proxyManager;
+public class Activator implements BundleActivator {
 
-    @Override
-    public void start(BundleContext context) 
-    {
-        ctx = context;
-        proxyManager = new SingleServiceTracker<ProxyManager>(context, ProxyManager.class, this);
-        proxyManager.open();
-    }
+    private ServiceRegistration reg;
 
-    @Override
-    public void stop(BundleContext context) {
-      proxyManager.close();
-      if (osgiUrlReg != null) osgiUrlReg.unregister();
-      if (blueprintUrlReg != null) blueprintUrlReg.unregister();
+    public void start(BundleContext context) {
+        Hashtable<Object, Object> props = new Hashtable<Object, Object>();
+        props.put(JNDIConstants.JNDI_URLSCHEME, new String[] { "osgi", "aries" });
+        reg = context.registerService(ObjectFactory.class.getName(), new OsgiURLContextServiceFactory(), props);
     }
-  
 
-  @Override
-    public void serviceFound() 
-    {
-    Hashtable<Object, Object> osgiUrlprops = new Hashtable<Object, Object>();
-    osgiUrlprops.put(JNDIConstants.JNDI_URLSCHEME, new String[] { "osgi", "aries" });
-    osgiUrlReg = ctx.registerService(ObjectFactory.class.getName(),
-        new OsgiURLContextServiceFactory(), osgiUrlprops);
-
-    // Blueprint URL scheme requires access to the BlueprintContainer service.
-    // We have an optional import
-    // on org.osgi.service.blueprint.container: only register the blueprint:comp/URL
-    // scheme if it's present
-    try {
-      ctx.getBundle().loadClass("org.osgi.service.blueprint.container.BlueprintContainer");
-      Hashtable<Object, Object> blueprintURlSchemeProps = new Hashtable<Object, Object>();
-      blueprintURlSchemeProps.put(JNDIConstants.JNDI_URLSCHEME, new String[] { "blueprint" });
-      blueprintUrlReg = ctx.registerService(ObjectFactory.class.getName(),
-          new BlueprintURLContextServiceFactory(), blueprintURlSchemeProps);
-    } catch (ClassNotFoundException cnfe) {
-      // The blueprint packages aren't available, so do nothing. That's fine.
+    public void stop(BundleContext context) {
+        reg.unregister();
     }
-  }
 
-  public void serviceLost() 
-  {
-    if (osgiUrlReg != null) osgiUrlReg.unregister();
-    osgiUrlReg = null;
-    if (blueprintUrlReg != null) blueprintUrlReg.unregister();
-    blueprintUrlReg = null;
-  }
-
-    public void serviceReplaced() 
-    {
-      
-    }
-    
-    public static ProxyManager getProxyManager()
-    {
-      return proxyManager == null ? null : proxyManager.getService();
-    }
-}
\ No newline at end of file
+}