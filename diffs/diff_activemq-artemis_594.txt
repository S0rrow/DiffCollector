diff --git a/artemis-protocols/artemis-mqtt-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/mqtt/MQTTSession.java b/artemis-protocols/artemis-mqtt-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/mqtt/MQTTSession.java
index 059948f143..e3516f15bc 100644
--- a/artemis-protocols/artemis-mqtt-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/mqtt/MQTTSession.java
+++ b/artemis-protocols/artemis-mqtt-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/mqtt/MQTTSession.java
@@ -6,7 +6,7 @@
  * (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
@@ -17,16 +17,17 @@
 
 package org.apache.activemq.artemis.core.protocol.mqtt;
 
-import java.util.Map;
-import java.util.UUID;
-import java.util.concurrent.ConcurrentHashMap;
-
 import org.apache.activemq.artemis.core.server.ActiveMQServer;
 import org.apache.activemq.artemis.core.server.impl.ServerSessionImpl;
 import org.apache.activemq.artemis.spi.core.protocol.SessionCallback;
 
-public class MQTTSession {
+import java.util.Map;
+import java.util.UUID;
+import java.util.concurrent.ConcurrentHashMap;
+
 
+public class MQTTSession
+{
    static Map<String, MQTTSessionState> SESSIONS = new ConcurrentHashMap<>();
 
    private final String id = UUID.randomUUID().toString();
@@ -53,13 +54,14 @@ public class MQTTSession {
 
    private MQTTLogger log = MQTTLogger.LOGGER;
 
-   public MQTTSession(MQTTProtocolHandler protocolHandler, MQTTConnection connection) throws Exception {
+   public MQTTSession( MQTTProtocolHandler protocolHandler, MQTTConnection connection) throws Exception
+   {
       this.protocolHandler = protocolHandler;
       this.connection = connection;
 
       mqttConnectionManager = new MQTTConnectionManager(this);
       mqttPublishManager = new MQTTPublishManager(this);
-      sessionCallback = new MQTTSessionCallback(this, connection);
+      sessionCallback = new MQTTSessionCallback(this);
       subscriptionManager = new MQTTSubscriptionManager(this);
       retainMessageManager = new MQTTRetainMessageManager(this);
 
@@ -67,86 +69,105 @@ public class MQTTSession {
    }
 
    // Called after the client has Connected.
-   synchronized void start() throws Exception {
+   synchronized void  start() throws Exception
+   {
       mqttPublishManager.start();
       subscriptionManager.start();
       stopped = false;
    }
 
    // TODO ensure resources are cleaned up for GC.
-   synchronized void stop() throws Exception {
-      if (!stopped) {
+   synchronized void stop() throws Exception
+   {
+      if (!stopped)
+      {
          protocolHandler.stop(false);
          // TODO this should pass in clean session.
          subscriptionManager.stop(false);
          mqttPublishManager.stop(false);
 
-         if (serverSession != null) {
+         if (serverSession != null)
+         {
             serverSession.stop();
             serverSession.close(false);
          }
 
-         if (state != null) {
+         if (state != null)
+         {
             state.setAttached(false);
          }
       }
       stopped = true;
    }
 
-   boolean getStopped() {
+   boolean getStopped()
+   {
       return stopped;
    }
 
-   MQTTPublishManager getMqttPublishManager() {
+   MQTTPublishManager getMqttPublishManager()
+   {
       return mqttPublishManager;
    }
 
-   MQTTSessionState getState() {
+   MQTTSessionState getState()
+   {
       return state;
    }
 
-   MQTTConnectionManager getConnectionManager() {
+   MQTTConnectionManager getConnectionManager()
+   {
       return mqttConnectionManager;
    }
 
-   MQTTSessionState getSessionState() {
+   MQTTSessionState getSessionState()
+   {
       return state;
    }
 
-   ServerSessionImpl getServerSession() {
+   ServerSessionImpl getServerSession()
+   {
       return serverSession;
    }
 
-   ActiveMQServer getServer() {
+   ActiveMQServer getServer()
+   {
       return protocolHandler.getServer();
    }
 
-   MQTTSubscriptionManager getSubscriptionManager() {
+   MQTTSubscriptionManager getSubscriptionManager()
+   {
       return subscriptionManager;
    }
 
-   MQTTProtocolHandler getProtocolHandler() {
+   MQTTProtocolHandler getProtocolHandler()
+   {
       return protocolHandler;
    }
 
-   SessionCallback getSessionCallback() {
+   SessionCallback getSessionCallback()
+   {
       return sessionCallback;
    }
 
-   void setServerSession(ServerSessionImpl serverSession) {
+   void setServerSession(ServerSessionImpl serverSession)
+   {
       this.serverSession = serverSession;
    }
 
-   void setSessionState(MQTTSessionState state) {
+   void setSessionState(MQTTSessionState state)
+   {
       this.state = state;
       state.setAttached(true);
    }
 
-   MQTTRetainMessageManager getRetainMessageManager() {
+   MQTTRetainMessageManager getRetainMessageManager()
+   {
       return retainMessageManager;
    }
 
-   MQTTConnection getConnection() {
+   MQTTConnection getConnection()
+   {
       return connection;
    }
 }