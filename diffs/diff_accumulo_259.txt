diff --git a/test/src/test/java/org/apache/accumulo/proxy/ProxyDurabilityIT.java b/test/src/test/java/org/apache/accumulo/proxy/ProxyDurabilityIT.java
index 6338e00a31..f8bcbfb99a 100644
--- a/test/src/test/java/org/apache/accumulo/proxy/ProxyDurabilityIT.java
+++ b/test/src/test/java/org/apache/accumulo/proxy/ProxyDurabilityIT.java
@@ -19,9 +19,7 @@ package org.apache.accumulo.proxy;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
-import java.io.File;
 import java.nio.ByteBuffer;
-import java.nio.file.Files;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
@@ -48,59 +46,61 @@ import org.apache.accumulo.proxy.thrift.TimeType;
 import org.apache.accumulo.proxy.thrift.WriterOptions;
 import org.apache.accumulo.server.util.PortUtils;
 import org.apache.accumulo.test.functional.ConfigurableMacIT;
+import org.apache.accumulo.test.functional.FunctionalTestUtils;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.RawLocalFileSystem;
-import org.apache.thrift.protocol.TJSONProtocol;
+import org.apache.thrift.protocol.TJSONProtocol.Factory;
 import org.apache.thrift.server.TServer;
 import org.junit.Test;
 
-import com.google.common.collect.Iterators;
-import com.google.common.net.HostAndPort;
-
 public class ProxyDurabilityIT extends ConfigurableMacIT {
-
+  
   @Override
   public void configure(MiniAccumuloConfigImpl cfg, Configuration hadoopCoreSite) {
     hadoopCoreSite.set("fs.file.impl", RawLocalFileSystem.class.getName());
-    cfg.setProperty(Property.INSTANCE_ZK_TIMEOUT, "10s");
+    cfg.setProperty(Property.INSTANCE_ZK_TIMEOUT, "5s");
     cfg.setNumTservers(1);
   }
-
+  
   private static ByteBuffer bytes(String value) {
     return ByteBuffer.wrap(value.getBytes());
   }
-
+  
   @Test
   public void testDurability() throws Exception {
     Connector c = getConnector();
     Properties props = new Properties();
-    // Avoid issues with locally installed client configuration files with custom properties
-    File emptyFile = Files.createTempFile(null, null).toFile();
-    emptyFile.deleteOnExit();
     props.put("instance", c.getInstance().getInstanceName());
     props.put("zookeepers", c.getInstance().getZooKeepers());
     props.put("tokenClass", PasswordToken.class.getName());
-    props.put("clientConfigurationFile", emptyFile.toString());
 
-    TJSONProtocol.Factory protocol = new TJSONProtocol.Factory();
+    Class<Factory> protocolClass = org.apache.thrift.protocol.TJSONProtocol.Factory.class;
 
     int proxyPort = PortUtils.getRandomFreePort();
-    final TServer proxyServer = Proxy.createProxyServer(HostAndPort.fromParts("localhost", proxyPort), protocol, props).server;
+    final TServer proxyServer = Proxy.createProxyServer(org.apache.accumulo.proxy.thrift.AccumuloProxy.class, org.apache.accumulo.proxy.ProxyServer.class, proxyPort,
+        protocolClass, props);
+    Thread thread = new Thread() {
+      @Override
+      public void run() {
+        proxyServer.serve();
+      }
+    };
+    thread.start();
     while (!proxyServer.isServing())
       UtilWaitThread.sleep(100);
-    Client client = new TestProxyClient("localhost", proxyPort, protocol).proxy();
+    Client client = new TestProxyClient("localhost", proxyPort, protocolClass.newInstance()).proxy();
     Map<String,String> properties = new TreeMap<String,String>();
     properties.put("password", ROOT_PASSWORD);
     ByteBuffer login = client.login("root", properties);
-
+    
     String tableName = getUniqueNames(1)[0];
     client.createTable(login, tableName, true, TimeType.MILLIS);
     assertTrue(c.tableOperations().exists(tableName));
-
+    
     WriterOptions options = new WriterOptions();
     options.setDurability(Durability.NONE);
     String writer = client.createWriter(login, tableName, options);
-    Map<ByteBuffer,List<ColumnUpdate>> cells = new TreeMap<ByteBuffer,List<ColumnUpdate>>();
+    Map<ByteBuffer,List<ColumnUpdate>> cells = new TreeMap<ByteBuffer, List<ColumnUpdate>>();
     ColumnUpdate column = new ColumnUpdate(bytes("cf"), bytes("cq"));
     column.setValue("value".getBytes());
     cells.put(bytes("row"), Collections.singletonList(column));
@@ -109,7 +109,7 @@ public class ProxyDurabilityIT extends ConfigurableMacIT {
     assertEquals(1, count(tableName));
     restartTServer();
     assertEquals(0, count(tableName));
-
+    
     ConditionalWriterOptions cfg = new ConditionalWriterOptions();
     cfg.setDurability(Durability.LOG);
     String cwriter = client.createConditionalWriter(login, tableName, cfg);
@@ -121,8 +121,9 @@ public class ProxyDurabilityIT extends ConfigurableMacIT {
     assertEquals(1, count(tableName));
     restartTServer();
     assertEquals(0, count(tableName));
-
+    
     proxyServer.stop();
+    thread.join();
   }
 
   private void restartTServer() throws Exception {
@@ -133,7 +134,8 @@ public class ProxyDurabilityIT extends ConfigurableMacIT {
   }
 
   private int count(String tableName) throws Exception {
-    return Iterators.size((getConnector().createScanner(tableName, Authorizations.EMPTY)).iterator());
+    Connector c = getConnector();
+    return FunctionalTestUtils.count(c.createScanner(tableName, Authorizations.EMPTY));
   }
-
+  
 }