diff --git a/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/proton/ProtonTransactionHandler.java b/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/proton/ProtonTransactionHandler.java
index 1afeba873a..6d4e73ae99 100644
--- a/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/proton/ProtonTransactionHandler.java
+++ b/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/proton/ProtonTransactionHandler.java
@@ -19,10 +19,8 @@ package org.apache.activemq.artemis.protocol.amqp.proton;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.PooledByteBufAllocator;
 import org.apache.activemq.artemis.protocol.amqp.broker.AMQPSessionCallback;
-import org.apache.activemq.artemis.protocol.amqp.exceptions.ActiveMQAMQPException;
 import org.apache.activemq.artemis.protocol.amqp.logger.ActiveMQAMQPProtocolMessageBundle;
 import org.apache.activemq.artemis.protocol.amqp.util.DeliveryUtil;
-import org.apache.activemq.artemis.protocol.amqp.util.NettyWritable;
 import org.apache.qpid.proton.amqp.Binary;
 import org.apache.qpid.proton.amqp.Symbol;
 import org.apache.qpid.proton.amqp.messaging.Accepted;
@@ -36,6 +34,7 @@ import org.apache.qpid.proton.engine.Delivery;
 import org.apache.qpid.proton.engine.Receiver;
 import org.apache.qpid.proton.message.impl.MessageImpl;
 import org.jboss.logging.Logger;
+import org.apache.activemq.artemis.protocol.amqp.exceptions.ActiveMQAMQPException;
 
 /**
  * handles an amqp Coordinator to deal with transaction boundaries etc
@@ -62,7 +61,7 @@ public class ProtonTransactionHandler implements ProtonDeliveryHandler {
             return;
          }
 
-         receiver.recv(new NettyWritable(buffer));
+         DeliveryUtil.readDelivery(receiver, buffer);
 
          receiver.advance();
 
@@ -76,7 +75,8 @@ public class ProtonTransactionHandler implements ProtonDeliveryHandler {
             declared.setTxnId(txID);
             delivery.disposition(declared);
             delivery.settle();
-         } else if (action instanceof Discharge) {
+         }
+         else if (action instanceof Discharge) {
             Discharge discharge = (Discharge) action;
 
             Binary txID = discharge.getTxnId();
@@ -84,26 +84,33 @@ public class ProtonTransactionHandler implements ProtonDeliveryHandler {
                try {
                   sessionSPI.rollbackTX(txID, true);
                   delivery.disposition(new Accepted());
-               } catch (Exception e) {
+               }
+               catch (Exception e) {
                   throw ActiveMQAMQPProtocolMessageBundle.BUNDLE.errorRollingbackCoordinator(e.getMessage());
                }
-            } else {
+            }
+            else {
                try {
                   sessionSPI.commitTX(txID);
                   delivery.disposition(new Accepted());
-               } catch (ActiveMQAMQPException amqpE) {
+               }
+               catch (ActiveMQAMQPException amqpE) {
                   throw amqpE;
-               } catch (Exception e) {
+               }
+               catch (Exception e) {
                   throw ActiveMQAMQPProtocolMessageBundle.BUNDLE.errorCommittingCoordinator(e.getMessage());
                }
             }
          }
-      } catch (ActiveMQAMQPException amqpE) {
+      }
+      catch (ActiveMQAMQPException amqpE) {
          delivery.disposition(createRejected(amqpE.getAmqpError(), amqpE.getMessage()));
-      } catch (Exception e) {
+      }
+      catch (Exception e) {
          log.warn(e.getMessage(), e);
          delivery.disposition(createRejected(Symbol.getSymbol("failed"), e.getMessage()));
-      } finally {
+      }
+      finally {
          delivery.settle();
          buffer.release();
       }