diff --git a/src/main/java/org/apache/aries/transaction/TransactionManagerService.java b/src/main/java/org/apache/aries/transaction/TransactionManagerService.java
index 2f806f994..b11d422b6 100644
--- a/src/main/java/org/apache/aries/transaction/TransactionManagerService.java
+++ b/src/main/java/org/apache/aries/transaction/TransactionManagerService.java
@@ -16,30 +16,29 @@
  */
 package org.apache.aries.transaction;
 
-import java.io.File;
-import java.util.ArrayList;
 import java.util.Dictionary;
 import java.util.List;
+import java.util.ArrayList;
 import java.util.Properties;
+import java.io.File;
+import java.io.IOException;
+
+import javax.transaction.xa.XAException;
 import javax.transaction.TransactionManager;
 import javax.transaction.TransactionSynchronizationRegistry;
 import javax.transaction.UserTransaction;
-import javax.transaction.xa.XAException;
 
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.ServiceRegistration;
 import org.osgi.service.cm.ConfigurationException;
-import org.apache.aries.util.AriesFrameworkUtil;
-import org.apache.geronimo.transaction.log.HOWLLog;
-import org.apache.geronimo.transaction.log.UnrecoverableLog;
 import org.apache.geronimo.transaction.manager.GeronimoTransactionManager;
-import org.apache.geronimo.transaction.manager.RecoverableTransactionManager;
 import org.apache.geronimo.transaction.manager.TransactionLog;
 import org.apache.geronimo.transaction.manager.XidFactory;
 import org.apache.geronimo.transaction.manager.XidFactoryImpl;
-import org.osgi.framework.BundleContext;
-import org.osgi.framework.ServiceRegistration;
-import org.osgi.service.cm.ConfigurationException;
+import org.apache.geronimo.transaction.manager.RecoverableTransactionManager;
+import org.apache.geronimo.transaction.log.HOWLLog;
+import org.apache.geronimo.transaction.log.UnrecoverableLog;
+import org.objectweb.howl.log.LogConfigurationException;
 
 /**
  */
@@ -81,16 +80,16 @@ public class TransactionManagerService {
         // Transaction timeout
         int transactionTimeout = getInt(TRANSACTION_TIMEOUT, DEFAULT_TRANSACTION_TIMEOUT);
         if (transactionTimeout <= 0) {
-            throw new ConfigurationException(TRANSACTION_TIMEOUT, NLS.MESSAGES.getMessage("tx.timeout.greaterthan.zero"));
+            throw new ConfigurationException(TRANSACTION_TIMEOUT, "Property " + TRANSACTION_TIMEOUT + " must be > 0");
         }
-        // the max length of the factory should be 64
-        XidFactory xidFactory = new XidFactoryImpl(pid.substring(0, Math.min(pid.length(), 64)).getBytes());
+        // XID factory
+        XidFactory xidFactory = new XidFactoryImpl(pid.getBytes());
         // Transaction log
         if (getBool(RECOVERABLE, DEFAULT_RECOVERABLE)) {
             String bufferClassName = getString(HOWL_BUFFER_CLASS_NAME, "org.objectweb.howl.log.BlockLogBuffer");
             int bufferSizeKBytes = getInt(HOWL_BUFFER_SIZE, 32);
             if (bufferSizeKBytes < 1 || bufferSizeKBytes > 32) {
-                throw new ConfigurationException(HOWL_BUFFER_SIZE, NLS.MESSAGES.getMessage("buffer.size.between.one.and.thirtytwo"));
+                throw new ConfigurationException(HOWL_BUFFER_SIZE, "bufferSize must be between 1 and 32");
             }
             boolean checksumEnabled = getBool(HOWL_CHECKSUM_ENABLED, true);
             boolean adler32Checksum = getBool(HOWL_ADLER32_CHECKSUM, true);
@@ -101,16 +100,16 @@ public class TransactionManagerService {
             int maxLogFiles = getInt(HOWL_MAX_LOG_FILES, 2);
             int minBuffers = getInt(HOWL_MIN_BUFFERS, 4);
             if (minBuffers < 0) {
-                throw new ConfigurationException(HOWL_MIN_BUFFERS, NLS.MESSAGES.getMessage("min.buffers.greaterthan.zero"));
+                throw new ConfigurationException(HOWL_MIN_BUFFERS, "minBuffers must be > 0");
             }
             int maxBuffers = getInt(HOWL_MAX_BUFFERS, 0);
             if (maxBuffers > 0 && minBuffers < maxBuffers) {
-                throw new ConfigurationException(HOWL_MAX_BUFFERS, NLS.MESSAGES.getMessage("max.buffers.greaterthan.min.buffers"));
+                throw new ConfigurationException(HOWL_MAX_BUFFERS, "minBuffers must be <= maxBuffers");
             }
             int threadsWaitingForceThreshold = getInt(HOWL_THREADS_WAITING_FORCE_THRESHOLD, -1);
             String logFileDir = getString(HOWL_LOG_FILE_DIR, null);
             if (logFileDir == null || logFileDir.length() == 0 || !new File(logFileDir).isAbsolute()) {
-                throw new ConfigurationException(HOWL_LOG_FILE_DIR, NLS.MESSAGES.getMessage("log.file.dir"));
+                throw new ConfigurationException(HOWL_LOG_FILE_DIR, "Property should be set to an absolute directory");
             }
             try {
                 transactionLog = new HOWLLog(bufferClassName,
@@ -128,8 +127,10 @@ public class TransactionManagerService {
                                              threadsWaitingForceThreshold,
                                              xidFactory != null ? xidFactory : new XidFactoryImpl(),
                                              null);
-                ((HOWLLog) transactionLog).doStart();
-            } catch (Exception e) {
+            } catch (LogConfigurationException e) {
+                // This should not really happen as we've checked properties earlier
+                throw new ConfigurationException(null, null, e);
+            } catch (IOException e) {
                 // This should not really happen as we've checked properties earlier
                 throw new ConfigurationException(null, null, e);
             }
@@ -145,11 +146,14 @@ public class TransactionManagerService {
                 transactionManager = new GeronimoTransactionManager(transactionTimeout, xidFactory, transactionLog);
             }
         } catch (XAException e) {
-            throw new RuntimeException(NLS.MESSAGES.getMessage("tx.recovery.error"), e);
+            throw new RuntimeException("Error recovering transaction log", e);
         }
     }
 
     public void start() throws Exception {
+        if (transactionLog instanceof HOWLLog) {
+            ((HOWLLog) transactionLog).doStart();
+        }
         List<String> clazzes = new ArrayList<String>();
         clazzes.add(TransactionManager.class.getName());
         clazzes.add(TransactionSynchronizationRegistry.class.getName());
@@ -162,8 +166,9 @@ public class TransactionManagerService {
     }
 
     public void close() throws Exception {
-        AriesFrameworkUtil.safeUnregisterService(serviceRegistration);
-      
+        if (serviceRegistration != null) {
+            serviceRegistration.unregister();
+        }
         if (transactionLog instanceof HOWLLog) {
             ((HOWLLog) transactionLog).doStop();
         }
@@ -183,7 +188,7 @@ public class TransactionManagerService {
             try {
                 return Integer.parseInt(value);
             } catch (Exception e) {
-                throw new ConfigurationException(property, NLS.MESSAGES.getMessage("prop.value.not.int", property, value), e);
+                throw new ConfigurationException(property, "Error parsing " + property + "(" + value + ") property as an integer", e);
             }
         }
         return dflt;
@@ -195,7 +200,7 @@ public class TransactionManagerService {
             try {
                 return Boolean.parseBoolean(value);
             } catch (Exception e) {
-                throw new ConfigurationException(property, NLS.MESSAGES.getMessage("prop.value.not.boolean", property, value), e);
+                throw new ConfigurationException(property, "Error parsing " + property + "(" + value + ") property as a boolean", e);
             }
         }
         return dflt;