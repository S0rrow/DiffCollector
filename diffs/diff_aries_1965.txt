diff --git a/jpa-container/src/main/java/org/apache/aries/jpa/container/impl/EntityManagerFactoryManager.java b/jpa-container/src/main/java/org/apache/aries/jpa/container/impl/EntityManagerFactoryManager.java
index ce39d9440..e79201979 100644
--- a/jpa-container/src/main/java/org/apache/aries/jpa/container/impl/EntityManagerFactoryManager.java
+++ b/jpa-container/src/main/java/org/apache/aries/jpa/container/impl/EntityManagerFactoryManager.java
@@ -22,18 +22,13 @@ import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Hashtable;
 import java.util.Map;
 import java.util.Map.Entry;
-import java.util.concurrent.Callable;
+import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
-import java.util.concurrent.ExecutionException;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-import java.util.concurrent.Future;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.TimeoutException;
 
 import javax.persistence.EntityManagerFactory;
 import javax.persistence.spi.PersistenceProvider;
@@ -42,15 +37,9 @@ import javax.persistence.spi.PersistenceUnitInfo;
 import org.apache.aries.jpa.container.ManagedPersistenceUnitInfo;
 import org.apache.aries.jpa.container.PersistenceUnitConstants;
 import org.apache.aries.jpa.container.parsing.ParsedPersistenceUnit;
-import org.apache.aries.jpa.container.quiesce.impl.DestroyCallback;
-import org.apache.aries.jpa.container.quiesce.impl.EMFProxyFactory;
-import org.apache.aries.jpa.container.quiesce.impl.NamedCallback;
-import org.apache.aries.jpa.container.quiesce.impl.QuiesceEMF;
 import org.apache.aries.util.AriesFrameworkUtil;
 import org.osgi.framework.Bundle;
 import org.osgi.framework.BundleContext;
-import org.osgi.framework.FrameworkUtil;
-import org.osgi.framework.InvalidSyntaxException;
 import org.osgi.framework.ServiceReference;
 import org.osgi.framework.ServiceRegistration;
 import org.osgi.util.tracker.ServiceTracker;
@@ -61,14 +50,28 @@ import org.slf4j.LoggerFactory;
  * This class manages the lifecycle of Persistence Units and their associated
  * {@link EntityManagerFactory} objects.
  */
-@SuppressWarnings({
-    "unchecked", "rawtypes"
-})
 public class EntityManagerFactoryManager implements ServiceTrackerCustomizer {
 
-  public static final String DATA_SOURCE_NAME = "org.apache.aries.jpa.data.source.name";
+  /**
+   * A callback for a named persistence units
+   */
+  class NamedCallback {
+    private final Set<String> names;
+    private final DestroyCallback callback;
+    public NamedCallback(Collection<String> names, DestroyCallback countdown) {
+      this.names = new HashSet<String>(names);
+      callback = countdown;
+    }
 
-  public static final String DATA_SOURCE_NAME_JTA = "org.apache.aries.jpa.data.source.name.jta";
+    public void callback(String name) {
+      boolean winner;
+      synchronized (this) {
+        winner = !!!names.isEmpty() && names.remove(name) && names.isEmpty();
+      }
+      if(winner)
+        callback.callback();
+    }
+  }
 
   /** The container's {@link BundleContext} */
   private final BundleContext containerContext;
@@ -81,20 +84,16 @@ public class EntityManagerFactoryManager implements ServiceTrackerCustomizer {
   /** The original parsed data */
   private Collection<ParsedPersistenceUnit> parsedData;
   /** A Map of created {@link EntityManagerFactory}s */
-  private Map<String, EntityManagerFactory> emfs = null;
+  private Map<String, CountingEntityManagerFactory> emfs = null;
   /** The {@link ServiceRegistration} objects for the {@link EntityManagerFactory}s */
   private ConcurrentMap<String, ServiceRegistration> registrations = null;
   /** Quiesce this Manager */
   private boolean quiesce = false;
   
-  private volatile ServiceTracker jndiTracker;
-  private volatile ServiceTracker dataSourceFactoriesTracker;
-
+  private volatile ServiceTracker tracker; 
+  
   /** DataSourceFactories in use by persistence units in this bundle - class name key to collection of unit values */
-  private final ConcurrentMap<String, Collection<String>> dataSourceFactories =
-         new ConcurrentHashMap<String, Collection<String>>();
-
-  private final ConcurrentMap<String, Collection<String>> jndiServices =
+  private final ConcurrentMap<String, Collection<String>> dataSourceFactories = 
          new ConcurrentHashMap<String, Collection<String>>();
 
   /** Logger */
@@ -108,13 +107,18 @@ public class EntityManagerFactoryManager implements ServiceTrackerCustomizer {
    * {@link PersistenceBundleManager} that is synchronized
    * on itself, and the resulting manager should be immediately
    * stored in the bundleToManager Map
-   *
-   * @param containerCtx
+   * 
    * @param b
+   * @param infos 
+   * @param ref 
+   * @param parsedUnits 
    */
-  public EntityManagerFactoryManager(BundleContext containerCtx, Bundle b) {
+  public EntityManagerFactoryManager(BundleContext containerCtx, Bundle b, Collection<ParsedPersistenceUnit> parsedUnits, ServiceReference ref, Collection<? extends ManagedPersistenceUnitInfo> infos) {
     containerContext = containerCtx;
     bundle = b;
+    provider = ref;
+    persistenceUnits = getInfoMap(infos);
+    parsedData = parsedUnits;
   }
 
   private Map<String, ? extends ManagedPersistenceUnitInfo> getInfoMap(
@@ -141,12 +145,9 @@ public class EntityManagerFactoryManager implements ServiceTrackerCustomizer {
    * @param ref  The provider service reference
    * @return true if the the provider is being used by this manager
    */
-  public synchronized boolean providerRemoved(ServiceReference ref) 
-  {
-    boolean toReturn = false;
-    if (provider != null) {
-    	toReturn = provider.equals(ref);
-    }
+  public synchronized boolean providerRemoved(ServiceReference ref) {
+    
+    boolean toReturn = provider.equals(ref);
     
     if(toReturn)
       destroy();
@@ -173,44 +174,23 @@ public class EntityManagerFactoryManager implements ServiceTrackerCustomizer {
         break;
         //Starting and active both require EMFs to be registered
       case Bundle.STARTING :
+        //Create the EMF objects if necessary
+        createEntityManagerFactories();
       case Bundle.ACTIVE :
-        if(dataSourceFactoriesTracker == null) {
-          dataSourceFactoriesTracker = new ServiceTracker(bundle.getBundleContext(),
+        if(tracker == null) {
+          tracker = new ServiceTracker(bundle.getBundleContext(), 
               "org.osgi.service.jdbc.DataSourceFactory", this);
-          dataSourceFactoriesTracker.open();
-        }
-        if(jndiTracker == null) {
-          try {
-            jndiTracker = new ServiceTracker(bundle.getBundleContext(),
-                    FrameworkUtil.createFilter("(osgi.jndi.service.name=*)"), this);
-            jndiTracker.open();
-          } catch (InvalidSyntaxException e) {
-            throw new RuntimeException(e);
-          }
+          tracker.open();
         }
-        ExecutorService executor = Executors.newSingleThreadExecutor();
-        Future<Void> result = executor.submit(new Callable<Void>() {
-            
-            @Override
-            public Void call() throws InvalidPersistenceUnitException {
-                registerEntityManagerFactories();
-                return null;
-            }
-        });
-        executor.shutdown();
-        handleCreationResult(result);
+        registerEntityManagerFactories();
         break;
         //Stopping means the EMFs should
       case Bundle.STOPPING :
         //If we're stopping we no longer need to be quiescing
         quiesce = false;
-        if(jndiTracker != null) {
-          jndiTracker.close();
-          jndiTracker = null;
-        }
-        if(dataSourceFactoriesTracker != null) {
-          dataSourceFactoriesTracker.close();
-          dataSourceFactoriesTracker = null;
+        if(tracker != null) {
+          tracker.close();
+          tracker = null;
         }
         unregisterEntityManagerFactories();
         break;
@@ -220,22 +200,6 @@ public class EntityManagerFactoryManager implements ServiceTrackerCustomizer {
     }
   }
 
-    private void handleCreationResult(Future<Void> result) throws InvalidPersistenceUnitException {
-        try {
-            result.get(5000, TimeUnit.SECONDS);
-        } catch (InterruptedException e) {
-            _logger.warn(e.getMessage(), e);
-        } catch (ExecutionException e) {
-            if (e.getCause() instanceof InvalidPersistenceUnitException) {
-                throw (InvalidPersistenceUnitException) e.getCause();
-            } else if (e.getCause() instanceof RuntimeException) {
-                throw (RuntimeException) e.getCause();
-            }
-        } catch (TimeoutException e) {
-            _logger.info("EntityManagerFactory creation takes long. Continuing in background", e);
-        }
-    }
-
   /**
    * Unregister all {@link EntityManagerFactory} services
    */
@@ -244,7 +208,7 @@ public class EntityManagerFactoryManager implements ServiceTrackerCustomizer {
     if(registrations != null) {
       for(Entry<String, ServiceRegistration> entry : registrations.entrySet()) {
         AriesFrameworkUtil.safeUnregisterService(entry.getValue());
-        clearQuiesce(emfs.get(entry.getKey()));
+        emfs.get(entry.getKey()).clearQuiesce();
         persistenceUnits.get(entry.getKey()).unregistered();
       }
       // remember to set registrations to be null
@@ -252,21 +216,14 @@ public class EntityManagerFactoryManager implements ServiceTrackerCustomizer {
     }
   }
 
-
   private void unregisterEntityManagerFactory(String unit) {
     if(registrations != null) {
       AriesFrameworkUtil.safeUnregisterService(registrations.remove(unit));
-      clearQuiesce(emfs.get(unit));
+      emfs.get(unit).clearQuiesce();
       persistenceUnits.get(unit).unregistered();
     }
   }
-  
-  private void clearQuiesce(EntityManagerFactory emf) {
-      if (emf instanceof QuiesceEMF) {
-          ((QuiesceEMF) emf).clearQuiesce();
-      }
-  }
-  
+
   /**
    * Register {@link EntityManagerFactory} services
    * 
@@ -291,15 +248,13 @@ public class EntityManagerFactoryManager implements ServiceTrackerCustomizer {
                       PersistenceUnitConstants.OSGI_UNIT_PROVIDER, provider));
       }
       //Register each EMF
-      for(Entry<String, EntityManagerFactory> entry : emfs.entrySet())
+      for(Entry<String, ? extends EntityManagerFactory> entry : emfs.entrySet())
       {
         
         Hashtable<String,Object> props = new Hashtable<String, Object>();
         String unitName = entry.getKey();
         
-        if(registrations.containsKey(unitName) ||
-                !!!availableDataSourceFactory(unitName) ||
-                !!!availableJndiService(unitName))
+        if(registrations.containsKey(unitName) || !!!availableDataSourceFactory(unitName))
           continue;
         
         props.put(PersistenceUnitConstants.OSGI_UNIT_NAME, unitName);
@@ -320,43 +275,7 @@ public class EntityManagerFactoryManager implements ServiceTrackerCustomizer {
     }
   }
 
-  private boolean availableJndiService(String unitName) {
-    ManagedPersistenceUnitInfo mpui = persistenceUnits.get(unitName);
-
-    String dsName = (String) mpui.getContainerProperties().get(DATA_SOURCE_NAME);
-    if (dsName != null && dsName.startsWith("osgi:service/")) {
-      String jndi = dsName.substring("osgi:service/".length());
-      if (jndiServices.containsKey(jndi)) {
-        jndiServices.get(jndi).add(unitName);
-        if (_logger.isDebugEnabled())
-          _logger.debug(NLS.MESSAGES.getMessage("jndiservice.found", unitName, bundle.getSymbolicName(),
-              bundle.getVersion(), jndi));
-      } else {
-        _logger.debug(NLS.MESSAGES.getMessage("jndiservice.not.found", unitName, bundle.getSymbolicName(),
-            bundle.getVersion(), jndi));
-        return false;
-      }
-    }
-
-    String jtaDsName = (String) mpui.getContainerProperties().get(DATA_SOURCE_NAME_JTA);
-    if (jtaDsName != null && jtaDsName.startsWith("osgi:service/")) {
-      String jndi = jtaDsName.substring("osgi:service/".length());
-      if (jndiServices.containsKey(jndi)) {
-        jndiServices.get(jndi).add(unitName);
-        if (_logger.isDebugEnabled())
-          _logger.debug(NLS.MESSAGES.getMessage("jndiservice.found", unitName, bundle.getSymbolicName(),
-              bundle.getVersion(), jndi));
-      } else {
-        _logger.debug(NLS.MESSAGES.getMessage("jndiservice.not.found", unitName, bundle.getSymbolicName(),
-            bundle.getVersion(), jndi));
-        return false;
-      }
-    }
-
-    return true;
-  }
-
- private boolean availableDataSourceFactory(String unitName) {
+  private boolean availableDataSourceFactory(String unitName) {
     ManagedPersistenceUnitInfo mpui = persistenceUnits.get(unitName);
         
     String driver = (String) mpui.getPersistenceUnitInfo().getProperties().
@@ -383,46 +302,41 @@ public class EntityManagerFactoryManager implements ServiceTrackerCustomizer {
       return true;
     }
   }
-  
+
   /**
    * Create {@link EntityManagerFactory} services for this peristence unit
    * throws InvalidPersistenceUnitException if this {@link EntityManagerFactory} is no longer
    *  valid and should be destroyed
    */
   private void createEntityManagerFactories() throws InvalidPersistenceUnitException {
-    if (emfs == null) {  
-      emfs = new HashMap<String, EntityManagerFactory>();
-    }
     //Only try if we have a provider and EMFs
-    if(provider == null || !emfs.isEmpty() || quiesce) {
-        return;
-    }
-    try {
-      //Get hold of the provider
-      PersistenceProvider providerService = (PersistenceProvider) containerContext.getService(provider);
+    if(provider != null) {
+      if(emfs == null && !quiesce) {
+        try {
+          emfs = new HashMap<String, CountingEntityManagerFactory>();
+        
+          //Get hold of the provider
+          PersistenceProvider providerService = (PersistenceProvider) containerContext.getService(provider);
 
-      if(providerService == null) {
-        _logger.warn(NLS.MESSAGES.getMessage("persistence.provider.gone.awol", bundle.getSymbolicName() + '/' + bundle.getVersion()));
-        throw new InvalidPersistenceUnitException();
-      }
+          if(providerService == null) {
+            _logger.warn(NLS.MESSAGES.getMessage("persistence.provider.gone.awol", bundle.getSymbolicName() + '/' + bundle.getVersion()));
+            throw new InvalidPersistenceUnitException();
+          }
 
-      for(String unitName : persistenceUnits.keySet()){
-        ManagedPersistenceUnitInfo mpui = persistenceUnits.get(unitName);
-        try {
-          EntityManagerFactory emf = providerService.createContainerEntityManagerFactory(mpui.getPersistenceUnitInfo(), mpui.getContainerProperties());
-          EntityManagerFactory emfProxy = EMFProxyFactory.createProxy(emf, unitName);
-          emfs.put(unitName, emfProxy);
-        } catch (Exception e) {
-          _logger.warn("Error creating EntityManagerFactory", e);
+          for(Entry<String, ? extends ManagedPersistenceUnitInfo> entry : 
+               persistenceUnits.entrySet()){
+            ManagedPersistenceUnitInfo mpui = entry.getValue();
+            emfs.put(entry.getKey(), new CountingEntityManagerFactory(
+                providerService.createContainerEntityManagerFactory(
+                    mpui.getPersistenceUnitInfo(), mpui.getContainerProperties()), entry.getKey()));
+          }
+        } finally {
+          //Remember to unget the provider
+          containerContext.ungetService(provider);
         }
       }
-    } finally {
-      //Remember to unget the provider
-      containerContext.ungetService(provider);
     }
   }
-  
-
 
   /**
    * Manage the EntityManagerFactories for the following
@@ -466,13 +380,9 @@ public class EntityManagerFactoryManager implements ServiceTrackerCustomizer {
     
     provider = null;
     persistenceUnits = null;
-    if(jndiTracker != null) {
-      jndiTracker.close();
-      jndiTracker = null;
-    }
-    if(dataSourceFactoriesTracker != null) {
-      dataSourceFactoriesTracker.close();
-      dataSourceFactoriesTracker = null;
+    if(tracker != null) {
+      tracker.close();
+      tracker = null;
     }
   }
 
@@ -483,7 +393,7 @@ public class EntityManagerFactoryManager implements ServiceTrackerCustomizer {
     if(registrations != null)
       unregisterEntityManagerFactories();
     if(emfs != null) {
-      for(Entry<String, EntityManagerFactory> entry : emfs.entrySet()) {
+      for(Entry<String, ? extends EntityManagerFactory> entry : emfs.entrySet()) {
         try {
           entry.getValue().close();
         } catch (Exception e) {
@@ -502,12 +412,11 @@ public class EntityManagerFactoryManager implements ServiceTrackerCustomizer {
   {
     return parsedData;
   }
-
   /** Quiesce this Manager */
   public void quiesce(DestroyCallback countdown) {
     
     //Find the EMFs to quiesce, and their Service registrations
-    Map<EntityManagerFactory, ServiceRegistration> entries = new HashMap<EntityManagerFactory, ServiceRegistration>();
+    Map<CountingEntityManagerFactory, ServiceRegistration> entries = new HashMap<CountingEntityManagerFactory, ServiceRegistration>();
     Collection<String> names = new ArrayList<String>();
     synchronized(this) {
       if((bundle.getState() & (Bundle.ACTIVE | Bundle.STARTING)) != 0)
@@ -523,166 +432,84 @@ public class EntityManagerFactoryManager implements ServiceTrackerCustomizer {
     if(entries.isEmpty())
       countdown.callback();
     else {
-      NamedCallback callback = new NamedCallback(names, countdown);
-      for(Entry<EntityManagerFactory, ServiceRegistration> entry : entries.entrySet()) {
-        quiesce(entry.getKey(), callback, entry.getValue());
+    NamedCallback callback = new NamedCallback(names, countdown);
+      for(Entry<CountingEntityManagerFactory, ServiceRegistration> entry : entries.entrySet()) {
+        CountingEntityManagerFactory emf = entry.getKey();
+        emf.quiesce(callback, entry.getValue());
       }
     }
   }
-  
-  private void quiesce(EntityManagerFactory emf, NamedCallback callback, ServiceRegistration reg) {
-      if (emf instanceof QuiesceEMF) {
-          ((QuiesceEMF) emf).quiesce(callback, reg);
-      }
-  }
-  
+
   @Override
   public StringBuffer addingService(ServiceReference reference) {
-    Object driverClass = reference.getProperty("osgi.jdbc.driver.class");
-    if (driverClass != null) {
-      //Use String.valueOf to save us from nulls
-      StringBuffer sb = new StringBuffer(String.valueOf(reference.getProperty("osgi.jdbc.driver.class")));
-
-      //Only notify of a potential change if a new data source class is available
-      if (dataSourceFactories.putIfAbsent(sb.toString(), new ArrayList<String>()) == null) {
-        if (_logger.isDebugEnabled())
-          _logger.debug(NLS.MESSAGES.getMessage("new.datasourcefactory.available", sb.toString(),
-                  bundle.getSymbolicName(), bundle.getVersion()));
-        try {
-          bundleStateChange();
-        } catch (InvalidPersistenceUnitException e) {
-          //Not much we can do here unfortunately
-          _logger.warn(NLS.MESSAGES.getMessage("new.datasourcefactory.error", sb.toString(),
-                  bundle.getSymbolicName(), bundle.getVersion()), e);
-        }
-      }
-      return sb;
-    }
-    else
-    {
-      Object jndiName = reference.getProperty("osgi.jndi.service.name");
-      if (jndiName != null) {
-        StringBuffer sb = new StringBuffer(String.valueOf(jndiName));
-        if (jndiServices.putIfAbsent(sb.toString(), new ArrayList<String>()) == null) {
-          if (_logger.isDebugEnabled())
-            _logger.debug(NLS.MESSAGES.getMessage("new.jndiservice.available", sb.toString(),
-                  bundle.getSymbolicName(), bundle.getVersion()));
-          try {
-            bundleStateChange();
-          } catch (InvalidPersistenceUnitException e) {
-            //Not much we can do here unfortunately
-            _logger.warn(NLS.MESSAGES.getMessage("new.jndiservice.error", sb.toString(),
-                  bundle.getSymbolicName(), bundle.getVersion()), e);
-          }
-        }
-        return sb;
-      }
-      else {
-        throw new IllegalStateException();
+    //Use String.valueOf to save us from nulls
+    StringBuffer sb = new StringBuffer(String.valueOf(reference.getProperty("osgi.jdbc.driver.class")));
+    
+    //Only notify of a potential change if a new data source class is available
+    if(dataSourceFactories.putIfAbsent(sb.toString(), new ArrayList<String>()) == null) {
+      if(_logger.isDebugEnabled())
+        _logger.debug(NLS.MESSAGES.getMessage("new.datasourcefactory.available", sb.toString(), 
+            bundle.getSymbolicName(), bundle.getVersion()));
+      try {
+        bundleStateChange();
+      } catch (InvalidPersistenceUnitException e) {
+        //Not much we can do here unfortunately
+        _logger.warn(NLS.MESSAGES.getMessage("new.datasourcefactory.error", sb.toString(), 
+          bundle.getSymbolicName(), bundle.getVersion()), e);
       }
     }
+    return sb;
   }
 
   @Override
   public void modifiedService(ServiceReference reference, Object service) {
-    if (reference.getProperty("osgi.jdbc.driver.class") != null) {
-      //Updates only matter if they change the value of the driver class
-      if(!!!service.toString().equals(reference.getProperty("osgi.jdbc.driver.class"))) {
-
-        if (_logger.isDebugEnabled())
-          _logger.debug(NLS.MESSAGES.getMessage("changed.datasourcefactory.available", service.toString(),
-                  reference.getProperty("osgi.jdbc.driver.class"), bundle.getSymbolicName(), bundle.getVersion()));
-
-        //Remove the service
-        removedService(reference, service);
-        //Clear the old driver class
-        StringBuffer sb = (StringBuffer) service;
-        sb.delete(0, sb.length());
-        //add the new one
-        sb.append(addingService(reference));
-      }
-    }
-    else if (reference.getProperty("osgi.jndi.service.name") != null) {
-      //Updates only matter if they change the value of the jndi name
-      if (!!!service.toString().equals(reference.getProperty("osgi.jndi.service.name"))) {
-
-        if (_logger.isDebugEnabled())
-          _logger.debug(NLS.MESSAGES.getMessage("changed.jndiservice.available", service.toString(),
-                  reference.getProperty("osgi.jndi.service.name"), bundle.getSymbolicName(), bundle.getVersion()));
-
-        //Remove the service
-        removedService(reference, service);
-        //Clear the old driver class
-        StringBuffer sb = (StringBuffer) service;
-        sb.delete(0, sb.length());
-        //add the new one
-        sb.append(addingService(reference));
-      }
+    //Updates only matter if they change the value of the driver class
+    if(!!!service.toString().equals(reference.getProperty("osgi.jdbc.driver.class"))) {
+      
+      if(_logger.isDebugEnabled())
+        _logger.debug(NLS.MESSAGES.getMessage("changed.datasourcefactory.available", service.toString(), 
+            reference.getProperty("osgi.jdbc.driver.class"), bundle.getSymbolicName(), bundle.getVersion()));
+      
+      //Remove the service
+      removedService(reference, service);
+      //Clear the old driver class
+      StringBuffer sb = (StringBuffer) service;
+      sb.delete(0, sb.length());
+      //add the new one
+      sb.append(addingService(reference));
     }
- }
+  }
 
   @Override
   public void removedService(ServiceReference reference, Object service) {
-    if (reference.getProperty("osgi.jdbc.driver.class") != null) {
-      if (_logger.isDebugEnabled())
-        _logger.debug(NLS.MESSAGES.getMessage("datasourcefactory.unavailable", service.toString(),
-                bundle.getSymbolicName(), bundle.getVersion()));
-
-      Object[] objects = dataSourceFactoriesTracker.getServices();
-
-      boolean gone = true;
-      if (objects != null) {
-        for (Object o : objects) {
-          if (service.equals(o)) {
-            gone = false;
-            break;
-          }
-        }
-      }
-      if (gone) {
-        Collection<String> units = dataSourceFactories.remove(service.toString());
-        if (units != null) {
-          synchronized (this) {
-            if (_logger.isInfoEnabled())
-              _logger.info(NLS.MESSAGES.getMessage("in.use.datasourcefactory.unavailable", service.toString(),
-                      bundle.getSymbolicName(), bundle.getVersion(), units));
-            for (String unit : units) {
-              unregisterEntityManagerFactory(unit);
-            }
-          }
+    
+    if(_logger.isDebugEnabled())
+      _logger.debug(NLS.MESSAGES.getMessage("datasourcefactory.unavailable", service.toString(), 
+          bundle.getSymbolicName(), bundle.getVersion()));
+    
+    Object[] objects = tracker.getServices();
+
+    boolean gone = true;
+    if(objects != null) {
+      for(Object o : objects) {
+        if(service.equals(o)) {
+          gone = false;
+          break;
         }
       }
     }
-    else if (reference.getProperty("osgi.jndi.service.name") != null) {
-      if (_logger.isDebugEnabled())
-        _logger.debug(NLS.MESSAGES.getMessage("jndiservice.unavailable", service.toString(),
-                bundle.getSymbolicName(), bundle.getVersion()));
-
-      Object[] objects = jndiTracker.getServices();
-
-      boolean gone = true;
-      if (objects != null) {
-        for (Object o : objects) {
-          if (service.equals(o)) {
-            gone = false;
-            break;
-          }
-        }
-      }
-      if (gone) {
-        Collection<String> units = jndiServices.remove(service.toString());
-        if (units != null) {
-          synchronized (this) {
-            if (_logger.isInfoEnabled())
-              _logger.info(NLS.MESSAGES.getMessage("in.use.jndiservice.unavailable", service.toString(),
-                      bundle.getSymbolicName(), bundle.getVersion(), units));
-            for (String unit : units) {
-              unregisterEntityManagerFactory(unit);
-            }
+    if(gone) {
+      Collection<String> units = dataSourceFactories.remove(service.toString());
+      if(units != null) {
+        synchronized (this) {
+          if(_logger.isInfoEnabled())
+            _logger.info(NLS.MESSAGES.getMessage("in.use.datasourcefactory.unavailable", service.toString(), 
+                bundle.getSymbolicName(), bundle.getVersion(), units));
+          for(String unit : units) {
+            unregisterEntityManagerFactory(unit);
           }
         }
-      }
+      } 
     }
   }
-
 }