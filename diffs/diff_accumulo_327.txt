diff --git a/server/gc/src/main/java/org/apache/accumulo/gc/SimpleGarbageCollector.java b/server/gc/src/main/java/org/apache/accumulo/gc/SimpleGarbageCollector.java
index ceceb57f5c..2c894f8ffb 100644
--- a/server/gc/src/main/java/org/apache/accumulo/gc/SimpleGarbageCollector.java
+++ b/server/gc/src/main/java/org/apache/accumulo/gc/SimpleGarbageCollector.java
@@ -16,13 +16,13 @@
  */
 package org.apache.accumulo.gc;
 
-import static com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly;
-
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.net.UnknownHostException;
+import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
 import java.util.SortedMap;
@@ -36,7 +36,6 @@ import org.apache.accumulo.core.client.AccumuloSecurityException;
 import org.apache.accumulo.core.client.BatchWriter;
 import org.apache.accumulo.core.client.BatchWriterConfig;
 import org.apache.accumulo.core.client.Connector;
-import org.apache.accumulo.core.client.Instance;
 import org.apache.accumulo.core.client.IsolatedScanner;
 import org.apache.accumulo.core.client.MutationsRejectedException;
 import org.apache.accumulo.core.client.Scanner;
@@ -107,9 +106,11 @@ import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import com.beust.jcommander.Parameter;
+import com.google.common.base.Function;
 import com.google.common.collect.Iterators;
 import com.google.common.collect.Maps;
 import com.google.common.net.HostAndPort;
+import static com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly;
 import com.google.protobuf.InvalidProtocolBufferException;
 
 public class SimpleGarbageCollector extends AccumuloServerContext implements Iface {
@@ -142,10 +143,7 @@ public class SimpleGarbageCollector extends AccumuloServerContext implements Ifa
     SecurityUtil.serverLogin(SiteConfiguration.getInstance());
     final String app = "gc";
     Accumulo.setupLogging(app);
-    Instance instance = HdfsZooInstance.getInstance();
-    ServerConfigurationFactory conf = new ServerConfigurationFactory(instance);
-    log.info("Version " + Constants.VERSION);
-    log.info("Instance " + instance.getInstanceID());
+    ServerConfigurationFactory conf = new ServerConfigurationFactory(HdfsZooInstance.getInstance());
     final VolumeManager fs = VolumeManagerImpl.get();
     Accumulo.init(fs, conf, app);
     Opts opts = new Opts();
@@ -241,7 +239,7 @@ public class SimpleGarbageCollector extends AccumuloServerContext implements Ifa
     }
 
     @Override
-    public boolean getCandidates(String continuePoint, List<String> result) throws TableNotFoundException, AccumuloException, AccumuloSecurityException {
+    public List<String> getCandidates(String continuePoint) throws TableNotFoundException, AccumuloException, AccumuloSecurityException {
       // want to ensure GC makes progress... if the 1st N deletes are stable and we keep processing them,
       // then will never inspect deletes after N
       Range range = MetadataSchema.DeletesSection.getRange();
@@ -252,18 +250,19 @@ public class SimpleGarbageCollector extends AccumuloServerContext implements Ifa
 
       Scanner scanner = getConnector().createScanner(tableName, Authorizations.EMPTY);
       scanner.setRange(range);
-      result.clear();
+      List<String> result = new ArrayList<String>();
       // find candidates for deletion; chop off the prefix
       for (Entry<Key,Value> entry : scanner) {
         String cand = entry.getKey().getRow().toString().substring(MetadataSchema.DeletesSection.getRowPrefix().length());
         result.add(cand);
         if (almostOutOfMemory(Runtime.getRuntime())) {
           log.info("List of delete candidates has exceeded the memory threshold. Attempting to delete what has been gathered so far.");
-          return true;
+          break;
         }
       }
 
-      return false;
+      return result;
+
     }
 
     @Override
@@ -272,7 +271,12 @@ public class SimpleGarbageCollector extends AccumuloServerContext implements Ifa
 
       scanner.setRange(MetadataSchema.BlipSection.getRange());
 
-      return Iterators.transform(scanner.iterator(), entry -> entry.getKey().getRow().toString().substring(MetadataSchema.BlipSection.getRowPrefix().length()));
+      return Iterators.transform(scanner.iterator(), new Function<Entry<Key,Value>,String>() {
+        @Override
+        public String apply(Entry<Key,Value> entry) {
+          return entry.getKey().getRow().toString().substring(MetadataSchema.BlipSection.getRowPrefix().length());
+        }
+      });
     }
 
     @Override
@@ -283,7 +287,12 @@ public class SimpleGarbageCollector extends AccumuloServerContext implements Ifa
       TabletsSection.ServerColumnFamily.DIRECTORY_COLUMN.fetch(scanner);
       TabletIterator tabletIterator = new TabletIterator(scanner, MetadataSchema.TabletsSection.getRange(), false, true);
 
-      return Iterators.concat(Iterators.transform(tabletIterator, input -> input.entrySet().iterator()));
+      return Iterators.concat(Iterators.transform(tabletIterator, new Function<Map<Key,Value>,Iterator<Entry<Key,Value>>>() {
+        @Override
+        public Iterator<Entry<Key,Value>> apply(Map<Key,Value> input) {
+          return input.entrySet().iterator();
+        }
+      }));
     }
 
     @Override
@@ -470,16 +479,21 @@ public class SimpleGarbageCollector extends AccumuloServerContext implements Ifa
       try {
         Scanner s = ReplicationTable.getScanner(conn);
         StatusSection.limit(s);
-        return Iterators.transform(s.iterator(), input -> {
-          String file = input.getKey().getRow().toString();
-          Status stat;
-          try {
-            stat = Status.parseFrom(input.getValue().get());
-          } catch (InvalidProtocolBufferException e) {
-            log.warn("Could not deserialize protobuf for: " + input.getKey());
-            stat = null;
+        return Iterators.transform(s.iterator(), new Function<Entry<Key,Value>,Entry<String,Status>>() {
+
+          @Override
+          public Entry<String,Status> apply(Entry<Key,Value> input) {
+            String file = input.getKey().getRow().toString();
+            Status stat;
+            try {
+              stat = Status.parseFrom(input.getValue().get());
+            } catch (InvalidProtocolBufferException e) {
+              log.warn("Could not deserialize protobuf for: " + input.getKey());
+              stat = null;
+            }
+            return Maps.immutableEntry(file, stat);
           }
-          return Maps.immutableEntry(file, stat);
+
         });
       } catch (ReplicationTableOfflineException e) {
         // No elements that we need to preclude
@@ -696,7 +710,7 @@ public class SimpleGarbageCollector extends AccumuloServerContext implements Ifa
   }
 
   private HostAndPort startStatsService() throws UnknownHostException {
-    Iface rpcProxy = RpcWrapper.service(this, new Processor<Iface>(this));
+    Iface rpcProxy = RpcWrapper.service(this);
     final Processor<Iface> processor;
     if (ThriftServerType.SASL == getThriftServerType()) {
       Iface tcProxy = TCredentialsUpdatingWrapper.service(rpcProxy, getClass(), getConfiguration());