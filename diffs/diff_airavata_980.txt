diff --git a/modules/gfac-core/src/main/java/org/apache/airavata/gfac/handler/GridFTPOutputHandler.java b/modules/gfac-core/src/main/java/org/apache/airavata/gfac/handler/GridFTPOutputHandler.java
index e5c194fe7..9ed7c5458 100644
--- a/modules/gfac-core/src/main/java/org/apache/airavata/gfac/handler/GridFTPOutputHandler.java
+++ b/modules/gfac-core/src/main/java/org/apache/airavata/gfac/handler/GridFTPOutputHandler.java
@@ -20,6 +20,23 @@
 */
 package org.apache.airavata.gfac.handler;
 
+import org.apache.airavata.commons.gfac.type.ActualParameter;
+import org.apache.airavata.commons.gfac.type.MappingFactory;
+import org.apache.airavata.gfac.ToolsException;
+import org.apache.airavata.gfac.context.GSISecurityContext;
+import org.apache.airavata.gfac.context.JobExecutionContext;
+import org.apache.airavata.gfac.context.MessageContext;
+import org.apache.airavata.gfac.external.GridFtp;
+import org.apache.airavata.gfac.provider.GFacProviderException;
+import org.apache.airavata.gfac.utils.GFacUtils;
+import org.apache.airavata.gfac.utils.GramJobSubmissionListener;
+import org.apache.airavata.gfac.utils.OutputUtils;
+import org.apache.airavata.schemas.gfac.*;
+import org.ietf.jgss.GSSCredential;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileInputStream;
@@ -35,53 +52,30 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
-import org.apache.airavata.commons.gfac.type.ActualParameter;
-import org.apache.airavata.commons.gfac.type.ApplicationDescription;
-import org.apache.airavata.commons.gfac.type.MappingFactory;
-import org.apache.airavata.gfac.GFacException;
-import org.apache.airavata.gfac.ToolsException;
-import org.apache.airavata.gfac.context.JobExecutionContext;
-import org.apache.airavata.gfac.context.MessageContext;
-import org.apache.airavata.gfac.context.security.GSISecurityContext;
-import org.apache.airavata.gfac.external.GridFtp;
-import org.apache.airavata.gfac.provider.GFacProviderException;
-import org.apache.airavata.gfac.utils.GFacUtils;
-import org.apache.airavata.gfac.utils.OutputUtils;
-import org.apache.airavata.schemas.gfac.ApplicationDeploymentDescriptionType;
-import org.apache.airavata.schemas.gfac.GlobusHostType;
-import org.apache.airavata.schemas.gfac.HostDescriptionType;
-import org.apache.airavata.schemas.gfac.StringArrayType;
-import org.apache.airavata.schemas.gfac.StringParameterType;
-import org.apache.airavata.schemas.gfac.URIArrayType;
-import org.apache.airavata.schemas.gfac.URIParameterType;
-import org.apache.airavata.schemas.gfac.UnicoreHostType;
-import org.apache.airavata.schemas.wec.ApplicationOutputDataHandlingDocument.ApplicationOutputDataHandling;
-import org.apache.airavata.schemas.wec.ContextHeaderDocument;
-import org.ietf.jgss.GSSCredential;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 
 public class GridFTPOutputHandler implements GFacHandler {
-    private static final Logger log = LoggerFactory.getLogger(GridFTPOutputHandler.class);
+    private static final Logger log = LoggerFactory.getLogger(GramJobSubmissionListener.class);
 
     public void invoke(JobExecutionContext jobExecutionContext) throws GFacHandlerException {
         log.info("Invoking GridFTPOutputHandler ...");
-
+        
        ApplicationDeploymentDescriptionType app = jobExecutionContext.getApplicationContext().getApplicationDeploymentDescription().getType();
-
+        
  	   HostDescriptionType hostType = jobExecutionContext.getApplicationContext().getHostDescription().getType();
  	   String[] gridFTPEndpointArray = null;
  	   String hostName = null;
- 
+ 	   String hostAddress = null;
+ 	   
        if(jobExecutionContext.getApplicationContext().getHostDescription().getType() instanceof GlobusHostType){
         	gridFTPEndpointArray = ((GlobusHostType) hostType).getGridFTPEndPointArray();
         	hostName = ((GlobusHostType) hostType).getHostName();
- 
+        	hostAddress = ((GlobusHostType) hostType).getHostAddress();
+        	
        }
        else if (jobExecutionContext.getApplicationContext().getHostDescription().getType() instanceof UnicoreHostType){
         	gridFTPEndpointArray = ((UnicoreHostType) hostType).getGridFTPEndPointArray();
         	hostName = ((UnicoreHostType) hostType).getHostName();
+        	hostAddress = ((UnicoreHostType) hostType).getHostAddress();
        }
        else {
         	//TODO
@@ -91,8 +85,14 @@ public class GridFTPOutputHandler implements GFacHandler {
        File localStdErrFile = null;
        Map<String, ActualParameter> stringMap = new HashMap<String, ActualParameter>();
        try {
-    	    GSSCredential gssCred = ((GSISecurityContext)jobExecutionContext.getSecurityContext(GSISecurityContext.GSI_SECURITY_CONTEXT)).getGssCredentails();
-    	    String[] hostgridFTP = gridFTPEndpointArray;
+            if (jobExecutionContext.getSecurityContext() == null ||
+                    !(jobExecutionContext.getSecurityContext() instanceof GSISecurityContext))
+            {
+                GSISecurityContext gssContext = new GSISecurityContext(jobExecutionContext.getGFacConfiguration());
+                jobExecutionContext.setSecurityContext(gssContext);
+            }
+            GSSCredential gssCred = ((GSISecurityContext)jobExecutionContext.getSecurityContext()).getGssCredentails();
+            String[] hostgridFTP = gridFTPEndpointArray;
             if (hostgridFTP == null || hostgridFTP.length == 0) {
                 hostgridFTP = new String[]{hostName};
             }
@@ -117,27 +117,28 @@ public class GridFTPOutputHandler implements GFacHandler {
                     File localStdOutFile = File.createTempFile(timeStampedServiceName, "stdout");
                     localStdErrFile = File.createTempFile(timeStampedServiceName, "stderr");
 
-
+                    
+                    
+                    
+                    // Shahbaz Comment: in principle when job is failed the execution chain must be stopped
+                    // there
+                    
+                    
                     String stdout = null;
                     String stderr = null;
 
-                    // TODO: what if job is failed
+                    // TODO: what if job is failed 
                     // and this handler is not able to find std* files?
                     try {
                      stdout = ftp.readRemoteFile(stdoutURI, gssCred, localStdOutFile);
                      stderr = ftp.readRemoteFile(stderrURI, gssCred, localStdErrFile);
-                     //TODO: do we also need to set them as output parameters for another job
-                     ApplicationDescription application = jobExecutionContext.getApplicationContext().getApplicationDeploymentDescription();
-                     ApplicationDeploymentDescriptionType appDesc = application.getType();
-                     appDesc.setStandardOutput(stdout);
-                     appDesc.setStandardError(stderr);
-                     jobExecutionContext.getApplicationContext().setApplicationDeploymentDescription(application);
+                     //TODO: do we also need to set them as output parameters for another job  
                     }
                     catch(ToolsException e) {
                         log.error("Cannot download stdout/err files. One reason could be the job is not successfully finished:  "+e.getMessage());
                     }
-
-
+                    
+                    
                     Map<String, Object> output = jobExecutionContext.getOutMessageContext().getParameters();
                     Set<String> keys = output.keySet();
                     for (String paramName : keys) {
@@ -156,16 +157,7 @@ public class GridFTPOutputHandler implements GFacHandler {
 //                            stringMap = new HashMap<String, ActualParameter>();
                             stringMap.put(paramName, actualParameter);
                         } else if ("URI".equals(actualParameter.getType().getType().toString())) {
-                        	  URI outputURI = GFacUtils.createGsiftpURI(endpoint, app.getOutputDataDirectory());
-                              List<String> outputList = ftp.listDir(outputURI, gssCred);
-                              String valueList = outputList.get(0);
-                              if(valueList.isEmpty()){
-                            	  stringMap = OutputUtils.fillOutputFromStdout(output, stdout, stderr);
-                              }else{
-                              ((URIParameterType) actualParameter.getType()).setValue(valueList);
-                              stringMap = new HashMap<String, ActualParameter>();
-                              stringMap.put(paramName, actualParameter);
-                              }
+                            stringMap.put(paramName, actualParameter);
                         }
                         else if ("String".equals(actualParameter.getType().getType().toString())) {
                         	String path = app.getOutputDataDirectory()+"/"+((StringParameterType) actualParameter.getType()).getValue();
@@ -176,24 +168,15 @@ public class GridFTPOutputHandler implements GFacHandler {
                         }
                         else {
                             // This is to handle exception during the output parsing.
-                            stringMap = OutputUtils.fillOutputFromStdout(output, stdout, stderr);
+                            stringMap = OutputUtils.fillOutputFromStdout(jobExecutionContext, stdout, stderr);
                         }
                     }
                     if (stringMap == null || stringMap.isEmpty()) {
                         throw new GFacHandlerException("Empty Output returned from the Application, Double check the application" +
                                 "and ApplicationDescriptor output Parameter Names");
                     }
-                    // If users has given an output Data path to download the output files this will download the file on machine where GFac is installed
-                    ContextHeaderDocument.ContextHeader currentContextHeader = jobExecutionContext.getContextHeader();
-                    if(currentContextHeader != null && currentContextHeader.getWorkflowOutputDataHandling() != null){
-                    	ApplicationOutputDataHandling[] handlings = currentContextHeader.getWorkflowOutputDataHandling().getApplicationOutputDataHandlingArray();
-                        if(handlings != null && handlings.length != 0){
-                            String outputDataDirectory = handlings[0].getOutputDataDirectory();
-                            if(outputDataDirectory != null && !"".equals(outputDataDirectory)){
-                                stageOutputFiles(jobExecutionContext,outputDataDirectory);
-                            }
-                        }
-                    }
+                    //todo check the workflow context header and run the stateOutputFiles method to stage the output files in to a user defined location
+//                    stageOutputFiles(jobExecutionContext, app.getOutputDataDirectory());
                 } catch (ToolsException e) {
                     log.error(e.getMessage());
                     throw new GFacHandlerException(e.getMessage(), jobExecutionContext, e, readLastLinesofStdOut(localStdErrFile.getPath(), 20));
@@ -209,7 +192,7 @@ public class GridFTPOutputHandler implements GFacHandler {
             log.error(e.getMessage());
             throw new GFacHandlerException(e.getMessage(), jobExecutionContext, e, readLastLinesofStdOut(localStdErrFile.getPath(), 20));
         }
-
+        
     }
 
     private static String readLastLinesofStdOut(String path, int count) {
@@ -251,14 +234,14 @@ public class GridFTPOutputHandler implements GFacHandler {
         return buffer.toString();
     }
 
-    private static void stageOutputFiles(JobExecutionContext jobExecutionContext, String outputFileStagingPath) throws GFacProviderException,GFacException {
-
-
+    private static void stageOutputFiles(JobExecutionContext jobExecutionContext, String outputFileStagingPath) throws GFacProviderException {
+    	
+    	
     	   HostDescriptionType hostType = jobExecutionContext.getApplicationContext().getHostDescription().getType();
     	   String[] gridFTPEndpointArray = null;
-
+    	   
            if(jobExecutionContext.getApplicationContext().getHostDescription().getType() instanceof GlobusHostType){
-           	gridFTPEndpointArray = ((GlobusHostType) hostType).getGridFTPEndPointArray();
+           	gridFTPEndpointArray = ((GlobusHostType) hostType).getGridFTPEndPointArray(); 
            }
            else if (jobExecutionContext.getApplicationContext().getHostDescription().getType() instanceof UnicoreHostType){
            	gridFTPEndpointArray = ((UnicoreHostType) hostType).getGridFTPEndPointArray();
@@ -266,8 +249,8 @@ public class GridFTPOutputHandler implements GFacHandler {
            else {
            	//TODO
            }
-
-
+       
+    	
         MessageContext outputNew = new MessageContext();
         MessageContext output = jobExecutionContext.getOutMessageContext();
         Map<String, Object> parameters = output.getParameters();
@@ -276,7 +259,14 @@ public class GridFTPOutputHandler implements GFacHandler {
                     .get(paramName);
 
             GridFtp ftp = new GridFtp();
-            GSSCredential gssCred = ((GSISecurityContext)jobExecutionContext.getSecurityContext(GSISecurityContext.GSI_SECURITY_CONTEXT)).getGssCredentails();
+
+            if (jobExecutionContext.getSecurityContext() == null ||
+                    !(jobExecutionContext.getSecurityContext() instanceof GSISecurityContext))
+            {
+                GSISecurityContext gssContext = new GSISecurityContext(jobExecutionContext.getGFacConfiguration());
+                jobExecutionContext.setSecurityContext(gssContext);
+            }
+            GSSCredential gssCred = ((GSISecurityContext)jobExecutionContext.getSecurityContext()).getGssCredentails();
             try {
                 if ("URI".equals(actualParameter.getType().getType().toString())) {
                     for (String endpoint : gridFTPEndpointArray) {
@@ -314,8 +304,5 @@ public class GridFTPOutputHandler implements GFacHandler {
                 gssCred, outputFile);
         return outputFileStagingPath + File.separator + fileName;
     }
-
-    public void initProperties(Map<String, String> properties) throws GFacHandlerException, GFacException {
-
-    }
+    
 }