diff --git a/src/server/src/main/java/org/apache/accumulo/server/master/tableOps/BulkImport.java b/src/server/src/main/java/org/apache/accumulo/server/master/tableOps/BulkImport.java
index 4aee2457bb..18a9d8dd8c 100644
--- a/src/server/src/main/java/org/apache/accumulo/server/master/tableOps/BulkImport.java
+++ b/src/server/src/main/java/org/apache/accumulo/server/master/tableOps/BulkImport.java
@@ -110,16 +110,14 @@ public class BulkImport extends MasterRepo {
   
   @Override
   public long isReady(long tid, Master master) throws Exception {
-    if (!Utils.getReadLock(tableId, tid).tryLock())
-      return 100;
+    if (!Utils.getReadLock(tableId, tid).tryLock()) return 100;
     
     Instance instance = HdfsZooInstance.getInstance();
     Tables.clearCache(instance);
     if (Tables.getTableState(instance, tableId) == TableState.ONLINE) {
       long reserve1, reserve2;
       reserve1 = reserve2 = Utils.reserveHdfsDirectory(sourceDir, tid);
-      if (reserve1 == 0)
-        reserve2 = Utils.reserveHdfsDirectory(errorDir, tid);
+      if (reserve1 == 0) reserve2 = Utils.reserveHdfsDirectory(errorDir, tid);
       return reserve2;
     } else {
       throw new ThriftTableOperationException(tableId, null, TableOperation.BULK_IMPORT, TableOperationExceptionType.OFFLINE, null);
@@ -138,15 +136,12 @@ public class BulkImport extends MasterRepo {
     ;
     Path errorPath = new Path(errorDir);
     FileStatus errorStatus = fs.getFileStatus(errorPath);
-    if (errorStatus == null)
-      throw new ThriftTableOperationException(tableId, null, TableOperation.BULK_IMPORT, TableOperationExceptionType.BULK_BAD_ERROR_DIRECTORY, errorDir
-          + " does not exist");
-    if (!errorStatus.isDir())
-      throw new ThriftTableOperationException(tableId, null, TableOperation.BULK_IMPORT, TableOperationExceptionType.BULK_BAD_ERROR_DIRECTORY, errorDir
-          + " is not a directory");
-    if (fs.listStatus(errorPath).length != 0)
-      throw new ThriftTableOperationException(tableId, null, TableOperation.BULK_IMPORT, TableOperationExceptionType.BULK_BAD_ERROR_DIRECTORY, errorDir
-          + " is not empty");
+    if (errorStatus == null) throw new ThriftTableOperationException(tableId, null, TableOperation.BULK_IMPORT,
+        TableOperationExceptionType.BULK_BAD_ERROR_DIRECTORY, errorDir + " does not exist");
+    if (!errorStatus.isDir()) throw new ThriftTableOperationException(tableId, null, TableOperation.BULK_IMPORT,
+        TableOperationExceptionType.BULK_BAD_ERROR_DIRECTORY, errorDir + " is not a directory");
+    if (fs.listStatus(errorPath).length != 0) throw new ThriftTableOperationException(tableId, null, TableOperation.BULK_IMPORT,
+        TableOperationExceptionType.BULK_BAD_ERROR_DIRECTORY, errorDir + " is not empty");
     
     ZooArbitrator.start(Constants.BULK_ARBITRATOR_TYPE, tid);
     
@@ -177,9 +172,8 @@ public class BulkImport extends MasterRepo {
     while (true) {
       Path newBulkDir = new Path(directory, Constants.BULK_PREFIX + namer.getNextName());
       if (fs.exists(newBulkDir)) // sanity check
-        throw new IllegalStateException("Dir exist when it should not " + newBulkDir);
-      if (fs.mkdirs(newBulkDir))
-        return newBulkDir;
+      throw new IllegalStateException("Dir exist when it should not " + newBulkDir);
+      if (fs.mkdirs(newBulkDir)) return newBulkDir;
       log.warn("Failed to create " + newBulkDir + " for unknown reason");
       
       UtilWaitThread.sleep(3000);
@@ -278,14 +272,12 @@ class CleanUpBulkImport extends MasterRepo {
     Set<TServerInstance> running = master.onlineTabletServers();
     for (TServerInstance server : running) {
       try {
-        if (!master.getConnection(server).isActive(tid))
-          finished.add(server);
+        if (!master.getConnection(server).isActive(tid)) finished.add(server);
       } catch (TException ex) {
         log.info("Ignoring error trying to check on tid " + tid + " from server " + server + ": " + ex);
       }
     }
-    if (finished.containsAll(running))
-      return 0;
+    if (finished.containsAll(running)) return 0;
     return 1000;
   }
   
@@ -371,8 +363,7 @@ class LoadFiles extends MasterRepo {
   @Override
   public Repo<Master> call(final long tid, Master master) throws Exception {
     
-    FileSystem fs = TraceFileSystem.wrap(org.apache.accumulo.core.file.FileUtil.getFileSystem(CachedConfiguration.getInstance(),
-        ServerConfiguration.getSiteConfiguration()));
+    FileSystem fs = FileSystem.get(CachedConfiguration.getInstance());
     List<FileStatus> files = new ArrayList<FileStatus>();
     for (FileStatus entry : fs.listStatus(new Path(bulk))) {
       files.add(entry);
@@ -383,9 +374,8 @@ class LoadFiles extends MasterRepo {
     if (!fs.createNewFile(writable)) {
       // Maybe this is a re-try... clear the flag and try again
       fs.delete(writable, false);
-      if (!fs.createNewFile(writable))
-        throw new ThriftTableOperationException(tableId, null, TableOperation.BULK_IMPORT, TableOperationExceptionType.BULK_BAD_ERROR_DIRECTORY,
-            "Unable to write to " + this.errorDir);
+      if (!fs.createNewFile(writable)) throw new ThriftTableOperationException(tableId, null, TableOperation.BULK_IMPORT,
+          TableOperationExceptionType.BULK_BAD_ERROR_DIRECTORY, "Unable to write to " + this.errorDir);
     }
     fs.delete(writable, false);
     