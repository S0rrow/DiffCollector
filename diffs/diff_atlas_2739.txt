diff --git a/webapp/src/test/java/org/apache/atlas/web/resources/EntityJerseyResourceIT.java b/webapp/src/test/java/org/apache/atlas/web/resources/EntityJerseyResourceIT.java
index 91e2947e3..38c823a12 100755
--- a/webapp/src/test/java/org/apache/atlas/web/resources/EntityJerseyResourceIT.java
+++ b/webapp/src/test/java/org/apache/atlas/web/resources/EntityJerseyResourceIT.java
@@ -1,4 +1,4 @@
-/**
+    /**
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
@@ -18,29 +18,20 @@
 
 package org.apache.atlas.web.resources;
 
-import static org.testng.Assert.assertEquals;
-import static org.testng.Assert.assertNotNull;
-import static org.testng.Assert.fail;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.UUID;
-
-import javax.ws.rs.core.MultivaluedMap;
-import javax.ws.rs.core.Response;
-
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableSet;
+import com.google.gson.Gson;
+import com.google.gson.JsonSyntaxException;
+import com.google.inject.Inject;
+import com.sun.jersey.api.client.ClientResponse;
+import com.sun.jersey.api.client.WebResource;
 import org.apache.atlas.AtlasClient;
 import org.apache.atlas.AtlasServiceException;
 import org.apache.atlas.EntityAuditEvent;
-import org.apache.atlas.model.instance.GuidMapping;
 import org.apache.atlas.notification.NotificationConsumer;
 import org.apache.atlas.notification.NotificationInterface;
 import org.apache.atlas.notification.NotificationModule;
 import org.apache.atlas.notification.entity.EntityNotification;
-import org.apache.atlas.type.AtlasType;
 import org.apache.atlas.typesystem.IStruct;
 import org.apache.atlas.typesystem.Referenceable;
 import org.apache.atlas.typesystem.Struct;
@@ -58,8 +49,10 @@ import org.apache.atlas.typesystem.types.StructTypeDefinition;
 import org.apache.atlas.typesystem.types.TraitType;
 import org.apache.atlas.typesystem.types.utils.TypesUtil;
 import org.apache.atlas.utils.AuthenticationUtil;
+import org.apache.atlas.web.util.Servlets;
 import org.apache.commons.lang.RandomStringUtils;
 import org.codehaus.jettison.json.JSONArray;
+import org.codehaus.jettison.json.JSONException;
 import org.codehaus.jettison.json.JSONObject;
 import org.joda.time.DateTime;
 import org.slf4j.Logger;
@@ -70,13 +63,19 @@ import org.testng.annotations.DataProvider;
 import org.testng.annotations.Guice;
 import org.testng.annotations.Test;
 
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableSet;
-import com.google.gson.Gson;
-import com.google.gson.JsonSyntaxException;
-import com.google.inject.Inject;
-import com.sun.jersey.api.client.ClientResponse;
-import com.sun.jersey.core.util.MultivaluedMapImpl;
+import javax.ws.rs.HttpMethod;
+import javax.ws.rs.core.Response;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.UUID;
+
+import java.util.Collections;
+
+import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertNotNull;
+import static org.testng.Assert.fail;
 
 
 /**
@@ -89,7 +88,10 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
 
     private final String DATABASE_NAME = "db" + randomString();
     private final String TABLE_NAME = "table" + randomString();
+    private static final String ENTITIES = "api/atlas/entities";
     private static final String TRAITS = "traits";
+    private static final String TRAIT_DEFINITION = "traitDefinitions";
+
     private Referenceable tableInstance;
     private Id tableId;
     private Id dbId;
@@ -103,8 +105,8 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
     public void setUp() throws Exception {
         super.setUp();
 
-        createTypeDefinitionsV1();
-        Referenceable HiveDBInstance = createHiveDBInstanceBuiltIn(DATABASE_NAME);
+        createTypeDefinitions();
+        Referenceable HiveDBInstance = createHiveDBInstance(DATABASE_NAME);
         dbId = createInstance(HiveDBInstance);
 
         List<NotificationConsumer<EntityNotification>> consumers =
@@ -113,69 +115,9 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         notificationConsumer = consumers.iterator().next();
     }
 
-    @Test
-    public void testCreateNestedEntities() throws Exception {
-
-        Referenceable databaseInstance = new Referenceable(DATABASE_TYPE);
-        databaseInstance.set("name", "db1");
-        databaseInstance.set("description", "foo database");
-
-        int nTables = 5;
-        int colsPerTable=3;
-        List<Referenceable> tables = new ArrayList<>();
-        List<Referenceable> allColumns = new ArrayList<>();
-
-        for(int i = 0; i < nTables; i++) {
-            String tableName = "db1-table-" + i;
-
-            Referenceable tableInstance =
-                    new Referenceable(HIVE_TABLE_TYPE);
-            tableInstance.set("name", tableName);
-            tableInstance.set(AtlasClient.REFERENCEABLE_ATTRIBUTE_NAME, tableName);
-            tableInstance.set("db", databaseInstance);
-            tableInstance.set("description", tableName + " table");
-            tables.add(tableInstance);
-
-            List<Referenceable> columns = new ArrayList<>();
-            for(int j = 0; j < colsPerTable; j++) {
-                Referenceable columnInstance = new Referenceable(COLUMN_TYPE);
-                columnInstance.set("name", tableName + "-col-" + j);
-                columnInstance.set("dataType", "String");
-                columnInstance.set("comment", "column " + j + " for table " + i);
-                allColumns.add(columnInstance);
-                columns.add(columnInstance);
-            }
-            tableInstance.set("columns", columns);
-        }
-
-        //Create the tables.  The database and columns should be created automatically, since
-        //the tables reference them.
-        JSONArray entityArray = new JSONArray(tables.size());
-        for(int i = 0; i < tables.size(); i++) {
-            Referenceable table = tables.get(i);
-            entityArray.put(InstanceSerialization.toJson(table, true));
-        }
-        String json = entityArray.toString();
-
-        JSONObject response = atlasClientV1.callAPIWithBodyAndParams(AtlasClient.API.CREATE_ENTITY, json);
-
-        GuidMapping guidMapping = AtlasType.fromJson(response.toString(), GuidMapping.class);
-
-        Map<String,String> guidsCreated = guidMapping.getGuidAssignments();
-        assertEquals(guidsCreated.size(), nTables * colsPerTable + nTables + 1);
-        assertNotNull(guidsCreated.get(databaseInstance.getId()._getId()));
-        for(Referenceable r : allColumns) {
-            assertNotNull(guidsCreated.get(r.getId()._getId()));
-        }
-        for(Referenceable r : tables) {
-            assertNotNull(guidsCreated.get(r.getId()._getId()));
-        }
-    }
-
-
     @Test
     public void testSubmitEntity() throws Exception {
-        tableInstance = createHiveTableInstanceBuiltIn(DATABASE_NAME, TABLE_NAME, dbId);
+        tableInstance = createHiveTableInstance(DATABASE_NAME, TABLE_NAME, dbId);
         tableId = createInstance(tableInstance);
 
         final String guid = tableId._getId();
@@ -188,10 +130,10 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
 
     @Test
     public void testRequestUser() throws Exception {
-        Referenceable entity = new Referenceable(DATABASE_TYPE_BUILTIN);
+        Referenceable entity = new Referenceable(DATABASE_TYPE);
         String dbName = randomString();
         entity.set("name", dbName);
-        entity.set(QUALIFIED_NAME, dbName);
+        entity.set("qualifiedName", dbName);
         entity.set("clusterName", randomString());
         entity.set("description", randomString());
         entity.set(AtlasClient.REFERENCEABLE_ATTRIBUTE_NAME, dbName);
@@ -210,7 +152,7 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         }
         String entityId = localClient.createEntity(entity).get(0);
 
-        List<EntityAuditEvent> events = atlasClientV1.getEntityAuditEvents(entityId, (short) 10);
+        List<EntityAuditEvent> events = serviceClient.getEntityAuditEvents(entityId, (short) 10);
         assertEquals(events.size(), 1);
         assertEquals(events.get(0).getUser(), user);
     }
@@ -218,10 +160,10 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
     @Test
     //API should accept single entity (or jsonarray of entities)
     public void testSubmitSingleEntity() throws Exception {
-        Referenceable databaseInstance = new Referenceable(DATABASE_TYPE_BUILTIN);
+        Referenceable databaseInstance = new Referenceable(DATABASE_TYPE);
         String dbName = randomString();
         databaseInstance.set("name", dbName);
-        databaseInstance.set(QUALIFIED_NAME, dbName);
+        databaseInstance.set("qualifiedName", dbName);
         databaseInstance.set("clusterName", randomString());
         databaseInstance.set("description", randomString());
         databaseInstance.set(AtlasClient.REFERENCEABLE_ATTRIBUTE_NAME, dbName);
@@ -230,9 +172,16 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         databaseInstance.set("parameters", Collections.EMPTY_MAP);
         databaseInstance.set("location", "/tmp");
 
-        JSONObject response = atlasClientV1
-                .callAPIWithBody(AtlasClient.API.CREATE_ENTITY, InstanceSerialization.toJson(databaseInstance, true));
-        assertNotNull(response);
+        ClientResponse clientResponse =
+                service.path(ENTITIES).accept(Servlets.JSON_MEDIA_TYPE).type(Servlets.JSON_MEDIA_TYPE)
+                        .method(HttpMethod.POST, ClientResponse.class,
+                                InstanceSerialization.toJson(databaseInstance, true));
+        Assert.assertEquals(clientResponse.getStatus(), Response.Status.CREATED.getStatusCode());
+
+        String responseAsString = clientResponse.getEntity(String.class);
+        Assert.assertNotNull(responseAsString);
+
+        JSONObject response = new JSONObject(responseAsString);
         Assert.assertNotNull(response.get(AtlasClient.REQUEST_ID));
 
         AtlasClient.EntityResult entityResult = AtlasClient.EntityResult.fromString(response.toString());
@@ -242,9 +191,9 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
 
     @Test
     public void testEntityDeduping() throws Exception {
-        final Referenceable db = new Referenceable(DATABASE_TYPE_BUILTIN);
+        final Referenceable db = new Referenceable(DATABASE_TYPE);
         final String dbName = "db" + randomString();
-        Referenceable HiveDBInstance = createHiveDBInstanceBuiltIn(dbName);
+        Referenceable HiveDBInstance = createHiveDBInstance(dbName);
         Id dbIdReference = createInstance(HiveDBInstance);
         final String dbId = dbIdReference._getId();
 
@@ -257,11 +206,11 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
             }
         });
 
-        JSONArray results = searchByDSL(String.format("%s where qualifiedName='%s'", DATABASE_TYPE_BUILTIN, dbName));
+        JSONArray results = searchByDSL(String.format("%s where qualifiedName='%s'", DATABASE_TYPE, dbName));
         assertEquals(results.length(), 1);
 
         //create entity again shouldn't create another instance with same unique attribute value
-        List<String> entityResults = atlasClientV1.createEntity(HiveDBInstance);
+        List<String> entityResults = serviceClient.createEntity(HiveDBInstance);
         assertEquals(entityResults.size(), 0);
         try {
             waitForNotification(notificationConsumer, MAX_WAIT_TIME, new NotificationPredicate() {
@@ -270,25 +219,26 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
                     return notification != null && notification.getEntity().getId()._getId().equals(dbId);
                 }
             });
+            fail("Expected time out exception");
         } catch (Exception e) {
             //expected timeout
         }
 
-        results = searchByDSL(String.format("%s where qualifiedName='%s'", DATABASE_TYPE_BUILTIN, dbName));
+        results = searchByDSL(String.format("%s where qualifiedName='%s'", DATABASE_TYPE, dbName));
         assertEquals(results.length(), 1);
 
         //Test the same across references
-        Referenceable table = new Referenceable(HIVE_TABLE_TYPE_BUILTIN);
+        Referenceable table = new Referenceable(HIVE_TABLE_TYPE);
         final String tableName = randomString();
-        Referenceable tableInstance = createHiveTableInstanceBuiltIn(DATABASE_NAME, tableName, dbIdReference);
-        atlasClientV1.createEntity(tableInstance);
-        results = searchByDSL(String.format("%s where qualifiedName='%s'", DATABASE_TYPE_BUILTIN, dbName));
+        Referenceable tableInstance = createHiveTableInstance(DATABASE_NAME, tableName, dbIdReference);
+        serviceClient.createEntity(tableInstance);
+        results = searchByDSL(String.format("%s where qualifiedName='%s'", DATABASE_TYPE, dbName));
         assertEquals(results.length(), 1);
     }
 
     private void assertEntityAudit(String dbid, EntityAuditEvent.EntityAuditAction auditAction)
             throws Exception {
-        List<EntityAuditEvent> events = atlasClientV1.getEntityAuditEvents(dbid, (short) 100);
+        List<EntityAuditEvent> events = serviceClient.getEntityAuditEvents(dbid, (short) 100);
         for (EntityAuditEvent event : events) {
             if (event.getAction() == auditAction) {
                 return;
@@ -303,12 +253,12 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         HierarchicalTypeDefinition<ClassType> typeDefinition = TypesUtil
                 .createClassTypeDef(randomString(), ImmutableSet.<String>of(),
                         TypesUtil.createUniqueRequiredAttrDef("name", DataTypes.STRING_TYPE));
-        atlasClientV1.createType(TypesSerialization.toJson(typeDefinition, false));
+        serviceClient.createType(TypesSerialization.toJson(typeDefinition, false));
 
         //create entity for the type
         Referenceable instance = new Referenceable(typeDefinition.typeName);
         instance.set("name", randomString());
-        String guid = atlasClientV1.createEntity(instance).get(0);
+        String guid = serviceClient.createEntity(instance).get(0);
 
         //update type - add attribute
         typeDefinition = TypesUtil.createClassTypeDef(typeDefinition.typeName, ImmutableSet.<String>of(),
@@ -317,10 +267,10 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         TypesDef typeDef = TypesUtil.getTypesDef(ImmutableList.<EnumTypeDefinition>of(),
                 ImmutableList.<StructTypeDefinition>of(), ImmutableList.<HierarchicalTypeDefinition<TraitType>>of(),
                 ImmutableList.of(typeDefinition));
-        atlasClientV1.updateType(typeDef);
+        serviceClient.updateType(typeDef);
 
         //Get definition after type update - new attributes should be null
-        Referenceable entity = atlasClientV1.getEntity(guid);
+        Referenceable entity = serviceClient.getEntity(guid);
         Assert.assertNull(entity.get("description"));
         Assert.assertEquals(entity.get("name"), instance.get("name"));
     }
@@ -332,7 +282,7 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
 
     @Test(dataProvider = "invalidAttrValues")
     public void testEntityInvalidValue(String value) throws Exception {
-        Referenceable databaseInstance = new Referenceable(DATABASE_TYPE_BUILTIN);
+        Referenceable databaseInstance = new Referenceable(DATABASE_TYPE);
         databaseInstance.set("name", randomString());
         databaseInstance.set("description", value);
 
@@ -346,27 +296,27 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
 
     @Test
     public void testGetEntityByAttribute() throws Exception {
-        Referenceable db1 = new Referenceable(DATABASE_TYPE_BUILTIN);
+        Referenceable db1 = new Referenceable(DATABASE_TYPE);
         String dbName = randomString();
-        db1.set(NAME, dbName);
-        db1.set(DESCRIPTION, randomString());
+        db1.set("name", dbName);
+        db1.set("description", randomString());
         db1.set(AtlasClient.REFERENCEABLE_ATTRIBUTE_NAME, dbName);
         db1.set("owner", "user1");
-        db1.set(CLUSTER_NAME, "cl1");
+        db1.set("clusterName", "cl1");
         db1.set("parameters", Collections.EMPTY_MAP);
         db1.set("location", "/tmp");
         createInstance(db1);
 
         //get entity by attribute
-        Referenceable referenceable = atlasClientV1.getEntity(DATABASE_TYPE_BUILTIN, QUALIFIED_NAME, dbName);
-        Assert.assertEquals(referenceable.getTypeName(), DATABASE_TYPE_BUILTIN);
-        Assert.assertEquals(referenceable.get(QUALIFIED_NAME), dbName);
+        Referenceable referenceable = serviceClient.getEntity(DATABASE_TYPE, "qualifiedName", dbName);
+        Assert.assertEquals(referenceable.getTypeName(), DATABASE_TYPE);
+        Assert.assertEquals(referenceable.get("qualifiedName"), dbName);
     }
 
     @Test
     public void testSubmitEntityWithBadDateFormat() throws Exception {
         try {
-            Referenceable tableInstance = createHiveTableInstanceBuiltIn("db" + randomString(), "table" + randomString(), dbId);
+            Referenceable tableInstance = createHiveTableInstance("db" + randomString(), "table" + randomString(), dbId);
             tableInstance.set("lastAccessTime", "2014-07-11");
             tableId = createInstance(tableInstance);
             Assert.fail("Was expecting an  exception here ");
@@ -383,8 +333,8 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         String description = "bar table - new desc";
         addProperty(guid, "description", description);
 
-        JSONObject response = atlasClientV1.callAPIWithBodyAndParams(AtlasClient.API.GET_ENTITY, null, guid);
-        Assert.assertNotNull(response);
+        String entityRef = getEntityDefinition(getEntityDefinition(guid));
+        Assert.assertNotNull(entityRef);
 
         tableInstance.set("description", description);
 
@@ -396,13 +346,11 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
             Assert.assertEquals(e.getStatus().getStatusCode(), Response.Status.BAD_REQUEST.getStatusCode());
         }
 
-        String currentTime = String.valueOf(new DateTime());
-
-        // updating date attribute as string not supported in v2
-        // addProperty(guid, "createTime", currentTime);
+        String currentTime = String.valueOf(new DateTime() );
+        addProperty(guid, "createTime", currentTime);
 
-        response = atlasClientV1.callAPIWithBodyAndParams(AtlasClient.API.GET_ENTITY, null, guid);
-        Assert.assertNotNull(response);
+        entityRef = getEntityDefinition(getEntityDefinition(guid));
+        Assert.assertNotNull(entityRef);
 
         tableInstance.set("createTime", currentTime);
     }
@@ -415,7 +363,7 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         Assert.fail();
     }
 
-    @Test(enabled = false)
+    @Test(dependsOnMethods = "testSubmitEntity")
     public void testAddNullPropertyValue() throws Exception {
         final String guid = tableId._getId();
         //add property
@@ -430,15 +378,15 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
     @Test(dependsOnMethods = "testSubmitEntity")
     public void testAddReferenceProperty() throws Exception {
         //Create new db instance
-        Referenceable databaseInstance = new Referenceable(DATABASE_TYPE_BUILTIN);
+        Referenceable databaseInstance = new Referenceable(DATABASE_TYPE);
         String dbName = randomString();
-        databaseInstance.set(NAME, dbName);
-        databaseInstance.set(QUALIFIED_NAME, dbName);
-        databaseInstance.set(CLUSTER_NAME, randomString());
+        databaseInstance.set("name", dbName);
+        databaseInstance.set("qualifiedName", dbName);
+        databaseInstance.set("clusterName", randomString());
         databaseInstance.set("description", "new database");
         databaseInstance.set(AtlasClient.REFERENCEABLE_ATTRIBUTE_NAME, dbName);
         databaseInstance.set("owner", "user1");
-        databaseInstance.set(CLUSTER_NAME, "cl1");
+        databaseInstance.set("clusterName", "cl1");
         databaseInstance.set("parameters", Collections.EMPTY_MAP);
         databaseInstance.set("location", "/tmp");
 
@@ -453,48 +401,83 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
     @Test(dependsOnMethods = "testSubmitEntity")
     public void testGetEntityDefinition() throws Exception {
         final String guid = tableId._getId();
-        JSONObject response = atlasClientV1.callAPIWithBodyAndParams(AtlasClient.API.GET_ENTITY, null, guid);
+        ClientResponse clientResponse = getEntityDefinition(guid);
+        Assert.assertEquals(clientResponse.getStatus(), Response.Status.OK.getStatusCode());
 
-        Assert.assertNotNull(response);
+        String responseAsString = clientResponse.getEntity(String.class);
+        Assert.assertNotNull(responseAsString);
+
+        JSONObject response = new JSONObject(responseAsString);
         Assert.assertNotNull(response.get(AtlasClient.REQUEST_ID));
 
         final String definition = response.getString(AtlasClient.DEFINITION);
         Assert.assertNotNull(definition);
-        LOG.debug("tableInstanceAfterGet = {}", definition);
+        LOG.debug("tableInstanceAfterGet = " + definition);
         InstanceSerialization.fromJsonReferenceable(definition, true);
     }
 
     private void addProperty(String guid, String property, String value) throws AtlasServiceException {
-        AtlasClient.EntityResult entityResult = atlasClientV1.updateEntityAttribute(guid, property, value);
+        AtlasClient.EntityResult entityResult = serviceClient.updateEntityAttribute(guid, property, value);
         assertEquals(entityResult.getUpdateEntities().size(), 1);
         assertEquals(entityResult.getUpdateEntities().get(0), guid);
     }
 
-    @Test(expectedExceptions = AtlasServiceException.class)
+    private ClientResponse getEntityDefinition(String guid) {
+        WebResource resource = service.path(ENTITIES).path(guid);
+        return resource.accept(Servlets.JSON_MEDIA_TYPE).type(Servlets.JSON_MEDIA_TYPE)
+                .method(HttpMethod.GET, ClientResponse.class);
+    }
+
+    private String getEntityDefinition(ClientResponse clientResponse) throws Exception {
+        JSONObject response = getEntity(clientResponse);
+        final String definition = response.getString(AtlasClient.DEFINITION);
+        Assert.assertNotNull(definition);
+
+        return definition;
+    }
+
+    private JSONObject getEntity(ClientResponse clientResponse) throws JSONException {
+        Assert.assertEquals(clientResponse.getStatus(), Response.Status.OK.getStatusCode());
+        JSONObject response = new JSONObject(clientResponse.getEntity(String.class));
+        return response;
+    }
+
+    @Test
     public void testGetInvalidEntityDefinition() throws Exception {
+        WebResource resource = service.path(ENTITIES).path("blah");
 
-        JSONObject response = atlasClientV1.callAPIWithBodyAndParams(AtlasClient.API.GET_ENTITY, null, "blah");
+        ClientResponse clientResponse = resource.accept(Servlets.JSON_MEDIA_TYPE).type(Servlets.JSON_MEDIA_TYPE)
+                .method(HttpMethod.GET, ClientResponse.class);
+        Assert.assertEquals(clientResponse.getStatus(), Response.Status.NOT_FOUND.getStatusCode());
 
-        Assert.assertNotNull(response);
+        String responseAsString = clientResponse.getEntity(String.class);
+        Assert.assertNotNull(responseAsString);
 
+        JSONObject response = new JSONObject(responseAsString);
         Assert.assertNotNull(response.get(AtlasClient.ERROR));
+        Assert.assertNotNull(response.get(AtlasClient.STACKTRACE));
     }
 
     @Test(dependsOnMethods = "testSubmitEntity")
     public void testGetEntityList() throws Exception {
-        List<String> entities = atlasClientV1.listEntities(HIVE_TABLE_TYPE_BUILTIN);
+        List<String> entities = serviceClient.listEntities(HIVE_TABLE_TYPE);
         Assert.assertNotNull(entities);
         Assert.assertTrue(entities.contains(tableId._getId()));
     }
 
-    @Test(expectedExceptions = AtlasServiceException.class)
+    @Test
     public void testGetEntityListForBadEntityType() throws Exception {
-        MultivaluedMap<String, String> queryParams = new MultivaluedMapImpl();
-        queryParams.add("type", "blah");
+        ClientResponse clientResponse =
+                service.path(ENTITIES).queryParam("type", "blah").accept(Servlets.JSON_MEDIA_TYPE)
+                        .type(Servlets.JSON_MEDIA_TYPE).method(HttpMethod.GET, ClientResponse.class);
+        Assert.assertEquals(clientResponse.getStatus(), Response.Status.BAD_REQUEST.getStatusCode());
 
-        JSONObject response = atlasClientV1.callAPIWithQueryParams(AtlasClient.API.GET_ENTITY, queryParams);
-        assertNotNull(response);
+        String responseAsString = clientResponse.getEntity(String.class);
+        Assert.assertNotNull(responseAsString);
+
+        JSONObject response = new JSONObject(responseAsString);
         Assert.assertNotNull(response.get(AtlasClient.ERROR));
+        Assert.assertNotNull(response.get(AtlasClient.STACKTRACE));
     }
 
 
@@ -502,11 +485,15 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
     public void testGetEntityListForNoInstances() throws Exception {
         String typeName = addNewType();
 
-        MultivaluedMap<String, String> queryParams = new MultivaluedMapImpl();
-        queryParams.add("type", typeName);
+        ClientResponse clientResponse =
+                service.path(ENTITIES).queryParam("type", typeName).accept(Servlets.JSON_MEDIA_TYPE)
+                        .type(Servlets.JSON_MEDIA_TYPE).method(HttpMethod.GET, ClientResponse.class);
+        Assert.assertEquals(clientResponse.getStatus(), Response.Status.OK.getStatusCode());
+
+        String responseAsString = clientResponse.getEntity(String.class);
+        Assert.assertNotNull(responseAsString);
 
-        JSONObject response = atlasClientV1.callAPIWithQueryParams(AtlasClient.API.GET_ENTITY, queryParams);
-        assertNotNull(response);
+        JSONObject response = new JSONObject(responseAsString);
         Assert.assertNotNull(response.get(AtlasClient.REQUEST_ID));
 
         final JSONArray list = response.getJSONArray(AtlasClient.RESULTS);
@@ -528,9 +515,15 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
     @Test(dependsOnMethods = "testSubmitEntity")
     public void testGetTraitNames() throws Exception {
         final String guid = tableId._getId();
+        ClientResponse clientResponse =
+                service.path(ENTITIES).path(guid).path(TRAITS).accept(Servlets.JSON_MEDIA_TYPE)
+                        .type(Servlets.JSON_MEDIA_TYPE).method(HttpMethod.GET, ClientResponse.class);
+        Assert.assertEquals(clientResponse.getStatus(), Response.Status.OK.getStatusCode());
 
-        JSONObject response = atlasClientV1.callAPIWithBodyAndParams(AtlasClient.API.LIST_TRAITS, null, guid, TRAITS);
-        assertNotNull(response);
+        String responseAsString = clientResponse.getEntity(String.class);
+        Assert.assertNotNull(responseAsString);
+
+        JSONObject response = new JSONObject(responseAsString);
         Assert.assertNotNull(response.get(AtlasClient.REQUEST_ID));
 
         final JSONArray list = response.getJSONArray(AtlasClient.RESULTS);
@@ -543,16 +536,24 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         HierarchicalTypeDefinition<TraitType> piiTrait =
                 TypesUtil.createTraitTypeDef(traitName, ImmutableSet.<String>of());
         String traitDefinitionAsJSON = TypesSerialization$.MODULE$.toJson(piiTrait, true);
-        LOG.debug("traitDefinitionAsJSON = {}", traitDefinitionAsJSON);
+        LOG.debug("traitDefinitionAsJSON = " + traitDefinitionAsJSON);
         createType(traitDefinitionAsJSON);
 
         Struct traitInstance = new Struct(traitName);
         String traitInstanceAsJSON = InstanceSerialization.toJson(traitInstance, true);
-        LOG.debug("traitInstanceAsJSON = {}", traitInstanceAsJSON);
+        LOG.debug("traitInstanceAsJSON = " + traitInstanceAsJSON);
 
         final String guid = tableId._getId();
-        JSONObject response = atlasClientV1.callAPIWithBodyAndParams(AtlasClient.API.ADD_TRAITS, traitInstanceAsJSON, guid, TRAITS);
-        assertNotNull(response);
+        ClientResponse clientResponse =
+                service.path(ENTITIES).path(guid).path(TRAITS).accept(Servlets.JSON_MEDIA_TYPE)
+                        .type(Servlets.JSON_MEDIA_TYPE)
+                        .method(HttpMethod.POST, ClientResponse.class, traitInstanceAsJSON);
+        Assert.assertEquals(clientResponse.getStatus(), Response.Status.CREATED.getStatusCode());
+
+        String responseAsString = clientResponse.getEntity(String.class);
+        Assert.assertNotNull(responseAsString);
+
+        JSONObject response = new JSONObject(responseAsString);
         Assert.assertNotNull(response.get(AtlasClient.REQUEST_ID));
 
         assertEntityAudit(guid, EntityAuditEvent.EntityAuditAction.TAG_ADD);
@@ -564,38 +565,45 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         HierarchicalTypeDefinition<TraitType> piiTrait =
                 TypesUtil.createTraitTypeDef(traitName, ImmutableSet.<String>of());
         String traitDefinitionAsJSON = TypesSerialization$.MODULE$.toJson(piiTrait, true);
-        LOG.debug("traitDefinitionAsJSON = {}", traitDefinitionAsJSON);
+        LOG.debug("traitDefinitionAsJSON = " + traitDefinitionAsJSON);
         createType(traitDefinitionAsJSON);
 
         Struct traitInstance = new Struct(traitName);
         String traitInstanceAsJSON = InstanceSerialization.toJson(traitInstance, true);
-        LOG.debug("traitInstanceAsJSON = {}", traitInstanceAsJSON);
+        LOG.debug("traitInstanceAsJSON = " + traitInstanceAsJSON);
 
         final String guid = tableId._getId();
-        JSONObject response = atlasClientV1.callAPIWithBodyAndParams(AtlasClient.API.ADD_TRAITS, traitInstanceAsJSON, guid, TRAITS);
-        assertNotNull(response);
-        Struct traitDef = atlasClientV1.getTraitDefinition(guid, traitName);
+        ClientResponse clientResponse =
+                service.path(ENTITIES).path(guid).path(TRAITS).accept(Servlets.JSON_MEDIA_TYPE)
+                        .type(Servlets.JSON_MEDIA_TYPE)
+                        .method(HttpMethod.POST, ClientResponse.class, traitInstanceAsJSON);
+        Assert.assertEquals(clientResponse.getStatus(), Response.Status.CREATED.getStatusCode());
+
+        Struct traitDef = serviceClient.getTraitDefinition(guid, traitName);
         System.out.println(traitDef.toString());
         JSONObject responseAsJSON = new JSONObject(InstanceSerialization.toJson(traitDef, true));
         Assert.assertEquals(responseAsJSON.get("typeName"), traitName);
 
 
-        List<Struct> allTraitDefs = atlasClientV1.listTraitDefinitions(guid);
+        List<Struct> allTraitDefs = serviceClient.listTraitDefinitions(guid);
         System.out.println(allTraitDefs.toString());
         Assert.assertEquals(allTraitDefs.size(), 9);
     }
 
-    @Test(dependsOnMethods = "testAddTrait", expectedExceptions = AtlasServiceException.class)
+    @Test(dependsOnMethods = "testAddTrait")
     public void testAddExistingTrait() throws Exception {
         final String traitName = "PII_Trait" + randomString();
 
         Struct traitInstance = new Struct(traitName);
         String traitInstanceAsJSON = InstanceSerialization.toJson(traitInstance, true);
-        LOG.debug("traitInstanceAsJSON = {}", traitInstanceAsJSON);
+        LOG.debug("traitInstanceAsJSON = " + traitInstanceAsJSON);
 
         final String guid = tableId._getId();
-        JSONObject response = atlasClientV1.callAPIWithBodyAndParams(AtlasClient.API.ADD_TRAITS, traitInstanceAsJSON, guid, TRAITS);
-        assertNotNull(response);
+        ClientResponse clientResponse =
+                service.path(ENTITIES).path(guid).path(TRAITS).accept(Servlets.JSON_MEDIA_TYPE)
+                        .type(Servlets.JSON_MEDIA_TYPE)
+                        .method(HttpMethod.POST, ClientResponse.class, traitInstanceAsJSON);
+        Assert.assertEquals(clientResponse.getStatus(), Response.Status.NOT_FOUND.getStatusCode());
     }
 
     @Test(dependsOnMethods = "testGetTraitNames")
@@ -605,21 +613,33 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
                 .createTraitTypeDef(traitName, ImmutableSet.<String>of(),
                         TypesUtil.createRequiredAttrDef("type", DataTypes.STRING_TYPE));
         String traitDefinitionAsJSON = TypesSerialization$.MODULE$.toJson(piiTrait, true);
-        LOG.debug("traitDefinitionAsJSON = {}", traitDefinitionAsJSON);
+        LOG.debug("traitDefinitionAsJSON = " + traitDefinitionAsJSON);
         createType(traitDefinitionAsJSON);
 
         Struct traitInstance = new Struct(traitName);
         traitInstance.set("type", "SSN");
         String traitInstanceAsJSON = InstanceSerialization.toJson(traitInstance, true);
-        LOG.debug("traitInstanceAsJSON = {}", traitInstanceAsJSON);
+        LOG.debug("traitInstanceAsJSON = " + traitInstanceAsJSON);
 
         final String guid = tableId._getId();
-        JSONObject response = atlasClientV1.callAPIWithBodyAndParams(AtlasClient.API.ADD_TRAITS, traitInstanceAsJSON, guid, TRAITS);
-        assertNotNull(response);
+        ClientResponse clientResponse =
+                service.path(ENTITIES).path(guid).path(TRAITS).accept(Servlets.JSON_MEDIA_TYPE)
+                        .type(Servlets.JSON_MEDIA_TYPE)
+                        .method(HttpMethod.POST, ClientResponse.class, traitInstanceAsJSON);
+        Assert.assertEquals(clientResponse.getStatus(), Response.Status.CREATED.getStatusCode());
+
+        String responseAsString = clientResponse.getEntity(String.class);
+        Assert.assertNotNull(responseAsString);
+
+        JSONObject response = new JSONObject(responseAsString);
         Assert.assertNotNull(response.get(AtlasClient.REQUEST_ID));
 
         // verify the response
-        response = atlasClientV1.callAPIWithBodyAndParams(AtlasClient.API.GET_ENTITY, null, guid);
+        clientResponse = getEntityDefinition(guid);
+        Assert.assertEquals(clientResponse.getStatus(), Response.Status.OK.getStatusCode());
+        responseAsString = clientResponse.getEntity(String.class);
+        Assert.assertNotNull(responseAsString);
+        response = new JSONObject(responseAsString);
         Assert.assertNotNull(response.get(AtlasClient.REQUEST_ID));
 
         final String definition = response.getString(AtlasClient.DEFINITION);
@@ -630,44 +650,65 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         Assert.assertEquals(type, "SSN");
     }
 
-    @Test(expectedExceptions = AtlasServiceException.class)
+    @Test
     public void testAddTraitWithNoRegistration() throws Exception {
         final String traitName = "PII_Trait" + randomString();
         HierarchicalTypeDefinition<TraitType> piiTrait =
                 TypesUtil.createTraitTypeDef(traitName, ImmutableSet.<String>of());
         String traitDefinitionAsJSON = TypesSerialization$.MODULE$.toJson(piiTrait, true);
-        LOG.debug("traitDefinitionAsJSON = {}", traitDefinitionAsJSON);
+        LOG.debug("traitDefinitionAsJSON = " + traitDefinitionAsJSON);
 
         Struct traitInstance = new Struct(traitName);
         String traitInstanceAsJSON = InstanceSerialization$.MODULE$.toJson(traitInstance, true);
-        LOG.debug("traitInstanceAsJSON = {}", traitInstanceAsJSON);
+        LOG.debug("traitInstanceAsJSON = " + traitInstanceAsJSON);
 
-        JSONObject response = atlasClientV1.callAPIWithBodyAndParams(AtlasClient.API.CREATE_ENTITY, traitInstanceAsJSON, "random", TRAITS);
+        ClientResponse clientResponse =
+                service.path(ENTITIES).path("random").path(TRAITS).accept(Servlets.JSON_MEDIA_TYPE)
+                        .type(Servlets.JSON_MEDIA_TYPE)
+                        .method(HttpMethod.POST, ClientResponse.class, traitInstanceAsJSON);
+        Assert.assertEquals(clientResponse.getStatus(), Response.Status.NOT_FOUND.getStatusCode());
     }
 
     @Test(dependsOnMethods = "testAddTrait")
     public void testDeleteTrait() throws Exception {
         final String guid = tableId._getId();
 
-        JSONObject response = atlasClientV1.callAPIWithBodyAndParams(AtlasClient.API.DELETE_TRAITS, null, guid, TRAITS, traitName);
+        ClientResponse clientResponse = service.path(ENTITIES).path(guid).path(TRAITS).path(traitName)
+                .accept(Servlets.JSON_MEDIA_TYPE).type(Servlets.JSON_MEDIA_TYPE)
+                .method(HttpMethod.DELETE, ClientResponse.class);
+        Assert.assertEquals(clientResponse.getStatus(), Response.Status.OK.getStatusCode());
+
+        String responseAsString = clientResponse.getEntity(String.class);
+        Assert.assertNotNull(responseAsString);
+
+        JSONObject response = new JSONObject(responseAsString);
         Assert.assertNotNull(response.get(AtlasClient.REQUEST_ID));
         Assert.assertNotNull(response.get("traitName"));
         assertEntityAudit(guid, EntityAuditEvent.EntityAuditAction.TAG_DELETE);
     }
 
-    @Test(expectedExceptions = AtlasServiceException.class)
+    @Test
     public void testDeleteTraitNonExistent() throws Exception {
         final String traitName = "blah_trait";
-        JSONObject response = atlasClientV1.callAPIWithBodyAndParams(AtlasClient.API.DELETE_TRAITS, null, "random", TRAITS);
 
+        ClientResponse clientResponse = service.path(ENTITIES).path("random").path(TRAITS).path(traitName)
+                .accept(Servlets.JSON_MEDIA_TYPE).type(Servlets.JSON_MEDIA_TYPE)
+                .method(HttpMethod.DELETE, ClientResponse.class);
+        Assert.assertEquals(clientResponse.getStatus(), Response.Status.NOT_FOUND.getStatusCode());
+
+        String responseAsString = clientResponse.getEntity(String.class);
+        Assert.assertNotNull(responseAsString);
+
+        JSONObject response = new JSONObject(responseAsString);
         Assert.assertNotNull(response.get(AtlasClient.ERROR));
         Assert.assertEquals(response.getString(AtlasClient.ERROR),
                 "trait=" + traitName + " should be defined in type system before it can be deleted");
+        Assert.assertNotNull(response.get(AtlasClient.STACKTRACE));
     }
 
-    @Test(dependsOnMethods = "testSubmitEntity")
+    @Test(dependsOnMethods = "testSubmitEntity()")
     public void testDeleteExistentTraitNonExistentForEntity() throws Exception {
-
+    
         final String guid = tableId._getId();
         final String traitName = "PII_Trait" + randomString();
         HierarchicalTypeDefinition<TraitType> piiTrait = TypesUtil
@@ -675,25 +716,29 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
                         TypesUtil.createRequiredAttrDef("type", DataTypes.STRING_TYPE));
         String traitDefinitionAsJSON = TypesSerialization$.MODULE$.toJson(piiTrait, true);
         createType(traitDefinitionAsJSON);
+        
+        ClientResponse clientResponse = service.path(ENTITIES).path(guid).path(TRAITS).path(traitName)
+                .accept(Servlets.JSON_MEDIA_TYPE).type(Servlets.JSON_MEDIA_TYPE)
+                .method(HttpMethod.DELETE, ClientResponse.class);
+        
+        Assert.assertEquals(clientResponse.getStatus(), Response.Status.NOT_FOUND.getStatusCode());
 
-        try {
-            JSONObject response = atlasClientV1.callAPIWithBodyAndParams(AtlasClient.API.DELETE_TRAITS, null, guid, TRAITS, traitName);
-            fail("Call should've failed for deletion of invalid trait");
-        } catch (AtlasServiceException e) {
-            assertNotNull(e);
-            assertNotNull(e.getStatus());
-            assertEquals(e.getStatus(), ClientResponse.Status.NOT_FOUND);
-        }
-    }
+        String responseAsString = clientResponse.getEntity(String.class);
+        Assert.assertNotNull(responseAsString);
 
+        JSONObject response = new JSONObject(responseAsString);
+        Assert.assertNotNull(response.get(AtlasClient.ERROR));
+        Assert.assertNotNull(response.get(AtlasClient.STACKTRACE));
+     
+        
+    }
     private String random() {
         return RandomStringUtils.random(10);
     }
 
     @Test
     public void testUTF8() throws Exception {
-        //Type names cannot be arbitrary UTF8 characters. See org.apache.atlas.type.AtlasTypeUtil#validateType()
-        String classType = randomString();
+        String classType = random();
         String attrName = random();
         String attrValue = random();
 
@@ -709,60 +754,62 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         instance.set(attrName, attrValue);
         Id guid = createInstance(instance);
 
-        JSONObject response = atlasClientV1.callAPIWithBodyAndParams(AtlasClient.API.GET_ENTITY, null, guid._getId());
-        Referenceable getReferenceable = InstanceSerialization.fromJsonReferenceable(response.getString(AtlasClient.DEFINITION), true);
+        ClientResponse response = getEntityDefinition(guid._getId());
+        String definition = getEntityDefinition(response);
+        Referenceable getReferenceable = InstanceSerialization.fromJsonReferenceable(definition, true);
         Assert.assertEquals(getReferenceable.get(attrName), attrValue);
     }
 
-
     @Test(dependsOnMethods = "testSubmitEntity")
     public void testPartialUpdate() throws Exception {
         String colName = "col1"+randomString();
         final List<Referenceable> columns = new ArrayList<>();
         Map<String, Object> values = new HashMap<>();
-        values.put(NAME, colName);
+        values.put("name", colName);
         values.put("comment", "col1 comment");
-        values.put(QUALIFIED_NAME, "default.table.col1@"+colName);
+        values.put("qualifiedName", "default.table.col1@"+colName);
         values.put("comment", "col1 comment");
         values.put("type", "string");
         values.put("owner", "user1");
         values.put("position", 0);
         values.put("description", "col1");
-        values.put("table", tableId ); //table is a required reference, can't be null
+        values.put("table", null);
 
-        Referenceable ref = new Referenceable(BaseResourceIT.COLUMN_TYPE_BUILTIN, values);
+        Referenceable ref = new Referenceable(BaseResourceIT.COLUMN_TYPE, values);
         columns.add(ref);
-        Referenceable tableUpdated = new Referenceable(BaseResourceIT.HIVE_TABLE_TYPE_BUILTIN, new HashMap<String, Object>() {{
+        Referenceable tableUpdated = new Referenceable(BaseResourceIT.HIVE_TABLE_TYPE, new HashMap<String, Object>() {{
             put("columns", columns);
         }});
 
-        LOG.debug("Updating entity= {}", tableUpdated);
-        AtlasClient.EntityResult entityResult = atlasClientV1.updateEntity(tableId._getId(), tableUpdated);
-        assertEquals(entityResult.getUpdateEntities().size(), 2);
+        LOG.debug("Updating entity= " + tableUpdated);
+        AtlasClient.EntityResult entityResult = serviceClient.updateEntity(tableId._getId(), tableUpdated);
+        assertEquals(entityResult.getUpdateEntities().size(), 1);
         assertEquals(entityResult.getUpdateEntities().get(0), tableId._getId());
 
-        JSONObject response = atlasClientV1.callAPIWithBodyAndParams(AtlasClient.API.GET_ENTITY, null, tableId._getId());
-        Referenceable getReferenceable = InstanceSerialization.fromJsonReferenceable(response.getString(AtlasClient.DEFINITION), true);
+        ClientResponse response = getEntityDefinition(tableId._getId());
+        String definition = getEntityDefinition(response);
+        Referenceable getReferenceable = InstanceSerialization.fromJsonReferenceable(definition, true);
         List<Referenceable> refs = (List<Referenceable>) getReferenceable.get("columns");
 
         Assert.assertTrue(refs.get(0).equalsContents(columns.get(0)));
 
         //Update by unique attribute
         values.put("type", "int");
-        ref = new Referenceable(BaseResourceIT.COLUMN_TYPE_BUILTIN, values);
+        ref = new Referenceable(BaseResourceIT.COLUMN_TYPE, values);
         columns.set(0, ref);
-        tableUpdated = new Referenceable(BaseResourceIT.HIVE_TABLE_TYPE_BUILTIN, new HashMap<String, Object>() {{
+        tableUpdated = new Referenceable(BaseResourceIT.HIVE_TABLE_TYPE, new HashMap<String, Object>() {{
             put("columns", columns);
         }});
 
-        LOG.debug("Updating entity= {}", tableUpdated);
-        entityResult = atlasClientV1.updateEntity(BaseResourceIT.HIVE_TABLE_TYPE_BUILTIN, AtlasClient.REFERENCEABLE_ATTRIBUTE_NAME,
-                (String) tableInstance.get(QUALIFIED_NAME), tableUpdated);
+        LOG.debug("Updating entity= " + tableUpdated);
+        entityResult = serviceClient.updateEntity(BaseResourceIT.HIVE_TABLE_TYPE, AtlasClient.REFERENCEABLE_ATTRIBUTE_NAME,
+                (String) tableInstance.get("qualifiedName"), tableUpdated);
         assertEquals(entityResult.getUpdateEntities().size(), 2);
-        assertEquals(entityResult.getUpdateEntities().get(1), tableId._getId());
+        assertEquals(entityResult.getUpdateEntities().get(0), tableId._getId());
 
-        response = atlasClientV1.callAPIWithBodyAndParams(AtlasClient.API.GET_ENTITY, null, tableId._getId());
-        getReferenceable = InstanceSerialization.fromJsonReferenceable(response.getString(AtlasClient.DEFINITION), true);
+        response = getEntityDefinition(tableId._getId());
+        definition = getEntityDefinition(response);
+        getReferenceable = InstanceSerialization.fromJsonReferenceable(definition, true);
         refs = (List<Referenceable>) getReferenceable.get("columns");
 
         Assert.assertTrue(refs.get(0).getValuesMap().equals(values));
@@ -773,130 +820,134 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
     public void testCompleteUpdate() throws Exception {
         final List<Referenceable> columns = new ArrayList<>();
         Map<String, Object> values1 = new HashMap<>();
-        values1.put(NAME, "col3");
-        values1.put(QUALIFIED_NAME, "default.table.col3@cl1");
+        values1.put("name", "col3");
+        values1.put("qualifiedName", "default.table.col3@cl1");
         values1.put("comment", "col3 comment");
         values1.put("type", "string");
         values1.put("owner", "user1");
         values1.put("position", 0);
         values1.put("description", "col3");
-        values1.put("table", tableId);
+        values1.put("table", null);
 
 
         Map<String, Object> values2 = new HashMap<>();
-        values2.put(NAME, "col4");
-        values2.put(QUALIFIED_NAME, "default.table.col4@cl1");
+        values2.put("name", "col4");
+        values2.put("qualifiedName", "default.table.col4@cl1");
         values2.put("comment", "col4 comment");
         values2.put("type", "string");
         values2.put("owner", "user2");
         values2.put("position", 1);
         values2.put("description", "col4");
-        values2.put("table", tableId);
+        values2.put("table", null);
 
-        Referenceable ref1 = new Referenceable(BaseResourceIT.COLUMN_TYPE_BUILTIN, values1);
-        Referenceable ref2 = new Referenceable(BaseResourceIT.COLUMN_TYPE_BUILTIN, values2);
+        Referenceable ref1 = new Referenceable(BaseResourceIT.COLUMN_TYPE, values1);
+        Referenceable ref2 = new Referenceable(BaseResourceIT.COLUMN_TYPE, values2);
         columns.add(ref1);
         columns.add(ref2);
         tableInstance.set("columns", columns);
         String entityJson = InstanceSerialization.toJson(tableInstance, true);
         JSONArray entityArray = new JSONArray(1);
         entityArray.put(entityJson);
-        LOG.debug("Replacing entity= {}", tableInstance);
-
-        JSONObject response = atlasClientV1.callAPIWithBody(AtlasClient.API.UPDATE_ENTITY, entityArray);
+        LOG.debug("Replacing entity= " + tableInstance);
+        ClientResponse clientResponse = service.path(ENTITIES).
+            accept(Servlets.JSON_MEDIA_TYPE).type(Servlets.JSON_MEDIA_TYPE).
+            method(HttpMethod.PUT, ClientResponse.class, entityArray);
+        Assert.assertEquals(clientResponse.getStatus(), Response.Status.OK.getStatusCode());
 
         // ATLAS-586: verify response entity can be parsed by GSON.
+        String entity = clientResponse.getEntity(String.class);
         Gson gson = new Gson();
         try {
-            UpdateEntitiesResponse updateEntitiesResponse = gson.fromJson(response.toString(), UpdateEntitiesResponse.class);
+            UpdateEntitiesResponse updateEntitiesResponse = gson.fromJson(entity, UpdateEntitiesResponse.class);
         }
         catch (JsonSyntaxException e) {
-            Assert.fail("Response entity from not parse-able by GSON", e);
+            Assert.fail("Response entity from " + service.path(ENTITIES).getURI() + " not parseable by GSON", e);
         }
-
-        response = atlasClientV1.callAPIWithBodyAndParams(AtlasClient.API.GET_ENTITY, null, tableId._getId());
-        LOG.info("Response = {}", response.toString());
-        Referenceable getReferenceable = InstanceSerialization.fromJsonReferenceable(response.getString(AtlasClient.DEFINITION), true);
+        
+        clientResponse = getEntityDefinition(tableId._getId());
+        String definition = getEntityDefinition(clientResponse);
+        Referenceable getReferenceable = InstanceSerialization.fromJsonReferenceable(definition, true);
         List<Referenceable> refs = (List<Referenceable>) getReferenceable.get("columns");
         Assert.assertEquals(refs.size(), 2);
 
         Assert.assertTrue(refs.get(0).getValuesMap().equals(values1));
         Assert.assertTrue(refs.get(1).getValuesMap().equals(values2));
     }
-
+    
     private static class UpdateEntitiesResponse {
         String requestId;
         AtlasClient.EntityResult entities;
         AtlasEntity definition;
     }
-
+    
     private static class AtlasEntity {
         String typeName;
-        final Map<String, Object> values = new HashMap<>();
+        final Map<String, Object> values = new HashMap<String, Object>();
     }
-
+    
     @Test
     public void testDeleteEntitiesViaRestApi() throws Exception {
         // Create 2 database entities
-        Referenceable db1 = new Referenceable(DATABASE_TYPE_BUILTIN);
+        Referenceable db1 = new Referenceable(DATABASE_TYPE);
         String dbName = randomString();
-        db1.set(NAME, dbName);
-        db1.set(DESCRIPTION, randomString());
+        db1.set("name", dbName);
+        db1.set("description", randomString());
         db1.set(AtlasClient.REFERENCEABLE_ATTRIBUTE_NAME, dbName);
         db1.set("owner", "user1");
-        db1.set(CLUSTER_NAME, "cl1");
+        db1.set("clusterName", "cl1");
         db1.set("parameters", Collections.EMPTY_MAP);
         db1.set("location", "/tmp");
         Id db1Id = createInstance(db1);
 
-        Referenceable db2 = new Referenceable(DATABASE_TYPE_BUILTIN);
+        Referenceable db2 = new Referenceable(DATABASE_TYPE);
         String dbName2 = randomString();
-        db2.set(NAME, dbName2);
-        db2.set(QUALIFIED_NAME, dbName2);
-        db2.set(CLUSTER_NAME, randomString());
-        db2.set(DESCRIPTION, randomString());
+        db2.set("name", dbName2);
+        db2.set("qualifiedName", dbName2);
+        db2.set("clusterName", randomString());
+        db2.set("description", randomString());
         db2.set(AtlasClient.REFERENCEABLE_ATTRIBUTE_NAME, dbName2);
         db2.set("owner", "user2");
-        db2.set(CLUSTER_NAME, "cl1");
+        db2.set("clusterName", "cl1");
         db2.set("parameters", Collections.EMPTY_MAP);
         db2.set("location", "/tmp");
         Id db2Id = createInstance(db2);
-
+        
         // Delete the database entities
-        MultivaluedMap<String, String> queryParams = new MultivaluedMapImpl();
-        queryParams.add(AtlasClient.GUID.toLowerCase(), db1Id._getId());
-        queryParams.add(AtlasClient.GUID.toLowerCase(), db2Id._getId());
+        ClientResponse clientResponse = service.path(ENTITIES).
+            queryParam(AtlasClient.GUID.toLowerCase(), db1Id._getId()).
+            queryParam(AtlasClient.GUID.toLowerCase(), db2Id._getId()).
+            accept(Servlets.JSON_MEDIA_TYPE).type(Servlets.JSON_MEDIA_TYPE).method(HttpMethod.DELETE, ClientResponse.class);
 
-        JSONObject response = atlasClientV1.callAPIWithQueryParams(AtlasClient.API.DELETE_ENTITIES, queryParams);
+        JSONObject response = getEntity(clientResponse);
         List<String> deletedGuidsList = AtlasClient.EntityResult.fromString(response.toString()).getDeletedEntities();
         Assert.assertTrue(deletedGuidsList.contains(db1Id._getId()));
         Assert.assertTrue(deletedGuidsList.contains(db2Id._getId()));
 
         // Verify entities were deleted from the repository.
         for (String guid : deletedGuidsList) {
-            Referenceable entity = atlasClientV1.getEntity(guid);
+            Referenceable entity = serviceClient.getEntity(guid);
             assertEquals(entity.getId().getState(), Id.EntityState.DELETED);
         }
     }
-
+    
     @Test
     public void testDeleteEntitiesViaClientApi() throws Exception {
         // Create 2 database entities
-        Referenceable db1 = new Referenceable(DATABASE_TYPE_BUILTIN);
+        Referenceable db1 = new Referenceable(DATABASE_TYPE);
         String dbName = randomString();
         db1.set("name", dbName);
         db1.set("description", randomString());
         db1.set(AtlasClient.REFERENCEABLE_ATTRIBUTE_NAME, dbName);
         db1.set("owner", "user1");
-        db1.set(CLUSTER_NAME, "cl1");
+        db1.set("clusterName", "cl1");
         db1.set("parameters", Collections.EMPTY_MAP);
         db1.set("location", "/tmp");
         Id db1Id = createInstance(db1);
-        Referenceable db2 = new Referenceable(DATABASE_TYPE_BUILTIN);
+        Referenceable db2 = new Referenceable(DATABASE_TYPE);
         String dbName2 = randomString();
         db2.set("name", dbName2);
-        db2.set(QUALIFIED_NAME, dbName2);
-        db2.set(CLUSTER_NAME, randomString());
+        db2.set("qualifiedName", dbName2);
+        db2.set("clusterName", randomString());
         db2.set("description", randomString());
         db2.set(AtlasClient.REFERENCEABLE_ATTRIBUTE_NAME, dbName2);
         db2.set("owner", "user2");
@@ -904,18 +955,19 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
         db2.set("parameters", Collections.EMPTY_MAP);
         db2.set("location", "/tmp");
         Id db2Id = createInstance(db2);
-
+        
         // Delete the database entities
         List<String> deletedGuidsList =
-                atlasClientV1.deleteEntities(db1Id._getId(), db2Id._getId()).getDeletedEntities();
-        // Verify that deleteEntities() response has database entity guids
+                serviceClient.deleteEntities(db1Id._getId(), db2Id._getId()).getDeletedEntities();
+        
+        // Verify that deleteEntities() response has database entity guids 
         Assert.assertEquals(deletedGuidsList.size(), 2);
-        Assert.assertTrue(deletedGuidsList.contains(db1Id._getId()));
+        Assert.assertTrue(deletedGuidsList.contains(db1Id._getId()));   
         Assert.assertTrue(deletedGuidsList.contains(db2Id._getId()));
-
+        
         // Verify entities were deleted from the repository.
         for (String guid : deletedGuidsList) {
-            Referenceable entity = atlasClientV1.getEntity(guid);
+            Referenceable entity = serviceClient.getEntity(guid);
             assertEquals(entity.getId().getState(), Id.EntityState.DELETED);
         }
     }
@@ -923,21 +975,21 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
     @Test
     public void testDeleteEntityByUniqAttribute() throws Exception {
         // Create database entity
-        Referenceable db1 = new Referenceable(DATABASE_TYPE_BUILTIN);
+        Referenceable db1 = new Referenceable(DATABASE_TYPE);
         String dbName = randomString();
-        db1.set(NAME, dbName);
-        db1.set(QUALIFIED_NAME, dbName);
-        db1.set(CLUSTER_NAME, randomString());
-        db1.set(DESCRIPTION, randomString());
+        db1.set("name", dbName);
+        db1.set("qualifiedName", dbName);
+        db1.set("clusterName", randomString());
+        db1.set("description", randomString());
         db1.set(AtlasClient.REFERENCEABLE_ATTRIBUTE_NAME, dbName);
         db1.set("owner", "user1");
-        db1.set(CLUSTER_NAME, "cl1");
+        db1.set("clusterName", "cl1");
         db1.set("parameters", Collections.EMPTY_MAP);
         db1.set("location", "/tmp");
         Id db1Id = createInstance(db1);
 
         // Delete the database entity
-        List<String> deletedGuidsList = atlasClientV1.deleteEntity(DATABASE_TYPE_BUILTIN, QUALIFIED_NAME, dbName).getDeletedEntities();
+        List<String> deletedGuidsList = serviceClient.deleteEntity(DATABASE_TYPE, "qualifiedName", dbName).getDeletedEntities();
 
         // Verify that deleteEntities() response has database entity guids
         Assert.assertEquals(deletedGuidsList.size(), 1);
@@ -945,7 +997,7 @@ public class EntityJerseyResourceIT extends BaseResourceIT {
 
         // Verify entities were deleted from the repository.
         for (String guid : deletedGuidsList) {
-            Referenceable entity = atlasClientV1.getEntity(guid);
+            Referenceable entity = serviceClient.getEntity(guid);
             assertEquals(entity.getId().getState(), Id.EntityState.DELETED);
         }
     }