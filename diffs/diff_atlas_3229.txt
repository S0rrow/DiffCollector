diff --git a/repository/src/main/java/org/apache/atlas/repository/store/graph/v2/EntityGraphMapper.java b/repository/src/main/java/org/apache/atlas/repository/store/graph/v2/EntityGraphMapper.java
index d8ef32b32..66eededb6 100644
--- a/repository/src/main/java/org/apache/atlas/repository/store/graph/v2/EntityGraphMapper.java
+++ b/repository/src/main/java/org/apache/atlas/repository/store/graph/v2/EntityGraphMapper.java
@@ -18,12 +18,10 @@
 package org.apache.atlas.repository.store.graph.v2;
 
 
- import com.google.common.annotations.VisibleForTesting;
 import org.apache.atlas.AtlasConfiguration;
 import org.apache.atlas.AtlasErrorCode;
 import org.apache.atlas.GraphTransactionInterceptor;
 import org.apache.atlas.RequestContext;
-import org.apache.atlas.annotation.GraphTransaction;
 import org.apache.atlas.exception.AtlasBaseException;
 import org.apache.atlas.model.TimeBoundary;
 import org.apache.atlas.model.TypeCategory;
@@ -38,22 +36,17 @@ import org.apache.atlas.model.instance.EntityMutationResponse;
 import org.apache.atlas.model.instance.EntityMutations.EntityOperation;
 import org.apache.atlas.model.typedef.AtlasStructDef.AtlasAttributeDef;
 import org.apache.atlas.model.typedef.AtlasStructDef.AtlasAttributeDef.Cardinality;
-import org.apache.atlas.repository.Constants;
 import org.apache.atlas.repository.RepositoryException;
 import org.apache.atlas.repository.converters.AtlasInstanceConverter;
+import org.apache.atlas.repository.graph.FullTextMapperV2;
 import org.apache.atlas.repository.graph.GraphHelper;
-import org.apache.atlas.repository.graph.IFullTextMapper;
 import org.apache.atlas.repository.graphdb.AtlasEdge;
-import org.apache.atlas.repository.graphdb.AtlasEdgeDirection;
 import org.apache.atlas.repository.graphdb.AtlasGraph;
 import org.apache.atlas.repository.graphdb.AtlasVertex;
 import org.apache.atlas.repository.store.graph.AtlasRelationshipStore;
-import org.apache.atlas.repository.store.graph.EntityGraphDiscoveryContext;
 import org.apache.atlas.repository.store.graph.v1.DeleteHandlerDelegate;
- import org.apache.atlas.tasks.TaskManagement;
- import org.apache.atlas.type.AtlasArrayType;
+import org.apache.atlas.type.AtlasArrayType;
 import org.apache.atlas.type.AtlasBuiltInTypes;
-import org.apache.atlas.type.AtlasBusinessMetadataType.AtlasBusinessAttribute;
 import org.apache.atlas.type.AtlasClassificationType;
 import org.apache.atlas.type.AtlasEntityType;
 import org.apache.atlas.type.AtlasMapType;
@@ -66,7 +59,6 @@ import org.apache.atlas.type.AtlasTypeUtil;
 import org.apache.atlas.utils.AtlasEntityUtil;
 import org.apache.atlas.utils.AtlasJson;
 import org.apache.atlas.utils.AtlasPerfMetrics.MetricRecorder;
-import org.apache.atlas.utils.AtlasPerfTracer;
 import org.apache.commons.codec.digest.DigestUtils;
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.collections.MapUtils;
@@ -76,22 +68,9 @@ import org.slf4j.LoggerFactory;
 import org.springframework.stereotype.Component;
 
 import javax.inject.Inject;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Objects;
-import java.util.Set;
-import java.util.UUID;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
+import java.util.*;
 import java.util.stream.Collectors;
 
-import static org.apache.atlas.AtlasConfiguration.LABEL_MAX_LENGTH;
 import static org.apache.atlas.model.TypeCategory.CLASSIFICATION;
 import static org.apache.atlas.model.instance.AtlasEntity.Status.ACTIVE;
 import static org.apache.atlas.model.instance.AtlasEntity.Status.DELETED;
@@ -102,11 +81,10 @@ import static org.apache.atlas.model.instance.EntityMutations.EntityOperation.PA
 import static org.apache.atlas.model.instance.EntityMutations.EntityOperation.UPDATE;
 import static org.apache.atlas.model.typedef.AtlasStructDef.AtlasAttributeDef.Cardinality.SET;
 import static org.apache.atlas.repository.Constants.*;
+import static org.apache.atlas.repository.graph.GraphHelper.getCollectionElementsUsingRelationship;
 import static org.apache.atlas.repository.graph.GraphHelper.getClassificationEdge;
 import static org.apache.atlas.repository.graph.GraphHelper.getClassificationVertex;
-import static org.apache.atlas.repository.graph.GraphHelper.getCollectionElementsUsingRelationship;
-import static org.apache.atlas.repository.graph.GraphHelper.getDelimitedClassificationNames;
-import static org.apache.atlas.repository.graph.GraphHelper.getLabels;
+import static org.apache.atlas.repository.graph.GraphHelper.getDefaultRemovePropagations;
 import static org.apache.atlas.repository.graph.GraphHelper.getMapElementsProperty;
 import static org.apache.atlas.repository.graph.GraphHelper.getStatus;
 import static org.apache.atlas.repository.graph.GraphHelper.getTraitLabel;
@@ -120,112 +98,53 @@ import static org.apache.atlas.repository.graph.GraphHelper.string;
 import static org.apache.atlas.repository.graph.GraphHelper.updateModificationMetadata;
 import static org.apache.atlas.repository.store.graph.v2.AtlasGraphUtilsV2.getIdFromVertex;
 import static org.apache.atlas.repository.store.graph.v2.AtlasGraphUtilsV2.isReference;
-import static org.apache.atlas.repository.store.graph.v2.tasks.ClassificationPropagateTaskFactory.CLASSIFICATION_PROPAGATION_ADD;
-import static org.apache.atlas.repository.store.graph.v2.tasks.ClassificationPropagateTaskFactory.CLASSIFICATION_PROPAGATION_DELETE;
 import static org.apache.atlas.type.AtlasStructType.AtlasAttribute.AtlasRelationshipEdgeDirection.IN;
 import static org.apache.atlas.type.AtlasStructType.AtlasAttribute.AtlasRelationshipEdgeDirection.OUT;
 
 @Component
 public class EntityGraphMapper {
-    private static final Logger LOG      = LoggerFactory.getLogger(EntityGraphMapper.class);
-    private static final Logger PERF_LOG = AtlasPerfTracer.getPerfLogger("entityGraphMapper");
-
-    private static final String  SOFT_REF_FORMAT                   = "%s:%s";
-    private static final int     INDEXED_STR_SAFE_LEN              = AtlasConfiguration.GRAPHSTORE_INDEXED_STRING_SAFE_LENGTH.getInt();
-    private static final boolean WARN_ON_NO_RELATIONSHIP           = AtlasConfiguration.RELATIONSHIP_WARN_NO_RELATIONSHIPS.getBoolean();
-    private static final String  CUSTOM_ATTRIBUTE_KEY_SPECIAL_PREFIX = AtlasConfiguration.CUSTOM_ATTRIBUTE_KEY_SPECIAL_PREFIX.getString();
-
-    private static final String  CLASSIFICATION_NAME_DELIMITER     = "|";
-    private static final Pattern CUSTOM_ATTRIBUTE_KEY_REGEX        = Pattern.compile("^[a-zA-Z0-9_-]*$");
-    private static final Pattern LABEL_REGEX                       = Pattern.compile("^[a-zA-Z0-9_-]*$");
-    private static final int     CUSTOM_ATTRIBUTE_KEY_MAX_LENGTH   = AtlasConfiguration.CUSTOM_ATTRIBUTE_KEY_MAX_LENGTH.getInt();
-    private static final int     CUSTOM_ATTRIBUTE_VALUE_MAX_LENGTH = AtlasConfiguration.CUSTOM_ATTRIBUTE_VALUE_MAX_LENGTH.getInt();
+    private static final Logger LOG = LoggerFactory.getLogger(EntityGraphMapper.class);
 
-    private static final boolean ENTITY_CHANGE_NOTIFY_IGNORE_RELATIONSHIP_ATTRIBUTES = AtlasConfiguration.ENTITY_CHANGE_NOTIFY_IGNORE_RELATIONSHIP_ATTRIBUTES.getBoolean();
-    private static final boolean CLASSIFICATION_PROPAGATION_DEFAULT                  = AtlasConfiguration.CLASSIFICATION_PROPAGATION_DEFAULT.getBoolean();
-    private              boolean DEFERRED_ACTION_ENABLED                             = AtlasConfiguration.TASKS_USE_ENABLED.getBoolean();
+    private static final String SOFT_REF_FORMAT      = "%s:%s";
+    private static final int INDEXED_STR_SAFE_LEN = AtlasConfiguration.GRAPHSTORE_INDEXED_STRING_SAFE_LENGTH.getInt();
 
-    private final GraphHelper               graphHelper;
+    private final GraphHelper               graphHelper = GraphHelper.getInstance();
     private final AtlasGraph                graph;
     private final DeleteHandlerDelegate     deleteDelegate;
     private final AtlasTypeRegistry         typeRegistry;
     private final AtlasRelationshipStore    relationshipStore;
-    private final IAtlasEntityChangeNotifier entityChangeNotifier;
+    private final AtlasEntityChangeNotifier entityChangeNotifier;
     private final AtlasInstanceConverter    instanceConverter;
     private final EntityGraphRetriever      entityRetriever;
-    private final IFullTextMapper           fullTextMapperV2;
-    private final TaskManagement taskManagement;
+    private final FullTextMapperV2 fullTextMapperV2;
 
     @Inject
-    public EntityGraphMapper(DeleteHandlerDelegate deleteDelegate, AtlasTypeRegistry typeRegistry, AtlasGraph graph,
-                             AtlasRelationshipStore relationshipStore, IAtlasEntityChangeNotifier entityChangeNotifier,
-                             AtlasInstanceConverter instanceConverter, IFullTextMapper fullTextMapperV2,
-                             TaskManagement taskManagement) {
-        this.graphHelper          = new GraphHelper(graph);
+    public EntityGraphMapper(DeleteHandlerDelegate deleteDelegate, AtlasTypeRegistry typeRegistry, AtlasGraph atlasGraph,
+                             AtlasRelationshipStore relationshipStore, AtlasEntityChangeNotifier entityChangeNotifier,
+                             AtlasInstanceConverter instanceConverter, FullTextMapperV2 fullTextMapperV2) {
         this.deleteDelegate       = deleteDelegate;
         this.typeRegistry         = typeRegistry;
-        this.graph                = graph;
+        this.graph                = atlasGraph;
         this.relationshipStore    = relationshipStore;
         this.entityChangeNotifier = entityChangeNotifier;
         this.instanceConverter    = instanceConverter;
-        this.entityRetriever      = new EntityGraphRetriever(graph, typeRegistry);
+        this.entityRetriever      = new EntityGraphRetriever(typeRegistry);
         this.fullTextMapperV2     = fullTextMapperV2;
-        this.taskManagement       = taskManagement;
     }
 
-    @VisibleForTesting
-    public void setTasksUseFlag(boolean value) {
-        DEFERRED_ACTION_ENABLED = value;
-    }
-
-    public AtlasVertex createVertex(AtlasEntity entity) throws AtlasBaseException {
+    public AtlasVertex createVertex(AtlasEntity entity) {
         final String guid = UUID.randomUUID().toString();
         return createVertexWithGuid(entity, guid);
     }
 
-    public AtlasVertex createShellEntityVertex(AtlasObjectId objectId, EntityGraphDiscoveryContext context) throws AtlasBaseException {
+    public AtlasVertex createVertexWithGuid(AtlasEntity entity, String guid) {
         if (LOG.isDebugEnabled()) {
-            LOG.debug("==> createShellEntityVertex({})", objectId.getTypeName());
-        }
-
-        final String    guid       = UUID.randomUUID().toString();
-        AtlasEntityType entityType = typeRegistry.getEntityTypeByName(objectId.getTypeName());
-        AtlasVertex     ret        = createStructVertex(objectId);
-
-        for (String superTypeName : entityType.getAllSuperTypes()) {
-            AtlasGraphUtilsV2.addEncodedProperty(ret, SUPER_TYPES_PROPERTY_KEY, superTypeName);
-        }
-
-        AtlasGraphUtilsV2.setEncodedProperty(ret, GUID_PROPERTY_KEY, guid);
-        AtlasGraphUtilsV2.setEncodedProperty(ret, VERSION_PROPERTY_KEY, getEntityVersion(null));
-        AtlasGraphUtilsV2.setEncodedProperty(ret, IS_INCOMPLETE_PROPERTY_KEY, INCOMPLETE_ENTITY_VALUE);
-
-        // map unique attributes
-        Map<String, Object>   uniqueAttributes = objectId.getUniqueAttributes();
-        EntityMutationContext mutationContext  = new EntityMutationContext(context);
-
-        for (AtlasAttribute attribute : entityType.getUniqAttributes().values()) {
-            String attrName  = attribute.getName();
-
-            if (uniqueAttributes.containsKey(attrName)) {
-                Object attrValue = attribute.getAttributeType().getNormalizedValue(uniqueAttributes.get(attrName));
-
-                mapAttribute(attribute, attrValue, ret, CREATE, mutationContext);
-            }
-        }
-
-        GraphTransactionInterceptor.addToVertexCache(guid, ret);
-
-        return ret;
-    }
-
-    public AtlasVertex createVertexWithGuid(AtlasEntity entity, String guid) throws AtlasBaseException {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("==> createVertexWithGuid({})", entity.getTypeName());
+            LOG.debug("==> createVertex({})", entity.getTypeName());
         }
 
         AtlasEntityType entityType = typeRegistry.getEntityTypeByName(entity.getTypeName());
-        AtlasVertex     ret        = createStructVertex(entity);
+
+        AtlasVertex ret = createStructVertex(entity);
 
         for (String superTypeName : entityType.getAllSuperTypes()) {
             AtlasGraphUtilsV2.addEncodedProperty(ret, SUPER_TYPES_PROPERTY_KEY, superTypeName);
@@ -234,16 +153,12 @@ public class EntityGraphMapper {
         AtlasGraphUtilsV2.setEncodedProperty(ret, GUID_PROPERTY_KEY, guid);
         AtlasGraphUtilsV2.setEncodedProperty(ret, VERSION_PROPERTY_KEY, getEntityVersion(entity));
 
-        setCustomAttributes(ret, entity);
-
-        setLabels(ret, entity.getLabels());
-
         GraphTransactionInterceptor.addToVertexCache(guid, ret);
 
         return ret;
     }
 
-    public void updateSystemAttributes(AtlasVertex vertex, AtlasEntity entity) throws AtlasBaseException {
+    public void updateSystemAttributes(AtlasVertex vertex, AtlasEntity entity) {
         if (entity.getVersion() != null) {
             AtlasGraphUtilsV2.setEncodedProperty(vertex, VERSION_PROPERTY_KEY, entity.getVersion());
         }
@@ -275,21 +190,12 @@ public class EntityGraphMapper {
         if (entity.getProvenanceType() != null) {
             AtlasGraphUtilsV2.setEncodedProperty(vertex, PROVENANCE_TYPE_KEY, entity.getProvenanceType());
         }
-
-        if (entity.getCustomAttributes() != null) {
-            setCustomAttributes(vertex, entity);
-        }
-
-        if (entity.getLabels() != null) {
-            setLabels(vertex, entity.getLabels());
-        }
     }
 
-    public EntityMutationResponse mapAttributesAndClassifications(EntityMutationContext context, final boolean isPartialUpdate, final boolean replaceClassifications, boolean replaceBusinessAttributes) throws AtlasBaseException {
+    public EntityMutationResponse mapAttributesAndClassifications(EntityMutationContext context, final boolean isPartialUpdate, final boolean replaceClassifications) throws AtlasBaseException {
         MetricRecorder metric = RequestContext.get().startMetricRecord("mapAttributesAndClassifications");
 
-        EntityMutationResponse resp       = new EntityMutationResponse();
-        RequestContext         reqContext = RequestContext.get();
+        EntityMutationResponse resp = new EntityMutationResponse();
 
         Collection<AtlasEntity> createdEntities = context.getCreatedEntities();
         Collection<AtlasEntity> updatedEntities = context.getUpdatedEntities();
@@ -303,19 +209,12 @@ public class EntityGraphMapper {
                 mapRelationshipAttributes(createdEntity, entityType, vertex, CREATE, context);
 
                 mapAttributes(createdEntity, entityType, vertex, CREATE, context);
-                setCustomAttributes(vertex,createdEntity);
 
-                resp.addEntity(CREATE, constructHeader(createdEntity, vertex));
+                resp.addEntity(CREATE, constructHeader(createdEntity, entityType, vertex));
                 addClassifications(context, guid, createdEntity.getClassifications());
-
-                addOrUpdateBusinessAttributes(vertex, entityType, createdEntity.getBusinessAttributes());
-
-                reqContext.cache(createdEntity);
             }
         }
 
-        EntityOperation updateType = isPartialUpdate ? PARTIAL_UPDATE : UPDATE;
-
         if (CollectionUtils.isNotEmpty(updatedEntities)) {
             for (AtlasEntity updatedEntity : updatedEntities) {
                 String          guid       = updatedEntity.getGuid();
@@ -324,20 +223,18 @@ public class EntityGraphMapper {
 
                 mapRelationshipAttributes(updatedEntity, entityType, vertex, UPDATE, context);
 
-                mapAttributes(updatedEntity, entityType, vertex, updateType, context);
-                setCustomAttributes(vertex,updatedEntity);
+                mapAttributes(updatedEntity, entityType, vertex, UPDATE, context);
 
-                if (replaceClassifications) {
-                    deleteClassifications(guid);
-                    addClassifications(context, guid, updatedEntity.getClassifications());
+                if (isPartialUpdate) {
+                    resp.addEntity(PARTIAL_UPDATE, constructHeader(updatedEntity, entityType, vertex));
+                } else {
+                    resp.addEntity(UPDATE, constructHeader(updatedEntity, entityType, vertex));
                 }
 
-                if (replaceBusinessAttributes) {
-                    setBusinessAttributes(vertex, entityType, updatedEntity.getBusinessAttributes());
+                if ( replaceClassifications ) {
+                    deleteClassifications(guid);
+                    addClassifications(context, guid, updatedEntity.getClassifications());
                 }
-
-                resp.addEntity(updateType, constructHeader(updatedEntity, vertex));
-                reqContext.cache(updatedEntity);
             }
         }
 
@@ -347,267 +244,32 @@ public class EntityGraphMapper {
 
         RequestContext req = RequestContext.get();
 
-        if(!req.isPurgeRequested()) {
-            for (AtlasEntityHeader entity : req.getDeletedEntities()) {
-                resp.addEntity(DELETE, entity);
-            }
+        for (AtlasEntityHeader entity : req.getDeletedEntities()) {
+            resp.addEntity(DELETE, entity);
         }
 
         for (AtlasEntityHeader entity : req.getUpdatedEntities()) {
-            resp.addEntity(updateType, entity);
-        }
-
-        RequestContext.get().endMetricRecord(metric);
-
-        return resp;
-    }
-
-    public void setCustomAttributes(AtlasVertex vertex, AtlasEntity entity) {
-        String customAttributesString = getCustomAttributesString(entity);
-
-        if (customAttributesString != null) {
-            AtlasGraphUtilsV2.setEncodedProperty(vertex, CUSTOM_ATTRIBUTES_PROPERTY_KEY, customAttributesString);
-        }
-    }
-
-    public void setLabels(AtlasVertex vertex, Set<String> labels) throws AtlasBaseException {
-        final Set<String> currentLabels = getLabels(vertex);
-        final Set<String> addedLabels;
-        final Set<String> removedLabels;
-
-        if (CollectionUtils.isEmpty(currentLabels)) {
-            addedLabels   = labels;
-            removedLabels = null;
-        } else if (CollectionUtils.isEmpty(labels)) {
-            addedLabels   = null;
-            removedLabels = currentLabels;
-        } else {
-            addedLabels   = new HashSet<String>(CollectionUtils.subtract(labels, currentLabels));
-            removedLabels = new HashSet<String>(CollectionUtils.subtract(currentLabels, labels));
-        }
-
-        updateLabels(vertex, labels);
-
-        entityChangeNotifier.onLabelsUpdatedFromEntity(graphHelper.getGuid(vertex), addedLabels, removedLabels);
-    }
-
-    public void addLabels(AtlasVertex vertex, Set<String> labels) throws AtlasBaseException {
-        if (CollectionUtils.isNotEmpty(labels)) {
-            final Set<String> existingLabels = graphHelper.getLabels(vertex);
-            final Set<String> updatedLabels;
-
-            if (CollectionUtils.isEmpty(existingLabels)) {
-                updatedLabels = labels;
-            } else {
-                updatedLabels = new HashSet<>(existingLabels);
-                updatedLabels.addAll(labels);
-            }
-            if (!updatedLabels.equals(existingLabels)) {
-                updateLabels(vertex, updatedLabels);
-                updatedLabels.removeAll(existingLabels);
-                entityChangeNotifier.onLabelsUpdatedFromEntity(graphHelper.getGuid(vertex), updatedLabels, null);
-            }
-        }
-    }
-
-    public void removeLabels(AtlasVertex vertex, Set<String> labels) throws AtlasBaseException {
-        if (CollectionUtils.isNotEmpty(labels)) {
-            final Set<String> existingLabels = graphHelper.getLabels(vertex);
-            Set<String> updatedLabels;
-
-            if (CollectionUtils.isNotEmpty(existingLabels)) {
-                updatedLabels = new HashSet<>(existingLabels);
-                updatedLabels.removeAll(labels);
-
-                if (!updatedLabels.equals(existingLabels)) {
-                    updateLabels(vertex, updatedLabels);
-                    existingLabels.removeAll(updatedLabels);
-                    entityChangeNotifier.onLabelsUpdatedFromEntity(graphHelper.getGuid(vertex), null, existingLabels);
-                }
-            }
-        }
-    }
-
-    /*
-     * reset/overwrite business attributes of the entity with given values
-     */
-    public void setBusinessAttributes(AtlasVertex entityVertex, AtlasEntityType entityType, Map<String, Map<String, Object>> businessAttributes) throws AtlasBaseException {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("==> setBusinessAttributes(entityVertex={}, entityType={}, businessAttributes={}", entityVertex, entityType.getTypeName(), businessAttributes);
-        }
-
-        Map<String, Map<String, AtlasBusinessAttribute>> entityTypeBusinessAttributes = entityType.getBusinessAttributes();
-        Map<String, Map<String, Object>>                 updatedBusinessAttributes    = new HashMap<>();
-
-        for (Map.Entry<String, Map<String, AtlasBusinessAttribute>> entry : entityTypeBusinessAttributes.entrySet()) {
-            String                              bmName             = entry.getKey();
-            Map<String, AtlasBusinessAttribute> bmAttributes       = entry.getValue();
-            Map<String, Object>                 entityBmAttributes = MapUtils.isEmpty(businessAttributes) ? null : businessAttributes.get(bmName);
-
-            for (AtlasBusinessAttribute bmAttribute : bmAttributes.values()) {
-                String bmAttrName          = bmAttribute.getName();
-                Object bmAttrExistingValue = entityVertex.getProperty(bmAttribute.getVertexPropertyName(), Object.class);
-                Object bmAttrNewValue      = MapUtils.isEmpty(entityBmAttributes) ? null : entityBmAttributes.get(bmAttrName);
-
-                if (bmAttrExistingValue == null) {
-                    if (bmAttrNewValue != null) {
-                        if (LOG.isDebugEnabled()) {
-                            LOG.debug("setBusinessAttributes(): adding {}.{}={}", bmName, bmAttribute.getName(), bmAttrNewValue);
-                        }
-
-                        mapAttribute(bmAttribute, bmAttrNewValue, entityVertex, CREATE, new EntityMutationContext());
-
-                        addToUpdatedBusinessAttributes(updatedBusinessAttributes, bmAttribute, bmAttrNewValue);
-                    }
-                } else {
-                    if (bmAttrNewValue != null) {
-                        if (!Objects.equals(bmAttrExistingValue, bmAttrNewValue)) {
-                            if (LOG.isDebugEnabled()) {
-                                LOG.debug("setBusinessAttributes(): updating {}.{}={}", bmName, bmAttribute.getName(), bmAttrNewValue);
-                            }
-
-                            mapAttribute(bmAttribute, bmAttrNewValue, entityVertex, UPDATE, new EntityMutationContext());
-
-                            addToUpdatedBusinessAttributes(updatedBusinessAttributes, bmAttribute, bmAttrNewValue);
-                        }
-                    } else {
-                        if (LOG.isDebugEnabled()) {
-                            LOG.debug("setBusinessAttributes(): removing {}.{}", bmName, bmAttribute.getName());
-                        }
-
-                        entityVertex.removeProperty(bmAttribute.getVertexPropertyName());
-
-                        addToUpdatedBusinessAttributes(updatedBusinessAttributes, bmAttribute, bmAttrNewValue);
-                    }
-                }
-            }
-        }
-
-        if (MapUtils.isNotEmpty(updatedBusinessAttributes)) {
-            entityChangeNotifier.onBusinessAttributesUpdated(AtlasGraphUtilsV2.getIdFromVertex(entityVertex), updatedBusinessAttributes);
-        }
-
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("<== setBusinessAttributes(entityVertex={}, entityType={}, businessAttributes={}", entityVertex, entityType.getTypeName(), businessAttributes);
-        }
-    }
-
-    /*
-     * add or update the given business attributes on the entity
-     */
-    public void addOrUpdateBusinessAttributes(AtlasVertex entityVertex, AtlasEntityType entityType, Map<String, Map<String, Object>> businessAttributes) throws AtlasBaseException {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("==> addOrUpdateBusinessAttributes(entityVertex={}, entityType={}, businessAttributes={}", entityVertex, entityType.getTypeName(), businessAttributes);
-        }
-
-        Map<String, Map<String, AtlasBusinessAttribute>> entityTypeBusinessAttributes = entityType.getBusinessAttributes();
-        Map<String, Map<String, Object>>                 updatedBusinessAttributes    = new HashMap<>();
-
-        if (MapUtils.isNotEmpty(entityTypeBusinessAttributes) && MapUtils.isNotEmpty(businessAttributes)) {
-            for (Map.Entry<String, Map<String, AtlasBusinessAttribute>> entry : entityTypeBusinessAttributes.entrySet()) {
-                String                              bmName             = entry.getKey();
-                Map<String, AtlasBusinessAttribute> bmAttributes       = entry.getValue();
-                Map<String, Object>                 entityBmAttributes = businessAttributes.get(bmName);
-
-                if (MapUtils.isEmpty(entityBmAttributes)) {
-                    continue;
-                }
-
-                for (AtlasBusinessAttribute bmAttribute : bmAttributes.values()) {
-                    String bmAttrName = bmAttribute.getName();
-
-                    if (!entityBmAttributes.containsKey(bmAttrName)) {
-                        continue;
-                    }
-
-                    Object bmAttrValue   = entityBmAttributes.get(bmAttrName);
-                    Object existingValue = AtlasGraphUtilsV2.getEncodedProperty(entityVertex, bmAttribute.getVertexPropertyName(), Object.class);
-
-                    if (existingValue == null) {
-                        if (bmAttrValue != null) {
-                            mapAttribute(bmAttribute, bmAttrValue, entityVertex, CREATE, new EntityMutationContext());
-
-                            addToUpdatedBusinessAttributes(updatedBusinessAttributes, bmAttribute, bmAttrValue);
-                        }
-                    } else {
-                        if (!Objects.equals(existingValue, bmAttrValue)) {
-                            mapAttribute(bmAttribute, bmAttrValue, entityVertex, UPDATE, new EntityMutationContext());
-
-                            addToUpdatedBusinessAttributes(updatedBusinessAttributes, bmAttribute, bmAttrValue);
-                        }
-                    }
-                }
+            if (isPartialUpdate) {
+                resp.addEntity(PARTIAL_UPDATE, entity);
             }
-        }
-
-        if (MapUtils.isNotEmpty(updatedBusinessAttributes)) {
-            entityChangeNotifier.onBusinessAttributesUpdated(AtlasGraphUtilsV2.getIdFromVertex(entityVertex), updatedBusinessAttributes);
-        }
-
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("<== addOrUpdateBusinessAttributes(entityVertex={}, entityType={}, businessAttributes={}", entityVertex, entityType.getTypeName(), businessAttributes);
-        }
-    }
-
-    /*
-     * remove the given business attributes from the entity
-     */
-    public void removeBusinessAttributes(AtlasVertex entityVertex, AtlasEntityType entityType, Map<String, Map<String, Object>> businessAttributes) throws AtlasBaseException {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("==> removeBusinessAttributes(entityVertex={}, entityType={}, businessAttributes={}", entityVertex, entityType.getTypeName(), businessAttributes);
-        }
-
-        Map<String, Map<String, AtlasBusinessAttribute>> entityTypeBusinessAttributes = entityType.getBusinessAttributes();
-        Map<String, Map<String, Object>>                 updatedBusinessAttributes    = new HashMap<>();
-
-        if (MapUtils.isNotEmpty(entityTypeBusinessAttributes) && MapUtils.isNotEmpty(businessAttributes)) {
-            for (Map.Entry<String, Map<String, AtlasBusinessAttribute>> entry : entityTypeBusinessAttributes.entrySet()) {
-                String                              bmName       = entry.getKey();
-                Map<String, AtlasBusinessAttribute> bmAttributes = entry.getValue();
-
-                if (!businessAttributes.containsKey(bmName)) { // nothing to remove for this business-metadata
-                    continue;
-                }
-
-                Map<String, Object> entityBmAttributes = businessAttributes.get(bmName);
-
-                for (AtlasBusinessAttribute bmAttribute : bmAttributes.values()) {
-                    // if (entityBmAttributes is empty) remove all attributes in this business-metadata
-                    // else remove the attribute only if its given in entityBmAttributes
-                    if (MapUtils.isEmpty(entityBmAttributes) || entityBmAttributes.containsKey(bmAttribute.getName())) {
-                        entityVertex.removeProperty(bmAttribute.getVertexPropertyName());
-
-                        addToUpdatedBusinessAttributes(updatedBusinessAttributes, bmAttribute, null);
-                    }
-                }
+            else {
+                resp.addEntity(UPDATE, entity);
             }
         }
 
-        if (MapUtils.isNotEmpty(updatedBusinessAttributes)) {
-            entityChangeNotifier.onBusinessAttributesUpdated(AtlasGraphUtilsV2.getIdFromVertex(entityVertex), updatedBusinessAttributes);
-        }
+        RequestContext.get().endMetricRecord(metric);
 
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("<== removeBusinessAttributes(entityVertex={}, entityType={}, businessAttributes={}", entityVertex, entityType.getTypeName(), businessAttributes);
-        }
+        return resp;
     }
 
     private AtlasVertex createStructVertex(AtlasStruct struct) {
-        return createStructVertex(struct.getTypeName());
-    }
-
-    private AtlasVertex createStructVertex(AtlasObjectId objectId) {
-        return createStructVertex(objectId.getTypeName());
-    }
-
-    private AtlasVertex createStructVertex(String typeName) {
         if (LOG.isDebugEnabled()) {
-            LOG.debug("==> createStructVertex({})", typeName);
+            LOG.debug("==> createStructVertex({})", struct.getTypeName());
         }
 
         final AtlasVertex ret = graph.addVertex();
 
-        AtlasGraphUtilsV2.setEncodedProperty(ret, ENTITY_TYPE_PROPERTY_KEY, typeName);
+        AtlasGraphUtilsV2.setEncodedProperty(ret, ENTITY_TYPE_PROPERTY_KEY, struct.getTypeName());
         AtlasGraphUtilsV2.setEncodedProperty(ret, STATE_PROPERTY_KEY, AtlasEntity.Status.ACTIVE.name());
         AtlasGraphUtilsV2.setEncodedProperty(ret, TIMESTAMP_PROPERTY_KEY, RequestContext.get().getRequestTime());
         AtlasGraphUtilsV2.setEncodedProperty(ret, MODIFICATION_TIMESTAMP_PROPERTY_KEY, RequestContext.get().getRequestTime());
@@ -615,7 +277,7 @@ public class EntityGraphMapper {
         AtlasGraphUtilsV2.setEncodedProperty(ret, MODIFIED_BY_KEY, RequestContext.get().getUser());
 
         if (LOG.isDebugEnabled()) {
-            LOG.debug("<== createStructVertex({})", typeName);
+            LOG.debug("<== createStructVertex({})", struct.getTypeName());
         }
 
         return ret;
@@ -656,7 +318,7 @@ public class EntityGraphMapper {
                     mapAttribute(attribute, attrValue, vertex, op, context);
                 }
 
-            } else if (op.equals(UPDATE) || op.equals(PARTIAL_UPDATE)) {
+            } else if (op.equals(UPDATE)) {
                 for (String attrName : struct.getAttributes().keySet()) {
                     AtlasAttribute attribute = structType.getAttribute(attrName);
 
@@ -698,7 +360,7 @@ public class EntityGraphMapper {
                     mapAttribute(attribute, attrValue, vertex, op, context);
                 }
 
-            } else if (op.equals(UPDATE) || op.equals(PARTIAL_UPDATE)) {
+            } else if (op.equals(UPDATE)) {
                 // relationship attributes mapping
                 for (String attrName : entityType.getRelationshipAttributes().keySet()) {
                     if (entity.hasRelationshipAttribute(attrName)) {
@@ -722,10 +384,9 @@ public class EntityGraphMapper {
     }
 
     private void mapAttribute(AtlasAttribute attribute, Object attrValue, AtlasVertex vertex, EntityOperation op, EntityMutationContext context) throws AtlasBaseException {
-        boolean isDeletedEntity = context.isDeletedEntity(vertex);
-        AtlasType         attrType     = attribute.getAttributeType();
         if (attrValue == null) {
             AtlasAttributeDef attributeDef = attribute.getAttributeDef();
+            AtlasType         attrType     = attribute.getAttributeType();
 
             if (attrType.getTypeCategory() == TypeCategory.PRIMITIVE) {
                 if (attributeDef.getDefaultValue() != null) {
@@ -740,12 +401,9 @@ public class EntityGraphMapper {
             }
         }
 
-        if (attrType.getTypeCategory() == TypeCategory.PRIMITIVE || attrType.getTypeCategory() == TypeCategory.ENUM) {
-            mapPrimitiveValue(vertex, attribute, attrValue, isDeletedEntity);
-        } else {
-            AttributeMutationContext ctx = new AttributeMutationContext(op, vertex, attribute, attrValue);
-            mapToVertexByTypeCategory(ctx, context);
-        }
+        AttributeMutationContext ctx = new AttributeMutationContext(op, vertex, attribute, attrValue);
+
+        mapToVertexByTypeCategory(ctx, context);
     }
 
     private Object mapToVertexByTypeCategory(AttributeMutationContext ctx, EntityMutationContext context) throws AtlasBaseException {
@@ -873,8 +531,6 @@ public class EntityGraphMapper {
             }
         }
 
-        setAssignedGuid(ctx.getValue(), context);
-
         return ret;
     }
 
@@ -937,7 +593,7 @@ public class EntityGraphMapper {
         if (inverseUpdated) {
             RequestContext requestContext = RequestContext.get();
 
-            if (!requestContext.isDeletedEntity(graphHelper.getGuid(inverseVertex))) {
+            if (!requestContext.isDeletedEntity(GraphHelper.getGuid(inverseVertex))) {
                 updateModificationMetadata(inverseVertex);
 
                 requestContext.recordEntityUpdate(entityRetriever.toAtlasEntityHeader(inverseVertex));
@@ -991,7 +647,7 @@ public class EntityGraphMapper {
             return;
         }
 
-        String parentGuid = graphHelper.getGuid(inverseVertex);
+        String parentGuid = GraphHelper.getGuid(inverseVertex);
         if(StringUtils.isEmpty(parentGuid)) {
             return;
         }
@@ -1028,13 +684,9 @@ public class EntityGraphMapper {
     }
 
     private Object mapPrimitiveValue(AttributeMutationContext ctx, EntityMutationContext context) {
-        return mapPrimitiveValue(ctx.getReferringVertex(), ctx.getAttribute(), ctx.getValue(), context.isDeletedEntity(ctx.referringVertex));
-    }
+        boolean isIndexableStrAttr = ctx.getAttributeDef().getIsIndexable() && ctx.getAttrType() instanceof AtlasBuiltInTypes.AtlasStringType;
 
-    private Object mapPrimitiveValue(AtlasVertex vertex, AtlasAttribute attribute, Object valueFromEntity, boolean isDeletedEntity) {
-        boolean isIndexableStrAttr = attribute.getAttributeDef().getIsIndexable() && attribute.getAttributeType() instanceof AtlasBuiltInTypes.AtlasStringType;
-
-        Object ret = valueFromEntity;
+        Object ret = ctx.getValue();
 
         // Janus bug, when an indexed string attribute has a value longer than a certain length then the reverse indexed key generated by JanusGraph
         // exceeds the HBase row length's hard limit (Short.MAX). This trimming and hashing procedure is to circumvent that limitation
@@ -1059,26 +711,26 @@ public class EntityGraphMapper {
                 }
 
                 if (trimmedLength < value.length()) {
-                    LOG.warn("Length of indexed attribute {} is {} characters, longer than safe-limit {}; trimming to {} - attempt #{}", attribute.getQualifiedName(), value.length(), INDEXED_STR_SAFE_LEN, trimmedLength, requestContext.getAttemptCount());
+                    LOG.warn("Length of indexed attribute {} is {} characters, longer than safe-limit {}; trimming to {} - attempt #{}", ctx.getAttribute().getQualifiedName(), value.length(), INDEXED_STR_SAFE_LEN, trimmedLength, requestContext.getAttemptCount());
 
                     String checksumSuffix = ":" + DigestUtils.shaHex(value); // Storing SHA checksum in case verification is needed after retrieval
 
                     ret = value.substring(0, trimmedLength - checksumSuffix.length()) + checksumSuffix;
                 } else {
-                    LOG.warn("Length of indexed attribute {} is {} characters, longer than safe-limit {}", attribute.getQualifiedName(), value.length(), INDEXED_STR_SAFE_LEN);
+                    LOG.warn("Length of indexed attribute {} is {} characters, longer than safe-limit {}", ctx.getAttribute().getQualifiedName(), value.length(), INDEXED_STR_SAFE_LEN);
                 }
             }
         }
 
-        AtlasGraphUtilsV2.setEncodedProperty(vertex, attribute.getVertexPropertyName(), ret);
+        AtlasGraphUtilsV2.setEncodedProperty(ctx.getReferringVertex(), ctx.getVertexProperty(), ret);
 
-        String uniqPropName = attribute != null ? attribute.getVertexUniquePropertyName() : null;
+        String uniqPropName = ctx.getAttribute() != null ? ctx.getAttribute().getVertexUniquePropertyName() : null;
 
         if (uniqPropName != null) {
-            if (isDeletedEntity || AtlasGraphUtilsV2.getState(vertex) == DELETED) {
-                vertex.removeProperty(uniqPropName);
+            if (context.isDeletedEntity(ctx.getReferringVertex()) || AtlasGraphUtilsV2.getState(ctx.getReferringVertex()) == DELETED) {
+                ctx.getReferringVertex().removeProperty(uniqPropName);
             } else {
-                AtlasGraphUtilsV2.setEncodedProperty(vertex, uniqPropName, ret);
+                AtlasGraphUtilsV2.setEncodedProperty(ctx.getReferringVertex(), uniqPropName, ret);
             }
         }
 
@@ -1139,16 +791,10 @@ public class EntityGraphMapper {
         AtlasVertex entityVertex = context.getDiscoveryContext().getResolvedEntityVertex(guid);
 
         if (entityVertex == null) {
-            if (AtlasTypeUtil.isAssignedGuid(guid)) {
-                entityVertex = context.getVertex(guid);
-            }
-
-            if (entityVertex == null) {
-                AtlasObjectId objId = getObjectId(ctx.getValue());
+            AtlasObjectId objId = getObjectId(ctx.getValue());
 
-                if (objId != null) {
-                    entityVertex = context.getDiscoveryContext().getResolvedEntityVertex(objId);
-                }
+            if (objId != null) {
+                entityVertex = context.getDiscoveryContext().getResolvedEntityVertex(objId);
             }
         }
 
@@ -1180,21 +826,14 @@ public class EntityGraphMapper {
             LOG.debug("==> mapObjectIdValueUsingRelationship({})", ctx);
         }
 
-        String      guid            = getGuid(ctx.getValue());
-        AtlasVertex attributeVertex = context.getDiscoveryContext().getResolvedEntityVertex(guid);
+        AtlasVertex attributeVertex = context.getDiscoveryContext().getResolvedEntityVertex(getGuid(ctx.getValue()));
         AtlasVertex entityVertex    = ctx.getReferringVertex();
         AtlasEdge   ret;
 
         if (attributeVertex == null) {
-            if (AtlasTypeUtil.isAssignedGuid(guid)) {
-                attributeVertex = context.getVertex(guid);
-            }
+            AtlasObjectId objectId = getObjectId(ctx.getValue());
 
-            if (attributeVertex == null) {
-                AtlasObjectId objectId = getObjectId(ctx.getValue());
-
-                attributeVertex = (objectId != null) ? context.getDiscoveryContext().getResolvedEntityVertex(objectId) : null;
-            }
+            attributeVertex = (objectId != null) ? context.getDiscoveryContext().getResolvedEntityVertex(objectId) : null;
         }
 
         if (attributeVertex == null) {
@@ -1238,7 +877,7 @@ public class EntityGraphMapper {
 
                     ret = getOrCreateRelationship(fromVertex, toVertex, relationshipName, relationshipAttributes);
 
-                    boolean isCreated = graphHelper.getCreatedTime(ret) == RequestContext.get().getRequestTime();
+                    boolean isCreated = GraphHelper.getCreatedTime(ret) == RequestContext.get().getRequestTime();
 
                     if (isCreated) {
                         // if relationship did not exist before and new relationship was created
@@ -1257,9 +896,9 @@ public class EntityGraphMapper {
                 }
             } else {
                 // use legacy way to create/update edges
-                if (WARN_ON_NO_RELATIONSHIP || LOG.isDebugEnabled()) {
-                    LOG.warn("No RelationshipDef defined between {} and {} on attribute: {}. This can lead to severe performance degradation.",
-                             getTypeName(entityVertex), getTypeName(attributeVertex), attributeName);
+                if (LOG.isDebugEnabled()) {
+                    LOG.debug("No RelationshipDef defined between {} and {} on attribute: {}",  getTypeName(entityVertex),
+                               getTypeName(attributeVertex), attributeName);
                 }
 
                 ret = mapObjectIdValue(ctx, context);
@@ -1270,8 +909,6 @@ public class EntityGraphMapper {
             ret = mapObjectIdValue(ctx, context);
         }
 
-        setAssignedGuid(ctx.getValue(), context);
-
         if (LOG.isDebugEnabled()) {
             LOG.debug("<== mapObjectIdValueUsingRelationship({})", ctx);
         }
@@ -1292,22 +929,6 @@ public class EntityGraphMapper {
         boolean             isReference = isReference(mapType.getValueType());
         boolean             isSoftReference = ctx.getAttribute().getAttributeDef().isSoftReferenced();
 
-        if (PARTIAL_UPDATE.equals(ctx.getOp()) && attribute.getAttributeDef().isAppendOnPartialUpdate() && MapUtils.isNotEmpty(currentMap)) {
-            if (MapUtils.isEmpty(newVal)) {
-                newVal = new HashMap<>(currentMap);
-            } else {
-                Map<Object, Object> mergedVal = new HashMap<>(currentMap);
-
-                for (Map.Entry<Object, Object> entry : newVal.entrySet()) {
-                    String newKey = entry.getKey().toString();
-
-                    mergedVal.put(newKey, entry.getValue());
-                }
-
-                newVal = mergedVal;
-            }
-        }
-
         boolean isNewValNull = newVal == null;
 
         if (isNewValNull) {
@@ -1391,6 +1012,7 @@ public class EntityGraphMapper {
         Cardinality    cardinality         = attribute.getAttributeDef().getCardinality();
         List<Object>   newElementsCreated  = new ArrayList<>();
         List<Object>   currentElements;
+        boolean isNewElementsNull          = newElements == null;
 
         if (isReference && !isSoftReference) {
             currentElements = (List) getCollectionElementsUsingRelationship(ctx.getReferringVertex(), attribute);
@@ -1398,20 +1020,6 @@ public class EntityGraphMapper {
             currentElements = (List) getArrayElementsProperty(elementType, isSoftReference, ctx.getReferringVertex(), ctx.getVertexProperty());
         }
 
-        if (PARTIAL_UPDATE.equals(ctx.getOp()) && attribute.getAttributeDef().isAppendOnPartialUpdate() && CollectionUtils.isNotEmpty(currentElements)) {
-            if (CollectionUtils.isEmpty(newElements)) {
-                newElements = new ArrayList<>(currentElements);
-            } else {
-                List<Object> mergedVal = new ArrayList<>(currentElements);
-
-                mergedVal.addAll(newElements);
-
-                newElements = mergedVal;
-            }
-        }
-
-        boolean isNewElementsNull = newElements == null;
-
         if (isNewElementsNull) {
             newElements = new ArrayList();
         }
@@ -1488,17 +1096,6 @@ public class EntityGraphMapper {
         return (ret != null) ? ret : 0;
     }
 
-    private String getCustomAttributesString(AtlasEntity entity) {
-        String              ret              = null;
-        Map<String, String> customAttributes = entity.getCustomAttributes();
-
-        if (customAttributes != null) {
-            ret = AtlasType.toJson(customAttributes);
-        }
-
-        return ret;
-    }
-
     private AtlasStructType getStructType(String typeName) throws AtlasBaseException {
         AtlasType objType = typeRegistry.getType(typeName);
 
@@ -1584,59 +1181,6 @@ public class EntityGraphMapper {
         return null;
     }
 
-    private void setAssignedGuid(Object val, EntityMutationContext context) {
-        if (val != null) {
-            Map<String, String> guidAssignements = context.getGuidAssignments();
-
-            if (val instanceof AtlasObjectId) {
-                AtlasObjectId objId        = (AtlasObjectId) val;
-                String        guid         = objId.getGuid();
-                String        assignedGuid = null;
-
-                if (StringUtils.isNotEmpty(guid)) {
-                    if (!AtlasTypeUtil.isAssignedGuid(guid) && MapUtils.isNotEmpty(guidAssignements)) {
-                        assignedGuid = guidAssignements.get(guid);
-                    }
-                } else {
-                    AtlasVertex vertex = context.getDiscoveryContext().getResolvedEntityVertex(objId);
-
-                    if (vertex != null) {
-                        assignedGuid = graphHelper.getGuid(vertex);
-                    }
-                }
-
-                if (StringUtils.isNotEmpty(assignedGuid)) {
-                    RequestContext.get().recordEntityGuidUpdate(objId, guid);
-
-                    objId.setGuid(assignedGuid);
-                }
-            } else if (val instanceof Map) {
-                Map    mapObjId     = (Map) val;
-                Object guidVal      = mapObjId.get(AtlasObjectId.KEY_GUID);
-                String guid         = guidVal != null ? guidVal.toString() : null;
-                String assignedGuid = null;
-
-                if (StringUtils.isNotEmpty(guid) ) {
-                    if (!AtlasTypeUtil.isAssignedGuid(guid) && MapUtils.isNotEmpty(guidAssignements)) {
-                        assignedGuid = guidAssignements.get(guid);
-                    }
-                } else {
-                    AtlasVertex vertex = context.getDiscoveryContext().getResolvedEntityVertex(new AtlasObjectId(mapObjId));
-
-                    if (vertex != null) {
-                        assignedGuid = graphHelper.getGuid(vertex);
-                    }
-                }
-
-                if (StringUtils.isNotEmpty(assignedGuid)) {
-                    RequestContext.get().recordEntityGuidUpdate(mapObjId, guid);
-
-                    mapObjId.put(AtlasObjectId.KEY_GUID, assignedGuid);
-                }
-            }
-        }
-    }
-
     private static Map<String, Object> getRelationshipAttributes(Object val) throws AtlasBaseException {
         if (val instanceof AtlasRelatedObjectId) {
             AtlasStruct relationshipStruct = ((AtlasRelatedObjectId) val).getRelationshipAttributes();
@@ -1880,10 +1424,14 @@ public class EntityGraphMapper {
         }
     }
 
-    private AtlasEntityHeader constructHeader(AtlasEntity entity, AtlasVertex vertex) throws AtlasBaseException {
-        AtlasEntityHeader header = entityRetriever.toAtlasEntityHeaderWithClassifications(vertex);
-        if (entity.getClassifications() == null) {
-            entity.setClassifications(header.getClassifications());
+    private AtlasEntityHeader constructHeader(AtlasEntity entity, final AtlasEntityType type, AtlasVertex vertex) {
+        AtlasEntityHeader header = new AtlasEntityHeader(entity.getTypeName());
+
+        header.setGuid(getIdFromVertex(vertex));
+        header.setStatus(entity.getStatus());
+
+        for (AtlasAttribute attribute : type.getUniqAttributes().values()) {
+            header.setAttribute(attribute.getName(), entity.getAttribute(attribute.getName()));
         }
 
         return header;
@@ -1906,11 +1454,11 @@ public class EntityGraphMapper {
         if (CollectionUtils.isNotEmpty(classifications)) {
             MetricRecorder metric = RequestContext.get().startMetricRecord("addClassifications");
 
-            final AtlasVertex                              entityVertex          = context.getVertex(guid);
-            final AtlasEntityType                          entityType            = context.getType(guid);
-            List<AtlasVertex>                              entitiesToPropagateTo = null;
-            Map<AtlasClassification, HashSet<AtlasVertex>> addedClassifications  = new HashMap<>();
-            List<AtlasClassification>                      addClassifications    = new ArrayList<>(classifications.size());
+            final AtlasVertex                           entityVertex          = context.getVertex(guid);
+            final AtlasEntityType                       entityType            = context.getType(guid);
+            List<AtlasVertex>                           entitiesToPropagateTo = null;
+            Map<AtlasVertex, List<AtlasClassification>> propagations          = null;
+            List<AtlasClassification>                   addClassifications    = new ArrayList<>(classifications.size());
 
             for (AtlasClassification c : classifications) {
                 AtlasClassification classification      = new AtlasClassification(c);
@@ -1929,15 +1477,14 @@ public class EntityGraphMapper {
 
                     if(reqContext.isImportInProgress() || reqContext.isInNotificationProcessing()) {
                         propagateTags = false;
+                        classification.setPropagate(propagateTags);
                     } else {
-                        propagateTags = CLASSIFICATION_PROPAGATION_DEFAULT;
+                        propagateTags = true;
                     }
-
-                    classification.setPropagate(propagateTags);
                 }
 
                 if (removePropagations == null) {
-                    removePropagations = graphHelper.getDefaultRemovePropagations();
+                    removePropagations = getDefaultRemovePropagations();
 
                     classification.setRemovePropagationsOnEntityDelete(removePropagations);
                 }
@@ -1958,7 +1505,7 @@ public class EntityGraphMapper {
                     LOG.debug("Adding classification [{}] to [{}] using edge label: [{}]", classificationName, entityType.getTypeName(), getTraitLabel(classificationName));
                 }
 
-                addToClassificationNames(entityVertex, classificationName);
+                AtlasGraphUtilsV2.addEncodedProperty(entityVertex, TRAIT_NAMES_PROPERTY_KEY, classificationName);
 
                 // add a new AtlasVertex for the struct or trait instance
                 AtlasVertex classificationVertex = createClassificationVertex(classification);
@@ -1967,36 +1514,35 @@ public class EntityGraphMapper {
                     LOG.debug("created vertex {} for trait {}", string(classificationVertex), classificationName);
                 }
 
-                if (propagateTags && taskManagement != null && DEFERRED_ACTION_ENABLED) {
-                    propagateTags = false;
-
-                    createAndQueueTask(CLASSIFICATION_PROPAGATION_ADD, entityVertex, classificationVertex.getIdForDisplay());
-                }
-
                 // add the attributes for the trait instance
                 mapClassification(EntityOperation.CREATE, context, classification, entityType, entityVertex, classificationVertex);
                 updateModificationMetadata(entityVertex);
-                if(addedClassifications.get(classification) == null) {
-                    addedClassifications.put(classification, new HashSet<>());
-                }
-                //Add current Vertex to be notified
-                addedClassifications.get(classification).add(entityVertex);
 
                 if (propagateTags) {
                     // compute propagatedEntityVertices only once
                     if (entitiesToPropagateTo == null) {
-                        entitiesToPropagateTo = entityRetriever.getImpactedVerticesV2(entityVertex);
+                        entitiesToPropagateTo = graphHelper.getImpactedVertices(guid);
                     }
 
                     if (CollectionUtils.isNotEmpty(entitiesToPropagateTo)) {
+                        if (propagations == null) {
+                            propagations = new HashMap<>(entitiesToPropagateTo.size());
+
+                            for (AtlasVertex entityToPropagateTo : entitiesToPropagateTo) {
+                                propagations.put(entityToPropagateTo, new ArrayList<>());
+                            }
+                        }
+
                         if (LOG.isDebugEnabled()) {
                             LOG.debug("Propagating tag: [{}][{}] to {}", classificationName, entityType.getTypeName(), getTypeNames(entitiesToPropagateTo));
                         }
 
                         List<AtlasVertex> entitiesPropagatedTo = deleteDelegate.getHandler().addTagPropagation(classificationVertex, entitiesToPropagateTo);
 
-                        if (CollectionUtils.isNotEmpty(entitiesPropagatedTo)) {
-                            addedClassifications.get(classification).addAll(entitiesPropagatedTo);
+                        if (entitiesPropagatedTo != null) {
+                            for (AtlasVertex entityPropagatedTo : entitiesPropagatedTo) {
+                                propagations.get(entityPropagatedTo).add(classification);
+                            }
                         }
                     } else {
                         if (LOG.isDebugEnabled()) {
@@ -2019,66 +1565,19 @@ public class EntityGraphMapper {
                 notificationVertices.addAll(entitiesToPropagateTo);
             }
 
-            for (AtlasClassification classification : addedClassifications.keySet()) {
-                Set<AtlasVertex>  vertices           = addedClassifications.get(classification);
-                List<AtlasEntity> propagatedEntities = updateClassificationText(classification, vertices);
-
-                entityChangeNotifier.onClassificationsAddedToEntities(propagatedEntities, Collections.singletonList(classification));
-            }
-
-            RequestContext.get().endMetricRecord(metric);
-        }
-    }
-
-    @GraphTransaction
-    public List<String> propagateClassification(String entityGuid, String classificationVertexId, String relationshipGuid) throws AtlasBaseException {
-        try {
-            if (StringUtils.isEmpty(entityGuid) || StringUtils.isEmpty(classificationVertexId)) {
-                LOG.warn("propagateClassification(entityGuid={}, classificationVertexId={}): entityGuid and/or classification vertex id is empty", entityGuid, classificationVertexId);
-
-                return null;
-            }
-
-            AtlasVertex entityVertex = graphHelper.getVertexForGUID(entityGuid);
+            for (AtlasVertex vertex : notificationVertices) {
+                String                    entityGuid           = GraphHelper.getGuid(vertex);
+                AtlasEntity               entity               = instanceConverter.getAndCacheEntity(entityGuid);
+                List<AtlasClassification> addedClassifications = StringUtils.equals(entityGuid, guid) ? addClassifications : propagations.get(vertex);
 
-            if (entityVertex == null) {
-                LOG.warn("propagateClassification(entityGuid={}, classificationVertexId={}): entity vertex not found", entityGuid, classificationVertexId);
-
-                return null;
-            }
-
-            AtlasVertex classificationVertex = graph.getVertex(classificationVertexId);
-
-            if (classificationVertex == null) {
-                LOG.warn("propagateClassification(entityGuid={}, classificationVertexId={}): classification vertex not found", entityGuid, classificationVertexId);
-
-                return null;
-            }
-
-            List<AtlasVertex> impactedVertices = entityRetriever.getImpactedVerticesV2(entityVertex, relationshipGuid, classificationVertexId);
-
-            if (CollectionUtils.isEmpty(impactedVertices)) {
-                LOG.debug("propagateClassification(entityGuid={}, classificationVertexId={}): found no entities to propagate the classification", entityGuid, classificationVertexId);
-
-                return null;
-            }
 
-            AtlasClassification classification       = entityRetriever.toAtlasClassification(classificationVertex);
-            List<AtlasVertex>   entitiesPropagatedTo = deleteDelegate.getHandler().addTagPropagation(classificationVertex, impactedVertices);
-
-            if (CollectionUtils.isEmpty(entitiesPropagatedTo)) {
-                return null;
+                vertex.setProperty(CLASSIFICATION_TEXT_KEY, fullTextMapperV2.getClassificationTextForEntity(entity));
+                if (CollectionUtils.isNotEmpty(addedClassifications)) {
+                    entityChangeNotifier.onClassificationAddedToEntity(entity, addedClassifications);
+                }
             }
 
-            List<AtlasEntity> propagatedEntities = updateClassificationText(classification, entitiesPropagatedTo);
-
-            entityChangeNotifier.onClassificationsAddedToEntities(propagatedEntities, Collections.singletonList(classification));
-
-            return propagatedEntities.stream().map(x -> x.getGuid()).collect(Collectors.toList());
-        } catch (Exception e) {
-            LOG.error("propagateClassification(entityGuid={}, classificationVertexId={}): error while propagating classification", entityGuid, classificationVertexId, e);
-
-            throw new AtlasBaseException(e);
+            RequestContext.get().endMetricRecord(metric);
         }
     }
 
@@ -2095,7 +1594,7 @@ public class EntityGraphMapper {
             throw new AtlasBaseException(AtlasErrorCode.INVALID_CLASSIFICATION_PARAMS, "delete", entityGuid);
         }
 
-        AtlasVertex entityVertex = AtlasGraphUtilsV2.findByGuid(this.graph, entityGuid);
+        AtlasVertex entityVertex = AtlasGraphUtilsV2.findByGuid(entityGuid);
 
         if (entityVertex == null) {
             throw new AtlasBaseException(AtlasErrorCode.INSTANCE_GUID_NOT_FOUND, entityGuid);
@@ -2109,18 +1608,12 @@ public class EntityGraphMapper {
             throw new AtlasBaseException(AtlasErrorCode.INVALID_CLASSIFICATION_PARAMS, "delete", entityGuid);
         }
 
-        AtlasVertex entityVertex = AtlasGraphUtilsV2.findByGuid(this.graph, entityGuid);
+        AtlasVertex entityVertex = AtlasGraphUtilsV2.findByGuid(entityGuid);
 
         if (entityVertex == null) {
             throw new AtlasBaseException(AtlasErrorCode.INSTANCE_GUID_NOT_FOUND, entityGuid);
         }
 
-        AtlasPerfTracer perf = null;
-
-        if (AtlasPerfTracer.isPerfTraceEnabled(PERF_LOG)) {
-            perf = AtlasPerfTracer.getPerfTracer(PERF_LOG, "EntityGraphMapper.deleteClassification");
-        }
-
         List<String> traitNames = getTraitNames(entityVertex);
 
         if (CollectionUtils.isEmpty(traitNames)) {
@@ -2129,37 +1622,42 @@ public class EntityGraphMapper {
 
         validateClassificationExists(traitNames, classificationName);
 
+        Map<AtlasVertex, List<AtlasClassification>> removedClassifications = new HashMap<>();
+
         AtlasVertex         classificationVertex = getClassificationVertex(entityVertex, classificationName);
         AtlasClassification classification       = entityRetriever.toAtlasClassification(classificationVertex);
 
-        if (classification == null) {
-            throw new AtlasBaseException(AtlasErrorCode.CLASSIFICATION_NOT_FOUND, classificationName);
-        }
-
         // remove classification from propagated entities if propagation is turned on
-        final List<AtlasVertex> entityVertices;
-
         if (isPropagationEnabled(classificationVertex)) {
-            if (taskManagement != null && DEFERRED_ACTION_ENABLED) {
-                createAndQueueTask(CLASSIFICATION_PROPAGATION_DELETE, entityVertex, classificationVertex.getIdForDisplay());
+            List<AtlasVertex> propagatedEntityVertices = deleteDelegate.getHandler().removeTagPropagation(classificationVertex);
 
-                entityVertices = new ArrayList<>();
-            } else {
-                entityVertices = deleteDelegate.getHandler().removeTagPropagation(classificationVertex);
+            // add propagated entities and deleted classification details to removeClassifications map
+            if (CollectionUtils.isNotEmpty(propagatedEntityVertices)) {
+                for (AtlasVertex propagatedEntityVertex : propagatedEntityVertices) {
+                    List<AtlasClassification> classifications = removedClassifications.get(propagatedEntityVertex);
 
-                if (LOG.isDebugEnabled()) {
-                    LOG.debug("Number of propagations to delete -> {}", entityVertices.size());
+                    if (classifications == null) {
+                        classifications = new ArrayList<>();
+
+                        removedClassifications.put(propagatedEntityVertex, classifications);
+                    }
+
+                    classifications.add(classification);
                 }
             }
-        } else {
-            entityVertices = new ArrayList<>();
         }
 
-        // add associated entity to entityVertices list
-        if (!entityVertices.contains(entityVertex)) {
-            entityVertices.add(entityVertex);
+        // add associated entity and deleted classification details to removeClassifications map
+        List<AtlasClassification> classifications = removedClassifications.get(entityVertex);
+
+        if (classifications == null) {
+            classifications = new ArrayList<>();
+
+            removedClassifications.put(entityVertex, classifications);
         }
 
+        classifications.add(classification);
+
         // remove classifications from associated entity
         if (LOG.isDebugEnabled()) {
             LOG.debug("Removing classification: [{}] from: [{}][{}] with edge label: [{}]", classificationName,
@@ -2172,81 +1670,19 @@ public class EntityGraphMapper {
 
         traitNames.remove(classificationName);
 
-        // update 'TRAIT_NAMES_PROPERTY_KEY' property
-        entityVertex.removePropertyValue(TRAIT_NAMES_PROPERTY_KEY, classificationName);
-
-        // update 'CLASSIFICATION_NAMES_KEY' property
-        entityVertex.removeProperty(CLASSIFICATION_NAMES_KEY);
-
-        entityVertex.setProperty(CLASSIFICATION_NAMES_KEY, getClassificationNamesString(traitNames));
+        updateTraitNamesProperty(entityVertex, traitNames);
 
         updateModificationMetadata(entityVertex);
 
-        if (CollectionUtils.isNotEmpty(entityVertices)) {
-            List<AtlasEntity> propagatedEntities = updateClassificationText(classification, entityVertices);
-
-            //Sending audit request for all entities at once
-            entityChangeNotifier.onClassificationsDeletedFromEntities(propagatedEntities, Collections.singletonList(classification));
-        }
-        AtlasPerfTracer.log(perf);
-    }
-
-    private AtlasEntity updateClassificationText(AtlasVertex vertex) throws AtlasBaseException {
-        String guid        = graphHelper.getGuid(vertex);
-        AtlasEntity entity = instanceConverter.getAndCacheEntity(guid, ENTITY_CHANGE_NOTIFY_IGNORE_RELATIONSHIP_ATTRIBUTES);
-
-        vertex.setProperty(CLASSIFICATION_TEXT_KEY, fullTextMapperV2.getClassificationTextForEntity(entity));
-        return entity;
-    }
+        for (Map.Entry<AtlasVertex, List<AtlasClassification>> entry : removedClassifications.entrySet()) {
+            AtlasVertex               vertex                     = entry.getKey();
+            String                    guid                       = GraphHelper.getGuid(vertex);
+            List<AtlasClassification> deletedClassificationNames = entry.getValue();
+            AtlasEntity               entity                     = instanceConverter.getAndCacheEntity(guid);
 
-    public void updateClassificationTextAndNames(AtlasVertex vertex) throws AtlasBaseException {
-        if(CollectionUtils.isEmpty(vertex.getPropertyValues(Constants.TRAIT_NAMES_PROPERTY_KEY, String.class)) &&
-                CollectionUtils.isEmpty(vertex.getPropertyValues(Constants.PROPAGATED_TRAIT_NAMES_PROPERTY_KEY, String.class))) {
-            return;
+            vertex.setProperty(CLASSIFICATION_TEXT_KEY, fullTextMapperV2.getClassificationTextForEntity(entity));
+            entityChangeNotifier.onClassificationDeletedFromEntity(entity, deletedClassificationNames);
         }
-
-        String guid = graphHelper.getGuid(vertex);
-        AtlasEntity entity = instanceConverter.getAndCacheEntity(guid, ENTITY_CHANGE_NOTIFY_IGNORE_RELATIONSHIP_ATTRIBUTES);
-        List<String> classificationNames = new ArrayList<>();
-        List<String> propagatedClassificationNames = new ArrayList<>();
-
-        for (AtlasClassification classification : entity.getClassifications()) {
-            if (isPropagatedClassification(classification, guid)) {
-                propagatedClassificationNames.add(classification.getTypeName());
-            } else {
-                classificationNames.add(classification.getTypeName());
-            }
-        }
-
-        vertex.setProperty(CLASSIFICATION_NAMES_KEY, getDelimitedClassificationNames(classificationNames));
-        vertex.setProperty(PROPAGATED_CLASSIFICATION_NAMES_KEY, getDelimitedClassificationNames(propagatedClassificationNames));
-        vertex.setProperty(CLASSIFICATION_TEXT_KEY, fullTextMapperV2.getClassificationTextForEntity(entity));
-    }
-
-    private boolean isPropagatedClassification(AtlasClassification classification, String guid) {
-        String classificationEntityGuid = classification.getEntityGuid();
-
-        return StringUtils.isNotEmpty(classificationEntityGuid) && !StringUtils.equals(classificationEntityGuid, guid);
-    }
-
-    private void addToClassificationNames(AtlasVertex entityVertex, String classificationName) {
-        AtlasGraphUtilsV2.addEncodedProperty(entityVertex, TRAIT_NAMES_PROPERTY_KEY, classificationName);
-
-        String delimitedClassificationNames = entityVertex.getProperty(CLASSIFICATION_NAMES_KEY, String.class);
-
-        if (StringUtils.isEmpty(delimitedClassificationNames)) {
-            delimitedClassificationNames = CLASSIFICATION_NAME_DELIMITER + classificationName + CLASSIFICATION_NAME_DELIMITER;
-        } else {
-            delimitedClassificationNames = delimitedClassificationNames + classificationName + CLASSIFICATION_NAME_DELIMITER;
-        }
-
-        entityVertex.setProperty(CLASSIFICATION_NAMES_KEY, delimitedClassificationNames);
-    }
-
-    private String getClassificationNamesString(List<String> traitNames) {
-        String ret = StringUtils.join(traitNames, CLASSIFICATION_NAME_DELIMITER);
-
-        return StringUtils.isEmpty(ret) ? ret : CLASSIFICATION_NAME_DELIMITER + ret + CLASSIFICATION_NAME_DELIMITER;
     }
 
     public void updateClassifications(EntityMutationContext context, String guid, List<AtlasClassification> classifications) throws AtlasBaseException {
@@ -2254,18 +1690,12 @@ public class EntityGraphMapper {
             throw new AtlasBaseException(AtlasErrorCode.INVALID_CLASSIFICATION_PARAMS, "update", guid);
         }
 
-        AtlasVertex entityVertex = AtlasGraphUtilsV2.findByGuid(this.graph, guid);
+        AtlasVertex entityVertex = AtlasGraphUtilsV2.findByGuid(guid);
 
         if (entityVertex == null) {
             throw new AtlasBaseException(AtlasErrorCode.INSTANCE_GUID_NOT_FOUND, guid);
         }
 
-        AtlasPerfTracer perf = null;
-
-        if (AtlasPerfTracer.isPerfTraceEnabled(PERF_LOG)) {
-            perf = AtlasPerfTracer.getPerfTracer(PERF_LOG, "EntityGraphMapper.updateClassifications");
-        }
-
         String                    entityTypeName         = AtlasGraphUtilsV2.getTypeName(entityVertex);
         AtlasEntityType           entityType             = typeRegistry.getEntityTypeByName(entityTypeName);
         List<AtlasClassification> updatedClassifications = new ArrayList<>();
@@ -2273,7 +1703,7 @@ public class EntityGraphMapper {
         Set<AtlasVertex>          notificationVertices   = new HashSet<AtlasVertex>() {{ add(entityVertex); }};
 
         Map<AtlasVertex, List<AtlasClassification>> addedPropagations   = null;
-        Map<AtlasClassification, List<AtlasVertex>> removedPropagations = new HashMap<>();
+        Map<AtlasVertex, List<AtlasClassification>> removedPropagations = null;
 
         for (AtlasClassification classification : classifications) {
             String classificationName       = classification.getTypeName();
@@ -2299,10 +1729,6 @@ public class EntityGraphMapper {
 
             AtlasClassification currentClassification = entityRetriever.toAtlasClassification(classificationVertex);
 
-            if (currentClassification == null) {
-                continue;
-            }
-
             validateAndNormalizeForUpdate(classification);
 
             boolean isClassificationUpdated = false;
@@ -2355,32 +1781,11 @@ public class EntityGraphMapper {
             Boolean currentTagPropagation = currentClassification.isPropagate();
             Boolean updatedTagPropagation = classification.isPropagate();
 
-            /* -----------------------------
-               | Current Tag | Updated Tag |
-               | Propagation | Propagation |
-               |-------------|-------------|
-               |   true      |    true     | => no-op
-               |-------------|-------------|
-               |   false     |    false    | => no-op
-               |-------------|-------------|
-               |   false     |    true     | => Add Tag Propagation (send ADD classification notifications)
-               |-------------|-------------|
-               |   true      |    false    | => Remove Tag Propagation (send REMOVE classification notifications)
-               |-------------|-------------| */
-
-            if (taskManagement != null && DEFERRED_ACTION_ENABLED) {
-                String propagationType = updatedTagPropagation ? CLASSIFICATION_PROPAGATION_ADD : CLASSIFICATION_PROPAGATION_DELETE;
-
-                createAndQueueTask(propagationType, entityVertex, classificationVertex.getIdForDisplay());
-
-                updatedTagPropagation = null;
-            }
-
             // compute propagatedEntityVertices once and use it for subsequent iterations and notifications
             if (updatedTagPropagation != null && currentTagPropagation != updatedTagPropagation) {
                 if (updatedTagPropagation) {
                     if (CollectionUtils.isEmpty(entitiesToPropagateTo)) {
-                        entitiesToPropagateTo = entityRetriever.getImpactedVerticesV2(entityVertex, null, classificationVertex.getIdForDisplay());
+                        entitiesToPropagateTo = graphHelper.getImpactedVerticesWithRestrictions(guid, classificationVertex.getIdForDisplay());
                     }
 
                     if (CollectionUtils.isNotEmpty(entitiesToPropagateTo)) {
@@ -2404,17 +1809,21 @@ public class EntityGraphMapper {
                     List<AtlasVertex> impactedVertices = deleteDelegate.getHandler().removeTagPropagation(classificationVertex);
 
                     if (CollectionUtils.isNotEmpty(impactedVertices)) {
-                        /*
-                            removedPropagations is a HashMap of entity against list of classifications i.e. for each entity 1 entry in the map.
-                            Maintaining classification wise entity list lets us send the audit request in bulk,
-                            since 1 classification is applied to many entities (including the child entities).
-                            Eg. If a classification is being propagated to 1000 entities, its edge count would be 2000, as per removedPropagations map
-                            we would have 2000 entries and value would always be 1 classification wrapped in a list.
-                            By this rearrangement we maintain an entity list against each classification, as of now its entry size would be 1 (as per request from UI)
-                            instead of 2000. Moreover this allows us to send audit request classification wise instead of separate requests for each entities.
-                            This reduces audit calls from 2000 to 1.
-                         */
-                        removedPropagations.put(classification, impactedVertices);
+                        if (removedPropagations == null) {
+                            removedPropagations = new HashMap<>();
+
+                            for (AtlasVertex impactedVertex : impactedVertices) {
+                                List<AtlasClassification> removedClassifications = removedPropagations.get(impactedVertex);
+
+                                if (removedClassifications == null) {
+                                    removedClassifications = new ArrayList<>();
+
+                                    removedPropagations.put(impactedVertex, removedClassifications);
+                                }
+
+                                removedClassifications.add(classification);
+                            }
+                        }
                     }
                 }
             }
@@ -2427,8 +1836,8 @@ public class EntityGraphMapper {
         }
 
         for (AtlasVertex vertex : notificationVertices) {
-            String      entityGuid = graphHelper.getGuid(vertex);
-            AtlasEntity entity     = instanceConverter.getAndCacheEntity(entityGuid, ENTITY_CHANGE_NOTIFY_IGNORE_RELATIONSHIP_ATTRIBUTES);
+            String      entityGuid = GraphHelper.getGuid(vertex);
+            AtlasEntity entity     = instanceConverter.getAndCacheEntity(entityGuid);
 
             if (isActive(entity)) {
                 vertex.setProperty(CLASSIFICATION_TEXT_KEY, fullTextMapperV2.getClassificationTextForEntity(entity));
@@ -2436,73 +1845,18 @@ public class EntityGraphMapper {
             }
         }
 
-        if (MapUtils.isNotEmpty(removedPropagations)) {
-            for (AtlasClassification classification : removedPropagations.keySet()) {
-                List<AtlasVertex> propagatedVertices = removedPropagations.get(classification);
-                List<AtlasEntity> propagatedEntities = updateClassificationText(classification, propagatedVertices);
-
-                //Sending audit request for all entities at once
-                entityChangeNotifier.onClassificationsDeletedFromEntities(propagatedEntities, Collections.singletonList(classification));
-            }
-        }
-
-        AtlasPerfTracer.log(perf);
-    }
-
-    @GraphTransaction
-    public List<String> updateClassificationsPropagation(String entityGuid, String classificationVertexId, String relationshipGuid) throws AtlasBaseException {
-        try {
-            if (StringUtils.isEmpty(entityGuid) || StringUtils.isEmpty(classificationVertexId)) {
-                LOG.warn("updateClassificationsPropagation(entityGuid={}, classificationVertexId={}): entityGuid and/or classification vertex id is empty", entityGuid, classificationVertexId);
-                return null;
-            }
-
-            AtlasVertex entityVertex = graphHelper.getVertexForGUID(entityGuid);
-
-            if (entityVertex == null) {
-                LOG.warn("updateClassificationsPropagation(entityGuid={}, classificationVertexId={}): entity vertex not found", entityGuid, classificationVertexId);
-                return null;
-            }
-
-            AtlasVertex classificationVertex = graph.getVertex(classificationVertexId);
-
-            if (classificationVertex == null) {
-                LOG.warn("updateClassificationsPropagation(entityGuid={}, classificationVertexId={}): classification vertex not found", entityGuid, classificationVertexId);
-                return null;
-            }
-
-            List<AtlasVertex> entitiesToPropagateTo = entityRetriever.getImpactedVerticesV2(entityVertex, relationshipGuid, classificationVertex.getIdForDisplay());
-
-            if (CollectionUtils.isEmpty(entitiesToPropagateTo)) {
-                LOG.debug("updateClassificationsPropagation(entityGuid={}, classificationVertexId={}): no impacted vertices found!", entityGuid, classificationVertexId);
-                return null;
-            }
-
-            List<AtlasVertex> entitiesPropagatedTo = deleteDelegate.getHandler().addTagPropagation(classificationVertex, entitiesToPropagateTo);
-
-            if (CollectionUtils.isEmpty(entitiesPropagatedTo)) {
-                LOG.debug("updateClassificationsPropagation(entityGuid={}, classificationVertexId={}): no propagations added!", entityGuid, classificationVertexId);
-                return null;
-            }
-
-            AtlasClassification updatedClassification = entityRetriever.toAtlasClassification(classificationVertex);
-            List<String>        ret                   = new ArrayList<>();
-
-            for (AtlasVertex vertex : entitiesToPropagateTo) {
-                AtlasEntity entity = instanceConverter.getAndCacheEntity(entityGuid, ENTITY_CHANGE_NOTIFY_IGNORE_RELATIONSHIP_ATTRIBUTES);
-
-                ret.add(entity.getGuid());
+        if (removedPropagations != null) {
+            for (Map.Entry<AtlasVertex, List<AtlasClassification>> entry : removedPropagations.entrySet()) {
+                AtlasVertex               vertex                 = entry.getKey();
+                List<AtlasClassification> removedClassifications = entry.getValue();
+                String                    entityGuid             = GraphHelper.getGuid(vertex);
+                AtlasEntity               entity                 = instanceConverter.getAndCacheEntity(entityGuid);
 
                 if (isActive(entity)) {
                     vertex.setProperty(CLASSIFICATION_TEXT_KEY, fullTextMapperV2.getClassificationTextForEntity(entity));
-
-                    entityChangeNotifier.onClassificationUpdatedToEntity(entity, Collections.singletonList(updatedClassification));
+                    entityChangeNotifier.onClassificationDeletedFromEntity(entity, removedClassifications);
                 }
             }
-
-            return ret;
-        } catch (Exception ex) {
-            throw new AtlasBaseException(ex);
         }
     }
 
@@ -2538,7 +1892,7 @@ public class EntityGraphMapper {
     }
 
     public void deleteClassifications(String guid) throws AtlasBaseException {
-        AtlasVertex instanceVertex = AtlasGraphUtilsV2.findByGuid(this.graph, guid);
+        AtlasVertex instanceVertex = AtlasGraphUtilsV2.findByGuid(guid);
 
         if (instanceVertex == null) {
             throw new AtlasBaseException(AtlasErrorCode.INSTANCE_GUID_NOT_FOUND, guid);
@@ -2553,50 +1907,16 @@ public class EntityGraphMapper {
         }
     }
 
-    @GraphTransaction
-    public List<String> deleteClassificationPropagation(String classificationVertexId) throws AtlasBaseException {
-        try {
-            if (StringUtils.isEmpty(classificationVertexId)) {
-                LOG.warn("deleteClassificationPropagation(classificationVertexId={}): classification vertex id is empty", classificationVertexId);
+    private void updateTraitNamesProperty(AtlasVertex entityVertex, List<String> traitNames) {
+        if (entityVertex != null) {
+            entityVertex.removeProperty(TRAIT_NAMES_PROPERTY_KEY);
 
-                return null;
-            }
-
-            AtlasVertex classificationVertex = graph.getVertex(classificationVertexId);
-
-            if (classificationVertex == null) {
-                LOG.warn("deleteClassificationPropagation(classificationVertexId={}): classification vertex not found", classificationVertexId);
-
-                return null;
-            }
-
-            List<AtlasVertex> entityVertices = deleteDelegate.getHandler().removeTagPropagation(classificationVertex);
-
-            if (CollectionUtils.isEmpty(entityVertices)) {
-
-                return null;
+            for (String traitName : traitNames) {
+                AtlasGraphUtilsV2.addEncodedProperty(entityVertex, TRAIT_NAMES_PROPERTY_KEY, traitName);
             }
-
-            AtlasClassification classification     = entityRetriever.toAtlasClassification(classificationVertex);
-            List<AtlasEntity>   propagatedEntities = updateClassificationText(classification, entityVertices);
-
-            entityChangeNotifier.onClassificationsDeletedFromEntities(propagatedEntities, Collections.singletonList(classification));
-
-            return propagatedEntities.stream().map(x -> x.getGuid()).collect(Collectors.toList());
-        } catch (Exception e) {
-            throw new AtlasBaseException(e);
         }
     }
 
-    @GraphTransaction
-    public void updateTagPropagations(String relationshipEdgeId, AtlasRelationship relationship) throws AtlasBaseException {
-        AtlasEdge relationshipEdge = graph.getEdge(relationshipEdgeId);
-
-        deleteDelegate.getHandler().updateTagPropagations(relationshipEdge, relationship);
-
-        entityChangeNotifier.notifyPropagatedEntities();
-    }
-
     private void validateClassificationExists(List<String> existingClassifications, List<String> suppliedClassifications) throws AtlasBaseException {
         Set<String> existingNames = new HashSet<>(existingClassifications);
         for (String classificationName : suppliedClassifications) {
@@ -2618,14 +1938,12 @@ public class EntityGraphMapper {
     }
 
     private void recordEntityUpdate(AtlasVertex vertex) throws AtlasBaseException {
-        if (vertex != null) {
-            RequestContext req = RequestContext.get();
+        RequestContext req = RequestContext.get();
 
-            if (!req.isUpdatedEntity(graphHelper.getGuid(vertex))) {
-                updateModificationMetadata(vertex);
+        if (!req.isUpdatedEntity(GraphHelper.getGuid(vertex))) {
+            updateModificationMetadata(vertex);
 
-                req.recordEntityUpdate(entityRetriever.toAtlasEntityHeader(vertex));
-            }
+            req.recordEntityUpdate(entityRetriever.toAtlasEntityHeader(vertex));
         }
     }
 
@@ -2674,152 +1992,4 @@ public class EntityGraphMapper {
     private static String getSoftRefFormattedString(String typeName, String resolvedGuid) {
         return String.format(SOFT_REF_FORMAT, typeName, resolvedGuid);
     }
-
-    public void importActivateEntity(AtlasVertex vertex, AtlasEntity entity) {
-        AtlasGraphUtilsV2.setEncodedProperty(vertex, STATE_PROPERTY_KEY, ACTIVE);
-
-        if (MapUtils.isNotEmpty(entity.getRelationshipAttributes())) {
-            Set<String> relatedEntitiesGuids = getRelatedEntitiesGuids(entity);
-            activateEntityRelationships(vertex, relatedEntitiesGuids);
-        }
-    }
-
-    private void activateEntityRelationships(AtlasVertex vertex, Set<String> relatedEntitiesGuids) {
-        Iterator<AtlasEdge> edgeIterator = vertex.getEdges(AtlasEdgeDirection.BOTH).iterator();
-
-        while (edgeIterator.hasNext()) {
-            AtlasEdge edge = edgeIterator.next();
-
-            if (AtlasGraphUtilsV2.getState(edge) != DELETED) {
-                continue;
-            }
-
-            final String relatedEntityGuid;
-            if (Objects.equals(edge.getInVertex().getId(), vertex.getId())) {
-                relatedEntityGuid = AtlasGraphUtilsV2.getIdFromVertex(edge.getOutVertex());
-            } else {
-                relatedEntityGuid = AtlasGraphUtilsV2.getIdFromVertex(edge.getInVertex());
-            }
-
-            if (StringUtils.isEmpty(relatedEntityGuid) || !relatedEntitiesGuids.contains(relatedEntityGuid)) {
-                continue;
-            }
-
-            edge.setProperty(STATE_PROPERTY_KEY, AtlasRelationship.Status.ACTIVE);
-        }
-    }
-
-    private Set<String> getRelatedEntitiesGuids(AtlasEntity entity) {
-        Set<String> relGuidsSet = new HashSet<>();
-
-        for (Object o : entity.getRelationshipAttributes().values()) {
-            if (o instanceof AtlasObjectId) {
-                relGuidsSet.add(((AtlasObjectId) o).getGuid());
-            } else if (o instanceof List) {
-                for (Object id : (List) o) {
-                    if (id instanceof AtlasObjectId) {
-                        relGuidsSet.add(((AtlasObjectId) id).getGuid());
-                    }
-                }
-            }
-        }
-        return relGuidsSet;
-    }
-
-    public static void validateCustomAttributes(AtlasEntity entity) throws AtlasBaseException {
-        Map<String, String> customAttributes = entity.getCustomAttributes();
-
-        if (MapUtils.isNotEmpty(customAttributes)) {
-            for (Map.Entry<String, String> entry : customAttributes.entrySet()) {
-                String key   = entry.getKey();
-                String value = entry.getValue();
-
-                if (key.length() > CUSTOM_ATTRIBUTE_KEY_MAX_LENGTH) {
-                    throw new AtlasBaseException(AtlasErrorCode.INVALID_CUSTOM_ATTRIBUTE_KEY_LENGTH, key);
-                }
-
-                Matcher matcher = CUSTOM_ATTRIBUTE_KEY_REGEX.matcher(key);
-
-                if (!matcher.matches()) {
-                    throw new AtlasBaseException(AtlasErrorCode.INVALID_CUSTOM_ATTRIBUTE_KEY_CHARACTERS, key);
-                }
-
-                if (StringUtils.isNotEmpty(CUSTOM_ATTRIBUTE_KEY_SPECIAL_PREFIX) && key.startsWith(CUSTOM_ATTRIBUTE_KEY_SPECIAL_PREFIX)) {
-                    continue;
-                }
-
-                if (!key.startsWith(CUSTOM_ATTRIBUTE_KEY_SPECIAL_PREFIX) && value.length() > CUSTOM_ATTRIBUTE_VALUE_MAX_LENGTH) {
-                    throw new AtlasBaseException(AtlasErrorCode.INVALID_CUSTOM_ATTRIBUTE_VALUE, value, String.valueOf(CUSTOM_ATTRIBUTE_VALUE_MAX_LENGTH));
-                }
-            }
-        }
-    }
-
-    public static void validateLabels(Set<String> labels) throws AtlasBaseException {
-        if (CollectionUtils.isNotEmpty(labels)) {
-            for (String label : labels) {
-                if (label.length() > LABEL_MAX_LENGTH.getInt()) {
-                    throw new AtlasBaseException(AtlasErrorCode.INVALID_LABEL_LENGTH, label, String.valueOf(LABEL_MAX_LENGTH.getInt()));
-                }
-
-                Matcher matcher = LABEL_REGEX.matcher(label);
-
-                if (!matcher.matches()) {
-                    throw new AtlasBaseException(AtlasErrorCode.INVALID_LABEL_CHARACTERS, label);
-                }
-            }
-        }
-    }
-
-    private List<AtlasEntity> updateClassificationText(AtlasClassification classification, Collection<AtlasVertex> propagatedVertices) throws AtlasBaseException {
-        List<AtlasEntity> propagatedEntities = new ArrayList<>();
-
-        if(CollectionUtils.isNotEmpty(propagatedVertices)) {
-            for(AtlasVertex vertex : propagatedVertices) {
-                AtlasEntity entity = instanceConverter.getAndCacheEntity(graphHelper.getGuid(vertex), ENTITY_CHANGE_NOTIFY_IGNORE_RELATIONSHIP_ATTRIBUTES);
-
-                if (isActive(entity)) {
-                    vertex.setProperty(CLASSIFICATION_TEXT_KEY, fullTextMapperV2.getClassificationTextForEntity(entity));
-                    propagatedEntities.add(entity);
-                }
-            }
-        }
-
-        return propagatedEntities;
-    }
-
-    private void updateLabels(AtlasVertex vertex, Set<String> labels) {
-        if (CollectionUtils.isNotEmpty(labels)) {
-            AtlasGraphUtilsV2.setEncodedProperty(vertex, LABELS_PROPERTY_KEY, getLabelString(labels));
-        } else {
-            vertex.removeProperty(LABELS_PROPERTY_KEY);
-        }
-    }
-
-    private String getLabelString(Collection<String> labels) {
-        String ret = null;
-
-        if (!labels.isEmpty()) {
-            ret = LABEL_NAME_DELIMITER + String.join(LABEL_NAME_DELIMITER, labels) + LABEL_NAME_DELIMITER;
-        }
-
-        return ret;
-    }
-
-    private void addToUpdatedBusinessAttributes(Map<String, Map<String, Object>> updatedBusinessAttributes, AtlasBusinessAttribute bmAttribute, Object attrValue) {
-        String              bmName     = bmAttribute.getDefinedInType().getTypeName();
-        Map<String, Object> attributes = updatedBusinessAttributes.get(bmName);
-
-        if(attributes == null){
-            attributes = new HashMap<>();
-
-            updatedBusinessAttributes.put(bmName, attributes);
-        }
-
-        attributes.put(bmAttribute.getName(), attrValue);
-    }
-
-    private void createAndQueueTask(String taskType, AtlasVertex entityVertex, String classificationVertexId) {
-        deleteDelegate.getHandler().createAndQueueTask(taskType, entityVertex, classificationVertexId, null);
-    }
-}
\ No newline at end of file
+}