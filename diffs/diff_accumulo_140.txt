diff --git a/server/src/main/java/org/apache/accumulo/server/security/SecurityOperation.java b/server/src/main/java/org/apache/accumulo/server/security/SecurityOperation.java
index 2b9833188d..dbb850a8d4 100644
--- a/server/src/main/java/org/apache/accumulo/server/security/SecurityOperation.java
+++ b/server/src/main/java/org/apache/accumulo/server/security/SecurityOperation.java
@@ -1,4 +1,4 @@
-/*
+/**
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -16,33 +16,23 @@
  */
 package org.apache.accumulo.server.security;
 
-import java.nio.ByteBuffer;
-import java.util.List;
-import java.util.Map;
 import java.util.Set;
 
 import org.apache.accumulo.core.Constants;
 import org.apache.accumulo.core.client.AccumuloSecurityException;
 import org.apache.accumulo.core.client.TableNotFoundException;
 import org.apache.accumulo.core.client.admin.SecurityOperationsImpl;
-import org.apache.accumulo.core.client.impl.thrift.SecurityErrorCode;
-import org.apache.accumulo.core.client.impl.thrift.ThriftSecurityException;
-import org.apache.accumulo.core.client.security.tokens.AuthenticationToken;
+import org.apache.accumulo.core.client.impl.thrift.ThriftTableOperationException;
+import org.apache.accumulo.core.conf.AccumuloConfiguration;
 import org.apache.accumulo.core.conf.Property;
-import org.apache.accumulo.core.data.thrift.IterInfo;
-import org.apache.accumulo.core.data.thrift.TColumn;
-import org.apache.accumulo.core.data.thrift.TKeyExtent;
-import org.apache.accumulo.core.data.thrift.TRange;
-import org.apache.accumulo.core.master.thrift.TableOperation;
-import org.apache.accumulo.core.metadata.MetadataTable;
-import org.apache.accumulo.core.metadata.RootTable;
 import org.apache.accumulo.core.security.Authorizations;
-import org.apache.accumulo.core.security.CredentialHelper;
 import org.apache.accumulo.core.security.SystemPermission;
 import org.apache.accumulo.core.security.TablePermission;
-import org.apache.accumulo.core.security.thrift.TCredentials;
+import org.apache.accumulo.core.security.thrift.SecurityErrorCode;
+import org.apache.accumulo.core.security.thrift.ThriftSecurityException;
+import org.apache.accumulo.core.security.tokens.AccumuloToken;
+import org.apache.accumulo.core.security.tokens.InstanceTokenWrapper;
 import org.apache.accumulo.server.client.HdfsZooInstance;
-import org.apache.accumulo.server.conf.ServerConfiguration;
 import org.apache.accumulo.server.master.Master;
 import org.apache.accumulo.server.security.handler.Authenticator;
 import org.apache.accumulo.server.security.handler.Authorizor;
@@ -51,7 +41,6 @@ import org.apache.accumulo.server.security.handler.ZKAuthenticator;
 import org.apache.accumulo.server.security.handler.ZKAuthorizor;
 import org.apache.accumulo.server.security.handler.ZKPermHandler;
 import org.apache.accumulo.server.zookeeper.ZooCache;
-import org.apache.hadoop.io.Text;
 import org.apache.log4j.Logger;
 
 /**
@@ -60,9 +49,9 @@ import org.apache.log4j.Logger;
 public class SecurityOperation {
   private static final Logger log = Logger.getLogger(SecurityOperationsImpl.class);
   
-  protected Authorizor authorizor;
-  protected Authenticator authenticator;
-  protected PermissionHandler permHandle;
+  protected static Authorizor authorizor;
+  protected static Authenticator authenticator;
+  protected static PermissionHandler permHandle;
   private static String rootUserName = null;
   private final ZooCache zooCache;
   private final String ZKUserPath;
@@ -82,28 +71,35 @@ public class SecurityOperation {
     return instance;
   }
   
+  @SuppressWarnings("deprecation")
   protected static Authorizor getAuthorizor(String instanceId, boolean initialize) {
-    Authorizor toRet = Master.createInstanceFromPropertyName(ServerConfiguration.getSiteConfiguration(), Property.INSTANCE_SECURITY_AUTHORIZOR,
+    Authorizor toRet = Master.createInstanceFromPropertyName(AccumuloConfiguration.getSiteConfiguration(), Property.INSTANCE_SECURITY_AUTHORIZOR,
         Authorizor.class, ZKAuthorizor.getInstance());
     toRet.initialize(instanceId, initialize);
     return toRet;
   }
   
+  @SuppressWarnings("deprecation")
   protected static Authenticator getAuthenticator(String instanceId, boolean initialize) {
-    Authenticator toRet = Master.createInstanceFromPropertyName(ServerConfiguration.getSiteConfiguration(), Property.INSTANCE_SECURITY_AUTHENTICATOR,
+    Authenticator toRet = Master.createInstanceFromPropertyName(AccumuloConfiguration.getSiteConfiguration(), Property.INSTANCE_SECURITY_AUTHENTICATOR,
         Authenticator.class, ZKAuthenticator.getInstance());
     toRet.initialize(instanceId, initialize);
     return toRet;
   }
   
+  @SuppressWarnings("deprecation")
   protected static PermissionHandler getPermHandler(String instanceId, boolean initialize) {
-    PermissionHandler toRet = Master.createInstanceFromPropertyName(ServerConfiguration.getSiteConfiguration(), Property.INSTANCE_SECURITY_PERMISSION_HANDLER,
-        PermissionHandler.class, ZKPermHandler.getInstance());
+    PermissionHandler toRet = Master.createInstanceFromPropertyName(AccumuloConfiguration.getSiteConfiguration(),
+        Property.INSTANCE_SECURITY_PERMISSION_HANDLER, PermissionHandler.class, ZKPermHandler.getInstance());
     toRet.initialize(instanceId, initialize);
     return toRet;
   }
   
-  protected SecurityOperation(String instanceId) {
+  /**
+   * 
+   * @Deprecated not for client use
+   */
+  public SecurityOperation(String instanceId) {
     ZKUserPath = Constants.ZROOT + "/" + instanceId + "/users";
     zooCache = new ZooCache();
   }
@@ -120,17 +116,17 @@ public class SecurityOperation {
           + " do not play nice with eachother. Please choose authentication and authorization mechanisms that are compatible with one another.");
   }
   
-  public void initializeSecurity(TCredentials credentials, String rootPrincipal, byte[] token) throws AccumuloSecurityException, ThriftSecurityException {
+  public void initializeSecurity(InstanceTokenWrapper credentials, AccumuloToken<?,?> rootToken) throws AccumuloSecurityException, ThriftSecurityException {
     authenticate(credentials);
     
-    if (!isSystemUser(credentials))
+    if (!credentials.getPrincipal().equals(SecurityConstants.SYSTEM_USERNAME))
       throw new AccumuloSecurityException(credentials.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);
     
-    authenticator.initializeSecurity(credentials, rootPrincipal, token);
-    authorizor.initializeSecurity(credentials, rootPrincipal);
-    permHandle.initializeSecurity(credentials, rootPrincipal);
+    authenticator.initializeSecurity(credentials, rootToken);
+    authorizor.initializeSecurity(credentials, rootToken.getPrincipal());
+    permHandle.initializeSecurity(credentials, rootToken.getPrincipal());
     try {
-      permHandle.grantTablePermission(rootPrincipal, MetadataTable.ID, TablePermission.ALTER_TABLE);
+      permHandle.grantTablePermission(rootToken.getPrincipal(), Constants.METADATA_TABLE_ID, TablePermission.ALTER_TABLE);
     } catch (TableNotFoundException e) {
       // Shouldn't happen
       throw new RuntimeException(e);
@@ -143,70 +139,70 @@ public class SecurityOperation {
     return rootUserName;
   }
   
-  public boolean isSystemUser(TCredentials credentials) {
-    return SystemCredentials.get().getToken().getClass().getName().equals(credentials.getTokenClassName());
-  }
-  
-  private void authenticate(TCredentials credentials) throws ThriftSecurityException {
-    if (!credentials.getInstanceId().equals(HdfsZooInstance.getInstance().getInstanceID()))
+  private void authenticate(InstanceTokenWrapper credentials) throws ThriftSecurityException {
+    if (!credentials.getInstance().equals(HdfsZooInstance.getInstance().getInstanceID()))
       throw new ThriftSecurityException(credentials.getPrincipal(), SecurityErrorCode.INVALID_INSTANCEID);
     
-    if (isSystemUser(credentials)) {
-      authenticateSystemUser(credentials);
-    } else {
-      try {
-        AuthenticationToken token = reassembleToken(credentials);
-        if (!authenticator.authenticateUser(credentials.getPrincipal(), token)) {
-          throw new ThriftSecurityException(credentials.getPrincipal(), SecurityErrorCode.BAD_CREDENTIALS);
-        }
-      } catch (AccumuloSecurityException e) {
-        log.debug(e);
-        throw e.asThriftException();
+    if (SecurityConstants.getSystemCredentials().equals(credentials))
+      return;
+    else if (credentials.getPrincipal().equals(SecurityConstants.SYSTEM_USERNAME)) {
+      throw new ThriftSecurityException(credentials.getPrincipal(), SecurityErrorCode.BAD_CREDENTIALS);
+    }
+        
+    try {
+      if (!authenticator.authenticateUser(credentials.getToken())) {
+        throw new ThriftSecurityException(credentials.getPrincipal(), SecurityErrorCode.BAD_CREDENTIALS);
       }
+    } catch (AccumuloSecurityException e) {
+      log.debug(e);
+      throw e.asThriftException();
     }
   }
   
-  private void authenticateSystemUser(TCredentials credentials) throws ThriftSecurityException {
-    if (SystemCredentials.get().getToken().equals(credentials.getToken()))
-      throw new ThriftSecurityException(credentials.getPrincipal(), SecurityErrorCode.BAD_CREDENTIALS);
-  }
-  
-  public boolean canAskAboutUser(TCredentials credentials, String user) throws ThriftSecurityException {
+  public boolean canAskAboutUser(InstanceTokenWrapper credentials, String user) throws ThriftSecurityException {
     // Authentication done in canPerformSystemActions
     if (!(canPerformSystemActions(credentials) || credentials.getPrincipal().equals(user)))
       throw new ThriftSecurityException(credentials.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);
     return true;
   }
   
-  public boolean authenticateUser(TCredentials credentials, TCredentials toAuth) throws ThriftSecurityException {
-    canAskAboutUser(credentials, toAuth.getPrincipal());
-    // User is already authenticated from canAskAboutUser
-    if (credentials.equals(toAuth))
+  /**
+   * @param credentials
+   * @param user
+   * @param password
+   * @return
+   * @throws ThriftSecurityException
+   */
+  public boolean authenticateUser(InstanceTokenWrapper credentials, AccumuloToken<?,?> token) throws ThriftSecurityException {
+    canAskAboutUser(credentials, token.getPrincipal());
+    // User is already authenticated from canAskAboutUser, this gets around issues with !SYSTEM user
+    if (credentials.getToken().equals(token))
       return true;
     try {
-      AuthenticationToken token = reassembleToken(toAuth);
-      return authenticator.authenticateUser(toAuth.getPrincipal(), token);
+      return authenticator.authenticateUser(token);
     } catch (AccumuloSecurityException e) {
       throw e.asThriftException();
     }
   }
   
-  private AuthenticationToken reassembleToken(TCredentials toAuth) throws AccumuloSecurityException {
-    String tokenClass = toAuth.getTokenClassName();
-    if (authenticator.validTokenClass(tokenClass)) {
-      return CredentialHelper.extractToken(toAuth);
-    }
-    throw new AccumuloSecurityException(toAuth.getPrincipal(), SecurityErrorCode.INVALID_TOKEN);
-  }
-  
-  public Authorizations getUserAuthorizations(TCredentials credentials, String user) throws ThriftSecurityException {
+  /**
+   * @param credentials
+   * @param user
+   * @return The given user's authorizations
+   * @throws ThriftSecurityException
+   */
+  public Authorizations getUserAuthorizations(InstanceTokenWrapper credentials, String user) throws ThriftSecurityException {
     authenticate(credentials);
     
     targetUserExists(user);
     
-    if (!credentials.getPrincipal().equals(user) && !hasSystemPermission(credentials, SystemPermission.SYSTEM, false))
+    if (!credentials.getPrincipal().equals(user) && !hasSystemPermission(credentials.getPrincipal(), SystemPermission.SYSTEM, false))
       throw new ThriftSecurityException(credentials.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);
     
+    // system user doesn't need record-level authorizations for the tables it reads (for now)
+    if (user.equals(SecurityConstants.SYSTEM_USERNAME))
+      return Constants.NO_AUTHS;
+    
     try {
       return authorizor.getCachedUserAuthorizations(user);
     } catch (AccumuloSecurityException e) {
@@ -214,34 +210,22 @@ public class SecurityOperation {
     }
   }
   
-  public Authorizations getUserAuthorizations(TCredentials credentials) throws ThriftSecurityException {
-    // system user doesn't need record-level authorizations for the tables it reads
-    if (isSystemUser(credentials)) {
-      authenticate(credentials);
-      return Authorizations.EMPTY;
-    }
-    return getUserAuthorizations(credentials, credentials.getPrincipal());
-  }
-  
   /**
-   * Checks if a user has a system permission
-   * 
-   * @return true if a user exists and has permission; false otherwise
+   * @param credentials
+   * @return
+   * @throws ThriftSecurityException
    */
-  private boolean hasSystemPermission(TCredentials credentials, SystemPermission permission, boolean useCached) throws ThriftSecurityException {
-    if (isSystemUser(credentials))
-      return true;
-    return _hasSystemPermission(credentials.getPrincipal(), permission, useCached);
+  public Authorizations getUserAuthorizations(InstanceTokenWrapper credentials) throws ThriftSecurityException {
+    return getUserAuthorizations(credentials, credentials.getPrincipal());
   }
   
   /**
-   * Checks if a user has a system permission<br/>
-   * This cannot check if a system user has permission.
+   * Checks if a user has a system permission
    * 
    * @return true if a user exists and has permission; false otherwise
    */
-  private boolean _hasSystemPermission(String user, SystemPermission permission, boolean useCached) throws ThriftSecurityException {
-    if (user.equals(getRootUsername()))
+  private boolean hasSystemPermission(String user, SystemPermission permission, boolean useCached) throws ThriftSecurityException {
+    if (user.equals(getRootUsername()) || user.equals(SecurityConstants.SYSTEM_USERNAME))
       return true;
     
     targetUserExists(user);
@@ -259,23 +243,15 @@ public class SecurityOperation {
    * Checks if a user has a table permission
    * 
    * @return true if a user exists and has permission; false otherwise
+   * @throws ThriftTableOperationException
    */
-  protected boolean hasTablePermission(TCredentials credentials, String table, TablePermission permission, boolean useCached) throws ThriftSecurityException {
-    if (isSystemUser(credentials))
+  private boolean hasTablePermission(String user, String table, TablePermission permission, boolean useCached) throws ThriftSecurityException {
+    if (user.equals(SecurityConstants.SYSTEM_USERNAME))
       return true;
-    return _hasTablePermission(credentials.getPrincipal(), table, permission, useCached);
-  }
-  
-  /**
-   * Checks if a user has a table permission<br/>
-   * This cannot check if a system user has permission.
-   * 
-   * @return true if a user exists and has permission; false otherwise
-   */
-  protected boolean _hasTablePermission(String user, String table, TablePermission permission, boolean useCached) throws ThriftSecurityException {
+    
     targetUserExists(user);
     
-    if ((table.equals(MetadataTable.ID) || table.equals(RootTable.ID)) && permission.equals(TablePermission.READ))
+    if (table.equals(Constants.METADATA_TABLE_ID) && permission.equals(TablePermission.READ))
       return true;
     
     try {
@@ -290,16 +266,22 @@ public class SecurityOperation {
   }
   
   // some people just aren't allowed to ask about other users; here are those who can ask
-  private boolean canAskAboutOtherUsers(TCredentials credentials, String user) throws ThriftSecurityException {
+  private boolean canAskAboutOtherUsers(InstanceTokenWrapper credentials, String user) throws ThriftSecurityException {
     authenticate(credentials);
-    return credentials.getPrincipal().equals(user) || hasSystemPermission(credentials, SystemPermission.SYSTEM, false)
-        || hasSystemPermission(credentials, SystemPermission.CREATE_USER, false) || hasSystemPermission(credentials, SystemPermission.ALTER_USER, false)
-        || hasSystemPermission(credentials, SystemPermission.DROP_USER, false);
+    return credentials.getPrincipal().equals(user) || hasSystemPermission(credentials.getPrincipal(), SystemPermission.SYSTEM, false)
+        || hasSystemPermission(credentials.getPrincipal(), SystemPermission.CREATE_USER, false)
+        || hasSystemPermission(credentials.getPrincipal(), SystemPermission.ALTER_USER, false)
+        || hasSystemPermission(credentials.getPrincipal(), SystemPermission.DROP_USER, false);
   }
   
+  /**
+   * @param user
+   * @throws ThriftSecurityException
+   */
   private void targetUserExists(String user) throws ThriftSecurityException {
-    if (user.equals(getRootUsername()))
+    if (user.equals(SecurityConstants.SYSTEM_USERNAME) || user.equals(getRootUsername()))
       return;
+    
     try {
       if (!authenticator.userExists(user))
         throw new ThriftSecurityException(user, SecurityErrorCode.USER_DOESNT_EXIST);
@@ -308,160 +290,334 @@ public class SecurityOperation {
     }
   }
   
-  public boolean canScan(TCredentials credentials, String table) throws ThriftSecurityException {
+  /**
+   * @param credentials
+   * @param string
+   * @return
+   * @throws ThriftSecurityException
+   * @throws TableNotFoundException
+   */
+  public boolean canScan(InstanceTokenWrapper credentials, String table) throws ThriftSecurityException {
     authenticate(credentials);
-    return hasTablePermission(credentials, table, TablePermission.READ, true);
-  }
-  
-  public boolean canScan(TCredentials credentials, String table, TRange range, List<TColumn> columns, List<IterInfo> ssiList,
-      Map<String,Map<String,String>> ssio, List<ByteBuffer> authorizations) throws ThriftSecurityException {
-    return canScan(credentials, table);
-  }
-  
-  public boolean canScan(TCredentials credentials, String table, Map<TKeyExtent,List<TRange>> tbatch, List<TColumn> tcolumns, List<IterInfo> ssiList,
-      Map<String,Map<String,String>> ssio, List<ByteBuffer> authorizations) throws ThriftSecurityException {
-    return canScan(credentials, table);
+    return hasTablePermission(credentials.getPrincipal(), table, TablePermission.READ, true);
   }
   
-  public boolean canWrite(TCredentials credentials, String table) throws ThriftSecurityException {
+  /**
+   * @param credentials
+   * @param string
+   * @return
+   * @throws ThriftSecurityException
+   * @throws TableNotFoundException
+   */
+  public boolean canWrite(InstanceTokenWrapper credentials, String table) throws ThriftSecurityException {
     authenticate(credentials);
-    return hasTablePermission(credentials, table, TablePermission.WRITE, true);
+    return hasTablePermission(credentials.getPrincipal(), table, TablePermission.WRITE, true);
   }
   
-  public boolean canSplitTablet(TCredentials credentials, String table) throws ThriftSecurityException {
+  /**
+   * @param credentials
+   * @param string
+   * @return
+   * @throws ThriftSecurityException
+   * @throws TableNotFoundException
+   */
+  public boolean canSplitTablet(InstanceTokenWrapper credentials, String table) throws ThriftSecurityException {
     authenticate(credentials);
-    return hasSystemPermission(credentials, SystemPermission.ALTER_TABLE, false) || hasSystemPermission(credentials, SystemPermission.SYSTEM, false)
-        || hasTablePermission(credentials, table, TablePermission.ALTER_TABLE, false);
+    return hasSystemPermission(credentials.getPrincipal(), SystemPermission.ALTER_TABLE, false)
+        || hasSystemPermission(credentials.getPrincipal(), SystemPermission.SYSTEM, false)
+        || hasTablePermission(credentials.getPrincipal(), table, TablePermission.ALTER_TABLE, false);
   }
   
   /**
-   * This is the check to perform any system action. This includes tserver's loading of a tablet, shutting the system down, or altering system properties.
+   * @param credentials
+   * @return
+   * @throws ThriftSecurityException
+   * 
+   *           This is the check to perform any system action. This includes tserver's loading of a tablet, shutting the system down, or altering system
+   *           properties.
    */
-  public boolean canPerformSystemActions(TCredentials credentials) throws ThriftSecurityException {
+  public boolean canPerformSystemActions(InstanceTokenWrapper credentials) throws ThriftSecurityException {
     authenticate(credentials);
-    return hasSystemPermission(credentials, SystemPermission.SYSTEM, false);
+    return hasSystemPermission(credentials.getPrincipal(), SystemPermission.SYSTEM, false);
   }
   
-  public boolean canFlush(TCredentials c, String tableId) throws ThriftSecurityException {
+  /**
+   * @param c
+   * @param tableId
+   * @throws ThriftSecurityException
+   * @throws ThriftTableOperationException
+   */
+  public boolean canFlush(InstanceTokenWrapper c, String tableId) throws ThriftSecurityException {
     authenticate(c);
-    return hasTablePermission(c, tableId, TablePermission.WRITE, false) || hasTablePermission(c, tableId, TablePermission.ALTER_TABLE, false);
+    return hasTablePermission(c.getPrincipal(), tableId, TablePermission.WRITE, false)
+        || hasTablePermission(c.getPrincipal(), tableId, TablePermission.ALTER_TABLE, false);
   }
   
-  public boolean canAlterTable(TCredentials c, String tableId) throws ThriftSecurityException {
+  /**
+   * @param c
+   * @param tableId
+   * @throws ThriftSecurityException
+   * @throws ThriftTableOperationException
+   */
+  public boolean canAlterTable(InstanceTokenWrapper c, String tableId) throws ThriftSecurityException {
     authenticate(c);
-    return hasTablePermission(c, tableId, TablePermission.ALTER_TABLE, false) || hasSystemPermission(c, SystemPermission.ALTER_TABLE, false);
+    return hasTablePermission(c.getPrincipal(), tableId, TablePermission.ALTER_TABLE, false)
+        || hasSystemPermission(c.getPrincipal(), SystemPermission.ALTER_TABLE, false);
   }
   
-  public boolean canCreateTable(TCredentials c, String tableName) throws ThriftSecurityException {
-    return canCreateTable(c);
-  }
-  
-  public boolean canCreateTable(TCredentials c) throws ThriftSecurityException {
+  /**
+   * @param c
+   * @throws ThriftSecurityException
+   */
+  public boolean canCreateTable(InstanceTokenWrapper c) throws ThriftSecurityException {
     authenticate(c);
-    return hasSystemPermission(c, SystemPermission.CREATE_TABLE, false);
+    return hasSystemPermission(c.getPrincipal(), SystemPermission.CREATE_TABLE, false);
   }
   
-  public boolean canRenameTable(TCredentials c, String tableId, String oldTableName, String newTableName) throws ThriftSecurityException {
+  /**
+   * @param c
+   * @param tableId
+   * @return
+   * @throws TableNotFoundException
+   * @throws ThriftSecurityException
+   */
+  public boolean canRenameTable(InstanceTokenWrapper c, String tableId) throws ThriftSecurityException {
     authenticate(c);
-    return hasSystemPermission(c, SystemPermission.ALTER_TABLE, false) || hasTablePermission(c, tableId, TablePermission.ALTER_TABLE, false);
+    return hasSystemPermission(c.getPrincipal(), SystemPermission.ALTER_TABLE, false)
+        || hasTablePermission(c.getPrincipal(), tableId, TablePermission.ALTER_TABLE, false);
   }
   
-  public boolean canCloneTable(TCredentials c, String tableId, String tableName) throws ThriftSecurityException {
+  /**
+   * @param c
+   * @return
+   * @throws TableNotFoundException
+   * @throws ThriftSecurityException
+   */
+  public boolean canCloneTable(InstanceTokenWrapper c, String tableId) throws ThriftSecurityException {
     authenticate(c);
-    return hasSystemPermission(c, SystemPermission.CREATE_TABLE, false) && hasTablePermission(c, tableId, TablePermission.READ, false);
+    return hasSystemPermission(c.getPrincipal(), SystemPermission.CREATE_TABLE, false)
+        && hasTablePermission(c.getPrincipal(), tableId, TablePermission.READ, false);
   }
   
-  public boolean canDeleteTable(TCredentials c, String tableId) throws ThriftSecurityException {
+  /**
+   * @param c
+   * @param tableId
+   * @return
+   * @throws TableNotFoundException
+   * @throws ThriftSecurityException
+   */
+  public boolean canDeleteTable(InstanceTokenWrapper c, String tableId) throws ThriftSecurityException {
     authenticate(c);
-    return hasSystemPermission(c, SystemPermission.DROP_TABLE, false) || hasTablePermission(c, tableId, TablePermission.DROP_TABLE, false);
+    return hasSystemPermission(c.getPrincipal(), SystemPermission.DROP_TABLE, false)
+        || hasTablePermission(c.getPrincipal(), tableId, TablePermission.DROP_TABLE, false);
   }
   
-  public boolean canOnlineOfflineTable(TCredentials c, String tableId, TableOperation op) throws ThriftSecurityException {
+  /**
+   * @param c
+   * @param tableId
+   * @return
+   * @throws TableNotFoundException
+   * @throws ThriftSecurityException
+   */
+  public boolean canOnlineOfflineTable(InstanceTokenWrapper c, String tableId) throws ThriftSecurityException {
     authenticate(c);
-    return hasSystemPermission(c, SystemPermission.SYSTEM, false) || hasSystemPermission(c, SystemPermission.ALTER_TABLE, false)
-        || hasTablePermission(c, tableId, TablePermission.ALTER_TABLE, false);
+    return hasSystemPermission(c.getPrincipal(), SystemPermission.SYSTEM, false) || hasSystemPermission(c.getPrincipal(), SystemPermission.ALTER_TABLE, false)
+        || hasTablePermission(c.getPrincipal(), tableId, TablePermission.ALTER_TABLE, false);
   }
   
-  public boolean canMerge(TCredentials c, String tableId) throws ThriftSecurityException {
+  /**
+   * @param c
+   * @param tableId
+   * @return
+   * @throws TableNotFoundException
+   * @throws ThriftSecurityException
+   */
+  public boolean canMerge(InstanceTokenWrapper c, String tableId) throws ThriftSecurityException {
     authenticate(c);
-    return hasSystemPermission(c, SystemPermission.SYSTEM, false) || hasSystemPermission(c, SystemPermission.ALTER_TABLE, false)
-        || hasTablePermission(c, tableId, TablePermission.ALTER_TABLE, false);
+    return hasSystemPermission(c.getPrincipal(), SystemPermission.SYSTEM, false) || hasSystemPermission(c.getPrincipal(), SystemPermission.ALTER_TABLE, false)
+        || hasTablePermission(c.getPrincipal(), tableId, TablePermission.ALTER_TABLE, false);
   }
   
-  public boolean canDeleteRange(TCredentials c, String tableId, String tableName, Text startRow, Text endRow) throws ThriftSecurityException {
+  /**
+   * @param c
+   * @param tableId
+   * @return
+   * @throws TableNotFoundException
+   * @throws ThriftSecurityException
+   */
+  public boolean canDeleteRange(InstanceTokenWrapper c, String tableId) throws ThriftSecurityException {
     authenticate(c);
-    return hasSystemPermission(c, SystemPermission.SYSTEM, false) || hasTablePermission(c, tableId, TablePermission.WRITE, false);
+    return hasSystemPermission(c.getPrincipal(), SystemPermission.SYSTEM, false) || hasTablePermission(c.getPrincipal(), tableId, TablePermission.WRITE, false);
   }
   
-  public boolean canBulkImport(TCredentials c, String tableId, String tableName, String dir, String failDir) throws ThriftSecurityException {
-    return canBulkImport(c, tableId);
-  }
-  
-  public boolean canBulkImport(TCredentials c, String tableId) throws ThriftSecurityException {
+  /**
+   * @param c
+   * @param tableId
+   * @return
+   * @throws TableNotFoundException
+   * @throws ThriftSecurityException
+   */
+  public boolean canBulkImport(InstanceTokenWrapper c, String tableId) throws ThriftSecurityException {
     authenticate(c);
-    return hasTablePermission(c, tableId, TablePermission.BULK_IMPORT, false);
+    return hasTablePermission(c.getPrincipal(), tableId, TablePermission.BULK_IMPORT, false);
   }
   
-  public boolean canCompact(TCredentials c, String tableId) throws ThriftSecurityException {
+  /**
+   * @param c
+   * @param tableId
+   * @return
+   * @throws TableNotFoundException
+   * @throws ThriftSecurityException
+   */
+  public boolean canCompact(InstanceTokenWrapper c, String tableId) throws ThriftSecurityException {
     authenticate(c);
-    return hasSystemPermission(c, SystemPermission.ALTER_TABLE, false) || hasTablePermission(c, tableId, TablePermission.ALTER_TABLE, false)
-        || hasTablePermission(c, tableId, TablePermission.WRITE, false);
+    return hasSystemPermission(c.getPrincipal(), SystemPermission.ALTER_TABLE, false)
+        || hasTablePermission(c.getPrincipal(), tableId, TablePermission.ALTER_TABLE, false)
+        || hasTablePermission(c.getPrincipal(), tableId, TablePermission.WRITE, false);
   }
   
-  public boolean canChangeAuthorizations(TCredentials c, String user) throws ThriftSecurityException {
+  /**
+   * @param credentials
+   * @return
+   * @throws ThriftSecurityException
+   */
+  public boolean canChangeAuthorizations(InstanceTokenWrapper c, String user) throws ThriftSecurityException {
     authenticate(c);
-    return hasSystemPermission(c, SystemPermission.ALTER_USER, false);
+    if (user.equals(SecurityConstants.SYSTEM_USERNAME))
+      throw new ThriftSecurityException(c.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);
+    return hasSystemPermission(c.getPrincipal(), SystemPermission.ALTER_USER, false);
   }
   
-  public boolean canChangePassword(TCredentials c, String user) throws ThriftSecurityException {
+  /**
+   * @param credentials
+   * @param user
+   * @return
+   * @throws ThriftSecurityException
+   */
+  public boolean canChangePassword(InstanceTokenWrapper c, String user) throws ThriftSecurityException {
     authenticate(c);
-    return c.getPrincipal().equals(user) || hasSystemPermission(c, SystemPermission.ALTER_USER, false);
+    if (user.equals(SecurityConstants.SYSTEM_USERNAME))
+      throw new ThriftSecurityException(c.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);
+    return c.getPrincipal().equals(user) || hasSystemPermission(c.getPrincipal(), SystemPermission.ALTER_USER, false);
   }
   
-  public boolean canCreateUser(TCredentials c, String user) throws ThriftSecurityException {
+  /**
+   * @param credentials
+   * @param user
+   * @return
+   * @throws ThriftSecurityException
+   */
+  public boolean canCreateUser(InstanceTokenWrapper c, String user) throws ThriftSecurityException {
     authenticate(c);
-    return hasSystemPermission(c, SystemPermission.CREATE_USER, false);
+    
+    // don't allow creating a user with the same name as system user
+    if (user.equals(SecurityConstants.SYSTEM_USERNAME))
+      throw new ThriftSecurityException(c.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);
+    
+    return hasSystemPermission(c.getPrincipal(), SystemPermission.CREATE_USER, false);
   }
   
-  public boolean canDropUser(TCredentials c, String user) throws ThriftSecurityException {
+  /**
+   * @param credentials
+   * @param user
+   * @return
+   * @throws ThriftSecurityException
+   */
+  public boolean canDropUser(InstanceTokenWrapper c, String user) throws ThriftSecurityException {
     authenticate(c);
-    if (user.equals(getRootUsername()))
+    
+    // can't delete root or system users
+    if (user.equals(getRootUsername()) || user.equals(SecurityConstants.SYSTEM_USERNAME))
       throw new ThriftSecurityException(c.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);
-    return hasSystemPermission(c, SystemPermission.DROP_USER, false);
+    
+    return hasSystemPermission(c.getPrincipal(), SystemPermission.DROP_USER, false);
   }
   
-  public boolean canGrantSystem(TCredentials c, String user, SystemPermission sysPerm) throws ThriftSecurityException {
+  /**
+   * @param credentials
+   * @param user
+   * @param sysPerm
+   * @return
+   * @throws ThriftSecurityException
+   */
+  public boolean canGrantSystem(InstanceTokenWrapper c, String user, SystemPermission sysPerm) throws ThriftSecurityException {
     authenticate(c);
+    
+    // can't modify system user
+    if (user.equals(SecurityConstants.SYSTEM_USERNAME))
+      throw new ThriftSecurityException(c.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);
+    
     // can't grant GRANT
     if (sysPerm.equals(SystemPermission.GRANT))
       throw new ThriftSecurityException(c.getPrincipal(), SecurityErrorCode.GRANT_INVALID);
-    return hasSystemPermission(c, SystemPermission.GRANT, false);
+    
+    return hasSystemPermission(c.getPrincipal(), SystemPermission.GRANT, false);
   }
   
-  public boolean canGrantTable(TCredentials c, String user, String table) throws ThriftSecurityException {
+  /**
+   * @param credentials
+   * @param user
+   * @param table
+   * @return
+   * @throws ThriftSecurityException
+   */
+  public boolean canGrantTable(InstanceTokenWrapper c, String user, String table) throws ThriftSecurityException {
     authenticate(c);
-    return hasSystemPermission(c, SystemPermission.ALTER_TABLE, false) || hasTablePermission(c, table, TablePermission.GRANT, false);
+    
+    // can't modify system user
+    if (user.equals(SecurityConstants.SYSTEM_USERNAME))
+      throw new ThriftSecurityException(c.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);
+    
+    return hasSystemPermission(c.getPrincipal(), SystemPermission.ALTER_TABLE, false)
+        || hasTablePermission(c.getPrincipal(), table, TablePermission.GRANT, false);
   }
   
-  public boolean canRevokeSystem(TCredentials c, String user, SystemPermission sysPerm) throws ThriftSecurityException {
+  /**
+   * @param credentials
+   * @param user
+   * @param sysPerm
+   * @return
+   * @throws ThriftSecurityException
+   */
+  public boolean canRevokeSystem(InstanceTokenWrapper c, String user, SystemPermission sysPerm) throws ThriftSecurityException {
     authenticate(c);
-    // can't modify root user
-    if (user.equals(getRootUsername()))
+    
+    // can't modify system or root user
+    if (user.equals(getRootUsername()) || user.equals(SecurityConstants.SYSTEM_USERNAME))
       throw new ThriftSecurityException(c.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);
     
     // can't revoke GRANT
     if (sysPerm.equals(SystemPermission.GRANT))
       throw new ThriftSecurityException(c.getPrincipal(), SecurityErrorCode.GRANT_INVALID);
     
-    return hasSystemPermission(c, SystemPermission.GRANT, false);
+    return hasSystemPermission(c.getPrincipal(), SystemPermission.GRANT, false);
   }
   
-  public boolean canRevokeTable(TCredentials c, String user, String table) throws ThriftSecurityException {
+  /**
+   * @param credentials
+   * @param user
+   * @param table
+   * @return
+   * @throws ThriftSecurityException
+   */
+  public boolean canRevokeTable(InstanceTokenWrapper c, String user, String table) throws ThriftSecurityException {
     authenticate(c);
-    return hasSystemPermission(c, SystemPermission.ALTER_TABLE, false) || hasTablePermission(c, table, TablePermission.GRANT, false);
+    
+    // can't modify system user
+    if (user.equals(SecurityConstants.SYSTEM_USERNAME))
+      throw new ThriftSecurityException(c.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);
+    
+    return hasSystemPermission(c.getPrincipal(), SystemPermission.ALTER_TABLE, false)
+        || hasTablePermission(c.getPrincipal(), table, TablePermission.GRANT, false);
   }
   
-  public void changeAuthorizations(TCredentials credentials, String user, Authorizations authorizations) throws ThriftSecurityException {
+  /**
+   * @param credentials
+   * @param user
+   * @param authorizations
+   * @throws ThriftSecurityException
+   */
+  public void changeAuthorizations(InstanceTokenWrapper credentials, String user, Authorizations authorizations) throws ThriftSecurityException {
     if (!canChangeAuthorizations(credentials, user))
       throw new ThriftSecurityException(credentials.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);
     
@@ -475,35 +631,51 @@ public class SecurityOperation {
     }
   }
   
-  public void changePassword(TCredentials credentials, TCredentials toChange) throws ThriftSecurityException {
-    if (!canChangePassword(credentials, toChange.getPrincipal()))
+  /**
+   * @param credentials
+   * @param user
+   * @param bytes
+   * @throws ThriftSecurityException
+   */
+  public void changePassword(InstanceTokenWrapper credentials, AccumuloToken<?,?> token) throws ThriftSecurityException {
+    if (!canChangePassword(credentials, token.getPrincipal()))
       throw new ThriftSecurityException(credentials.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);
     try {
-      AuthenticationToken token = reassembleToken(toChange);
-      authenticator.changePassword(toChange.getPrincipal(), token);
-      log.info("Changed password for user " + toChange.getPrincipal() + " at the request of user " + credentials.getPrincipal());
+      authenticator.changePassword(token);
+      log.info("Changed password for user " + token.getPrincipal() + " at the request of user " + credentials.getPrincipal());
     } catch (AccumuloSecurityException e) {
       throw e.asThriftException();
     }
   }
   
-  public void createUser(TCredentials credentials, TCredentials newUser, Authorizations authorizations) throws ThriftSecurityException {
-    if (!canCreateUser(credentials, newUser.getPrincipal()))
+  /**
+   * @param credentials
+   * @param user
+   * @param bytes
+   * @param authorizations
+   * @throws ThriftSecurityException
+   */
+  public void createUser(InstanceTokenWrapper credentials, AccumuloToken<?,?> token, Authorizations authorizations) throws ThriftSecurityException {
+    if (!canCreateUser(credentials, token.getPrincipal()))
       throw new ThriftSecurityException(credentials.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);
     try {
-      AuthenticationToken token = reassembleToken(newUser);
-      authenticator.createUser(newUser.getPrincipal(), token);
-      authorizor.initUser(newUser.getPrincipal());
-      permHandle.initUser(newUser.getPrincipal());
-      log.info("Created user " + newUser.getPrincipal() + " at the request of user " + credentials.getPrincipal());
-      if (canChangeAuthorizations(credentials, newUser.getPrincipal()))
-        authorizor.changeAuthorizations(newUser.getPrincipal(), authorizations);
+      authenticator.createUser(token);
+      authorizor.initUser(token.getPrincipal());
+      permHandle.initUser(token.getPrincipal());
+      log.info("Created user " + token.getPrincipal() + " at the request of user " + credentials.getPrincipal());
+      if (canChangeAuthorizations(credentials, token.getPrincipal()))
+        authorizor.changeAuthorizations(token.getPrincipal(), authorizations);
     } catch (AccumuloSecurityException ase) {
       throw ase.asThriftException();
     }
   }
   
-  public void dropUser(TCredentials credentials, String user) throws ThriftSecurityException {
+  /**
+   * @param credentials
+   * @param user
+   * @throws ThriftSecurityException
+   */
+  public void dropUser(InstanceTokenWrapper credentials, String user) throws ThriftSecurityException {
     if (!canDropUser(credentials, user))
       throw new ThriftSecurityException(credentials.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);
     try {
@@ -516,7 +688,13 @@ public class SecurityOperation {
     }
   }
   
-  public void grantSystemPermission(TCredentials credentials, String user, SystemPermission permissionById) throws ThriftSecurityException {
+  /**
+   * @param credentials
+   * @param user
+   * @param permissionById
+   * @throws ThriftSecurityException
+   */
+  public void grantSystemPermission(InstanceTokenWrapper credentials, String user, SystemPermission permissionById) throws ThriftSecurityException {
     if (!canGrantSystem(credentials, user, permissionById))
       throw new ThriftSecurityException(credentials.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);
     
@@ -530,7 +708,14 @@ public class SecurityOperation {
     }
   }
   
-  public void grantTablePermission(TCredentials c, String user, String tableId, TablePermission permission) throws ThriftSecurityException {
+  /**
+   * @param credentials
+   * @param user
+   * @param tableId
+   * @param permission
+   * @throws ThriftSecurityException
+   */
+  public void grantTablePermission(InstanceTokenWrapper c, String user, String tableId, TablePermission permission) throws ThriftSecurityException {
     if (!canGrantTable(c, user, tableId))
       throw new ThriftSecurityException(c.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);
     
@@ -546,7 +731,13 @@ public class SecurityOperation {
     }
   }
   
-  public void revokeSystemPermission(TCredentials credentials, String user, SystemPermission permission) throws ThriftSecurityException {
+  /**
+   * @param credentials
+   * @param user
+   * @param permission
+   * @throws ThriftSecurityException
+   */
+  public void revokeSystemPermission(InstanceTokenWrapper credentials, String user, SystemPermission permission) throws ThriftSecurityException {
     if (!canRevokeSystem(credentials, user, permission))
       throw new ThriftSecurityException(credentials.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);
     
@@ -561,7 +752,14 @@ public class SecurityOperation {
     }
   }
   
-  public void revokeTablePermission(TCredentials c, String user, String tableId, TablePermission permission) throws ThriftSecurityException {
+  /**
+   * @param credentials
+   * @param user
+   * @param tableId
+   * @param permission
+   * @throws ThriftSecurityException
+   */
+  public void revokeTablePermission(InstanceTokenWrapper c, String user, String tableId, TablePermission permission) throws ThriftSecurityException {
     if (!canRevokeTable(c, user, tableId))
       throw new ThriftSecurityException(c.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);
     
@@ -578,19 +776,40 @@ public class SecurityOperation {
     }
   }
   
-  public boolean hasSystemPermission(TCredentials credentials, String user, SystemPermission permissionById) throws ThriftSecurityException {
+  /**
+   * @param credentials
+   * @param user
+   * @param permissionById
+   * @return
+   * @throws ThriftSecurityException
+   */
+  public boolean hasSystemPermission(InstanceTokenWrapper credentials, String user, SystemPermission permissionById) throws ThriftSecurityException {
     if (!canAskAboutOtherUsers(credentials, user))
       throw new ThriftSecurityException(credentials.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);
-    return _hasSystemPermission(user, permissionById, false);
+    return hasSystemPermission(user, permissionById, false);
   }
   
-  public boolean hasTablePermission(TCredentials credentials, String user, String tableId, TablePermission permissionById) throws ThriftSecurityException {
+  /**
+   * @param credentials
+   * @param user
+   * @param tableId
+   * @param permissionById
+   * @return
+   * @throws ThriftSecurityException
+   */
+  public boolean hasTablePermission(InstanceTokenWrapper credentials, String user, String tableId, TablePermission permissionById)
+      throws ThriftSecurityException {
     if (!canAskAboutOtherUsers(credentials, user))
       throw new ThriftSecurityException(credentials.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);
-    return _hasTablePermission(user, tableId, permissionById, false);
+    return hasTablePermission(user, tableId, permissionById, false);
   }
   
-  public Set<String> listUsers(TCredentials credentials) throws ThriftSecurityException {
+  /**
+   * @param credentials
+   * @return
+   * @throws ThriftSecurityException
+   */
+  public Set<String> listUsers(InstanceTokenWrapper credentials) throws ThriftSecurityException {
     authenticate(credentials);
     try {
       return authenticator.listUsers();
@@ -599,7 +818,12 @@ public class SecurityOperation {
     }
   }
   
-  public void deleteTable(TCredentials credentials, String tableId) throws ThriftSecurityException {
+  /**
+   * @param systemCredentials
+   * @param tableId
+   * @throws ThriftSecurityException
+   */
+  public void deleteTable(InstanceTokenWrapper credentials, String tableId) throws ThriftSecurityException {
     if (!canDeleteTable(credentials, tableId))
       throw new ThriftSecurityException(credentials.getPrincipal(), SecurityErrorCode.PERMISSION_DENIED);
     try {
@@ -612,13 +836,17 @@ public class SecurityOperation {
     }
   }
   
-  public boolean canExport(TCredentials credentials, String tableId, String tableName, String exportDir) throws ThriftSecurityException {
+  public boolean canExport(InstanceTokenWrapper credentials, String tableId) throws ThriftSecurityException {
     authenticate(credentials);
-    return hasTablePermission(credentials, tableId, TablePermission.READ, false);
+    return hasTablePermission(credentials.getPrincipal(), tableId, TablePermission.READ, false);
   }
   
-  public boolean canImport(TCredentials credentials, String tableName, String importDir) throws ThriftSecurityException {
+  public boolean canImport(InstanceTokenWrapper credentials, String tableId) throws ThriftSecurityException {
     authenticate(credentials);
-    return hasSystemPermission(credentials, SystemPermission.CREATE_TABLE, false);
+    return hasSystemPermission(credentials.getPrincipal(), SystemPermission.CREATE_TABLE, false);
+  }
+  
+  public String getTokenClassName() {
+    return authenticator.getTokenClassName();
   }
 }