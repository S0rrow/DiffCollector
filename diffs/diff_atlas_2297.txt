diff --git a/webapp/src/test/java/org/apache/hadoop/metadata/web/resources/TypesJerseyResourceIT.java b/webapp/src/test/java/org/apache/hadoop/metadata/web/resources/TypesJerseyResourceIT.java
index bdcf045e6..3713075e0 100644
--- a/webapp/src/test/java/org/apache/hadoop/metadata/web/resources/TypesJerseyResourceIT.java
+++ b/webapp/src/test/java/org/apache/hadoop/metadata/web/resources/TypesJerseyResourceIT.java
@@ -21,16 +21,16 @@ package org.apache.hadoop.metadata.web.resources;
 import com.google.common.collect.ImmutableList;
 import com.sun.jersey.api.client.ClientResponse;
 import com.sun.jersey.api.client.WebResource;
-import org.apache.hadoop.metadata.typesystem.json.TypesSerialization;
-import org.apache.hadoop.metadata.typesystem.json.TypesSerialization$;
-import org.apache.hadoop.metadata.typesystem.types.AttributeDefinition;
-import org.apache.hadoop.metadata.typesystem.types.ClassType;
-import org.apache.hadoop.metadata.typesystem.types.DataTypes;
-import org.apache.hadoop.metadata.typesystem.types.HierarchicalTypeDefinition;
-import org.apache.hadoop.metadata.typesystem.types.Multiplicity;
-import org.apache.hadoop.metadata.typesystem.types.TraitType;
-import org.apache.hadoop.metadata.typesystem.types.utils.TypesUtil;
-import org.apache.hadoop.metadata.web.util.Servlets;
+import org.apache.hadoop.metadata.MetadataException;
+import org.apache.hadoop.metadata.json.TypesSerialization;
+import org.apache.hadoop.metadata.types.AttributeDefinition;
+import org.apache.hadoop.metadata.types.ClassType;
+import org.apache.hadoop.metadata.types.DataTypes;
+import org.apache.hadoop.metadata.types.HierarchicalTypeDefinition;
+import org.apache.hadoop.metadata.types.Multiplicity;
+import org.apache.hadoop.metadata.types.StructTypeDefinition;
+import org.apache.hadoop.metadata.types.TraitType;
+import org.apache.hadoop.metadata.types.TypeSystem;
 import org.codehaus.jettison.json.JSONArray;
 import org.codehaus.jettison.json.JSONObject;
 import org.testng.Assert;
@@ -49,12 +49,14 @@ import java.util.List;
  */
 public class TypesJerseyResourceIT extends BaseResourceIT {
 
+    private TypeSystem typeSystem;
     private List<HierarchicalTypeDefinition> typeDefinitions;
 
     @BeforeClass
     public void setUp() throws Exception {
         super.setUp();
 
+        typeSystem = new TypeSystem();
         typeDefinitions = createHiveTypes();
     }
 
@@ -66,7 +68,8 @@ public class TypesJerseyResourceIT extends BaseResourceIT {
     @Test
     public void testSubmit() throws Exception {
         for (HierarchicalTypeDefinition typeDefinition : typeDefinitions) {
-            String typesAsJSON = TypesSerialization.toJson(typeDefinition);
+            String typesAsJSON = TypesSerialization.toJson(
+                    typeSystem, typeDefinition.typeName);
             System.out.println("typesAsJSON = " + typesAsJSON);
 
             WebResource resource = service
@@ -85,11 +88,11 @@ public class TypesJerseyResourceIT extends BaseResourceIT {
             JSONObject response = new JSONObject(responseAsString);
             Assert.assertEquals(response.get("typeName"), typeDefinition.typeName);
             Assert.assertNotNull(response.get("types"));
-            Assert.assertNotNull(response.get(Servlets.REQUEST_ID));
+            Assert.assertNotNull(response.get("requestId"));
         }
     }
 
-    @Test(dependsOnMethods = "testSubmit")
+    @Test (dependsOnMethods = "testSubmit")
     public void testGetDefinition() throws Exception {
         for (HierarchicalTypeDefinition typeDefinition : typeDefinitions) {
             System.out.println("typeName = " + typeDefinition.typeName);
@@ -110,7 +113,7 @@ public class TypesJerseyResourceIT extends BaseResourceIT {
             JSONObject response = new JSONObject(responseAsString);
             Assert.assertEquals(response.get("typeName"), typeDefinition.typeName);
             Assert.assertNotNull(response.get("definition"));
-            Assert.assertNotNull(response.get(Servlets.REQUEST_ID));
+            Assert.assertNotNull(response.get("requestId"));
         }
     }
 
@@ -127,7 +130,7 @@ public class TypesJerseyResourceIT extends BaseResourceIT {
         Assert.assertEquals(clientResponse.getStatus(), Response.Status.NOT_FOUND.getStatusCode());
     }
 
-    @Test(dependsOnMethods = "testSubmit")
+    @Test (dependsOnMethods = "testSubmit")
     public void testGetTypeNames() throws Exception {
         WebResource resource = service
                 .path("api/metadata/types/list");
@@ -142,82 +145,42 @@ public class TypesJerseyResourceIT extends BaseResourceIT {
         Assert.assertNotNull(responseAsString);
 
         JSONObject response = new JSONObject(responseAsString);
-        Assert.assertNotNull(response.get(Servlets.REQUEST_ID));
+        Assert.assertNotNull(response.get("requestId"));
 
-        final JSONArray list = response.getJSONArray(Servlets.RESULTS);
+        final JSONArray list = response.getJSONArray("list");
         Assert.assertNotNull(list);
     }
 
-    @Test
-    public void testGetTraitNames() throws Exception {
-        String[] traitsAdded = addTraits();
-
-        WebResource resource = service
-                .path("api/metadata/types/traits/list");
-
-        ClientResponse clientResponse = resource
-                .accept(MediaType.APPLICATION_JSON)
-                .type(MediaType.APPLICATION_JSON)
-                .method(HttpMethod.GET, ClientResponse.class);
-        Assert.assertEquals(clientResponse.getStatus(), Response.Status.OK.getStatusCode());
-
-        String responseAsString = clientResponse.getEntity(String.class);
-        Assert.assertNotNull(responseAsString);
-
-        JSONObject response = new JSONObject(responseAsString);
-        Assert.assertNotNull(response.get(Servlets.REQUEST_ID));
-
-        final JSONArray list = response.getJSONArray(Servlets.RESULTS);
-        Assert.assertNotNull(list);
-        Assert.assertTrue(list.length() >= traitsAdded.length);
-    }
-
-    private String[] addTraits() throws Exception {
-        String[] traitNames = {
-                "class_trait",
-                "secure_trait",
-                "pii_trait",
-                "ssn_trait",
-                "salary_trait",
-                "sox_trait",
-        };
-
-        for (String traitName : traitNames) {
-            HierarchicalTypeDefinition<TraitType> traitTypeDef =
-                    TypesUtil.createTraitTypeDef(traitName, ImmutableList.<String>of());
-            String json = TypesSerialization$.MODULE$.toJson(traitTypeDef, true);
-            sumbitType(json, traitName);
-        }
-
-        return traitNames;
-    }
-
-    private List<HierarchicalTypeDefinition> createHiveTypes() throws Exception {
+    private List<HierarchicalTypeDefinition> createHiveTypes() throws MetadataException {
         ArrayList<HierarchicalTypeDefinition> typeDefinitions = new ArrayList<>();
 
         HierarchicalTypeDefinition<ClassType> databaseTypeDefinition =
-                TypesUtil.createClassTypeDef("database",
-                        ImmutableList.<String>of(),
-                        TypesUtil.createRequiredAttrDef("name", DataTypes.STRING_TYPE),
-                        TypesUtil.createRequiredAttrDef("description", DataTypes.STRING_TYPE));
+                createClassTypeDef("database", ImmutableList.<String>of(),
+                        createRequiredAttrDef("name", DataTypes.STRING_TYPE),
+                        createRequiredAttrDef("description", DataTypes.STRING_TYPE));
         typeDefinitions.add(databaseTypeDefinition);
 
-        HierarchicalTypeDefinition<ClassType> tableTypeDefinition = TypesUtil.createClassTypeDef(
+        HierarchicalTypeDefinition<ClassType> tableTypeDefinition = createClassTypeDef(
                 "table",
                 ImmutableList.<String>of(),
-                TypesUtil.createRequiredAttrDef("name", DataTypes.STRING_TYPE),
-                TypesUtil.createRequiredAttrDef("description", DataTypes.STRING_TYPE),
-                TypesUtil.createRequiredAttrDef("type", DataTypes.STRING_TYPE),
+                createRequiredAttrDef("name", DataTypes.STRING_TYPE),
+                createRequiredAttrDef("description", DataTypes.STRING_TYPE),
+                createRequiredAttrDef("type", DataTypes.STRING_TYPE),
                 new AttributeDefinition("database",
                         "database", Multiplicity.REQUIRED, false, "database"));
         typeDefinitions.add(tableTypeDefinition);
 
-        HierarchicalTypeDefinition<TraitType> fetlTypeDefinition = TypesUtil.createTraitTypeDef(
+        HierarchicalTypeDefinition<TraitType> fetlTypeDefinition = createTraitTypeDef(
                 "fetl",
                 ImmutableList.<String>of(),
-                TypesUtil.createRequiredAttrDef("level", DataTypes.INT_TYPE));
+                createRequiredAttrDef("level", DataTypes.INT_TYPE));
         typeDefinitions.add(fetlTypeDefinition);
 
+        typeSystem.defineTypes(
+                ImmutableList.<StructTypeDefinition>of(),
+                ImmutableList.of(fetlTypeDefinition),
+                ImmutableList.of(databaseTypeDefinition, tableTypeDefinition));
+
         return typeDefinitions;
     }
-}
+}
\ No newline at end of file