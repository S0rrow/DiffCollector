diff --git a/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java b/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
index 9d8f5d7eb..94d4f84ea 100644
--- a/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
+++ b/src/main/java/org/apache/aries/blueprint/namespace/NamespaceHandlerRegistryImpl.java
@@ -21,7 +21,6 @@ package org.apache.aries.blueprint.namespace;
 import java.lang.ref.Reference;
 import java.lang.ref.SoftReference;
 import java.net.URI;
-import java.net.URISyntaxException;
 import java.net.URL;
 import java.util.AbstractMap;
 import java.util.AbstractSet;
@@ -34,12 +33,9 @@ import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
-import java.util.Properties;
 import java.util.Set;
 import java.util.HashSet;
 import java.io.IOException;
-import java.io.InputStream;
-import java.io.Reader;
 
 import javax.xml.validation.Schema;
 import javax.xml.validation.SchemaFactory;
@@ -47,13 +43,8 @@ import javax.xml.transform.stream.StreamSource;
 import javax.xml.transform.Source;
 import javax.xml.XMLConstants;
 
-import org.w3c.dom.ls.LSInput;
-import org.w3c.dom.ls.LSResourceResolver;
-
 import org.apache.aries.blueprint.NamespaceHandler;
 import org.apache.aries.blueprint.container.NamespaceHandlerRegistry;
-import org.apache.aries.blueprint.parser.NamespaceHandlerSet;
-import org.apache.aries.blueprint.parser.NamespaceHandlerSet.Listener;
 import org.osgi.framework.Bundle;
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.ServiceReference;
@@ -61,9 +52,7 @@ import org.osgi.util.tracker.ServiceTracker;
 import org.osgi.util.tracker.ServiceTrackerCustomizer;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-
 import org.xml.sax.SAXException;
-import org.xml.sax.SAXParseException;
 
 /**
  * Default implementation of the NamespaceHandlerRegistry.
@@ -71,7 +60,7 @@ import org.xml.sax.SAXParseException;
  * This registry will track NamespaceHandler objects in the OSGi registry and make
  * them available, calling listeners when handlers are registered or unregistered.
  *
- * @version $Rev$, $Date$
+ * @version $Rev: 760378 $, $Date: 2009-03-31 11:31:38 +0200 (Tue, 31 Mar 2009) $
  */
 public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, ServiceTrackerCustomizer {
     
@@ -97,20 +86,15 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
     }
 
     public Object addingService(ServiceReference reference) {
-        LOGGER.debug("Adding NamespaceHandler "+reference.toString());
         NamespaceHandler handler = (NamespaceHandler) bundleContext.getService(reference);
-        if(handler!=null){
-            try {
-                Map<String, Object> props = new HashMap<String, Object>();
-                for (String name : reference.getPropertyKeys()) {
-                    props.put(name, reference.getProperty(name));
-                }
-                registerHandler(handler, props);
-            } catch (Exception e) {
-                LOGGER.warn("Error registering NamespaceHandler", e);
+        try {
+            Map<String, Object> props = new HashMap<String, Object>();
+            for (String name : reference.getPropertyKeys()) {
+                props.put(name, reference.getProperty(name));
             }
-        }else{
-            LOGGER.warn("Error resolving NamespaceHandler, null Service obtained from tracked ServiceReference {} for bundle {}, ver {}", new Object[]{reference.toString(), reference.getBundle().getSymbolicName(), reference.getBundle().getVersion()});
+            registerHandler(handler, props);
+        } catch (Exception e) {
+            LOGGER.warn("Error registering NamespaceHandler", e);
         }
         return handler;
     }
@@ -218,34 +202,20 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
     public void destroy() {
         tracker.close();
     }
-    public synchronized Schema getSchema(Map<URI, NamespaceHandler> handlers)
-        throws IOException, SAXException {
-        return getSchema(handlers, null, new Properties());
-    }
-    private synchronized Schema getSchema(Map<URI, NamespaceHandler> handlers, 
-                                          final Bundle bundle,
-                                          final Properties schemaMap) throws IOException, SAXException {
+
+    public synchronized Schema getSchema(Map<URI, NamespaceHandler> handlers) throws IOException, SAXException {
         Schema schema = null;
         // Find a schema that can handle all the requested namespaces
         // If it contains additional namespaces, it should not be a problem since
         // they won't be used at all
-        if (schemaMap == null || schemaMap.isEmpty()) {
-            for (Map<URI, NamespaceHandler> key : schemas.keySet()) {
-                boolean found = true;
-                for (URI uri : handlers.keySet()) {
-                    if (!handlers.get(uri).equals(key.get(uri))) {
-                        found = false;
-                        break;
-                    }
-                }
-                if (found) {
-                    schema = schemas.get(key).get();
-                    break;
-                }
+        for (Map<URI, NamespaceHandler> key : schemas.keySet()) {
+            if (key.equals(handlers)) {
+                schema = schemas.get(key).get();
+                break;
             }
         }
         if (schema == null) {
-            final List<StreamSource> schemaSources = new ArrayList<StreamSource>();
+            List<StreamSource> schemaSources = new ArrayList<StreamSource>();
             try {
                 schemaSources.add(new StreamSource(getClass().getResourceAsStream("/org/apache/aries/blueprint/blueprint.xsd")));
                 // Create a schema for all namespaces known at this point
@@ -255,89 +225,11 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
                     if (url == null) {
                         LOGGER.warn("No URL is defined for schema " + ns + ". This schema will not be validated");
                     } else {
-                        schemaSources.add(new StreamSource(url.openStream(), url.toExternalForm()));
-                    }
-                }
-                for (Object ns : schemaMap.values()) {
-                    URL url = bundle.getResource(ns.toString());
-                    if (url == null) {
-                        LOGGER.warn("No URL is defined for schema " + ns + ". This schema will not be validated");
-                    } else {
-                        schemaSources.add(new StreamSource(url.openStream(), url.toExternalForm()));
-                    }
-                }
-                SchemaFactory factory = getSchemaFactory();
-                factory.setResourceResolver(new LSResourceResolver() {
-                    public LSInput resolveResource(String type, 
-                                                   final String namespaceURI, 
-                                                   final String publicId,
-                                                   String systemId, String baseURI) {
-                        String loc = null;
-                        if (namespaceURI != null) {
-                            loc = schemaMap.getProperty(namespaceURI);
-                        }
-                        if (loc == null && publicId != null) {
-                            loc = schemaMap.getProperty(publicId);
-                        }
-                        if (loc == null && systemId != null) {
-                            loc = schemaMap.getProperty(systemId);
-                        }
-                        if (loc != null) {
-                            URL url = bundle.getResource(loc);
-                            if (url != null) {
-                                try {
-                                    StreamSource source 
-                                        = new StreamSource(url.openStream(), url.toExternalForm());
-                                    schemaSources.add(source);
-                                    return new SourceLSInput(source, publicId, url);
-                                } catch (IOException e) {
-                                    throw new RuntimeException(e);
-                                }
-                            }
-                        }
-                        URI uri = URI.create((String) namespaceURI);
-                        Set<NamespaceHandler> hs = NamespaceHandlerRegistryImpl.this.handlers.get(uri);
-                        if (hs == null) {
-                            return null;
-                        }
-                        for (NamespaceHandler h : hs) {
-                            final URL url = h.getSchemaLocation(namespaceURI);
-                            if (url != null) {
-                                try {
-                                    final StreamSource source 
-                                        = new StreamSource(url.openStream(), url.toExternalForm());
-                                    schemaSources.add(source);
-                                    return new SourceLSInput(source, publicId, url);
-                                } catch (IOException e) {
-                                    throw new RuntimeException(e);
-                                }
-                            }
-                        }
-                        return null;
-                    }
-                    
-                });
-                schema = factory.newSchema(schemaSources.toArray(new Source[schemaSources.size()]));
-                // Remove schemas that are fully included
-                for (Iterator<Map<URI, NamespaceHandler>> iterator = schemas.keySet().iterator(); iterator.hasNext();) {
-                    Map<URI, NamespaceHandler> key = iterator.next();
-                    boolean found = true;
-                    for (URI uri : key.keySet()) {
-                        if (!key.get(uri).equals(handlers.get(uri))) {
-                            found = false;
-                            break;
-                        }
-                    }
-                    if (found) {
-                        iterator.remove();
-                        break;
+                        schemaSources.add(new StreamSource(url.openStream()));
                     }
                 }
-                // Add our new schema
-                if (schemaMap.isEmpty()) {
-                    //only cache non-custom schemas
-                    schemas.put(handlers, new SoftReference<Schema>(schema));
-                }
+                schema = getSchemaFactory().newSchema(schemaSources.toArray(new Source[schemaSources.size()]));
+                schemas.put(handlers, new SoftReference<Schema>(schema));
             } finally {
                 for (StreamSource s : schemaSources) {
                     try {
@@ -350,57 +242,6 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
         }
         return schema;
     }
-    
-    private class SourceLSInput implements LSInput {
-        StreamSource source;
-        URL systemId;
-        String publicId;
-        public SourceLSInput(StreamSource src, String pid, URL sys) {
-            source = src;
-            publicId = pid;
-            systemId = sys;
-        }
-        public Reader getCharacterStream() {
-            return null;
-        }
-        public void setCharacterStream(Reader characterStream) {
-        }
-        public InputStream getByteStream() {
-            return source.getInputStream();
-        }
-        public void setByteStream(InputStream byteStream) {
-        }
-        public String getStringData() {
-            return null;
-        }
-        public void setStringData(String stringData) {
-        }
-        public String getSystemId() {
-            return systemId.toExternalForm();
-        }
-        public void setSystemId(String systemId) {
-        }
-        public String getPublicId() {
-            return publicId;
-        }
-        public void setPublicId(String publicId) {
-        }
-        public String getBaseURI() {
-            return null;
-        }
-        public void setBaseURI(String baseURI) {
-        }
-        public String getEncoding() {
-            return null;
-        }
-        public void setEncoding(String encoding) {
-        }
-        public boolean getCertifiedText() {
-            return false;
-        }
-        public void setCertifiedText(boolean certifiedText) {
-        }
-    };
 
     protected synchronized void removeSchemasFor(NamespaceHandler handler) {
         List<Map<URI, NamespaceHandler>> keys = new ArrayList<Map<URI, NamespaceHandler>>();
@@ -415,6 +256,7 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
     }
 
     private SchemaFactory getSchemaFactory() {
+        SchemaFactory schemaFactory = null;
         if (schemaFactory == null) {
             schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
         }
@@ -427,7 +269,6 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
         private final Bundle bundle;
         private final Set<URI> namespaces;
         private final Map<URI, NamespaceHandler> handlers;
-        private final Properties schemaMap = new Properties();
         private Schema schema;
 
         public NamespaceHandlerSetImpl(Set<URI> namespaces, Bundle bundle) {
@@ -438,35 +279,6 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
             for (URI ns : namespaces) {
                 findCompatibleNamespaceHandler(ns);
             }
-            URL url = bundle.getResource("OSGI-INF/blueprint/schema.map");
-            System.out.println("MAP: " + url);
-            if (url != null) {
-                InputStream ins = null;
-                try {
-                    ins = url.openStream();
-                    schemaMap.load(ins);
-                } catch (IOException ex) {
-                    ex.printStackTrace();
-                    //ignore
-                } finally {
-                    if (ins != null) {
-                        try {
-                            ins.close();
-                        } catch (IOException e) {
-                            //ignore
-                        }
-                    }
-                }
-            }
-            System.out.println("MAP: " + schemaMap);
-            for (Object ns : schemaMap.keySet()) {
-                try {
-                    this.namespaces.remove(new URI(ns.toString()));
-                } catch (URISyntaxException e) {
-                    //ignore
-                }
-            }
-            System.out.println("NS: " + namespaces);
         }
 
         public boolean isComplete() {
@@ -486,7 +298,7 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
                 throw new IllegalStateException("NamespaceHandlerSet is not complete");
             }
             if (schema == null) {
-                schema = NamespaceHandlerRegistryImpl.this.getSchema(handlers, bundle, schemaMap);
+                schema = NamespaceHandlerRegistryImpl.this.getSchema(handlers);
             }
             return schema;
         }
@@ -556,8 +368,6 @@ public class NamespaceHandlerRegistryImpl implements NamespaceHandlerRegistry, S
                                 }
                             } catch (ClassNotFoundException e) {
                                 // Ignore
-                            } catch (NoClassDefFoundError e) {
-                                // Ignore
                             }
                         }
                     }