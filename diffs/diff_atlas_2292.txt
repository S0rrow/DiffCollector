diff --git a/repository/src/main/java/org/apache/hadoop/metadata/repository/graph/GraphBackedSearchIndexer.java b/repository/src/main/java/org/apache/hadoop/metadata/repository/graph/GraphBackedSearchIndexer.java
index 48fea83c7..87c5500fa 100644
--- a/repository/src/main/java/org/apache/hadoop/metadata/repository/graph/GraphBackedSearchIndexer.java
+++ b/repository/src/main/java/org/apache/hadoop/metadata/repository/graph/GraphBackedSearchIndexer.java
@@ -18,14 +18,12 @@
 
 package org.apache.hadoop.metadata.repository.graph;
 
-import com.thinkaurelius.titan.core.EdgeLabel;
-import com.thinkaurelius.titan.core.Order;
+import com.thinkaurelius.titan.core.Cardinality;
 import com.thinkaurelius.titan.core.PropertyKey;
 import com.thinkaurelius.titan.core.TitanGraph;
-import com.thinkaurelius.titan.core.schema.TitanGraphIndex;
 import com.thinkaurelius.titan.core.schema.TitanManagement;
-import com.tinkerpop.blueprints.Direction;
 import com.tinkerpop.blueprints.Edge;
+import com.tinkerpop.blueprints.Element;
 import com.tinkerpop.blueprints.Vertex;
 import org.apache.hadoop.metadata.MetadataException;
 import org.apache.hadoop.metadata.repository.SearchIndexer;
@@ -71,26 +69,39 @@ public class GraphBackedSearchIndexer implements SearchIndexer {
 
         LOG.info("Indexes do not exist, Creating indexes for titanGraph.");
         try {
-            management.buildIndex(Constants.VERTEX_INDEX, Vertex.class)
-                    .buildMixedIndex(Constants.BACKING_INDEX);
-            management.buildIndex(Constants.EDGE_INDEX, Edge.class)
-                    .buildMixedIndex(Constants.BACKING_INDEX);
-
-            // create a composite index for guid as its unique
-            createCompositeIndex(management, Constants.GUID_INDEX,
-                    Constants.GUID_PROPERTY_KEY, String.class, true);
-
-            // create a composite and mixed index for type since it can be combined with other keys
-            createCompositeIndex(management, Constants.ENTITY_TYPE_INDEX,
-                    Constants.ENTITY_TYPE_PROPERTY_KEY, String.class, false);
-            createVertexMixedIndex(management, Constants.ENTITY_TYPE_PROPERTY_KEY, String.class);
+            createIndex(management, Constants.GUID_PROPERTY_KEY, String.class, true);
+            createIndex(management, Constants.ENTITY_TYPE_PROPERTY_KEY, String.class);
+            createIndex(management, Constants.TIMESTAMP_PROPERTY_KEY, Long.class);
         } finally {
             management.commit();
         }
 
         LOG.info("Index creation for global keys complete.");
+        // dumpIndexKeys();
     }
 
+/*
+    private void dumpIndexKeys() {
+        for (TitanGraphIndex index : management.getGraphIndexes(Vertex.class)) {
+            System.out.println("index.getName() = " + index.getName());
+
+            for (PropertyKey key : index.getFieldKeys()) {
+                System.out.println("key.getName() = " + key.getName());
+                System.out.println("key = " + key);
+            }
+        }
+
+        for (TitanGraphIndex index : management.getGraphIndexes(Edge.class)) {
+            System.out.println("index.getName() = " + index.getName());
+
+            for (PropertyKey key : index.getFieldKeys()) {
+                System.out.println("key.getName() = " + key.getName());
+                System.out.println("key = " + key);
+            }
+        }
+    }
+*/
+
     /**
      * This is upon adding a new type to Store.
      *
@@ -102,16 +113,18 @@ public class GraphBackedSearchIndexer implements SearchIndexer {
     public void onAdd(String typeName, IDataType dataType) throws MetadataException {
         LOG.info("Creating indexes for type name={}, definition={}", typeName, dataType);
 
-        TitanManagement management = titanGraph.getManagementSystem();
         try {
+            TitanManagement management = titanGraph.getManagementSystem();
             addIndexForType(management, dataType);
             management.commit();
             LOG.info("Index creation for type {} complete", typeName);
 
         } catch (Exception e) {
             LOG.error("Error creating index for type {}", dataType, e);
-            management.rollback();
+            // management.rollback();
         }
+
+        // dumpIndexKeys();
     }
 
     private void addIndexForType(TitanManagement management, IDataType dataType) {
@@ -157,18 +170,18 @@ public class GraphBackedSearchIndexer implements SearchIndexer {
         final String propertyName = typeName + "." + field.name;
         switch (field.dataType().getTypeCategory()) {
             case PRIMITIVE:
-                createVertexMixedIndex(
-                        management, propertyName, getPrimitiveClass(field.dataType()));
+                createIndex(management, propertyName,
+                        getPrimitiveClass(field.dataType()), field.isUnique);
                 break;
 
             case ENUM:
-                createVertexMixedIndex(management, propertyName, Integer.class);
+                createIndex(management, propertyName, Integer.class, field.isUnique);
                 break;
 
             case ARRAY:
             case MAP:
                 // index the property holder for element names
-                createVertexMixedIndex(management, propertyName, String.class);
+                createIndex(management, propertyName, String.class, field.isUnique);
                 break;
 
             case STRUCT:
@@ -182,7 +195,7 @@ public class GraphBackedSearchIndexer implements SearchIndexer {
 
             case CLASS:
                 // this is only A reference, index the attribute for edge
-                createEdgeMixedIndex(management, propertyName);
+                createEdgeIndex(management, propertyName, String.class);
                 break;
 
             default:
@@ -216,18 +229,39 @@ public class GraphBackedSearchIndexer implements SearchIndexer {
         throw new IllegalArgumentException("unknown data type " + dataType);
     }
 
-    private static PropertyKey createCompositeIndex(TitanManagement management, String indexName,
-                                                    String propertyName, Class propertyClass,
-                                                    boolean isUnique) {
+    private static PropertyKey createIndex(TitanManagement management,
+                                           String propertyName, Class propertyClass) {
+        return createIndex(management,
+                propertyName, propertyClass, Cardinality.SINGLE, false, Vertex.class);
+    }
+
+    private static PropertyKey createIndex(TitanManagement management,
+                                           String propertyName,
+                                           Class propertyClass, boolean isUnique) {
+        return createIndex(management,
+                propertyName, propertyClass, Cardinality.SINGLE, isUnique, Vertex.class);
+    }
+
+    private static PropertyKey createEdgeIndex(TitanManagement management,
+                                               String propertyName, Class propertyClass) {
+        return createIndex(management,
+                propertyName, propertyClass, Cardinality.SINGLE, false, Edge.class);
+    }
+
+    private static PropertyKey createIndex(TitanManagement management,
+                                           String propertyName, Class propertyClass,
+                                           Cardinality cardinality, boolean isUnique,
+                                           Class<? extends Element> elementClass) {
         PropertyKey propertyKey = management.getPropertyKey(propertyName);
         if (propertyKey == null) {
             propertyKey = management
                     .makePropertyKey(propertyName)
                     .dataType(propertyClass)
+                    .cardinality(cardinality)
                     .make();
 
             TitanManagement.IndexBuilder indexBuilder = management
-                    .buildIndex(indexName, Vertex.class)
+                    .buildIndex("index_" + propertyName, elementClass)
                     .addKey(propertyKey);
 
             if (isUnique) {
@@ -239,26 +273,4 @@ public class GraphBackedSearchIndexer implements SearchIndexer {
 
         return propertyKey;
     }
-
-    private static PropertyKey createVertexMixedIndex(TitanManagement management,
-                                                      String propertyName, Class propertyClass) {
-        PropertyKey propertyKey = management.getPropertyKey(propertyName);
-        if (propertyKey == null) {
-            propertyKey = management
-                    .makePropertyKey(propertyName)
-                    .dataType(propertyClass)
-                    .make();
-        }
-
-        TitanGraphIndex vertexIndex = management.getGraphIndex(Constants.VERTEX_INDEX);
-        management.addIndexKey(vertexIndex, propertyKey);
-
-        return propertyKey;
-    }
-
-    private static void createEdgeMixedIndex(TitanManagement management,
-                                             String propertyName) {
-        EdgeLabel edgeLabel = management.makeEdgeLabel(propertyName).make();
-        management.buildEdgeIndex(edgeLabel, propertyName, Direction.BOTH, Order.DEFAULT);
-    }
 }