diff --git a/archiva-base/archiva-proxy/src/main/java/org/apache/maven/archiva/proxy/DefaultRepositoryProxyConnectors.java b/archiva-base/archiva-proxy/src/main/java/org/apache/maven/archiva/proxy/DefaultRepositoryProxyConnectors.java
index b8612a421..23ff1ad63 100644
--- a/archiva-base/archiva-proxy/src/main/java/org/apache/maven/archiva/proxy/DefaultRepositoryProxyConnectors.java
+++ b/archiva-base/archiva-proxy/src/main/java/org/apache/maven/archiva/proxy/DefaultRepositoryProxyConnectors.java
@@ -19,21 +19,22 @@
  * under the License.
  */
 
+import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.io.FileUtils;
+import org.apache.maven.archiva.common.utils.VersionUtil;
 import org.apache.maven.archiva.configuration.ArchivaConfiguration;
 import org.apache.maven.archiva.configuration.NetworkProxyConfiguration;
-import org.apache.maven.archiva.configuration.ProxyConnectorConfiguration;
 import org.apache.maven.archiva.configuration.RepositoryConfiguration;
+import org.apache.maven.archiva.configuration.RepositoryProxyConnectorConfiguration;
 import org.apache.maven.archiva.model.ArchivaRepository;
 import org.apache.maven.archiva.model.ArtifactReference;
 import org.apache.maven.archiva.model.ProjectReference;
-import org.apache.maven.archiva.policies.DownloadPolicy;
-import org.apache.maven.archiva.policies.urlcache.UrlFailureCache;
+import org.apache.maven.archiva.proxy.policy.PostfetchPolicy;
+import org.apache.maven.archiva.proxy.policy.PrefetchPolicy;
 import org.apache.maven.archiva.repository.layout.BidirectionalRepositoryLayout;
 import org.apache.maven.archiva.repository.layout.BidirectionalRepositoryLayoutFactory;
 import org.apache.maven.archiva.repository.layout.LayoutException;
 import org.apache.maven.wagon.ConnectionException;
-import org.apache.maven.wagon.ResourceDoesNotExistException;
 import org.apache.maven.wagon.Wagon;
 import org.apache.maven.wagon.WagonException;
 import org.apache.maven.wagon.authentication.AuthenticationException;
@@ -49,14 +50,11 @@
 import java.io.File;
 import java.io.IOException;
 import java.util.ArrayList;
-import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
-import java.util.Properties;
-import java.util.Map.Entry;
 
 /**
  * DefaultRepositoryProxyConnectors 
@@ -88,19 +86,14 @@
     private BidirectionalRepositoryLayoutFactory layoutFactory;
 
     /**
-     * @plexus.requirement role="org.apache.maven.archiva.policies.PreDownloadPolicy"
+     * @plexus.requirement role="checksum"
      */
-    private Map preDownloadPolicies;
+    private PrefetchPolicy checksumPolicy;
 
     /**
-     * @plexus.requirement role="org.apache.maven.archiva.policies.PostDownloadPolicy"
+     * @plexus.requirement role="artifact-update"
      */
-    private Map postDownloadPolicies;
-
-    /**
-     * @plexus.requirement role-hint="default"
-     */
-    private UrlFailureCache urlFailureCache;
+    private PostfetchPolicy updatePolicy;
 
     private Map proxyConnectorMap = new HashMap();
 
@@ -108,7 +101,7 @@
 
     private List propertyNameTriggers = new ArrayList();
 
-    public File fetchFromProxies( ArchivaRepository repository, ArtifactReference artifact )
+    public boolean fetchFromProxies( ArchivaRepository repository, ArtifactReference artifact )
         throws ProxyException
     {
         if ( !repository.isManaged() )
@@ -129,41 +122,36 @@ public File fetchFromProxies( ArchivaRepository repository, ArtifactReference ar
                 + e.getMessage(), e );
         }
 
-        Properties requestProperties = new Properties();
-        requestProperties.setProperty( "version", artifact.getVersion() );
+        boolean isSnapshot = VersionUtil.isSnapshot( artifact.getVersion() );
 
         List connectors = getProxyConnectors( repository );
         Iterator it = connectors.iterator();
         while ( it.hasNext() )
         {
             ProxyConnector connector = (ProxyConnector) it.next();
-            getLogger().debug( "Attempting connector: " + connector );
             ArchivaRepository targetRepository = connector.getTargetRepository();
             try
             {
                 BidirectionalRepositoryLayout targetLayout = layoutFactory.getLayout( targetRepository.getLayoutType() );
                 String targetPath = targetLayout.toPath( artifact );
 
-                File downloadedFile = transferFile( connector, targetRepository, targetPath, localFile,
-                                                    requestProperties );
-
-                if ( fileExists( downloadedFile ) )
+                if ( transferFile( connector, targetRepository, targetPath, localFile, isSnapshot ) )
                 {
-                    getLogger().info( "Successfully transfered: " + downloadedFile.getAbsolutePath() );
-                    return downloadedFile;
+                    // Transfer was successful.  return.
+                    return true;
                 }
             }
             catch ( LayoutException e )
             {
                 getLogger().error( "Unable to proxy due to bad layout definition: " + e.getMessage(), e );
-                return null;
+                return false;
             }
         }
 
-        return null;
+        return false;
     }
 
-    public File fetchFromProxies( ArchivaRepository repository, ProjectReference metadata )
+    public boolean fetchFromProxies( ArchivaRepository repository, ProjectReference metadata )
         throws ProxyException
     {
         if ( !repository.isManaged() )
@@ -184,8 +172,6 @@ public File fetchFromProxies( ArchivaRepository repository, ProjectReference met
                 + e.getMessage(), e );
         }
 
-        Properties requestProperties = new Properties();
-
         List connectors = getProxyConnectors( repository );
         Iterator it = connectors.iterator();
         while ( it.hasNext() )
@@ -197,43 +183,20 @@ public File fetchFromProxies( ArchivaRepository repository, ProjectReference met
                 BidirectionalRepositoryLayout targetLayout = layoutFactory.getLayout( targetRepository.getLayoutType() );
                 String targetPath = targetLayout.toPath( metadata ) + FILENAME_MAVEN_METADATA;
 
-                File downloadedFile = transferFile( connector, targetRepository, targetPath, localFile,
-                                                    requestProperties );
-
-                if ( fileExists( downloadedFile ) )
+                if ( transferFile( connector, targetRepository, targetPath, localFile, false ) )
                 {
-                    getLogger().info( "Successfully transfered: " + downloadedFile.getAbsolutePath() );
-                    return downloadedFile;
+                    // Transfer was successful.  return.
+                    return true;
                 }
             }
             catch ( LayoutException e )
             {
                 getLogger().error( "Unable to proxy due to bad layout definition: " + e.getMessage(), e );
-                return null;
+                return false;
             }
         }
 
-        return null;
-    }
-
-    private boolean fileExists( File file )
-    {
-        if ( file == null )
-        {
-            return false;
-        }
-
-        if ( !file.exists() )
-        {
-            return false;
-        }
-
-        if ( !file.isFile() )
-        {
-            return false;
-        }
-
-        return true;
+        return false;
     }
 
     /**
@@ -243,38 +206,39 @@ private boolean fileExists( File file )
      * @param targetRepository
      * @param targetPath
      * @param localFile
-     * @param requestProperties
+     * @param isSnapshot
      * @return
      * @throws ProxyException 
      */
-    private File transferFile( ProxyConnector connector, ArchivaRepository targetRepository, String targetPath,
-                               File localFile, Properties requestProperties )
+    private boolean transferFile( ProxyConnector connector, ArchivaRepository targetRepository, String targetPath,
+                                  File localFile, boolean isSnapshot )
         throws ProxyException
     {
-        String url = targetRepository.getUrl().toString() + targetPath;
-        requestProperties.setProperty( "url", url );
-
-        // Handle pre-download policy
-        if ( !applyPolicies( connector.getPolicies(), this.preDownloadPolicies, requestProperties, localFile ) )
+        if ( isSnapshot )
         {
-            getLogger().info( "Failed pre-download policies - " + localFile.getAbsolutePath() );
-
-            if ( fileExists( localFile ) )
+            // Handle Snapshot Policy
+            if ( !updatePolicy.applyPolicy( connector.getSnapshotsPolicy(), localFile ) )
             {
-                return localFile;
+                return false;
+            }
+        }
+        else
+        {
+            // Handle Release Policy
+            if ( !updatePolicy.applyPolicy( connector.getReleasesPolicy(), localFile ) )
+            {
+                return false;
             }
-
-            return null;
         }
 
         // Is a whitelist defined?
-        if ( !isEmpty( connector.getWhitelist() ) )
+        if ( CollectionUtils.isNotEmpty( connector.getWhitelist() ) )
         {
             // Path must belong to whitelist.
             if ( !matchesPattern( targetPath, connector.getWhitelist() ) )
             {
                 getLogger().debug( "Path [" + targetPath + "] is not part of defined whitelist (skipping transfer)." );
-                return null;
+                return false;
             }
         }
 
@@ -282,12 +246,17 @@ private File transferFile( ProxyConnector connector, ArchivaRepository targetRep
         if ( matchesPattern( targetPath, connector.getBlacklist() ) )
         {
             getLogger().debug( "Path [" + targetPath + "] is part of blacklist (skipping transfer)." );
-            return null;
+            return false;
         }
 
+        // Transfer the file.
         Wagon wagon = null;
+
         try
         {
+            File temp = new File( localFile.getAbsolutePath() + ".tmp" );
+            temp.deleteOnExit();
+
             String protocol = targetRepository.getUrl().getProtocol();
             wagon = (Wagon) wagons.get( protocol );
             if ( wagon == null )
@@ -298,166 +267,43 @@ private File transferFile( ProxyConnector connector, ArchivaRepository targetRep
             boolean connected = connectToRepository( connector, wagon, targetRepository );
             if ( connected )
             {
-                localFile = transferSimpleFile( wagon, targetRepository, targetPath, localFile );
-
-                transferChecksum( wagon, targetRepository, targetPath, localFile, ".sha1" );
-                transferChecksum( wagon, targetRepository, targetPath, localFile, ".md5" );
-            }
-        }
-        catch ( ResourceDoesNotExistException e )
-        {
-            // Do not cache url here.
-            return null;
-        }
-        catch ( WagonException e )
-        {
-            urlFailureCache.cacheFailure( url );
-            return null;
-        }
-        finally
-        {
-            if ( wagon != null )
-            {
-                try
+                if ( localFile.exists() )
                 {
-                    wagon.disconnect();
+                    getLogger().debug( "Retrieving " + targetPath + " from " + targetRepository.getName() );
+                    wagon.get( targetPath, temp );
                 }
-                catch ( ConnectionException e )
+                else
                 {
-                    getLogger().warn( "Unable to disconnect wagon.", e );
+                    getLogger().debug(
+                                       "Retrieving " + targetPath + " from " + targetRepository.getName()
+                                           + " if updated" );
+                    wagon.getIfNewer( targetPath, temp, localFile.lastModified() );
                 }
-            }
-        }
-
-        // Handle post-download policies.
-        if ( !applyPolicies( connector.getPolicies(), this.postDownloadPolicies, requestProperties, localFile ) )
-        {
-            getLogger().info( "Failed post-download policies - " + localFile.getAbsolutePath() );
-
-            if ( fileExists( localFile ) )
-            {
-                return localFile;
-            }
-
-            return null;
-        }
-
-        // Everything passes.
-        return localFile;
-    }
-
-    private void transferChecksum( Wagon wagon, ArchivaRepository targetRepository, String targetPath, File localFile,
-                                   String type )
-        throws ProxyException
-    {
-        String url = targetRepository.getUrl().toString() + targetPath;
-
-        // Transfer checksum does not use the policy. 
-        if ( urlFailureCache.hasFailedBefore( url + type ) )
-        {
-            return;
-        }
-
-        try
-        {
-            File hashFile = new File( localFile.getAbsolutePath() + type );
-            transferSimpleFile( wagon, targetRepository, targetPath + type, hashFile );
-            getLogger().debug( "Checksum" + type + " Downloaded: " + hashFile );
-        }
-        catch ( ResourceDoesNotExistException e )
-        {
-            getLogger().debug( "Checksum" + type + " Not Download: " + e.getMessage() );
-        }
-        catch ( WagonException e )
-        {
-            urlFailureCache.cacheFailure( url + type );
-            getLogger().warn( "Transfer failed on checksum: " + url + " : " + e.getMessage(), e );
-        }
-    }
-
-    private File transferSimpleFile( Wagon wagon, ArchivaRepository targetRepository, String targetPath, File localFile )
-        throws ProxyException, WagonException
-    {
-        // Transfer the file.
-        File temp = null;
-
-        try
-        {
-            temp = new File( localFile.getAbsolutePath() + ".tmp" );
-
-            boolean success = false;
-
-            if ( localFile.exists() )
-            {
-                getLogger().debug( "Retrieving " + targetPath + " from " + targetRepository.getName() );
-                wagon.get( targetPath, temp );
-                success = true;
 
+                // temp won't exist if we called getIfNewer and it was older, but its still a successful return
                 if ( temp.exists() )
                 {
                     moveTempToTarget( temp, localFile );
                 }
-
-                // You wouldn't get here on failure, a WagonException would have been thrown.
-                getLogger().debug( "Downloaded successfully." );
-            }
-            else
-            {
-                getLogger().debug( "Retrieving " + targetPath + " from " + targetRepository.getName() + " if updated" );
-                success = wagon.getIfNewer( targetPath, temp, localFile.lastModified() );
-                if ( !success )
+                else
                 {
                     getLogger().debug(
-                                       "Not downloaded, as local file is newer than remote side: "
-                                           + localFile.getAbsolutePath() );
-                }
-                else if ( temp.exists() )
-                {
-                    getLogger().debug( "Downloaded successfully." );
-                    moveTempToTarget( temp, localFile );
+                                       "Attempt to retrieving " + targetPath + " from " + targetRepository.getName()
+                                           + " failed: local file does not exist." );
+                    return false;
                 }
-            }
 
-            return localFile;
-        }
-        catch ( ResourceDoesNotExistException e )
-        {
-            getLogger().warn( "Resource does not exist: " + e.getMessage() );
-            throw e;
+                getLogger().debug( "Successfully downloaded" );
+            }
         }
         catch ( WagonException e )
         {
             getLogger().warn( "Download failure:" + e.getMessage(), e );
-            throw e;
-        }
-        finally
-        {
-            if ( temp != null )
-            {
-                temp.delete();
-            }
+            return false;
         }
-    }
 
-    private boolean applyPolicies( Properties policySettings, Map downloadPolicies, Properties request, File localFile )
-    {
-        Iterator it = downloadPolicies.entrySet().iterator();
-        while ( it.hasNext() )
-        {
-            Map.Entry entry = (Entry) it.next();
-            String key = (String) entry.getKey();
-            DownloadPolicy policy = (DownloadPolicy) entry.getValue();
-            String defaultSetting = policy.getDefaultPolicySetting();
-            String setting = policySettings.getProperty( key, defaultSetting );
-
-            getLogger().debug( "Applying [" + key + "] policy with [" + setting + "]" );
-            if ( !policy.applyPolicy( setting, request, localFile ) )
-            {
-                getLogger().debug( "Didn't pass the [" + key + "] policy." );
-                return false;
-            }
-        }
-        return true;
+        // Handle checksum Policy.
+        return checksumPolicy.applyPolicy( connector.getChecksumPolicy(), localFile );
     }
 
     /**
@@ -532,7 +378,7 @@ private boolean connectToRepository( ProxyConnector connector, Wagon wagon, Arch
 
     private boolean matchesPattern( String path, List patterns )
     {
-        if ( isEmpty( patterns ) )
+        if ( CollectionUtils.isEmpty( patterns ) )
         {
             return false;
         }
@@ -596,18 +442,20 @@ private void initConnectorsAndNetworkProxies()
             it = proxyConfigs.iterator();
             while ( it.hasNext() )
             {
-                ProxyConnectorConfiguration proxyConfig = (ProxyConnectorConfiguration) it.next();
+                RepositoryProxyConnectorConfiguration proxyConfig = (RepositoryProxyConnectorConfiguration) it.next();
                 String key = proxyConfig.getSourceRepoId();
 
                 // Create connector object.
                 ProxyConnector connector = new ProxyConnector();
                 connector.setSourceRepository( getRepository( proxyConfig.getSourceRepoId() ) );
                 connector.setTargetRepository( getRepository( proxyConfig.getTargetRepoId() ) );
-                connector.setPolicies( proxyConfig.getPolicies() );
+                connector.setSnapshotsPolicy( proxyConfig.getSnapshotsPolicy() );
+                connector.setReleasesPolicy( proxyConfig.getReleasesPolicy() );
+                connector.setChecksumPolicy( proxyConfig.getChecksumPolicy() );
 
                 // Copy any blacklist patterns.
                 List blacklist = new ArrayList();
-                if ( !isEmpty( proxyConfig.getBlackListPatterns() ) )
+                if ( !CollectionUtils.isEmpty( proxyConfig.getBlackListPatterns() ) )
                 {
                     blacklist.addAll( proxyConfig.getBlackListPatterns() );
                 }
@@ -615,7 +463,7 @@ private void initConnectorsAndNetworkProxies()
 
                 // Copy any whitelist patterns.
                 List whitelist = new ArrayList();
-                if ( !isEmpty( proxyConfig.getWhiteListPatterns() ) )
+                if ( !CollectionUtils.isEmpty( proxyConfig.getWhiteListPatterns() ) )
                 {
                     whitelist.addAll( proxyConfig.getWhiteListPatterns() );
                 }
@@ -661,16 +509,6 @@ private void initConnectorsAndNetworkProxies()
         }
     }
 
-    private boolean isEmpty( Collection collection )
-    {
-        if ( collection == null )
-        {
-            return true;
-        }
-
-        return collection.isEmpty();
-    }
-
     private ArchivaRepository getRepository( String repoId )
     {
         RepositoryConfiguration repoConfig = archivaConfiguration.getConfiguration().findRepositoryById( repoId );