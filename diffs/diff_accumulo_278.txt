diff --git a/test/src/test/java/org/apache/accumulo/test/ShellServerIT.java b/test/src/test/java/org/apache/accumulo/test/ShellServerIT.java
index ee287ee00e..b3d44e3486 100644
--- a/test/src/test/java/org/apache/accumulo/test/ShellServerIT.java
+++ b/test/src/test/java/org/apache/accumulo/test/ShellServerIT.java
@@ -29,6 +29,7 @@ import java.io.OutputStream;
 import java.io.OutputStreamWriter;
 import java.io.PrintWriter;
 import java.lang.reflect.Constructor;
+import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -56,8 +57,8 @@ import org.apache.accumulo.core.metadata.RootTable;
 import org.apache.accumulo.core.security.Authorizations;
 import org.apache.accumulo.core.util.UtilWaitThread;
 import org.apache.accumulo.core.util.shell.Shell;
-import org.apache.accumulo.harness.SharedMiniClusterIT;
 import org.apache.accumulo.test.functional.FunctionalTestUtils;
+import org.apache.accumulo.test.functional.SimpleMacIT;
 import org.apache.accumulo.test.functional.SlowIterator;
 import org.apache.accumulo.tracer.TraceServer;
 import org.apache.commons.io.FileUtils;
@@ -76,7 +77,7 @@ import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TestName;
 
-public class ShellServerIT extends SharedMiniClusterIT {
+public class ShellServerIT extends SimpleMacIT {
   public static class TestOutputStream extends OutputStream {
     StringBuilder sb = new StringBuilder();
 
@@ -93,7 +94,7 @@ public class ShellServerIT extends SharedMiniClusterIT {
       sb.setLength(0);
     }
   }
-
+  
   private static final Logger log = Logger.getLogger(ShellServerIT.class);
 
   public static class StringInputStream extends InputStream {
@@ -117,12 +118,10 @@ public class ShellServerIT extends SharedMiniClusterIT {
   private static abstract class ErrorMessageCallback {
     public abstract String getErrorMessage();
   }
-
+  
   private static class NoOpErrorMessageCallback extends ErrorMessageCallback {
     private static final String empty = "";
-
-    @Override
-    public String getErrorMessage() {
+    public String getErrorMessage() { 
       return empty;
     }
   }
@@ -218,41 +217,34 @@ public class ShellServerIT extends SharedMiniClusterIT {
   private TestShell ts;
 
   private static Process traceProcess;
-  private static String rootPath;
 
   @Rule
   public TestName name = new TestName();
 
   @BeforeClass
   public static void setUpBeforeClass() throws Exception {
-    rootPath = getMiniClusterDir().getAbsolutePath();
-
     // history file is updated in $HOME
-    System.setProperty("HOME", rootPath);
+    System.setProperty("HOME", getFolder().getAbsolutePath());
     System.setProperty("hadoop.tmp.dir", System.getProperty("user.dir") + "/target/hadoop-tmp");
 
-    traceProcess = getCluster().exec(TraceServer.class);
-
-    Connector conn = getCluster().getConnector("root", getToken());
-    TableOperations tops = conn.tableOperations();
+    // use reflection to call this method so it does not need to be made public
+    Method method = getStaticCluster().getClass().getDeclaredMethod("exec", Class.class, String[].class);
+    method.setAccessible(true);
+    traceProcess = (Process) method.invoke(getStaticCluster(), TraceServer.class, new String[0]);
 
     // give the tracer some time to start
-    while (!tops.exists("trace")) {
-      UtilWaitThread.sleep(1000);
-    }
+    UtilWaitThread.sleep(1000);
   }
-
+  
   @Before
   public void setupShell() throws Exception {
-    ts = new TestShell(getRootPassword(), getCluster().getConfig().getInstanceName(), getCluster().getConfig().getZooKeepers(), getCluster().getConfig()
-        .getClientConfFile().getAbsolutePath());
+    ts = new TestShell(ROOT_PASSWORD, getStaticCluster().getConfig().getInstanceName(), getStaticCluster().getConfig().getZooKeepers(),
+        getStaticCluster().getConfig().getClientConfFile().getAbsolutePath());
   }
 
   @AfterClass
   public static void tearDownAfterClass() throws Exception {
-    if (null != traceProcess) {
-      traceProcess.destroy();
-    }
+    traceProcess.destroy();
   }
 
   @After
@@ -273,25 +265,20 @@ public class ShellServerIT extends SharedMiniClusterIT {
     ts.shell.shutdown();
   }
 
-  @Override
-  public int defaultTimeoutSeconds() {
-    return 60;
-  }
-
-  @Test
+  @Test(timeout = 60000)
   public void exporttableImporttable() throws Exception {
     final String table = name.getMethodName(), table2 = table + "2";
-
+    
     // exporttable / importtable
     ts.exec("createtable " + table + " -evc", true);
     make10();
     ts.exec("addsplits row5", true);
     ts.exec("config -t " + table + " -s table.split.threshold=345M", true);
     ts.exec("offline " + table, true);
-    String export = "file://" + new File(rootPath, "ShellServerIT.export").toString();
+    String export = "file://" + new File(getFolder(), "ShellServerIT.export").toString();
     ts.exec("exporttable -t " + table + " " + export, true);
     DistCp cp = newDistCp();
-    String import_ = "file://" + new File(rootPath, "ShellServerIT.import").toString();
+    String import_ = "file://" + new File(getFolder(), "ShellServerIT.import").toString();
     cp.run(new String[] {"-f", export + "/distcp.txt", import_});
     ts.exec("importtable " + table2 + " " + import_, true);
     ts.exec("config -t " + table2 + " -np", true, "345M", true);
@@ -322,10 +309,10 @@ public class ShellServerIT extends SharedMiniClusterIT {
     throw new RuntimeException("Unexpected constructors for DistCp");
   }
 
-  @Test
+  @Test(timeout = 45000)
   public void setscaniterDeletescaniter() throws Exception {
     final String table = name.getMethodName();
-
+    
     // setscaniter, deletescaniter
     ts.exec("createtable " + table);
     ts.exec("insert a cf cq 1");
@@ -340,10 +327,10 @@ public class ShellServerIT extends SharedMiniClusterIT {
 
   }
 
-  @Test
+  @Test(timeout = 45000)
   public void execfile() throws Exception {
     // execfile
-    File file = File.createTempFile("ShellServerIT.execfile", ".conf", new File(rootPath));
+    File file = File.createTempFile("ShellServerIT.execfile", ".conf", getFolder());
     PrintWriter writer = new PrintWriter(file.getAbsolutePath());
     writer.println("about");
     writer.close();
@@ -351,10 +338,10 @@ public class ShellServerIT extends SharedMiniClusterIT {
 
   }
 
-  @Test
+  @Test(timeout = 45000)
   public void egrep() throws Exception {
     final String table = name.getMethodName();
-
+    
     // egrep
     ts.exec("createtable " + table);
     make10();
@@ -363,10 +350,10 @@ public class ShellServerIT extends SharedMiniClusterIT {
     ts.exec("deletetable -f " + table);
   }
 
-  @Test
+  @Test(timeout = 45000)
   public void du() throws Exception {
     final String table = name.getMethodName();
-
+    
     // create and delete a table so we get out of a table context in the shell
     ts.exec("notable", true);
 
@@ -387,7 +374,7 @@ public class ShellServerIT extends SharedMiniClusterIT {
     ts.exec("deletetable -f " + table);
   }
 
-  @Test
+  @Test(timeout = 1000)
   public void debug() throws Exception {
     ts.exec("debug", true, "off", true);
     ts.exec("debug on", true);
@@ -398,10 +385,10 @@ public class ShellServerIT extends SharedMiniClusterIT {
     ts.exec("debug debug debug", false);
   }
 
-  @Test
+  @Test(timeout = 45000)
   public void user() throws Exception {
     final String table = name.getMethodName();
-
+    
     // createuser, deleteuser, user, users, droptable, grant, revoke
     ts.input.set("secret\nsecret\n");
     ts.exec("createuser xyzzy", true);
@@ -422,7 +409,7 @@ public class ShellServerIT extends SharedMiniClusterIT {
     ts.exec("scan", true, "row1", true);
     ts.exec("droptable -f " + table, true);
     ts.exec("deleteuser xyzzy", false, "delete yourself", true);
-    ts.input.set(getRootPassword() + "\n" + getRootPassword() + "\n");
+    ts.input.set(ROOT_PASSWORD + "\n" + ROOT_PASSWORD + "\n");
     ts.exec("user root", true);
     ts.exec("revoke -u xyzzy -s System.CREATE_TABLE", true);
     ts.exec("revoke -u xyzzy -s System.GOOFY", false);
@@ -434,10 +421,10 @@ public class ShellServerIT extends SharedMiniClusterIT {
     ts.exec("users", true, "xyzzy", false);
   }
 
-  @Test
+  @Test(timeout = 45000)
   public void iter() throws Exception {
     final String table = name.getMethodName();
-
+    
     // setshelliter, listshelliter, deleteshelliter
     ts.exec("createtable " + table);
     ts.exec("insert a cf cq 1");
@@ -483,7 +470,7 @@ public class ShellServerIT extends SharedMiniClusterIT {
 
   }
 
-  @Test
+  @Test(timeout = 45000)
   public void setIterOptionPrompt() throws Exception {
     Connector conn = getConnector();
     String tableName = name.getMethodName();
@@ -567,10 +554,10 @@ public class ShellServerIT extends SharedMiniClusterIT {
     fail("Failed to find expected property on " + tableName + ": " + expectedKey + "=" + expectedValue);
   }
 
-  @Test
+  @Test(timeout = 45000)
   public void notable() throws Exception {
     final String table = name.getMethodName();
-
+    
     // notable
     ts.exec("createtable " + table, true);
     ts.exec("scan", true, " " + table + ">", true);
@@ -581,7 +568,7 @@ public class ShellServerIT extends SharedMiniClusterIT {
     ts.exec("deletetable -f " + table);
   }
 
-  @Test
+  @Test(timeout = 45000)
   public void sleep() throws Exception {
     // sleep
     long now = System.currentTimeMillis();
@@ -591,7 +578,7 @@ public class ShellServerIT extends SharedMiniClusterIT {
     assertTrue("Diff was actually " + diff, diff < 600);
   }
 
-  @Test
+  @Test(timeout = 45000)
   public void addauths() throws Exception {
     final String table = name.getMethodName();
     // addauths
@@ -600,7 +587,6 @@ public class ShellServerIT extends SharedMiniClusterIT {
     for (int i = 0; i < 9 && !success; i++) {
       try {
         ts.exec("insert a b c d -l foo", false, "does not have authorization", true, new ErrorMessageCallback() {
-          @Override
           public String getErrorMessage() {
             try {
               Connector c = getConnector();
@@ -616,7 +602,6 @@ public class ShellServerIT extends SharedMiniClusterIT {
     }
     if (!success) {
       ts.exec("insert a b c d -l foo", false, "does not have authorization", true, new ErrorMessageCallback() {
-        @Override
         public String getErrorMessage() {
           try {
             Connector c = getConnector();
@@ -636,8 +621,6 @@ public class ShellServerIT extends SharedMiniClusterIT {
         passed = true;
       } catch (Exception e) {
         UtilWaitThread.sleep(300);
-      } catch (AssertionError e) {
-        UtilWaitThread.sleep(300);
       }
     }
     assertTrue("Could not successfully see updated authoriations", passed);
@@ -647,7 +630,7 @@ public class ShellServerIT extends SharedMiniClusterIT {
     ts.exec("deletetable -f " + table);
   }
 
-  @Test
+  @Test(timeout = 45000)
   public void byeQuitExit() throws Exception {
     // bye, quit, exit
     for (String cmd : "bye quit exit".split(" ")) {
@@ -658,13 +641,13 @@ public class ShellServerIT extends SharedMiniClusterIT {
     }
   }
 
-  @Test
+  @Test(timeout = 45000)
   public void classpath() throws Exception {
     // classpath
     ts.exec("classpath", true, "Level 2: Java Classloader (loads everything defined by java classpath) URL classpath items are", true);
   }
 
-  @Test
+  @Test(timeout = 45000)
   public void clearCls() throws Exception {
     // clear/cls
     if (ts.shell.getReader().getTerminal().isAnsiSupported()) {
@@ -676,10 +659,10 @@ public class ShellServerIT extends SharedMiniClusterIT {
     }
   }
 
-  @Test
+  @Test(timeout = 45000)
   public void clonetable() throws Exception {
     final String table = name.getMethodName(), clone = table + "_clone";
-
+    
     // clonetable
     ts.exec("createtable " + table + " -evc");
     ts.exec("config -t " + table + " -s table.split.threshold=123M", true);
@@ -694,16 +677,16 @@ public class ShellServerIT extends SharedMiniClusterIT {
     ts.exec("deletetable -f " + table);
     ts.exec("deletetable -f " + clone);
   }
-
-  @Test
+  
+  @Test(timeout = 45000)
   public void testCompactions() throws Exception {
     final String table = name.getMethodName();
-
+    
     // compact
     ts.exec("createtable " + table);
-
+    
     String tableId = getTableId(table);
-
+    
     // make two files
     ts.exec("insert a b c d");
     ts.exec("flush -w");
@@ -723,7 +706,7 @@ public class ShellServerIT extends SharedMiniClusterIT {
 
     // at this point there are 4 files in the default tablet
     assertEquals("Files that were found: " + oldFiles, 4, oldFiles.size());
-
+    
     // compact some data:
     ts.exec("compact -b g -e z -w");
     assertEquals(2, countFiles(tableId));
@@ -735,10 +718,10 @@ public class ShellServerIT extends SharedMiniClusterIT {
     ts.exec("deletetable -f " + table);
   }
 
-  @Test
+  @Test(timeout = 45000)
   public void constraint() throws Exception {
     final String table = name.getMethodName();
-
+    
     // constraint
     ts.exec("constraint -l -t " + MetadataTable.NAME + "", true, "MetadataConstraints=1", true);
     ts.exec("createtable " + table + " -evc");
@@ -754,10 +737,10 @@ public class ShellServerIT extends SharedMiniClusterIT {
     ts.exec("deletetable -f " + table);
   }
 
-  @Test
+  @Test(timeout = 45000)
   public void deletemany() throws Exception {
     final String table = name.getMethodName();
-
+    
     // deletemany
     ts.exec("createtable " + table);
     make10();
@@ -783,48 +766,42 @@ public class ShellServerIT extends SharedMiniClusterIT {
     ts.exec("deletetable -f " + table);
   }
 
-  @Test
+  @Test(timeout = 45000)
   public void deleterows() throws Exception {
     final String table = name.getMethodName();
 
     ts.exec("createtable " + table);
     final String tableId = getTableId(table);
-
+    
     // deleterows
     int base = countFiles(tableId);
     assertEquals(0, base);
-
-    log.info("Adding 2 splits");
+    
     ts.exec("addsplits row5 row7");
-
-    log.info("Writing 10 records");
     make10();
-
-    log.info("Flushing table");
     ts.exec("flush -w -t " + table);
-    log.info("Table flush completed");
-
-    // One of the tablets we're writing to might migrate inbetween writing data which would create a 2nd file for that tablet
-    // If we notice this, compact and then move on.
-    List<String> files = getFiles(tableId);
-    if (3 < files.size()) {
-      log.info("More than 3 files were found, compacting before proceeding");
-      ts.exec("compact -w -t " + table);
+    // Might have some cruft here. Check a couple of times.
+    List<String> files = null;
+    boolean found = false;
+    for (int i = 0; i < 50 && !found; i++) {
       files = getFiles(tableId);
-      assertEquals("Expected to only find 3 files after compaction: " + files, 3, files.size());
+      if (3 == files.size()) {
+        found = true;
+      } else {
+        UtilWaitThread.sleep(300);
+      }
     }
-
     assertNotNull(files);
     assertEquals("Found the following files: " + files, 3, files.size());
-    ts.exec("deleterows -t " + table + " -b row5 -e row7");
+    ts.exec("deleterows -t " + table + " -b row5 -e row7", true);
     assertEquals(2, countFiles(tableId));
     ts.exec("deletetable -f " + table);
   }
 
-  @Test
+  @Test(timeout = 45000)
   public void groups() throws Exception {
     final String table = name.getMethodName();
-
+    
     ts.exec("createtable " + table);
     ts.exec("setgroups -t " + table + " alpha=a,b,c num=3,2,1");
     ts.exec("getgroups -t " + table, true, "alpha=a,b,c", true);
@@ -832,10 +809,10 @@ public class ShellServerIT extends SharedMiniClusterIT {
     ts.exec("deletetable -f " + table);
   }
 
-  @Test
+  @Test(timeout = 45000)
   public void grep() throws Exception {
     final String table = name.getMethodName();
-
+    
     ts.exec("createtable " + table, true);
     make10();
     ts.exec("grep row[123]", true, "row1", false);
@@ -843,7 +820,7 @@ public class ShellServerIT extends SharedMiniClusterIT {
     ts.exec("deletetable -f " + table, true);
   }
 
-  @Test
+  @Test(timeout = 45000)
   public void help() throws Exception {
     ts.exec("help -np", true, "Help Commands", true);
     ts.exec("?", true, "Help Commands", true);
@@ -859,7 +836,7 @@ public class ShellServerIT extends SharedMiniClusterIT {
   // @Test(timeout = 45000)
   public void history() throws Exception {
     final String table = name.getMethodName();
-
+    
     ts.exec("history -c", true);
     ts.exec("createtable " + table);
     ts.exec("deletetable -f " + table);
@@ -867,17 +844,17 @@ public class ShellServerIT extends SharedMiniClusterIT {
     ts.exec("history", true, "history", true);
   }
 
-  @Test
+  @Test(timeout = 45000)
   public void importDirectory() throws Exception {
     final String table = name.getMethodName();
-
+    
     Configuration conf = new Configuration();
     FileSystem fs = FileSystem.get(conf);
-    File importDir = new File(rootPath, "import");
+    File importDir = new File(getFolder(), "import");
     importDir.mkdir();
     String even = new File(importDir, "even.rf").toString();
     String odd = new File(importDir, "odd.rf").toString();
-    File errorsDir = new File(rootPath, "errors");
+    File errorsDir = new File(getFolder(), "errors");
     errorsDir.mkdir();
     fs.mkdirs(new Path(errorsDir.toString()));
     AccumuloConfiguration aconf = AccumuloConfiguration.getDefaultConfiguration();
@@ -905,15 +882,15 @@ public class ShellServerIT extends SharedMiniClusterIT {
     ts.exec("deletetable -f " + table);
   }
 
-  @Test
+  @Test(timeout = 45000)
   public void info() throws Exception {
     ts.exec("info", true, Constants.VERSION, true);
   }
 
-  @Test
+  @Test(timeout = 45000)
   public void interpreter() throws Exception {
     final String table = name.getMethodName();
-
+    
     ts.exec("createtable " + table, true);
     ts.exec("interpreter -l", true, "HexScan", false);
     ts.exec("insert \\x02 cf cq value", true);
@@ -927,10 +904,10 @@ public class ShellServerIT extends SharedMiniClusterIT {
     ts.exec("deletetable -f " + table, true);
   }
 
-  @Test
+  @Test(timeout = 45000)
   public void listcompactions() throws Exception {
     final String table = name.getMethodName();
-
+    
     ts.exec("createtable " + table, true);
     ts.exec("config -t " + table + " -s table.iterator.minc.slow=30,org.apache.accumulo.test.functional.SlowIterator", true);
     ts.exec("config -t " + table + " -s table.iterator.minc.slow.opt.sleepTime=1000", true);
@@ -948,10 +925,10 @@ public class ShellServerIT extends SharedMiniClusterIT {
     ts.exec("deletetable -f " + table, true);
   }
 
-  @Test
+  @Test(timeout = 45000)
   public void maxrow() throws Exception {
     final String table = name.getMethodName();
-
+    
     ts.exec("createtable " + table, true);
     ts.exec("insert a cf cq value", true);
     ts.exec("insert b cf cq value", true);
@@ -963,10 +940,10 @@ public class ShellServerIT extends SharedMiniClusterIT {
     ts.exec("deletetable -f " + table, true);
   }
 
-  @Test
+  @Test(timeout = 45000)
   public void merge() throws Exception {
     final String table = name.getMethodName();
-
+    
     ts.exec("createtable " + table);
     ts.exec("addsplits a m z");
     ts.exec("getsplits", true, "z", true);
@@ -982,7 +959,7 @@ public class ShellServerIT extends SharedMiniClusterIT {
     assertEquals(1, ts.output.get().split("\n").length);
   }
 
-  @Test
+  @Test(timeout = 45000)
   public void ping() throws Exception {
     for (int i = 0; i < 10; i++) {
       ts.exec("ping", true, "OK", true);
@@ -995,10 +972,10 @@ public class ShellServerIT extends SharedMiniClusterIT {
     assertEquals(3, ts.output.get().split("\n").length);
   }
 
-  @Test
+  @Test(timeout = 45000)
   public void renametable() throws Exception {
     final String table = name.getMethodName() + "1", rename = name.getMethodName() + "2";
-
+    
     ts.exec("createtable " + table);
     ts.exec("insert this is a value");
     ts.exec("renametable " + table + " " + rename);
@@ -1008,7 +985,7 @@ public class ShellServerIT extends SharedMiniClusterIT {
     ts.exec("deletetable -f " + rename, true);
   }
 
-  @Test
+  @Test(timeout = 30000)
   public void tables() throws Exception {
     final String table = name.getMethodName(), table1 = table + "_z", table2 = table + "_a";
     ts.exec("createtable " + table1);
@@ -1020,7 +997,7 @@ public class ShellServerIT extends SharedMiniClusterIT {
     assertTrue(lst.indexOf(table1) < lst.indexOf(table2));
   }
 
-  @Test
+  @Test(timeout = 45000)
   public void systempermission() throws Exception {
     ts.exec("systempermissions");
     assertEquals(11, ts.output.get().split("\n").length - 1);
@@ -1028,10 +1005,10 @@ public class ShellServerIT extends SharedMiniClusterIT {
     assertEquals(6, ts.output.get().split("\n").length - 1);
   }
 
-  @Test
+  @Test(timeout = 45000)
   public void listscans() throws Exception {
     final String table = name.getMethodName();
-
+    
     ts.exec("createtable " + table, true);
 
     // Should be about a 3 second scan
@@ -1060,15 +1037,11 @@ public class ShellServerIT extends SharedMiniClusterIT {
     // Try to find the active scan for about 15seconds
     for (int i = 0; i < 50 && scans.isEmpty(); i++) {
       String currentScans = ts.exec("listscans", true);
-      log.info("Got output from listscans:\n" + currentScans);
       String[] lines = currentScans.split("\n");
-      for (int scanOffset = 2; scanOffset < lines.length; scanOffset++) {
+      for (int scanOffset = 2; i < lines.length; i++) {
         String currentScan = lines[scanOffset];
         if (currentScan.contains(table)) {
-          log.info("Retaining scan: " + currentScan);
           scans.add(currentScan);
-        } else {
-          log.info("Ignoring scan because of wrong table: " + currentScan);
         }
       }
       UtilWaitThread.sleep(300);
@@ -1078,12 +1051,9 @@ public class ShellServerIT extends SharedMiniClusterIT {
     assertFalse("Could not find any active scans over table " + table, scans.isEmpty());
 
     for (String scan : scans) {
-      if (!scan.contains("RUNNING")) {
-        log.info("Ignoring scan because it doesn't contain 'RUNNING': " + scan);
-        continue;
-      }
+      assertTrue("Scan does not appear to be a 'RUNNING' scan: '" + scan + "'", scan.contains("RUNNING"));
       String parts[] = scan.split("\\|");
-      assertEquals("Expected 14 colums, but found " + parts.length + " instead for '" + Arrays.toString(parts) + "'", 14, parts.length);
+      assertEquals("Expected 13 colums, but found " + parts.length + " instead for '" + Arrays.toString(parts) + "'", 13, parts.length);
       String tserver = parts[0].trim();
       // TODO: any way to tell if the client address is accurate? could be local IP, host, loopback...?
       String hostPortPattern = ".+:\\d+";
@@ -1091,28 +1061,27 @@ public class ShellServerIT extends SharedMiniClusterIT {
       assertTrue(getConnector().instanceOperations().getTabletServers().contains(tserver));
       String client = parts[1].trim();
       assertTrue(client.matches(hostPortPattern));
-      // Scan ID should be a long (throwing an exception if it fails to parse)
-      Long.parseLong(parts[11].trim());
     }
-
+    
     ts.exec("deletetable -f " + table, true);
   }
 
-  @Test
+  @Test(timeout = 45000)
   public void testPertableClasspath() throws Exception {
     final String table = name.getMethodName();
 
-    File fooFilterJar = File.createTempFile("FooFilter", ".jar", new File(rootPath));
-
+    File fooFilterJar = File.createTempFile("FooFilter", ".jar", getFolder());
+    
     FileUtils.copyURLToFile(this.getClass().getResource("/FooFilter.jar"), fooFilterJar);
     fooFilterJar.deleteOnExit();
 
-    File fooConstraintJar = File.createTempFile("FooConstraint", ".jar", new File(rootPath));
+    File fooConstraintJar = File.createTempFile("FooConstraint", ".jar", getFolder());
     FileUtils.copyURLToFile(this.getClass().getResource("/FooConstraint.jar"), fooConstraintJar);
     fooConstraintJar.deleteOnExit();
 
-    ts.exec("config -s " + Property.VFS_CONTEXT_CLASSPATH_PROPERTY.getKey() + "cx1=" + fooFilterJar.toURI().toString() + ","
-        + fooConstraintJar.toURI().toString(), true);
+    ts.exec(
+        "config -s " + Property.VFS_CONTEXT_CLASSPATH_PROPERTY.getKey() + "cx1=" + fooFilterJar.toURI().toString() + "," + fooConstraintJar.toURI().toString(),
+        true);
 
     ts.exec("createtable " + table, true);
     ts.exec("config -t " + table + " -s " + Property.TABLE_CLASSPATH.getKey() + "=cx1", true);
@@ -1144,11 +1113,11 @@ public class ShellServerIT extends SharedMiniClusterIT {
 
   }
 
-  @Test
+  @Test(timeout = 45000)
   public void trace() throws Exception {
     // Make sure to not collide with the "trace" table
     final String table = name.getMethodName() + "Test";
-
+    
     ts.exec("trace on", true);
     ts.exec("createtable " + table, true);
     ts.exec("insert a b c value", true);
@@ -1162,14 +1131,14 @@ public class ShellServerIT extends SharedMiniClusterIT {
     assertTrue(trace.contains("DeleteTable"));
   }
 
-  @Test
+  @Test(timeout = 30000)
   public void badLogin() throws Exception {
-    ts.input.set(getRootPassword() + "\n");
+    ts.input.set(ROOT_PASSWORD + "\n");
     String err = ts.exec("user NoSuchUser", false);
     assertTrue(err.contains("BAD_CREDENTIALS for user NoSuchUser"));
   }
 
-  @Test
+  @Test(timeout = 30000)
   public void namespaces() throws Exception {
     ts.exec("namespaces", true, "\"\"", true); // default namespace, displayed as quoted empty string
     ts.exec("namespaces", true, Namespaces.ACCUMULO_NAMESPACE, true);
@@ -1245,7 +1214,7 @@ public class ShellServerIT extends SharedMiniClusterIT {
     return ts.output.get().split("\n").length - 1;
   }
 
-  @Test
+  @Test(timeout = 30000)
   public void scans() throws Exception {
     ts.exec("createtable t");
     make10();
@@ -1264,7 +1233,7 @@ public class ShellServerIT extends SharedMiniClusterIT {
     ts.exec("deletetable -f t");
   }
 
-  @Test
+  @Test(timeout = 30000)
   public void whoami() throws Exception {
     assertTrue(ts.exec("whoami", true).contains("root"));
     ts.input.set("secret\nsecret\n");
@@ -1275,7 +1244,7 @@ public class ShellServerIT extends SharedMiniClusterIT {
     ts.input.set("secret\n");
     ts.exec("user test_user", true);
     assertTrue(ts.exec("whoami", true).contains("test_user"));
-    ts.input.set(getRootPassword() + "\n");
+    ts.input.set(ROOT_PASSWORD + "\n");
     ts.exec("user root", true);
   }
 
@@ -1284,14 +1253,14 @@ public class ShellServerIT extends SharedMiniClusterIT {
       ts.exec(String.format("insert row%d cf col%d value", i, i));
     }
   }
-
+  
   private List<String> getFiles(String tableId) throws IOException {
     ts.output.clear();
 
     ts.exec("scan -t " + MetadataTable.NAME + " -np -c file -b " + tableId + " -e " + tableId + "~");
-
+    
     log.debug("countFiles(): " + ts.output.get());
-
+    
     String[] lines = StringUtils.split(ts.output.get(), "\n");
     ts.output.clear();
 
@@ -1305,10 +1274,10 @@ public class ShellServerIT extends SharedMiniClusterIT {
   private int countFiles(String tableId) throws IOException {
     return getFiles(tableId).size();
   }
-
+  
   private String getTableId(String tableName) throws Exception {
     Connector conn = getConnector();
-
+    
     for (int i = 0; i < 5; i++) {
       Map<String,String> nameToId = conn.tableOperations().tableIdMap();
       if (nameToId.containsKey(tableName)) {
@@ -1317,7 +1286,7 @@ public class ShellServerIT extends SharedMiniClusterIT {
         Thread.sleep(1000);
       }
     }
-
+    
     fail("Could not find ID for table: " + tableName);
     // Will never get here
     return null;