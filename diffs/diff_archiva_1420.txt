diff --git a/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/ProxiedDavServer.java b/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/ProxiedDavServer.java
index 07b58c5bb..c3e4bfc32 100644
--- a/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/ProxiedDavServer.java
+++ b/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/ProxiedDavServer.java
@@ -19,23 +19,25 @@
  * under the License.
  */
 
+import org.apache.commons.lang.StringUtils;
+import org.apache.maven.archiva.configuration.ArchivaConfiguration;
+import org.apache.maven.archiva.configuration.Configuration;
+import org.apache.maven.archiva.configuration.RepositoryConfiguration;
+import org.apache.maven.archiva.model.ArchivaArtifact;
+import org.apache.maven.archiva.model.ArchivaRepository;
+import org.apache.maven.archiva.model.ArchivaRepositoryMetadata;
 import org.apache.maven.archiva.model.ArtifactReference;
 import org.apache.maven.archiva.model.ProjectReference;
 import org.apache.maven.archiva.model.VersionedReference;
+import org.apache.maven.archiva.proxy.ProxyConnector;
 import org.apache.maven.archiva.proxy.ProxyException;
 import org.apache.maven.archiva.proxy.RepositoryProxyConnectors;
-import org.apache.maven.archiva.repository.ManagedRepositoryContent;
-import org.apache.maven.archiva.repository.RepositoryContentFactory;
-import org.apache.maven.archiva.repository.RepositoryException;
-import org.apache.maven.archiva.repository.RepositoryNotFoundException;
-import org.apache.maven.archiva.repository.content.RepositoryRequest;
+import org.apache.maven.archiva.repository.ArchivaConfigurationAdaptor;
+import org.apache.maven.archiva.repository.layout.BidirectionalRepositoryLayout;
+import org.apache.maven.archiva.repository.layout.BidirectionalRepositoryLayoutFactory;
 import org.apache.maven.archiva.repository.layout.LayoutException;
-import org.apache.maven.archiva.repository.metadata.MetadataTools;
-import org.apache.maven.archiva.repository.metadata.RepositoryMetadataException;
-import org.apache.maven.model.DistributionManagement;
-import org.apache.maven.model.Model;
-import org.apache.maven.model.Relocation;
-import org.apache.maven.model.io.xpp3.MavenXpp3Reader;
+import org.apache.maven.wagon.ResourceDoesNotExistException;
+import org.apache.maven.wagon.proxy.ProxyInfo;
 import org.codehaus.plexus.webdav.AbstractDavServerComponent;
 import org.codehaus.plexus.webdav.DavServerComponent;
 import org.codehaus.plexus.webdav.DavServerException;
@@ -43,10 +45,11 @@
 import org.codehaus.plexus.webdav.util.WebdavMethodUtil;
 
 import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.FileReader;
 import java.io.IOException;
-import java.io.PrintWriter;
+import java.lang.reflect.Proxy;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
 
 import javax.servlet.ServletConfig;
 import javax.servlet.ServletException;
@@ -58,7 +61,8 @@
  * @author <a href="mailto:joakime@apache.org">Joakim Erdfelt</a>
  * @version $Id$
  * @plexus.component role="org.codehaus.plexus.webdav.DavServerComponent"
- * role-hint="proxied" instantiation-strategy="per-lookup"
+ * role-hint="proxied"
+ * instantiation-strategy="per-lookup"
  */
 public class ProxiedDavServer
     extends AbstractDavServerComponent
@@ -71,12 +75,7 @@
     /**
      * @plexus.requirement
      */
-    private RepositoryContentFactory repositoryFactory;
-
-    /**
-     * @plexus.requirement
-     */
-    private RepositoryRequest repositoryRequest;
+    private ArchivaConfiguration archivaConfiguration;
 
     /**
      * @plexus.requirement role-hint="default"
@@ -86,9 +85,15 @@
     /**
      * @plexus.requirement
      */
-    private MetadataTools metadataTools;
+    private BidirectionalRepositoryLayoutFactory layoutFactory;
+
+    private BidirectionalRepositoryLayout layout;
+
+    private RepositoryConfiguration repositoryConfiguration;
 
-    private ManagedRepositoryContent managedRepository;
+    private ArchivaRepository managedRepository;
+
+    private List/*<ArtifactRepository>*/proxiedRepositories;
 
     public String getPrefix()
     {
@@ -115,17 +120,21 @@ public void init( ServletConfig servletConfig )
     {
         davServer.init( servletConfig );
 
+        proxiedRepositories = new ArrayList();
+
+        Configuration config = archivaConfiguration.getConfiguration();
+
+        repositoryConfiguration = config.findRepositoryById( getPrefix() );
+
+        managedRepository = ArchivaConfigurationAdaptor.toArchivaRepository( repositoryConfiguration );
+
         try
         {
-            managedRepository = repositoryFactory.getManagedRepositoryContent( getPrefix() );
-        }
-        catch ( RepositoryNotFoundException e )
-        {
-            throw new DavServerException( e.getMessage(), e );
+            layout = layoutFactory.getLayout( managedRepository.getLayoutType() );
         }
-        catch ( RepositoryException e )
+        catch ( LayoutException e )
         {
-            throw new DavServerException( e.getMessage(), e );
+            throw new DavServerException( "Unable to initialize dav server: " + e.getMessage(), e );
         }
     }
 
@@ -134,92 +143,13 @@ public void process( DavServerRequest request, HttpServletResponse response )
     {
         if ( WebdavMethodUtil.isReadMethod( request.getRequest().getMethod() ) )
         {
-            fetchContentFromProxies( request );
-        }
-        else
-        {
-            /* Create parent directories that don't exist when writing a file
-             * This actually makes this implementation not compliant to the
-             * WebDAV RFC - but we have enough knowledge
-             * about how the collection is being used to do this reasonably and
-             * some versions of Maven's WebDAV don't
-             * correctly create the collections themselves.
-             */
-
-            File rootDirectory = getRootDirectory();
-            if ( rootDirectory != null )
+            if ( !hasResource( request.getLogicalResource() ) )
             {
-                new File( rootDirectory, request.getLogicalResource() ).getParentFile().mkdirs();
+                fetchContentFromProxies( request );
             }
         }
 
-        // [MRM-503] - Metadata file need Pragma:no-cache response header.
-        if ( request.getLogicalResource().endsWith( "/maven-metadata.xml" ) )
-        {
-            response.addHeader( "Pragma", "no-cache" );
-            response.addHeader( "Cache-Control", "no-cache" );
-        }
-
-        // TODO: [MRM-524] determine http caching options for other types of files (artifacts, sha1, md5, snapshots)
-
-        if( resourceExists( request ) )
-        {
-            davServer.process( request, response );
-        }
-        else
-        {
-            respondResourceMissing( request, response );
-        }
-    }
-
-    private void respondResourceMissing( DavServerRequest request, HttpServletResponse response )
-    {
-        response.setStatus( HttpServletResponse.SC_NOT_FOUND );
-
-        try
-        {
-            StringBuffer missingUrl = new StringBuffer();
-            missingUrl.append( request.getRequest().getScheme() ).append( "://" );
-            missingUrl.append( request.getRequest().getServerName() ).append( ":" );
-            missingUrl.append( request.getRequest().getServerPort() );
-            missingUrl.append( request.getRequest().getServletPath() );
-            // missingUrl.append( request.getRequest().getPathInfo() );
-
-            String message = "Error 404 Not Found";
-
-            PrintWriter out = new PrintWriter( response.getOutputStream() );
-
-            response.setContentType( "text/html; charset=\"UTF-8\"" );
-
-            out.println( "<html>" );
-            out.println( "<head><title>" + message + "</title></head>" );
-            out.println( "<body>" );
-
-            out.print( "<p><h1>" );
-            out.print( message );
-            out.println( "</h1></p>" );
-
-            out.print( "<p>The following resource does not exist: <a href=\"" );
-            out.print( missingUrl.toString() );
-            out.println( "\">" );
-            out.print( missingUrl.toString() );
-            out.println( "</a></p>" );
-
-            out.println( "</body></html>" );
-
-            out.flush();
-        }
-        catch ( IOException e )
-        {
-            e.printStackTrace();
-        }
-    }
-
-    private boolean resourceExists( DavServerRequest request )
-    {
-        String resource = request.getLogicalResource();
-        File resourceFile = new File( managedRepository.getRepoRoot(), resource );
-        return resourceFile.exists();
+        davServer.process( request, response );
     }
 
     private void fetchContentFromProxies( DavServerRequest request )
@@ -227,159 +157,53 @@ private void fetchContentFromProxies( DavServerRequest request )
     {
         String resource = request.getLogicalResource();
         
-        // Cleanup bad requests from maven 1.
-        // Often seen is a double slash.
-        // example: http://hostname:8080/archiva/repository/internal//pmd/jars/pmd-3.0.jar
-        if ( resource.startsWith( "/" ) )
-        {
-            resource = resource.substring( 1 );
-        }
-
-        if ( resource.endsWith( ".sha1" ) || resource.endsWith( ".md5" ) )
+        if( resource.endsWith( ".sha1" ) ||
+            resource.endsWith( ".md5") )
         {
             // Checksums are fetched with artifact / metadata.
             return;
         }
-
-        // Is it a Metadata resource?
-        if ( resource.endsWith( "/" + MetadataTools.MAVEN_METADATA ) )
+        
+        try
         {
             ProjectReference project;
             VersionedReference versioned;
-
-            try
-            {
-
-                versioned = metadataTools.toVersionedReference( resource );
-                if ( versioned != null )
-                {
-                    connectors.fetchFromProxies( managedRepository, versioned );
-                    request.getRequest().setPathInfo( metadataTools.toPath( versioned ) );
-                    return;
-                }
-            }
-            catch ( RepositoryMetadataException e )
-            {
-                /* eat it */
-            }
-            catch ( ProxyException e )
-            {
-                throw new ServletException( "Unable to fetch versioned metadata resource.", e );
-            }
-
-            try
-            {
-                project = metadataTools.toProjectReference( resource );
-                if ( project != null )
-                {
-                    connectors.fetchFromProxies( managedRepository, project );
-                    request.getRequest().setPathInfo( metadataTools.toPath( project ) );
-                }
-            }
-            catch ( RepositoryMetadataException e )
+            ArtifactReference artifact;
+            
+            artifact = layout.toArtifactReference( resource );
+            if( artifact != null )
             {
-                /* eat it */
+                connectors.fetchFromProxies( managedRepository, artifact );
+                return;
             }
-            catch ( ProxyException e )
+            
+            versioned = layout.toVersionedReference( resource );
+            if( versioned != null )
             {
-                throw new ServletException( "Unable to fetch project metadata resource.", e );
+                connectors.fetchFromProxies( managedRepository, versioned );
+                return;
             }
-        }
-
-        // Not any of the above? Then it's gotta be an artifact reference.
-        try
-        {
-            // Get the artifact reference in a layout neutral way.
-            ArtifactReference artifact = repositoryRequest.toArtifactReference( resource );
             
-            if ( artifact != null )
+            project = layout.toProjectReference( resource );
+            if( project != null )
             {
-                applyServerSideRelocation( artifact );
-
-                connectors.fetchFromProxies( managedRepository, artifact );
-                
-                // Set the path to the resource using managed repository specific layout format.
-                request.getRequest().setPathInfo( managedRepository.toPath( artifact ) );
+                connectors.fetchFromProxies( managedRepository, project );
                 return;
             }
         }
-        catch ( LayoutException e )
-        {
-            /* eat it */
-        }
-        catch ( ProxyException e )
-        {
-            throw new ServletException( "Unable to fetch artifact resource.", e );
-        }
-    }
-
-    /**
-     * A relocation capable client will request the POM prior to the artifact,
-     * and will then read meta-data and do client side relocation. A simplier
-     * client (like maven 1) will only request the artifact and not use the
-     * metadatas.
-     * <p>
-     * For such clients, archiva does server-side relocation by reading itself
-     * the &lt;relocation&gt; element in metadatas and serving the expected
-     * artifact.
-     */
-    protected void applyServerSideRelocation( ArtifactReference artifact )
-        throws ProxyException
-    {
-        if ( "pom".equals( artifact.getType() ) )
+        catch ( ResourceDoesNotExistException e )
         {
+            // return an HTTP 404 instead of HTTP 500 error.
             return;
         }
-
-        // Build the artifact POM reference
-        ArtifactReference pomReference = new ArtifactReference();
-        pomReference.setGroupId( artifact.getGroupId() );
-        pomReference.setArtifactId( artifact.getArtifactId() );
-        pomReference.setVersion( artifact.getVersion() );
-        pomReference.setType( "pom" );
-
-        // Get the artifact POM from proxied repositories if needed
-        connectors.fetchFromProxies( managedRepository, pomReference );
-
-        // Open and read the POM from the managed repo
-        File pom = managedRepository.toFile( pomReference );
-        try
-        {
-            Model model = new MavenXpp3Reader().read( new FileReader( pom ) );
-            DistributionManagement dist = model.getDistributionManagement();
-            if ( dist != null )
-            {
-                Relocation relocation = dist.getRelocation();
-                if ( relocation != null )
-                {
-                    // artifact is relocated : update the repositoryPath
-                    if ( relocation.getGroupId() != null )
-                    {
-                        artifact.setGroupId( relocation.getGroupId() );
-                    }
-                    if ( relocation.getArtifactId() != null )
-                    {
-                        artifact.setArtifactId( relocation.getArtifactId() );
-                    }
-                    if ( relocation.getVersion() != null )
-                    {
-                        artifact.setVersion( relocation.getVersion() );
-                    }
-                }
-            }
-        }
-        catch ( FileNotFoundException e )
-        {
-            // Artifact has no POM in repo : ignore
-        }
-        catch ( Exception e )
+        catch ( ProxyException e )
         {
-            // invalid POM : ignore
+            throw new ServletException( "Unable to fetch resource.", e );
         }
     }
 
-    public ManagedRepositoryContent getRepository()
+    public RepositoryConfiguration getRepositoryConfiguration()
     {
-        return managedRepository;
+        return repositoryConfiguration;
     }
 }