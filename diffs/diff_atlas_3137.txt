diff --git a/repository/src/main/java/org/apache/atlas/repository/store/graph/v2/EntityGraphMapper.java b/repository/src/main/java/org/apache/atlas/repository/store/graph/v2/EntityGraphMapper.java
index 765ba36d5..7e763ebf4 100644
--- a/repository/src/main/java/org/apache/atlas/repository/store/graph/v2/EntityGraphMapper.java
+++ b/repository/src/main/java/org/apache/atlas/repository/store/graph/v2/EntityGraphMapper.java
@@ -36,17 +36,14 @@ import org.apache.atlas.model.instance.EntityMutationResponse;
 import org.apache.atlas.model.instance.EntityMutations.EntityOperation;
 import org.apache.atlas.model.typedef.AtlasStructDef.AtlasAttributeDef;
 import org.apache.atlas.model.typedef.AtlasStructDef.AtlasAttributeDef.Cardinality;
-import org.apache.atlas.repository.Constants;
 import org.apache.atlas.repository.RepositoryException;
 import org.apache.atlas.repository.converters.AtlasInstanceConverter;
 import org.apache.atlas.repository.graph.FullTextMapperV2;
 import org.apache.atlas.repository.graph.GraphHelper;
 import org.apache.atlas.repository.graphdb.AtlasEdge;
-import org.apache.atlas.repository.graphdb.AtlasEdgeDirection;
 import org.apache.atlas.repository.graphdb.AtlasGraph;
 import org.apache.atlas.repository.graphdb.AtlasVertex;
 import org.apache.atlas.repository.store.graph.AtlasRelationshipStore;
-import org.apache.atlas.repository.store.graph.EntityGraphDiscoveryContext;
 import org.apache.atlas.repository.store.graph.v1.DeleteHandlerDelegate;
 import org.apache.atlas.type.AtlasArrayType;
 import org.apache.atlas.type.AtlasBuiltInTypes;
@@ -62,7 +59,6 @@ import org.apache.atlas.type.AtlasTypeUtil;
 import org.apache.atlas.utils.AtlasEntityUtil;
 import org.apache.atlas.utils.AtlasJson;
 import org.apache.atlas.utils.AtlasPerfMetrics.MetricRecorder;
-import org.apache.atlas.utils.AtlasPerfTracer;
 import org.apache.commons.codec.digest.DigestUtils;
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.collections.MapUtils;
@@ -73,11 +69,8 @@ import org.springframework.stereotype.Component;
 
 import javax.inject.Inject;
 import java.util.*;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
-import static org.apache.atlas.AtlasConfiguration.LABEL_MAX_LENGTH;
 import static org.apache.atlas.model.TypeCategory.CLASSIFICATION;
 import static org.apache.atlas.model.instance.AtlasEntity.Status.ACTIVE;
 import static org.apache.atlas.model.instance.AtlasEntity.Status.DELETED;
@@ -92,8 +85,6 @@ import static org.apache.atlas.repository.graph.GraphHelper.getCollectionElement
 import static org.apache.atlas.repository.graph.GraphHelper.getClassificationEdge;
 import static org.apache.atlas.repository.graph.GraphHelper.getClassificationVertex;
 import static org.apache.atlas.repository.graph.GraphHelper.getDefaultRemovePropagations;
-import static org.apache.atlas.repository.graph.GraphHelper.getDelimitedClassificationNames;
-import static org.apache.atlas.repository.graph.GraphHelper.getLabels;
 import static org.apache.atlas.repository.graph.GraphHelper.getMapElementsProperty;
 import static org.apache.atlas.repository.graph.GraphHelper.getStatus;
 import static org.apache.atlas.repository.graph.GraphHelper.getTraitLabel;
@@ -112,17 +103,10 @@ import static org.apache.atlas.type.AtlasStructType.AtlasAttribute.AtlasRelation
 
 @Component
 public class EntityGraphMapper {
-    private static final Logger LOG      = LoggerFactory.getLogger(EntityGraphMapper.class);
-    private static final Logger PERF_LOG = AtlasPerfTracer.getPerfLogger("entityGraphMapper");
-
-    private static final String  SOFT_REF_FORMAT                   = "%s:%s";
-    private static final int     INDEXED_STR_SAFE_LEN              = AtlasConfiguration.GRAPHSTORE_INDEXED_STRING_SAFE_LENGTH.getInt();
-    private static final boolean WARN_ON_NO_RELATIONSHIP           = AtlasConfiguration.RELATIONSHIP_WARN_NO_RELATIONSHIPS.getBoolean();
-    private static final String  CLASSIFICATION_NAME_DELIMITER     = "|";
-    private static final Pattern CUSTOM_ATTRIBUTE_KEY_REGEX        = Pattern.compile("^[a-zA-Z0-9_-]*$");
-    private static final Pattern LABEL_REGEX                       = Pattern.compile("^[a-zA-Z0-9_-]*$");
-    private static final int     CUSTOM_ATTRIBUTE_KEY_MAX_LENGTH   = AtlasConfiguration.CUSTOM_ATTRIBUTE_KEY_MAX_LENGTH.getInt();
-    private static final int     CUSTOM_ATTRIBUTE_VALUE_MAX_LENGTH = AtlasConfiguration.CUSTOM_ATTRIBUTE_VALUE_MAX_LENGTH.getInt();
+    private static final Logger LOG = LoggerFactory.getLogger(EntityGraphMapper.class);
+
+    private static final String SOFT_REF_FORMAT      = "%s:%s";
+    private static final int INDEXED_STR_SAFE_LEN = AtlasConfiguration.GRAPHSTORE_INDEXED_STRING_SAFE_LENGTH.getInt();
 
     private final GraphHelper               graphHelper = GraphHelper.getInstance();
     private final AtlasGraph                graph;
@@ -132,7 +116,7 @@ public class EntityGraphMapper {
     private final AtlasEntityChangeNotifier entityChangeNotifier;
     private final AtlasInstanceConverter    instanceConverter;
     private final EntityGraphRetriever      entityRetriever;
-    private final FullTextMapperV2          fullTextMapperV2;
+    private final FullTextMapperV2 fullTextMapperV2;
 
     @Inject
     public EntityGraphMapper(DeleteHandlerDelegate deleteDelegate, AtlasTypeRegistry typeRegistry, AtlasGraph atlasGraph,
@@ -148,54 +132,19 @@ public class EntityGraphMapper {
         this.fullTextMapperV2     = fullTextMapperV2;
     }
 
-    public AtlasVertex createVertex(AtlasEntity entity) throws AtlasBaseException {
+    public AtlasVertex createVertex(AtlasEntity entity) {
         final String guid = UUID.randomUUID().toString();
         return createVertexWithGuid(entity, guid);
     }
 
-    public AtlasVertex createShellEntityVertex(AtlasObjectId objectId, EntityGraphDiscoveryContext context) throws AtlasBaseException {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("==> createShellEntityVertex({})", objectId.getTypeName());
-        }
-
-        final String    guid       = UUID.randomUUID().toString();
-        AtlasEntityType entityType = typeRegistry.getEntityTypeByName(objectId.getTypeName());
-        AtlasVertex     ret        = createStructVertex(objectId);
-
-        for (String superTypeName : entityType.getAllSuperTypes()) {
-            AtlasGraphUtilsV2.addEncodedProperty(ret, SUPER_TYPES_PROPERTY_KEY, superTypeName);
-        }
-
-        AtlasGraphUtilsV2.setEncodedProperty(ret, GUID_PROPERTY_KEY, guid);
-        AtlasGraphUtilsV2.setEncodedProperty(ret, VERSION_PROPERTY_KEY, getEntityVersion(null));
-        AtlasGraphUtilsV2.setEncodedProperty(ret, IS_INCOMPLETE_PROPERTY_KEY, INCOMPLETE_ENTITY_VALUE);
-
-        // map unique attributes
-        Map<String, Object>   uniqueAttributes = objectId.getUniqueAttributes();
-        EntityMutationContext mutationContext  = new EntityMutationContext(context);
-
-        for (AtlasAttribute attribute : entityType.getUniqAttributes().values()) {
-            String attrName  = attribute.getName();
-
-            if (uniqueAttributes.containsKey(attrName)) {
-                Object attrValue = attribute.getAttributeType().getNormalizedValue(uniqueAttributes.get(attrName));
-
-                mapAttribute(attribute, attrValue, ret, CREATE, mutationContext);
-            }
-        }
-
-        GraphTransactionInterceptor.addToVertexCache(guid, ret);
-
-        return ret;
-    }
-
-    public AtlasVertex createVertexWithGuid(AtlasEntity entity, String guid) throws AtlasBaseException {
+    public AtlasVertex createVertexWithGuid(AtlasEntity entity, String guid) {
         if (LOG.isDebugEnabled()) {
-            LOG.debug("==> createVertexWithGuid({})", entity.getTypeName());
+            LOG.debug("==> createVertex({})", entity.getTypeName());
         }
 
         AtlasEntityType entityType = typeRegistry.getEntityTypeByName(entity.getTypeName());
-        AtlasVertex     ret        = createStructVertex(entity);
+
+        AtlasVertex ret = createStructVertex(entity);
 
         for (String superTypeName : entityType.getAllSuperTypes()) {
             AtlasGraphUtilsV2.addEncodedProperty(ret, SUPER_TYPES_PROPERTY_KEY, superTypeName);
@@ -204,16 +153,12 @@ public class EntityGraphMapper {
         AtlasGraphUtilsV2.setEncodedProperty(ret, GUID_PROPERTY_KEY, guid);
         AtlasGraphUtilsV2.setEncodedProperty(ret, VERSION_PROPERTY_KEY, getEntityVersion(entity));
 
-        setCustomAttributes(ret, entity);
-
-        setLabels(ret, entity.getLabels());
-
         GraphTransactionInterceptor.addToVertexCache(guid, ret);
 
         return ret;
     }
 
-    public void updateSystemAttributes(AtlasVertex vertex, AtlasEntity entity) throws AtlasBaseException {
+    public void updateSystemAttributes(AtlasVertex vertex, AtlasEntity entity) {
         if (entity.getVersion() != null) {
             AtlasGraphUtilsV2.setEncodedProperty(vertex, VERSION_PROPERTY_KEY, entity.getVersion());
         }
@@ -245,10 +190,6 @@ public class EntityGraphMapper {
         if (entity.getProvenanceType() != null) {
             AtlasGraphUtilsV2.setEncodedProperty(vertex, PROVENANCE_TYPE_KEY, entity.getProvenanceType());
         }
-
-        if (entity.getCustomAttributes() != null) {
-            setCustomAttributes(vertex, entity);
-        }
     }
 
     public EntityMutationResponse mapAttributesAndClassifications(EntityMutationContext context, final boolean isPartialUpdate, final boolean replaceClassifications) throws AtlasBaseException {
@@ -326,106 +267,14 @@ public class EntityGraphMapper {
         return resp;
     }
 
-    public void setCustomAttributes(AtlasVertex vertex, AtlasEntity entity) {
-        String customAttributesString = getCustomAttributesString(entity);
-
-        if (customAttributesString != null) {
-            AtlasGraphUtilsV2.setEncodedProperty(vertex, CUSTOM_ATTRIBUTES_PROPERTY_KEY, customAttributesString);
-        }
-    }
-
-    public void setLabels(AtlasVertex vertex, Set<String> labels) throws AtlasBaseException {
-        final Set<String> currentLabels = getLabels(vertex);
-        final Set<String> addedLabels;
-        final Set<String> removedLabels;
-
-        if (CollectionUtils.isEmpty(currentLabels)) {
-            addedLabels   = labels;
-            removedLabels = null;
-        } else if (CollectionUtils.isEmpty(labels)) {
-            addedLabels   = null;
-            removedLabels = labels;
-        } else {
-            addedLabels   = new HashSet<String>(CollectionUtils.subtract(labels, currentLabels));
-            removedLabels = new HashSet<String>(CollectionUtils.subtract(currentLabels, labels));
-        }
-
-        updateLabels(vertex, labels);
-
-        entityChangeNotifier.onLabelsUpdatedFromEntity(GraphHelper.getGuid(vertex), addedLabels, removedLabels);
-    }
-
-    public void addLabels(AtlasVertex vertex, Set<String> labels) throws AtlasBaseException {
-        if (CollectionUtils.isNotEmpty(labels)) {
-            final Set<String> existingLabels = GraphHelper.getLabels(vertex);
-            final Set<String> updatedLabels;
-
-            if (CollectionUtils.isEmpty(existingLabels)) {
-                updatedLabels = labels;
-            } else {
-                updatedLabels = new HashSet<>(existingLabels);
-                updatedLabels.addAll(labels);
-            }
-            if (!updatedLabels.equals(existingLabels)) {
-                updateLabels(vertex, updatedLabels);
-                updatedLabels.removeAll(existingLabels);
-                entityChangeNotifier.onLabelsUpdatedFromEntity(GraphHelper.getGuid(vertex), updatedLabels, null);
-            }
-        }
-    }
-
-    public void removeLabels(AtlasVertex vertex, Set<String> labels) throws AtlasBaseException {
-        if (CollectionUtils.isNotEmpty(labels)) {
-            final Set<String> existingLabels = GraphHelper.getLabels(vertex);
-            Set<String> updatedLabels;
-
-            if (CollectionUtils.isNotEmpty(existingLabels)) {
-                updatedLabels = new HashSet<>(existingLabels);
-                updatedLabels.removeAll(labels);
-
-                if (!updatedLabels.equals(existingLabels)) {
-                    updateLabels(vertex, updatedLabels);
-                    existingLabels.removeAll(updatedLabels);
-                    entityChangeNotifier.onLabelsUpdatedFromEntity(GraphHelper.getGuid(vertex), null, existingLabels);
-                }
-            }
-        }
-    }
-
-    private void updateLabels(AtlasVertex vertex, Set<String> labels) {
-        if (CollectionUtils.isNotEmpty(labels)) {
-            AtlasGraphUtilsV2.setEncodedProperty(vertex, LABELS_PROPERTY_KEY, getLabelString(labels));
-        } else {
-            vertex.removeProperty(LABELS_PROPERTY_KEY);
-        }
-    }
-
-    private String getLabelString(Collection<String> labels) {
-        String ret = null;
-
-        if (!labels.isEmpty()) {
-            ret = LABEL_NAME_DELIMITER + String.join(LABEL_NAME_DELIMITER, labels) + LABEL_NAME_DELIMITER;
-        }
-
-        return ret;
-    }
-
     private AtlasVertex createStructVertex(AtlasStruct struct) {
-        return createStructVertex(struct.getTypeName());
-    }
-
-    private AtlasVertex createStructVertex(AtlasObjectId objectId) {
-        return createStructVertex(objectId.getTypeName());
-    }
-
-    private AtlasVertex createStructVertex(String typeName) {
         if (LOG.isDebugEnabled()) {
-            LOG.debug("==> createStructVertex({})", typeName);
+            LOG.debug("==> createStructVertex({})", struct.getTypeName());
         }
 
         final AtlasVertex ret = graph.addVertex();
 
-        AtlasGraphUtilsV2.setEncodedProperty(ret, ENTITY_TYPE_PROPERTY_KEY, typeName);
+        AtlasGraphUtilsV2.setEncodedProperty(ret, ENTITY_TYPE_PROPERTY_KEY, struct.getTypeName());
         AtlasGraphUtilsV2.setEncodedProperty(ret, STATE_PROPERTY_KEY, AtlasEntity.Status.ACTIVE.name());
         AtlasGraphUtilsV2.setEncodedProperty(ret, TIMESTAMP_PROPERTY_KEY, RequestContext.get().getRequestTime());
         AtlasGraphUtilsV2.setEncodedProperty(ret, MODIFICATION_TIMESTAMP_PROPERTY_KEY, RequestContext.get().getRequestTime());
@@ -433,7 +282,7 @@ public class EntityGraphMapper {
         AtlasGraphUtilsV2.setEncodedProperty(ret, MODIFIED_BY_KEY, RequestContext.get().getUser());
 
         if (LOG.isDebugEnabled()) {
-            LOG.debug("<== createStructVertex({})", typeName);
+            LOG.debug("<== createStructVertex({})", struct.getTypeName());
         }
 
         return ret;
@@ -687,8 +536,6 @@ public class EntityGraphMapper {
             }
         }
 
-        setAssignedGuid(ctx.getValue(), context);
-
         return ret;
     }
 
@@ -949,16 +796,10 @@ public class EntityGraphMapper {
         AtlasVertex entityVertex = context.getDiscoveryContext().getResolvedEntityVertex(guid);
 
         if (entityVertex == null) {
-            if (AtlasTypeUtil.isAssignedGuid(guid)) {
-                entityVertex = context.getVertex(guid);
-            }
-
-            if (entityVertex == null) {
-                AtlasObjectId objId = getObjectId(ctx.getValue());
+            AtlasObjectId objId = getObjectId(ctx.getValue());
 
-                if (objId != null) {
-                    entityVertex = context.getDiscoveryContext().getResolvedEntityVertex(objId);
-                }
+            if (objId != null) {
+                entityVertex = context.getDiscoveryContext().getResolvedEntityVertex(objId);
             }
         }
 
@@ -990,21 +831,14 @@ public class EntityGraphMapper {
             LOG.debug("==> mapObjectIdValueUsingRelationship({})", ctx);
         }
 
-        String      guid            = getGuid(ctx.getValue());
-        AtlasVertex attributeVertex = context.getDiscoveryContext().getResolvedEntityVertex(guid);
+        AtlasVertex attributeVertex = context.getDiscoveryContext().getResolvedEntityVertex(getGuid(ctx.getValue()));
         AtlasVertex entityVertex    = ctx.getReferringVertex();
         AtlasEdge   ret;
 
         if (attributeVertex == null) {
-            if (AtlasTypeUtil.isAssignedGuid(guid)) {
-                attributeVertex = context.getVertex(guid);
-            }
+            AtlasObjectId objectId = getObjectId(ctx.getValue());
 
-            if (attributeVertex == null) {
-                AtlasObjectId objectId = getObjectId(ctx.getValue());
-
-                attributeVertex = (objectId != null) ? context.getDiscoveryContext().getResolvedEntityVertex(objectId) : null;
-            }
+            attributeVertex = (objectId != null) ? context.getDiscoveryContext().getResolvedEntityVertex(objectId) : null;
         }
 
         if (attributeVertex == null) {
@@ -1067,9 +901,9 @@ public class EntityGraphMapper {
                 }
             } else {
                 // use legacy way to create/update edges
-                if (WARN_ON_NO_RELATIONSHIP || LOG.isDebugEnabled()) {
-                    LOG.warn("No RelationshipDef defined between {} and {} on attribute: {}. This can lead to severe performance degradation.",
-                             getTypeName(entityVertex), getTypeName(attributeVertex), attributeName);
+                if (LOG.isDebugEnabled()) {
+                    LOG.debug("No RelationshipDef defined between {} and {} on attribute: {}",  getTypeName(entityVertex),
+                               getTypeName(attributeVertex), attributeName);
                 }
 
                 ret = mapObjectIdValue(ctx, context);
@@ -1080,8 +914,6 @@ public class EntityGraphMapper {
             ret = mapObjectIdValue(ctx, context);
         }
 
-        setAssignedGuid(ctx.getValue(), context);
-
         if (LOG.isDebugEnabled()) {
             LOG.debug("<== mapObjectIdValueUsingRelationship({})", ctx);
         }
@@ -1269,17 +1101,6 @@ public class EntityGraphMapper {
         return (ret != null) ? ret : 0;
     }
 
-    private String getCustomAttributesString(AtlasEntity entity) {
-        String              ret              = null;
-        Map<String, String> customAttributes = entity.getCustomAttributes();
-
-        if (customAttributes != null) {
-            ret = AtlasType.toJson(customAttributes);
-        }
-
-        return ret;
-    }
-
     private AtlasStructType getStructType(String typeName) throws AtlasBaseException {
         AtlasType objType = typeRegistry.getType(typeName);
 
@@ -1365,59 +1186,6 @@ public class EntityGraphMapper {
         return null;
     }
 
-    private static void setAssignedGuid(Object val, EntityMutationContext context) {
-        if (val != null) {
-            Map<String, String> guidAssignements = context.getGuidAssignments();
-
-            if (val instanceof AtlasObjectId) {
-                AtlasObjectId objId        = (AtlasObjectId) val;
-                String        guid         = objId.getGuid();
-                String        assignedGuid = null;
-
-                if (StringUtils.isNotEmpty(guid)) {
-                    if (!AtlasTypeUtil.isAssignedGuid(guid) && MapUtils.isNotEmpty(guidAssignements)) {
-                        assignedGuid = guidAssignements.get(guid);
-                    }
-                } else {
-                    AtlasVertex vertex = context.getDiscoveryContext().getResolvedEntityVertex(objId);
-
-                    if (vertex != null) {
-                        assignedGuid = GraphHelper.getGuid(vertex);
-                    }
-                }
-
-                if (StringUtils.isNotEmpty(assignedGuid)) {
-                    RequestContext.get().recordEntityGuidUpdate(objId, guid);
-
-                    objId.setGuid(assignedGuid);
-                }
-            } else if (val instanceof Map) {
-                Map    mapObjId     = (Map) val;
-                Object guidVal      = mapObjId.get(AtlasObjectId.KEY_GUID);
-                String guid         = guidVal != null ? guidVal.toString() : null;
-                String assignedGuid = null;
-
-                if (StringUtils.isNotEmpty(guid) ) {
-                    if (!AtlasTypeUtil.isAssignedGuid(guid) && MapUtils.isNotEmpty(guidAssignements)) {
-                        assignedGuid = guidAssignements.get(guid);
-                    }
-                } else {
-                    AtlasVertex vertex = context.getDiscoveryContext().getResolvedEntityVertex(new AtlasObjectId(mapObjId));
-
-                    if (vertex != null) {
-                        assignedGuid = GraphHelper.getGuid(vertex);
-                    }
-                }
-
-                if (StringUtils.isNotEmpty(assignedGuid)) {
-                    RequestContext.get().recordEntityGuidUpdate(mapObjId, guid);
-
-                    mapObjId.put(AtlasObjectId.KEY_GUID, assignedGuid);
-                }
-            }
-        }
-    }
-
     private static Map<String, Object> getRelationshipAttributes(Object val) throws AtlasBaseException {
         if (val instanceof AtlasRelatedObjectId) {
             AtlasStruct relationshipStruct = ((AtlasRelatedObjectId) val).getRelationshipAttributes();
@@ -1666,7 +1434,6 @@ public class EntityGraphMapper {
 
         header.setGuid(getIdFromVertex(vertex));
         header.setStatus(entity.getStatus());
-        header.setIsIncomplete(entity.getIsIncomplete());
 
         for (AtlasAttribute attribute : type.getUniqAttributes().values()) {
             header.setAttribute(attribute.getName(), entity.getAttribute(attribute.getName()));
@@ -1692,11 +1459,11 @@ public class EntityGraphMapper {
         if (CollectionUtils.isNotEmpty(classifications)) {
             MetricRecorder metric = RequestContext.get().startMetricRecord("addClassifications");
 
-            final AtlasVertex                              entityVertex          = context.getVertex(guid);
-            final AtlasEntityType                          entityType            = context.getType(guid);
-            List<AtlasVertex>                              entitiesToPropagateTo = null;
-            Map<AtlasClassification, HashSet<AtlasVertex>> addedClassifications  = new HashMap<>();
-            List<AtlasClassification>                      addClassifications    = new ArrayList<>(classifications.size());
+            final AtlasVertex                           entityVertex          = context.getVertex(guid);
+            final AtlasEntityType                       entityType            = context.getType(guid);
+            List<AtlasVertex>                           entitiesToPropagateTo = null;
+            Map<AtlasVertex, List<AtlasClassification>> propagations          = null;
+            List<AtlasClassification>                   addClassifications    = new ArrayList<>(classifications.size());
 
             for (AtlasClassification c : classifications) {
                 AtlasClassification classification      = new AtlasClassification(c);
@@ -1743,7 +1510,7 @@ public class EntityGraphMapper {
                     LOG.debug("Adding classification [{}] to [{}] using edge label: [{}]", classificationName, entityType.getTypeName(), getTraitLabel(classificationName));
                 }
 
-                addToClassificationNames(entityVertex, classificationName);
+                AtlasGraphUtilsV2.addEncodedProperty(entityVertex, TRAIT_NAMES_PROPERTY_KEY, classificationName);
 
                 // add a new AtlasVertex for the struct or trait instance
                 AtlasVertex classificationVertex = createClassificationVertex(classification);
@@ -1759,21 +1526,27 @@ public class EntityGraphMapper {
                 if (propagateTags) {
                     // compute propagatedEntityVertices only once
                     if (entitiesToPropagateTo == null) {
-                        entitiesToPropagateTo = entityRetriever.getImpactedVerticesV2(entityVertex);
+                        entitiesToPropagateTo = graphHelper.getImpactedVertices(guid);
                     }
 
                     if (CollectionUtils.isNotEmpty(entitiesToPropagateTo)) {
+                        if (propagations == null) {
+                            propagations = new HashMap<>(entitiesToPropagateTo.size());
+
+                            for (AtlasVertex entityToPropagateTo : entitiesToPropagateTo) {
+                                propagations.put(entityToPropagateTo, new ArrayList<>());
+                            }
+                        }
+
                         if (LOG.isDebugEnabled()) {
                             LOG.debug("Propagating tag: [{}][{}] to {}", classificationName, entityType.getTypeName(), getTypeNames(entitiesToPropagateTo));
                         }
 
                         List<AtlasVertex> entitiesPropagatedTo = deleteDelegate.getHandler().addTagPropagation(classificationVertex, entitiesToPropagateTo);
 
-                        if (CollectionUtils.isNotEmpty(entitiesPropagatedTo)) {
-                            if(addedClassifications.get(classification) == null) {
-                                addedClassifications.put(classification, new HashSet<>(entitiesPropagatedTo));
-                            } else {
-                                addedClassifications.get(classification).addAll(entitiesPropagatedTo);
+                        if (entitiesPropagatedTo != null) {
+                            for (AtlasVertex entityPropagatedTo : entitiesPropagatedTo) {
+                                propagations.get(entityPropagatedTo).add(classification);
                             }
                         }
                     } else {
@@ -1797,11 +1570,16 @@ public class EntityGraphMapper {
                 notificationVertices.addAll(entitiesToPropagateTo);
             }
 
-            for (AtlasClassification classification : addedClassifications.keySet()) {
-                Set<AtlasVertex>  vertices           = addedClassifications.get(classification);
-                List<AtlasEntity> propagatedEntities = updateClassificationText(classification, vertices);
+            for (AtlasVertex vertex : notificationVertices) {
+                String                    entityGuid           = GraphHelper.getGuid(vertex);
+                AtlasEntity               entity               = instanceConverter.getAndCacheEntity(entityGuid);
+                List<AtlasClassification> addedClassifications = StringUtils.equals(entityGuid, guid) ? addClassifications : propagations.get(vertex);
 
-                entityChangeNotifier.onClassificationsAddedToEntities(propagatedEntities, classifications);
+
+                vertex.setProperty(CLASSIFICATION_TEXT_KEY, fullTextMapperV2.getClassificationTextForEntity(entity));
+                if (CollectionUtils.isNotEmpty(addedClassifications)) {
+                    entityChangeNotifier.onClassificationAddedToEntity(entity, addedClassifications);
+                }
             }
 
             RequestContext.get().endMetricRecord(metric);
@@ -1854,10 +1632,6 @@ public class EntityGraphMapper {
         AtlasVertex         classificationVertex = getClassificationVertex(entityVertex, classificationName);
         AtlasClassification classification       = entityRetriever.toAtlasClassification(classificationVertex);
 
-        if (classification == null) {
-            throw new AtlasBaseException(AtlasErrorCode.CLASSIFICATION_NOT_FOUND, classificationName);
-        }
-
         // remove classification from propagated entities if propagation is turned on
         if (isPropagationEnabled(classificationVertex)) {
             List<AtlasVertex> propagatedEntityVertices = deleteDelegate.getHandler().removeTagPropagation(classificationVertex);
@@ -1901,82 +1675,18 @@ public class EntityGraphMapper {
 
         traitNames.remove(classificationName);
 
-        setClassificationNames(entityVertex, traitNames);
+        updateTraitNamesProperty(entityVertex, traitNames);
 
         updateModificationMetadata(entityVertex);
 
         for (Map.Entry<AtlasVertex, List<AtlasClassification>> entry : removedClassifications.entrySet()) {
-            AtlasEntity entity = updateClassificationText(entry.getKey());
-
+            AtlasVertex               vertex                     = entry.getKey();
+            String                    guid                       = GraphHelper.getGuid(vertex);
             List<AtlasClassification> deletedClassificationNames = entry.getValue();
-            entityChangeNotifier.onClassificationDeletedFromEntity(entity, deletedClassificationNames);
-        }
-    }
-
-    private AtlasEntity updateClassificationText(AtlasVertex vertex) throws AtlasBaseException {
-        String guid        = GraphHelper.getGuid(vertex);
-        AtlasEntity entity = instanceConverter.getAndCacheEntity(guid);
-
-        vertex.setProperty(CLASSIFICATION_TEXT_KEY, fullTextMapperV2.getClassificationTextForEntity(entity));
-        return entity;
-    }
-
-    public void updateClassificationTextAndNames(AtlasVertex vertex) throws AtlasBaseException {
-        if(CollectionUtils.isEmpty(vertex.getPropertyValues(Constants.TRAIT_NAMES_PROPERTY_KEY, String.class)) &&
-                CollectionUtils.isEmpty(vertex.getPropertyValues(Constants.PROPAGATED_TRAIT_NAMES_PROPERTY_KEY, String.class))) {
-            return;
-        }
-
-        String guid = GraphHelper.getGuid(vertex);
-        AtlasEntity entity = instanceConverter.getAndCacheEntity(guid);
-        List<String> classificationNames = new ArrayList<>();
-        List<String> propagatedClassificationNames = new ArrayList<>();
-
-        for (AtlasClassification classification : entity.getClassifications()) {
-            if (isPropagatedClassification(classification, guid)) {
-                propagatedClassificationNames.add(classification.getTypeName());
-            } else {
-                classificationNames.add(classification.getTypeName());
-            }
-        }
+            AtlasEntity               entity                     = instanceConverter.getAndCacheEntity(guid);
 
-        vertex.setProperty(CLASSIFICATION_NAMES_KEY, getDelimitedClassificationNames(classificationNames));
-        vertex.setProperty(PROPAGATED_CLASSIFICATION_NAMES_KEY, getDelimitedClassificationNames(propagatedClassificationNames));
-        vertex.setProperty(CLASSIFICATION_TEXT_KEY, fullTextMapperV2.getClassificationTextForEntity(entity));
-    }
-
-    private boolean isPropagatedClassification(AtlasClassification classification, String guid) {
-        String classificationEntityGuid = classification.getEntityGuid();
-
-        return StringUtils.isNotEmpty(classificationEntityGuid) && !StringUtils.equals(classificationEntityGuid, guid);
-    }
-
-    private void addToClassificationNames(AtlasVertex entityVertex, String classificationName) {
-        AtlasGraphUtilsV2.addEncodedProperty(entityVertex, TRAIT_NAMES_PROPERTY_KEY, classificationName);
-
-        String clsNames = entityVertex.getProperty(CLASSIFICATION_NAMES_KEY, String.class);
-
-        clsNames = StringUtils.isEmpty(clsNames) ? CLASSIFICATION_NAME_DELIMITER + classificationName : clsNames + classificationName;
-
-        clsNames = clsNames + CLASSIFICATION_NAME_DELIMITER;
-
-        entityVertex.setProperty(CLASSIFICATION_NAMES_KEY, clsNames);
-    }
-
-    private void setClassificationNames(AtlasVertex entityVertex, List<String> traitNames) {
-        if (entityVertex != null) {
-            entityVertex.removeProperty(TRAIT_NAMES_PROPERTY_KEY);
-            entityVertex.removeProperty(CLASSIFICATION_NAMES_KEY);
-
-            for (String traitName : traitNames) {
-                AtlasGraphUtilsV2.addEncodedProperty(entityVertex, TRAIT_NAMES_PROPERTY_KEY, traitName);
-            }
-
-            String clsNames = StringUtils.join(traitNames, CLASSIFICATION_NAME_DELIMITER);
-
-            clsNames = StringUtils.isEmpty(clsNames) ? clsNames : CLASSIFICATION_NAME_DELIMITER + clsNames + CLASSIFICATION_NAME_DELIMITER;
-
-            entityVertex.setProperty(CLASSIFICATION_NAMES_KEY, clsNames);
+            vertex.setProperty(CLASSIFICATION_TEXT_KEY, fullTextMapperV2.getClassificationTextForEntity(entity));
+            entityChangeNotifier.onClassificationDeletedFromEntity(entity, deletedClassificationNames);
         }
     }
 
@@ -1991,12 +1701,6 @@ public class EntityGraphMapper {
             throw new AtlasBaseException(AtlasErrorCode.INSTANCE_GUID_NOT_FOUND, guid);
         }
 
-        AtlasPerfTracer perf = null;
-
-        if (AtlasPerfTracer.isPerfTraceEnabled(PERF_LOG)) {
-            perf = AtlasPerfTracer.getPerfTracer(PERF_LOG, "EntityGraphMapper.updateClassifications");
-        }
-
         String                    entityTypeName         = AtlasGraphUtilsV2.getTypeName(entityVertex);
         AtlasEntityType           entityType             = typeRegistry.getEntityTypeByName(entityTypeName);
         List<AtlasClassification> updatedClassifications = new ArrayList<>();
@@ -2004,7 +1708,7 @@ public class EntityGraphMapper {
         Set<AtlasVertex>          notificationVertices   = new HashSet<AtlasVertex>() {{ add(entityVertex); }};
 
         Map<AtlasVertex, List<AtlasClassification>> addedPropagations   = null;
-        Map<AtlasClassification, List<AtlasVertex>> removedPropagations = new HashMap<>();
+        Map<AtlasVertex, List<AtlasClassification>> removedPropagations = null;
 
         for (AtlasClassification classification : classifications) {
             String classificationName       = classification.getTypeName();
@@ -2030,10 +1734,6 @@ public class EntityGraphMapper {
 
             AtlasClassification currentClassification = entityRetriever.toAtlasClassification(classificationVertex);
 
-            if (currentClassification == null) {
-                continue;
-            }
-
             validateAndNormalizeForUpdate(classification);
 
             boolean isClassificationUpdated = false;
@@ -2090,7 +1790,7 @@ public class EntityGraphMapper {
             if (updatedTagPropagation != null && currentTagPropagation != updatedTagPropagation) {
                 if (updatedTagPropagation) {
                     if (CollectionUtils.isEmpty(entitiesToPropagateTo)) {
-                        entitiesToPropagateTo = entityRetriever.getImpactedVerticesV2(entityVertex, null, classificationVertex.getIdForDisplay());
+                        entitiesToPropagateTo = graphHelper.getImpactedVerticesWithRestrictions(guid, classificationVertex.getIdForDisplay());
                     }
 
                     if (CollectionUtils.isNotEmpty(entitiesToPropagateTo)) {
@@ -2114,17 +1814,21 @@ public class EntityGraphMapper {
                     List<AtlasVertex> impactedVertices = deleteDelegate.getHandler().removeTagPropagation(classificationVertex);
 
                     if (CollectionUtils.isNotEmpty(impactedVertices)) {
-                        /*
-                            removedPropagations is a HashMap of entity against list of classifications i.e. for each entity 1 entry in the map.
-                            Maintaining classification wise entity list lets us send the audit request in bulk,
-                            since 1 classification is applied to many entities (including the child entities).
-                            Eg. If a classification is being propagated to 1000 entities, its edge count would be 2000, as per removedPropagations map
-                            we would have 2000 entries and value would always be 1 classification wrapped in a list.
-                            By this rearrangement we maintain an entity list against each classification, as of now its entry size would be 1 (as per request from UI)
-                            instead of 2000. Moreover this allows us to send audit request classification wise instead of separate requests for each entities.
-                            This reduces audit calls from 2000 to 1.
-                         */
-                        removedPropagations.put(classification, impactedVertices);
+                        if (removedPropagations == null) {
+                            removedPropagations = new HashMap<>();
+
+                            for (AtlasVertex impactedVertex : impactedVertices) {
+                                List<AtlasClassification> removedClassifications = removedPropagations.get(impactedVertex);
+
+                                if (removedClassifications == null) {
+                                    removedClassifications = new ArrayList<>();
+
+                                    removedPropagations.put(impactedVertex, removedClassifications);
+                                }
+
+                                removedClassifications.add(classification);
+                            }
+                        }
                     }
                 }
             }
@@ -2146,17 +1850,19 @@ public class EntityGraphMapper {
             }
         }
 
-        if (MapUtils.isNotEmpty(removedPropagations)) {
-            for (AtlasClassification classification : removedPropagations.keySet()) {
-                List<AtlasVertex> propagatedVertices = removedPropagations.get(classification);
-                List<AtlasEntity> propagatedEntities = updateClassificationText(classification, propagatedVertices);
+        if (removedPropagations != null) {
+            for (Map.Entry<AtlasVertex, List<AtlasClassification>> entry : removedPropagations.entrySet()) {
+                AtlasVertex               vertex                 = entry.getKey();
+                List<AtlasClassification> removedClassifications = entry.getValue();
+                String                    entityGuid             = GraphHelper.getGuid(vertex);
+                AtlasEntity               entity                 = instanceConverter.getAndCacheEntity(entityGuid);
 
-                //Sending audit request for all entities at once
-                entityChangeNotifier.onClassificationsDeletedFromEntities(propagatedEntities, Collections.singletonList(classification));
+                if (isActive(entity)) {
+                    vertex.setProperty(CLASSIFICATION_TEXT_KEY, fullTextMapperV2.getClassificationTextForEntity(entity));
+                    entityChangeNotifier.onClassificationDeletedFromEntity(entity, removedClassifications);
+                }
             }
         }
-
-        AtlasPerfTracer.log(perf);
     }
 
     private AtlasEdge mapClassification(EntityOperation operation,  final EntityMutationContext context, AtlasClassification classification,
@@ -2206,6 +1912,16 @@ public class EntityGraphMapper {
         }
     }
 
+    private void updateTraitNamesProperty(AtlasVertex entityVertex, List<String> traitNames) {
+        if (entityVertex != null) {
+            entityVertex.removeProperty(TRAIT_NAMES_PROPERTY_KEY);
+
+            for (String traitName : traitNames) {
+                AtlasGraphUtilsV2.addEncodedProperty(entityVertex, TRAIT_NAMES_PROPERTY_KEY, traitName);
+            }
+        }
+    }
+
     private void validateClassificationExists(List<String> existingClassifications, List<String> suppliedClassifications) throws AtlasBaseException {
         Set<String> existingNames = new HashSet<>(existingClassifications);
         for (String classificationName : suppliedClassifications) {
@@ -2227,14 +1943,12 @@ public class EntityGraphMapper {
     }
 
     private void recordEntityUpdate(AtlasVertex vertex) throws AtlasBaseException {
-        if (vertex != null) {
-            RequestContext req = RequestContext.get();
+        RequestContext req = RequestContext.get();
 
-            if (!req.isUpdatedEntity(GraphHelper.getGuid(vertex))) {
-                updateModificationMetadata(vertex);
+        if (!req.isUpdatedEntity(GraphHelper.getGuid(vertex))) {
+            updateModificationMetadata(vertex);
 
-                req.recordEntityUpdate(entityRetriever.toAtlasEntityHeader(vertex));
-            }
+            req.recordEntityUpdate(entityRetriever.toAtlasEntityHeader(vertex));
         }
     }
 
@@ -2283,113 +1997,4 @@ public class EntityGraphMapper {
     private static String getSoftRefFormattedString(String typeName, String resolvedGuid) {
         return String.format(SOFT_REF_FORMAT, typeName, resolvedGuid);
     }
-
-    public void importActivateEntity(AtlasVertex vertex, AtlasEntity entity) {
-        AtlasGraphUtilsV2.setEncodedProperty(vertex, STATE_PROPERTY_KEY, ACTIVE);
-
-        if (MapUtils.isNotEmpty(entity.getRelationshipAttributes())) {
-            Set<String> relatedEntitiesGuids = getRelatedEntitiesGuids(entity);
-            activateEntityRelationships(vertex, relatedEntitiesGuids);
-        }
-    }
-
-    private void activateEntityRelationships(AtlasVertex vertex, Set<String> relatedEntitiesGuids) {
-        Iterator<AtlasEdge> edgeIterator = vertex.getEdges(AtlasEdgeDirection.BOTH).iterator();
-
-        while (edgeIterator.hasNext()) {
-            AtlasEdge edge = edgeIterator.next();
-
-            if (AtlasGraphUtilsV2.getState(edge) != DELETED) {
-                continue;
-            }
-
-            final String relatedEntityGuid;
-            if (Objects.equals(edge.getInVertex().getId(), vertex.getId())) {
-                relatedEntityGuid = AtlasGraphUtilsV2.getIdFromVertex(edge.getOutVertex());
-            } else {
-                relatedEntityGuid = AtlasGraphUtilsV2.getIdFromVertex(edge.getInVertex());
-            }
-
-            if (StringUtils.isEmpty(relatedEntityGuid) || !relatedEntitiesGuids.contains(relatedEntityGuid)) {
-                continue;
-            }
-
-            edge.setProperty(STATE_PROPERTY_KEY, AtlasRelationship.Status.ACTIVE);
-        }
-    }
-
-    private Set<String> getRelatedEntitiesGuids(AtlasEntity entity) {
-        Set<String> relGuidsSet = new HashSet<>();
-
-        for (Object o : entity.getRelationshipAttributes().values()) {
-            if (o instanceof AtlasObjectId) {
-                relGuidsSet.add(((AtlasObjectId) o).getGuid());
-            } else if (o instanceof List) {
-                for (Object id : (List) o) {
-                    if (id instanceof AtlasObjectId) {
-                        relGuidsSet.add(((AtlasObjectId) id).getGuid());
-                    }
-                }
-            }
-        }
-        return relGuidsSet;
-    }
-
-    public static void validateCustomAttributes(AtlasEntity entity) throws AtlasBaseException {
-        Map<String, String> customAttributes = entity.getCustomAttributes();
-
-        if (MapUtils.isNotEmpty(customAttributes)) {
-            for (Map.Entry<String, String> entry : customAttributes.entrySet()) {
-                String key   = entry.getKey();
-                String value = entry.getValue();
-
-                if (key.length() > CUSTOM_ATTRIBUTE_KEY_MAX_LENGTH) {
-                    throw new AtlasBaseException(AtlasErrorCode.INVALID_CUSTOM_ATTRIBUTE_KEY_LENGTH, key);
-                }
-
-                Matcher matcher = CUSTOM_ATTRIBUTE_KEY_REGEX.matcher(key);
-
-                if (!matcher.matches()) {
-                    throw new AtlasBaseException(AtlasErrorCode.INVALID_CUSTOM_ATTRIBUTE_KEY_CHARACTERS, key);
-                }
-
-                if (value.length() > CUSTOM_ATTRIBUTE_VALUE_MAX_LENGTH) {
-                    throw new AtlasBaseException(AtlasErrorCode.INVALID_CUSTOM_ATTRIBUTE_VALUE, value, String.valueOf(CUSTOM_ATTRIBUTE_VALUE_MAX_LENGTH));
-                }
-            }
-        }
-    }
-
-    public static void validateLabels(Set<String> labels) throws AtlasBaseException {
-        if (CollectionUtils.isNotEmpty(labels)) {
-            for (String label : labels) {
-                if (label.length() > LABEL_MAX_LENGTH.getInt()) {
-                    throw new AtlasBaseException(AtlasErrorCode.INVALID_LABEL_LENGTH, label, String.valueOf(LABEL_MAX_LENGTH.getInt()));
-                }
-
-                Matcher matcher = LABEL_REGEX.matcher(label);
-
-                if (!matcher.matches()) {
-                    throw new AtlasBaseException(AtlasErrorCode.INVALID_LABEL_CHARACTERS, label);
-                }
-            }
-        }
-    }
-
-    private List<AtlasEntity> updateClassificationText(AtlasClassification classification, Collection<AtlasVertex> propagatedVertices) throws AtlasBaseException {
-        List<AtlasEntity> propagatedEntities = new ArrayList<>();
-
-        if(CollectionUtils.isNotEmpty(propagatedVertices)) {
-            for(AtlasVertex vertex : propagatedVertices) {
-                AtlasEntity entity = instanceConverter.getAndCacheEntity(GraphHelper.getGuid(vertex));
-
-                if (isActive(entity)) {
-                    vertex.setProperty(CLASSIFICATION_TEXT_KEY, fullTextMapperV2.getClassificationTextForEntity(entity));
-                    propagatedEntities.add(entity);
-                }
-            }
-        }
-
-        return propagatedEntities;
-    }
 }