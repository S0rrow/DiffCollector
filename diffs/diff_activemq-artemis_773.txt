diff --git a/artemis-jms-client/src/main/java/org/apache/activemq/artemis/jms/client/ActiveMQDestination.java b/artemis-jms-client/src/main/java/org/apache/activemq/artemis/jms/client/ActiveMQDestination.java
index 81aada16ff..d374265a27 100644
--- a/artemis-jms-client/src/main/java/org/apache/activemq/artemis/jms/client/ActiveMQDestination.java
+++ b/artemis-jms-client/src/main/java/org/apache/activemq/artemis/jms/client/ActiveMQDestination.java
@@ -24,10 +24,8 @@ import java.util.Properties;
 import java.util.UUID;
 
 import org.apache.activemq.artemis.api.core.Pair;
-import org.apache.activemq.artemis.api.core.QueueAttributes;
 import org.apache.activemq.artemis.api.core.SimpleString;
 import org.apache.activemq.artemis.jndi.JNDIStorable;
-import org.apache.activemq.artemis.api.core.ParameterisedAddress;
 
 /**
  * ActiveMQ Artemis implementation of a JMS Destination.
@@ -101,28 +99,26 @@ public class ActiveMQDestination extends JNDIStorable implements Destination, Se
       }
    }
 
-   public static SimpleString createQueueNameForSubscription(final boolean isDurable,
+   public static String createQueueNameForSubscription(final boolean isDurable,
                                                        final String clientID,
                                                        final String subscriptionName) {
-      final String queueName;
       if (clientID != null) {
          if (isDurable) {
-            queueName = ActiveMQDestination.escape(clientID) + SEPARATOR +
+            return ActiveMQDestination.escape(clientID) + SEPARATOR +
                ActiveMQDestination.escape(subscriptionName);
          } else {
-            queueName = "nonDurable" + SEPARATOR +
+            return "nonDurable" + SEPARATOR +
                ActiveMQDestination.escape(clientID) + SEPARATOR +
                ActiveMQDestination.escape(subscriptionName);
          }
       } else {
          if (isDurable) {
-            queueName = ActiveMQDestination.escape(subscriptionName);
+            return ActiveMQDestination.escape(subscriptionName);
          } else {
-            queueName = "nonDurable" + SEPARATOR +
+            return "nonDurable" + SEPARATOR +
                ActiveMQDestination.escape(subscriptionName);
          }
       }
-      return SimpleString.toSimpleString(queueName);
    }
 
    public static String createQueueNameForSharedSubscription(final boolean isDurable,
@@ -196,26 +192,10 @@ public class ActiveMQDestination extends JNDIStorable implements Destination, Se
       return new ActiveMQQueue(address);
    }
 
-   public static ActiveMQQueue createQueue(final SimpleString address) {
-      return new ActiveMQQueue(address);
-   }
-
-   public static ActiveMQQueue createQueue(final String address, final String name) {
-      return new ActiveMQQueue(address, name);
-   }
-
    public static ActiveMQTopic createTopic(final String address) {
       return new ActiveMQTopic(address);
    }
 
-   public static ActiveMQTopic createTopic(final SimpleString address) {
-      return new ActiveMQTopic(address);
-   }
-
-   public static ActiveMQTopic createTopic(final String address, final String name) {
-      return new ActiveMQTopic(address, name);
-   }
-
    public static ActiveMQTemporaryQueue createTemporaryQueue(final String address, final ActiveMQSession session) {
       return new ActiveMQTemporaryQueue(address, session);
    }
@@ -236,18 +216,6 @@ public class ActiveMQDestination extends JNDIStorable implements Destination, Se
       return createTemporaryTopic(address, session);
    }
 
-   public static ActiveMQTemporaryQueue createTemporaryQueue(final ActiveMQSession session, final String prefix) {
-      String address = prefix + UUID.randomUUID().toString();
-
-      return createTemporaryQueue(address, session);
-   }
-
-   public static ActiveMQTemporaryTopic createTemporaryTopic(final ActiveMQSession session, final String prefix) {
-      String address = prefix + UUID.randomUUID().toString();
-
-      return createTemporaryTopic(address, session);
-   }
-
    public static ActiveMQTemporaryTopic createTemporaryTopic(String address, final ActiveMQSession session) {
       return new ActiveMQTemporaryTopic(address, session);
    }
@@ -263,28 +231,7 @@ public class ActiveMQDestination extends JNDIStorable implements Destination, Se
     */
    private SimpleString simpleAddress;
 
-   /**
-    * Queue parameters;
-    */
-   private QueueAttributes queueAttributes;
-
-   /**
-    * Needed for serialization backwards compatibility.
-    */
-   @Deprecated
-   private String address;
-
-   /**
-    * The "JMS" name of the destination. Needed for serialization backwards compatibility.
-    */
-   @Deprecated
-   private String name;
-
-   private final boolean temporary;
-
-   private final boolean queue;
-
-   private transient TYPE thetype;
+   private final TYPE type;
 
    private final transient ActiveMQSession session;
 
@@ -293,44 +240,21 @@ public class ActiveMQDestination extends JNDIStorable implements Destination, Se
    protected ActiveMQDestination(final String address,
                                  final TYPE type,
                                  final ActiveMQSession session) {
-      this(SimpleString.toSimpleString(address), type, session);
-   }
-
-   protected ActiveMQDestination(final SimpleString address,
-                                 final TYPE type,
-                                 final ActiveMQSession session) {
+      this.simpleAddress = SimpleString.toSimpleString(address);
 
-      if (address != null) {
-         setSimpleAddress(address);
-      }
-
-      this.thetype = type;
+      this.type = type;
 
       this.session = session;
-
-      this.temporary = TYPE.isTemporary(type);
-
-      this.queue = TYPE.isQueue(type);
    }
 
-   @Deprecated
-   protected ActiveMQDestination(final String address,
-                                 final String name,
-                                 final TYPE type,
-                                 final ActiveMQSession session) {
-      this(SimpleString.toSimpleString(address), name, type, session);
-   }
-
-   @Deprecated
    protected ActiveMQDestination(final SimpleString address,
-                                 final String name,
                                  final TYPE type,
                                  final ActiveMQSession session) {
-      this(address, type, session);
+      this.simpleAddress = address;
 
-      this.name = name;
+      this.type = type;
 
-      this.address = simpleAddress != null ? simpleAddress.toString() : null;
+      this.session = session;
    }
 
    public void setAddress(String address) {
@@ -341,16 +265,7 @@ public class ActiveMQDestination extends JNDIStorable implements Destination, Se
       if (address == null) {
          throw new IllegalArgumentException("address cannot be null");
       }
-      if (ParameterisedAddress.isParameterised(address)) {
-         ParameterisedAddress parameteredAddress = new ParameterisedAddress(address);
-         this.simpleAddress = parameteredAddress.getAddress();
-         this.address = parameteredAddress.getAddress().toString();
-         this.queueAttributes = parameteredAddress.getQueueAttributes();
-      } else {
-         this.simpleAddress = address;
-         this.address = address.toString();
-         this.queueAttributes = null;
-      }
+      this.simpleAddress = address;
    }
 
    public void delete() throws JMSException {
@@ -368,7 +283,7 @@ public class ActiveMQDestination extends JNDIStorable implements Destination, Se
    }
 
    public boolean isQueue() {
-      return queue;
+      return TYPE.isQueue(type);
    }
 
    // Public --------------------------------------------------------
@@ -381,35 +296,16 @@ public class ActiveMQDestination extends JNDIStorable implements Destination, Se
       return simpleAddress;
    }
 
-   public QueueAttributes getQueueAttributes() {
-      return queueAttributes;
-   }
-
    public String getName() {
-      return name != null ? name : getAddress();
+      return simpleAddress.toString();
    }
 
    public boolean isTemporary() {
-      return temporary;
+      return TYPE.isTemporary(type);
    }
 
    public TYPE getType() {
-      if (thetype == null) {
-         if (temporary) {
-            if (isQueue()) {
-               thetype = TYPE.TEMP_QUEUE;
-            } else {
-               thetype = TYPE.TEMP_TOPIC;
-            }
-         } else {
-            if (isQueue()) {
-               thetype = TYPE.QUEUE;
-            } else {
-               thetype = TYPE.TOPIC;
-            }
-         }
-      }
-      return thetype;
+      return type;
    }
 
    @Override