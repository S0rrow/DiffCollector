diff --git a/webapp/src/main/java/org/apache/hadoop/metadata/web/resources/TypesResource.java b/webapp/src/main/java/org/apache/hadoop/metadata/web/resources/TypesResource.java
index 95c26005f..7065eb4ec 100644
--- a/webapp/src/main/java/org/apache/hadoop/metadata/web/resources/TypesResource.java
+++ b/webapp/src/main/java/org/apache/hadoop/metadata/web/resources/TypesResource.java
@@ -18,27 +18,11 @@
 
 package org.apache.hadoop.metadata.web.resources;
 
-import org.apache.hadoop.metadata.services.MetadataService;
-import org.apache.hadoop.metadata.web.util.Servlets;
-import org.codehaus.jettison.json.JSONArray;
-import org.codehaus.jettison.json.JSONObject;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import javax.inject.Inject;
-import javax.inject.Singleton;
 import javax.servlet.http.HttpServletRequest;
-import javax.ws.rs.Consumes;
-import javax.ws.rs.GET;
-import javax.ws.rs.POST;
-import javax.ws.rs.Path;
-import javax.ws.rs.PathParam;
-import javax.ws.rs.Produces;
-import javax.ws.rs.WebApplicationException;
+import javax.ws.rs.*;
 import javax.ws.rs.core.Context;
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.Response;
-import java.util.List;
 
 /**
  * This class provides RESTful API for Types.
@@ -47,80 +31,39 @@ import java.util.List;
  * e.g. a Hive table
  */
 @Path("types")
-@Singleton
 public class TypesResource {
 
-    private static final Logger LOG = LoggerFactory.getLogger(EntityResource.class);
-
-    private final MetadataService metadataService;
-
-    @Inject
-    public TypesResource(MetadataService metadataService) {
-        this.metadataService = metadataService;
-    }
-
     @POST
-    @Path("submit/{typeName}")
+    @Path("submit/{type}")
     @Consumes(MediaType.APPLICATION_JSON)
     @Produces(MediaType.APPLICATION_JSON)
     public Response submit(@Context HttpServletRequest request,
-                           @PathParam("typeName") String typeName) {
-        try {
-            final String typeDefinition = Servlets.getRequestPayload(request);
-            LOG.debug("creating type {} with definition {} ", typeName, typeDefinition);
-
-            JSONObject typesAdded = metadataService.createType(typeName, typeDefinition);
-
-            JSONObject response = new JSONObject();
-            response.put("typeName", typeName);
-            response.put("types", typesAdded);
-            response.put("requestId", Thread.currentThread().getName());
-
-            return Response.ok(response).build();
-        } catch (Exception e) {
-            LOG.error("Unable to persist entity object", e);
-            throw new WebApplicationException(
-                    Servlets.getErrorResponse(e, Response.Status.BAD_REQUEST));
-        }
+                           @PathParam("type") String type) {
+        return Response.ok().build();
     }
 
     @GET
-    @Path("definition/{typeName}")
+    @Path("definition/{type}")
     @Produces(MediaType.APPLICATION_JSON)
     public Response getDefinition(@Context HttpServletRequest request,
-                                  @PathParam("typeName") String typeName) {
-        try {
-            final String typeDefinition = metadataService.getTypeDefinition(typeName);
-
-            JSONObject response = new JSONObject();
-            response.put("typeName", typeName);
-            response.put("definition", typeDefinition);
-            response.put("requestId", Thread.currentThread().getName());
-
-            return Response.ok(response).build();
-        } catch (Exception e) {
-            LOG.error("Unable to persist entity object", e);
-            throw new WebApplicationException(
-                    Servlets.getErrorResponse(e, Response.Status.BAD_REQUEST));
-        }
+                                  @PathParam("type") String type) {
+        return Response.ok().build();
     }
 
-    @GET
-    @Path("list")
+    @DELETE
+    @Path("delete/{type}")
     @Produces(MediaType.APPLICATION_JSON)
-    public Response getTypeNames(@Context HttpServletRequest request) {
-        try {
-            final List<String> typeNamesList = metadataService.getTypeNamesList();
-
-            JSONObject response = new JSONObject();
-            response.put("list", new JSONArray(typeNamesList));
-            response.put("requestId", Thread.currentThread().getName());
+    public Response delete(@Context HttpServletRequest request,
+                           @PathParam("type") String type) {
+        // todo - should this be supported?
+        return Response.status(Response.Status.BAD_REQUEST).build();
+    }
 
-            return Response.ok(response).build();
-        } catch (Exception e) {
-            LOG.error("Unable to persist entity object", e);
-            throw new WebApplicationException(
-                    Servlets.getErrorResponse(e, Response.Status.BAD_REQUEST));
-        }
+    @POST
+    @Path("update/{type}")
+    @Produces(MediaType.APPLICATION_JSON)
+    public Response update(@Context HttpServletRequest request,
+                            @PathParam("type") String type) {
+        return Response.ok().build();
     }
 }