diff --git a/modules/airavata-job-monitor/src/main/java/org/apache/airavata/job/monitor/impl/push/amqp/AMQPMonitor.java b/modules/airavata-job-monitor/src/main/java/org/apache/airavata/job/monitor/impl/push/amqp/AMQPMonitor.java
index b5b6e8fbd..818f2ace6 100644
--- a/modules/airavata-job-monitor/src/main/java/org/apache/airavata/job/monitor/impl/push/amqp/AMQPMonitor.java
+++ b/modules/airavata-job-monitor/src/main/java/org/apache/airavata/job/monitor/impl/push/amqp/AMQPMonitor.java
@@ -22,21 +22,17 @@ package org.apache.airavata.job.monitor.impl.push.amqp;
 
 import com.rabbitmq.client.Channel;
 import com.rabbitmq.client.Connection;
-import org.apache.airavata.common.utils.Constants;
 import org.apache.airavata.job.monitor.MonitorID;
 import org.apache.airavata.job.monitor.core.PushMonitor;
 import org.apache.airavata.job.monitor.event.MonitorPublisher;
 import org.apache.airavata.job.monitor.exception.AiravataMonitorException;
 import org.apache.airavata.job.monitor.util.AMQPConnectionUtil;
 import org.apache.airavata.job.monitor.util.CommonUtils;
-import org.apache.airavata.schemas.gfac.GsisshHostType;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import java.io.IOException;
 import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
 import java.util.Map;
 import java.util.concurrent.BlockingQueue;
 
@@ -45,7 +41,7 @@ import java.util.concurrent.BlockingQueue;
  * rabbitmq client to recieve AMQP based monitoring data from
  * mostly excede resources.
  */
-public class AMQPMonitor extends PushMonitor {
+public class AMQPMonitor extends PushMonitor implements Runnable {
     private final static Logger logger = LoggerFactory.getLogger(AMQPMonitor.class);
 
 
@@ -61,36 +57,21 @@ public class AMQPMonitor extends PushMonitor {
 
     private BlockingQueue<MonitorID> finishQueue;
 
-    private String connectionName;
-
-    private String proxyPath;
-
-    private List<String> amqpHosts;
-
-    public AMQPMonitor(){
-
-    }
-    public AMQPMonitor(MonitorPublisher publisher, BlockingQueue runningQueue, BlockingQueue finishQueue,
-                       String proxyPath,String connectionName,List<String> hosts) {
+    public AMQPMonitor(MonitorPublisher publisher, BlockingQueue runningQueue, BlockingQueue finishQueue) {
         this.publisher = publisher;
-        this.runningQueue = runningQueue;        // these will be initialized by the MonitorManager
-        this.finishQueue = finishQueue;          // these will be initialized by the MonitorManager
+        this.runningQueue = runningQueue;
+        this.finishQueue = finishQueue;
         availableChannels = new HashMap<String, Channel>();
-        this.connectionName = connectionName;
-        this.proxyPath = proxyPath;
-        this.amqpHosts = hosts;
-    }
-
-    public void initialize(String proxyPath,String connectionName,List<String> hosts){
-        this.connectionName = connectionName;
-        this.proxyPath = proxyPath;
-        this.amqpHosts = hosts;
+//        UnRegisterThread unRegisterThread = new UnRegisterThread(finishQueue,availableChannels);
+//        unRegisterThread.run();
+        System.out.println("Testing");
     }
 
     public void run() {
         try {
             // before going to the while true mode we start unregister thread
             while (true) {
+                // we got a new job to do the monitoring
                 MonitorID take = runningQueue.take();
                 this.registerListener(take);
             }
@@ -115,7 +96,7 @@ public class AMQPMonitor extends PushMonitor {
         // if we already have a channel we do not create one
         if (availableChannels.get(channelID) == null) {
             //todo need to fix this rather getting it from a file
-            Connection connection = AMQPConnectionUtil.connect(connectionName, proxyPath);
+            Connection connection = AMQPConnectionUtil.connect("xsede_private", "/Users/lahirugunathilake/Downloads/x509up_u503876");
             Channel channel = null;
             try {
                 channel = connection.createChannel();
@@ -201,19 +182,9 @@ public class AMQPMonitor extends PushMonitor {
         this.finishQueue = finishQueue;
     }
 
-    public String getProxyPath() {
-        return proxyPath;
-    }
+    /**
+     * implementing a logic to handle the finished job and unsubscribe
+     */
 
-    public void setProxyPath(String proxyPath) {
-        this.proxyPath = proxyPath;
-    }
 
-    public List<String> getAmqpHosts() {
-        return amqpHosts;
-    }
-
-    public void setAmqpHosts(List<String> amqpHosts) {
-        this.amqpHosts = amqpHosts;
-    }
 }