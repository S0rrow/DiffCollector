diff --git a/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/proton/ProtonServerSenderContext.java b/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/proton/ProtonServerSenderContext.java
index b9385bc3e8..c4aca48e64 100644
--- a/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/proton/ProtonServerSenderContext.java
+++ b/artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/proton/ProtonServerSenderContext.java
@@ -16,13 +16,11 @@
  */
 package org.apache.activemq.artemis.protocol.amqp.proton;
 
-import java.nio.ByteBuffer;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Set;
-import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.TimeUnit;
 
 import org.apache.activemq.artemis.api.core.ActiveMQExceptionType;
 import org.apache.activemq.artemis.api.core.ActiveMQSecurityException;
@@ -30,16 +28,12 @@ import org.apache.activemq.artemis.api.core.Message;
 import org.apache.activemq.artemis.api.core.RoutingType;
 import org.apache.activemq.artemis.api.core.SimpleString;
 import org.apache.activemq.artemis.core.io.IOCallback;
-import org.apache.activemq.artemis.core.message.LargeBodyReader;
 import org.apache.activemq.artemis.core.persistence.OperationContext;
 import org.apache.activemq.artemis.core.server.AddressQueryResult;
 import org.apache.activemq.artemis.core.server.Consumer;
 import org.apache.activemq.artemis.core.server.MessageReference;
 import org.apache.activemq.artemis.core.server.QueueQueryResult;
-import org.apache.activemq.artemis.core.server.ServerConsumer;
-import org.apache.activemq.artemis.core.server.impl.ServerConsumerImpl;
 import org.apache.activemq.artemis.jms.client.ActiveMQDestination;
-import org.apache.activemq.artemis.protocol.amqp.broker.AMQPLargeMessage;
 import org.apache.activemq.artemis.protocol.amqp.broker.AMQPMessage;
 import org.apache.activemq.artemis.protocol.amqp.broker.AMQPSessionCallback;
 import org.apache.activemq.artemis.protocol.amqp.broker.ActiveMQProtonRemotingConnection;
@@ -55,7 +49,7 @@ import org.apache.activemq.artemis.protocol.amqp.util.NettyReadable;
 import org.apache.activemq.artemis.reader.MessageUtil;
 import org.apache.activemq.artemis.selector.filter.FilterException;
 import org.apache.activemq.artemis.selector.impl.SelectorParser;
-import org.apache.activemq.artemis.spi.core.remoting.ReadyListener;
+import org.apache.activemq.artemis.spi.core.remoting.Connection;
 import org.apache.activemq.artemis.utils.CompositeAddress;
 import org.apache.qpid.proton.amqp.DescribedType;
 import org.apache.qpid.proton.amqp.Symbol;
@@ -80,7 +74,7 @@ import org.apache.qpid.proton.engine.Sender;
 import org.jboss.logging.Logger;
 
 /**
- * This is the Equivalent for the ServerConsumer
+ * TODO: Merge {@link ProtonServerSenderContext} and {@link org.apache.activemq.artemis.protocol.amqp.client.ProtonClientSenderContext} once we support 'global' link names. The split is a workaround for outgoing links
  */
 public class ProtonServerSenderContext extends ProtonInitializable implements ProtonDeliveryHandler {
 
@@ -95,7 +89,7 @@ public class ProtonServerSenderContext extends ProtonInitializable implements Pr
    private final ConnectionFlushIOCallback connectionFlusher = new ConnectionFlushIOCallback();
 
    private Consumer brokerConsumer;
-   private ReadyListener onflowControlReady;
+
    protected final AMQPSessionContext protonSession;
    protected final Sender sender;
    protected final AMQPConnectionContext connection;
@@ -110,24 +104,6 @@ public class ProtonServerSenderContext extends ProtonInitializable implements Pr
    private boolean isVolatile = false;
    private boolean preSettle;
    private SimpleString tempQueueName;
-   private final AtomicBoolean draining = new AtomicBoolean(false);
-
-   // once a large message is accepted, we shouldn't accept any further messages
-   // as large message could be interrupted due to flow control and resumed at the same message
-   volatile boolean hasLarge = false;
-   volatile LargeMessageDeliveryContext pendingLargeMessage = null;
-
-
-   private int credits = 0;
-
-   private AtomicInteger pending = new AtomicInteger(0);
-   /**
-    * The model proton uses requires us to hold a lock in certain times
-    * to sync the credits we have versus the credits that are being held in proton
-    * */
-   private final Object creditsLock = new Object();
-   private final java.util.function.Consumer<? super MessageReference> executeDelivery;
-   private final boolean amqpTreatRejectAsUnmodifiedDeliveryFailed;
 
    public ProtonServerSenderContext(AMQPConnectionContext connection,
                                     Sender sender,
@@ -138,9 +114,6 @@ public class ProtonServerSenderContext extends ProtonInitializable implements Pr
       this.sender = sender;
       this.protonSession = protonSession;
       this.sessionSPI = server;
-      this.executeDelivery = this::executeDelivery;
-      amqpTreatRejectAsUnmodifiedDeliveryFailed = this.connection.getProtocolManager()
-                                                                 .isAmqpTreatRejectAsUnmodifiedDeliveryFailed();
    }
 
    public Object getBrokerConsumer() {
@@ -149,56 +122,7 @@ public class ProtonServerSenderContext extends ProtonInitializable implements Pr
 
    @Override
    public void onFlow(int currentCredits, boolean drain) {
-      connection.requireInHandler();
-
-      setupCredit();
-
-      ServerConsumerImpl serverConsumer = (ServerConsumerImpl) brokerConsumer;
-      if (drain) {
-         // If the draining is already running, then don't do anything
-         if (draining.compareAndSet(false, true)) {
-            final ProtonServerSenderContext plugSender = (ProtonServerSenderContext) serverConsumer.getProtocolContext();
-            serverConsumer.forceDelivery(1, new Runnable() {
-               @Override
-               public void run() {
-                  try {
-                     connection.runNow(() -> {
-                        plugSender.reportDrained();
-                        setupCredit();
-                     });
-                  } finally {
-                     draining.set(false);
-                  }
-               }
-            });
-         }
-      } else {
-         serverConsumer.receiveCredits(-1);
-      }
-   }
-
-   public boolean hasCredits() {
-      if (hasLarge) {
-         // we will resume accepting once the large message is finished
-         return false;
-      }
-
-      if (!connection.flowControl(onflowControlReady)) {
-         return false;
-      }
-
-      synchronized (creditsLock) {
-         return credits > 0 && sender.getLocalState() != EndpointState.CLOSED;
-      }
-   }
-
-   private void setupCredit() {
-      synchronized (creditsLock) {
-         this.credits = sender.getCredit() - pending.get();
-         if (credits < 0) {
-            credits = 0;
-         }
-      }
+      sessionSPI.onFlowConsumer(brokerConsumer, currentCredits, drain);
    }
 
    public Sender getSender() {
@@ -334,10 +258,11 @@ public class ProtonServerSenderContext extends ProtonInitializable implements Pr
 
          //find out if we have an address made up of the address and queue name, if yes then set queue name
          if (CompositeAddress.isFullyQualified(source.getAddress())) {
-            addressToUse = SimpleString.toSimpleString(CompositeAddress.extractAddressName(source.getAddress()));
-            queueNameToUse = SimpleString.toSimpleString(CompositeAddress.extractQueueName(source.getAddress()));
+            CompositeAddress compositeAddress = CompositeAddress.getQueueName(source.getAddress());
+            addressToUse = new SimpleString(compositeAddress.getAddress());
+            queueNameToUse = new SimpleString(compositeAddress.getQueueName());
          } else {
-            addressToUse = SimpleString.toSimpleString(source.getAddress());
+            addressToUse = new SimpleString(source.getAddress());
          }
          //check to see if the client has defined how we act
          boolean clientDefined = hasCapabilities(TOPIC, source) || hasCapabilities(QUEUE, source);
@@ -364,10 +289,7 @@ public class ProtonServerSenderContext extends ProtonInitializable implements Pr
             if (multicast && !routingTypes.contains(RoutingType.MULTICAST)) {
                throw new ActiveMQAMQPIllegalStateException("Address " + addressToUse + " is not configured for topic support");
             } else if (!multicast && !routingTypes.contains(RoutingType.ANYCAST)) {
-               //if client specifies fully qualified name that's allowed, don't throw exception.
-               if (queueNameToUse == null) {
-                  throw new ActiveMQAMQPIllegalStateException("Address " + addressToUse + " is not configured for queue support");
-               }
+               throw new ActiveMQAMQPIllegalStateException("Address " + addressToUse + " is not configured for queue support");
             }
          } else {
             // if not we look up the address
@@ -465,10 +387,7 @@ public class ProtonServerSenderContext extends ProtonInitializable implements Pr
             }
          } else {
             if (queueNameToUse != null) {
-               //a queue consumer can receive from a multicast queue if it uses a fully qualified name
-               //setting routingType to null means do not check the routingType against the Queue's routing type.
-               routingTypeToUse = null;
-               SimpleString matchingAnycastQueue = getMatchingQueue(queueNameToUse, addressToUse, null);
+               SimpleString matchingAnycastQueue = getMatchingQueue(queueNameToUse, addressToUse, RoutingType.ANYCAST);
                if (matchingAnycastQueue != null) {
                   queue = matchingAnycastQueue;
                } else {
@@ -512,7 +431,6 @@ public class ProtonServerSenderContext extends ProtonInitializable implements Pr
       boolean browseOnly = !multicast && source.getDistributionMode() != null && source.getDistributionMode().equals(COPY);
       try {
          brokerConsumer = (Consumer) sessionSPI.createSender(this, queue, multicast ? null : selector, browseOnly);
-         onflowControlReady = brokerConsumer::promptDelivery;
       } catch (ActiveMQAMQPResourceLimitExceededException e1) {
          throw new ActiveMQAMQPResourceLimitExceededException(e1.getMessage());
       } catch (ActiveMQSecurityException e) {
@@ -551,17 +469,20 @@ public class ProtonServerSenderContext extends ProtonInitializable implements Pr
          sender.setCondition(condition);
       }
       protonSession.removeSender(sender);
-
-      connection.runLater(() -> {
-         sender.close();
-         try {
-            sessionSPI.closeSender(brokerConsumer);
-         } catch (Exception e) {
-            log.warn(e.getMessage(), e);
-         }
+      connection.lock();
+      try {
          sender.close();
-         connection.flush();
-      });
+      } finally {
+         connection.unlock();
+      }
+      connection.flush();
+
+      try {
+         sessionSPI.closeSender(brokerConsumer);
+      } catch (Exception e) {
+         log.warn(e.getMessage(), e);
+         throw new ActiveMQAMQPInternalErrorException(e.getMessage());
+      }
    }
 
    /*
@@ -571,7 +492,6 @@ public class ProtonServerSenderContext extends ProtonInitializable implements Pr
    public void close(boolean remoteLinkClose) throws ActiveMQAMQPException {
       try {
          closed = true;
-         protonSession.removeSender(sender);
          sessionSPI.closeSender(brokerConsumer);
          // if this is a link close rather than a connection close or detach, we need to delete
          // any durable resources for say pub subs
@@ -629,7 +549,16 @@ public class ProtonServerSenderContext extends ProtonInitializable implements Pr
             // this can happen in the twice ack mode, that is the receiver accepts and settles separately
             // acking again would show an exception but would have no negative effect but best to handle anyway.
             if (!delivery.isSettled()) {
-               inSessionACK(delivery, message);
+               // we have to individual ack as we can't guarantee we will get the delivery updates
+               // (including acks) in order from dealer, a performance hit but a must
+               try {
+                  sessionSPI.ack(null, brokerConsumer, message);
+               } catch (Exception e) {
+                  log.warn(e.toString(), e);
+                  throw ActiveMQAMQPProtocolMessageBundle.BUNDLE.errorAcknowledgingMessage(message.toString(), e.getMessage());
+               }
+
+               delivery.settle();
             }
          } else {
             handleExtendedDeliveryOutcomes(message, delivery, remoteState);
@@ -644,37 +573,6 @@ public class ProtonServerSenderContext extends ProtonInitializable implements Pr
       }
    }
 
-   private void inSessionACK(Delivery delivery, Message message) throws ActiveMQAMQPIllegalStateException {
-      OperationContext oldContext = sessionSPI.recoverContext();
-      try {
-         // we have to individual ack as we can't guarantee we will get the delivery updates
-         // (including acks) in order from dealer, a performance hit but a must
-         try {
-            sessionSPI.ack(null, brokerConsumer, message);
-         } catch (Exception e) {
-            log.warn(e.toString(), e);
-            throw ActiveMQAMQPProtocolMessageBundle.BUNDLE.errorAcknowledgingMessage(message.toString(), e.getMessage());
-         }
-
-         sessionSPI.afterIO(new IOCallback() {
-            @Override
-            public void done() {
-               connection.runLater(() -> {
-                  delivery.settle();
-                  connection.instantFlush();
-               });
-            }
-
-            @Override
-            public void onError(int errorCode, String errorMessage) {
-
-            }
-         });
-      } finally {
-         sessionSPI.resetContext(oldContext);
-      }
-   }
-
    private boolean handleExtendedDeliveryOutcomes(Message message, Delivery delivery, DeliveryState remoteState) throws ActiveMQAMQPException {
       boolean settleImmediate = true;
       boolean handled = true;
@@ -721,12 +619,7 @@ public class ProtonServerSenderContext extends ProtonInitializable implements Pr
             break;
          case Rejected:
             try {
-               if (amqpTreatRejectAsUnmodifiedDeliveryFailed) {
-                  // We could be more discriminating - for instance check for AmqpError#RESOURCE_LIMIT_EXCEEDED
-                  sessionSPI.cancel(brokerConsumer, message, true);
-               } else {
-                  sessionSPI.reject(brokerConsumer, message);
-               }
+               sessionSPI.reject(brokerConsumer, message);
             } catch (Exception e) {
                throw ActiveMQAMQPProtocolMessageBundle.BUNDLE.errorCancellingMessage(message.toString(), e.getMessage());
             }
@@ -773,8 +666,12 @@ public class ProtonServerSenderContext extends ProtonInitializable implements Pr
    }
 
    public void settle(Delivery delivery) {
-      connection.requireInHandler();
-      delivery.settle();
+      connection.lock();
+      try {
+         delivery.settle();
+      } finally {
+         connection.unlock();
+      }
    }
 
    public synchronized void checkState() {
@@ -784,202 +681,68 @@ public class ProtonServerSenderContext extends ProtonInitializable implements Pr
    /**
     * handle an out going message from ActiveMQ Artemis, send via the Proton Sender
     */
-   public int deliverMessage(final MessageReference messageReference, final ServerConsumer consumer) throws Exception {
+   public int deliverMessage(MessageReference messageReference, int deliveryCount, Connection transportConnection) throws Exception {
 
       if (closed) {
          return 0;
       }
 
-      try {
-         synchronized (creditsLock) {
-            if (sender.getLocalState() == EndpointState.CLOSED) {
-               return 0;
-            }
-            pending.incrementAndGet();
-            credits--;
-         }
-
-         if (messageReference.getMessage() instanceof AMQPLargeMessage) {
-            hasLarge = true;
-         }
+      AMQPMessage message = CoreAmqpConverter.checkAMQP(messageReference.getMessage());
+      sessionSPI.invokeOutgoing(message, (ActiveMQProtonRemotingConnection) transportConnection.getProtocolConnection());
 
-         if (messageReference instanceof Runnable && consumer.allowReferenceCallback()) {
-            messageReference.onDelivery(executeDelivery);
-            connection.runNow((Runnable) messageReference);
-         } else {
-            connection.runNow(() -> executeDelivery(messageReference));
-         }
-
-         // This is because on AMQP we only send messages based in credits, not bytes
-         return 1;
-      } finally {
-
-      }
-   }
+      // we only need a tag if we are going to settle later
+      byte[] tag = preSettle ? new byte[0] : protonSession.getTag();
 
-   private void executeDelivery(MessageReference messageReference) {
+      // Let the Message decide how to present the message bytes
+      ReadableBuffer sendBuffer = message.getSendBuffer(deliveryCount);
+      boolean releaseRequired = sendBuffer instanceof NettyReadable;
 
       try {
-         if (sender.getLocalState() == EndpointState.CLOSED) {
-            log.debug("Not delivering message " + messageReference + " as the sender is closed and credits were available, if you see too many of these it means clients are issuing credits and closing the connection with pending credits a lot of times");
-            return;
-         }
-         AMQPMessage message = CoreAmqpConverter.checkAMQP(messageReference.getMessage(), sessionSPI.getStorageManager());
+         int size = sendBuffer.remaining();
 
-         if (sessionSPI.invokeOutgoing(message, (ActiveMQProtonRemotingConnection) sessionSPI.getTransportConnection().getProtocolConnection()) != null) {
-            return;
-         }
-         if (message instanceof AMQPLargeMessage) {
-            deliverLarge(messageReference, (AMQPLargeMessage) message);
-         } else {
-            deliverStandard(messageReference, message);
+         while (!connection.tryLock(1, TimeUnit.SECONDS)) {
+            if (closed || sender.getLocalState() == EndpointState.CLOSED) {
+               // If we're waiting on the connection lock, the link might be in the process of closing.  If this happens
+               // we return.
+               return 0;
+            } else {
+               if (log.isDebugEnabled()) {
+                  log.debug("Couldn't get lock on deliverMessage " + this);
+               }
+            }
          }
 
-      } catch (Exception e) {
-         log.warn(e.getMessage(), e);
-         brokerConsumer.errorProcessing(e, messageReference);
-      }
-   }
-
-   private class LargeMessageDeliveryContext {
-
-      LargeMessageDeliveryContext(MessageReference reference, AMQPLargeMessage message, Delivery delivery) {
-         this.position = 0L;
-         this.reference = reference;
-         this.message = message;
-         this.delivery = delivery;
-      }
-
-      long position;
-      final MessageReference reference;
-      final AMQPLargeMessage message;
-      final Delivery delivery;
-
-      void resume() {
-         connection.runNow(this::deliver);
-      }
-      private static final int BUFFER_LENGTH = 1024;
-
-      void deliver() {
-         // Let the Message decide how to present the message bytes
-         LargeBodyReader context = message.getLargeBodyReader();
          try {
-
-            context.open();
-            try {
-               context.position(position);
-               long bodySize = context.getSize();
-
-               // TODO: it would be nice to use pooled buffer here,
-               //       however I would need a version of ReadableBuffer for Netty
-               ByteBuffer buf = ByteBuffer.allocate(BUFFER_LENGTH);
-
-               for (; position < bodySize; ) {
-                  if (!connection.flowControl(this::resume)) {
-                     context.close();
-                     return;
-                  }
-                  buf.clear();
-                  int size = context.readInto(buf);
-
-                  sender.send(buf.array(), 0, size);
-
-                  connection.instantFlush();
-
-                  position += size;
-               }
-            } finally {
-               context.close();
+            final Delivery delivery;
+            delivery = sender.delivery(tag, 0, tag.length);
+            delivery.setMessageFormat((int) message.getMessageFormat());
+            delivery.setContext(messageReference);
+
+            if (releaseRequired) {
+               sender.send(sendBuffer);
+               // Above send copied, so release now if needed
+               releaseRequired = false;
+               ((NettyReadable) sendBuffer).getByteBuf().release();
+            } else {
+               // Don't have pooled content, no need to release or copy.
+               sender.sendNoCopy(sendBuffer);
             }
 
             if (preSettle) {
                // Presettled means the client implicitly accepts any delivery we send it.
-               try {
-                  sessionSPI.ack(null, brokerConsumer, reference.getMessage());
-               } catch (Exception e) {
-                  log.debug(e.getMessage(), e);
-               }
+               sessionSPI.ack(null, brokerConsumer, messageReference.getMessage());
                delivery.settle();
             } else {
                sender.advance();
             }
 
             connection.flush();
-
-            synchronized (creditsLock) {
-               pending.decrementAndGet();
-            }
-
-            finishLargeMessage();
-         } catch (Exception e) {
-            log.warn(e.getMessage(), e);
-            brokerConsumer.errorProcessing(e, reference);
+         } finally {
+            connection.unlock();
          }
-      }
-   }
-
-   private void finishLargeMessage() {
-      pendingLargeMessage = null;
-      hasLarge = false;
-      brokerConsumer.promptDelivery();
-   }
-
-   private void deliverLarge(MessageReference messageReference, AMQPLargeMessage message) {
-
-      // we only need a tag if we are going to settle later
-      byte[] tag = preSettle ? new byte[0] : protonSession.getTag();
-
-      final Delivery delivery;
-      delivery = sender.delivery(tag, 0, tag.length);
-      delivery.setMessageFormat((int) message.getMessageFormat());
-      delivery.setContext(messageReference);
 
-      pendingLargeMessage = new LargeMessageDeliveryContext(messageReference, message, delivery);
-      pendingLargeMessage.deliver();
-
-   }
-
-   private void deliverStandard(MessageReference messageReference, AMQPMessage message) {
-      // Let the Message decide how to present the message bytes
-      ReadableBuffer sendBuffer = message.getSendBuffer(messageReference.getDeliveryCount());
-      // we only need a tag if we are going to settle later
-      byte[] tag = preSettle ? new byte[0] : protonSession.getTag();
-
-      boolean releaseRequired = sendBuffer instanceof NettyReadable;
-      final Delivery delivery;
-      delivery = sender.delivery(tag, 0, tag.length);
-      delivery.setMessageFormat((int) message.getMessageFormat());
-      delivery.setContext(messageReference);
-
-      try {
-
-         if (releaseRequired) {
-            sender.send(sendBuffer);
-            // Above send copied, so release now if needed
-            releaseRequired = false;
-            ((NettyReadable) sendBuffer).getByteBuf().release();
-         } else {
-            // Don't have pooled content, no need to release or copy.
-            sender.sendNoCopy(sendBuffer);
-         }
-
-         if (preSettle) {
-            // Presettled means the client implicitly accepts any delivery we send it.
-            try {
-               sessionSPI.ack(null, brokerConsumer, messageReference.getMessage());
-            } catch (Exception e) {
-               log.debug(e.getMessage(), e);
-            }
-            delivery.settle();
-         } else {
-            sender.advance();
-         }
-
-         connection.flush();
+         return size;
       } finally {
-         synchronized (creditsLock) {
-            pending.decrementAndGet();
-         }
          if (releaseRequired) {
             ((NettyReadable) sendBuffer).getByteBuf().release();
          }
@@ -1043,12 +806,13 @@ public class ProtonServerSenderContext extends ProtonInitializable implements Pr
     * Update link state to reflect that the previous drain attempt has completed.
     */
    public void reportDrained() {
-      connection.requireInHandler();
-      sender.drained();
-      connection.instantFlush();
-   }
+      connection.lock();
+      try {
+         sender.drained();
+      } finally {
+         connection.unlock();
+      }
 
-   public AMQPSessionContext getSessionContext() {
-      return protonSession;
+      connection.flush();
    }
 }