diff --git a/repository/src/main/java/org/apache/atlas/repository/store/graph/v1/AtlasEntityGraphDiscoveryV1.java b/repository/src/main/java/org/apache/atlas/repository/store/graph/v1/AtlasEntityGraphDiscoveryV1.java
index f092d1847..b874c5d01 100644
--- a/repository/src/main/java/org/apache/atlas/repository/store/graph/v1/AtlasEntityGraphDiscoveryV1.java
+++ b/repository/src/main/java/org/apache/atlas/repository/store/graph/v1/AtlasEntityGraphDiscoveryV1.java
@@ -17,363 +17,228 @@
  */
 package org.apache.atlas.repository.store.graph.v1;
 
-import org.apache.atlas.AtlasErrorCode;
+import atlas.shaded.hbase.guava.common.annotations.VisibleForTesting;
+import com.google.common.collect.ImmutableMap;
+import com.google.inject.Provider;
 import org.apache.atlas.exception.AtlasBaseException;
 import org.apache.atlas.model.TypeCategory;
 import org.apache.atlas.model.instance.AtlasEntity;
 import org.apache.atlas.model.instance.AtlasObjectId;
 import org.apache.atlas.model.instance.AtlasStruct;
-import org.apache.atlas.repository.store.graph.EntityGraphDiscovery;
+import org.apache.atlas.model.typedef.AtlasStructDef;
 import org.apache.atlas.repository.store.graph.EntityGraphDiscoveryContext;
+import org.apache.atlas.repository.store.graph.EntityGraphDiscovery;
 import org.apache.atlas.repository.store.graph.EntityResolver;
 import org.apache.atlas.type.AtlasArrayType;
-import org.apache.atlas.type.AtlasBuiltInTypes.AtlasObjectIdType;
 import org.apache.atlas.type.AtlasEntityType;
 import org.apache.atlas.type.AtlasMapType;
 import org.apache.atlas.type.AtlasStructType;
-import org.apache.atlas.type.AtlasStructType.AtlasAttribute;
 import org.apache.atlas.type.AtlasType;
 import org.apache.atlas.type.AtlasTypeRegistry;
-import org.apache.atlas.type.AtlasTypeUtil;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
-import java.util.ArrayList;
+import javax.inject.Inject;
 import java.util.Collection;
 import java.util.HashSet;
 import java.util.Iterator;
+import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
 
 public class AtlasEntityGraphDiscoveryV1 implements EntityGraphDiscovery {
-    private static final Logger LOG = LoggerFactory.getLogger(AtlasEntityGraphDiscoveryV1.class);
 
-    private final AtlasTypeRegistry           typeRegistry;
-    private final EntityGraphDiscoveryContext discoveryContext;
-
-    public AtlasEntityGraphDiscoveryV1(AtlasTypeRegistry typeRegistry, EntityStream entityStream) {
-        this.typeRegistry     = typeRegistry;
-        this.discoveryContext = new EntityGraphDiscoveryContext(typeRegistry, entityStream);
-    }
-
-    @Override
-    public void init() throws AtlasBaseException {
-        //Nothing to do
-    }
-
-    @Override
-    public EntityGraphDiscoveryContext discoverEntities() throws AtlasBaseException {
-        // walk through entities in stream and validate them; record entity references
-        discover();
-
-        // resolve entity references discovered in previous step
-        resolveReferences();
+    private AtlasTypeRegistry typeRegistry;
 
-        return discoveryContext;
-    }
+    private Set<String> processedIds = new HashSet<>();
 
-    @Override
-    public void validateAndNormalize(AtlasEntity entity) throws AtlasBaseException {
-        List<String> messages = new ArrayList<>();
+    private EntityGraphDiscoveryContext discoveredEntities = new EntityGraphDiscoveryContext();
 
-        if (! AtlasTypeUtil.isValidGuid(entity.getGuid())) {
-            throw new AtlasBaseException(AtlasErrorCode.INVALID_OBJECT_ID, "invalid guid " + entity.getGuid());
-        }
+    private final Collection<EntityResolver> entityResolvers = new LinkedHashSet<>();
 
-        AtlasEntityType type = typeRegistry.getEntityTypeByName(entity.getTypeName());
+    @Inject
+    public AtlasEntityGraphDiscoveryV1(AtlasTypeRegistry typeRegistry, final Collection<Provider<EntityResolver>> entityResolverProviders) {
+        this.typeRegistry = typeRegistry;
 
-        if (type == null) {
-            throw new AtlasBaseException(AtlasErrorCode.TYPE_NAME_INVALID, TypeCategory.ENTITY.name(), entity.getTypeName());
+        for (Provider<EntityResolver> entityResolverProvider : entityResolverProviders) {
+             entityResolvers.add(entityResolverProvider.get());
         }
+    }
 
-        type.validateValue(entity, entity.getTypeName(), messages);
+    @VisibleForTesting
+    public AtlasEntityGraphDiscoveryV1(AtlasTypeRegistry typeRegistry, final List<EntityResolver> entityResolvers) {
+        this.typeRegistry = typeRegistry;
 
-        if (!messages.isEmpty()) {
-            throw new AtlasBaseException(AtlasErrorCode.INSTANCE_CRUD_INVALID_PARAMS, messages);
+        for (EntityResolver entityResolver : entityResolvers) {
+            this.entityResolvers.add(entityResolver);
         }
-
-        type.getNormalizedValue(entity);
     }
 
     @Override
-    public void validateAndNormalizeForUpdate(AtlasEntity entity) throws AtlasBaseException {
-        List<String> messages = new ArrayList<>();
-
-        if (! AtlasTypeUtil.isValidGuid(entity.getGuid())) {
-            throw new AtlasBaseException(AtlasErrorCode.INVALID_OBJECT_ID, "invalid guid " + entity.getGuid());
-        }
-
-        AtlasEntityType type = typeRegistry.getEntityTypeByName(entity.getTypeName());
+    public void init() throws AtlasBaseException {
+        //Nothing to do
+    }
 
-        if (type == null) {
-            throw new AtlasBaseException(AtlasErrorCode.TYPE_NAME_INVALID, TypeCategory.ENTITY.name(), entity.getTypeName());
-        }
+    @Override
+    public EntityGraphDiscoveryContext discoverEntities(final List<AtlasEntity> entities) throws AtlasBaseException {
 
-        type.validateValueForUpdate(entity, entity.getTypeName(), messages);
+        //walk the graph and discover entity references
+        discover(entities);
 
-        if (!messages.isEmpty()) {
-            throw new AtlasBaseException(AtlasErrorCode.INSTANCE_CRUD_INVALID_PARAMS, messages);
-        }
+        //resolve root and referred entities
+        resolveReferences();
 
-        type.getNormalizedValueForUpdate(entity);
+        return discoveredEntities;
     }
 
     @Override
     public void cleanUp() throws AtlasBaseException {
-        discoveryContext.cleanUp();
-    }
-
-
-    protected void discover() throws AtlasBaseException {
-        EntityStream entityStream = discoveryContext.getEntityStream();
-
-        Set<String> walkedEntities = new HashSet<>();
-
-        // walk through top-level entities and find entity references
-        while (entityStream.hasNext()) {
-            AtlasEntity entity = entityStream.next();
-
-            if (entity == null) {
-                throw new AtlasBaseException(AtlasErrorCode.INVALID_PARAMETERS, "found null entity");
-            }
-
-            walkEntityGraph(entity);
-
-            walkedEntities.add(entity.getGuid());
-        }
-
-        // walk through entities referenced by other entities
-        // referencedGuids will be updated within this for() loop; avoid use of iterators
-        List<String> referencedGuids = discoveryContext.getReferencedGuids();
-        for (int i = 0; i < referencedGuids.size(); i++) {
-            String guid = referencedGuids.get(i);
-
-            if (walkedEntities.contains(guid)) {
-                continue;
-            }
-
-            AtlasEntity entity = entityStream.getByGuid(guid);
-
-            if (entity != null) {
-                walkEntityGraph(entity);
-
-                walkedEntities.add(entity.getGuid());
-            }
+        processedIds.clear();
+        discoveredEntities.cleanUp();
+        final Collection<EntityResolver> entityResolvers = this.entityResolvers;
+        for (EntityResolver resolver : entityResolvers) {
+            resolver.cleanUp();
         }
     }
 
-    protected void resolveReferences() throws AtlasBaseException {
-        EntityResolver[] entityResolvers = new EntityResolver[] { new IDBasedEntityResolver(typeRegistry),
-                                                                  new UniqAttrBasedEntityResolver(typeRegistry)
-                                                                };
 
-        for (EntityResolver resolver : entityResolvers) {
-            resolver.resolveEntityReferences(discoveryContext);
+    protected void resolveReferences() throws AtlasBaseException {
+        for (EntityResolver resolver : entityResolvers ) {
+            resolver.init(discoveredEntities);
+            resolver.resolveEntityReferences();
         }
     }
 
-    private void visitReference(AtlasObjectIdType type, Object val) throws AtlasBaseException {
-        if (type == null || val == null) {
-            return;
-        }
 
-        if (val instanceof AtlasObjectId) {
-            AtlasObjectId objId = (AtlasObjectId)val;
+    protected void discover(final List<AtlasEntity> entities) throws AtlasBaseException {
+        for (AtlasEntity entity : entities) {
+            AtlasType type = typeRegistry.getType(entity.getTypeName());
 
-            if (!AtlasTypeUtil.isValid(objId)) {
-                throw new AtlasBaseException(AtlasErrorCode.INVALID_OBJECT_ID, objId.toString());
-            }
+            discoveredEntities.addRootEntity(entity);
+            walkEntityGraph(type, entity);
+        }
+    }
 
-            recordObjectReference(objId);
-        } else if (val instanceof Map) {
-            AtlasObjectId objId = new AtlasObjectId((Map)val);
+    private void visitReference(AtlasEntityType type, Object entity, boolean isManagedEntity) throws AtlasBaseException {
+        if ( entity != null) {
+            if ( entity instanceof String ) {
+                String guid = (String) entity;
+                discoveredEntities.addUnResolvedIdReference(type, guid);
+            } else if ( entity instanceof AtlasObjectId ) {
+                final String guid = ((AtlasObjectId) entity).getGuid();
+                discoveredEntities.addUnResolvedIdReference(type, guid);
+            } else if ( entity instanceof  AtlasEntity ) {
+                AtlasEntity entityObj = ( AtlasEntity ) entity;
+                if (!processedIds.contains(entityObj.getGuid())) {
+                    processedIds.add(entityObj.getGuid());
 
-            if (!AtlasTypeUtil.isValid(objId)) {
-                throw new AtlasBaseException(AtlasErrorCode.INVALID_OBJECT_ID, objId.toString());
+                    if ( isManagedEntity ) {
+                        discoveredEntities.addRootEntity(entityObj);
+                        visitStruct(type, entityObj);
+                    } else if ( entity instanceof AtlasObjectId) {
+                        discoveredEntities.addUnResolvedIdReference(type, ((AtlasObjectId) entity).getGuid());
+                    } else {
+                        discoveredEntities.addUnResolvedEntityReference(entityObj);
+                    }
+                }
             }
-
-            recordObjectReference(objId);
-        } else {
-            throw new AtlasBaseException(AtlasErrorCode.INVALID_OBJECT_ID, val.toString());
         }
     }
 
-    void visitAttribute(AtlasType attrType, Object val) throws AtlasBaseException {
-        if (attrType == null || val == null) {
-            return;
-        }
-
-        switch (attrType.getTypeCategory()) {
-            case PRIMITIVE:
-            case ENUM:
+    void visitAttribute(AtlasStructType parentType, AtlasType attrType, AtlasStructDef.AtlasAttributeDef attrDef, Object val) throws AtlasBaseException {
+        if (val != null) {
+            if ( isPrimitive(attrType.getTypeCategory()) ) {
                 return;
-
-            case ARRAY: {
-                AtlasArrayType arrayType = (AtlasArrayType) attrType;
-                AtlasType      elemType  = arrayType.getElementType();
-
-                visitCollectionReferences(elemType, val);
             }
-            break;
-
-            case MAP: {
-                AtlasType keyType   = ((AtlasMapType) attrType).getKeyType();
+            if (attrType.getTypeCategory() == TypeCategory.ARRAY) {
+                AtlasArrayType arrayType = (AtlasArrayType) attrType;
+                AtlasType elemType = arrayType.getElementType();
+                visitCollectionReferences(parentType, attrType, attrDef, elemType, val);
+            } else if (attrType.getTypeCategory() == TypeCategory.MAP) {
+                AtlasType keyType = ((AtlasMapType) attrType).getKeyType();
                 AtlasType valueType = ((AtlasMapType) attrType).getValueType();
-
-                visitMapReferences(keyType, valueType, val);
+                visitMapReferences(parentType, attrType, attrDef, keyType, valueType, val);
+            } else if (attrType.getTypeCategory() == TypeCategory.STRUCT) {
+                visitStruct(attrType, val);
+            } else if (attrType.getTypeCategory() == TypeCategory.ENTITY) {
+                if ( val instanceof AtlasObjectId || val instanceof String) {
+                    visitReference((AtlasEntityType) attrType,  val, false);
+                } else if ( val instanceof AtlasEntity ) {
+                    //TODO - Change this to foreign key checks after changes in the model
+                   if ( parentType.isMappedFromRefAttribute(attrDef.getName())) {
+                       visitReference((AtlasEntityType) attrType,  val, true);
+                   }
+                }
             }
-            break;
-
-            case STRUCT:
-                visitStruct((AtlasStructType)attrType, val);
-            break;
-
-            case OBJECT_ID_TYPE:
-                visitReference((AtlasObjectIdType) attrType,  val);
-            break;
-
-            default:
-                throw new AtlasBaseException(AtlasErrorCode.TYPE_CATEGORY_INVALID, attrType.getTypeCategory().name());
         }
     }
 
-    void visitMapReferences(AtlasType keyType, AtlasType valueType, Object val) throws AtlasBaseException {
-        if (keyType == null || valueType == null || val == null) {
-            return;
-        }
-
+    void visitMapReferences(AtlasStructType parentType, final AtlasType attrType, AtlasStructDef.AtlasAttributeDef attrDef, AtlasType keyType, AtlasType valueType, Object val) throws AtlasBaseException {
         if (isPrimitive(keyType.getTypeCategory()) && isPrimitive(valueType.getTypeCategory())) {
             return;
         }
 
-        if (Map.class.isAssignableFrom(val.getClass())) {
-            Iterator<Map.Entry> it = ((Map) val).entrySet().iterator();
-            while (it.hasNext()) {
-                Map.Entry e = it.next();
-                visitAttribute(keyType, e.getKey());
-                visitAttribute(valueType, e.getValue());
+        if (val != null) {
+            Iterator<Map.Entry> it = null;
+            if (Map.class.isAssignableFrom(val.getClass())) {
+                it = ((Map) val).entrySet().iterator();
+                ImmutableMap.Builder b = ImmutableMap.builder();
+                while (it.hasNext()) {
+                    Map.Entry e = it.next();
+                    visitAttribute(parentType, keyType, attrDef, e.getKey());
+                    visitAttribute(parentType, valueType, attrDef, e.getValue());
+                }
             }
         }
     }
 
-    void visitCollectionReferences(AtlasType elemType, Object val) throws AtlasBaseException {
-        if (elemType == null || val == null || isPrimitive(elemType.getTypeCategory())) {
-            return;
-        }
+    void visitCollectionReferences(final AtlasStructType parentType, final AtlasType attrType, final AtlasStructDef.AtlasAttributeDef attrDef, AtlasType elemType, Object val) throws AtlasBaseException {
 
-        Iterator it = null;
-
-        if (val instanceof Collection) {
-            it = ((Collection) val).iterator();
-        } else if (val instanceof Iterable) {
-            it = ((Iterable) val).iterator();
-        } else if (val instanceof Iterator) {
-            it = (Iterator) val;
-        }
-
-        if (it != null) {
-            while (it.hasNext()) {
-                Object elem = it.next();
-                visitAttribute(elemType, elem);
-            }
-        }
-    }
-
-    void visitStruct(AtlasStructType structType, Object val) throws AtlasBaseException {
-        if (structType == null || val == null) {
+        if (isPrimitive(elemType.getTypeCategory())) {
             return;
         }
 
-        final AtlasStruct struct;
-
-        if (val instanceof AtlasStruct) {
-            struct = (AtlasStruct) val;
-        } else if (val instanceof Map) {
-            Map attributes = AtlasTypeUtil.toStructAttributes((Map) val);
-
-            struct = new AtlasStruct(structType.getTypeName(), attributes);
-        } else {
-            throw new AtlasBaseException(AtlasErrorCode.INVALID_STRUCT_VALUE, val.toString());
-        }
-
-        visitStruct(structType, struct);
-    }
-
-    void visitEntity(AtlasEntityType entityType, AtlasEntity entity) throws AtlasBaseException {
-        List<String> visitedAttributes = new ArrayList<>();
-
-        // visit relationship attributes
-        if(!(this.discoveryContext.getEntityStream() instanceof EntityImportStream)) {
-            visitRelationships(entityType, entity, visitedAttributes);
-        }
-
-        // visit struct attributes
-        for (AtlasAttribute attribute : entityType.getAllAttributes().values()) {
-            AtlasType attrType = attribute.getAttributeType();
-            String    attrName = attribute.getName();
-            Object    attrVal  = entity.getAttribute(attrName);
-
-            if (entity.hasAttribute(attrName) && !visitedAttributes.contains(attrName)) {
-                visitAttribute(attrType, attrVal);
+        if (val != null) {
+            Iterator it = null;
+            if (val instanceof Collection) {
+                it = ((Collection) val).iterator();
+            } else if (val instanceof Iterable) {
+                it = ((Iterable) val).iterator();
+            } else if (val instanceof Iterator) {
+                it = (Iterator) val;
             }
-        }
-    }
-
-    private void visitRelationships(AtlasEntityType entityType, AtlasEntity entity, List<String> visitedAttributes) throws AtlasBaseException {
-        for (AtlasAttribute attribute : entityType.getRelationshipAttributes().values()) {
-            AtlasType attrType = attribute.getAttributeType();
-            String attrName = attribute.getName();
-            Object attrVal = entity.getRelationshipAttribute(attrName);
-
-            if (entity.hasRelationshipAttribute(attrName)) {
-                visitAttribute(attrType, attrVal);
-
-                visitedAttributes.add(attrName);
+            if (it != null) {
+                while (it.hasNext()) {
+                    Object elem = it.next();
+                    visitAttribute(parentType, elemType, attrDef, elem);
+                }
             }
         }
     }
 
-    void visitStruct(AtlasStructType structType, AtlasStruct struct) throws AtlasBaseException {
-        for (AtlasAttribute attribute : structType.getAllAttributes().values()) {
-            AtlasType attrType = attribute.getAttributeType();
-            Object    attrVal  = struct.getAttribute(attribute.getName());
-
-            visitAttribute(attrType, attrVal);
-        }
-    }
+    void visitStruct(AtlasType type, Object val) throws AtlasBaseException {
 
-    void walkEntityGraph(AtlasEntity entity) throws AtlasBaseException {
-        if (entity == null) {
+        if (val == null || !(val instanceof AtlasStruct)) {
             return;
         }
 
-        AtlasEntityType type = typeRegistry.getEntityTypeByName(entity.getTypeName());
+        AtlasStructType structType = (AtlasStructType) type;
 
-        if (type == null) {
-            throw new AtlasBaseException(AtlasErrorCode.TYPE_NAME_INVALID, TypeCategory.ENTITY.name(), entity.getTypeName());
+        for (AtlasStructDef.AtlasAttributeDef attributeDef : structType.getStructDef().getAttributeDefs()) {
+            String attrName = attributeDef.getName();
+            AtlasType attrType = structType.getAttributeType(attrName);
+            Object attrVal = ((AtlasStruct) val).getAttribute(attrName);
+            visitAttribute(structType, attrType, attributeDef, attrVal);
         }
+    }
 
-        recordObjectReference(entity.getGuid());
 
-        visitEntity(type, entity);
+    void walkEntityGraph(AtlasType type, AtlasEntity entity) throws AtlasBaseException {
+        visitStruct(type, entity);
     }
 
 
     boolean isPrimitive(TypeCategory typeCategory) {
         return typeCategory == TypeCategory.PRIMITIVE || typeCategory == TypeCategory.ENUM;
     }
-
-    private void recordObjectReference(String guid) {
-        discoveryContext.addReferencedGuid(guid);
-    }
-
-    private void recordObjectReference(AtlasObjectId objId) {
-        if (AtlasTypeUtil.isValidGuid(objId)) {
-            discoveryContext.addReferencedGuid(objId.getGuid());
-        } else {
-            discoveryContext.addReferencedByUniqAttribs(objId);
-        }
-    }
 }