diff --git a/archiva-base/archiva-configuration/src/main/java/org/apache/maven/archiva/configuration/DefaultArchivaConfiguration.java b/archiva-base/archiva-configuration/src/main/java/org/apache/maven/archiva/configuration/DefaultArchivaConfiguration.java
index 52701830c..04355df68 100644
--- a/archiva-base/archiva-configuration/src/main/java/org/apache/maven/archiva/configuration/DefaultArchivaConfiguration.java
+++ b/archiva-base/archiva-configuration/src/main/java/org/apache/maven/archiva/configuration/DefaultArchivaConfiguration.java
@@ -19,22 +19,9 @@
  * under the License.
  */
 
-import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.collections.MapUtils;
 import org.apache.commons.io.FileUtils;
-import org.apache.maven.archiva.configuration.functors.ProxyConnectorConfigurationOrderComparator;
 import org.apache.maven.archiva.configuration.io.registry.ConfigurationRegistryReader;
 import org.apache.maven.archiva.configuration.io.registry.ConfigurationRegistryWriter;
-import org.apache.maven.archiva.policies.AbstractUpdatePolicy;
-import org.apache.maven.archiva.policies.CachedFailuresPolicy;
-import org.apache.maven.archiva.policies.ChecksumPolicy;
-import org.apache.maven.archiva.policies.DownloadPolicy;
-import org.apache.maven.archiva.policies.PostDownloadPolicy;
-import org.apache.maven.archiva.policies.PreDownloadPolicy;
-import org.codehaus.plexus.evaluator.DefaultExpressionEvaluator;
-import org.codehaus.plexus.evaluator.EvaluatorException;
-import org.codehaus.plexus.evaluator.ExpressionEvaluator;
-import org.codehaus.plexus.evaluator.sources.SystemPropertyExpressionSource;
 import org.codehaus.plexus.logging.AbstractLogEnabled;
 import org.codehaus.plexus.personality.plexus.lifecycle.phase.Initializable;
 import org.codehaus.plexus.personality.plexus.lifecycle.phase.InitializationException;
@@ -45,40 +32,28 @@
 
 import java.io.File;
 import java.io.IOException;
-import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
 import java.util.Iterator;
+import java.util.LinkedList;
 import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.Map.Entry;
 
 /**
- * <p>
  * Implementation of configuration holder that retrieves it from the registry.
- * </p>
- * <p>
+ * <p/>
  * The registry layers and merges the 2 configuration files: user, and application server.
- * </p>
- * <p>
+ * <p/>
  * Instead of relying on the model defaults, if the registry is empty a default configuration file is loaded and
  * applied from a resource. The defaults are not loaded into the registry as the lists (eg repositories) could no longer
  * be removed if that was the case.
- * </p>
- * <p>
+ * <p/>
  * When saving the configuration, it is saved to the location it was read from. If it was read from the defaults, it
  * will be saved to the user location.
  * However, if the configuration contains information from both sources, an exception is raised as this is currently
  * unsupported. The reason for this is that it is not possible to identify where to re-save elements, and can result
  * in list configurations (eg repositories) becoming inconsistent.
- * </p>
- * <p>
+ * <p/>
  * If the configuration is outdated, it will be upgraded when it is loaded. This is done by checking the version flag
  * before reading it from the registry.
- * </p>
  *
  * @plexus.component role="org.apache.maven.archiva.configuration.ArchivaConfiguration"
  */
@@ -98,43 +73,22 @@
      */
     private Configuration configuration;
 
-    /**
-     * @plexus.requirement role="org.apache.maven.archiva.policies.PreDownloadPolicy"
-     */
-    private Map<String, PreDownloadPolicy> prePolicies;
+    private static final String KEY = "org.apache.maven.archiva";
 
-    /**
-     * @plexus.requirement role="org.apache.maven.archiva.policies.PostDownloadPolicy"
-     */
-    private Map<String, PostDownloadPolicy> postPolicies;
-    
     /**
      * @plexus.configuration default-value="${user.home}/.m2/archiva.xml"
      */
     private String userConfigFilename;
 
     /**
-     * @plexus.configuration default-value="${appserver.base}/conf/archiva.xml"
-     */
-    private String altConfigFilename;
-
-    /**
-     * Configuration Listeners we've registered.
+     * Listeners we've registered.
      */
-    private Set<ConfigurationListener> listeners = new HashSet<ConfigurationListener>();
+    private List listeners = new LinkedList();
 
-    /**
-     * Registry Listeners we've registered.
-     */
-    private Set<RegistryListener> registryListeners = new HashSet<RegistryListener>();
-    
-    /**
-     * Boolean to help determine if the configuration exists as a result of pulling in
-     * the default-archiva.xml
-     */
-    private boolean isConfigurationDefaulted = false;
-
-    private static final String KEY = "org.apache.maven.archiva";
+    public String getFilteredUserConfigFilename()
+    {
+        return StringUtils.replace( userConfigFilename, "${user.home}", System.getProperty( "user.home" ) );
+    }
 
     public synchronized Configuration getConfiguration()
     {
@@ -165,9 +119,9 @@ private Configuration load()
 
         if ( !config.getRepositories().isEmpty() )
         {
-            for ( Iterator<V1RepositoryConfiguration> i = config.getRepositories().iterator(); i.hasNext(); )
+            for ( Iterator i = config.getRepositories().iterator(); i.hasNext(); )
             {
-                V1RepositoryConfiguration r = i.next();
+                V1RepositoryConfiguration r = (V1RepositoryConfiguration) i.next();
                 r.setScanned( r.isIndexed() );
 
                 if ( r.getUrl().startsWith( "file://" ) )
@@ -190,165 +144,11 @@ else if ( r.getUrl().startsWith( "file:" ) )
                     config.addRemoteRepository( repo );
                 }
             }
-
-            // Prevent duplicate repositories from showing up.
-            config.getRepositories().clear();
-
-            registry.removeSubset( KEY + ".repositories" );
-        }
-
-        if ( !config.getProxyConnectors().isEmpty() )
-        {
-            // Fix Proxy Connector Settings.
-
-            List<ProxyConnectorConfiguration> proxyConnectorList = new ArrayList<ProxyConnectorConfiguration>();
-            // Create a copy of the list to read from (to prevent concurrent modification exceptions)
-            proxyConnectorList.addAll( config.getProxyConnectors() );
-            // Remove the old connector list.
-            config.getProxyConnectors().clear();
-
-            for ( ProxyConnectorConfiguration connector : proxyConnectorList )
-            {
-                // Fix policies
-                boolean connectorValid = true;
-
-                Map<String, String> policies = new HashMap<String, String>();
-                // Make copy of policies
-                policies.putAll( connector.getPolicies() );
-                // Clear out policies
-                connector.getPolicies().clear();
-
-                // Work thru policies. cleaning them up.
-                for ( Entry<String, String> entry : policies.entrySet() )
-                {
-                    String policyId = entry.getKey();
-                    String setting = entry.getValue();
-
-                    // Upgrade old policy settings.
-                    if ( "releases".equals( policyId ) || "snapshots".equals( policyId ) )
-                    {
-                        if ( "ignored".equals( setting ) )
-                        {
-                            setting = AbstractUpdatePolicy.ALWAYS;
-                        }
-                        else if ( "disabled".equals( setting ) )
-                        {
-                            setting = AbstractUpdatePolicy.NEVER;
-                        }
-                    }
-                    else if ( "cache-failures".equals( policyId ) )
-                    {
-                        if ( "ignored".equals( setting ) )
-                        {
-                            setting = CachedFailuresPolicy.NO;
-                        }
-                        else if ( "cached".equals( setting ) )
-                        {
-                            setting = CachedFailuresPolicy.YES;
-                        }
-                    }
-                    else if ( "checksum".equals( policyId ) )
-                    {
-                        if ( "ignored".equals( setting ) )
-                        {
-                            setting = ChecksumPolicy.IGNORE;
-                        }
-                    }
-
-                    // Validate existance of policy key.
-                    if ( policyExists( policyId ) )
-                    {
-                        DownloadPolicy policy = findPolicy( policyId );
-                        // Does option exist?
-                        if ( !policy.getOptions().contains( setting ) )
-                        {
-                            setting = policy.getDefaultOption();
-                        }
-                        connector.addPolicy( policyId, setting );
-                    }
-                    else
-                    {
-                        // Policy key doesn't exist. Don't add it to golden version.
-                        getLogger().warn( "Policy [" + policyId + "] does not exist." );
-                    }
-                }
-
-                if ( connectorValid )
-                {
-                    config.addProxyConnector( connector );
-                }
-            }
-
-            // Normalize the order fields in the proxy connectors.
-            Map<String, java.util.List<ProxyConnectorConfiguration>> proxyConnectorMap = config
-                .getProxyConnectorAsMap();
-
-            for ( String key : proxyConnectorMap.keySet() )
-            {
-                List<ProxyConnectorConfiguration> connectors = proxyConnectorMap.get( key );
-                // Sort connectors by order field.
-                Collections.sort( connectors, ProxyConnectorConfigurationOrderComparator.getInstance() );
-
-                // Normalize the order field values.
-                int order = 1;
-                for ( ProxyConnectorConfiguration connector : connectors )
-                {
-                    connector.setOrder( order++ );
-                }
-            }
         }
 
         return config;
     }
 
-    private DownloadPolicy findPolicy( String policyId )
-    {
-        if ( MapUtils.isEmpty( prePolicies ) )
-        {
-            getLogger().error( "No PreDownloadPolicies found!" );
-            return null;
-        }
-
-        if ( MapUtils.isEmpty( postPolicies ) )
-        {
-            getLogger().error( "No PostDownloadPolicies found!" );
-            return null;
-        }
-
-        DownloadPolicy policy;
-
-        policy = prePolicies.get( policyId );
-        if ( policy != null )
-        {
-            return policy;
-        }
-
-        policy = postPolicies.get( policyId );
-        if ( policy != null )
-        {
-            return policy;
-        }
-
-        return null;
-    }
-
-    private boolean policyExists( String policyId )
-    {
-        if ( MapUtils.isEmpty( prePolicies ) )
-        {
-            getLogger().error( "No PreDownloadPolicies found!" );
-            return false;
-        }
-        
-        if ( MapUtils.isEmpty( postPolicies ) )
-        {
-            getLogger().error( "No PostDownloadPolicies found!" );
-            return false;
-        }
-        
-        return ( prePolicies.containsKey( policyId ) || postPolicies.containsKey( policyId ) );
-    }
-
     private Registry readDefaultConfiguration()
     {
         // if it contains some old configuration, remove it (Archiva 0.9)
@@ -357,13 +157,11 @@ private Registry readDefaultConfiguration()
         try
         {
             registry.addConfigurationFromResource( "org/apache/maven/archiva/configuration/default-archiva.xml", KEY );
-            this.isConfigurationDefaulted = true;
         }
         catch ( RegistryException e )
         {
             throw new ConfigurationRuntimeException(
-                                                     "Fatal error: Unable to find the built-in default configuration and load it into the registry",
-                                                     e );
+                "Fatal error: Unable to find the built-in default configuration and load it into the registry", e );
         }
         return registry.getSubset( KEY );
     }
@@ -383,18 +181,18 @@ public synchronized void save( Configuration configuration )
         }
         else if ( baseSection != null )
         {
-            Collection<String> keys = baseSection.getKeys();
+            Collection keys = baseSection.getKeys();
             boolean foundList = false;
-            for ( Iterator<String> i = keys.iterator(); i.hasNext() && !foundList; )
+            for ( Iterator i = keys.iterator(); i.hasNext() && !foundList; )
             {
-                String key = i.next();
+                String key = (String) i.next();
 
                 // a little aggressive with the repositoryScanning and databaseScanning - should be no need to split
                 // that configuration
-                if ( key.startsWith( "repositories" ) || key.startsWith( "proxyConnectors" )
-                    || key.startsWith( "networkProxies" ) || key.startsWith( "repositoryScanning" )
-                    || key.startsWith( "databaseScanning" ) || key.startsWith( "remoteRepositories" )
-                    || key.startsWith( "managedRepositories" ) )
+                if ( key.startsWith( "repositories" ) || key.startsWith( "proxyConnectors" ) ||
+                    key.startsWith( "networkProxies" ) || key.startsWith( "repositoryScanning" ) ||
+                    key.startsWith( "databaseScanning" ) || key.startsWith( "remoteRepositories" ) ||
+                    key.startsWith( "managedRepositories" ) )
                 {
                     foundList = true;
                 }
@@ -405,30 +203,26 @@ else if ( baseSection != null )
                 this.configuration = null;
 
                 throw new IndeterminateConfigurationException(
-                                                               "Configuration can not be saved when it is loaded from two sources" );
+                    "Configuration can not be saved when it is loaded from two sources" );
             }
         }
 
         // escape all cron expressions to handle ','
-        for ( Iterator<ManagedRepositoryConfiguration> i = configuration.getManagedRepositories().iterator(); i
-            .hasNext(); )
+        for ( Iterator i = configuration.getManagedRepositories().iterator(); i.hasNext(); )
         {
-            ManagedRepositoryConfiguration c = i.next();
+            ManagedRepositoryConfiguration c = (ManagedRepositoryConfiguration) i.next();
             c.setRefreshCronExpression( escapeCronExpression( c.getRefreshCronExpression() ) );
         }
 
         if ( configuration.getDatabaseScanning() != null )
         {
             configuration.getDatabaseScanning().setCronExpression(
-                                                                   escapeCronExpression( configuration
-                                                                       .getDatabaseScanning().getCronExpression() ) );
+                escapeCronExpression( configuration.getDatabaseScanning().getCronExpression() ) );
         }
 
         new ConfigurationRegistryWriter().write( configuration, section );
         section.save();
 
-        triggerEvent( ConfigurationEvent.SAVED );
-
         this.configuration = processExpressions( configuration );
     }
 
@@ -436,26 +230,25 @@ private Registry createDefaultConfigurationFile()
         throws RegistryException
     {
         // TODO: may not be needed under commons-configuration 1.4 - check
-        // UPDATE: Upgrading to commons-configuration 1.4 breaks half the unit tests. 2007-10-11 (joakime)
-
-        String contents = "<configuration />";
-        if ( !writeFile( "user configuration", userConfigFilename, contents ) )
+        File file = new File( getFilteredUserConfigFilename() );
+        try
         {
-            if ( !writeFile( "alternative configuration", altConfigFilename, contents ) )
-            {
-                throw new RegistryException( "Unable to create configuration file in either user ["
-                    + userConfigFilename + "] or alternative [" + altConfigFilename
-                    + "] locations on disk, usually happens when not allowed to write to those locations." );
-            }
+            FileUtils.writeStringToFile( file, "<configuration/>", "UTF-8" );
+        }
+        catch ( IOException e )
+        {
+            throw new RegistryException( "Unable to create configuration file: " + e.getMessage(), e );
         }
 
         try
         {
             ( (Initializable) registry ).initialize();
 
-            for ( RegistryListener regListener : registryListeners )
+            for ( Iterator i = listeners.iterator(); i.hasNext(); )
             {
-                addRegistryChangeListener( regListener );
+                RegistryListener l = (RegistryListener) i.next();
+
+                addRegistryChangeListener( l );
             }
         }
         catch ( InitializationException e )
@@ -463,77 +256,15 @@ private Registry createDefaultConfigurationFile()
             throw new RegistryException( "Unable to reinitialize configuration: " + e.getMessage(), e );
         }
 
-        triggerEvent( ConfigurationEvent.SAVED );
-
         return registry.getSection( KEY + ".user" );
     }
 
-    /**
-     * Attempts to write the contents to a file, if an IOException occurs, return false.
-     * 
-     * @param filetype the filetype (freeform text) to use in logging messages when failure to write.
-     * @param path the path to write to.
-     * @param contents the contents to write.
-     * @return true if write successful.
-     */
-    private boolean writeFile( String filetype, String path, String contents )
-    {
-        File file = new File( path );
-
-        try
-        {
-            FileUtils.writeStringToFile( file, contents, "UTF-8" );
-            return true;
-        }
-        catch ( IOException e )
-        {
-            getLogger().error( "Unable to create " + filetype + " file: " + e.getMessage(), e );
-            return false;
-        }
-    }
-
-    private void triggerEvent( int type )
-    {
-        ConfigurationEvent evt = new ConfigurationEvent( type );
-        for ( ConfigurationListener listener : listeners )
-        {
-            try
-            {
-                listener.configurationEvent( evt );
-            }
-            catch ( Throwable t )
-            {
-                getLogger().warn( "Unable to notify of saved configuration event.", t );
-            }
-        }
-    }
-
-    public void addListener( ConfigurationListener listener )
-    {
-        if ( listener == null )
-        {
-            return;
-        }
-
-        listeners.add( listener );
-    }
-
-    public void removeListener( ConfigurationListener listener )
-    {
-        if ( listener == null )
-        {
-            return;
-        }
-
-        listeners.remove( listener );
-    }
-
     public void addChangeListener( RegistryListener listener )
     {
         addRegistryChangeListener( listener );
 
         // keep track for later
-        registryListeners.add( listener );
+        listeners.add( listener );
     }
 
     private void addRegistryChangeListener( RegistryListener listener )
@@ -553,20 +284,6 @@ private void addRegistryChangeListener( RegistryListener listener )
     public void initialize()
         throws InitializationException
     {
-        // Resolve expressions in the userConfigFilename and altConfigFilename
-        try
-        {
-            ExpressionEvaluator expressionEvaluator = new DefaultExpressionEvaluator();
-            expressionEvaluator.addExpressionSource( new SystemPropertyExpressionSource() );
-            userConfigFilename = expressionEvaluator.expand( userConfigFilename );
-            altConfigFilename = expressionEvaluator.expand( altConfigFilename );
-        }
-        catch ( EvaluatorException e )
-        {
-            throw new InitializationException( "Unable to evaluate expressions found in "
-                + "userConfigFilename or altConfigFilename." );
-        }
-
         registry.addChangeListener( this );
     }
 
@@ -582,10 +299,10 @@ public synchronized void afterConfigurationChange( Registry registry, String pro
 
     private String removeExpressions( String directory )
     {
-        String value = StringUtils.replace( directory, "${appserver.base}", registry.getString( "appserver.base",
-                                                                                                "${appserver.base}" ) );
-        value = StringUtils.replace( value, "${appserver.home}", registry.getString( "appserver.home",
-                                                                                     "${appserver.home}" ) );
+        String value = StringUtils.replace( directory, "${appserver.base}",
+                                            registry.getString( "appserver.base", "${appserver.base}" ) );
+        value = StringUtils.replace( value, "${appserver.home}",
+                                     registry.getString( "appserver.home", "${appserver.home}" ) );
         return value;
     }
 
@@ -602,9 +319,9 @@ private String escapeCronExpression( String cronExpression )
     private Configuration processExpressions( Configuration config )
     {
         // TODO: for commons-configuration 1.3 only
-        for ( Iterator<ManagedRepositoryConfiguration> i = config.getManagedRepositories().iterator(); i.hasNext(); )
+        for ( Iterator i = config.getManagedRepositories().iterator(); i.hasNext(); )
         {
-            ManagedRepositoryConfiguration c = i.next();
+            ManagedRepositoryConfiguration c = (ManagedRepositoryConfiguration) i.next();
             c.setLocation( removeExpressions( c.getLocation() ) );
             c.setRefreshCronExpression( unescapeCronExpression( c.getRefreshCronExpression() ) );
         }
@@ -618,19 +335,4 @@ private Configuration processExpressions( Configuration config )
 
         return config;
     }
-
-    public String getUserConfigFilename()
-    {
-        return userConfigFilename;
-    }
-
-    public String getAltConfigFilename()
-    {
-        return altConfigFilename;
-    }
-
-    public boolean isDefaulted()
-    {
-        return this.isConfigurationDefaulted;
-    }
 }