diff --git a/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/admin/ConfigureAction.java b/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/admin/ConfigureAction.java
index 9f604b3ef..be0ebf1d5 100644
--- a/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/admin/ConfigureAction.java
+++ b/archiva-webapp/src/main/java/org/apache/maven/archiva/web/action/admin/ConfigureAction.java
@@ -18,7 +18,6 @@
 
 import com.opensymphony.xwork.ModelDriven;
 import com.opensymphony.xwork.Preparable;
-import com.opensymphony.xwork.Validateable;
 import org.apache.maven.archiva.configuration.Configuration;
 import org.apache.maven.archiva.configuration.ConfigurationChangeException;
 import org.apache.maven.archiva.configuration.ConfigurationStore;
@@ -26,13 +25,8 @@
 import org.apache.maven.archiva.configuration.InvalidConfigurationException;
 import org.apache.maven.archiva.indexer.RepositoryIndexException;
 import org.apache.maven.archiva.indexer.RepositoryIndexSearchException;
-import org.apache.maven.archiva.security.ArchivaRoleConstants;
-import org.codehaus.plexus.scheduler.CronExpressionValidator;
-import org.codehaus.plexus.security.rbac.Resource;
-import org.codehaus.plexus.security.ui.web.interceptor.SecureAction;
-import org.codehaus.plexus.security.ui.web.interceptor.SecureActionBundle;
-import org.codehaus.plexus.security.ui.web.interceptor.SecureActionException;
 import org.codehaus.plexus.xwork.action.PlexusActionSupport;
+import org.codehaus.plexus.scheduler.CronExpressionValidator;
 
 import java.io.File;
 import java.io.IOException;
@@ -44,7 +38,7 @@
  */
 public class ConfigureAction
     extends PlexusActionSupport
-    implements ModelDriven, Preparable, Validateable, SecureAction
+    implements ModelDriven, Preparable
 {
     /**
      * @plexus.requirement
@@ -72,16 +66,6 @@
 
     private String year;
 
-    public void validate()
-    {
-        //validate cron expression
-        cronValidator = new CronExpressionValidator();
-
-        if ( !cronValidator.validate( getCronExpression() ) )
-        {
-            addActionError( "Invalid Cron Expression" );
-        }
-    }
 
     public String execute()
         throws IOException, RepositoryIndexException, RepositoryIndexSearchException, ConfigurationStoreException,
@@ -89,7 +73,19 @@ public String execute()
     {
         // TODO: if this didn't come from the form, go to configure.action instead of going through with re-saving what was just loaded
         // TODO: if this is changed, do we move the index or recreate it?
-        configuration.setIndexerCronExpression( getCronExpression() );
+
+        String cronEx = ( second + " " + minute + " " + hour + " " + dayOfMonth + " " + month +
+            " " + dayOfWeek + " " + year ).trim();
+
+        //validate cron expression
+        cronValidator = new CronExpressionValidator();
+        if( !cronValidator.validate( cronEx ) )
+        {
+            addActionError( "Invalid Cron Expression" );
+            return ERROR;
+        }
+
+        configuration.setIndexerCronExpression( cronEx );
 
         // Normalize the path
         File file = new File( configuration.getIndexPath() );
@@ -119,29 +115,15 @@ public String input()
 
         while ( i < cronEx.length )
         {
-            switch ( i )
+            switch( i )
             {
-                case 0:
-                    second = cronEx[i];
-                    break;
-                case 1:
-                    minute = cronEx[i];
-                    break;
-                case 2:
-                    hour = cronEx[i];
-                    break;
-                case 3:
-                    dayOfMonth = cronEx[i];
-                    break;
-                case 4:
-                    month = cronEx[i];
-                    break;
-                case 5:
-                    dayOfWeek = cronEx[i];
-                    break;
-                case 6:
-                    year = cronEx[i];
-                    break;
+                case 0 : second = cronEx[i]; break;
+                case 1 : minute = cronEx[i]; break;
+                case 2 : hour = cronEx[i]; break;
+                case 3 : dayOfMonth = cronEx[i]; break;
+                case 4 : month = cronEx[i]; break;
+                case 5 : dayOfWeek = cronEx[i]; break;
+                case 6 : year = cronEx[i]; break;
             }
             i++;
         }
@@ -229,21 +211,4 @@ public void setDayOfWeek( String dayOfWeek )
     {
         this.dayOfWeek = dayOfWeek;
     }
-
-    private String getCronExpression()
-    {
-        return ( second + " " + minute + " " + hour + " " + dayOfMonth + " " + month + " " + dayOfWeek + " " +
-            year ).trim();
-    }
-
-    public SecureActionBundle getSecureActionBundle()
-        throws SecureActionException
-    {
-        SecureActionBundle bundle = new SecureActionBundle();
-
-        bundle.setRequiresAuthentication( true );
-        bundle.addRequiredAuthorization( ArchivaRoleConstants.OPERATION_MANAGE_CONFIGURATION, Resource.GLOBAL );
-
-        return bundle;
-    }
 }