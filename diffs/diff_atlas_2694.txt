diff --git a/repository/src/main/java/org/apache/atlas/repository/store/graph/v1/AtlasEntityGraphDiscoveryV1.java b/repository/src/main/java/org/apache/atlas/repository/store/graph/v1/AtlasEntityGraphDiscoveryV1.java
index 436de497c..7141911f3 100644
--- a/repository/src/main/java/org/apache/atlas/repository/store/graph/v1/AtlasEntityGraphDiscoveryV1.java
+++ b/repository/src/main/java/org/apache/atlas/repository/store/graph/v1/AtlasEntityGraphDiscoveryV1.java
@@ -34,8 +34,13 @@ import org.apache.atlas.model.instance.AtlasStruct;
 import org.apache.atlas.repository.store.graph.EntityGraphDiscovery;
 import org.apache.atlas.repository.store.graph.EntityGraphDiscoveryContext;
 import org.apache.atlas.repository.store.graph.EntityResolver;
-import org.apache.atlas.type.*;
-import org.apache.atlas.type.AtlasBuiltInTypes.AtlasObjectIdType;
+import org.apache.atlas.type.AtlasArrayType;
+import org.apache.atlas.type.AtlasEntityType;
+import org.apache.atlas.type.AtlasMapType;
+import org.apache.atlas.type.AtlasStructType;
+import org.apache.atlas.type.AtlasType;
+import org.apache.atlas.type.AtlasTypeRegistry;
+import org.apache.atlas.type.AtlasTypeUtil;
 import org.apache.atlas.type.AtlasStructType.AtlasAttribute;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -59,8 +64,9 @@ public class AtlasEntityGraphDiscoveryV1 implements EntityGraphDiscovery {
 
     @Override
     public EntityGraphDiscoveryContext discoverEntities() throws AtlasBaseException {
+
         // walk through entities in stream and validate them; record entity references
-        discover();
+        discoverAndValidate();
 
         // resolve entity references discovered in previous step
         resolveReferences();
@@ -68,59 +74,13 @@ public class AtlasEntityGraphDiscoveryV1 implements EntityGraphDiscovery {
         return discoveryContext;
     }
 
-    @Override
-    public void validateAndNormalize(AtlasEntity entity) throws AtlasBaseException {
-        List<String> messages = new ArrayList<>();
-
-        if (!AtlasEntity.isAssigned(entity.getGuid()) && !AtlasEntity.isUnAssigned(entity.getGuid())) {
-            throw new AtlasBaseException(AtlasErrorCode.INVALID_OBJECT_ID, "invalid guid " + entity.getGuid());
-        }
-
-        AtlasEntityType type = typeRegistry.getEntityTypeByName(entity.getTypeName());
-
-        if (type == null) {
-            throw new AtlasBaseException(AtlasErrorCode.TYPE_NAME_INVALID, TypeCategory.ENTITY.name(), entity.getTypeName());
-        }
-
-        type.validateValue(entity, entity.getTypeName(), messages);
-
-        if (!messages.isEmpty()) {
-            throw new AtlasBaseException(AtlasErrorCode.INSTANCE_CRUD_INVALID_PARAMS, messages);
-        }
-
-        type.getNormalizedValue(entity);
-    }
-
-    @Override
-    public void validateAndNormalizeForUpdate(AtlasEntity entity) throws AtlasBaseException {
-        List<String> messages = new ArrayList<>();
-
-        if (!AtlasEntity.isAssigned(entity.getGuid()) && !AtlasEntity.isUnAssigned(entity.getGuid())) {
-            throw new AtlasBaseException(AtlasErrorCode.INVALID_OBJECT_ID, "invalid guid " + entity.getGuid());
-        }
-
-        AtlasEntityType type = typeRegistry.getEntityTypeByName(entity.getTypeName());
-
-        if (type == null) {
-            throw new AtlasBaseException(AtlasErrorCode.TYPE_NAME_INVALID, TypeCategory.ENTITY.name(), entity.getTypeName());
-        }
-
-        type.validateValueForUpdate(entity, entity.getTypeName(), messages);
-
-        if (!messages.isEmpty()) {
-            throw new AtlasBaseException(AtlasErrorCode.INSTANCE_CRUD_INVALID_PARAMS, messages);
-        }
-
-        type.getNormalizedValueForUpdate(entity);
-    }
-
     @Override
     public void cleanUp() throws AtlasBaseException {
         discoveryContext.cleanUp();
     }
 
 
-    protected void discover() throws AtlasBaseException {
+    protected void discoverAndValidate() throws AtlasBaseException {
         EntityStream entityStream = discoveryContext.getEntityStream();
 
         Set<String> walkedEntities = new HashSet<>();
@@ -129,13 +89,11 @@ public class AtlasEntityGraphDiscoveryV1 implements EntityGraphDiscovery {
         while (entityStream.hasNext()) {
             AtlasEntity entity = entityStream.next();
 
-            if (entity == null) {
-                throw new AtlasBaseException(AtlasErrorCode.INVALID_PARAMETERS, "found null entity");
-            }
-
-            walkEntityGraph(entity);
+            if (entity != null) {
+                walkEntityGraph(entity);
 
-            walkedEntities.add(entity.getGuid());
+                walkedEntities.add(entity.getGuid());
+            }
         }
 
         // walk through entities referenced by other entities
@@ -159,7 +117,7 @@ public class AtlasEntityGraphDiscoveryV1 implements EntityGraphDiscovery {
     }
 
     protected void resolveReferences() throws AtlasBaseException {
-        EntityResolver[] entityResolvers = new EntityResolver[] { new IDBasedEntityResolver(typeRegistry),
+        EntityResolver[] entityResolvers = new EntityResolver[] { new IDBasedEntityResolver(),
                                                                   new UniqAttrBasedEntityResolver(typeRegistry)
                                                                 };
 
@@ -168,7 +126,7 @@ public class AtlasEntityGraphDiscoveryV1 implements EntityGraphDiscovery {
         }
     }
 
-    private void visitReference(AtlasObjectIdType type, Object val) throws AtlasBaseException {
+    private void visitReference(AtlasEntityType type, Object val) throws AtlasBaseException {
         if (type == null || val == null) {
             return;
         }
@@ -189,6 +147,8 @@ public class AtlasEntityGraphDiscoveryV1 implements EntityGraphDiscovery {
             }
 
             recordObjectReference(objId);
+        } else if (val instanceof AtlasEntity) {
+            throw new AtlasBaseException(AtlasErrorCode.INVALID_OBJECT_ID, "found AtlasEntity");
         } else {
             throw new AtlasBaseException(AtlasErrorCode.INVALID_OBJECT_ID, val.toString());
         }
@@ -199,37 +159,23 @@ public class AtlasEntityGraphDiscoveryV1 implements EntityGraphDiscovery {
             return;
         }
 
-        switch (attrType.getTypeCategory()) {
-            case PRIMITIVE:
-            case ENUM:
-                return;
-
-            case ARRAY: {
-                AtlasArrayType arrayType = (AtlasArrayType) attrType;
-                AtlasType      elemType  = arrayType.getElementType();
-
-                visitCollectionReferences(elemType, val);
-            }
-            break;
-
-            case MAP: {
-                AtlasType keyType   = ((AtlasMapType) attrType).getKeyType();
-                AtlasType valueType = ((AtlasMapType) attrType).getValueType();
-
-                visitMapReferences(keyType, valueType, val);
-            }
-            break;
-
-            case STRUCT:
-                visitStruct((AtlasStructType)attrType, val);
-            break;
-
-            case OBJECT_ID_TYPE:
-                visitReference((AtlasObjectIdType) attrType,  val);
-            break;
-
-            default:
-                throw new AtlasBaseException(AtlasErrorCode.TYPE_CATEGORY_INVALID, attrType.getTypeCategory().name());
+        if (isPrimitive(attrType.getTypeCategory()) ) {
+            return;
+        }
+        if (attrType.getTypeCategory() == TypeCategory.ARRAY) {
+            AtlasArrayType arrayType = (AtlasArrayType) attrType;
+            AtlasType      elemType  = arrayType.getElementType();
+
+            visitCollectionReferences(elemType, val);
+        } else if (attrType.getTypeCategory() == TypeCategory.MAP) {
+            AtlasType keyType   = ((AtlasMapType) attrType).getKeyType();
+            AtlasType valueType = ((AtlasMapType) attrType).getValueType();
+
+            visitMapReferences(keyType, valueType, val);
+        } else if (attrType.getTypeCategory() == TypeCategory.STRUCT) {
+            visitStruct((AtlasStructType)attrType, val);
+        } else if (attrType.getTypeCategory() == TypeCategory.ENTITY) {
+            visitReference((AtlasEntityType) attrType,  val);
         }
     }
 
@@ -306,6 +252,7 @@ public class AtlasEntityGraphDiscoveryV1 implements EntityGraphDiscovery {
             return;
         }
 
+        validateAndNormalize(entity);
         AtlasEntityType type = typeRegistry.getEntityTypeByName(entity.getTypeName());
 
         recordObjectReference(entity.getGuid());
@@ -318,6 +265,28 @@ public class AtlasEntityGraphDiscoveryV1 implements EntityGraphDiscovery {
         return typeCategory == TypeCategory.PRIMITIVE || typeCategory == TypeCategory.ENUM;
     }
 
+    private void validateAndNormalize(AtlasEntity entity) throws AtlasBaseException {
+        List<String> messages = new ArrayList<>();
+
+        if (!AtlasEntity.isAssigned(entity.getGuid()) && !AtlasEntity.isUnAssigned(entity.getGuid())) {
+            throw new AtlasBaseException(AtlasErrorCode.INVALID_OBJECT_ID, "invalid guid " + entity.getGuid());
+        }
+
+        AtlasEntityType type = typeRegistry.getEntityTypeByName(entity.getTypeName());
+
+        if (type == null) {
+            throw new AtlasBaseException(AtlasErrorCode.TYPE_NAME_INVALID, TypeCategory.ENTITY.name(), entity.getTypeName());
+        }
+
+        type.validateValue(entity, entity.getTypeName(), messages);
+
+        if (!messages.isEmpty()) {
+            throw new AtlasBaseException(AtlasErrorCode.INSTANCE_CRUD_INVALID_PARAMS, messages);
+        }
+
+        type.getNormalizedValue(entity);
+    }
+
     private void recordObjectReference(String guid) {
         discoveryContext.addReferencedGuid(guid);
     }