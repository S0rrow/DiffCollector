diff --git a/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/QueueControlImpl.java b/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/QueueControlImpl.java
index 4b84909941..b9f096418f 100644
--- a/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/QueueControlImpl.java
+++ b/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/QueueControlImpl.java
@@ -16,13 +16,8 @@
  */
 package org.apache.activemq.artemis.core.management.impl;
 
-import javax.json.JsonArray;
-import javax.json.JsonArrayBuilder;
-import javax.json.JsonObjectBuilder;
-import javax.management.MBeanAttributeInfo;
 import javax.management.MBeanOperationInfo;
 import javax.management.openmbean.CompositeData;
-import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Date;
@@ -31,7 +26,6 @@ import java.util.List;
 import java.util.Map;
 
 import org.apache.activemq.artemis.api.core.ActiveMQException;
-import org.apache.activemq.artemis.api.core.JsonUtil;
 import org.apache.activemq.artemis.api.core.Message;
 import org.apache.activemq.artemis.api.core.SimpleString;
 import org.apache.activemq.artemis.api.core.management.MessageCounterInfo;
@@ -39,7 +33,6 @@ import org.apache.activemq.artemis.api.core.management.QueueControl;
 import org.apache.activemq.artemis.core.filter.Filter;
 import org.apache.activemq.artemis.core.filter.impl.FilterImpl;
 import org.apache.activemq.artemis.core.management.impl.openmbean.OpenTypeSupport;
-import org.apache.activemq.artemis.core.message.impl.MessageImpl;
 import org.apache.activemq.artemis.core.messagecounter.MessageCounter;
 import org.apache.activemq.artemis.core.messagecounter.impl.MessageCounterHelper;
 import org.apache.activemq.artemis.core.persistence.StorageManager;
@@ -59,8 +52,11 @@ import org.apache.activemq.artemis.core.settings.HierarchicalRepository;
 import org.apache.activemq.artemis.core.settings.impl.AddressSettings;
 import org.apache.activemq.artemis.spi.core.protocol.RemotingConnection;
 import org.apache.activemq.artemis.utils.Base64;
-import org.apache.activemq.artemis.utils.JsonLoader;
 import org.apache.activemq.artemis.utils.LinkedListIterator;
+import org.apache.activemq.artemis.utils.UUID;
+import org.apache.activemq.artemis.utils.json.JSONArray;
+import org.apache.activemq.artemis.utils.json.JSONException;
+import org.apache.activemq.artemis.utils.json.JSONObject;
 
 public class QueueControlImpl extends AbstractControl implements QueueControl {
 
@@ -84,28 +80,33 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
    // Static --------------------------------------------------------
 
    private static String toJSON(final Map<String, Object>[] messages) {
-      JsonArray array = toJSONMsgArray(messages);
+      JSONArray array = toJSONMsgArray(messages);
       return array.toString();
    }
 
-   private static JsonArray toJSONMsgArray(final Map<String, Object>[] messages) {
-      JsonArrayBuilder array = JsonLoader.createArrayBuilder();
+   private static JSONArray toJSONMsgArray(final Map<String, Object>[] messages) {
+      JSONArray array = new JSONArray();
       for (Map<String, Object> message : messages) {
-         array.add(JsonUtil.toJsonObject(message));
+         array.put(new JSONObject(message));
       }
-      return array.build();
+      return array;
    }
 
    private static String toJSON(final Map<String, Map<String, Object>[]> messages) {
-      JsonArrayBuilder arrayReturn = JsonLoader.createArrayBuilder();
-      for (Map.Entry<String, Map<String, Object>[]> entry : messages.entrySet()) {
-         JsonObjectBuilder objectItem = JsonLoader.createObjectBuilder();
-         objectItem.add("consumerName", entry.getKey());
-         objectItem.add("elements", toJSONMsgArray(entry.getValue()));
-         arrayReturn.add(objectItem);
-      }
+      try {
+         JSONArray arrayReturn = new JSONArray();
+         for (Map.Entry<String, Map<String, Object>[]> entry : messages.entrySet()) {
+            JSONObject objectItem = new JSONObject();
+            objectItem.put("consumerName", entry.getKey());
+            objectItem.put("elements", toJSONMsgArray(entry.getValue()));
+            arrayReturn.put(objectItem);
+         }
 
-      return arrayReturn.build().toString();
+         return arrayReturn.toString();
+      }
+      catch (JSONException e) {
+         return "Invalid conversion " + e.toString();
+      }
    }
 
    // Constructors --------------------------------------------------
@@ -138,7 +139,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       clearIO();
       try {
          return queue.getName().toString();
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -159,7 +161,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
          Filter filter = queue.getFilter();
 
          return filter != null ? filter.getFilterString().toString() : null;
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -171,7 +174,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       clearIO();
       try {
          return queue.isDurable();
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -183,7 +187,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       clearIO();
       try {
          return queue.isTemporary();
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -195,7 +200,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       clearIO();
       try {
          return queue.getMessageCount();
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -207,7 +213,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       clearIO();
       try {
          return queue.getConsumerCount();
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -219,7 +226,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       clearIO();
       try {
          return queue.getDeliveringCount();
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -231,7 +239,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       clearIO();
       try {
          return queue.getMessagesAdded();
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -243,31 +252,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       clearIO();
       try {
          return queue.getMessagesAcknowledged();
-      } finally {
-         blockOnIO();
       }
-   }
-
-   @Override
-   public long getMessagesExpired() {
-      checkStarted();
-
-      clearIO();
-      try {
-         return queue.getMessagesExpired();
-      } finally {
-         blockOnIO();
-      }
-   }
-
-   @Override
-   public long getMessagesKilled() {
-      checkStarted();
-
-      clearIO();
-      try {
-         return queue.getMessagesKilled();
-      } finally {
+      finally {
          blockOnIO();
       }
    }
@@ -279,7 +265,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       clearIO();
       try {
          return queue.getID();
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -291,7 +278,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       clearIO();
       try {
          return queue.getScheduledCount();
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -308,7 +296,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
             return addressSettings.getDeadLetterAddress().toString();
          }
          return null;
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -323,34 +312,12 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
          if (addressSettings != null && addressSettings.getExpiryAddress() != null) {
             return addressSettings.getExpiryAddress().toString();
-         } else {
+         }
+         else {
             return null;
          }
-      } finally {
-         blockOnIO();
-      }
-   }
-
-   @Override
-   public int getMaxConsumers() {
-      checkStarted();
-
-      clearIO();
-      try {
-         return queue.getMaxConsumers();
-      } finally {
-         blockOnIO();
       }
-   }
-
-   @Override
-   public boolean isPurgeOnNoConsumers() {
-      checkStarted();
-
-      clearIO();
-      try {
-         return queue.isPurgeOnNoConsumers();
-      } finally {
+      finally {
          blockOnIO();
       }
    }
@@ -363,7 +330,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       try {
          List<MessageReference> refs = queue.getScheduledMessages();
          return convertMessagesToMaps(refs);
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -375,7 +343,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       clearIO();
       try {
          return QueueControlImpl.toJSON(listScheduledMessages());
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -408,7 +377,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
             msgRet.put(entry.getKey(), convertMessagesToMaps(entry.getValue()));
          }
          return msgRet;
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
 
@@ -421,7 +391,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       clearIO();
       try {
          return QueueControlImpl.toJSON(listDeliveringMessages());
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -435,7 +406,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
          Filter filter = FilterImpl.createFilter(filterStr);
          List<Map<String, Object>> messages = new ArrayList<>();
          queue.flushExecutor();
-         try (LinkedListIterator<MessageReference> iterator = queue.browserIterator()) {
+         LinkedListIterator<MessageReference> iterator = queue.totalIterator();
+         try {
             while (iterator.hasNext()) {
                MessageReference ref = iterator.next();
                if (filter == null || filter.match(ref.getMessage())) {
@@ -445,9 +417,14 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
             }
             return messages.toArray(new Map[messages.size()]);
          }
-      } catch (ActiveMQException e) {
+         finally {
+            iterator.close();
+         }
+      }
+      catch (ActiveMQException e) {
          throw new IllegalStateException(e.getMessage());
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -459,7 +436,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       clearIO();
       try {
          return QueueControlImpl.toJSON(listMessages(filter));
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -471,7 +449,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       try {
          List<Map<String, Object>> messages = new ArrayList<>();
          queue.flushExecutor();
-         try (LinkedListIterator<MessageReference> iterator = queue.browserIterator()) {
+         LinkedListIterator<MessageReference> iterator = queue.totalIterator();
+         try {
             // returns just the first, as it's the first only
             if (iterator.hasNext()) {
                MessageReference ref = iterator.next();
@@ -480,7 +459,11 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
             }
             return messages.toArray(new Map[1]);
          }
-      } finally {
+         finally {
+            iterator.close();
+         }
+      }
+      finally {
          blockOnIO();
       }
 
@@ -488,7 +471,7 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
    @Override
    public String getFirstMessageAsJSON() throws Exception {
-      return toJSON(getFirstMessage());
+      return toJSON(getFirstMessage()).toString();
    }
 
    @Override
@@ -523,8 +506,10 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
          Filter filter = FilterImpl.createFilter(filterStr);
          if (filter == null) {
             return getMessageCount();
-         } else {
-            try (LinkedListIterator<MessageReference> iterator = queue.browserIterator()) {
+         }
+         else {
+            LinkedListIterator<MessageReference> iterator = queue.totalIterator();
+            try {
                int count = 0;
                while (iterator.hasNext()) {
                   MessageReference ref = iterator.next();
@@ -534,8 +519,12 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
                }
                return count;
             }
+            finally {
+               iterator.close();
+            }
          }
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -547,9 +536,11 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       clearIO();
       try {
          return queue.deleteReference(messageID);
-      } catch (ActiveMQException e) {
+      }
+      catch (ActiveMQException e) {
          throw new IllegalStateException(e.getMessage());
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -568,7 +559,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
          Filter filter = FilterImpl.createFilter(filterStr);
 
          return queue.deleteMatchingReferences(flushLimit, filter);
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -580,7 +572,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       clearIO();
       try {
          return queue.expireReference(messageID);
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -593,9 +586,11 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       try {
          Filter filter = FilterImpl.createFilter(filterStr);
          return queue.expireReferences(filter);
-      } catch (ActiveMQException e) {
+      }
+      catch (ActiveMQException e) {
          throw new IllegalStateException(e.getMessage());
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -620,7 +615,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
          };
 
          return queue.retryMessages(singleMessageFilter) > 0;
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -632,7 +628,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
 
       try {
          return queue.retryMessages(null);
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -657,7 +654,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
          }
 
          return queue.moveReference(messageID, binding.getAddress(), rejectDuplicates);
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
 
@@ -688,7 +686,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
          int retValue = queue.moveReferences(flushLimit, filter, binding.getAddress(), rejectDuplicates);
 
          return retValue;
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
 
@@ -710,7 +709,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
          Filter filter = FilterImpl.createFilter(filterStr);
 
          return queue.sendMessagesToDeadLetterAddress(filter);
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -719,8 +719,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
    public String sendMessage(final Map<String, String> headers,
                              final int type,
                              final String body,
-                             boolean durable,
-                             final String user,
+                             final String userID,
+                             boolean durable, final String user,
                              final String password) throws Exception {
       securityStore.check(queue.getAddress(), CheckType.SEND, new SecurityAuth() {
          @Override
@@ -745,19 +745,13 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       message.setType((byte) type);
       message.setDurable(durable);
       message.setTimestamp(System.currentTimeMillis());
+      message.setUserID(new UUID(UUID.TYPE_TIME_BASED, UUID.stringToBytes(userID)));
       if (body != null) {
-         if (type == Message.TEXT_TYPE) {
-            message.getBodyBuffer().writeNullableSimpleString(new SimpleString(body));
-         } else {
-            message.getBodyBuffer().writeBytes(Base64.decode(body));
-         }
+         message.getBodyBuffer().writeBytes(Base64.decode(body));
       }
       message.setAddress(queue.getAddress());
-      ByteBuffer buffer = ByteBuffer.allocate(8);
-      buffer.putLong(queue.getID());
-      message.putBytesProperty(MessageImpl.HDR_ROUTE_TO_IDS, buffer.array());
-      postOffice.route(message, true);
-      return "" + message.getMessageID();
+      postOffice.route(message, null, true);
+      return ""  + message.getMessageID();
    }
 
    @Override
@@ -767,7 +761,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       clearIO();
       try {
          return queue.sendMessageToDeadLetterAddress(messageID);
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -784,7 +779,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
          Filter filter = FilterImpl.createFilter(filterStr);
 
          return queue.changeReferencesPriority(filter, (byte) newPriority);
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -799,7 +795,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
             throw ActiveMQMessageBundle.BUNDLE.invalidNewPriority(newPriority);
          }
          return queue.changeReferencePriority(messageID, (byte) newPriority);
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -811,9 +808,11 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       clearIO();
       try {
          return MessageCounterInfo.toJSon(counter);
-      } catch (Exception e) {
+      }
+      catch (Exception e) {
          throw new IllegalStateException(e);
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -825,7 +824,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       clearIO();
       try {
          counter.resetCounter();
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -837,7 +837,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       clearIO();
       try {
          return MessageCounterHelper.listMessageCounterAsHTML(new MessageCounter[]{counter});
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -849,7 +850,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       clearIO();
       try {
          return MessageCounterHelper.listMessageCounterHistory(counter);
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -861,7 +863,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       clearIO();
       try {
          return MessageCounterHelper.listMessageCounterHistoryAsHTML(new MessageCounter[]{counter});
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -873,23 +876,12 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       clearIO();
       try {
          queue.pause();
-      } finally {
-         blockOnIO();
       }
-   }
-
-
-   @Override
-   public void pause(boolean persist) {
-      checkStarted();
-
-      clearIO();
-      try {
-         queue.pause(persist);
-      } finally {
+      finally {
          blockOnIO();
       }
    }
+
    @Override
    public void resume() {
       checkStarted();
@@ -897,7 +889,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       clearIO();
       try {
          queue.resume();
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -909,17 +902,14 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       clearIO();
       try {
          return queue.isPaused();
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
 
    @Override
-   public CompositeData[] browse() throws Exception {
-      return browse(null);
-   }
-   @Override
-   public CompositeData[] browse(String filter) throws Exception {
+   public CompositeData[] browse(String filterStr) throws Exception {
       checkStarted();
 
       clearIO();
@@ -927,12 +917,13 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
          int pageSize = addressSettingsRepository.getMatch(queue.getName().toString()).getManagementBrowsePageSize();
          int currentPageSize = 0;
          ArrayList<CompositeData> c = new ArrayList<>();
-         Filter thefilter = FilterImpl.createFilter(filter);
+         Filter filter = FilterImpl.createFilter(filterStr);
          queue.flushExecutor();
-         try (LinkedListIterator<MessageReference> iterator = queue.browserIterator()) {
+         LinkedListIterator<MessageReference> iterator = queue.totalIterator();
+         try {
             while (iterator.hasNext() && currentPageSize++ < pageSize) {
                MessageReference ref = iterator.next();
-               if (thefilter == null || thefilter.match(ref.getMessage())) {
+               if (filter == null || filter.match(ref.getMessage())) {
                   c.add(OpenTypeSupport.convert(ref));
 
                }
@@ -941,9 +932,14 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
             c.toArray(rc);
             return rc;
          }
-      } catch (ActiveMQException e) {
+         finally {
+            iterator.close();
+         }
+      }
+      catch (ActiveMQException e) {
          throw new IllegalStateException(e.getMessage());
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -955,7 +951,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       clearIO();
       try {
          queue.flushExecutor();
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -968,22 +965,28 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       try {
          Collection<Consumer> consumers = queue.getConsumers();
 
-         JsonArrayBuilder jsonArray = JsonLoader.createArrayBuilder();
+         JSONArray jsonArray = new JSONArray();
 
          for (Consumer consumer : consumers) {
 
             if (consumer instanceof ServerConsumer) {
                ServerConsumer serverConsumer = (ServerConsumer) consumer;
 
-               JsonObjectBuilder obj = JsonLoader.createObjectBuilder().add("consumerID", serverConsumer.getID()).add("connectionID", serverConsumer.getConnectionID().toString()).add("sessionID", serverConsumer.getSessionID()).add("browseOnly", serverConsumer.isBrowseOnly()).add("creationTime", serverConsumer.getCreationTime());
+               JSONObject obj = new JSONObject();
+               obj.put("consumerID", serverConsumer.getID());
+               obj.put("connectionID", serverConsumer.getConnectionID().toString());
+               obj.put("sessionID", serverConsumer.getSessionID());
+               obj.put("browseOnly", serverConsumer.isBrowseOnly());
+               obj.put("creationTime", serverConsumer.getCreationTime());
 
-               jsonArray.add(obj);
+               jsonArray.put(obj);
             }
 
          }
 
-         return jsonArray.build().toString();
-      } finally {
+         return jsonArray.toString();
+      }
+      finally {
          blockOnIO();
       }
    }
@@ -993,11 +996,6 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       return MBeanInfoHelper.getMBeanOperationsInfo(QueueControl.class);
    }
 
-   @Override
-   protected MBeanAttributeInfo[] fillMBeanAttributeInfo() {
-      return MBeanInfoHelper.getMBeanAttributesInfo(QueueControl.class);
-   }
-
    @Override
    public void resetMessagesAdded() throws Exception {
       checkStarted();
@@ -1005,7 +1003,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       clearIO();
       try {
          queue.resetMessagesAdded();
-      } finally {
+      }
+      finally {
          blockOnIO();
       }
 
@@ -1018,33 +1017,8 @@ public class QueueControlImpl extends AbstractControl implements QueueControl {
       clearIO();
       try {
          queue.resetMessagesAcknowledged();
-      } finally {
-         blockOnIO();
-      }
-
-   }
-
-   @Override
-   public void resetMessagesExpired() throws Exception {
-      checkStarted();
-
-      clearIO();
-      try {
-         queue.resetMessagesExpired();
-      } finally {
-         blockOnIO();
       }
-
-   }
-
-   @Override
-   public void resetMessagesKilled() throws Exception {
-      checkStarted();
-
-      clearIO();
-      try {
-         queue.resetMessagesKilled();
-      } finally {
+      finally {
          blockOnIO();
       }
 