diff --git a/airavata-api/airavata-api-server/src/main/java/org/apache/airavata/api/server/handler/AiravataServerHandler.java b/airavata-api/airavata-api-server/src/main/java/org/apache/airavata/api/server/handler/AiravataServerHandler.java
index 1e4db9a84..98211c050 100644
--- a/airavata-api/airavata-api-server/src/main/java/org/apache/airavata/api/server/handler/AiravataServerHandler.java
+++ b/airavata-api/airavata-api-server/src/main/java/org/apache/airavata/api/server/handler/AiravataServerHandler.java
@@ -1,4 +1,4 @@
-/**
+/*
  *
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
@@ -16,16 +16,14 @@
  * KIND, either express or implied.  See the License for the
  * specific language governing permissions and limitations
  * under the License.
+ *
  */
+
 package org.apache.airavata.api.server.handler;
 
-import org.apache.airavata.accountprovisioning.ConfigParam;
-import org.apache.airavata.accountprovisioning.SSHAccountManager;
-import org.apache.airavata.accountprovisioning.SSHAccountProvisionerFactory;
-import org.apache.airavata.accountprovisioning.SSHAccountProvisionerProvider;
 import org.apache.airavata.api.Airavata;
 import org.apache.airavata.api.airavata_apiConstants;
-import org.apache.airavata.api.server.util.ThriftClientPool;
+import org.apache.airavata.api.server.security.interceptor.SecurityCheck;
 import org.apache.airavata.common.exception.AiravataException;
 import org.apache.airavata.common.exception.ApplicationSettingsException;
 import org.apache.airavata.common.utils.AiravataUtils;
@@ -33,58 +31,35 @@ import org.apache.airavata.common.utils.Constants;
 import org.apache.airavata.common.utils.ServerSettings;
 import org.apache.airavata.credential.store.client.CredentialStoreClientFactory;
 import org.apache.airavata.credential.store.cpi.CredentialStoreService;
+import org.apache.airavata.credential.store.datamodel.PasswordCredential;
+import org.apache.airavata.credential.store.datamodel.SSHCredential;
 import org.apache.airavata.credential.store.exception.CredentialStoreException;
 import org.apache.airavata.messaging.core.MessageContext;
 import org.apache.airavata.messaging.core.MessagingFactory;
 import org.apache.airavata.messaging.core.Publisher;
 import org.apache.airavata.messaging.core.Type;
 import org.apache.airavata.model.WorkflowModel;
-import org.apache.airavata.model.appcatalog.accountprovisioning.SSHAccountProvisioner;
-import org.apache.airavata.model.appcatalog.accountprovisioning.SSHAccountProvisionerConfigParam;
-import org.apache.airavata.model.appcatalog.accountprovisioning.SSHAccountProvisionerConfigParamType;
 import org.apache.airavata.model.appcatalog.appdeployment.ApplicationDeploymentDescription;
 import org.apache.airavata.model.appcatalog.appdeployment.ApplicationModule;
 import org.apache.airavata.model.appcatalog.appinterface.ApplicationInterfaceDescription;
 import org.apache.airavata.model.appcatalog.computeresource.*;
-import org.apache.airavata.model.appcatalog.gatewayprofile.ComputeResourcePreference;
 import org.apache.airavata.model.appcatalog.gatewayprofile.GatewayResourceProfile;
+import org.apache.airavata.model.appcatalog.gatewayprofile.ComputeResourcePreference;
 import org.apache.airavata.model.appcatalog.gatewayprofile.StoragePreference;
-import org.apache.airavata.model.appcatalog.groupresourceprofile.BatchQueueResourcePolicy;
-import org.apache.airavata.model.appcatalog.groupresourceprofile.ComputeResourcePolicy;
-import org.apache.airavata.model.appcatalog.groupresourceprofile.GroupComputeResourcePreference;
-import org.apache.airavata.model.appcatalog.groupresourceprofile.GroupResourceProfile;
 import org.apache.airavata.model.appcatalog.storageresource.StorageResourceDescription;
-import org.apache.airavata.model.appcatalog.userresourceprofile.UserComputeResourcePreference;
 import org.apache.airavata.model.appcatalog.userresourceprofile.UserResourceProfile;
+import org.apache.airavata.model.appcatalog.userresourceprofile.UserComputeResourcePreference;
 import org.apache.airavata.model.appcatalog.userresourceprofile.UserStoragePreference;
 import org.apache.airavata.model.application.io.InputDataObjectType;
 import org.apache.airavata.model.application.io.OutputDataObjectType;
 import org.apache.airavata.model.commons.airavata_commonsConstants;
-import org.apache.airavata.model.credential.store.CredentialOwnerType;
-import org.apache.airavata.model.credential.store.CredentialSummary;
-import org.apache.airavata.model.credential.store.PasswordCredential;
-import org.apache.airavata.model.credential.store.SSHCredential;
-import org.apache.airavata.model.credential.store.SummaryType;
 import org.apache.airavata.model.data.movement.DMType;
-import org.apache.airavata.model.data.movement.GridFTPDataMovement;
-import org.apache.airavata.model.data.movement.LOCALDataMovement;
-import org.apache.airavata.model.data.movement.SCPDataMovement;
-import org.apache.airavata.model.data.movement.UnicoreDataMovement;
+import org.apache.airavata.model.data.movement.*;
 import org.apache.airavata.model.data.replica.DataProductModel;
 import org.apache.airavata.model.data.replica.DataReplicaLocationModel;
-import org.apache.airavata.model.error.AiravataClientException;
-import org.apache.airavata.model.error.AiravataErrorType;
-import org.apache.airavata.model.error.AiravataSystemException;
-import org.apache.airavata.model.error.AuthorizationException;
-import org.apache.airavata.model.error.ExperimentNotFoundException;
-import org.apache.airavata.model.error.InvalidRequestException;
-import org.apache.airavata.model.error.ProjectNotFoundException;
-import org.apache.airavata.model.experiment.ExperimentModel;
-import org.apache.airavata.model.experiment.ExperimentSearchFields;
-import org.apache.airavata.model.experiment.ExperimentStatistics;
-import org.apache.airavata.model.experiment.ExperimentSummaryModel;
-import org.apache.airavata.model.experiment.ProjectSearchFields;
-import org.apache.airavata.model.experiment.UserConfigurationDataModel;
+import org.apache.airavata.model.error.*;
+import org.apache.airavata.model.experiment.*;
+import org.apache.airavata.model.group.GroupModel;
 import org.apache.airavata.model.group.ResourcePermissionType;
 import org.apache.airavata.model.group.ResourceType;
 import org.apache.airavata.model.job.JobModel;
@@ -96,74 +71,34 @@ import org.apache.airavata.model.security.AuthzToken;
 import org.apache.airavata.model.status.ExperimentState;
 import org.apache.airavata.model.status.ExperimentStatus;
 import org.apache.airavata.model.status.JobStatus;
-import org.apache.airavata.model.status.QueueStatusModel;
 import org.apache.airavata.model.workspace.Gateway;
 import org.apache.airavata.model.workspace.Notification;
 import org.apache.airavata.model.workspace.Project;
 import org.apache.airavata.registry.api.RegistryService;
 import org.apache.airavata.registry.api.client.RegistryServiceClientFactory;
 import org.apache.airavata.registry.api.exception.RegistryServiceException;
-import org.apache.airavata.service.security.interceptor.SecurityCheck;
-import org.apache.airavata.sharing.registry.client.SharingRegistryServiceClientFactory;
-import org.apache.airavata.sharing.registry.models.Domain;
 import org.apache.airavata.sharing.registry.models.Entity;
-import org.apache.airavata.sharing.registry.models.EntitySearchField;
-import org.apache.airavata.sharing.registry.models.EntityType;
-import org.apache.airavata.sharing.registry.models.PermissionType;
-import org.apache.airavata.sharing.registry.models.SearchCondition;
-import org.apache.airavata.sharing.registry.models.SearchCriteria;
-import org.apache.airavata.sharing.registry.models.SharingRegistryException;
-import org.apache.airavata.sharing.registry.models.User;
-import org.apache.airavata.sharing.registry.service.cpi.SharingRegistryService;
-import org.apache.commons.pool.impl.GenericObjectPool;
+import org.apache.airavata.sharing.registry.server.SharingRegistryServerHandler;
 import org.apache.thrift.TException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.UUID;
-import java.util.stream.Collectors;
+import java.util.*;
 
 public class AiravataServerHandler implements Airavata.Iface {
     private static final Logger logger = LoggerFactory.getLogger(AiravataServerHandler.class);
     private Publisher statusPublisher;
     private Publisher experimentPublisher;
+    private CredentialStoreService.Client csClient;
 
-    private ThriftClientPool<SharingRegistryService.Client> sharingClientPool;
-    private ThriftClientPool<RegistryService.Client> registryClientPool;
-    private ThriftClientPool<CredentialStoreService.Client> csClientPool;
+    private SharingRegistryServerHandler sharingRegistryServerHandler;
 
     public AiravataServerHandler() {
         try {
             statusPublisher = MessagingFactory.getPublisher(Type.STATUS);
             experimentPublisher = MessagingFactory.getPublisher(Type.EXPERIMENT_LAUNCH);
 
-            GenericObjectPool.Config poolConfig = new GenericObjectPool.Config();
-            poolConfig.maxActive = 100;
-            poolConfig.minIdle = 5;
-            poolConfig.whenExhaustedAction = GenericObjectPool.WHEN_EXHAUSTED_BLOCK;
-            poolConfig.testOnBorrow = true;
-            poolConfig.testWhileIdle = true;
-            poolConfig.numTestsPerEvictionRun = 10;
-            poolConfig.maxWait = 3000;
-
-            sharingClientPool = new ThriftClientPool<>(
-                    tProtocol -> new SharingRegistryService.Client(tProtocol), poolConfig, ServerSettings.getSharingRegistryHost(),
-                    Integer.parseInt(ServerSettings.getSharingRegistryPort()));
-            registryClientPool = new ThriftClientPool<>(
-                    tProtocol -> new RegistryService.Client(tProtocol), poolConfig, ServerSettings.getRegistryServerHost(),
-                    Integer.parseInt(ServerSettings.getRegistryServerPort()));
-            csClientPool = new ThriftClientPool<>(
-                    tProtocol -> new CredentialStoreService.Client(tProtocol), poolConfig, ServerSettings.getCredentialStoreServerHost(),
-                    Integer.parseInt(ServerSettings.getCredentialStoreServerPort()));
-
-            initSharingRegistry();
-            postInitDefaultGateway();
+            sharingRegistryServerHandler = new SharingRegistryServerHandler();
         } catch (ApplicationSettingsException e) {
             logger.error("Error occured while reading airavata-server properties..", e);
         } catch (AiravataException e) {
@@ -173,134 +108,6 @@ public class AiravataServerHandler implements Airavata.Iface {
         }
     }
 
-    /**
-     * This method creates a password token for the default gateway profile. Default gateway is originally initialized
-     * at the registry server but we can not add the password token at that step as the credential store is not initialized
-     * before registry server.
-     */
-    private void postInitDefaultGateway() {
-
-        RegistryService.Client registryClient = registryClientPool.getResource();
-        try {
-
-            GatewayResourceProfile gatewayResourceProfile = registryClient.getGatewayResourceProfile(ServerSettings.getDefaultUserGateway());
-            if (gatewayResourceProfile != null && gatewayResourceProfile.getCredentialStoreToken() == null) {
-
-                logger.debug("Starting to add the password credential for default gateway : " +
-                        ServerSettings.getDefaultUserGateway());
-
-                PasswordCredential passwordCredential = new PasswordCredential();
-                passwordCredential.setPortalUserName(ServerSettings.getDefaultUser());
-                passwordCredential.setGatewayId(ServerSettings.getDefaultUserGateway());
-                passwordCredential.setLoginUserName(ServerSettings.getDefaultUser());
-                passwordCredential.setPassword(ServerSettings.getDefaultUserPassword());
-                passwordCredential.setDescription("Credentials for default gateway");
-
-                CredentialStoreService.Client csClient = csClientPool.getResource();
-                String token = null;
-                try {
-                    logger.info("Creating password credential for default gateway");
-                    token = csClient.addPasswordCredential(passwordCredential);
-                    csClientPool.returnResource(csClient);
-                } catch (Exception ex) {
-                    logger.error("Failed to create the password credential for the default gateway : " +
-                            ServerSettings.getDefaultUserGateway(), ex);
-                    if (csClient != null) {
-                        csClientPool.returnBrokenResource(csClient);
-                    }
-                }
-
-                if (token != null) {
-                    logger.debug("Adding password credential token " + token +" to the default gateway : " + ServerSettings.getDefaultUserGateway());
-                    gatewayResourceProfile.setIdentityServerPwdCredToken(token);
-                    registryClient.updateGatewayResourceProfile(ServerSettings.getDefaultUserGateway(), gatewayResourceProfile);
-                }
-
-                registryClientPool.returnResource(registryClient);
-            }
-        } catch (Exception e) {
-            logger.error("Failed to add the password credentials for the default gateway", e);
-
-            if (registryClient != null) {
-                registryClientPool.returnBrokenResource(registryClient);
-            }
-        }
-    }
-
-    private void initSharingRegistry() throws ApplicationSettingsException, TException {
-        SharingRegistryService.Client client = sharingClientPool.getResource();
-        try {
-            if (!client.isDomainExists(ServerSettings.getDefaultUserGateway())) {
-                Domain domain = new Domain();
-                domain.setDomainId(ServerSettings.getDefaultUserGateway());
-                domain.setName(ServerSettings.getDefaultUserGateway());
-                domain.setDescription("Domain entry for " + domain.name);
-                client.createDomain(domain);
-
-                User user = new User();
-                user.setDomainId(domain.domainId);
-                user.setUserId(ServerSettings.getDefaultUser() + "@" + ServerSettings.getDefaultUserGateway());
-                user.setUserName(ServerSettings.getDefaultUser());
-                client.createUser(user);
-
-                //Creating Entity Types for each domain
-                EntityType entityType = new EntityType();
-                entityType.setEntityTypeId(domain.domainId + ":PROJECT");
-                entityType.setDomainId(domain.domainId);
-                entityType.setName("PROJECT");
-                entityType.setDescription("Project entity type");
-                client.createEntityType(entityType);
-
-                entityType = new EntityType();
-                entityType.setEntityTypeId(domain.domainId + ":EXPERIMENT");
-                entityType.setDomainId(domain.domainId);
-                entityType.setName("EXPERIMENT");
-                entityType.setDescription("Experiment entity type");
-                client.createEntityType(entityType);
-
-                entityType = new EntityType();
-                entityType.setEntityTypeId(domain.domainId + ":FILE");
-                entityType.setDomainId(domain.domainId);
-                entityType.setName("FILE");
-                entityType.setDescription("File entity type");
-                client.createEntityType(entityType);
-
-                entityType = new EntityType();
-                entityType.setEntityTypeId(domain.domainId+":"+ResourceType.APPLICATION_DEPLOYMENT.name());
-                entityType.setDomainId(domain.domainId);
-                entityType.setName("APPLICATION-DEPLOYMENT");
-                entityType.setDescription("Application Deployment entity type");
-                client.createEntityType(entityType);
-
-                entityType = new EntityType();
-                entityType.setEntityTypeId(domain.domainId+":"+ResourceType.GROUP_RESOURCE_PROFILE.name());
-                entityType.setDomainId(domain.domainId);
-                entityType.setName(ResourceType.GROUP_RESOURCE_PROFILE.name());
-                entityType.setDescription("Group Resource Profile entity type");
-                client.createEntityType(entityType);
-
-                //Creating Permission Types for each domain
-                PermissionType permissionType = new PermissionType();
-                permissionType.setPermissionTypeId(domain.domainId + ":READ");
-                permissionType.setDomainId(domain.domainId);
-                permissionType.setName("READ");
-                permissionType.setDescription("Read permission type");
-                client.createPermissionType(permissionType);
-
-                permissionType = new PermissionType();
-                permissionType.setPermissionTypeId(domain.domainId + ":WRITE");
-                permissionType.setDomainId(domain.domainId);
-                permissionType.setName("WRITE");
-                permissionType.setDescription("Write permission type");
-                client.createPermissionType(permissionType);
-            }
-            sharingClientPool.returnResource(client);
-        } catch (Exception ex) {
-            sharingClientPool.returnBrokenResource(client);
-            throw ex;
-        }
-    }
-
     /**
      * Query Airavata to fetch the API version
      */
@@ -323,17 +130,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @Override
     public boolean isUserExists(AuthzToken authzToken, String gatewayId, String userName) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client client = registryClientPool.getResource();
         try {
-            boolean isExists = client.isUserExists(gatewayId, userName);
-            registryClientPool.returnResource(client);
-            return isExists;
-        } catch (Exception e) {
+            return getRegistryServiceClient().isUserExists(userName, gatewayId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error("Error while verifying user", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while verifying user. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(client);
             throw exception;
         }
     }
@@ -342,78 +145,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public String addGateway(AuthzToken authzToken, Gateway gateway) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
-        RegistryService.Client registryClient = registryClientPool.getResource();
-        try {
-            String gatewayId = registryClient.addGateway(gateway);
-            Domain domain = new Domain();
-            domain.setDomainId(gateway.getGatewayId());
-            domain.setName(gateway.getGatewayName());
-            domain.setDescription("Domain entry for " + domain.name);
-            sharingClient.createDomain(domain);
-
-            //Creating Entity Types for each domain
-            EntityType entityType = new EntityType();
-            entityType.setEntityTypeId(domain.domainId+":PROJECT");
-            entityType.setDomainId(domain.domainId);
-            entityType.setName("PROJECT");
-            entityType.setDescription("Project entity type");
-            sharingClient.createEntityType(entityType);
-
-            entityType = new EntityType();
-            entityType.setEntityTypeId(domain.domainId+":EXPERIMENT");
-            entityType.setDomainId(domain.domainId);
-            entityType.setName("EXPERIMENT");
-            entityType.setDescription("Experiment entity type");
-            sharingClient.createEntityType(entityType);
-
-            entityType = new EntityType();
-            entityType.setEntityTypeId(domain.domainId+":FILE");
-            entityType.setDomainId(domain.domainId);
-            entityType.setName("FILE");
-            entityType.setDescription("File entity type");
-            sharingClient.createEntityType(entityType);
-
-            entityType = new EntityType();
-            entityType.setEntityTypeId(domain.domainId+":"+ResourceType.APPLICATION_DEPLOYMENT.name());
-            entityType.setDomainId(domain.domainId);
-            entityType.setName("APPLICATION-DEPLOYMENT");
-            entityType.setDescription("Application Deployment entity type");
-            sharingClient.createEntityType(entityType);
-
-            entityType = new EntityType();
-            entityType.setEntityTypeId(domain.domainId+":"+ResourceType.GROUP_RESOURCE_PROFILE.name());
-            entityType.setDomainId(domain.domainId);
-            entityType.setName(ResourceType.GROUP_RESOURCE_PROFILE.name());
-            entityType.setDescription("Group Resource Profile entity type");
-            sharingClient.createEntityType(entityType);
-
-            //Creating Permission Types for each domain
-            PermissionType permissionType = new PermissionType();
-            permissionType.setPermissionTypeId(domain.domainId+":READ");
-            permissionType.setDomainId(domain.domainId);
-            permissionType.setName("READ");
-            permissionType.setDescription("Read permission type");
-            sharingClient.createPermissionType(permissionType);
-
-            permissionType = new PermissionType();
-            permissionType.setPermissionTypeId(domain.domainId+":WRITE");
-            permissionType.setDomainId(domain.domainId);
-            permissionType.setName("WRITE");
-            permissionType.setDescription("Write permission type");
-            sharingClient.createPermissionType(permissionType);
-
-            registryClientPool.returnResource(registryClient);
-            sharingClientPool.returnResource(sharingClient);
-
-            return gatewayId;
-        } catch (Exception e) {
+        try {
+            return getRegistryServiceClient().addGateway(gateway);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error("Error while adding gateway", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while adding gateway. More info : " + e.getMessage());
-            sharingClientPool.returnBrokenResource(sharingClient);
-            registryClientPool.returnBrokenResource(registryClient);
             throw exception;
         }
     }
@@ -429,17 +167,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @Override
     public List<String> getAllUsersInGateway(AuthzToken authzToken, String gatewayId) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            List<String> result = regClient.getAllUsersInGateway(gatewayId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getAllUsersInGateway(gatewayId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error("Error while retrieving users", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while retrieving users. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -449,17 +183,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     public boolean updateGateway(AuthzToken authzToken, String gatewayId, Gateway updatedGateway)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
 
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.updateGateway(gatewayId, updatedGateway);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().updateGateway(gatewayId, updatedGateway);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error("Error while updating the gateway", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while updating the gateway. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -469,17 +199,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     public Gateway getGateway(AuthzToken authzToken, String gatewayId) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
 
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            Gateway result = regClient.getGateway(gatewayId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getGateway(gatewayId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error("Error while getting the gateway", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while getting the gateway. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -488,17 +214,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public boolean deleteGateway(AuthzToken authzToken, String gatewayId) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.deleteGateway(gatewayId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().deleteGateway(gatewayId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error("Error while deleting the gateway", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while deleting the gateway. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -507,17 +229,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public List<Gateway> getAllGateways(AuthzToken authzToken) throws InvalidRequestException, AiravataClientException,
             AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            List<Gateway> result = regClient.getAllGateways();
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getAllGateways();
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error("Error while getting all the gateways", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while getting all the gateways. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -526,17 +244,14 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public boolean isGatewayExist(AuthzToken authzToken, String gatewayId) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
+
         try {
-            boolean result = regClient.isGatewayExist(gatewayId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().isGatewayExist(gatewayId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error("Error while getting gateway", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while getting gateway. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -552,17 +267,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public String createNotification(AuthzToken authzToken, Notification notification) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            String result = regClient.createNotification(notification);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().createNotification(notification);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error("Error while creating notification", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while creating notification. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -571,17 +282,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public boolean updateNotification(AuthzToken authzToken, Notification notification) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.updateNotification(notification);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().updateNotification(notification);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error("Error while updating notification", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while getting gateway. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -590,81 +297,65 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public boolean deleteNotification(AuthzToken authzToken, String gatewayId, String notificationId) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.deleteNotification(gatewayId, notificationId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().deleteNotification(gatewayId, notificationId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error("Error while deleting notification", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while deleting notification. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
 
-    // No security check
     @Override
+    @SecurityCheck
     public Notification getNotification(AuthzToken authzToken, String gatewayId, String notificationId) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            Notification result = regClient.getNotification(gatewayId, notificationId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getNotification(gatewayId, notificationId);
+        } catch (RegistryServiceException | ApplicationSettingsException e) {
             logger.error("Error while retrieving notification", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while retreiving notification. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
 
-    // No security check
     @Override
+    @SecurityCheck
     public List<Notification> getAllNotifications(AuthzToken authzToken, String gatewayId) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            List<Notification> result = regClient.getAllNotifications(gatewayId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getAllNotifications(gatewayId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error("Error while getting all notifications", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while getting all notifications. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
 
     @Override
     @SecurityCheck
-    public String generateAndRegisterSSHKeys(AuthzToken authzToken, String gatewayId, String userName, String description, CredentialOwnerType credentialOwnerType) throws InvalidRequestException, AiravataClientException, AiravataSystemException, TException {
-        CredentialStoreService.Client csClient = csClientPool.getResource();
+    public String generateAndRegisterSSHKeys(AuthzToken authzToken, String gatewayId, String userName) throws InvalidRequestException, AiravataClientException, AiravataSystemException, TException {
         try {
+            if (csClient == null){
+                csClient = getCredentialStoreServiceClient();
+            }
             SSHCredential sshCredential = new SSHCredential();
             sshCredential.setUsername(userName);
             sshCredential.setGatewayId(gatewayId);
-            sshCredential.setDescription(description);
-            if (credentialOwnerType != null) {
-                sshCredential.setCredentialOwnerType(credentialOwnerType);
-            }
             String key = csClient.addSSHCredential(sshCredential);
             logger.debug("Airavata generated SSH keys for gateway : " + gatewayId + " and for user : " + userName);
-            csClientPool.returnResource(csClient);
             return key;
         }catch (Exception e){
             logger.error("Error occurred while registering SSH Credential", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error occurred while registering SSH Credential. More info : " + e.getMessage());
-            csClientPool.returnBrokenResource(csClient);
             throw exception;
         }
     }
@@ -685,8 +376,10 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public String registerPwdCredential(AuthzToken authzToken, String gatewayId, String portalUserName,
                                         String loginUserName, String password, String description) throws InvalidRequestException, AiravataClientException, AiravataSystemException, TException {
-        CredentialStoreService.Client csClient = csClientPool.getResource();
         try {
+            if (csClient == null){
+                csClient = getCredentialStoreServiceClient();
+            }
             PasswordCredential pwdCredential = new PasswordCredential();
             pwdCredential.setPortalUserName(portalUserName);
             pwdCredential.setLoginUserName(loginUserName);
@@ -695,14 +388,12 @@ public class AiravataServerHandler implements Airavata.Iface {
             pwdCredential.setGatewayId(gatewayId);
             String key = csClient.addPasswordCredential(pwdCredential);
             logger.debug("Airavata generated PWD credential for gateway : " + gatewayId + " and for user : " + loginUserName);
-            csClientPool.returnResource(csClient);
             return key;
         }catch (Exception e){
             logger.error("Error occurred while registering PWD Credential", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error occurred while registering PWD Credential. More info : " + e.getMessage());
-            csClientPool.returnBrokenResource(csClient);
             throw exception;
         }
     }
@@ -710,18 +401,18 @@ public class AiravataServerHandler implements Airavata.Iface {
     @Override
     @SecurityCheck
     public String getSSHPubKey(AuthzToken authzToken, String airavataCredStoreToken, String gatewayId) throws InvalidRequestException, AiravataClientException, AiravataSystemException, TException {
-        CredentialStoreService.Client csClient = csClientPool.getResource();
         try {
+            if (csClient == null){
+                csClient = getCredentialStoreServiceClient();
+            }
             SSHCredential sshCredential = csClient.getSSHCredential(airavataCredStoreToken, gatewayId);
             logger.debug("Airavata retrieved SSH pub key for gateway id : " + gatewayId + " and for token : " + airavataCredStoreToken);
-            csClientPool.returnResource(csClient);
             return sshCredential.getPublicKey();
         }catch (Exception e){
             logger.error("Error occurred while retrieving SSH credential", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error occurred while retrieving SSH credential. More info : " + e.getMessage());
-            csClientPool.returnBrokenResource(csClient);
             throw exception;
         }
     }
@@ -730,74 +421,18 @@ public class AiravataServerHandler implements Airavata.Iface {
     @Override
     @SecurityCheck
     public Map<String, String> getAllGatewaySSHPubKeys(AuthzToken authzToken, String gatewayId) throws InvalidRequestException, AiravataClientException, AiravataSystemException, TException {
-        CredentialStoreService.Client csClient = csClientPool.getResource();
         try {
+            if (csClient == null){
+                csClient = getCredentialStoreServiceClient();
+            }
             Map<String, String> allSSHKeysForGateway = csClient.getAllSSHKeysForGateway(gatewayId);
             logger.debug("Airavata retrieved all SSH pub keys for gateway Id : " + gatewayId);
-            csClientPool.returnResource(csClient);
             return allSSHKeysForGateway;
         }catch (Exception e){
             logger.error("Error occurred while retrieving SSH public keys for gateway : " + gatewayId , e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error occurred while retrieving SSH public keys for gateway : " + gatewayId + ". More info : " + e.getMessage());
-            csClientPool.returnBrokenResource(csClient);
-            throw exception;
-        }
-    }
-
-    @Override
-    @SecurityCheck
-    public List<CredentialSummary> getAllCredentialSummaryForGateway(AuthzToken authzToken, SummaryType type, String gatewayId) throws InvalidRequestException, AiravataClientException, AiravataSystemException, TException {
-        CredentialStoreService.Client csClient = csClientPool.getResource();
-        try {
-            if(type.equals(SummaryType.SSH)){
-                logger.debug("Airavata will retrieve all SSH pub keys summaries for gateway Id : " + gatewayId);
-                List<CredentialSummary> result = csClient.getAllCredentialSummaryForGateway(type, gatewayId);
-                csClientPool.returnResource(csClient);
-                return result;
-            } else {
-                logger.info("Summay Type"+ type.toString() + " not supported by Airavata");
-                AiravataSystemException ex = new AiravataSystemException();
-                ex.setAiravataErrorType(AiravataErrorType.UNSUPPORTED_OPERATION);
-                ex.setMessage("Summay Type"+ type.toString() + " not supported by Airavata");
-                csClientPool.returnResource(csClient);
-                throw ex;
-            }
-        }catch (Exception e){
-            logger.error("Error occurred while retrieving SSH public keys summaries for gateway : " + gatewayId , e);
-            AiravataSystemException exception = new AiravataSystemException();
-            exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
-            exception.setMessage("Error occurred while retrieving SSH public keys summaries for gateway : " + gatewayId + ". More info : " + e.getMessage());
-            csClientPool.returnBrokenResource(csClient);
-            throw exception;
-        }
-    }
-
-    @Override
-    @SecurityCheck
-    public List<CredentialSummary> getAllCredentialSummaryForUsersInGateway(AuthzToken authzToken,SummaryType type, String gatewayId, String userId) throws InvalidRequestException, AiravataClientException, AiravataSystemException, TException {
-        CredentialStoreService.Client csClient = csClientPool.getResource();
-        try {
-            if(type.equals(SummaryType.SSH)){
-                logger.debug("Airavata will retrieve all SSH pub keys summaries for gateway Id : " + gatewayId);
-                List<CredentialSummary> result = csClient.getAllCredentialSummaryForUserInGateway(type, gatewayId, userId);
-                csClientPool.returnResource(csClient);
-                return result;
-            } else {
-                logger.info("Summay Type"+ type.toString() + " not supported by Airavata");
-                AiravataSystemException ex = new AiravataSystemException();
-                ex.setAiravataErrorType(AiravataErrorType.UNSUPPORTED_OPERATION);
-                ex.setMessage("Summay Type"+ type.toString() + " not supported by Airavata");
-                csClientPool.returnResource(csClient);
-                throw ex;
-            }
-        }catch (Exception e){
-            logger.error("Error occurred while retrieving SSH public keys summaries for user : " + userId , e);
-            AiravataSystemException exception = new AiravataSystemException();
-            exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
-            exception.setMessage("Error occurred while retrieving SSH public keys summaries for user : " + userId + ". More info : " + e.getMessage());
-            csClientPool.returnBrokenResource(csClient);
             throw exception;
         }
     }
@@ -805,18 +440,18 @@ public class AiravataServerHandler implements Airavata.Iface {
     @Override
     @SecurityCheck
     public Map<String, String> getAllGatewayPWDCredentials(AuthzToken authzToken, String gatewayId) throws InvalidRequestException, AiravataClientException, AiravataSystemException, TException {
-        CredentialStoreService.Client csClient = csClientPool.getResource();
         try {
+            if (csClient == null){
+                csClient = getCredentialStoreServiceClient();
+            }
             Map<String, String> allPwdCredentials = csClient.getAllPWDCredentialsForGateway(gatewayId);
             logger.debug("Airavata retrieved all PWD Credentials for gateway Id : " + gatewayId);
-            csClientPool.returnResource(csClient);
             return allPwdCredentials;
         }catch (Exception e){
             logger.error("Error occurred while retrieving PWD Credentials for gateway : " + gatewayId , e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error occurred while retrieving PWD Credentials for gateway : " + gatewayId + ". More info : " + e.getMessage());
-            csClientPool.returnBrokenResource(csClient);
             throw exception;
         }
     }
@@ -824,18 +459,17 @@ public class AiravataServerHandler implements Airavata.Iface {
     @Override
     @SecurityCheck
     public boolean deleteSSHPubKey(AuthzToken authzToken, String airavataCredStoreToken, String gatewayId) throws InvalidRequestException, AiravataClientException, AiravataSystemException, TException {
-        CredentialStoreService.Client csClient = csClientPool.getResource();
         try {
+            if (csClient == null){
+                csClient = getCredentialStoreServiceClient();
+            }
             logger.debug("Airavata deleted SSH pub key for gateway Id : " + gatewayId + " and with token id : " + airavataCredStoreToken);
-            boolean result = csClient.deleteSSHCredential(airavataCredStoreToken, gatewayId);
-            csClientPool.returnResource(csClient);
-            return result;
+            return csClient.deleteSSHCredential(airavataCredStoreToken, gatewayId);
         }catch (Exception e){
             logger.error("Error occurred while deleting SSH credential", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error occurred while deleting SSH credential. More info : " + e.getMessage());
-            csClientPool.returnBrokenResource(csClient);
             throw exception;
         }
     }
@@ -843,18 +477,17 @@ public class AiravataServerHandler implements Airavata.Iface {
     @Override
     @SecurityCheck
     public boolean deletePWDCredential(AuthzToken authzToken, String airavataCredStoreToken, String gatewayId) throws InvalidRequestException, AiravataClientException, AiravataSystemException, TException {
-        CredentialStoreService.Client csClient = csClientPool.getResource();
         try {
+            if (csClient == null){
+                csClient = getCredentialStoreServiceClient();
+            }
             logger.debug("Airavata deleted PWD credential for gateway Id : " + gatewayId + " and with token id : " + airavataCredStoreToken);
-            boolean result = csClient.deletePWDCredential(airavataCredStoreToken, gatewayId);
-            csClientPool.returnResource(csClient);
-            return result;
+            return csClient.deletePWDCredential(airavataCredStoreToken, gatewayId);
         }catch (Exception e){
             logger.error("Error occurred while deleting PWD credential", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error occurred while deleting PWD credential. More info : " + e.getMessage());
-            csClientPool.returnBrokenResource(csClient);
             throw exception;
         }
     }
@@ -868,40 +501,29 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public String createProject(AuthzToken authzToken, String gatewayId, Project project) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
+
         try {
-            String projectId = regClient.createProject(gatewayId, project);
+            String projectId = getRegistryServiceClient().createProject(gatewayId, project);
+
             if(ServerSettings.isEnableSharing()){
-                try {
-                    Entity entity = new Entity();
-                    entity.setEntityId(projectId);
-                    entity.setDomainId(project.getGatewayId());
-                    entity.setEntityTypeId(project.getGatewayId() + ":" + "PROJECT");
-                    entity.setOwnerId(project.getOwner() + "@" + project.getGatewayId());
-                    entity.setName(project.getName());
-                    entity.setDescription(project.getDescription());
-                    sharingClient.createEntity(entity);
-                } catch (Exception ex) {
-                    logger.error(ex.getMessage(), ex);
-                    logger.error("Rolling back project creation Proj ID : " + projectId);
-                    regClient.deleteProject(projectId);
-                    AiravataSystemException ase = new AiravataSystemException();
-                    ase.setMessage("Failed to create entry for project in Sharing Registry");
-                    throw ase;
-                }
+                Entity entity = new Entity();
+                entity.setEntityId(projectId);
+                entity.setDomainId(project.getGatewayId());
+                entity.setEntityTypeId(project.getGatewayId()+":"+"PROJECT");
+                entity.setOwnerId(project.getOwner() + "@" + project.getGatewayId());
+                entity.setName(project.getName());
+                entity.setDescription(project.getDescription());
+
+                sharingRegistryServerHandler.createEntity(entity);
             }
+
             logger.debug("Airavata created project with project Id : " + projectId + " for gateway Id : " + gatewayId);
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
             return projectId;
         } catch (Exception e) {
             logger.error("Error while creating the project", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while creating the project. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            sharingClientPool.returnBrokenResource(sharingClient);
             throw exception;
         }
     }
@@ -910,16 +532,15 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public void updateProject(AuthzToken authzToken, String projectId, Project updatedProject) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, ProjectNotFoundException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
         try {
+            RegistryService.Client regClient = getRegistryServiceClient();
             Project existingProject = regClient.getProject(projectId);
             if(ServerSettings.isEnableSharing() && !authzToken.getClaimsMap().get(org.apache.airavata.common.utils.Constants.USER_NAME).equals(existingProject.getOwner())
                     || !authzToken.getClaimsMap().get(org.apache.airavata.common.utils.Constants.GATEWAY_ID).equals(existingProject.getGatewayId())){
                 try {
                     String gatewayId = authzToken.getClaimsMap().get(Constants.GATEWAY_ID);
                     String userId = authzToken.getClaimsMap().get(Constants.USER_NAME);
-                    if (!sharingClient.userHasAccess(gatewayId, userId + "@" + gatewayId,
+                    if(!sharingRegistryServerHandler.userHasAccess(gatewayId, userId + "@" + gatewayId,
                             projectId, gatewayId + ":WRITE")){
                         throw new AuthorizationException("User does not have permission to access this resource");
                     }
@@ -927,23 +548,13 @@ public class AiravataServerHandler implements Airavata.Iface {
                     throw new AuthorizationException("User does not have permission to access this resource");
                 }
             }
-            if(!updatedProject.getOwner().equals(existingProject.getOwner())){
-                throw new InvalidRequestException("Owner of a project cannot be changed");
-            }
-            if(!updatedProject.getGatewayId().equals(existingProject.getGatewayId())){
-                throw new InvalidRequestException("Gateway ID of a project cannot be changed");
-            }
             regClient.updateProject(projectId, updatedProject);
             logger.debug("Airavata updated project with project Id : " + projectId );
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
-        } catch (Exception e) {
+        } catch (RegistryServiceException | ApplicationSettingsException e) {
             logger.error("Error while updating the project", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while updating the project. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            sharingClientPool.returnBrokenResource(sharingClient);
             throw exception;
         }
     }
@@ -952,16 +563,15 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public boolean deleteProject(AuthzToken authzToken, String projectId) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, ProjectNotFoundException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
         try {
+            RegistryService.Client regClient = getRegistryServiceClient();
             Project existingProject = regClient.getProject(projectId);
             if(ServerSettings.isEnableSharing() && !authzToken.getClaimsMap().get(org.apache.airavata.common.utils.Constants.USER_NAME).equals(existingProject.getOwner())
                     || !authzToken.getClaimsMap().get(org.apache.airavata.common.utils.Constants.GATEWAY_ID).equals(existingProject.getGatewayId())){
                 try {
                     String gatewayId = authzToken.getClaimsMap().get(Constants.GATEWAY_ID);
                     String userId = authzToken.getClaimsMap().get(Constants.USER_NAME);
-                    if (!sharingClient.userHasAccess(gatewayId, userId + "@" + gatewayId,
+                    if(!sharingRegistryServerHandler.userHasAccess(gatewayId, userId + "@" + gatewayId,
                             projectId, gatewayId + ":WRITE")){
                         throw new AuthorizationException("User does not have permission to access this resource");
                     }
@@ -971,15 +581,11 @@ public class AiravataServerHandler implements Airavata.Iface {
             }
             boolean ret = regClient.deleteProject(projectId);
             logger.debug("Airavata deleted project with project Id : " + projectId );
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
             return ret;
-        } catch (Exception e) {
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error("Error while removing the project", e);
             ProjectNotFoundException exception = new ProjectNotFoundException();
             exception.setMessage("Error while removing the project. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            sharingClientPool.returnBrokenResource(sharingClient);
             throw exception;
         }
     }
@@ -1001,40 +607,29 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public Project getProject(AuthzToken authzToken, String projectId) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, ProjectNotFoundException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
         try {
-            Project project = regClient.getProject(projectId);
+            Project project = getRegistryServiceClient().getProject(projectId);
             if(authzToken.getClaimsMap().get(org.apache.airavata.common.utils.Constants.USER_NAME).equals(project.getOwner())
                     && authzToken.getClaimsMap().get(org.apache.airavata.common.utils.Constants.GATEWAY_ID).equals(project.getGatewayId())){
-                registryClientPool.returnResource(regClient);
-                sharingClientPool.returnResource(sharingClient);
                 return project;
             }else if (ServerSettings.isEnableSharing()){
                 try {
                     String gatewayId = authzToken.getClaimsMap().get(Constants.GATEWAY_ID);
                     String userId = authzToken.getClaimsMap().get(Constants.USER_NAME);
-                    if (!sharingClient.userHasAccess(gatewayId, userId + "@" + gatewayId,
+                    if(!sharingRegistryServerHandler.userHasAccess(gatewayId, userId + "@" + gatewayId,
                             projectId, gatewayId + ":READ")){
                         throw new AuthorizationException("User does not have permission to access this resource");
                     }
-                    registryClientPool.returnResource(regClient);
-                    sharingClientPool.returnResource(sharingClient);
                     return project;
                 } catch (Exception e) {
                     throw new AuthorizationException("User does not have permission to access this resource");
                 }
-            } else {
-                registryClientPool.returnResource(regClient);
-                sharingClientPool.returnResource(sharingClient);
+            }else
                 return null;
-            }
-        } catch (Exception e) {
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error("Error while retrieving the project", e);
             ProjectNotFoundException exception = new ProjectNotFoundException();
             exception.setMessage("Error while retrieving the project. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            sharingClientPool.returnBrokenResource(sharingClient);
             throw exception;
         }
     }
@@ -1056,41 +651,15 @@ public class AiravataServerHandler implements Airavata.Iface {
     @Override
     @SecurityCheck
     public List<Project> getUserProjects(AuthzToken authzToken, String gatewayId, String userName,
-                                         int limit, int offset)
+                                                          int limit, int offset)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
-        try {
-            if (ServerSettings.isEnableSharing()){
-                // user projects + user accessible projects
-                List<String> accessibleProjectIds = new ArrayList<>();
-                List<SearchCriteria> filters = new ArrayList<>();
-                SearchCriteria searchCriteria = new SearchCriteria();
-                searchCriteria.setSearchField(EntitySearchField.ENTITY_TYPE_ID);
-                searchCriteria.setSearchCondition(SearchCondition.EQUAL);
-                searchCriteria.setValue(gatewayId + ":PROJECT");
-                filters.add(searchCriteria);
-                sharingClient.searchEntities(authzToken.getClaimsMap().get(Constants.GATEWAY_ID),
-                        userName + "@" + gatewayId, filters, 0, -1).stream().forEach(p -> accessibleProjectIds
-                        .add(p.entityId));
-                List<Project> result = regClient.searchProjects(gatewayId, userName, accessibleProjectIds, new HashMap<>(), limit, offset);
-                registryClientPool.returnResource(regClient);
-                sharingClientPool.returnResource(sharingClient);
-                return result;
-            }else{
-                List<Project> result = regClient.getUserProjects(gatewayId, userName, limit, offset);
-                registryClientPool.returnResource(regClient);
-                sharingClientPool.returnResource(sharingClient);
-                return result;
-            }
-
-        } catch (Exception e) {
+        try {
+            return getRegistryServiceClient().getUserProjects(gatewayId, userName, limit, offset);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error("Error while retrieving projects", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while retrieving projects. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            sharingClientPool.returnBrokenResource(sharingClient);
             throw exception;
         }
     }
@@ -1120,32 +689,19 @@ public class AiravataServerHandler implements Airavata.Iface {
     @Override
     public List<Project> searchProjects(AuthzToken authzToken, String gatewayId, String userName, Map<ProjectSearchFields,
             String> filters, int limit, int offset) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
         try {
             List<String> accessibleProjIds  = new ArrayList<>();
 
-            if (ServerSettings.isEnableSharing()) {
-                List<SearchCriteria> sharingFilters = new ArrayList<>();
-                SearchCriteria searchCriteria = new SearchCriteria();
-                searchCriteria.setSearchField(EntitySearchField.ENTITY_TYPE_ID);
-                searchCriteria.setSearchCondition(SearchCondition.EQUAL);
-                searchCriteria.setValue(gatewayId + ":PROJECT");
-                sharingFilters.add(searchCriteria);
-                sharingClient.searchEntities(authzToken.getClaimsMap().get(Constants.GATEWAY_ID),
-                        userName + "@" + gatewayId, sharingFilters, 0, -1).stream().forEach(e -> accessibleProjIds.add(e.entityId));
-            }
-            List<Project> result = regClient.searchProjects(gatewayId, userName, accessibleProjIds, filters, limit, offset);
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
-            return result;
+            if(ServerSettings.isEnableSharing())
+                sharingRegistryServerHandler.searchEntities(userName+"@"+gatewayId, gatewayId+":PROJECT",
+                        new HashMap<>(), 0, -1).stream().forEach(e->accessibleProjIds.add(e.entityId));
+
+            return getRegistryServiceClient().searchProjects(gatewayId, userName, accessibleProjIds, filters, limit, offset);
         }catch (Exception e) {
             logger.error("Error while retrieving projects", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while retrieving projects. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            sharingClientPool.returnBrokenResource(sharingClient);
             throw exception;
         }
     }
@@ -1171,31 +727,17 @@ public class AiravataServerHandler implements Airavata.Iface {
     public List<ExperimentSummaryModel> searchExperiments(AuthzToken authzToken, String gatewayId, String userName, Map<ExperimentSearchFields,
             String> filters, int limit, int offset)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
         try {
             List<String> accessibleExpIds = new ArrayList<>();
-            if (ServerSettings.isEnableSharing()) {
-                List<SearchCriteria> sharingFilters = new ArrayList<>();
-                SearchCriteria searchCriteria = new SearchCriteria();
-                searchCriteria.setSearchField(EntitySearchField.ENTITY_TYPE_ID);
-                searchCriteria.setSearchCondition(SearchCondition.EQUAL);
-                searchCriteria.setValue(gatewayId + ":EXPERIMENT");
-                sharingFilters.add(searchCriteria);
-                sharingClient.searchEntities(authzToken.getClaimsMap().get(Constants.GATEWAY_ID),
-                        userName + "@" + gatewayId, sharingFilters, 0, -1).forEach(e -> accessibleExpIds.add(e.entityId));
-            }
-            List<ExperimentSummaryModel> result = regClient.searchExperiments(gatewayId, userName, accessibleExpIds, filters, limit, offset);
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
-            return result;
+            if(ServerSettings.isEnableSharing())
+                sharingRegistryServerHandler.searchEntities(userName+"@"+gatewayId, gatewayId+":EXPERIMENT",
+                        new HashMap<>(), 0, -1).forEach(e->accessibleExpIds.add(e.entityId));
+            return getRegistryServiceClient().searchExperiments(gatewayId, userName, accessibleExpIds, filters, limit, offset);
         }catch (Exception e) {
             logger.error("Error while retrieving experiments", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while retrieving experiments. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            sharingClientPool.returnBrokenResource(sharingClient);
             throw exception;
         }
     }
@@ -1215,23 +757,15 @@ public class AiravataServerHandler implements Airavata.Iface {
      */
     @Override
     @SecurityCheck
-    public ExperimentStatistics getExperimentStatistics(AuthzToken authzToken, String gatewayId, long fromTime, long toTime,
-                                                        String userName, String applicationName, String resourceHostName)
+    public ExperimentStatistics getExperimentStatistics(AuthzToken authzToken, String gatewayId, long fromTime, long toTime)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
         try {
-            ExperimentStatistics result = regClient.getExperimentStatistics(gatewayId, fromTime, toTime, userName, applicationName, resourceHostName);
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
-            return result;
+            return getRegistryServiceClient().getExperimentStatistics(gatewayId, fromTime, toTime);
         }catch (Exception e) {
             logger.error("Error while retrieving experiments", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while retrieving experiments. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            sharingClientPool.returnBrokenResource(sharingClient);
             throw exception;
         }
     }
@@ -1252,9 +786,8 @@ public class AiravataServerHandler implements Airavata.Iface {
     public List<ExperimentModel> getExperimentsInProject(AuthzToken authzToken, String projectId, int limit, int offset)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, ProjectNotFoundException,
             AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
         try {
+            RegistryService.Client regClient  = getRegistryServiceClient();
             Project project = regClient.getProject(projectId);
 
             if(ServerSettings.isEnableSharing() && !authzToken.getClaimsMap().get(org.apache.airavata.common.utils.Constants.USER_NAME).equals(project.getOwner())
@@ -1262,7 +795,7 @@ public class AiravataServerHandler implements Airavata.Iface {
                 try {
                     String gatewayId = authzToken.getClaimsMap().get(Constants.GATEWAY_ID);
                     String userId = authzToken.getClaimsMap().get(Constants.USER_NAME);
-                    if (!sharingClient.userHasAccess(gatewayId, userId + "@" + gatewayId,
+                    if(!sharingRegistryServerHandler.userHasAccess(gatewayId, userId + "@" + gatewayId,
                             projectId, gatewayId + ":READ")){
                         throw new AuthorizationException("User does not have permission to access this resource");
                     }
@@ -1270,17 +803,12 @@ public class AiravataServerHandler implements Airavata.Iface {
                     throw new AuthorizationException("User does not have permission to access this resource");
                 }
             }
-            List<ExperimentModel> result = regClient.getExperimentsInProject(projectId, limit, offset);
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
-            return result;
+            return regClient.getExperimentsInProject(projectId, limit, offset);
         } catch (Exception e) {
             logger.error("Error while retrieving the experiments", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while retrieving the experiments. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            sharingClientPool.returnBrokenResource(sharingClient);
             throw exception;
         }
     }
@@ -1301,22 +829,15 @@ public class AiravataServerHandler implements Airavata.Iface {
     @Override
     @SecurityCheck
     public List<ExperimentModel> getUserExperiments(AuthzToken authzToken, String gatewayId, String userName, int limit,
-                                                    int offset) throws InvalidRequestException,
+                                                                     int offset) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
         try {
-            List<ExperimentModel> result = regClient.getUserExperiments(gatewayId, userName, limit, offset);
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
-            return result;
+            return getRegistryServiceClient().getUserExperiments(gatewayId, userName, limit, offset);
         } catch (Exception e) {
             logger.error("Error while retrieving the experiments", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while retrieving the experiments. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            sharingClientPool.returnBrokenResource(sharingClient);
             throw exception;
         }
     }
@@ -1347,31 +868,19 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public String createExperiment(AuthzToken authzToken, String gatewayId, ExperimentModel experiment) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
         try {
-            String experimentId = regClient.createExperiment(gatewayId, experiment);
+            String experimentId = getRegistryServiceClient().createExperiment(gatewayId, experiment);
 
             if(ServerSettings.isEnableSharing()) {
-                try {
-                    Entity entity = new Entity();
-                    entity.setEntityId(experimentId);
-                    entity.setDomainId(experiment.getGatewayId());
-                    entity.setEntityTypeId(experiment.getGatewayId() + ":" + "EXPERIMENT");
-                    entity.setOwnerId(experiment.getUserName() + "@" + experiment.getGatewayId());
-                    entity.setName(experiment.getExperimentName());
-                    entity.setDescription(experiment.getDescription());
-                    entity.setParentEntityId(experiment.getProjectId());
-
-                    sharingClient.createEntity(entity);
-                } catch (Exception ex) {
-                    logger.error(ex.getMessage(), ex);
-                    logger.error("Rolling back experiment creation Exp ID : " + experimentId);
-                    regClient.deleteExperiment(experimentId);
-                    AiravataSystemException ase = new AiravataSystemException();
-                    ase.setMessage("Failed to create sharing registry record");
-                    throw ase;
-                }
+                Entity entity = new Entity();
+                entity.setEntityId(experimentId);
+                entity.setDomainId(experiment.getGatewayId());
+                entity.setEntityTypeId(experiment.getGatewayId()+":"+"EXPERIMENT");
+                entity.setOwnerId(experiment.getUserName() + "@" + experiment.getGatewayId());
+                entity.setName(experiment.getExperimentName());
+                entity.setDescription(experiment.getDescription());
+
+                sharingRegistryServerHandler.createEntity(entity);
             }
 
             ExperimentStatusChangeEvent event = new ExperimentStatusChangeEvent(ExperimentState.CREATED,
@@ -1384,16 +893,12 @@ public class AiravataServerHandler implements Airavata.Iface {
                 statusPublisher.publish(messageContext);
             }
             logger.debug(experimentId, "Created new experiment with experiment name {}", experiment.getExperimentName());
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
             return experimentId;
         } catch (Exception e) {
             logger.error("Error while creating the experiment with experiment name {}", experiment.getExperimentName());
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while creating the experiment. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            sharingClientPool.returnBrokenResource(sharingClient);
             throw exception;
         }
     }
@@ -1412,9 +917,8 @@ public class AiravataServerHandler implements Airavata.Iface {
     @Override
     @SecurityCheck
     public boolean deleteExperiment(AuthzToken authzToken, String experimentId) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
         try {
+            RegistryService.Client regClient  = getRegistryServiceClient();
             ExperimentModel experimentModel = regClient.getExperiment(experimentId);
 
             if(ServerSettings.isEnableSharing() && !authzToken.getClaimsMap().get(org.apache.airavata.common.utils.Constants.USER_NAME).equals(experimentModel.getUserName())
@@ -1422,7 +926,7 @@ public class AiravataServerHandler implements Airavata.Iface {
                 try {
                     String gatewayId = authzToken.getClaimsMap().get(Constants.GATEWAY_ID);
                     String userId = authzToken.getClaimsMap().get(Constants.USER_NAME);
-                    if (!sharingClient.userHasAccess(gatewayId, userId + "@" + gatewayId,
+                    if(!sharingRegistryServerHandler.userHasAccess(gatewayId, userId + "@" + gatewayId,
                             experimentId, gatewayId + ":WRITE")){
                         throw new AuthorizationException("User does not have permission to access this resource");
                     }
@@ -1435,17 +939,12 @@ public class AiravataServerHandler implements Airavata.Iface {
                 logger.error("Error while deleting the experiment");
                 throw new RegistryServiceException("Experiment is not in CREATED state. Hence cannot deleted. ID:"+ experimentId);
             }
-            boolean result = regClient.deleteExperiment(experimentId);
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
-            return result;
+            return regClient.deleteExperiment(experimentId);
         } catch (Exception e) {
             logger.error("Error while deleting the experiment", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while deleting the experiment. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            sharingClientPool.returnBrokenResource(sharingClient);
             throw exception;
         }
     }
@@ -1476,67 +975,32 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public ExperimentModel getExperiment(AuthzToken authzToken, String airavataExperimentId) throws InvalidRequestException,
             ExperimentNotFoundException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
         ExperimentModel experimentModel = null;
         try {
-            experimentModel = regClient.getExperiment(airavataExperimentId);
+            experimentModel = getRegistryServiceClient().getExperiment(airavataExperimentId);
             if(authzToken.getClaimsMap().get(org.apache.airavata.common.utils.Constants.USER_NAME).equals(experimentModel.getUserName())
                     && authzToken.getClaimsMap().get(org.apache.airavata.common.utils.Constants.GATEWAY_ID).equals(experimentModel.getGatewayId())){
-                registryClientPool.returnResource(regClient);
-                sharingClientPool.returnResource(sharingClient);
                 return experimentModel;
             }else if(ServerSettings.isEnableSharing()){
                 try {
                     String gatewayId = authzToken.getClaimsMap().get(Constants.GATEWAY_ID);
                     String userId = authzToken.getClaimsMap().get(Constants.USER_NAME);
-                    if (!sharingClient.userHasAccess(gatewayId, userId + "@" + gatewayId,
+                    if(!sharingRegistryServerHandler.userHasAccess(gatewayId, userId + "@" + gatewayId,
                             airavataExperimentId, gatewayId + ":READ")){
                         throw new AuthorizationException("User does not have permission to access this resource");
                     }
-                    registryClientPool.returnResource(regClient);
-                    sharingClientPool.returnResource(sharingClient);
                     return experimentModel;
                 } catch (Exception e) {
                     throw new AuthorizationException("User does not have permission to access this resource");
                 }
             }else{
-                registryClientPool.returnResource(regClient);
-                sharingClientPool.returnResource(sharingClient);
                 return null;
             }
-        } catch (Exception e) {
-            logger.error("Error while getting the experiment", e);
-            AiravataSystemException exception = new AiravataSystemException();
-            exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
-            exception.setMessage("Error while getting the experiment. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            sharingClientPool.returnBrokenResource(sharingClient);
-            throw exception;
-        }
-    }
-
-    @Override
-    @SecurityCheck
-    public ExperimentModel getExperimentByAdmin(AuthzToken authzToken, String airavataExperimentId)
-            throws InvalidRequestException, ExperimentNotFoundException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        ExperimentModel experimentModel = null;
-        try {
-            String gatewayId = authzToken.getClaimsMap().get(Constants.GATEWAY_ID);
-            experimentModel = regClient.getExperiment(airavataExperimentId);
-            registryClientPool.returnResource(regClient);
-            if(gatewayId.equals(experimentModel.getGatewayId())){
-                return experimentModel;
-            } else {
-                throw new AuthorizationException("User does not have permission to access this resource");
-            }
-        } catch (Exception e) {
+        } catch (ApplicationSettingsException e) {
             logger.error("Error while getting the experiment", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while getting the experiment. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -1568,20 +1032,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public ExperimentModel getDetailedExperimentTree(AuthzToken authzToken, String airavataExperimentId) throws InvalidRequestException,
             ExperimentNotFoundException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
         try {
-            ExperimentModel result = regClient.getDetailedExperimentTree(airavataExperimentId);
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
-            return result;
+            return getRegistryServiceClient().getDetailedExperimentTree(airavataExperimentId);
         } catch (Exception e) {
             logger.error("Error while retrieving the experiment", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while retrieving the experiment. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            sharingClientPool.returnBrokenResource(sharingClient);
             throw exception;
         }
     }
@@ -1615,16 +1072,15 @@ public class AiravataServerHandler implements Airavata.Iface {
     public void updateExperiment(AuthzToken authzToken, String airavataExperimentId, ExperimentModel experiment)
             throws InvalidRequestException, ExperimentNotFoundException, AiravataClientException, AiravataSystemException,
             AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
         try {
+            RegistryService.Client regClient = getRegistryServiceClient();
             ExperimentModel experimentModel = regClient.getExperiment(airavataExperimentId);
             if(ServerSettings.isEnableSharing() && !authzToken.getClaimsMap().get(org.apache.airavata.common.utils.Constants.USER_NAME).equals(experimentModel.getUserName())
-                    || !authzToken.getClaimsMap().get(org.apache.airavata.common.utils.Constants.GATEWAY_ID).equals(experimentModel.getGatewayId())){
+                || !authzToken.getClaimsMap().get(org.apache.airavata.common.utils.Constants.GATEWAY_ID).equals(experimentModel.getGatewayId())){
                 try {
                     String gatewayId = authzToken.getClaimsMap().get(Constants.GATEWAY_ID);
                     String userId = authzToken.getClaimsMap().get(Constants.USER_NAME);
-                    if (!sharingClient.userHasAccess(gatewayId, userId + "@" + gatewayId,
+                    if(!sharingRegistryServerHandler.userHasAccess(gatewayId, userId + "@" + gatewayId,
                             airavataExperimentId, gatewayId + ":WRITE")){
                         throw new AuthorizationException("User does not have permission to access this resource");
                     }
@@ -1634,15 +1090,11 @@ public class AiravataServerHandler implements Airavata.Iface {
             }
 
             regClient.updateExperiment(airavataExperimentId, experiment);
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
-        } catch (Exception e) {
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(airavataExperimentId, "Error while updating experiment", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while updating experiment. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            sharingClientPool.returnBrokenResource(sharingClient);
             throw exception;
         }
     }
@@ -1651,10 +1103,8 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public void updateExperimentConfiguration(AuthzToken authzToken, String airavataExperimentId, UserConfigurationDataModel userConfiguration)
             throws AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            regClient.send_updateExperimentConfiguration(airavataExperimentId, userConfiguration);
-            registryClientPool.returnResource(regClient);
+            getRegistryServiceClient().send_updateExperimentConfiguration(airavataExperimentId, userConfiguration);
         } catch (Exception e) {
             logger.error(airavataExperimentId, "Error while updating user configuration", e);
             AiravataSystemException exception = new AiravataSystemException();
@@ -1663,7 +1113,6 @@ public class AiravataServerHandler implements Airavata.Iface {
                     "Update experiment is only valid for experiments " +
                     "with status CREATED, VALIDATED, CANCELLED, FAILED and UNKNOWN. Make sure the given " +
                     "experiment is in one of above statuses...  " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -1672,10 +1121,8 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public void updateResourceScheduleing(AuthzToken authzToken, String airavataExperimentId,
                                           ComputationalResourceSchedulingModel resourceScheduling) throws AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            regClient.updateResourceScheduleing(airavataExperimentId, resourceScheduling);
-            registryClientPool.returnResource(regClient);
+            getRegistryServiceClient().updateResourceScheduleing(airavataExperimentId, resourceScheduling);
         } catch (Exception e) {
             logger.error(airavataExperimentId, "Error while updating scheduling info", e);
             AiravataSystemException exception = new AiravataSystemException();
@@ -1684,7 +1131,6 @@ public class AiravataServerHandler implements Airavata.Iface {
                     "Update experiment is only valid for experiments " +
                     "with status CREATED, VALIDATED, CANCELLED, FAILED and UNKNOWN. Make sure the given " +
                     "experiment is in one of above statuses...  " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -1705,7 +1151,7 @@ public class AiravataServerHandler implements Airavata.Iface {
     public boolean validateExperiment(AuthzToken authzToken, String airavataExperimentId) throws TException {
         // TODO - call validation module and validate experiment
 /*     	try {
-            ExperimentModel experimentModel = regClient.getExperiment(airavataExperimentId);
+            ExperimentModel experimentModel = getRegistryServiceClient().getExperiment(airavataExperimentId);
  			if (experimentModel == null) {
                 logger.error(airavataExperimentId, "Experiment validation failed , experiment {} doesn't exist.", airavataExperimentId);
                 throw new ExperimentNotFoundException("Requested experiment id " + airavataExperimentId + " does not exist in the system..");
@@ -1761,15 +1207,11 @@ public class AiravataServerHandler implements Airavata.Iface {
     @Override
     @SecurityCheck
     public ExperimentStatus getExperimentStatus(AuthzToken authzToken, String airavataExperimentId) throws TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            ExperimentStatus result = regClient.getExperimentStatus(airavataExperimentId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getExperimentStatus(airavataExperimentId);
+        } catch (ApplicationSettingsException e) {
             AiravataSystemException exception = new AiravataSystemException();
             exception.setMessage(e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -1779,17 +1221,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public List<OutputDataObjectType> getExperimentOutputs(AuthzToken authzToken, String airavataExperimentId)
             throws AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            List<OutputDataObjectType> result = regClient.getExperimentOutputs(airavataExperimentId);
-            registryClientPool.returnResource(regClient);
-            return result;
+            return getRegistryServiceClient().getExperimentOutputs(airavataExperimentId);
         } catch (Exception e) {
             logger.error(airavataExperimentId, "Error while retrieving the experiment outputs", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while retrieving the experiment outputs. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -1804,17 +1242,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public Map<String, JobStatus> getJobStatuses(AuthzToken authzToken, String airavataExperimentId)
             throws AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            Map<String, JobStatus> result = regClient.getJobStatuses(airavataExperimentId);
-            registryClientPool.returnResource(regClient);
-            return result;
+            return getRegistryServiceClient().getJobStatuses(airavataExperimentId);
         } catch (Exception e) {
             logger.error(airavataExperimentId, "Error while retrieving the job statuses", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while retrieving the job statuses. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -1823,17 +1257,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public List<JobModel> getJobDetails(AuthzToken authzToken, String airavataExperimentId) throws InvalidRequestException,
             ExperimentNotFoundException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            List<JobModel> result = regClient.getJobDetails(airavataExperimentId);
-            registryClientPool.returnResource(regClient);
-            return result;
+            return getRegistryServiceClient().getJobDetails(airavataExperimentId);
         } catch (Exception e) {
             logger.error(airavataExperimentId, "Error while retrieving the job details", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while retrieving the job details. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -1869,35 +1299,23 @@ public class AiravataServerHandler implements Airavata.Iface {
     @Override
     @SecurityCheck
     public void launchExperiment(AuthzToken authzToken, final String airavataExperimentId, String gatewayId)
-            throws AuthorizationException, AiravataSystemException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
-        try {
-            ExperimentModel experiment = regClient.getExperiment(airavataExperimentId);
-            // TODO: fix checking if the user has access to the deployment of this application, should check for entity type APPLICATION_DEPLOYMENT and permission type EXEC
-//            String userId = authzToken.getClaimsMap().get(Constants.USER_NAME);
-//            String appInterfaceId = experiment.getExecutionId();
-//            ApplicationInterfaceDescription applicationInterfaceDescription = regClient.getApplicationInterface(appInterfaceId);
-//            List<String> entityIds = applicationInterfaceDescription.getApplicationModules();
-//            if (!sharingClient.userHasAccess(gatewayId, userId + "@" + gatewayId, entityIds.get(0),gatewayId + ":READ")) {
-//                logger.error(airavataExperimentId, "User does not have access to application module {}.", entityIds.get(0));
-//                throw new AuthorizationException("User does not have permission to access this resource");
-//            }
+            throws TException {
+        try {
+            ExperimentModel experiment = getRegistryServiceClient().getExperiment(airavataExperimentId);
             if (experiment == null) {
                 logger.error(airavataExperimentId, "Error while launching experiment, experiment {} doesn't exist.", airavataExperimentId);
                 throw new ExperimentNotFoundException("Requested experiment id " + airavataExperimentId + " does not exist in the system..");
             }
             submitExperiment(gatewayId, airavataExperimentId);
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
-        } catch (Exception e1) {
+        } catch (RegistryServiceException | ApplicationSettingsException e1) {
             logger.error(airavataExperimentId, "Error while instantiate the registry instance", e1);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while instantiate the registry instance. More info : " + e1.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            sharingClientPool.returnBrokenResource(sharingClient);
             throw exception;
+        } catch (AiravataException ex) {
+            logger.error("Experiment publish event fails", ex);
+
         }
     }
 
@@ -1921,7 +1339,7 @@ public class AiravataServerHandler implements Airavata.Iface {
      *    This is the experiment identifier that already exists in the system. Will use this experimentID to retrieve
      *    user configuration which is used with the clone experiment.
      *
-     * @param newExperimentName
+     * @param newExperiementName
      *   experiment name that should be used in the cloned experiment
      *
      * @return
@@ -1952,128 +1370,67 @@ public class AiravataServerHandler implements Airavata.Iface {
      *
      *
      * @param existingExperimentID
-     * @param newExperimentName
+     * @param newExperiementName
      */
     @Override
     @SecurityCheck
-    public String cloneExperiment(AuthzToken authzToken, String existingExperimentID, String newExperimentName, String newExperimentProjectId)
+    public String cloneExperiment(AuthzToken authzToken, String existingExperimentID, String newExperiementName)
             throws InvalidRequestException, ExperimentNotFoundException, AiravataClientException, AiravataSystemException,
-            AuthorizationException, ProjectNotFoundException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
-        try {
-            // getExperiment will apply sharing permissions
-            ExperimentModel existingExperiment = this.getExperiment(authzToken, existingExperimentID);
-            String result = cloneExperimentInternal(regClient, sharingClient, authzToken, existingExperimentID, newExperimentName, newExperimentProjectId, existingExperiment);
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
-            return result;
-        } catch (Exception e) {
-            logger.error(existingExperimentID, "Error while cloning the experiment with existing configuration...", e);
-            AiravataSystemException exception = new AiravataSystemException();
-            exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
-            exception.setMessage("Error while cloning the experiment with existing configuration. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            sharingClientPool.returnBrokenResource(sharingClient);
-            throw exception;
-        }
-    }
-
-    @Override
-    @SecurityCheck
-    public String cloneExperimentByAdmin(AuthzToken authzToken, String existingExperimentID, String newExperimentName, String newExperimentProjectId)
-            throws InvalidRequestException, ExperimentNotFoundException, AiravataClientException, AiravataSystemException,
-            AuthorizationException, ProjectNotFoundException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
-        try {
-            // get existing experiment by bypassing normal sharing permissions for the admin user
-            ExperimentModel existingExperiment = this.getExperimentByAdmin(authzToken, existingExperimentID);
-            String result = cloneExperimentInternal(regClient, sharingClient, authzToken, existingExperimentID, newExperimentName, newExperimentProjectId, existingExperiment);
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
-            return result;
-        } catch (Exception e) {
-            logger.error(existingExperimentID, "Error while cloning the experiment with existing configuration...", e);
-            AiravataSystemException exception = new AiravataSystemException();
-            exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
-            exception.setMessage("Error while cloning the experiment with existing configuration. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            sharingClientPool.returnBrokenResource(sharingClient);
-            throw exception;
-        }
-    }
-
-    private String cloneExperimentInternal(RegistryService.Client regClient, SharingRegistryService.Client sharingClient,
-                                           AuthzToken authzToken, String existingExperimentID, String newExperimentName, String newExperimentProjectId, ExperimentModel existingExperiment)
-            throws ExperimentNotFoundException, ProjectNotFoundException, TException, AuthorizationException, ApplicationSettingsException {
-        if (existingExperiment == null){
-            logger.error(existingExperimentID, "Error while cloning experiment {}, experiment doesn't exist.", existingExperimentID);
-            throw new ExperimentNotFoundException("Requested experiment id " + existingExperimentID + " does not exist in the system..");
-        }
-        if (newExperimentProjectId != null) {
-
-            // getProject will apply sharing permissions
-            Project project = this.getProject(authzToken, newExperimentProjectId);
-            if (project == null){
-                logger.error("Error while cloning experiment {}, project {} doesn't exist.", existingExperimentID, newExperimentProjectId);
-                throw new ProjectNotFoundException("Requested project id " + newExperimentProjectId + " does not exist in the system..");
+            AuthorizationException, TException {
+        try {
+            RegistryService.Client regClient = getRegistryServiceClient();
+            ExperimentModel existingExperiment = regClient.getExperiment(existingExperimentID);
+            if (existingExperiment == null){
+                logger.error(existingExperimentID, "Error while cloning experiment {}, experiment doesn't exist.", existingExperimentID);
+                throw new ExperimentNotFoundException("Requested experiment id " + existingExperimentID + " does not exist in the system..");
             }
-            existingExperiment.setProjectId(project.getProjectID());
-        }
-
-        // make sure user has write access to the project
-        String gatewayId = authzToken.getClaimsMap().get(Constants.GATEWAY_ID);
-        String userId = authzToken.getClaimsMap().get(Constants.USER_NAME);
-        if (!sharingClient.userHasAccess(gatewayId, userId + "@" + gatewayId,
-                existingExperiment.getProjectId(), gatewayId + ":WRITE")){
-            logger.error("Error while cloning experiment {}, user doesn't have write access to project {}", existingExperimentID, existingExperiment.getProjectId());
-            throw new AuthorizationException("User does not have permission to clone an experiment in this project");
-        }
 
-        existingExperiment.setCreationTime(AiravataUtils.getCurrentTimestamp().getTime());
-        if (existingExperiment.getExecutionId() != null){
-            List<OutputDataObjectType> applicationOutputs = regClient.getApplicationOutputs(existingExperiment.getExecutionId());
-            existingExperiment.setExperimentOutputs(applicationOutputs);
-        }
-        if (validateString(newExperimentName)){
-            existingExperiment.setExperimentName(newExperimentName);
-        }
-        if (existingExperiment.getErrors() != null ){
-            existingExperiment.getErrors().clear();
-        }
-        if(existingExperiment.getUserConfigurationData() != null && existingExperiment.getUserConfigurationData()
+            String gatewayId = existingExperiment.getGatewayId();
+            existingExperiment.setCreationTime(AiravataUtils.getCurrentTimestamp().getTime());
+            if (existingExperiment.getExecutionId() != null){
+                List<OutputDataObjectType> applicationOutputs = regClient.getApplicationOutputs(existingExperiment.getExecutionId());
+                existingExperiment.setExperimentOutputs(applicationOutputs);
+            }
+            if (validateString(newExperiementName)){
+                existingExperiment.setExperimentName(newExperiementName);
+            }
+            if (existingExperiment.getErrors() != null ){
+                existingExperiment.getErrors().clear();
+            }
+            if(existingExperiment.getUserConfigurationData() != null && existingExperiment.getUserConfigurationData()
                 .getComputationalResourceScheduling() != null){
-            String compResourceId = existingExperiment.getUserConfigurationData()
+                String compResourceId = existingExperiment.getUserConfigurationData()
                     .getComputationalResourceScheduling().getResourceHostId();
 
-            ComputeResourceDescription computeResourceDescription = regClient.getComputeResource(compResourceId);
-            if(!computeResourceDescription.isEnabled()){
-                existingExperiment.getUserConfigurationData().setComputationalResourceScheduling(null);
+                ComputeResourceDescription computeResourceDescription = regClient.getComputeResource(compResourceId);
+                if(!computeResourceDescription.isEnabled()){
+                    existingExperiment.getUserConfigurationData().setComputationalResourceScheduling(null);
+                }
             }
-        }
-        logger.debug("Airavata cloned experiment with experiment id : " + existingExperimentID);
-        existingExperiment.setUserName(userId);
-        String expId = regClient.createExperiment(gatewayId, existingExperiment);
+            logger.debug("Airavata cloned experiment with experiment id : " + existingExperimentID);
+            existingExperiment.setUserName(authzToken.getClaimsMap().get(org.apache.airavata.common.utils.Constants.USER_NAME));
+            String expId = regClient.createExperiment(gatewayId, existingExperiment);
 
-        if(ServerSettings.isEnableSharing()){
-            try {
+            if(ServerSettings.isEnableSharing()){
                 Entity entity = new Entity();
                 entity.setEntityId(expId);
                 entity.setDomainId(existingExperiment.getGatewayId());
-                entity.setEntityTypeId(existingExperiment.getGatewayId() + ":" + "EXPERIMENT");
+                entity.setEntityTypeId(existingExperiment.getGatewayId()+":"+"EXPERIMENT");
                 entity.setOwnerId(existingExperiment.getUserName() + "@" + existingExperiment.getGatewayId());
                 entity.setName(existingExperiment.getExperimentName());
                 entity.setDescription(existingExperiment.getDescription());
-                sharingClient.createEntity(entity);
-            } catch (Exception ex) {
-                logger.error(ex.getMessage(), ex);
-                logger.error("rolling back experiment creation Exp ID : " + expId);
-                regClient.deleteExperiment(expId);
+
+                sharingRegistryServerHandler.createEntity(entity);
             }
-        }
 
-        return expId;
+            return expId;
+        } catch (Exception e) {
+            logger.error(existingExperimentID, "Error while cloning the experiment with existing configuration...", e);
+            AiravataSystemException exception = new AiravataSystemException();
+            exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
+            exception.setMessage("Error while cloning the experiment with existing configuration. More info : " + e.getMessage());
+            throw exception;
+        }
     }
 
     /**
@@ -2101,8 +1458,8 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public void terminateExperiment(AuthzToken authzToken, String airavataExperimentId, String gatewayId)
             throws TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
+            RegistryService.Client regClient = getRegistryServiceClient();
             ExperimentModel existingExperiment = regClient.getExperiment(airavataExperimentId);
             if (existingExperiment == null){
                 logger.error(airavataExperimentId, "Error while cancelling experiment {}, experiment doesn't exist.", airavataExperimentId);
@@ -2120,13 +1477,11 @@ public class AiravataServerHandler implements Airavata.Iface {
                     logger.debug("Airavata cancelled experiment with experiment id : " + airavataExperimentId);
                     break;
             }
-            registryClientPool.returnResource(regClient);
         } catch (RegistryServiceException | AiravataException e) {
             logger.error(airavataExperimentId, "Error while cancelling the experiment...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while cancelling the experiment. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
 
@@ -2143,17 +1498,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public String registerApplicationModule(AuthzToken authzToken, String gatewayId, ApplicationModule applicationModule)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            String result = regClient.registerApplicationModule(gatewayId, applicationModule);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().registerApplicationModule(gatewayId,applicationModule);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error("Error while adding application module...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while adding application module. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -2169,17 +1520,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public ApplicationModule getApplicationModule(AuthzToken authzToken, String appModuleId) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            ApplicationModule result = regClient.getApplicationModule(appModuleId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getApplicationModule(appModuleId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(appModuleId, "Error while retrieving application module...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while retrieving the adding application module. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -2196,87 +1543,28 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public boolean updateApplicationModule(AuthzToken authzToken, String appModuleId, ApplicationModule applicationModule)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.updateApplicationModule(appModuleId, applicationModule);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().updateApplicationModule(appModuleId, applicationModule);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(appModuleId, "Error while updating application module...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while updating application module. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
 
-    /**
-     * Fetch all Application Module Descriptions.
-     *
-     * @return list applicationModule.
-     * Returns the list of all Application Module Objects.
-     */
     @Override
     @SecurityCheck
     public List<ApplicationModule> getAllAppModules(AuthzToken authzToken, String gatewayId) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            List<ApplicationModule> result = regClient.getAllAppModules(gatewayId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
-            logger.error("Error while retrieving all application modules...", e);
-            AiravataSystemException exception = new AiravataSystemException();
-            exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
-            exception.setMessage("Error while retrieving all application modules. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            throw exception;
-        }
-    }
-
-    /**
-     * Fetch all accessible Application Module Descriptions.
-     *
-     * @return list applicationModule.
-     * Returns the list of Application Module Objects that are accessible to the user.
-     */
-    @Override
-    @SecurityCheck
-    public List<ApplicationModule> getAccessibleAppModules(AuthzToken authzToken, String gatewayId, ResourcePermissionType permissionType) throws InvalidRequestException,
-            AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        String userName = authzToken.getClaimsMap().get(Constants.USER_NAME);
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
-        try {
-            List<String> accessibleAppDeploymentIds = new ArrayList<>();
-            if (ServerSettings.isEnableSharing()) {
-                List<SearchCriteria> sharingFilters = new ArrayList<>();
-                SearchCriteria entityTypeFilter = new SearchCriteria();
-                entityTypeFilter.setSearchField(EntitySearchField.ENTITY_TYPE_ID);
-                entityTypeFilter.setSearchCondition(SearchCondition.EQUAL);
-                entityTypeFilter.setValue(gatewayId + ":" + ResourceType.APPLICATION_DEPLOYMENT.name());
-                sharingFilters.add(entityTypeFilter);
-                SearchCriteria permissionTypeFilter = new SearchCriteria();
-                permissionTypeFilter.setSearchField(EntitySearchField.PERMISSION_TYPE_ID);
-                permissionTypeFilter.setSearchCondition(SearchCondition.EQUAL);
-                permissionTypeFilter.setValue(gatewayId + ":" + permissionType.name());
-                sharingFilters.add(permissionTypeFilter);
-                sharingClient.searchEntities(authzToken.getClaimsMap().get(Constants.GATEWAY_ID),
-                        userName + "@" + gatewayId, sharingFilters, 0, -1).forEach(a -> accessibleAppDeploymentIds.add(a.entityId));
-            }
-            List<ApplicationModule> result = regClient.getAccessibleAppModules(gatewayId, accessibleAppDeploymentIds);
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getAllAppModules(gatewayId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error("Error while retrieving all application modules...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while retrieving all application modules. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            sharingClientPool.returnBrokenResource(sharingClient);
             throw exception;
         }
     }
@@ -2292,17 +1580,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public boolean deleteApplicationModule(AuthzToken authzToken, String appModuleId) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.deleteApplicationModule(appModuleId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().deleteApplicationModule(appModuleId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(appModuleId, "Error while deleting application module...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while deleting the application module. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -2317,17 +1601,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public String registerApplicationDeployment(AuthzToken authzToken, String gatewayId, ApplicationDeploymentDescription applicationDeployment)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            String result = regClient.registerApplicationDeployment(gatewayId, applicationDeployment);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().registerApplicationDeployment(gatewayId, applicationDeployment);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error("Error while adding application deployment...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while adding application deployment. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -2343,17 +1623,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public ApplicationDeploymentDescription getApplicationDeployment(AuthzToken authzToken, String appDeploymentId)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            ApplicationDeploymentDescription result = regClient.getApplicationDeployment(appDeploymentId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getApplicationDeployment(appDeploymentId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(appDeploymentId, "Error while retrieving application deployment...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while retrieving application deployment. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -2371,17 +1647,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     public boolean updateApplicationDeployment(AuthzToken authzToken, String appDeploymentId,
                                                ApplicationDeploymentDescription applicationDeployment)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.updateApplicationDeployment(appDeploymentId, applicationDeployment);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().updateApplicationDeployment(appDeploymentId, applicationDeployment);
+        } catch (ApplicationSettingsException|RegistryServiceException e) {
             logger.error(appDeploymentId, "Error while updating application deployment...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while updating application deployment. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -2397,17 +1669,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public boolean deleteApplicationDeployment(AuthzToken authzToken, String appDeploymentId) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.deleteApplicationDeployment(appDeploymentId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().deleteApplicationDeployment(appDeploymentId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(appDeploymentId, "Error while deleting application deployment...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while deleting application deployment. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -2416,69 +1684,19 @@ public class AiravataServerHandler implements Airavata.Iface {
      * Fetch all Application Deployment Descriptions.
      *
      * @return list applicationDeployment.
-     * Returns the list of all Application Deployment Objects.
+     * Returns the list of all application Deployment Objects.
      */
     @Override
     @SecurityCheck
     public List<ApplicationDeploymentDescription> getAllApplicationDeployments(AuthzToken authzToken, String gatewayId)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            List<ApplicationDeploymentDescription> result = regClient.getAllApplicationDeployments(gatewayId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
-            logger.error("Error while retrieving application deployments...", e);
-            AiravataSystemException exception = new AiravataSystemException();
-            exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
-            exception.setMessage("Error while retrieving application deployments. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            throw exception;
-        }
-    }
-
-
-    /**
-     * Fetch all accessible Application Deployment Descriptions.
-     *
-     * @return list applicationDeployment.
-     * Returns the list of Application Deployment Objects that are accessible to the user.
-     */
-    @Override
-    @SecurityCheck
-    public List<ApplicationDeploymentDescription> getAccessibleApplicationDeployments(AuthzToken authzToken, String gatewayId, ResourcePermissionType permissionType)
-            throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        String userName = authzToken.getClaimsMap().get(Constants.USER_NAME);
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
-        try {
-            List<String> accessibleAppDeploymentIds = new ArrayList<>();
-            if (ServerSettings.isEnableSharing()) {
-                List<SearchCriteria> sharingFilters = new ArrayList<>();
-                SearchCriteria entityTypeFilter = new SearchCriteria();
-                entityTypeFilter.setSearchField(EntitySearchField.ENTITY_TYPE_ID);
-                entityTypeFilter.setSearchCondition(SearchCondition.EQUAL);
-                entityTypeFilter.setValue(gatewayId + ":" + ResourceType.APPLICATION_DEPLOYMENT.name());
-                sharingFilters.add(entityTypeFilter);
-                SearchCriteria permissionTypeFilter = new SearchCriteria();
-                permissionTypeFilter.setSearchField(EntitySearchField.PERMISSION_TYPE_ID);
-                permissionTypeFilter.setSearchCondition(SearchCondition.EQUAL);
-                permissionTypeFilter.setValue(gatewayId + ":" + permissionType.name());
-                sharingFilters.add(permissionTypeFilter);
-                sharingClient.searchEntities(authzToken.getClaimsMap().get(Constants.GATEWAY_ID),
-                        userName + "@" + gatewayId, sharingFilters, 0, -1).forEach(a -> accessibleAppDeploymentIds.add(a.entityId));
-            }
-            List<ApplicationDeploymentDescription> result = regClient.getAccessibleApplicationDeployments(gatewayId, accessibleAppDeploymentIds);
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getAllApplicationDeployments(gatewayId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error("Error while retrieving application deployments...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while retrieving application deployments. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            sharingClientPool.returnBrokenResource(sharingClient);
             throw exception;
         }
     }
@@ -2494,17 +1712,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public List<String> getAppModuleDeployedResources(AuthzToken authzToken, String appModuleId) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            List<String> result = regClient.getAppModuleDeployedResources(appModuleId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getAppModuleDeployedResources(appModuleId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(appModuleId, "Error while retrieving application deployments...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while retrieving application deployment. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -2520,17 +1734,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     public String registerApplicationInterface(AuthzToken authzToken, String gatewayId,
                                                ApplicationInterfaceDescription applicationInterface) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            String result = regClient.registerApplicationInterface(gatewayId, applicationInterface);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().registerApplicationInterface(gatewayId, applicationInterface);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error("Error while adding application interface...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while adding application interface. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -2539,8 +1749,8 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public String cloneApplicationInterface(AuthzToken authzToken, String existingAppInterfaceID, String newApplicationName, String gatewayId)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
+            RegistryService.Client regClient = getRegistryServiceClient();
             ApplicationInterfaceDescription existingInterface = regClient.getApplicationInterface(existingAppInterfaceID);
             if (existingInterface == null){
                 logger.error("Provided application interface does not exist.Please provide a valid application interface id...");
@@ -2551,14 +1761,12 @@ public class AiravataServerHandler implements Airavata.Iface {
             existingInterface.setApplicationInterfaceId(airavata_commonsConstants.DEFAULT_ID);
             String interfaceId = regClient.registerApplicationInterface(gatewayId, existingInterface);
             logger.debug("Airavata cloned application interface : " + existingAppInterfaceID + " for gateway id : " + gatewayId );
-            registryClientPool.returnResource(regClient);
             return interfaceId;
-        } catch (Exception e) {
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error("Error while adding application interface...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while adding application interface. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -2574,17 +1782,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public ApplicationInterfaceDescription getApplicationInterface(AuthzToken authzToken, String appInterfaceId)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            ApplicationInterfaceDescription result = regClient.getApplicationInterface(appInterfaceId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getApplicationInterface(appInterfaceId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(appInterfaceId, "Error while retrieving application interface...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while retrieving application interface. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -2602,17 +1806,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     public boolean updateApplicationInterface(AuthzToken authzToken, String appInterfaceId,
                                               ApplicationInterfaceDescription applicationInterface) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.updateApplicationInterface(appInterfaceId, applicationInterface);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().updateApplicationInterface(appInterfaceId, applicationInterface);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(appInterfaceId, "Error while updating application interface...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while updating application interface. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -2628,17 +1828,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public boolean deleteApplicationInterface(AuthzToken authzToken, String appInterfaceId) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.deleteApplicationInterface(appInterfaceId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().deleteApplicationInterface(appInterfaceId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(appInterfaceId, "Error while deleting application interface...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while deleting application interface. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -2653,17 +1849,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public Map<String, String> getAllApplicationInterfaceNames(AuthzToken authzToken, String gatewayId) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            Map<String, String> result = regClient.getAllApplicationInterfaceNames(gatewayId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getAllApplicationInterfaceNames(gatewayId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error("Error while retrieving application interfaces...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while retrieving application interfaces. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -2678,17 +1870,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public List<ApplicationInterfaceDescription> getAllApplicationInterfaces(AuthzToken authzToken, String gatewayId)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            List<ApplicationInterfaceDescription> result = regClient.getAllApplicationInterfaces(gatewayId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getAllApplicationInterfaces(gatewayId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error("Error while retrieving application interfaces...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while retrieving application interfaces. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -2704,17 +1892,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public List<InputDataObjectType> getApplicationInputs(AuthzToken authzToken, String appInterfaceId) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            List<InputDataObjectType> result = regClient.getApplicationInputs(appInterfaceId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getApplicationInputs(appInterfaceId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(appInterfaceId, "Error while retrieving application inputs...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while retrieving application inputs. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -2730,15 +1914,11 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public List<OutputDataObjectType> getApplicationOutputs(AuthzToken authzToken, String appInterfaceId) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            List<OutputDataObjectType> result = regClient.getApplicationOutputs(appInterfaceId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getApplicationOutputs(appInterfaceId);
+        } catch (ApplicationSettingsException e) {
             AiravataSystemException exception = new AiravataSystemException();
             exception.setMessage(e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -2756,17 +1936,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public Map<String, String> getAvailableAppInterfaceComputeResources(AuthzToken authzToken, String appInterfaceId)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            Map<String, String> result = regClient.getAvailableAppInterfaceComputeResources(appInterfaceId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getAvailableAppInterfaceComputeResources(appInterfaceId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(appInterfaceId, "Error while saving compute resource...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while saving compute resource. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -2782,17 +1958,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public String registerComputeResource(AuthzToken authzToken, ComputeResourceDescription computeResourceDescription)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        try {
-            String result = regClient.registerComputeResource(computeResourceDescription);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+    	try {
+            return getRegistryServiceClient().registerComputeResource(computeResourceDescription);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error("Error while saving compute resource...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while saving compute resource. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -2808,17 +1980,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public ComputeResourceDescription getComputeResource(AuthzToken authzToken, String computeResourceId)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        try {
-            ComputeResourceDescription result = regClient.getComputeResource(computeResourceId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+    	try {
+            return getRegistryServiceClient().getComputeResource(computeResourceId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(computeResourceId, "Error while retrieving compute resource...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while retrieving compute resource. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -2833,17 +2001,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public Map<String, String> getAllComputeResourceNames(AuthzToken authzToken) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            Map<String, String> result = regClient.getAllComputeResourceNames();
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getAllComputeResourceNames();
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error("Error while retrieving compute resource...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while retrieving compute resource. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -2860,17 +2024,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public boolean updateComputeResource(AuthzToken authzToken, String computeResourceId, ComputeResourceDescription computeResourceDescription)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        try {
-            boolean result = regClient.updateComputeResource(computeResourceId, computeResourceDescription);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+    	try {
+            return getRegistryServiceClient().updateComputeResource(computeResourceId, computeResourceDescription);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(computeResourceId, "Error while updating compute resource...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while updaing compute resource. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -2886,17 +2046,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public boolean deleteComputeResource(AuthzToken authzToken, String computeResourceId) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        try {
-            boolean result = regClient.deleteComputeResource(computeResourceId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+    	try {
+            return getRegistryServiceClient().deleteComputeResource(computeResourceId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(computeResourceId, "Error while deleting compute resource...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while deleting compute resource. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -2913,17 +2069,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public String registerStorageResource(AuthzToken authzToken, StorageResourceDescription storageResourceDescription)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            String result = regClient.registerStorageResource(storageResourceDescription);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().registerStorageResource(storageResourceDescription);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error("Error while saving storage resource...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while saving storage resource. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -2939,17 +2091,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @Override
     @SecurityCheck
     public StorageResourceDescription getStorageResource(AuthzToken authzToken, String storageResourceId) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            StorageResourceDescription result = regClient.getStorageResource(storageResourceId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getStorageResource(storageResourceId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(storageResourceId, "Error while retrieving storage resource...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while retrieving storage resource. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -2964,17 +2112,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @Override
     @SecurityCheck
     public Map<String, String> getAllStorageResourceNames(AuthzToken authzToken) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            Map<String, String> result = regClient.getAllStorageResourceNames();
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getAllStorageResourceNames();
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error("Error while retrieving storage resource...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while retrieving storage resource. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -2991,17 +2135,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @Override
     @SecurityCheck
     public boolean updateStorageResource(AuthzToken authzToken, String storageResourceId, StorageResourceDescription storageResourceDescription) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.updateStorageResource(storageResourceId, storageResourceDescription);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().updateStorageResource(storageResourceId, storageResourceDescription);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(storageResourceId, "Error while updating storage resource...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while updaing storage resource. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3017,17 +2157,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @Override
     @SecurityCheck
     public boolean deleteStorageResource(AuthzToken authzToken, String storageResourceId) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.deleteStorageResource(storageResourceId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().deleteStorageResource(storageResourceId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(storageResourceId, "Error while deleting storage resource...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while deleting storage resource. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3046,17 +2182,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public String addLocalSubmissionDetails(AuthzToken authzToken, String computeResourceId, int priorityOrder, LOCALSubmission localSubmission)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        try {
-            String result = regClient.addLocalSubmissionDetails(computeResourceId, priorityOrder, localSubmission);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+    	try {
+            return getRegistryServiceClient().addLocalSubmissionDetails(computeResourceId, priorityOrder, localSubmission);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(computeResourceId, "Error while adding job submission interface to resource compute resource...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while adding job submission interface to resource compute resource. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3073,17 +2205,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public boolean updateLocalSubmissionDetails(AuthzToken authzToken, String jobSubmissionInterfaceId, LOCALSubmission localSubmission)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        try {
-            boolean result = regClient.updateLocalSubmissionDetails(jobSubmissionInterfaceId, localSubmission);
-            registryClientPool.returnResource(regClient);
-            return result;
+    	try {
+            return getRegistryServiceClient().updateLocalSubmissionDetails(jobSubmissionInterfaceId, localSubmission);
         } catch (Exception e) {
             logger.error(jobSubmissionInterfaceId, "Error while adding job submission interface to resource compute resource...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while adding job submission interface to resource compute resource. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3092,18 +2220,14 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public LOCALSubmission getLocalJobSubmission(AuthzToken authzToken, String jobSubmissionId) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            LOCALSubmission result = regClient.getLocalJobSubmission(jobSubmissionId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getLocalJobSubmission(jobSubmissionId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             String errorMsg = "Error while retrieving local job submission interface to resource compute resource...";
             logger.error(jobSubmissionId, errorMsg, e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage(errorMsg + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3122,17 +2246,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public String addSSHJobSubmissionDetails(AuthzToken authzToken, String computeResourceId, int priorityOrder, SSHJobSubmission sshJobSubmission)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        try {
-            String result = regClient.addSSHJobSubmissionDetails(computeResourceId, priorityOrder, sshJobSubmission);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+    	try {
+            return getRegistryServiceClient().addSSHJobSubmissionDetails(computeResourceId, priorityOrder, sshJobSubmission);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(computeResourceId, "Error while adding job submission interface to resource compute resource...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while adding job submission interface to resource compute resource. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3151,17 +2271,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public String addSSHForkJobSubmissionDetails(AuthzToken authzToken, String computeResourceId, int priorityOrder, SSHJobSubmission sshJobSubmission)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            String result = regClient.addSSHForkJobSubmissionDetails(computeResourceId, priorityOrder, sshJobSubmission);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().addSSHForkJobSubmissionDetails(computeResourceId, priorityOrder, sshJobSubmission);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(computeResourceId, "Error while adding job submission interface to resource compute resource...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while adding job submission interface to resource compute resource. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3170,18 +2286,14 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public SSHJobSubmission getSSHJobSubmission(AuthzToken authzToken, String jobSubmissionId) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            SSHJobSubmission result = regClient.getSSHJobSubmission(jobSubmissionId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getSSHJobSubmission(jobSubmissionId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             String errorMsg = "Error while retrieving SSH job submission interface to resource compute resource...";
             logger.error(jobSubmissionId, errorMsg, e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage(errorMsg + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3201,17 +2313,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     public String addCloudJobSubmissionDetails(AuthzToken authzToken, String computeResourceId, int priorityOrder,
                                                CloudJobSubmission cloudJobSubmission) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            String result = regClient.addCloudJobSubmissionDetails(computeResourceId, priorityOrder, cloudJobSubmission);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().addCloudJobSubmissionDetails(computeResourceId, priorityOrder, cloudJobSubmission);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(computeResourceId, "Error while adding job submission interface to resource compute resource...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while adding job submission interface to resource compute resource. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3220,58 +2328,46 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public CloudJobSubmission getCloudJobSubmission(AuthzToken authzToken, String jobSubmissionId) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            CloudJobSubmission result = regClient.getCloudJobSubmission(jobSubmissionId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getCloudJobSubmission(jobSubmissionId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             String errorMsg = "Error while retrieving Cloud job submission interface to resource compute resource...";
             logger.error(jobSubmissionId, errorMsg, e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage(errorMsg + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
 
     @Override
     @SecurityCheck
-    public String addUNICOREJobSubmissionDetails(AuthzToken authzToken, String computeResourceId, int priorityOrder,
+	public String addUNICOREJobSubmissionDetails(AuthzToken authzToken, String computeResourceId, int priorityOrder,
                                                  UnicoreJobSubmission unicoreJobSubmission)
-            throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        try {
-            String result = regClient.addUNICOREJobSubmissionDetails(computeResourceId, priorityOrder, unicoreJobSubmission);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
-            logger.error("Error while adding job submission interface to resource compute resource...", e);
-            AiravataSystemException exception = new AiravataSystemException();
-            exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
-            exception.setMessage("Error while adding job submission interface to resource compute resource. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            throw exception;
-        }
-    }
+			throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
+		try {
+	        return getRegistryServiceClient().addUNICOREJobSubmissionDetails(computeResourceId, priorityOrder, unicoreJobSubmission);
+	    } catch (ApplicationSettingsException | RegistryServiceException e) {
+	        logger.error("Error while adding job submission interface to resource compute resource...", e);
+	        AiravataSystemException exception = new AiravataSystemException();
+	        exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
+	        exception.setMessage("Error while adding job submission interface to resource compute resource. More info : " + e.getMessage());
+	        throw exception;
+	    }
+	}
 
     @Override
     @SecurityCheck
     public UnicoreJobSubmission getUnicoreJobSubmission(AuthzToken authzToken, String jobSubmissionId)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            UnicoreJobSubmission result = regClient.getUnicoreJobSubmission(jobSubmissionId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getUnicoreJobSubmission(jobSubmissionId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             String errorMsg = "Error while retrieving Unicore job submission interface to resource compute resource...";
             logger.error(jobSubmissionId, errorMsg, e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage(errorMsg + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3288,17 +2384,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public boolean updateSSHJobSubmissionDetails(AuthzToken authzToken, String jobSubmissionInterfaceId, SSHJobSubmission sshJobSubmission)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        try {
-            boolean result = regClient.updateSSHJobSubmissionDetails(jobSubmissionInterfaceId, sshJobSubmission);
-            registryClientPool.returnResource(regClient);
-            return result;
+    	try {
+            return getRegistryServiceClient().updateSSHJobSubmissionDetails(jobSubmissionInterfaceId, sshJobSubmission);
         } catch (Exception e) {
             logger.error(jobSubmissionInterfaceId, "Error while adding job submission interface to resource compute resource...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while adding job submission interface to resource compute resource. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3315,17 +2407,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public boolean updateCloudJobSubmissionDetails(AuthzToken authzToken, String jobSubmissionInterfaceId, CloudJobSubmission cloudJobSubmission)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.updateCloudJobSubmissionDetails(jobSubmissionInterfaceId, cloudJobSubmission);
-            registryClientPool.returnResource(regClient);
-            return result;
+            return getRegistryServiceClient().updateCloudJobSubmissionDetails(jobSubmissionInterfaceId, cloudJobSubmission);
         } catch (Exception e) {
             logger.error(jobSubmissionInterfaceId, "Error while adding job submission interface to resource compute resource...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while adding job submission interface to resource compute resource. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3334,17 +2422,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public boolean updateUnicoreJobSubmissionDetails(AuthzToken authzToken, String jobSubmissionInterfaceId, UnicoreJobSubmission unicoreJobSubmission)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.updateUnicoreJobSubmissionDetails(jobSubmissionInterfaceId, unicoreJobSubmission);
-            registryClientPool.returnResource(regClient);
-            return result;
+            return getRegistryServiceClient().updateUnicoreJobSubmissionDetails(jobSubmissionInterfaceId, unicoreJobSubmission);
         } catch (Exception e) {
             logger.error(jobSubmissionInterfaceId, "Error while adding job submission interface to resource compute resource...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while adding job submission interface to resource compute resource. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3364,17 +2448,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     public String addLocalDataMovementDetails(AuthzToken authzToken, String resourceId, DMType dmType, int priorityOrder,
                                               LOCALDataMovement localDataMovement) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        try {
-            String result = regClient.addLocalDataMovementDetails(resourceId, dmType, priorityOrder, localDataMovement);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+    	try {
+            return getRegistryServiceClient().addLocalDataMovementDetails(resourceId, dmType, priorityOrder, localDataMovement);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(resourceId, "Error while adding data movement interface to resource resource...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while adding data movement interface to resource. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3391,17 +2471,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public boolean updateLocalDataMovementDetails(AuthzToken authzToken, String dataMovementInterfaceId, LOCALDataMovement localDataMovement)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        try {
-            boolean result = regClient.updateLocalDataMovementDetails(dataMovementInterfaceId, localDataMovement);
-            registryClientPool.returnResource(regClient);
-            return result;
+    	try {
+            return getRegistryServiceClient().updateLocalDataMovementDetails(dataMovementInterfaceId, localDataMovement);
         } catch (Exception e) {
             logger.error(dataMovementInterfaceId, "Error while updating local data movement interface..", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while updating local data movement interface. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3410,18 +2486,14 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public LOCALDataMovement getLocalDataMovement(AuthzToken authzToken, String dataMovementId) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            LOCALDataMovement result = regClient.getLocalDataMovement(dataMovementId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getLocalDataMovement(dataMovementId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             String errorMsg = "Error while retrieving local data movement interface to resource compute resource...";
             logger.error(dataMovementId, errorMsg, e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage(errorMsg + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3441,17 +2513,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public String addSCPDataMovementDetails(AuthzToken authzToken, String resourceId, DMType dmType, int priorityOrder, SCPDataMovement scpDataMovement)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        try {
-            String result = regClient.addSCPDataMovementDetails(resourceId, dmType, priorityOrder, scpDataMovement);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+    	try {
+            return getRegistryServiceClient().addSCPDataMovementDetails(resourceId, dmType, priorityOrder, scpDataMovement);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(resourceId, "Error while adding data movement interface to resource compute resource...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while adding data movement interface to resource compute resource. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3469,17 +2537,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public boolean updateSCPDataMovementDetails(AuthzToken authzToken, String dataMovementInterfaceId, SCPDataMovement scpDataMovement)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        try {
-            boolean result = regClient.updateSCPDataMovementDetails(dataMovementInterfaceId, scpDataMovement);
-            registryClientPool.returnResource(regClient);
-            return result;
+    	try {
+            return getRegistryServiceClient().updateSCPDataMovementDetails(dataMovementInterfaceId, scpDataMovement);
         } catch (Exception e) {
             logger.error(dataMovementInterfaceId, "Error while adding job submission interface to resource compute resource...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while adding job submission interface to resource compute resource. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3488,18 +2552,14 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public SCPDataMovement getSCPDataMovement(AuthzToken authzToken, String dataMovementId) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            SCPDataMovement result = regClient.getSCPDataMovement(dataMovementId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getSCPDataMovement(dataMovementId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             String errorMsg = "Error while retrieving SCP data movement interface to resource compute resource...";
             logger.error(dataMovementId, errorMsg, e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage(errorMsg + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3508,17 +2568,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public String addUnicoreDataMovementDetails(AuthzToken authzToken, String resourceId, DMType dmType, int priorityOrder, UnicoreDataMovement unicoreDataMovement)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            String result = regClient.addUnicoreDataMovementDetails(resourceId, dmType, priorityOrder, unicoreDataMovement);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().addUnicoreDataMovementDetails(resourceId, dmType, priorityOrder, unicoreDataMovement);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(resourceId, "Error while adding data movement interface to resource compute resource...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while adding data movement interface to resource compute resource. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3527,17 +2583,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public boolean updateUnicoreDataMovementDetails(AuthzToken authzToken, String dataMovementInterfaceId, UnicoreDataMovement unicoreDataMovement)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.updateUnicoreDataMovementDetails(dataMovementInterfaceId, unicoreDataMovement);
-            registryClientPool.returnResource(regClient);
-            return result;
+            return getRegistryServiceClient().updateUnicoreDataMovementDetails(dataMovementInterfaceId, unicoreDataMovement);
         } catch (Exception e) {
             logger.error(dataMovementInterfaceId, "Error while updating unicore data movement to compute resource...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while updating unicore data movement to compute resource. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3546,18 +2598,14 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public UnicoreDataMovement getUnicoreDataMovement(AuthzToken authzToken, String dataMovementId) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            UnicoreDataMovement result = regClient.getUnicoreDataMovement(dataMovementId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getUnicoreDataMovement(dataMovementId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             String errorMsg = "Error while retrieving UNICORE data movement interface...";
             logger.error(dataMovementId, errorMsg, e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage(errorMsg + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3577,17 +2625,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     public String addGridFTPDataMovementDetails(AuthzToken authzToken, String computeResourceId, DMType dmType, int priorityOrder,
                                                 GridFTPDataMovement gridFTPDataMovement) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        try {
-            String result = regClient.addGridFTPDataMovementDetails(computeResourceId, dmType, priorityOrder, gridFTPDataMovement);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+    	try {
+            return getRegistryServiceClient().addGridFTPDataMovementDetails(computeResourceId, dmType, priorityOrder, gridFTPDataMovement);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(computeResourceId, "Error while adding data movement interface to resource compute resource...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while adding data movement interface to resource compute resource. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3605,17 +2649,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public boolean updateGridFTPDataMovementDetails(AuthzToken authzToken, String dataMovementInterfaceId, GridFTPDataMovement gridFTPDataMovement)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        try {
-            boolean result = regClient.updateGridFTPDataMovementDetails(dataMovementInterfaceId, gridFTPDataMovement);
-            registryClientPool.returnResource(regClient);
-            return result;
+    	try {
+            return getRegistryServiceClient().updateGridFTPDataMovementDetails(dataMovementInterfaceId, gridFTPDataMovement);
         } catch (Exception e) {
             logger.error(dataMovementInterfaceId, "Error while adding job submission interface to resource compute resource...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while adding job submission interface to resource compute resource. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3624,18 +2664,14 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public GridFTPDataMovement getGridFTPDataMovement(AuthzToken authzToken, String dataMovementId) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            GridFTPDataMovement result = regClient.getGridFTPDataMovement(dataMovementId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getGridFTPDataMovement(dataMovementId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             String errorMsg = "Error while retrieving GridFTP data movement interface to resource compute resource...";
             logger.error(dataMovementId, errorMsg, e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage(errorMsg + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3709,17 +2745,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public boolean deleteJobSubmissionInterface(AuthzToken authzToken, String computeResourceId, String jobSubmissionInterfaceId)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.deleteJobSubmissionInterface(computeResourceId, jobSubmissionInterfaceId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().deleteJobSubmissionInterface(computeResourceId, jobSubmissionInterfaceId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(jobSubmissionInterfaceId, "Error while deleting job submission interface...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while deleting job submission interface. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3735,17 +2767,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public boolean deleteDataMovementInterface(AuthzToken authzToken, String resourceId, String dataMovementInterfaceId, DMType dmType)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.deleteDataMovementInterface(resourceId, dataMovementInterfaceId, dmType);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().deleteDataMovementInterface(resourceId, dataMovementInterfaceId, dmType);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(dataMovementInterfaceId, "Error while deleting data movement interface...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while deleting data movement interface. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3754,17 +2782,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public String registerResourceJobManager(AuthzToken authzToken, ResourceJobManager resourceJobManager) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            String result = regClient.registerResourceJobManager(resourceJobManager);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().registerResourceJobManager(resourceJobManager);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(resourceJobManager.getResourceJobManagerId(), "Error while adding resource job manager...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while adding resource job manager. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3773,17 +2797,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public boolean updateResourceJobManager(AuthzToken authzToken, String resourceJobManagerId, ResourceJobManager updatedResourceJobManager)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.updateResourceJobManager(resourceJobManagerId, updatedResourceJobManager);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().updateResourceJobManager(resourceJobManagerId, updatedResourceJobManager);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(resourceJobManagerId, "Error while updating resource job manager...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while updating resource job manager. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3792,17 +2812,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public ResourceJobManager getResourceJobManager(AuthzToken authzToken,String resourceJobManagerId) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            ResourceJobManager result = regClient.getResourceJobManager(resourceJobManagerId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getResourceJobManager(resourceJobManagerId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(resourceJobManagerId, "Error while retrieving resource job manager...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while retrieving resource job manager. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3811,17 +2827,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public boolean deleteResourceJobManager(AuthzToken authzToken, String resourceJobManagerId) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.deleteResourceJobManager(resourceJobManagerId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().deleteResourceJobManager(resourceJobManagerId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(resourceJobManagerId, "Error while deleting resource job manager...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while deleting resource job manager. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3830,17 +2842,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public boolean deleteBatchQueue(AuthzToken authzToken, String computeResourceId, String queueName) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.deleteBatchQueue(computeResourceId, queueName);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().deleteBatchQueue(computeResourceId, queueName);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(computeResourceId, "Error while deleting batch queue...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while deleting batch queue. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3858,17 +2866,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public String registerGatewayResourceProfile(AuthzToken authzToken, GatewayResourceProfile gatewayResourceProfile)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        try {
-            String result = regClient.registerGatewayResourceProfile(gatewayResourceProfile);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+    	try {
+            return getRegistryServiceClient().registerGatewayResourceProfile(gatewayResourceProfile);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error("Error while registering gateway resource profile...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while registering gateway resource profile. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3884,17 +2888,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public GatewayResourceProfile getGatewayResourceProfile(AuthzToken authzToken, String gatewayID) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            GatewayResourceProfile result = regClient.getGatewayResourceProfile(gatewayID);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getGatewayResourceProfile(gatewayID);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(gatewayID, "Error while retrieving gateway resource profile...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while retrieving gateway resource profile. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3912,17 +2912,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     public boolean updateGatewayResourceProfile(AuthzToken authzToken,
                                                 String gatewayID,
                                                 GatewayResourceProfile gatewayResourceProfile) throws TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.updateGatewayResourceProfile(gatewayID, gatewayResourceProfile);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().updateGatewayResourceProfile(gatewayID, gatewayResourceProfile);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(gatewayID, "Error while updating gateway resource profile...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while updating gateway resource profile. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3937,17 +2933,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @Override
     @SecurityCheck
     public boolean deleteGatewayResourceProfile(AuthzToken authzToken, String gatewayID) throws TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.deleteGatewayResourceProfile(gatewayID);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().deleteGatewayResourceProfile(gatewayID);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(gatewayID, "Error while removing gateway resource profile...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while removing gateway resource profile. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3967,17 +2959,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     public boolean addGatewayComputeResourcePreference(AuthzToken authzToken, String gatewayID, String computeResourceId,
                                                        ComputeResourcePreference computeResourcePreference) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        try {
-            boolean result = regClient.addGatewayComputeResourcePreference(gatewayID, computeResourceId, computeResourcePreference);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+    	try {
+            return getRegistryServiceClient().addGatewayComputeResourcePreference(gatewayID, computeResourceId, computeResourcePreference);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(gatewayID, "Error while registering gateway resource profile preference...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while registering gateway resource profile preference. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -3986,17 +2974,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public boolean addGatewayStoragePreference(AuthzToken authzToken, String gatewayID, String storageResourceId, StoragePreference dataStoragePreference)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.addGatewayStoragePreference(gatewayID, storageResourceId, dataStoragePreference);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().addGatewayStoragePreference(gatewayID, storageResourceId, dataStoragePreference);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(gatewayID, "Error while registering gateway resource profile preference...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while registering gateway resource profile preference. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -4013,17 +2997,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public ComputeResourcePreference getGatewayComputeResourcePreference(AuthzToken authzToken, String gatewayID, String computeResourceId)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        try {
-            ComputeResourcePreference result = regClient.getGatewayComputeResourcePreference(gatewayID, computeResourceId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+    	try {
+            return getRegistryServiceClient().getGatewayComputeResourcePreference(gatewayID, computeResourceId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(gatewayID, "Error while reading gateway compute resource preference...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while reading gateway compute resource preference. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -4031,17 +3011,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @Override
     @SecurityCheck
     public StoragePreference getGatewayStoragePreference(AuthzToken authzToken, String gatewayID, String storageId) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            StoragePreference result = regClient.getGatewayStoragePreference(gatewayID, storageId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getGatewayStoragePreference(gatewayID, storageId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(gatewayID, "Error while reading gateway data storage preference...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while reading gateway data storage preference. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -4057,17 +3033,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public List<ComputeResourcePreference> getAllGatewayComputeResourcePreferences(AuthzToken authzToken, String gatewayID)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        try {
-            List<ComputeResourcePreference> result = regClient.getAllGatewayComputeResourcePreferences(gatewayID);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+    	try {
+            return getRegistryServiceClient().getAllGatewayComputeResourcePreferences(gatewayID);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(gatewayID, "Error while reading gateway compute resource preferences...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while reading gateway compute resource preferences. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -4075,17 +3047,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @Override
     @SecurityCheck
     public List<StoragePreference> getAllGatewayStoragePreferences(AuthzToken authzToken, String gatewayID) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            List<StoragePreference> result = regClient.getAllGatewayStoragePreferences(gatewayID);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getAllGatewayStoragePreferences(gatewayID);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(gatewayID, "Error while reading gateway data storage preferences...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while reading gateway data storage preferences. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -4094,16 +3062,12 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public List<GatewayResourceProfile> getAllGatewayResourceProfiles(AuthzToken authzToken) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            List<GatewayResourceProfile> result = regClient.getAllGatewayResourceProfiles();
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getAllGatewayResourceProfiles();
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while reading retrieving all gateway profiles. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -4122,17 +3086,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     public boolean updateGatewayComputeResourcePreference(AuthzToken authzToken, String gatewayID, String computeResourceId,
                                                           ComputeResourcePreference computeResourcePreference)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        try {
-            boolean result = regClient.updateGatewayComputeResourcePreference(gatewayID, computeResourceId, computeResourcePreference);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+    	try {
+            return getRegistryServiceClient().updateGatewayComputeResourcePreference(gatewayID, computeResourceId, computeResourcePreference);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(gatewayID, "Error while reading gateway compute resource preference...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while updating gateway compute resource preference. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -4140,17 +3100,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @Override
     @SecurityCheck
     public boolean updateGatewayStoragePreference(AuthzToken authzToken, String gatewayID, String storageId, StoragePreference dataStoragePreference) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.updateGatewayStoragePreference(gatewayID, storageId, dataStoragePreference);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().updateGatewayStoragePreference(gatewayID, storageId, dataStoragePreference);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(gatewayID, "Error while reading gateway data storage preference...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while updating gateway data storage preference. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -4167,17 +3123,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public boolean deleteGatewayComputeResourcePreference(AuthzToken authzToken, String gatewayID, String computeResourceId)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        try {
-            boolean result = regClient.deleteGatewayComputeResourcePreference(gatewayID, computeResourceId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+    	try {
+            return getRegistryServiceClient().deleteGatewayComputeResourcePreference(gatewayID, computeResourceId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(gatewayID, "Error while reading gateway compute resource preference...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while updating gateway compute resource preference. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -4185,97 +3137,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @Override
     @SecurityCheck
     public boolean deleteGatewayStoragePreference(AuthzToken authzToken, String gatewayID, String storageId) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.deleteGatewayStoragePreference(gatewayID, storageId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().deleteGatewayStoragePreference(gatewayID, storageId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(gatewayID, "Error while reading gateway data storage preference...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while updating gateway data storage preference. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            throw exception;
-        }
-    }
-
-    @Override
-    @SecurityCheck
-    public List<SSHAccountProvisioner> getSSHAccountProvisioners(AuthzToken authzToken) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-
-        List<SSHAccountProvisioner> sshAccountProvisioners = new ArrayList<>();
-        List<SSHAccountProvisionerProvider> sshAccountProvisionerProviders = SSHAccountProvisionerFactory.getSSHAccountProvisionerProviders();
-        for (SSHAccountProvisionerProvider provider : sshAccountProvisionerProviders) {
-            // TODO: Move this Thrift conversion to utility class
-            SSHAccountProvisioner sshAccountProvisioner = new SSHAccountProvisioner();
-            sshAccountProvisioner.setCanCreateAccount(provider.canCreateAccount());
-            sshAccountProvisioner.setCanInstallSSHKey(provider.canInstallSSHKey());
-            sshAccountProvisioner.setName(provider.getName());
-            List<SSHAccountProvisionerConfigParam> sshAccountProvisionerConfigParams = new ArrayList<>();
-            for (ConfigParam configParam : provider.getConfigParams()) {
-                SSHAccountProvisionerConfigParam sshAccountProvisionerConfigParam = new SSHAccountProvisionerConfigParam();
-                sshAccountProvisionerConfigParam.setName(configParam.getName());
-                sshAccountProvisionerConfigParam.setDescription(configParam.getDescription());
-                sshAccountProvisionerConfigParam.setIsOptional(configParam.isOptional());
-                switch (configParam.getType()){
-                    case STRING:
-                        sshAccountProvisionerConfigParam.setType(SSHAccountProvisionerConfigParamType.STRING);
-                        break;
-                    case CRED_STORE_PASSWORD_TOKEN:
-                        sshAccountProvisionerConfigParam.setType(SSHAccountProvisionerConfigParamType.CRED_STORE_PASSWORD_TOKEN);
-                        break;
-                }
-                sshAccountProvisionerConfigParams.add(sshAccountProvisionerConfigParam);
-            }
-            sshAccountProvisioner.setConfigParams(sshAccountProvisionerConfigParams);
-            sshAccountProvisioners.add(sshAccountProvisioner);
-        }
-        return sshAccountProvisioners;
-    }
-
-    @Override
-    @SecurityCheck
-    public boolean doesUserHaveSSHAccount(AuthzToken authzToken, String computeResourceId, String userId) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        try {
-            String gatewayId = authzToken.getClaimsMap().get(Constants.GATEWAY_ID);
-            return SSHAccountManager.doesUserHaveSSHAccount(gatewayId, computeResourceId, userId);
-        } catch (Exception e) {
-            String errorMessage = "Error occurred while checking if [" + userId + "] has an SSH Account on [" +
-                    computeResourceId + "].";
-            logger.error(errorMessage, e);
-            AiravataSystemException exception = new AiravataSystemException();
-            exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
-            exception.setMessage(errorMessage + " More info : " + e.getMessage());
-            throw exception;
-        }
-    }
-
-    @Override
-    @SecurityCheck
-    public UserComputeResourcePreference setupUserComputeResourcePreferencesForSSH(AuthzToken authzToken, String computeResourceId, String userId, String airavataCredStoreToken) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        String gatewayId = authzToken.getClaimsMap().get(Constants.GATEWAY_ID);
-        CredentialStoreService.Client csClient = csClientPool.getResource();
-        SSHCredential sshCredential = null;
-        try {
-            sshCredential = csClient.getSSHCredential(airavataCredStoreToken, gatewayId);
-        }catch (Exception e){
-            logger.error("Error occurred while retrieving SSH Credential", e);
-            AiravataSystemException exception = new AiravataSystemException();
-            exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
-            exception.setMessage("Error occurred while retrieving SSH Credential. More info : " + e.getMessage());
-            csClientPool.returnBrokenResource(csClient);
-            throw exception;
-        }
-
-        try {
-            UserComputeResourcePreference userComputeResourcePreference = SSHAccountManager.setupSSHAccount(gatewayId, computeResourceId, userId, sshCredential);
-            return userComputeResourcePreference;
-        }catch (Exception e){
-            logger.error("Error occurred while automatically setting up SSH account for user [" + userId + "]", e);
-            AiravataSystemException exception = new AiravataSystemException();
-            exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
-            exception.setMessage("Error occurred while automatically setting up SSH account for user [" + userId + "]. More info : " + e.getMessage());
             throw exception;
         }
     }
@@ -4283,7 +3151,7 @@ public class AiravataServerHandler implements Airavata.Iface {
     /**
      * Register a User Resource Profile.
      *
-     * @param userResourceProfile User Resource Profile Object.
+     * @param UserResourceProfile User Resource Profile Object.
      *   The userId should be obtained from Airavata user profile registration and passed to register a corresponding
      *      resource profile.
      * @return status.
@@ -4293,17 +3161,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public String registerUserResourceProfile(AuthzToken authzToken, UserResourceProfile userResourceProfile)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            String result = regClient.registerUserResourceProfile(userResourceProfile);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().registerUserResourceProfile(userResourceProfile);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error("Error while registering user resource profile...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while registering user resource profile. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -4322,17 +3186,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public UserResourceProfile getUserResourceProfile(AuthzToken authzToken, String userId, String gatewayID) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            UserResourceProfile result = regClient.getUserResourceProfile(userId, gatewayID);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getUserResourceProfile(userId, gatewayID);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(userId, "Error while retrieving user resource profile...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while retrieving user resource profile. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -4352,17 +3212,13 @@ public class AiravataServerHandler implements Airavata.Iface {
                                              String userId,
                                              String gatewayID,
                                              UserResourceProfile userResourceProfile) throws TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.updateUserResourceProfile(userId, gatewayID, userResourceProfile);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().updateUserResourceProfile(userId, gatewayID, userResourceProfile);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(userId, "Error while updating user resource profile...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while updating user resource profile. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -4378,17 +3234,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @Override
     @SecurityCheck
     public boolean deleteUserResourceProfile(AuthzToken authzToken, String userId, String gatewayID) throws TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.deleteUserResourceProfile(userId, gatewayID);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().deleteUserResourceProfile(userId, gatewayID);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(userId, "Error while removing user resource profile...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while removing user resource profile. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -4409,17 +3261,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     public boolean addUserComputeResourcePreference(AuthzToken authzToken, String userId, String gatewayID, String userComputeResourceId,
                                                     UserComputeResourcePreference userComputeResourcePreference) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.addUserComputeResourcePreference(userId, gatewayID, userComputeResourceId, userComputeResourcePreference);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().addUserComputeResourcePreference(userId, gatewayID, userComputeResourceId, userComputeResourcePreference);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(userId, "Error while registering user resource profile preference...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while registering user resource profile preference. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -4428,17 +3276,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public boolean addUserStoragePreference(AuthzToken authzToken, String userId, String gatewayID, String userStorageResourceId, UserStoragePreference dataStoragePreference)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.addUserStoragePreference(userId, gatewayID, userStorageResourceId, dataStoragePreference);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().addUserStoragePreference(userId, gatewayID, userStorageResourceId, dataStoragePreference);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(userId, "Error while registering user storage preference...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while registering user storage preference. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -4456,17 +3300,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public UserComputeResourcePreference getUserComputeResourcePreference(AuthzToken authzToken, String userId, String gatewayID, String userComputeResourceId)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            UserComputeResourcePreference result = regClient.getUserComputeResourcePreference(userId, gatewayID, userComputeResourceId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getUserComputeResourcePreference(userId, gatewayID, userComputeResourceId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(userId, "Error while reading user compute resource preference...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while reading user compute resource preference. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -4474,17 +3314,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @Override
     @SecurityCheck
     public UserStoragePreference getUserStoragePreference(AuthzToken authzToken, String userId, String gatewayID, String userStorageId) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            UserStoragePreference result = regClient.getUserStoragePreference(userId, gatewayID, userStorageId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getUserStoragePreference(userId, gatewayID, userStorageId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(userId, "Error while reading user data storage preference...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while reading user data storage preference. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -4501,17 +3337,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public List<UserComputeResourcePreference> getAllUserComputeResourcePreferences(AuthzToken authzToken, String userId, String gatewayID)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            List<UserComputeResourcePreference> result = regClient.getAllUserComputeResourcePreferences(userId, gatewayID);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getAllUserComputeResourcePreferences(userId, gatewayID);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(userId, "Error while reading User compute resource preferences...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while reading User compute resource preferences. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -4519,17 +3351,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @Override
     @SecurityCheck
     public List<UserStoragePreference> getAllUserStoragePreferences(AuthzToken authzToken, String userId, String gatewayID) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            List<UserStoragePreference> result = regClient.getAllUserStoragePreferences(userId, gatewayID);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getAllUserStoragePreferences(userId, gatewayID);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(userId, "Error while reading User data storage preferences...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while reading User data storage preferences. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -4538,16 +3366,12 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public List<UserResourceProfile> getAllUserResourceProfiles(AuthzToken authzToken) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            List<UserResourceProfile> result = regClient.getAllUserResourceProfiles();
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getAllUserResourceProfiles();
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while reading retrieving all user resource profiles. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -4567,17 +3391,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     public boolean updateUserComputeResourcePreference(AuthzToken authzToken, String userId, String gatewayID, String userComputeResourceId,
                                                        UserComputeResourcePreference userComputeResourcePreference)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.updateUserComputeResourcePreference(userId, gatewayID, userComputeResourceId, userComputeResourcePreference);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().updateUserComputeResourcePreference(userId, gatewayID, userComputeResourceId, userComputeResourcePreference);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(userId, "Error while reading user compute resource preference...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while updating user compute resource preference. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -4585,17 +3405,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @Override
     @SecurityCheck
     public boolean updateUserStoragePreference(AuthzToken authzToken, String userId, String gatewayID, String userStorageId, UserStoragePreference dataStoragePreference) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.updateUserStoragePreference(userId, gatewayID, userStorageId, dataStoragePreference);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().updateUserStoragePreference(userId, gatewayID, userStorageId, dataStoragePreference);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(userId, "Error while reading user data storage preference...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while updating user data storage preference. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -4613,17 +3429,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public boolean deleteUserComputeResourcePreference(AuthzToken authzToken, String userId,String gatewayID, String userComputeResourceId)
             throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.deleteUserComputeResourcePreference(userId, gatewayID, userComputeResourceId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().deleteUserComputeResourcePreference(userId, gatewayID, userComputeResourceId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(userId, "Error while reading user compute resource preference...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while updating user compute resource preference. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -4631,17 +3443,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @Override
     @SecurityCheck
     public boolean deleteUserStoragePreference(AuthzToken authzToken, String userId, String gatewayID, String userStorageId) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            boolean result = regClient.deleteUserStoragePreference(userId, gatewayID, userStorageId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().deleteUserStoragePreference(userId, gatewayID, userStorageId);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             logger.error(userId, "Error while reading user data storage preference...", e);
             AiravataSystemException exception = new AiravataSystemException();
             exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage("Error while updating user data storage preference. More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -4650,153 +3458,109 @@ public class AiravataServerHandler implements Airavata.Iface {
 
     @Override
     @SecurityCheck
-    public List<String> getAllWorkflows(AuthzToken authzToken, String gatewayId) throws InvalidRequestException,
-            AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        try {
-            List<String> result = regClient.getAllWorkflows(gatewayId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
-            String msg = "Error in retrieving all workflow template Ids.";
-            logger.error(msg, e);
-            AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
-            exception.setMessage(msg+" More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            throw exception;
-        }
-    }
+	public List<String> getAllWorkflows(AuthzToken authzToken, String gatewayId) throws InvalidRequestException,
+			AiravataClientException, AiravataSystemException, AuthorizationException, TException {
 
-    @Override
-    public List<QueueStatusModel> getLatestQueueStatuses(AuthzToken authzToken) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            List<QueueStatusModel> result = regClient.getLatestQueueStatuses();
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
-            String msg = "Error in retrieving queue statuses";
-            logger.error(msg, e);
-            AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
+			return getRegistryServiceClient().getAllWorkflows(gatewayId);
+		} catch (ApplicationSettingsException | RegistryServiceException e) {
+			String msg = "Error in retrieving all workflow template Ids.";
+			logger.error(msg, e);
+			AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage(msg+" More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
-        }
-    }
+		}
+	}
 
-    @Override
+	@Override
     @SecurityCheck
-    public WorkflowModel getWorkflow(AuthzToken authzToken, String workflowTemplateId)
-            throws InvalidRequestException, AiravataClientException, AuthorizationException, AiravataSystemException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        try {
-            WorkflowModel result = regClient.getWorkflow(workflowTemplateId);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
-            String msg = "Error in retrieving the workflow "+workflowTemplateId+".";
-            logger.error(msg, e);
-            AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
+	public WorkflowModel getWorkflow(AuthzToken authzToken, String workflowTemplateId)
+			throws InvalidRequestException, AiravataClientException, AuthorizationException, AiravataSystemException, TException {
+		try {
+			return getRegistryServiceClient().getWorkflow(workflowTemplateId);
+		} catch (ApplicationSettingsException | RegistryServiceException e) {
+			String msg = "Error in retrieving the workflow "+workflowTemplateId+".";
+			logger.error(msg, e);
+			AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage(msg+" More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
-        }
-    }
+		}
+	}
 
-    @Override
+	@Override
     @SecurityCheck
-    public void deleteWorkflow(AuthzToken authzToken, String workflowTemplateId)
-            throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        try {
-            regClient.deleteWorkflow(workflowTemplateId);
-            registryClientPool.returnResource(regClient);
-            return;
-        } catch (Exception e) {
-            String msg = "Error in deleting the workflow "+workflowTemplateId+".";
-            logger.error(msg, e);
-            AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
+	public void deleteWorkflow(AuthzToken authzToken, String workflowTemplateId)
+			throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
+		try {
+			getRegistryServiceClient().deleteWorkflow(workflowTemplateId);
+		} catch (ApplicationSettingsException | RegistryServiceException e) {
+			String msg = "Error in deleting the workflow "+workflowTemplateId+".";
+			logger.error(msg, e);
+			AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage(msg+" More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
-        }
-    }
+		}
+	}
 
-    @Override
+	@Override
     @SecurityCheck
-    public String registerWorkflow(AuthzToken authzToken, String gatewayId, WorkflowModel workflow)
-            throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
+	public String registerWorkflow(AuthzToken authzToken, String gatewayId, WorkflowModel workflow)
+			throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
         try {
-            String result = regClient.registerWorkflow(gatewayId, workflow);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
-            String msg = "Error in registering the workflow "+workflow.getName()+".";
-            logger.error(msg, e);
-            AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
+			return getRegistryServiceClient().registerWorkflow(gatewayId, workflow);
+		} catch (ApplicationSettingsException | RegistryServiceException e) {
+			String msg = "Error in registering the workflow "+workflow.getName()+".";
+			logger.error(msg, e);
+			AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage(msg+" More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
-        }
-    }
+		}
+	}
 
-    @Override
+	@Override
     @SecurityCheck
-    public void updateWorkflow(AuthzToken authzToken, String workflowTemplateId, WorkflowModel workflow)
-            throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        try {
-            regClient.updateWorkflow(workflowTemplateId, workflow);
-            registryClientPool.returnResource(regClient);
-            return;
-        } catch (Exception e) {
-            String msg = "Error in updating the workflow "+workflow.getName()+".";
-            logger.error(msg, e);
-            AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
+	public void updateWorkflow(AuthzToken authzToken, String workflowTemplateId, WorkflowModel workflow)
+			throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
+		try {
+			getRegistryServiceClient().updateWorkflow(workflowTemplateId, workflow);
+		} catch (ApplicationSettingsException | RegistryServiceException e) {
+			String msg = "Error in updating the workflow "+workflow.getName()+".";
+			logger.error(msg, e);
+			AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage(msg+" More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
-        }
-    }
+		}
+	}
 
-    @Override
+	@Override
     @SecurityCheck
-    public String getWorkflowTemplateId(AuthzToken authzToken, String workflowName)
-            throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        try {
-            String result = regClient.getWorkflowTemplateId(workflowName);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
-            String msg = "Error in retrieving the workflow template id for "+workflowName+".";
-            logger.error(msg, e);
-            AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
+	public String getWorkflowTemplateId(AuthzToken authzToken, String workflowName)
+			throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
+		try {
+			return getRegistryServiceClient().getWorkflowTemplateId(workflowName);
+		} catch (ApplicationSettingsException | RegistryServiceException e) {
+			String msg = "Error in retrieving the workflow template id for "+workflowName+".";
+			logger.error(msg, e);
+			AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage(msg+" More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
-        }
-    }
+		}
+	}
 
-    @Override
+	@Override
     @SecurityCheck
-    public boolean isWorkflowExistWithName(AuthzToken authzToken, String workflowName)
-            throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        try {
-            boolean result = regClient.isWorkflowExistWithName(workflowName);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
-            String msg = "Error in veriying the workflow for workflow name "+workflowName+".";
-            logger.error(msg, e);
-            AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
+	public boolean isWorkflowExistWithName(AuthzToken authzToken, String workflowName)
+			throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
+		try {
+			return getRegistryServiceClient().isWorkflowExistWithName(workflowName);
+		} catch (ApplicationSettingsException | RegistryServiceException e) {
+			String msg = "Error in veriying the workflow for workflow name "+workflowName+".";
+			logger.error(msg, e);
+			AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage(msg+" More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
-        }
-    }
+		}
+	}
 
 
     /**
@@ -4809,17 +3573,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public String registerDataProduct(AuthzToken authzToken, DataProductModel dataProductModel) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            String result = regClient.registerDataProduct(dataProductModel);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().registerDataProduct(dataProductModel);
+        } catch (RegistryServiceException | ApplicationSettingsException e) {
             String msg = "Error in registering the data resource"+dataProductModel.getProductName()+".";
             logger.error(msg, e);
             AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage(msg+" More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -4828,17 +3588,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public DataProductModel getDataProduct(AuthzToken authzToken, String productUri) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            DataProductModel result = regClient.getDataProduct(productUri);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getDataProduct(productUri);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             String msg = "Error in retreiving the data product "+productUri+".";
             logger.error(msg, e);
             AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage(msg+" More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -4847,17 +3603,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public String registerReplicaLocation(AuthzToken authzToken, DataReplicaLocationModel replicaLocationModel) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            String result = regClient.registerReplicaLocation(replicaLocationModel);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().registerReplicaLocation(replicaLocationModel);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             String msg = "Error in retreiving the replica "+replicaLocationModel.getReplicaName()+".";
             logger.error(msg, e);
             AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage(msg+" More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -4866,17 +3618,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public DataProductModel getParentDataProduct(AuthzToken authzToken, String productUri) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            DataProductModel result = regClient.getParentDataProduct(productUri);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getParentDataProduct(productUri);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             String msg = "Error in retreiving the parent data product for "+ productUri+".";
             logger.error(msg, e);
             AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage(msg+" More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -4885,17 +3633,13 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public List<DataProductModel> getChildDataProducts(AuthzToken authzToken, String productUri) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
         try {
-            List<DataProductModel> result = regClient.getChildDataProducts(productUri);
-            registryClientPool.returnResource(regClient);
-            return result;
-        } catch (Exception e) {
+            return getRegistryServiceClient().getChildDataProducts(productUri);
+        } catch (ApplicationSettingsException | RegistryServiceException e) {
             String msg = "Error in retreiving the child products for "+productUri+".";
             logger.error(msg, e);
             AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage(msg+" More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -4913,28 +3657,21 @@ public class AiravataServerHandler implements Airavata.Iface {
     public boolean shareResourceWithUsers(AuthzToken authzToken, String resourceId, ResourceType resourceType,
                                           Map<String, ResourcePermissionType> userPermissionList) throws InvalidRequestException,
             AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
         try {
             for(Map.Entry<String, ResourcePermissionType> userPermission : userPermissionList.entrySet()){
-                String gatewayId = authzToken.getClaimsMap().get(Constants.GATEWAY_ID);
                 if(userPermission.getValue().equals(ResourcePermissionType.WRITE))
-                    sharingClient.shareEntityWithUsers(gatewayId, resourceId,
+                    sharingRegistryServerHandler.shareEntityWithUsers(resourceId,
                             Arrays.asList(userPermission.getKey()), authzToken.getClaimsMap().get(Constants.GATEWAY_ID) + ":" + "WRITE", true);
                 else
-                    sharingClient.shareEntityWithUsers(gatewayId, resourceId,
-                            Arrays.asList(userPermission.getKey()), authzToken.getClaimsMap().get(Constants.GATEWAY_ID) + ":" + "READ", true);
+                    sharingRegistryServerHandler.shareEntityWithUsers(resourceId,
+                            Arrays.asList(userPermission.getKey()), authzToken.getClaimsMap().get("GatewatId") + ":" + "READ", true);
             }
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
             return true;
         } catch (Exception e) {
             String msg = "Error in sharing resource with users. Resource ID : " + resourceId + " Resource Type : " + resourceType.toString() ;
             logger.error(msg, e);
             AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage(msg + " More info : " + e.getMessage());
-            sharingClientPool.returnBrokenResource(sharingClient);
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -4943,28 +3680,21 @@ public class AiravataServerHandler implements Airavata.Iface {
     @SecurityCheck
     public boolean revokeSharingOfResourceFromUsers(AuthzToken authzToken, String resourceId, ResourceType resourceType,
                                                     Map<String, ResourcePermissionType> userPermissionList) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
         try {
             for(Map.Entry<String, ResourcePermissionType> userPermission : userPermissionList.entrySet()){
-                String gatewayId = authzToken.getClaimsMap().get(Constants.GATEWAY_ID);
                 if(userPermission.getValue().equals(ResourcePermissionType.WRITE))
-                    sharingClient.revokeEntitySharingFromUsers(gatewayId, resourceId,
+                    sharingRegistryServerHandler.revokeEntitySharingFromUsers(resourceId,
                             Arrays.asList(userPermission.getKey()), authzToken.getClaimsMap().get(Constants.GATEWAY_ID) + ":" + "WRITE");
                 else
-                    sharingClient.revokeEntitySharingFromUsers(gatewayId, resourceId,
+                    sharingRegistryServerHandler.revokeEntitySharingFromUsers(resourceId,
                             Arrays.asList(userPermission.getKey()), authzToken.getClaimsMap().get(Constants.GATEWAY_ID) + ":" + "READ");
             }
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
             return true;
         } catch (Exception e) {
             String msg = "Error in revoking access to resouce from users. Resource ID : " + resourceId + " Resource Type : " + resourceType.toString() ;
             logger.error(msg, e);
             AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage(msg + " More info : " + e.getMessage());
-            sharingClientPool.returnBrokenResource(sharingClient);
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
@@ -4972,508 +3702,90 @@ public class AiravataServerHandler implements Airavata.Iface {
     @Override
     @SecurityCheck
     public List<String> getAllAccessibleUsers(AuthzToken authzToken, String resourceId, ResourceType resourceType, ResourcePermissionType permissionType) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
-        try {
-            HashSet<String> accessibleUsers = new HashSet<>();
-            if (permissionType.equals(ResourcePermissionType.WRITE)) {
-                sharingClient.getListOfSharedUsers(authzToken.getClaimsMap().get(Constants.GATEWAY_ID),
-                        resourceId, authzToken.getClaimsMap().get(Constants.GATEWAY_ID)
-                                + ":WRITE").stream().forEach(u -> accessibleUsers.add(u.userId));
-                sharingClient.getListOfSharedUsers(authzToken.getClaimsMap().get(Constants.GATEWAY_ID),
-                        resourceId, authzToken.getClaimsMap().get(Constants.GATEWAY_ID)
-                                + ":OWNER").stream().forEach(u -> accessibleUsers.add(u.userId));
-            } else if (permissionType.equals(ResourcePermissionType.READ)) {
-                sharingClient.getListOfSharedUsers(authzToken.getClaimsMap().get(Constants.GATEWAY_ID),
-                        resourceId, authzToken.getClaimsMap().get(Constants.GATEWAY_ID)
-                                + ":READ").stream().forEach(u -> accessibleUsers.add(u.userId));
-                sharingClient.getListOfSharedUsers(authzToken.getClaimsMap().get(Constants.GATEWAY_ID),
-                        resourceId, authzToken.getClaimsMap().get(Constants.GATEWAY_ID)
-                                + ":OWNER").stream().forEach(u -> accessibleUsers.add(u.userId));
-            } else if (permissionType.equals(ResourcePermissionType.OWNER)) {
-                sharingClient.getListOfSharedUsers(authzToken.getClaimsMap().get(Constants.GATEWAY_ID),
-                        resourceId, authzToken.getClaimsMap().get(Constants.GATEWAY_ID)
-                                + ":OWNER").stream().forEach(u -> accessibleUsers.add(u.userId));
-            }
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
-            return new ArrayList<>(accessibleUsers);
+        try {
+            List<String> accessibleUsers = new ArrayList<>();
+            if(permissionType.equals(ResourcePermissionType.WRITE))
+            sharingRegistryServerHandler.getListOfSharedUsers(resourceId, authzToken.getClaimsMap().get(Constants.GATEWAY_ID) + ":WRITE").stream().forEach(u->accessibleUsers.add(u.userId));
+            return accessibleUsers;
         } catch (Exception e) {
             String msg = "Error in getting all accessible users for resource. Resource ID : " + resourceId + " Resource Type : " + resourceType.toString() ;
             logger.error(msg, e);
             AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
             exception.setMessage(msg + " More info : " + e.getMessage());
-            sharingClientPool.returnBrokenResource(sharingClient);
-            registryClientPool.returnBrokenResource(regClient);
-            throw exception;
-        }
-    }
-
-    @Override
-    @SecurityCheck
-    public void createGroupResourceProfile(AuthzToken authzToken, GroupResourceProfile groupResourceProfile) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
-        String userName = authzToken.getClaimsMap().get(Constants.USER_NAME);
-        try {
-            String groupResourceProfileId = regClient.createGroupResourceProfile(groupResourceProfile);
-            if(ServerSettings.isEnableSharing()) {
-                try {
-                    Entity entity = new Entity();
-                    entity.setEntityId(groupResourceProfileId);
-                    entity.setDomainId(groupResourceProfile.getGatewayId());
-                    entity.setEntityTypeId(groupResourceProfile.getGatewayId() + ":" + "GROUP_RESOURCE_PROFILE");
-                    entity.setOwnerId(userName + "@" + groupResourceProfile.getGatewayId());
-                    entity.setName(groupResourceProfile.getGroupResourceProfileName());
-
-                    sharingClient.createEntity(entity);
-                } catch (Exception ex) {
-                    logger.error(ex.getMessage(), ex);
-                    logger.error("Rolling back group resource profile creation Group Resource Profile ID : " + groupResourceProfileId);
-                    regClient.removeGroupResourceProfile(groupResourceProfileId);
-                    AiravataSystemException ase = new AiravataSystemException();
-                    ase.setMessage("Failed to create sharing registry record");
-                    throw ase;
-                }
-            }
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
-        } catch (Exception e) {
-            String msg = "Error creating group resource profile.";
-            logger.error(msg, e);
-            AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
-            exception.setMessage(msg+" More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            throw exception;
-        }
-    }
-
-    @Override
-    @SecurityCheck
-    public void updateGroupResourceProfile(AuthzToken authzToken, GroupResourceProfile groupResourceProfile) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
-        try {
-            if(ServerSettings.isEnableSharing()) {
-                try {
-                    String gatewayId = authzToken.getClaimsMap().get(Constants.GATEWAY_ID);
-                    String userId = authzToken.getClaimsMap().get(Constants.USER_NAME);
-                    if (!sharingClient.userHasAccess(gatewayId, userId + "@" + gatewayId,
-                            groupResourceProfile.getGroupResourceProfileId(), gatewayId + ":WRITE")){
-                        throw new AuthorizationException("User does not have permission to update group resource profile");
-                    }
-                } catch (Exception e) {
-                    throw new AuthorizationException("User does not have permission to update group resource profile");
-                }
-            }
-            regClient.updateGroupResourceProfile(groupResourceProfile);
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
-        } catch (Exception e) {
-            String msg = "Error updating group resource profile. groupResourceProfileId: "+groupResourceProfile.getGroupResourceProfileId();
-            logger.error(msg, e);
-            AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
-            exception.setMessage(msg+" More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
             throw exception;
         }
     }
 
     @Override
     @SecurityCheck
-    public GroupResourceProfile getGroupResourceProfile(AuthzToken authzToken, String groupResourceProfileId) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
+    public boolean createGroup(AuthzToken authzToken, GroupModel groupModel) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
         try {
-            if(ServerSettings.isEnableSharing()) {
-                try {
-                    String gatewayId = authzToken.getClaimsMap().get(Constants.GATEWAY_ID);
-                    String userId = authzToken.getClaimsMap().get(Constants.USER_NAME);
-                    if (!sharingClient.userHasAccess(gatewayId, userId + "@" + gatewayId,
-                            groupResourceProfileId, gatewayId + ":READ")){
-                        throw new AuthorizationException("User does not have permission to access group resource profile");
-                    }
-                } catch (Exception e) {
-                    throw new AuthorizationException("User does not have permission to access group resource profile");
-                }
-            }
-            GroupResourceProfile groupResourceProfile = regClient.getGroupResourceProfile(groupResourceProfileId);
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
-            return groupResourceProfile;
+            throw new UnsupportedOperationException("Method not supported yet");
         } catch (Exception e) {
-            String msg = "Error retrieving group resource profile. groupResourceProfileId: "+ groupResourceProfileId;
+            String msg = "Error Creating Group" ;
             logger.error(msg, e);
             AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
-            exception.setMessage(msg+" More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            throw exception;
-        }
-    }
-
-    @Override
-    @SecurityCheck
-    public boolean removeGroupResourceProfile(AuthzToken authzToken, String groupResourceProfileId) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
-        try {
-            if(ServerSettings.isEnableSharing()) {
-                try {
-                    String gatewayId = authzToken.getClaimsMap().get(Constants.GATEWAY_ID);
-                    String userId = authzToken.getClaimsMap().get(Constants.USER_NAME);
-                    if (!sharingClient.userHasAccess(gatewayId, userId + "@" + gatewayId,
-                            groupResourceProfileId, gatewayId + ":WRITE")){
-                        throw new AuthorizationException("User does not have permission to remove group resource profile");
-                    }
-                } catch (Exception e) {
-                    throw new AuthorizationException("User does not have permission to remove group resource profile");
-                }
-            }
-            boolean result = regClient.removeGroupResourceProfile(groupResourceProfileId);
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
-            return result;
-        } catch (Exception e) {
-            String msg = "Error removing group resource profile. groupResourceProfileId: "+ groupResourceProfileId;
-            logger.error(msg, e);
-            AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
-            exception.setMessage(msg+" More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            throw exception;
-        }
-    }
-
-    @Override
-    @SecurityCheck
-    public List<GroupResourceProfile> getGroupResourceList(AuthzToken authzToken, String gatewayId) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
-        String userName = authzToken.getClaimsMap().get(Constants.USER_NAME);
-        try {
-            if (ServerSettings.isEnableSharing()) {
-                List<String> accessibleGroupResProfileIds = new ArrayList<>();
-                List<SearchCriteria> filters = new ArrayList<>();
-                SearchCriteria searchCriteria = new SearchCriteria();
-                searchCriteria.setSearchField(EntitySearchField.ENTITY_TYPE_ID);
-                searchCriteria.setSearchCondition(SearchCondition.EQUAL);
-                searchCriteria.setValue(gatewayId + ":" + ResourceType.GROUP_RESOURCE_PROFILE.name());
-                filters.add(searchCriteria);
-                sharingClient.searchEntities(authzToken.getClaimsMap().get(Constants.GATEWAY_ID),
-                        userName + "@" + gatewayId, filters, 0, -1).stream().forEach(p -> accessibleGroupResProfileIds
-                        .add(p.entityId));
-                // TODO: push accessibleGroupResProfileIds filtering down
-                List<GroupResourceProfile> groupResourceProfileList = regClient.getGroupResourceList(gatewayId);
-                registryClientPool.returnResource(regClient);
-                sharingClientPool.returnResource(sharingClient);
-                return groupResourceProfileList.stream()
-                        .filter(grp -> accessibleGroupResProfileIds.contains(grp.getGroupResourceProfileId()))
-                        .collect(Collectors.toList());
-            } else {
-                List<GroupResourceProfile> groupResourceProfileList = regClient.getGroupResourceList(gatewayId);
-                registryClientPool.returnResource(regClient);
-                sharingClientPool.returnResource(sharingClient);
-                return groupResourceProfileList;
-            }
-        } catch (Exception e) {
-            String msg = "Error retrieving list group resource profile list. GatewayId: "+ gatewayId;
-            logger.error(msg, e);
-            AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
-            exception.setMessage(msg+" More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            sharingClientPool.returnBrokenResource(sharingClient);
-            throw exception;
-        }
-    }
-
-    @Override
-    @SecurityCheck
-    public boolean removeGroupComputePrefs(AuthzToken authzToken, String computeResourceId, String groupResourceProfileId) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
-        try {
-            if(ServerSettings.isEnableSharing()) {
-                try {
-                    String gatewayId = authzToken.getClaimsMap().get(Constants.GATEWAY_ID);
-                    String userId = authzToken.getClaimsMap().get(Constants.USER_NAME);
-                    if (!sharingClient.userHasAccess(gatewayId, userId + "@" + gatewayId,
-                            groupResourceProfileId, gatewayId + ":WRITE")){
-                        throw new AuthorizationException("User does not have permission to remove group compute preferences");
-                    }
-                } catch (Exception e) {
-                    throw new AuthorizationException("User does not have permission to remove group compute preferences");
-                }
-            }
-            boolean result = regClient.removeGroupComputePrefs(computeResourceId, groupResourceProfileId);
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
-            return result;
-        } catch (Exception e) {
-            String msg = "Error removing group compute resource preferences. GroupResourceProfileId: "+ groupResourceProfileId;
-            logger.error(msg, e);
-            AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
-            exception.setMessage(msg+" More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            throw exception;
-        }
-    }
-
-    @Override
-    @SecurityCheck
-    public boolean removeGroupComputeResourcePolicy(AuthzToken authzToken, String resourcePolicyId) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
-        try {
-            if(ServerSettings.isEnableSharing()) {
-                try {
-                    ComputeResourcePolicy computeResourcePolicy = regClient.getGroupComputeResourcePolicy(resourcePolicyId);
-                    String gatewayId = authzToken.getClaimsMap().get(Constants.GATEWAY_ID);
-                    String userId = authzToken.getClaimsMap().get(Constants.USER_NAME);
-                    if (!sharingClient.userHasAccess(gatewayId, userId + "@" + gatewayId,
-                            computeResourcePolicy.getGroupResourceProfileId(), gatewayId + ":WRITE")){
-                        throw new AuthorizationException("User does not have permission to remove group compute resource policy");
-                    }
-                } catch (Exception e) {
-                    throw new AuthorizationException("User does not have permission to remove group compute resource policy");
-                }
-            }
-            boolean result = regClient.removeGroupComputeResourcePolicy(resourcePolicyId);
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
-            return result;
-        } catch (Exception e) {
-            String msg = "Error removing group compute resource policy. ResourcePolicyId: "+ resourcePolicyId;
-            logger.error(msg, e);
-            AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
-            exception.setMessage(msg+" More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            throw exception;
-        }
-    }
-
-    @Override
-    @SecurityCheck
-    public boolean removeGroupBatchQueueResourcePolicy(AuthzToken authzToken, String resourcePolicyId) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
-        try {
-            if(ServerSettings.isEnableSharing()) {
-                try {
-                    BatchQueueResourcePolicy batchQueueResourcePolicy = regClient.getBatchQueueResourcePolicy(resourcePolicyId);
-                    String gatewayId = authzToken.getClaimsMap().get(Constants.GATEWAY_ID);
-                    String userId = authzToken.getClaimsMap().get(Constants.USER_NAME);
-                    if (!sharingClient.userHasAccess(gatewayId, userId + "@" + gatewayId,
-                            batchQueueResourcePolicy.getGroupResourceProfileId(), gatewayId + ":WRITE")){
-                        throw new AuthorizationException("User does not have permission to remove batch queue resource policy");
-                    }
-                } catch (Exception e) {
-                    throw new AuthorizationException("User does not have permission to remove batch queue resource policy");
-                }
-            }
-            boolean result = regClient.removeGroupBatchQueueResourcePolicy(resourcePolicyId);
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
-            return result;
-        } catch (Exception e) {
-            String msg = "Error removing batch queue resource policy. ResourcePolicyId: "+ resourcePolicyId;
-            logger.error(msg, e);
-            AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
-            exception.setMessage(msg+" More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            throw exception;
-        }
-    }
-
-    @Override
-    @SecurityCheck
-    public GroupComputeResourcePreference getGroupComputeResourcePreference(AuthzToken authzToken, String computeResourceId, String groupResourceProfileId) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
-        try {
-            if(ServerSettings.isEnableSharing()) {
-                try {
-                    String gatewayId = authzToken.getClaimsMap().get(Constants.GATEWAY_ID);
-                    String userId = authzToken.getClaimsMap().get(Constants.USER_NAME);
-                    if (!sharingClient.userHasAccess(gatewayId, userId + "@" + gatewayId,
-                            groupResourceProfileId, gatewayId + ":READ")){
-                        throw new AuthorizationException("User does not have permission to access group resource profile");
-                    }
-                } catch (Exception e) {
-                    throw new AuthorizationException("User does not have permission to access group resource profile");
-                }
-            }
-            GroupComputeResourcePreference groupComputeResourcePreference = regClient.getGroupComputeResourcePreference(computeResourceId, groupResourceProfileId);
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
-            return groupComputeResourcePreference;
-        } catch (Exception e) {
-            String msg = "Error retrieving Group compute preference. GroupResourceProfileId: "+ groupResourceProfileId;
-            logger.error(msg, e);
-            AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
-            exception.setMessage(msg+" More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
-            throw exception;
-        }
-    }
-
-    @Override
-    @SecurityCheck
-    public ComputeResourcePolicy getGroupComputeResourcePolicy(AuthzToken authzToken, String resourcePolicyId) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
-        try {
-            if(ServerSettings.isEnableSharing()) {
-                try {
-                    ComputeResourcePolicy computeResourcePolicy = regClient.getGroupComputeResourcePolicy(resourcePolicyId);
-                    String gatewayId = authzToken.getClaimsMap().get(Constants.GATEWAY_ID);
-                    String userId = authzToken.getClaimsMap().get(Constants.USER_NAME);
-                    if (!sharingClient.userHasAccess(gatewayId, userId + "@" + gatewayId,
-                            computeResourcePolicy.getGroupResourceProfileId(), gatewayId + ":READ")){
-                        throw new AuthorizationException("User does not have permission to access group resource profile");
-                    }
-                } catch (Exception e) {
-                    throw new AuthorizationException("User does not have permission to access group resource profile");
-                }
-            }
-
-            ComputeResourcePolicy computeResourcePolicy = regClient.getGroupComputeResourcePolicy(resourcePolicyId);
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
-            return computeResourcePolicy;
-        } catch (Exception e) {
-            String msg = "Error retrieving Group compute resource policy. ResourcePolicyId: "+ resourcePolicyId;
-            logger.error(msg, e);
-            AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
-            exception.setMessage(msg+" More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
+            exception.setMessage(msg + " More info : " + e.getMessage());
             throw exception;
         }
     }
 
     @Override
     @SecurityCheck
-    public BatchQueueResourcePolicy getBatchQueueResourcePolicy(AuthzToken authzToken, String resourcePolicyId) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
+    public boolean updateGroup(AuthzToken authzToken, GroupModel groupModel) throws InvalidRequestException,
+            AiravataClientException, AiravataSystemException, AuthorizationException, TException {
         try {
-            if(ServerSettings.isEnableSharing()) {
-                try {
-                    BatchQueueResourcePolicy batchQueueResourcePolicy = regClient.getBatchQueueResourcePolicy(resourcePolicyId);
-                    String gatewayId = authzToken.getClaimsMap().get(Constants.GATEWAY_ID);
-                    String userId = authzToken.getClaimsMap().get(Constants.USER_NAME);
-                    if (!sharingClient.userHasAccess(gatewayId, userId + "@" + gatewayId,
-                            batchQueueResourcePolicy.getGroupResourceProfileId(), gatewayId + ":READ")){
-                        throw new AuthorizationException("User does not have permission to access group resource profile");
-                    }
-                } catch (Exception e) {
-                    throw new AuthorizationException("User does not have permission to access group resource profile");
-                }
-            }
-            BatchQueueResourcePolicy batchQueueResourcePolicy = regClient.getBatchQueueResourcePolicy(resourcePolicyId);
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
-            return batchQueueResourcePolicy;
+            throw new UnsupportedOperationException("Method not supported yet");
         } catch (Exception e) {
-            String msg = "Error retrieving Group batch queue resource policy. ResourcePolicyId: "+ resourcePolicyId;
+            String msg = "Error Updating Group" ;
             logger.error(msg, e);
             AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
-            exception.setMessage(msg+" More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
+            exception.setMessage(msg + " More info : " + e.getMessage());
             throw exception;
         }
     }
 
     @Override
     @SecurityCheck
-    public List<GroupComputeResourcePreference> getGroupComputeResourcePrefList(AuthzToken authzToken, String groupResourceProfileId) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
+    public boolean deleteGroup(AuthzToken authzToken, String groupId, String ownerId, String gatewayId) throws
+            InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
         try {
-            if(ServerSettings.isEnableSharing()) {
-                try {
-                    String gatewayId = authzToken.getClaimsMap().get(Constants.GATEWAY_ID);
-                    String userId = authzToken.getClaimsMap().get(Constants.USER_NAME);
-                    if (!sharingClient.userHasAccess(gatewayId, userId + "@" + gatewayId,
-                            groupResourceProfileId, gatewayId + ":READ")){
-                        throw new AuthorizationException("User does not have permission to access group resource profile");
-                    }
-                } catch (Exception e) {
-                    throw new AuthorizationException("User does not have permission to access group resource profile");
-                }
-            }
-            List<GroupComputeResourcePreference> groupComputeResourcePreferenceList = regClient.getGroupComputeResourcePrefList(groupResourceProfileId);
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
-            return groupComputeResourcePreferenceList;
+            throw new UnsupportedOperationException("Method not supported yet");
         } catch (Exception e) {
-            String msg = "Error retrieving Group compute resource preference. GroupResourceProfileId: "+ groupResourceProfileId;
+            String msg = "Error Deleting Group. Group ID: " + groupId ;
             logger.error(msg, e);
             AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
-            exception.setMessage(msg+" More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
+            exception.setMessage(msg + " More info : " + e.getMessage());
             throw exception;
         }
     }
 
     @Override
     @SecurityCheck
-    public List<BatchQueueResourcePolicy> getGroupBatchQueueResourcePolicyList(AuthzToken authzToken, String groupResourceProfileId) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
+    public GroupModel getGroup(AuthzToken authzToken, String groupId) throws InvalidRequestException,
+            AiravataClientException, AiravataSystemException, AuthorizationException, TException {
         try {
-            if(ServerSettings.isEnableSharing()) {
-                try {
-                    String gatewayId = authzToken.getClaimsMap().get(Constants.GATEWAY_ID);
-                    String userId = authzToken.getClaimsMap().get(Constants.USER_NAME);
-                    if (!sharingClient.userHasAccess(gatewayId, userId + "@" + gatewayId,
-                            groupResourceProfileId, gatewayId + ":READ")){
-                        throw new AuthorizationException("User does not have permission to access group resource profile");
-                    }
-                } catch (Exception e) {
-                    throw new AuthorizationException("User does not have permission to access group resource profile");
-                }
-            }
-            List<BatchQueueResourcePolicy> batchQueueResourcePolicyList = regClient.getGroupBatchQueueResourcePolicyList(groupResourceProfileId);
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
-            return batchQueueResourcePolicyList;
+            throw new UnsupportedOperationException("Method not supported yet");
         } catch (Exception e) {
-            String msg = "Error retrieving Group batch queue resource policy list. GroupResourceProfileId: "+ groupResourceProfileId;
+            String msg = "Error Retreiving Group. Group ID: " + groupId ;
             logger.error(msg, e);
             AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
-            exception.setMessage(msg+" More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
+            exception.setMessage(msg + " More info : " + e.getMessage());
             throw exception;
         }
     }
 
     @Override
     @SecurityCheck
-    public List<ComputeResourcePolicy> getGroupComputeResourcePolicyList(AuthzToken authzToken, String groupResourceProfileId) throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
-        RegistryService.Client regClient = registryClientPool.getResource();
-        SharingRegistryService.Client sharingClient = sharingClientPool.getResource();
+    public List<GroupModel> getAllGroupsUserBelongs(AuthzToken authzToken, String userName, String gatewayId)
+            throws InvalidRequestException, AiravataClientException, AiravataSystemException, AuthorizationException, TException {
         try {
-            if(ServerSettings.isEnableSharing()) {
-                try {
-                    String gatewayId = authzToken.getClaimsMap().get(Constants.GATEWAY_ID);
-                    String userId = authzToken.getClaimsMap().get(Constants.USER_NAME);
-                    if (!sharingClient.userHasAccess(gatewayId, userId + "@" + gatewayId,
-                            groupResourceProfileId, gatewayId + ":READ")){
-                        throw new AuthorizationException("User does not have permission to access group resource profile");
-                    }
-                } catch (Exception e) {
-                    throw new AuthorizationException("User does not have permission to access group resource profile");
-                }
-            }
-            List<ComputeResourcePolicy> computeResourcePolicyList = regClient.getGroupComputeResourcePolicyList(groupResourceProfileId);
-            registryClientPool.returnResource(regClient);
-            sharingClientPool.returnResource(sharingClient);
-            return computeResourcePolicyList;
+            throw new UnsupportedOperationException("Method not supported yet");
         } catch (Exception e) {
-            String msg = "Error retrieving Group compute resource policy list. GroupResourceProfileId: "+ groupResourceProfileId;
+            String msg = "Error Retreiving All Groups for User. User ID: " + userName ;
             logger.error(msg, e);
             AiravataSystemException exception = new AiravataSystemException(AiravataErrorType.INTERNAL_ERROR);
-            exception.setMessage(msg+" More info : " + e.getMessage());
-            registryClientPool.returnBrokenResource(regClient);
+            exception.setMessage(msg + " More info : " + e.getMessage());
             throw exception;
         }
     }
@@ -5511,15 +3823,4 @@ public class AiravataServerHandler implements Airavata.Iface {
             throw new TException("Unable to create registry client...", e);
         }
     }
-
-    private SharingRegistryService.Client getSharingRegistryServiceClient() throws TException, ApplicationSettingsException {
-        final int serverPort = Integer.parseInt(ServerSettings.getSharingRegistryPort());
-        final String serverHost = ServerSettings.getSharingRegistryHost();
-        try {
-            return SharingRegistryServiceClientFactory.createSharingRegistryClient(serverHost, serverPort);
-        } catch (SharingRegistryException e) {
-            throw new TException("Unable to create sharing registry client...", e);
-        }
-    }
-
 }