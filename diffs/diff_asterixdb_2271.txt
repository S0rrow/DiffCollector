diff --git a/asterixdb/asterix-app/src/test/java/org/apache/asterix/test/common/ResultExtractor.java b/asterixdb/asterix-app/src/test/java/org/apache/asterix/test/common/ResultExtractor.java
index eb708ce662..834c10450d 100644
--- a/asterixdb/asterix-app/src/test/java/org/apache/asterix/test/common/ResultExtractor.java
+++ b/asterixdb/asterix-app/src/test/java/org/apache/asterix/test/common/ResultExtractor.java
@@ -20,23 +20,20 @@ package org.apache.asterix.test.common;
 
 import java.io.InputStream;
 import java.nio.charset.Charset;
-import java.util.ArrayList;
+import java.nio.charset.StandardCharsets;
 import java.util.EnumSet;
 import java.util.HashMap;
 import java.util.Iterator;
-import java.util.List;
 import java.util.Map;
+import java.util.logging.Logger;
 
 import org.apache.asterix.common.exceptions.AsterixException;
 import org.apache.commons.io.IOUtils;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 
-import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
+import com.fasterxml.jackson.core.PrettyPrinter;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.SerializationFeature;
-import com.fasterxml.jackson.databind.node.ArrayNode;
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.google.common.collect.Iterators;
 
@@ -55,9 +52,7 @@ public class ResultExtractor {
         SIGNATURE("signature"),
         STATUS("status"),
         TYPE("type"),
-        ERRORS("errors"),
-        PLANS("plans"),
-        WARNINGS("warnings");
+        ERRORS("errors");
 
         private static final Map<String, ResultField> fields = new HashMap<>();
 
@@ -82,23 +77,19 @@ public class ResultExtractor {
         }
     }
 
-    private static final Logger LOGGER = LogManager.getLogger();
+    private static final Logger LOGGER = Logger.getLogger(ResultExtractor.class.getName());
     private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();
 
-    public static ExtractedResult extract(InputStream resultStream, Charset resultCharset) throws Exception {
-        return extract(resultStream, EnumSet.of(ResultField.RESULTS, ResultField.WARNINGS), resultCharset);
+    public static InputStream extract(InputStream resultStream) throws Exception {
+        return extract(resultStream, EnumSet.of(ResultField.RESULTS, ResultField.ERRORS));
     }
 
-    public static InputStream extractMetrics(InputStream resultStream, Charset resultCharset) throws Exception {
-        return extract(resultStream, EnumSet.of(ResultField.METRICS), resultCharset).getResult();
+    public static InputStream extractMetrics(InputStream resultStream) throws Exception {
+        return extract(resultStream, EnumSet.of(ResultField.METRICS, ResultField.ERRORS));
     }
 
-    public static InputStream extractPlans(InputStream resultStream, Charset resultCharset) throws Exception {
-        return extract(resultStream, EnumSet.of(ResultField.PLANS), resultCharset).getResult();
-    }
-
-    public static String extractHandle(InputStream resultStream, Charset responseCharset) throws Exception {
-        String result = IOUtils.toString(resultStream, responseCharset);
+    public static String extractHandle(InputStream resultStream) throws Exception {
+        String result = IOUtils.toString(resultStream, StandardCharsets.UTF_8);
         ObjectNode resultJson = OBJECT_MAPPER.readValue(result, ObjectNode.class);
         final JsonNode handle = resultJson.get("handle");
         if (handle != null) {
@@ -113,15 +104,13 @@ public class ResultExtractor {
         return null;
     }
 
-    private static ExtractedResult extract(InputStream resultStream, EnumSet<ResultField> resultFields,
-            Charset resultCharset) throws Exception {
-        ExtractedResult extractedResult = new ExtractedResult();
-        final String resultStr = IOUtils.toString(resultStream, resultCharset);
+    private static InputStream extract(InputStream resultStream, EnumSet<ResultField> resultFields) throws Exception {
+        final String resultStr = IOUtils.toString(resultStream, Charset.defaultCharset());
+        final PrettyPrinter singleLine = new SingleLinePrettyPrinter();
         final ObjectNode result = OBJECT_MAPPER.readValue(resultStr, ObjectNode.class);
 
-        LOGGER.debug("+++++++\n" + result + "\n+++++++\n");
-        // if we have errors field in the results, we will always return it
-        checkForErrors(result);
+        LOGGER.fine("+++++++\n" + result + "\n+++++++\n");
+
         final StringBuilder resultBuilder = new StringBuilder();
         for (Iterator<String> fieldNameIter = result.fieldNames(); fieldNameIter.hasNext();) {
             final String fieldName = fieldNameIter.next();
@@ -143,9 +132,9 @@ public class ResultExtractor {
                                 resultBuilder.append(fieldValue.get(0).asText());
                             } else {
                                 ObjectMapper omm = new ObjectMapper();
+                                omm.setDefaultPrettyPrinter(singleLine);
                                 omm.enable(SerializationFeature.INDENT_OUTPUT);
-                                resultBuilder
-                                        .append(omm.writer(new DefaultPrettyPrinter()).writeValueAsString(fieldValue));
+                                resultBuilder.append(omm.writer(singleLine).writeValueAsString(fieldValue));
                             }
                         } else {
                             resultBuilder.append(OBJECT_MAPPER.writeValueAsString(fieldValue));
@@ -165,44 +154,24 @@ public class ResultExtractor {
 
                     }
                     break;
+                case ERRORS:
+                    final JsonNode errors = fieldValue.get(0).get("msg");
+                    if (!result.get(ResultField.METRICS.getFieldName()).has("errorCount")) {
+                        throw new AsterixException("Request reported error but not an errorCount");
+                    }
+                    throw new AsterixException(errors.asText());
                 case REQUEST_ID:
                 case METRICS:
                 case CLIENT_CONTEXT_ID:
                 case SIGNATURE:
                 case STATUS:
                 case TYPE:
-                case PLANS:
                     resultBuilder.append(OBJECT_MAPPER.writeValueAsString(fieldValue));
-                case WARNINGS:
-                    extractWarnings(fieldValue, extractedResult);
                     break;
                 default:
                     throw new IllegalStateException("Unexpected result field: " + fieldKind);
             }
         }
-        extractedResult.setResult(IOUtils.toInputStream(resultBuilder, resultCharset));
-        return extractedResult;
-    }
-
-    private static void checkForErrors(ObjectNode result) throws Exception {
-        final JsonNode errorsField = result.get(ResultField.ERRORS.getFieldName());
-        if (errorsField != null) {
-            final JsonNode errors = errorsField.get(0).get("msg");
-            if (!result.get(ResultField.METRICS.getFieldName()).has("errorCount")) {
-                throw new Exception("Request reported error but not an errorCount");
-            }
-            throw new Exception(errors.asText());
-        }
-    }
-
-    private static void extractWarnings(JsonNode warningsValue, ExtractedResult exeResult) {
-        List<String> warnings = new ArrayList<>();
-        if (warningsValue.isArray()) {
-            final ArrayNode warningsArray = (ArrayNode) warningsValue;
-            for (JsonNode warn : warningsArray) {
-                warnings.add(warn.get("msg").asText());
-            }
-        }
-        exeResult.setWarnings(warnings);
+        return IOUtils.toInputStream(resultBuilder.toString(), StandardCharsets.UTF_8);
     }
-}
+}
\ No newline at end of file