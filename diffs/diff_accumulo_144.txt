diff --git a/test/src/test/java/org/apache/accumulo/test/functional/ExamplesIT.java b/test/src/test/java/org/apache/accumulo/test/functional/ExamplesIT.java
index 459edf32f7..48300fbe7d 100644
--- a/test/src/test/java/org/apache/accumulo/test/functional/ExamplesIT.java
+++ b/test/src/test/java/org/apache/accumulo/test/functional/ExamplesIT.java
@@ -24,11 +24,8 @@ import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map.Entry;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
 
 import org.apache.accumulo.core.cli.BatchWriterOpts;
-import org.apache.accumulo.core.client.BatchScanner;
 import org.apache.accumulo.core.client.BatchWriter;
 import org.apache.accumulo.core.client.BatchWriterConfig;
 import org.apache.accumulo.core.client.Connector;
@@ -49,8 +46,6 @@ import org.apache.accumulo.examples.simple.client.RandomBatchWriter;
 import org.apache.accumulo.examples.simple.client.ReadWriteExample;
 import org.apache.accumulo.examples.simple.client.RowOperations;
 import org.apache.accumulo.examples.simple.client.SequentialBatchWriter;
-import org.apache.accumulo.examples.simple.client.TraceDumpExample;
-import org.apache.accumulo.examples.simple.client.TracingExample;
 import org.apache.accumulo.examples.simple.constraints.MaxMutationSize;
 import org.apache.accumulo.examples.simple.dirlist.Ingest;
 import org.apache.accumulo.examples.simple.dirlist.QueryUtil;
@@ -69,34 +64,33 @@ import org.apache.accumulo.examples.simple.shard.ContinuousQuery;
 import org.apache.accumulo.examples.simple.shard.Index;
 import org.apache.accumulo.examples.simple.shard.Query;
 import org.apache.accumulo.examples.simple.shard.Reverse;
-import org.apache.accumulo.minicluster.MemoryUnit;
 import org.apache.accumulo.minicluster.MiniAccumuloCluster.LogWriter;
+import org.apache.accumulo.minicluster.MemoryUnit;
 import org.apache.accumulo.minicluster.MiniAccumuloConfig;
 import org.apache.accumulo.server.util.Admin;
 import org.apache.accumulo.test.TestIngest;
 import org.apache.accumulo.test.VerifyIngest;
-import org.apache.accumulo.tracer.TraceServer;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.io.Text;
 import org.junit.Test;
 
-public class ExamplesIT extends ConfigurableMacIT {
-
+public class ExamplesIT extends MacTest {
+  
   BatchWriterOpts bwOpts = new BatchWriterOpts();
-
+  
   @Override
   public void configure(MiniAccumuloConfig cfg) {
     cfg.setDefaultMemory(cfg.getDefaultMemory() * 2, MemoryUnit.BYTE);
   }
-
-  @Test(timeout = 10 * 60 * 1000)
+  
+  @Test(timeout=5*60*1000)
   public void test() throws Exception {
     Connector c = getConnector();
     String instance = c.getInstance().getInstanceName();
     String keepers = c.getInstance().getZooKeepers();
     String user = "root";
-    String passwd = ROOT_PASSWORD;
+    String passwd = MacTest.PASSWORD;
     String visibility = "A|B";
     String auths = "A,B";
     BatchWriterConfig bwc = new BatchWriterConfig();
@@ -104,47 +98,24 @@ public class ExamplesIT extends ConfigurableMacIT {
     IteratorSetting is;
     String dir = cluster.getConfig().getDir().getAbsolutePath();
     FileSystem fs = FileSystem.get(CachedConfiguration.getInstance());
-
-    Process trace = cluster.exec(TraceServer.class);
-    while (!c.tableOperations().exists("trace"))
-      UtilWaitThread.sleep(500);
-
-    log.info("trace example");
-    Process p = cluster.exec(TracingExample.class, "-i", instance, "-z", keepers, "-u", user, "-p", passwd, "-C", "-D", "-c");
-    assertEquals(0, p.waitFor());
-    for (LogWriter writer : cluster.getLogWriters()) {
-      writer.flush();
-    }
-    String result = FunctionalTestUtils.readAll(cluster, TracingExample.class, p);
-    Pattern pattern = Pattern.compile("TraceID: ([0-9a-f]+)");
-    Matcher matcher = pattern.matcher(result);
-    int count = 0;
-    while (matcher.find()) {
-      p = cluster.exec(TraceDumpExample.class, "-i", instance, "-z", keepers, "-u", user, "-p", passwd, "--traceid", matcher.group(1));
-      assertEquals(0, p.waitFor());
-      count++;
-    }
-    assertTrue(count > 0);
-    result = FunctionalTestUtils.readAll(cluster, TraceDumpExample.class, p);
-    assertTrue(result.contains("myHost@myApp"));
-    trace.destroy();
-
+    
+    
     log.info("testing dirlist example (a little)");
     c.securityOperations().changeUserAuthorizations(user, new Authorizations(auths.split(",")));
-    assertEquals(
-        0,
-        cluster.exec(Ingest.class, "-i", instance, "-z", keepers, "-u", user, "-p", passwd, "--dirTable", "dirTable", "--indexTable", "indexTable",
-            "--dataTable", "dataTable", "--vis", visibility, "--chunkSize", 10000 + "", cluster.getConfig().getDir().getAbsolutePath()).waitFor());
-    p = cluster.exec(QueryUtil.class, "-i", instance, "-z", keepers, "-p", passwd, "-u", user, "-t", "indexTable", "--auths", auths, "--search", "--path",
-        "accumulo-site.xml");
+    assertEquals(0, cluster.exec(Ingest.class, "-i", instance, "-z", keepers, "-u", user, "-p", passwd, 
+        "--dirTable", "dirTable", "--indexTable", "indexTable", "--dataTable", "dataTable",
+        "--vis", visibility, "--chunkSize", 10000 + "", cluster.getConfig().getDir().getAbsolutePath()).waitFor());
+    Process p = cluster.exec(QueryUtil.class, "-i", instance, "-z", keepers, "-p", passwd, "-u", user,
+        "-t", "indexTable", "--auths", auths, "--search", "--path", "accumulo-site.xml");
     assertEquals(0, p.waitFor());
-    for (LogWriter writer : cluster.getLogWriters()) {
+    for(LogWriter writer : cluster.getLogWriters()) {
       writer.flush();
     }
-    result = FunctionalTestUtils.readAll(cluster, QueryUtil.class, p);
+    String result = FunctionalTestUtils.readAll(cluster, QueryUtil.class, p);
     System.out.println("result " + result);
     assertTrue(result.contains("accumulo-site.xml"));
 
+  
     log.info("Testing ageoff filtering");
     c.tableOperations().create("filtertest");
     is = new IteratorSetting(10, AgeOffFilter.class);
@@ -155,47 +126,38 @@ public class ExamplesIT extends ConfigurableMacIT {
     m.put("a", "b", "c");
     bw.addMutation(m);
     UtilWaitThread.sleep(1000);
-    count = 0;
-    for (@SuppressWarnings("unused")
-    Entry<Key,Value> line : c.createScanner("filtertest", Authorizations.EMPTY))
+    int count = 0;
+    for (@SuppressWarnings("unused") Entry<Key,Value> line : c.createScanner("filtertest", Authorizations.EMPTY))
       count++;
     assertEquals(0, count);
-
+    
+    
     log.info("Testing bloom filters are fast for missing data");
     c.tableOperations().create("bloom_test");
     c.tableOperations().setProperty("bloom_test", Property.TABLE_BLOOM_ENABLED.getKey(), "true");
-    assertEquals(
-        0,
-        cluster.exec(RandomBatchWriter.class, "--seed", "7", "-i", instance, "-z", keepers, "-u", user, "-p", ROOT_PASSWORD, "--num", "100000", "--min", "0",
-            "--max", "1000000000", "--size", "50", "--batchMemmory", "2M", "--batchLatency", "60s", "--batchThreads", "3", "-t", "bloom_test").waitFor());
+    assertEquals(0, cluster.exec(RandomBatchWriter.class, "--seed", "7", "-i", instance, "-z",
+        keepers, "-u", user, "-p", MacTest.PASSWORD, "--num", "100000", "--min", "0", "--max", "1000000000", "--size", "50",
+        "--batchMemmory", "2M", "--batchLatency", "60s", "--batchThreads", "3", "-t", "bloom_test").waitFor());
     c.tableOperations().flush("bloom_test", null, null, true);
-    long diff = 0, diff2 = 0;
-    // try the speed test a couple times in case the system is loaded with other tests
-    for (int i = 0; i < 2; i++) {
-      long now = System.currentTimeMillis();
-      assertEquals(0,  cluster.exec(RandomBatchScanner.class,"--seed", "7", "-i", instance, "-z",
-          keepers, "-u", user, "-p", ROOT_PASSWORD, "--num", "10000", "--min", "0", "--max", "1000000000", "--size", "50",
-          "--scanThreads", "4","-t", "bloom_test").waitFor());
-      diff = System.currentTimeMillis() - now;
-      now = System.currentTimeMillis();
-      assertEquals(0,  cluster.exec(RandomBatchScanner.class,"--seed", "8", "-i", instance, "-z",
-          keepers, "-u", user, "-p", ROOT_PASSWORD, "--num", "10000", "--min", "0", "--max", "1000000000", "--size", "50",
-          "--scanThreads", "4","-t", "bloom_test").waitFor());
-      diff2 = System.currentTimeMillis() - now;
-      if (diff2 < diff)
-        break;
-    }
+    long now = System.currentTimeMillis();
+    assertEquals(0,  cluster.exec(RandomBatchScanner.class,"--seed", "7", "-i", instance, "-z",
+        keepers, "-u", user, "-p", MacTest.PASSWORD, "--num", "10000", "--min", "0", "--max", "1000000000", "--size", "50",
+        "--scanThreads", "4","-t", "bloom_test").waitFor());
+    long diff = System.currentTimeMillis() - now;
+    now = System.currentTimeMillis();
+    assertEquals(0,  cluster.exec(RandomBatchScanner.class,"--seed", "8", "-i", instance, "-z",
+        keepers, "-u", user, "-p", MacTest.PASSWORD, "--num", "10000", "--min", "0", "--max", "1000000000", "--size", "50",
+        "--scanThreads", "4","-t", "bloom_test").waitFor());
+    long diff2 = System.currentTimeMillis() - now;
     assertTrue(diff2 < diff);
-
+    
     log.info("Creating a sharded index of the accumulo java files");
     c.tableOperations().create("shard");
     c.tableOperations().create("doc2term");
     bw = c.createBatchWriter("shard", bwc);
     Index.index(30, new File(System.getProperty("user.dir") + "/src"), "\\W+", bw);
     bw.close();
-    BatchScanner bs = c.createBatchScanner("shard", Authorizations.EMPTY, 4);
-    List<String> found = Query.query(bs, Arrays.asList("foo", "bar"));
-    bs.close();
+    List<String> found = Query.query(c.createBatchScanner("shard", Authorizations.EMPTY, 4), Arrays.asList("foo", "bar"));
     // should find ourselves
     boolean thisFile = false;
     for (String file : found) {
@@ -204,13 +166,12 @@ public class ExamplesIT extends ConfigurableMacIT {
     }
     assertTrue(thisFile);
     // create a reverse index
-    assertEquals(0, cluster.exec(Reverse.class, "-i", instance, "-z", keepers, "-t", "shard", "--doc2Term", "-u", "root", "-p", passwd).waitFor());
+    assertEquals(0, cluster.exec(Reverse.class, "-i", instance, "-z", keepers, "-t", "shard", "--doc2Term",
+        "-u", "root", "-p", passwd).waitFor());
     // run some queries
-    assertEquals(
-        0,
-        cluster.exec(ContinuousQuery.class, "-i", instance, "-z", keepers, "-t", "shard", "--doc2Term", "-u", "root", "-p", passwd, "--term", "5", "--count",
-            "1000").waitFor());
-
+    assertEquals(0, cluster.exec(ContinuousQuery.class, "-i", instance, "-z", keepers, "-t", "shard", "--doc2Term",
+        "-u", "root", "-p", passwd, "--term", "5", "--count", "1000").waitFor());
+    
     log.info("Testing MaxMutation constraint");
     c.tableOperations().create("test_ingest");
     c.tableOperations().addConstraint("test_ingest", MaxMutationSize.class.getName());
@@ -226,9 +187,10 @@ public class ExamplesIT extends ConfigurableMacIT {
     log.info("Starting build ingest example");
     assertEquals(0, cluster.exec(GenerateTestData.class, "0", "10000", dir + "/tmp/input/data").waitFor());
     assertEquals(0, cluster.exec(SetupTable.class, instance, keepers, user, passwd, "bulkTable").waitFor());
-    assertEquals(0, cluster.exec(BulkIngestExample.class, instance, keepers, user, passwd, "bulkTable", dir + "/tmp/input", dir + "/tmp").waitFor());
+    assertEquals(0, cluster.exec(BulkIngestExample.class, instance, keepers, user, passwd, "bulkTable",
+        dir + "/tmp/input", dir + "/tmp").waitFor());
     assertEquals(0, cluster.exec(VerifyIngest.class, instance, keepers, user, passwd, "bulkTable", "0", "1000000").waitFor());
-
+    
     log.info("Starting bulk ingest example");
     assertEquals(0, cluster.exec(GenerateTestData.class, "0", "1000000", dir + "/tmp/input/data").waitFor());
     assertEquals(0, cluster.exec(SetupTable.class, instance, keepers, user, passwd, "bulkTable").waitFor());
@@ -236,15 +198,44 @@ public class ExamplesIT extends ConfigurableMacIT {
     assertEquals(0, cluster.exec(VerifyIngest.class, instance, keepers, user, passwd, "bulkTable", "0", "1000000").waitFor());
 
     log.info("Running TeraSortIngest example");
-    exec(TeraSortIngest.class, new String[] {"--count", (1000 * 1000) + "", "-nk", "10", "-xk", "10", "-nv", "10", "-xv", "10", "-t", "sorted", "-i", instance,
-        "-z", keepers, "-u", user, "-p", passwd, "--splits", "4"});
+    TeraSortIngest.main(new String[]{
+        "--count", (1000*1000) + "",
+        "-nk", "10", "-xk", "10",
+        "-nv", "10", "-xv", "10",
+        "-t", "sorted",
+        "-i", instance,
+        "-z", keepers,
+        "-u", user,
+        "-p", passwd,
+        "--splits", "4"});
     log.info("Running Regex example");
-    exec(RegexExample.class, new String[] {"-i", instance, "-z", keepers, "-u", user, "-p", passwd, "-t", "sorted", "--rowRegex", ".*999.*", "--output",
-        dir + "/tmp/nines"});
+    RegexExample.main(new String[] {
+        "-i", instance,
+        "-z", keepers,
+        "-u", user,
+        "-p", passwd,
+        "-t", "sorted",
+        "--rowRegex", ".*999.*",
+        "--output", dir + "/tmp/nines"
+    });
     log.info("Running RowHash example");
-    exec(RowHash.class, new String[] {"-i", instance, "-z", keepers, "-u", user, "-p", passwd, "-t", "sorted", "--column", "c:"});
+    RowHash.main(new String[]{
+        "-i", instance,
+        "-z", keepers,
+        "-u", user,
+        "-p", passwd,
+        "-t", "sorted",
+        "--column", "c:"
+    });
     log.info("Running TableToFile example");
-    exec(TableToFile.class, new String[] {"-i", instance, "-z", keepers, "-u", user, "-p", passwd, "-t", "sorted", "--output", dir + "/tmp/tableFile"});
+    TableToFile.main(new String[]{
+        "-i", instance,
+        "-z", keepers,
+        "-u", user,
+        "-p", passwd,
+        "-t", "sorted",
+        "--output", dir + "/tmp/tableFile"
+    });
 
     log.info("Running word count example");
     c.tableOperations().create("wordCount");
@@ -253,37 +244,132 @@ public class ExamplesIT extends ConfigurableMacIT {
     SummingCombiner.setEncodingType(is, SummingCombiner.Type.STRING);
     c.tableOperations().attachIterator("wordCount", is);
     fs.copyFromLocalFile(new Path(new Path(System.getProperty("user.dir")).getParent(), "README"), new Path(dir + "/tmp/wc/README"));
-    exec(WordCount.class, new String[] {"-i", instance, "-u", user, "-p", passwd, "-z", keepers, "--input", dir + "/tmp/wc", "-t", "wordCount"});
+    WordCount.main(new String[] {
+       "-i", instance,
+       "-u", user,
+       "-p", passwd,
+       "-z", keepers,
+       "--input", dir + "/tmp/wc",
+       "-t", "wordCount"
+    });
 
     log.info("Inserting data with a batch writer");
-    exec(InsertWithBatchWriter.class, new String[] {"-i", instance, "-z", keepers, "-u", user, "-p", passwd, "-t", "helloBatch"});
+    InsertWithBatchWriter.main(new String[]{
+        "-i", instance,
+        "-z", keepers,
+        "-u", user,
+        "-p", passwd,
+        "-t", "helloBatch"
+    });
     log.info("Reading data");
-    exec(ReadData.class, new String[] {"-i", instance, "-z", keepers, "-u", user, "-p", passwd, "-t", "helloBatch"});
+    ReadData.main(new String[]{
+        "-i", instance,
+        "-z", keepers,
+        "-u", user,
+        "-p", passwd,
+        "-t", "helloBatch"
+    });
     log.info("Running isolated scans");
-    exec(InterferenceTest.class, new String[] {"-i", instance, "-z", keepers, "-u", user, "-p", passwd, "-t", "itest1", "--iterations", "100000", "--isolated"});
+    InterferenceTest.main(new String[]{
+        "-i", instance,
+        "-z", keepers,
+        "-u", user,
+        "-p", passwd,
+        "-t", "itest1",
+        "--iterations", "100000",
+        "--isolated"
+    });
     log.info("Running scans without isolation");
-    exec(InterferenceTest.class, new String[] {"-i", instance, "-z", keepers, "-u", user, "-p", passwd, "-t", "itest2", "--iterations", "100000",});
+    InterferenceTest.main(new String[]{
+        "-i", instance,
+        "-z", keepers,
+        "-u", user,
+        "-p", passwd,
+        "-t", "itest2",
+        "--iterations", "100000",
+    });
     log.info("Performing some row operations");
-    exec(RowOperations.class, new String[] {"-i", instance, "-z", keepers, "-u", user, "-p", passwd,});
+    RowOperations.main(new String[]{
+        "-i", instance,
+        "-z", keepers,
+        "-u", user,
+        "-p", passwd,
+    });
     log.info("Using the batch writer");
     c.tableOperations().create("test");
-    exec(SequentialBatchWriter.class, new String[] {"-i", instance, "-z", keepers, "-u", user, "-p", passwd, "-t", "test", "--start", "0", "--num", "100000",
-        "--size", "50", "--batchMemory", "10000000", "--batchLatency", "1000", "--batchThreads", "4", "--vis", visibility});
+    SequentialBatchWriter.main(new String[] {
+        "-i", instance,
+        "-z", keepers,
+        "-u", user,
+        "-p", passwd,
+        "-t", "test",
+        "--start", "0",
+        "--num", "100000",
+        "--size", "50",
+        "--batchMemory", "10000000",
+        "--batchLatency", "1000",
+        "--batchThreads", "4",
+        "--vis", visibility
+    });
 
     log.info("Reading and writing some data");
-    exec(ReadWriteExample.class, new String[] {"-i", instance, "-z", keepers, "-u", user, "-p", passwd, "--auths", auths, "--table", "test2", "--createtable",
-        "-c", "--debug"});
+    ReadWriteExample.main(new String[] {
+        "-i", instance,
+        "-z", keepers,
+        "-u", user,
+        "-p", passwd,
+        "--auths", auths,
+        "--table", "test2",
+        "--createtable",
+        "-c",
+        "--debug"});
     log.info("Deleting some data");
-    exec(ReadWriteExample.class, new String[] {"-i", instance, "-z", keepers, "-u", user, "-p", passwd, "--auths", auths, "--table", "test2", "-d", "--debug"});
+    ReadWriteExample.main(new String[] {
+        "-i", instance,
+        "-z", keepers,
+        "-u", user,
+        "-p", passwd,
+        "--auths", auths,
+        "--table", "test2",
+        "-d",
+        "--debug"});
     log.info("Writing some data with the batch writer");
     c.tableOperations().create("test3");
-    exec(RandomBatchWriter.class, new String[] {"-i", instance, "-z", keepers, "-u", user, "-p", passwd, "--table", "test3", "--num", "100000", "--min", "0",
-        "--max", "99999", "--size", "100", "--batchMemory", "1000000", "--batchLatency", "1000", "--batchThreads", "4", "--vis", visibility});
+    RandomBatchWriter.main(new String[] {
+        "-i", instance,
+        "-z", keepers,
+        "-u", user,
+        "-p", passwd,
+        "--table", "test3",
+        "--num", "100000",
+        "--min", "0",
+        "--max", "99999",
+        "--size", "100",
+        "--batchMemory", "1000000",
+        "--batchLatency", "1000",
+        "--batchThreads", "4",
+        "--vis", visibility});
     log.info("Reading some data with the batch scanner");
-    exec(RandomBatchScanner.class, new String[] {"-i", instance, "-z", keepers, "-u", user, "-p", passwd, "--table", "test3", "--num", "10000", "--min", "0",
-        "--max", "99999", "--size", "100", "--scanThreads", "4", "--auths", auths});
+    RandomBatchScanner.main(new String[] {
+        "-i", instance,
+        "-z", keepers,
+        "-u", user,
+        "-p", passwd,
+        "--table", "test3",
+        "--num", "10000",
+        "--min", "0",
+        "--max", "99999",
+        "--size", "100",
+        "--scanThreads", "4",
+        "--auths", auths});
     log.info("Running an example table operation (Flush)");
-    exec(Flush.class, new String[] {"-i", instance, "-z", keepers, "-u", user, "-p", passwd, "--table", "test3",});
+    Flush.main(new String[]{
+        "-i", instance,
+        "-z", keepers,
+        "-u", user,
+        "-p", passwd,
+        "--table", "test3",
+    });
     assertEquals(0, cluster.exec(Admin.class, "stopAll").waitFor());
 
   }