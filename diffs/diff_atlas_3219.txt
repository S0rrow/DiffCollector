diff --git a/repository/src/main/java/org/apache/atlas/query/GremlinQueryComposer.java b/repository/src/main/java/org/apache/atlas/query/GremlinQueryComposer.java
index c36f5b005..87c8bd2ee 100644
--- a/repository/src/main/java/org/apache/atlas/query/GremlinQueryComposer.java
+++ b/repository/src/main/java/org/apache/atlas/query/GremlinQueryComposer.java
@@ -19,24 +19,25 @@ package org.apache.atlas.query;
 
 import com.google.common.annotations.VisibleForTesting;
 import org.apache.atlas.AtlasErrorCode;
+import org.apache.atlas.discovery.TermSearchProcessor;
 import org.apache.atlas.exception.AtlasBaseException;
 import org.apache.atlas.glossary.GlossaryUtils;
 import org.apache.atlas.model.TypeCategory;
 import org.apache.atlas.model.discovery.SearchParameters;
 import org.apache.atlas.model.typedef.AtlasStructDef;
 import org.apache.atlas.repository.Constants;
-import org.apache.atlas.type.AtlasBuiltInTypes;
 import org.apache.atlas.type.AtlasEntityType;
 import org.apache.atlas.type.AtlasStructType;
 import org.apache.atlas.type.AtlasType;
 import org.apache.atlas.type.AtlasTypeRegistry;
 import org.apache.commons.lang.StringUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.text.DateFormat;
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
-import java.util.Date;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
@@ -50,66 +51,68 @@ import java.util.stream.Stream;
 
 import static org.apache.atlas.model.discovery.SearchParameters.ALL_CLASSIFICATIONS;
 import static org.apache.atlas.model.discovery.SearchParameters.NO_CLASSIFICATIONS;
-import static org.apache.atlas.type.AtlasStructType.AtlasAttribute.AtlasRelationshipEdgeDirection.IN;
 import static org.apache.atlas.type.AtlasStructType.AtlasAttribute.AtlasRelationshipEdgeDirection.OUT;
 
 public class GremlinQueryComposer {
-    private static final String ISO8601_FORMAT              = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'";
-    private static final String ISO8601_DATE_FORMAT         = "yyyy-MM-dd";
+    private static final Logger LOG                 = LoggerFactory.getLogger(GremlinQueryComposer.class);
+    private static final String ISO8601_FORMAT      = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'";
+    private static final String ISO8601_DATE_FORMAT = "yyyy-MM-dd";
     private static final String REGEX_ALPHA_NUMERIC_PATTERN = "[a-zA-Z0-9]+";
-    private static final String EMPTY_STRING                = "";
-    private static final int    DEFAULT_QUERY_RESULT_LIMIT  = 25;
-    private static final int    DEFAULT_QUERY_RESULT_OFFSET = 0;
 
     private static final ThreadLocal<DateFormat[]> DSL_DATE_FORMAT = ThreadLocal.withInitial(() -> {
-        final String formats[] = { ISO8601_FORMAT, ISO8601_DATE_FORMAT };
-
+        final String formats[] = {ISO8601_FORMAT, ISO8601_DATE_FORMAT};
         DateFormat[] dfs       = new DateFormat[formats.length];
-
         for (int i = 0; i < formats.length; i++) {
             dfs[i] = new SimpleDateFormat(formats[i]);
-
             dfs[i].setTimeZone(TimeZone.getTimeZone("UTC"));
         }
-
         return dfs;
     });
 
-    private final GremlinClauseList      queryClauses                = new GremlinClauseList();
-    private final Set<String>            attributesProcessed         = new HashSet<>();
+    private final String            EMPTY_STRING                = "";
+    private final int               DEFAULT_QUERY_RESULT_LIMIT  = 25;
+    private final int               DEFAULT_QUERY_RESULT_OFFSET = 0;
+    private final GremlinClauseList queryClauses                = new GremlinClauseList();
+    private final Set<String>       attributesProcessed         = new HashSet<>();
     private final Lookup                 lookup;
+    private final boolean                isNestedQuery;
     private final AtlasDSL.QueryMetadata queryMetadata;
+    private int providedLimit  = DEFAULT_QUERY_RESULT_LIMIT;
+    private int providedOffset = DEFAULT_QUERY_RESULT_OFFSET;
+    private Context context;
+    private boolean isPrimitive = true;
 
-    private final int                    providedLimit;
-    private final int                    providedOffset;
-    private final Context                context;
-    private final GremlinQueryComposer   parent;
-
-    public GremlinQueryComposer(Lookup registryLookup, Context context, AtlasDSL.QueryMetadata qmd, int limit, int offset, GremlinQueryComposer parent) {
-        this.lookup         = registryLookup;
-        this.context        = context;
-        this.queryMetadata  = qmd;
-        this.providedLimit  = limit;
-        this.providedOffset = offset;
-        this.parent         = parent;
+    public GremlinQueryComposer(Lookup registryLookup, final AtlasDSL.QueryMetadata qmd, boolean isNestedQuery) {
+        this.isNestedQuery = isNestedQuery;
+        this.lookup = registryLookup;
+        this.queryMetadata = qmd;
 
         init();
     }
 
-    public GremlinQueryComposer(Lookup registryLookup, AtlasDSL.QueryMetadata qmd, int limit, int offset) {
-        this(registryLookup, new Context(registryLookup), qmd, limit, offset, null);
-    }
+    public GremlinQueryComposer(AtlasTypeRegistry typeRegistry, final AtlasDSL.QueryMetadata qmd, int limit, int offset) {
+        this(new RegistryBasedLookup(typeRegistry), qmd, false);
+        this.context = new Context(lookup);
 
-    public GremlinQueryComposer(AtlasTypeRegistry typeRegistry, AtlasDSL.QueryMetadata qmd, int limit, int offset) {
-        this(new RegistryBasedLookup(typeRegistry), qmd, limit, offset);
+        providedLimit = limit;
+        providedOffset = offset < 0 ? DEFAULT_QUERY_RESULT_OFFSET : offset;
     }
 
     @VisibleForTesting
     GremlinQueryComposer(Lookup lookup, Context context, final AtlasDSL.QueryMetadata qmd) {
-        this(lookup, context, qmd, DEFAULT_QUERY_RESULT_LIMIT, DEFAULT_QUERY_RESULT_OFFSET, null);
+        this.isNestedQuery = false;
+        this.lookup = lookup;
+        this.context = context;
+        this.queryMetadata = qmd;
+
+        init();
     }
 
     public void addFrom(String typeName) {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("addFrom(typeName={})", typeName);
+        }
+
         IdentifierHelper.Info typeInfo = createInfo(typeName);
 
         if (context.shouldRegister(typeInfo.get())) {
@@ -141,7 +144,11 @@ public class GremlinQueryComposer {
     }
 
     public void addFromProperty(String typeName, String attribute) {
-        if (!isNestedQuery()) {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("addFromProperty(typeName={}, attribute={})", typeName, attribute);
+        }
+
+        if (!isNestedQuery) {
             addFrom(typeName);
         }
 
@@ -149,7 +156,7 @@ public class GremlinQueryComposer {
     }
 
     public void addIsA(String typeName, String traitName) {
-        if (!isNestedQuery()) {
+        if (!isNestedQuery) {
             addFrom(typeName);
         }
 
@@ -165,21 +172,36 @@ public class GremlinQueryComposer {
     }
 
     public void addHasTerm(String typeName, String termName) {
-        String attributeToSearch;
+        if (!isNestedQuery) {
+            addFrom(typeName);
+        }
+
+        String qualifiedAttributeName      = GlossaryUtils.QUALIFIED_NAME_ATTR;
         String qualifiedAttributeSeperator = String.valueOf(GlossaryUtils.invalidNameChars[0]);
-        String[] terms = termName.split(qualifiedAttributeSeperator);
+        String name                        = GlossaryUtils.NAME;
+        String operator                    = SearchParameters.Operator.EQ.toString();
+        String attributeToSearch;
+        String[] terms                     = termName.split(qualifiedAttributeSeperator);
 
         if (terms.length > 1) {
-            attributeToSearch = GlossaryUtils.QUALIFIED_NAME_ATTR;;
+            attributeToSearch = TermSearchProcessor.ATLAS_GLOSSARY_TERM_ATTR_MEANINGS + GlossaryUtils.invalidNameChars[1] + qualifiedAttributeName;
         } else {
             termName = terms[0];
-            attributeToSearch = GlossaryUtils.NAME;;
+            attributeToSearch = TermSearchProcessor.ATLAS_GLOSSARY_TERM_ATTR_MEANINGS + GlossaryUtils.invalidNameChars[1] + name;
         }
 
-        add(GremlinClause.TERM, attributeToSearch, IdentifierHelper.removeQuotes(termName));
+        addWhere(attributeToSearch, operator , termName);
+    }
+
+    public boolean isPrimitive(){
+        return isPrimitive;
     }
 
     public void addWhere(String lhs, String operator, String rhs) {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("addWhere(lhs={}, operator={}, rhs={})", lhs, operator, rhs);
+        }
+
         String                currentType = context.getActiveTypeName();
 
         IdentifierHelper.Info org         = null;
@@ -189,6 +211,7 @@ public class GremlinQueryComposer {
             org = lhsI;
             lhsI = createInfo(lhs);
             lhsI.setTypeName(org.getTypeName());
+            isPrimitive = false;
         }
 
         if (!context.validator.isValidQualifiedName(lhsI.getQualifiedName(), lhsI.getRaw())) {
@@ -219,8 +242,7 @@ public class GremlinQueryComposer {
             } else if (op == SearchParameters.Operator.IN) {
                 add(GremlinClause.HAS_OPERATOR, getPropertyForClause(lhsI), "within", rhs);
             } else {
-                Object normalizedRhs = getNormalizedAttrVal(lhsI, IdentifierHelper.removeQuotes(rhs));
-                addWithNormalizedValue(GremlinClause.HAS_OPERATOR, getPropertyForClause(lhsI), op.getSymbols()[1], normalizedRhs, rhs);
+                add(GremlinClause.HAS_OPERATOR, getPropertyForClause(lhsI), op.getSymbols()[1], rhs);
             }
         }
         // record that the attribute has been processed so that the select clause doesn't add a attr presence check
@@ -228,12 +250,6 @@ public class GremlinQueryComposer {
 
         if (org != null && org.isReferredType()) {
             add(GremlinClause.DEDUP);
-            if (org.getEdgeDirection() != null) {
-                GremlinClause gremlinClauseForEdgeLabel = org.getEdgeDirection().equals(IN) ? GremlinClause.OUT : GremlinClause.IN;
-                add(gremlinClauseForEdgeLabel, org.getEdgeLabel());
-            } else {
-                add(GremlinClause.OUT, org.getEdgeLabel());
-            }
             context.registerActive(currentType);
         }
     }
@@ -259,29 +275,7 @@ public class GremlinQueryComposer {
                 }
                 break;
         }
-        Object normalizedRhs = getNormalizedAttrVal(lhsI, IdentifierHelper.removeQuotes(rhs));
-        addWithNormalizedValue(clause, getPropertyForClause(lhsI), op.getSymbols()[1], normalizedRhs, rhs);
-    }
-
-    private Object getNormalizedAttrVal(IdentifierHelper.Info attrInfo, String attrVal) {
-        AtlasEntityType entityType = context.getActiveEntityType();
-        String          attrName   = attrInfo.getAttributeName();
-
-        if (entityType == null || StringUtils.isEmpty(attrVal)) {
-            return attrVal;
-        }
-
-        AtlasType attributeType = entityType.getAttributeType(attrName);
-        if (attributeType == null) {
-            return attrVal;
-        }
-
-        Object normalizedValue = attributeType.getNormalizedValue(attrVal);
-        if (normalizedValue != null && attributeType instanceof AtlasBuiltInTypes.AtlasDateType) {
-            return ((Date) normalizedValue).getTime();
-        }
-
-        return normalizedValue;
+        add(clause, getPropertyForClause(lhsI), op.getSymbols()[1], rhs);
     }
 
     private boolean containsNumberAndLettersOnly(String rhs) {
@@ -292,13 +286,11 @@ public class GremlinQueryComposer {
         return rhs.replace("'", "").replace("\"", "") + context.getNumericTypeFormatter();
     }
 
-    public void addAndClauses(List<GremlinQueryComposer> queryComposers) {
-        List<String> clauses = addToSubClause(queryComposers);
+    public void addAndClauses(List<String> clauses) {
         add(GremlinClause.AND, String.join(",", clauses));
     }
 
-    public void addOrClauses(List<GremlinQueryComposer> queryComposers) {
-        List<String> clauses = addToSubClause(queryComposers);
+    public void addOrClauses(List<String> clauses) {
         add(GremlinClause.OR, String.join(",", clauses));
     }
 
@@ -321,24 +313,42 @@ public class GremlinQueryComposer {
     }
 
     public GremlinQueryComposer createNestedProcessor() {
-        return new GremlinQueryComposer(lookup, this.context, queryMetadata, this.providedLimit, this.providedOffset, this);
+        GremlinQueryComposer qp = new GremlinQueryComposer(lookup, queryMetadata, true);
+        qp.context = this.context;
+        return qp;
     }
 
     public void addFromAlias(String typeName, String alias) {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("addFromAlias(typeName={}, alias={})", typeName, alias);
+        }
+
         addFrom(typeName);
         addAsClause(alias);
         context.registerAlias(alias);
     }
 
     public void addAsClause(String alias) {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("addAsClause(stepName={})", alias);
+        }
+
         add(GremlinClause.AS, alias);
     }
 
     public void addGroupBy(String item) {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("addGroupBy(item={})", item);
+        }
+
         addGroupByClause(item);
     }
 
     public void addLimit(String limit, String offset) {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("addLimit(limit={}, offset={})", limit, offset);
+        }
+
         SelectClauseComposer scc = context.getSelectClauseComposer();
         if (scc == null) {
             addLimitHelper(limit, offset);
@@ -356,11 +366,16 @@ public class GremlinQueryComposer {
     public String get() {
         close();
 
-        boolean mustTransform = !isNestedQuery() && queryMetadata.needTransformation();
+        boolean mustTransform = !isNestedQuery && queryMetadata.needTransformation();
         String  items[]       = getFormattedClauses(mustTransform);
         String s = mustTransform ?
                            getTransformedClauses(items) :
                            String.join(".", items);
+
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("Gremlin: {}", s);
+        }
+
         return s;
     }
 
@@ -369,6 +384,10 @@ public class GremlinQueryComposer {
     }
 
     public void addOrderBy(String name, boolean isDesc) {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("addOrderBy(name={}, isDesc={})", name, isDesc);
+        }
+
         IdentifierHelper.Info ia = createInfo(name);
         if (queryMetadata.hasSelect() && queryMetadata.hasGroupBy()) {
             addSelectTransformation(this.context.selectClauseComposer, getPropertyForClause(ia), isDesc);
@@ -380,16 +399,7 @@ public class GremlinQueryComposer {
         }
     }
 
-    public boolean hasFromClause() {
-        return queryClauses.contains(GremlinClause.HAS_TYPE) != -1 ||
-                       queryClauses.contains(GremlinClause.HAS_TYPE_WITHIN) != -1;
-    }
-
-    private void addWithNormalizedValue(GremlinClause clause, String propertyForClause, String symbol, Object normalizedRhs, String strValue) {
-        queryClauses.add(new GremlinClauseValue(clause, propertyForClause, symbol, normalizedRhs, strValue));
-    }
-
-    private long getDateFormat(String s) {
+    public long getDateFormat(String s) {
 
         for (DateFormat dateFormat : DSL_DATE_FORMAT.get()) {
             try {
@@ -402,12 +412,9 @@ public class GremlinQueryComposer {
         return -1;
     }
 
-    private List<String> addToSubClause(List<GremlinQueryComposer> clauses) {
-        for (GremlinQueryComposer entry : clauses) {
-            this.addSubClauses(this.queryClauses.size(), entry.getQueryClauses());
-        }
-
-        return clauses.stream().map(x -> x.get()).collect(Collectors.toList());
+    public boolean hasFromClause() {
+        return queryClauses.contains(GremlinClause.HAS_TYPE) != -1 ||
+                       queryClauses.contains(GremlinClause.HAS_TYPE_WITHIN) != -1;
     }
 
     private String getPropertyForClause(IdentifierHelper.Info ia) {
@@ -424,6 +431,10 @@ public class GremlinQueryComposer {
     }
 
     private void process(SelectClauseComposer scc) {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("addSelect(items.length={})", scc.getItems() != null ? scc.getItems().length : 0);
+        }
+
         if (scc.getItems() == null) {
             return;
         }
@@ -449,20 +460,20 @@ public class GremlinQueryComposer {
                 continue;
             }
 
-            scc.setIsSelectNoop(hasNoopCondition(ia));
-            if (scc.getIsSelectNoop()) {
+            scc.isSelectNoop = hasNoopCondition(ia);
+            if (scc.isSelectNoop) {
                 return;
             }
 
             if (introduceType(ia)) {
                 scc.incrementTypesIntroduced();
-                scc.setIsSelectNoop(!ia.hasParts());
+                scc.isSelectNoop = !ia.hasParts();
                 if (ia.hasParts()) {
                     scc.assign(i, getPropertyForClause(createInfo(ia.get())), GremlinClause.INLINE_GET_PROPERTY);
                 }
             } else {
                 scc.assign(i, getPropertyForClause(ia), GremlinClause.INLINE_GET_PROPERTY);
-                scc.setIsPrimitiveAttr(i);
+                scc.incrementPrimitiveType();
             }
         }
 
@@ -488,8 +499,7 @@ public class GremlinQueryComposer {
         String body     = String.join(".", Stream.of(items).filter(Objects::nonNull).collect(Collectors.toList()));
         String inlineFn = queryClauses.getValue(queryClauses.size() - 1);
         String funCall  = String.format(inlineFn, body);
-
-        if (isNestedQuery()) {
+        if (isNestedQuery) {
             ret = String.join(".", queryClauses.getValue(0), funCall);
         } else {
             ret = queryClauses.getValue(0) + funCall;
@@ -512,7 +522,7 @@ public class GremlinQueryComposer {
                                          final String orderByQualifiedAttrName,
                                          final boolean isDesc) {
         GremlinClause gremlinClause;
-        if (selectClauseComposer.getIsSelectNoop()) {
+        if (selectClauseComposer.isSelectNoop) {
             gremlinClause = GremlinClause.SELECT_NOOP_FN;
         } else if (queryMetadata.hasGroupBy()) {
             gremlinClause = selectClauseComposer.onlyAggregators() ? GremlinClause.SELECT_ONLY_AGG_GRP_FN : GremlinClause.SELECT_MULTI_ATTR_GRP_FN;
@@ -522,7 +532,7 @@ public class GremlinQueryComposer {
         if (StringUtils.isEmpty(orderByQualifiedAttrName)) {
             add(0, gremlinClause,
                 selectClauseComposer.getLabelHeader(),
-                selectClauseComposer.getAssignmentExprString(),
+                selectClauseComposer.hasAssignmentExpr() ? selectClauseComposer.getAssignmentExprString() : EMPTY_STRING,
                 selectClauseComposer.getItemsString(),
                 EMPTY_STRING);
         } else {
@@ -534,7 +544,7 @@ public class GremlinQueryComposer {
             String idxStr = String.valueOf(itemIdx);
             add(0, gremlinClause,
                 selectClauseComposer.getLabelHeader(),
-                selectClauseComposer.getAssignmentExprString(),
+                selectClauseComposer.hasAssignmentExpr() ? selectClauseComposer.getAssignmentExprString() : EMPTY_STRING,
                 selectClauseComposer.getItemsString(),
                 sortClause.get(idxStr, idxStr)
             );
@@ -560,9 +570,8 @@ public class GremlinQueryComposer {
     }
 
     private void close() {
-        if (isNestedQuery()) {
+        if (isNestedQuery)
             return;
-        }
 
         // Need de-duping at the end so that correct results are fetched
         if (queryClauses.size() > 2) {
@@ -587,14 +596,6 @@ public class GremlinQueryComposer {
         moveToLast(GremlinClause.INLINE_TRANSFORM_CALL);
     }
 
-    private boolean isNestedQuery() {
-        return this.parent != null;
-    }
-
-    private void addSubClauses(int index, GremlinClauseList queryClauses) {
-        this.queryClauses.addSubClauses(index, queryClauses);
-    }
-
     private void moveToLast(GremlinClause clause) {
         int index = queryClauses.contains(clause);
         if (-1 == index) {
@@ -619,7 +620,7 @@ public class GremlinQueryComposer {
     }
 
     private void init() {
-        if (!isNestedQuery()) {
+        if (!isNestedQuery) {
             add(GremlinClause.G);
             add(GremlinClause.V);
         } else {
@@ -646,6 +647,10 @@ public class GremlinQueryComposer {
     }
 
     private void addRangeClause(String startIndex, String endIndex) {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("addRangeClause(startIndex={}, endIndex={})", startIndex, endIndex);
+        }
+
         if (queryMetadata.hasSelect()) {
             add(queryClauses.size() - 1, GremlinClause.RANGE, startIndex, startIndex, endIndex, startIndex, startIndex, endIndex);
         } else {
@@ -654,10 +659,18 @@ public class GremlinQueryComposer {
     }
 
     private void addOrderByClause(IdentifierHelper.Info ia, boolean descr) {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("addOrderByClause(name={})", ia.getRaw(), descr);
+        }
+
         add((!descr) ? GremlinClause.ORDER_BY : GremlinClause.ORDER_BY_DESC, ia);
     }
 
     private void addGroupByClause(String name) {
+        if (LOG.isDebugEnabled()) {
+            LOG.debug("addGroupByClause(name={})", name);
+        }
+
         IdentifierHelper.Info ia = createInfo(name);
         add(GremlinClause.GROUP_BY, ia);
     }
@@ -671,7 +684,7 @@ public class GremlinQueryComposer {
     }
 
     private void add(GremlinClause clause, String... args) {
-        queryClauses.add(new GremlinClauseValue(clause, args));
+        queryClauses.add(new GremlinClauseValue(clause, clause.get(args)));
     }
 
     public void add(GremlinClauseValue gv) {
@@ -679,7 +692,7 @@ public class GremlinQueryComposer {
     }
 
     private void add(int idx, GremlinClause clause, String... args) {
-        queryClauses.add(idx, new GremlinClauseValue(clause, args));
+        queryClauses.add(idx, new GremlinClauseValue(clause, clause.get(args)));
     }
 
     private void addTrait(GremlinClause clause, IdentifierHelper.Info idInfo) {
@@ -690,54 +703,22 @@ public class GremlinQueryComposer {
         add(clause, idInfo.get(), idInfo.get());
     }
 
-    public GremlinClauseList clauses() {
-        return queryClauses;
-    }
-
-    public SelectClauseComposer getSelectComposer() {
-        return this.context.selectClauseComposer;
-    }
-
-    public static class GremlinClauseValue {
+    static class GremlinClauseValue {
         private final GremlinClause clause;
         private final String        value;
-        private final String[]      values;
-        private final Object        rawValue;
 
-        public GremlinClauseValue(GremlinClause clause, String property, String operator, Object rawValue, String str) {
+        public GremlinClauseValue(GremlinClause clause, String value) {
             this.clause = clause;
-            this.value = clause.get(property, operator, str);
-            this.values = new String[] {property, operator, str};
-            this.rawValue = rawValue;
-        }
-
-        public GremlinClauseValue(GremlinClause clause, String... values) {
-            this.clause = clause;
-            this.value = clause.get(values);
-            this.values = values;
-            this.rawValue = null;
+            this.value = value;
         }
 
         public GremlinClause getClause() {
             return clause;
         }
 
-        public String getClauseWithValue() {
+        public String getValue() {
             return value;
         }
-
-        public String[] getValues() {
-            return values;
-        }
-
-        public Object getRawValue() {
-            return this.rawValue;
-        }
-
-        @Override
-        public String toString() {
-            return String.format("%s", clause);
-        }
     }
 
     @VisibleForTesting
@@ -745,15 +726,15 @@ public class GremlinQueryComposer {
         private static final AtlasStructType UNKNOWN_TYPE = new AtlasStructType(new AtlasStructDef());
 
         private final Lookup lookup;
-        private final ClauseValidator       validator;
         private final Map<String, String>   aliasMap = new HashMap<>();
         private AtlasType                   activeType;
         private SelectClauseComposer        selectClauseComposer;
+        private ClauseValidator             validator;
         private String                      numericTypeFormatter = "";
 
         public Context(Lookup lookup) {
             this.lookup = lookup;
-            this.validator = new ClauseValidator();
+            validator = new ClauseValidator(lookup);
         }
 
         public void registerActive(String typeName) {
@@ -852,9 +833,11 @@ public class GremlinQueryComposer {
     }
 
     private static class ClauseValidator {
+        private final Lookup lookup;
         List<String> errorList = new ArrayList<>();
 
-        public ClauseValidator() {
+        public ClauseValidator(Lookup lookup) {
+            this.lookup = lookup;
         }
 
         public boolean isValid(Context ctx, GremlinClause clause, IdentifierHelper.Info ia) {