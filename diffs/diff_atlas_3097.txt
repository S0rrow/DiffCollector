diff --git a/addons/hive-bridge/src/main/java/org/apache/atlas/hive/hook/events/AlterTableRenameCol.java b/addons/hive-bridge/src/main/java/org/apache/atlas/hive/hook/events/AlterTableRenameCol.java
index 756a6089e..5bbdd81d3 100644
--- a/addons/hive-bridge/src/main/java/org/apache/atlas/hive/hook/events/AlterTableRenameCol.java
+++ b/addons/hive-bridge/src/main/java/org/apache/atlas/hive/hook/events/AlterTableRenameCol.java
@@ -26,7 +26,6 @@ import org.apache.atlas.model.notification.HookNotification;
 import org.apache.atlas.model.notification.HookNotification.EntityPartialUpdateRequestV2;
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.hadoop.hive.metastore.api.FieldSchema;
-import org.apache.hadoop.hive.metastore.events.AlterTableEvent;
 import org.apache.hadoop.hive.ql.metadata.Table;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -35,79 +34,64 @@ import java.util.ArrayList;
 import java.util.List;
 
 public class AlterTableRenameCol extends AlterTable {
-    private static final Logger      LOG = LoggerFactory.getLogger(AlterTableRenameCol.class);
-    private        final FieldSchema columnOld;
-    private        final FieldSchema columnNew;
+    private static final Logger LOG = LoggerFactory.getLogger(AlterTableRenameCol.class);
 
     public AlterTableRenameCol(AtlasHiveHookContext context) {
-        this(null, null, context);
-    }
-
-    public AlterTableRenameCol(FieldSchema columnOld, FieldSchema columnNew, AtlasHiveHookContext context) {
         super(context);
-
-        this.columnOld = columnOld;
-        this.columnNew = columnNew;
     }
 
     @Override
     public List<HookNotification> getNotificationMessages() throws Exception {
-        return context.isMetastoreHook() ? getHiveMetastoreMessages() : getHiveMessages();
-    }
-
-    public List<HookNotification> getHiveMetastoreMessages() throws Exception {
-        List<HookNotification> baseMsgs = super.getNotificationMessages();
-        List<HookNotification> ret      = new ArrayList<>(baseMsgs);
-        AlterTableEvent        tblEvent = (AlterTableEvent) context.getMetastoreEvent();
-        Table                  oldTable = toTable(tblEvent.getOldTable());
-        Table                  newTable = toTable(tblEvent.getNewTable());
-
-        processColumns(oldTable, newTable, ret);
-
-        return ret;
-    }
-
-    public List<HookNotification> getHiveMessages() throws Exception {
-        List<HookNotification> baseMsgs = super.getNotificationMessages();
-        List<HookNotification> ret      = new ArrayList<>(baseMsgs);
-
-        if (CollectionUtils.isEmpty(getInputs())) {
+        if (CollectionUtils.isEmpty(getHiveContext().getInputs())) {
             LOG.error("AlterTableRenameCol: old-table not found in inputs list");
 
             return null;
         }
 
-        if (CollectionUtils.isEmpty(getOutputs())) {
+        if (CollectionUtils.isEmpty(getHiveContext().getOutputs())) {
             LOG.error("AlterTableRenameCol: new-table not found in outputs list");
 
             return null;
         }
 
+        List<HookNotification> baseMsgs = super.getNotificationMessages();
+
         if (CollectionUtils.isEmpty(baseMsgs)) {
             LOG.debug("Skipped processing of column-rename (on a temporary table?)");
 
             return null;
         }
 
-        Table oldTable = getInputs().iterator().next().getTable();
-        Table newTable = getOutputs().iterator().next().getTable();
+        List<HookNotification> ret      = new ArrayList<>(baseMsgs);
+        Table                  oldTable = getHiveContext().getInputs().iterator().next().getTable();
+        Table                  newTable = getHiveContext().getOutputs().iterator().next().getTable();
+
+        newTable = getHive().getTable(newTable.getDbName(), newTable.getTableName());
 
-        if (newTable != null) {
-            newTable = getHive().getTable(newTable.getDbName(), newTable.getTableName());
-        }
+        List<FieldSchema> oldColumns       = oldTable.getCols();
+        List<FieldSchema> newColumns       = newTable.getCols();
+        FieldSchema       changedColumnOld = null;
+        FieldSchema       changedColumnNew = null;
 
-        processColumns(oldTable, newTable, ret);
+        for (FieldSchema oldColumn : oldColumns) {
+            if (!newColumns.contains(oldColumn)) {
+                changedColumnOld = oldColumn;
 
-        return ret;
-    }
+                break;
+            }
+        }
 
-    private void processColumns(Table oldTable, Table newTable, List<HookNotification> ret) {
-        FieldSchema changedColumnOld = (columnOld == null) ? findRenamedColumn(oldTable, newTable) : columnOld;
-        FieldSchema changedColumnNew = (columnNew == null) ? findRenamedColumn(newTable, oldTable) : columnNew;
+        for (FieldSchema newColumn : newColumns) {
+            if (!oldColumns.contains(newColumn)) {
+                changedColumnNew = newColumn;
+
+                break;
+            }
+        }
 
         if (changedColumnOld != null && changedColumnNew != null) {
             AtlasObjectId oldColumnId = new AtlasObjectId(HIVE_TYPE_COLUMN, ATTRIBUTE_QUALIFIED_NAME, getQualifiedName(oldTable, changedColumnOld));
-            AtlasEntity newColumn   = new AtlasEntity(HIVE_TYPE_COLUMN);
+            AtlasEntity   newColumn   = new AtlasEntity(HIVE_TYPE_COLUMN);
 
             newColumn.setAttribute(ATTRIBUTE_NAME, changedColumnNew.getName());
             newColumn.setAttribute(ATTRIBUTE_QUALIFIED_NAME, getQualifiedName(newTable, changedColumnNew));
@@ -116,21 +100,7 @@ public class AlterTableRenameCol extends AlterTable {
         } else {
             LOG.error("AlterTableRenameCol: no renamed column detected");
         }
-    }
-
-    public static FieldSchema findRenamedColumn(Table inputTable, Table outputTable) {
-        FieldSchema       ret           = null;
-        List<FieldSchema> inputColumns  = inputTable.getCols();
-        List<FieldSchema> outputColumns = outputTable.getCols();
-
-        for (FieldSchema inputColumn : inputColumns) {
-            if (!outputColumns.contains(inputColumn)) {
-                ret = inputColumn;
-
-                break;
-            }
-        }
 
         return ret;
     }
-}
\ No newline at end of file
+}