diff --git a/asterixdb/asterix-lang-aql/src/main/java/org/apache/asterix/lang/aql/rewrites/AqlQueryRewriter.java b/asterixdb/asterix-lang-aql/src/main/java/org/apache/asterix/lang/aql/rewrites/AqlQueryRewriter.java
index 977f6bb65e..e46031683e 100644
--- a/asterixdb/asterix-lang-aql/src/main/java/org/apache/asterix/lang/aql/rewrites/AqlQueryRewriter.java
+++ b/asterixdb/asterix-lang-aql/src/main/java/org/apache/asterix/lang/aql/rewrites/AqlQueryRewriter.java
@@ -22,7 +22,7 @@ import java.util.ArrayList;
 import java.util.List;
 import java.util.Set;
 
-import org.apache.asterix.common.exceptions.CompilationException;
+import org.apache.asterix.common.exceptions.AsterixException;
 import org.apache.asterix.common.functions.FunctionSignature;
 import org.apache.asterix.lang.aql.clause.DistinctClause;
 import org.apache.asterix.lang.aql.clause.ForClause;
@@ -31,81 +31,81 @@ import org.apache.asterix.lang.aql.expression.UnionExpr;
 import org.apache.asterix.lang.aql.parser.AQLParserFactory;
 import org.apache.asterix.lang.aql.parser.FunctionParser;
 import org.apache.asterix.lang.aql.rewrites.visitor.AqlBuiltinFunctionRewriteVisitor;
+import org.apache.asterix.lang.common.util.CommonFunctionMapUtil;
 import org.apache.asterix.lang.aql.visitor.AQLInlineUdfsVisitor;
 import org.apache.asterix.lang.aql.visitor.base.IAQLVisitor;
 import org.apache.asterix.lang.common.base.Clause;
 import org.apache.asterix.lang.common.base.Expression;
-import org.apache.asterix.lang.common.base.Expression.Kind;
 import org.apache.asterix.lang.common.base.IQueryRewriter;
-import org.apache.asterix.lang.common.base.IReturningStatement;
+import org.apache.asterix.lang.common.base.Expression.Kind;
 import org.apache.asterix.lang.common.clause.GroupbyClause;
 import org.apache.asterix.lang.common.clause.LetClause;
 import org.apache.asterix.lang.common.expression.GbyVariableExpressionPair;
 import org.apache.asterix.lang.common.expression.VariableExpr;
 import org.apache.asterix.lang.common.rewrites.LangRewritingContext;
 import org.apache.asterix.lang.common.statement.FunctionDecl;
+import org.apache.asterix.lang.common.statement.Query;
 import org.apache.asterix.lang.common.struct.VarIdentifier;
-import org.apache.asterix.lang.common.util.CommonFunctionMapUtil;
 import org.apache.asterix.lang.common.util.FunctionUtil;
 import org.apache.asterix.lang.common.visitor.GatherFunctionCallsVisitor;
-import org.apache.asterix.metadata.declared.MetadataProvider;
+import org.apache.asterix.metadata.declared.AqlMetadataProvider;
 
 class AqlQueryRewriter implements IQueryRewriter {
 
     private final FunctionParser functionParser = new FunctionParser(new AQLParserFactory());
-    private IReturningStatement topStatement;
+    private Query topExpr;
     private List<FunctionDecl> declaredFunctions;
     private LangRewritingContext context;
-    private MetadataProvider metadataProvider;
+    private AqlMetadataProvider metadataProvider;
 
-    private void setup(List<FunctionDecl> declaredFunctions, IReturningStatement topStatement,
-            MetadataProvider metadataProvider, LangRewritingContext context) {
-        this.topStatement = topStatement;
+    private void setup(List<FunctionDecl> declaredFunctions, Query topExpr, AqlMetadataProvider metadataProvider,
+            LangRewritingContext context) {
+        this.topExpr = topExpr;
         this.context = context;
         this.declaredFunctions = declaredFunctions;
         this.metadataProvider = metadataProvider;
     }
 
     @Override
-    public void rewrite(List<FunctionDecl> declaredFunctions, IReturningStatement topStatement,
-            MetadataProvider metadataProvider, LangRewritingContext context) throws CompilationException {
-        setup(declaredFunctions, topStatement, metadataProvider, context);
-        if (topStatement.isTopLevel()) {
+    public void rewrite(List<FunctionDecl> declaredFunctions, Query topExpr, AqlMetadataProvider metadataProvider,
+            LangRewritingContext context) throws AsterixException {
+        setup(declaredFunctions, topExpr, metadataProvider, context);
+        if (topExpr.isTopLevel()) {
             wrapInLets();
         }
         inlineDeclaredUdfs();
         rewriteFunctionName();
-        topStatement.setVarCounter(context.getVarCounter());
+        topExpr.setVarCounter(context.getVarCounter());
     }
 
     private void wrapInLets() {
         // If the top expression of the main statement is not a FLWOR, it wraps
         // it into a let clause.
-        if (topStatement == null) {
+        if (topExpr == null) {
             return;
         }
-        Expression body = topStatement.getBody();
+        Expression body = topExpr.getBody();
         if (body.getKind() != Kind.FLWOGR_EXPRESSION) {
             VarIdentifier var = context.newVariable();
             VariableExpr v = new VariableExpr(var);
             LetClause c1 = new LetClause(v, body);
-            ArrayList<Clause> clauseList = new ArrayList<>(1);
+            ArrayList<Clause> clauseList = new ArrayList<Clause>(1);
             clauseList.add(c1);
             FLWOGRExpression newBody = new FLWOGRExpression(clauseList, new VariableExpr(var));
-            topStatement.setBody(newBody);
+            topExpr.setBody(newBody);
         }
     }
 
-    private void rewriteFunctionName() throws CompilationException {
-        if (topStatement == null) {
+    private void rewriteFunctionName() throws AsterixException {
+        if (topExpr == null) {
             return;
         }
         AqlBuiltinFunctionRewriteVisitor visitor = new AqlBuiltinFunctionRewriteVisitor();
-        topStatement.accept(visitor, null);
+        topExpr.accept(visitor, null);
     }
 
-    private void inlineDeclaredUdfs() throws CompilationException {
-        if (topStatement == null) {
+    private void inlineDeclaredUdfs() throws AsterixException {
+        if (topExpr == null) {
             return;
         }
         List<FunctionSignature> funIds = new ArrayList<FunctionSignature>();
@@ -113,24 +113,22 @@ class AqlQueryRewriter implements IQueryRewriter {
             funIds.add(fdecl.getSignature());
         }
 
-        List<FunctionDecl> storedFunctionDecls = new ArrayList<>();
-        for (Expression topLevelExpr : topStatement.getDirectlyEnclosedExpressions()) {
-            storedFunctionDecls.addAll(FunctionUtil.retrieveUsedStoredFunctions(metadataProvider, topLevelExpr, funIds,
-                    null, expr -> getFunctionCalls(expr), func -> functionParser.getFunctionDecl(func),
-                    signature -> CommonFunctionMapUtil.normalizeBuiltinFunctionSignature(signature)));
-            declaredFunctions.addAll(storedFunctionDecls);
-        }
+        List<FunctionDecl> storedFunctionDecls = FunctionUtil.retrieveUsedStoredFunctions(metadataProvider,
+                topExpr.getBody(), funIds, null,
+                expr -> getFunctionCalls(expr), func -> functionParser.getFunctionDecl(func),
+                signature -> CommonFunctionMapUtil.normalizeBuiltinFunctionSignature(signature));
+        declaredFunctions.addAll(storedFunctionDecls);
         if (!declaredFunctions.isEmpty()) {
-            AQLInlineUdfsVisitor visitor = new AQLInlineUdfsVisitor(context, new AQLRewriterFactory(),
-                    declaredFunctions, metadataProvider);
-            while (topStatement.accept(visitor, declaredFunctions)) {
+            AQLInlineUdfsVisitor visitor =
+                    new AQLInlineUdfsVisitor(context, new AQLRewriterFactory(), declaredFunctions, metadataProvider);
+            while (topExpr.accept(visitor, declaredFunctions)) {
                 // loop until no more changes
             }
         }
         declaredFunctions.removeAll(storedFunctionDecls);
     }
 
-    private Set<FunctionSignature> getFunctionCalls(Expression expression) throws CompilationException {
+    private Set<FunctionSignature> getFunctionCalls(Expression expression) throws AsterixException {
         GatherFunctionCalls gfc = new GatherFunctionCalls();
         expression.accept(gfc, null);
         return gfc.getCalls();
@@ -142,7 +140,7 @@ class AqlQueryRewriter implements IQueryRewriter {
         }
 
         @Override
-        public Void visit(DistinctClause dc, Void arg) throws CompilationException {
+        public Void visit(DistinctClause dc, Void arg) throws AsterixException {
             for (Expression e : dc.getDistinctByExpr()) {
                 e.accept(this, arg);
             }
@@ -150,7 +148,7 @@ class AqlQueryRewriter implements IQueryRewriter {
         }
 
         @Override
-        public Void visit(FLWOGRExpression flwor, Void arg) throws CompilationException {
+        public Void visit(FLWOGRExpression flwor, Void arg) throws AsterixException {
             for (Clause c : flwor.getClauseList()) {
                 c.accept(this, arg);
             }
@@ -159,7 +157,7 @@ class AqlQueryRewriter implements IQueryRewriter {
         }
 
         @Override
-        public Void visit(ForClause fc, Void arg) throws CompilationException {
+        public Void visit(ForClause fc, Void arg) throws AsterixException {
             fc.getInExpr().accept(this, arg);
             if (fc.getPosVarExpr() != null) {
                 fc.getPosVarExpr().accept(this, arg);
@@ -168,7 +166,7 @@ class AqlQueryRewriter implements IQueryRewriter {
         }
 
         @Override
-        public Void visit(GroupbyClause gc, Void arg) throws CompilationException {
+        public Void visit(GroupbyClause gc, Void arg) throws AsterixException {
             for (GbyVariableExpressionPair p : gc.getGbyPairList()) {
                 p.getExpr().accept(this, arg);
             }
@@ -179,13 +177,13 @@ class AqlQueryRewriter implements IQueryRewriter {
         }
 
         @Override
-        public Void visit(LetClause lc, Void arg) throws CompilationException {
+        public Void visit(LetClause lc, Void arg) throws AsterixException {
             lc.getBindingExpr().accept(this, arg);
             return null;
         }
 
         @Override
-        public Void visit(UnionExpr u, Void arg) throws CompilationException {
+        public Void visit(UnionExpr u, Void arg) throws AsterixException {
             for (Expression e : u.getExprs()) {
                 e.accept(this, arg);
             }