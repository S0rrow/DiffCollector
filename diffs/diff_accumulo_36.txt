diff --git a/src/core/src/main/java/org/apache/accumulo/core/client/mock/MockTableOperations.java b/src/core/src/main/java/org/apache/accumulo/core/client/mock/MockTableOperations.java
index 1b2a3d0f21..74620ab001 100644
--- a/src/core/src/main/java/org/apache/accumulo/core/client/mock/MockTableOperations.java
+++ b/src/core/src/main/java/org/apache/accumulo/core/client/mock/MockTableOperations.java
@@ -30,7 +30,6 @@ import java.util.TreeSet;
 import org.apache.accumulo.core.Constants;
 import org.apache.accumulo.core.client.AccumuloException;
 import org.apache.accumulo.core.client.AccumuloSecurityException;
-import org.apache.accumulo.core.client.IteratorSetting;
 import org.apache.accumulo.core.client.TableExistsException;
 import org.apache.accumulo.core.client.TableNotFoundException;
 import org.apache.accumulo.core.client.admin.FindMax;
@@ -43,6 +42,7 @@ import org.apache.accumulo.core.util.BulkImportHelper.AssignmentStats;
 import org.apache.commons.lang.NotImplementedException;
 import org.apache.hadoop.io.Text;
 
+@SuppressWarnings("deprecation")
 public class MockTableOperations extends TableOperationsHelper {
   
   final private MockAccumulo acu;
@@ -81,53 +81,36 @@ public class MockTableOperations extends TableOperationsHelper {
     if (!tableName.matches(Constants.VALID_TABLE_NAME_REGEX)) {
       throw new IllegalArgumentException();
     }
-    if (exists(tableName))
-      throw new TableExistsException(tableName, tableName, "");
     acu.createTable(username, tableName, versioningIter, timeType);
   }
   
-  /**
-   * @deprecated since 1.4 {@link #attachIterator(String, IteratorSetting)}
-   */
   @Override
   public void addAggregators(String tableName, List<? extends PerColumnIteratorConfig> aggregators) throws AccumuloSecurityException, TableNotFoundException,
       AccumuloException {
-    if (!exists(tableName))
-      throw new TableNotFoundException(tableName, tableName, "");
     acu.addAggregators(tableName, aggregators);
   }
   
   @Override
-  public void addSplits(String tableName, SortedSet<Text> partitionKeys) throws TableNotFoundException, AccumuloException, AccumuloSecurityException {
-    throw new NotImplementedException();
-  }
+  public void addSplits(String tableName, SortedSet<Text> partitionKeys) throws TableNotFoundException, AccumuloException, AccumuloSecurityException {}
   
   @Override
-  public Collection<Text> getSplits(String tableName) throws TableNotFoundException {
-    if (!exists(tableName))
-      throw new TableNotFoundException(tableName, tableName, "");
+  public Collection<Text> getSplits(String tableName) {
     return Collections.emptyList();
   }
   
   @Override
-  public Collection<Text> getSplits(String tableName, int maxSplits) throws TableNotFoundException {
-    return getSplits(tableName);
+  public Collection<Text> getSplits(String tableName, int maxSplits) {
+    return Collections.emptyList();
   }
   
   @Override
   public void delete(String tableName) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {
-    if (!exists(tableName))
-      throw new TableNotFoundException(tableName, tableName, "");
     acu.tables.remove(tableName);
   }
   
   @Override
   public void rename(String oldTableName, String newTableName) throws AccumuloSecurityException, TableNotFoundException, AccumuloException,
       TableExistsException {
-    if (!exists(oldTableName))
-      throw new TableNotFoundException(oldTableName, oldTableName, "");
-    if (exists(newTableName))
-      throw new TableExistsException(newTableName, newTableName, "");
     MockTable t = acu.tables.remove(oldTableName);
     acu.tables.put(newTableName, t);
   }
@@ -147,19 +130,15 @@ public class MockTableOperations extends TableOperationsHelper {
   
   @Override
   public Iterable<Entry<String,String>> getProperties(String tableName) throws TableNotFoundException {
-    if (!exists(tableName))
-      throw new TableNotFoundException(tableName, tableName, "");
     return acu.tables.get(tableName).settings.entrySet();
   }
   
   @Override
-  public void setLocalityGroups(String tableName, Map<String,Set<Text>> groups) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {
-    throw new NotImplementedException();
-  }
+  public void setLocalityGroups(String tableName, Map<String,Set<Text>> groups) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {}
   
   @Override
   public Map<String,Set<Text>> getLocalityGroups(String tableName) throws AccumuloException, TableNotFoundException {
-    throw new NotImplementedException();
+    return null;
   }
   
   @Override
@@ -181,17 +160,13 @@ public class MockTableOperations extends TableOperationsHelper {
   }
   
   @Override
-  public void offline(String tableName) throws AccumuloSecurityException, AccumuloException {
-    throw new NotImplementedException();
-  }
+  public void offline(String tableName) throws AccumuloSecurityException, AccumuloException {}
   
   @Override
   public void online(String tableName) throws AccumuloSecurityException, AccumuloException {}
   
   @Override
-  public void clearLocatorCache(String tableName) throws TableNotFoundException {
-    throw new NotImplementedException();
-  }
+  public void clearLocatorCache(String tableName) throws TableNotFoundException {}
   
   @Override
   public Map<String,String> tableIdMap() {
@@ -233,8 +208,7 @@ public class MockTableOperations extends TableOperationsHelper {
   public Text getMaxRow(String tableName, Authorizations auths, Text startRow, boolean startInclusive, Text endRow, boolean endInclusive)
       throws TableNotFoundException, AccumuloException, AccumuloSecurityException {
     MockTable table = acu.tables.get(tableName);
-    if (table == null)
-      throw new TableNotFoundException(tableName, tableName, "no such table");
+    if (table == null) throw new TableNotFoundException(tableName, tableName, "no such table");
     
     return FindMax.findMax(new MockScanner(table, auths), startRow, startInclusive, endRow, endInclusive);
   }