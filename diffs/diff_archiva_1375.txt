diff --git a/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/ProxiedDavServer.java b/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/ProxiedDavServer.java
index b25daef6a..c3e4bfc32 100644
--- a/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/ProxiedDavServer.java
+++ b/archiva-web/archiva-webapp/src/main/java/org/apache/maven/archiva/web/repository/ProxiedDavServer.java
@@ -19,19 +19,25 @@
  * under the License.
  */
 
+import org.apache.commons.lang.StringUtils;
 import org.apache.maven.archiva.configuration.ArchivaConfiguration;
 import org.apache.maven.archiva.configuration.Configuration;
 import org.apache.maven.archiva.configuration.RepositoryConfiguration;
+import org.apache.maven.archiva.model.ArchivaArtifact;
 import org.apache.maven.archiva.model.ArchivaRepository;
+import org.apache.maven.archiva.model.ArchivaRepositoryMetadata;
 import org.apache.maven.archiva.model.ArtifactReference;
 import org.apache.maven.archiva.model.ProjectReference;
 import org.apache.maven.archiva.model.VersionedReference;
+import org.apache.maven.archiva.proxy.ProxyConnector;
 import org.apache.maven.archiva.proxy.ProxyException;
 import org.apache.maven.archiva.proxy.RepositoryProxyConnectors;
 import org.apache.maven.archiva.repository.ArchivaConfigurationAdaptor;
 import org.apache.maven.archiva.repository.layout.BidirectionalRepositoryLayout;
 import org.apache.maven.archiva.repository.layout.BidirectionalRepositoryLayoutFactory;
 import org.apache.maven.archiva.repository.layout.LayoutException;
+import org.apache.maven.wagon.ResourceDoesNotExistException;
+import org.apache.maven.wagon.proxy.ProxyInfo;
 import org.codehaus.plexus.webdav.AbstractDavServerComponent;
 import org.codehaus.plexus.webdav.DavServerComponent;
 import org.codehaus.plexus.webdav.DavServerException;
@@ -40,6 +46,10 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.lang.reflect.Proxy;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
 
 import javax.servlet.ServletConfig;
 import javax.servlet.ServletException;
@@ -51,8 +61,8 @@
  * @author <a href="mailto:joakime@apache.org">Joakim Erdfelt</a>
  * @version $Id$
  * @plexus.component role="org.codehaus.plexus.webdav.DavServerComponent"
- *                   role-hint="proxied"
- *                   instantiation-strategy="per-lookup"
+ * role-hint="proxied"
+ * instantiation-strategy="per-lookup"
  */
 public class ProxiedDavServer
     extends AbstractDavServerComponent
@@ -83,6 +93,8 @@
 
     private ArchivaRepository managedRepository;
 
+    private List/*<ArtifactRepository>*/proxiedRepositories;
+
     public String getPrefix()
     {
         return davServer.getPrefix();
@@ -108,6 +120,8 @@ public void init( ServletConfig servletConfig )
     {
         davServer.init( servletConfig );
 
+        proxiedRepositories = new ArrayList();
+
         Configuration config = archivaConfiguration.getConfiguration();
 
         repositoryConfiguration = config.findRepositoryById( getPrefix() );
@@ -142,61 +156,46 @@ private void fetchContentFromProxies( DavServerRequest request )
         throws ServletException
     {
         String resource = request.getLogicalResource();
-
-        if ( resource.endsWith( ".sha1" ) || resource.endsWith( ".md5" ) )
+        
+        if( resource.endsWith( ".sha1" ) ||
+            resource.endsWith( ".md5") )
         {
             // Checksums are fetched with artifact / metadata.
             return;
         }
-
+        
         try
         {
             ProjectReference project;
             VersionedReference versioned;
             ArtifactReference artifact;
-
-            try
-            {
-                artifact = layout.toArtifactReference( resource );
-                if ( artifact != null )
-                {
-                    connectors.fetchFromProxies( managedRepository, artifact );
-                    return;
-                }
-            }
-            catch ( LayoutException e )
-            {
-                /* eat it */
-            }
-
-            try
-            {
-                versioned = layout.toVersionedReference( resource );
-                if ( versioned != null )
-                {
-                    connectors.fetchFromProxies( managedRepository, versioned );
-                    return;
-                }
-            }
-            catch ( LayoutException e )
+            
+            artifact = layout.toArtifactReference( resource );
+            if( artifact != null )
             {
-                /* eat it */
+                connectors.fetchFromProxies( managedRepository, artifact );
+                return;
             }
-
-            try
+            
+            versioned = layout.toVersionedReference( resource );
+            if( versioned != null )
             {
-                project = layout.toProjectReference( resource );
-                if ( project != null )
-                {
-                    connectors.fetchFromProxies( managedRepository, project );
-                    return;
-                }
+                connectors.fetchFromProxies( managedRepository, versioned );
+                return;
             }
-            catch ( LayoutException e )
+            
+            project = layout.toProjectReference( resource );
+            if( project != null )
             {
-                /* eat it */
+                connectors.fetchFromProxies( managedRepository, project );
+                return;
             }
         }
+        catch ( ResourceDoesNotExistException e )
+        {
+            // return an HTTP 404 instead of HTTP 500 error.
+            return;
+        }
         catch ( ProxyException e )
         {
             throw new ServletException( "Unable to fetch resource.", e );