diff --git a/repository/src/main/java/org/apache/atlas/repository/graph/GraphBackedSearchIndexer.java b/repository/src/main/java/org/apache/atlas/repository/graph/GraphBackedSearchIndexer.java
index 9b921f918..67b5362c9 100755
--- a/repository/src/main/java/org/apache/atlas/repository/graph/GraphBackedSearchIndexer.java
+++ b/repository/src/main/java/org/apache/atlas/repository/graph/GraphBackedSearchIndexer.java
@@ -20,6 +20,7 @@ package org.apache.atlas.repository.graph;
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Preconditions;
+
 import org.apache.atlas.ApplicationProperties;
 import org.apache.atlas.AtlasErrorCode;
 import org.apache.atlas.AtlasException;
@@ -61,7 +62,6 @@ import org.apache.commons.configuration.Configuration;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import javax.inject.Inject;
 import java.math.BigDecimal;
 import java.math.BigInteger;
 import java.util.ArrayList;
@@ -70,7 +70,19 @@ import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 
-import static org.apache.atlas.model.typedef.AtlasBaseTypeDef.*;
+import javax.inject.Inject;
+
+import static org.apache.atlas.model.typedef.AtlasBaseTypeDef.ATLAS_TYPE_BIGDECIMAL;
+import static org.apache.atlas.model.typedef.AtlasBaseTypeDef.ATLAS_TYPE_BIGINTEGER;
+import static org.apache.atlas.model.typedef.AtlasBaseTypeDef.ATLAS_TYPE_BOOLEAN;
+import static org.apache.atlas.model.typedef.AtlasBaseTypeDef.ATLAS_TYPE_BYTE;
+import static org.apache.atlas.model.typedef.AtlasBaseTypeDef.ATLAS_TYPE_DATE;
+import static org.apache.atlas.model.typedef.AtlasBaseTypeDef.ATLAS_TYPE_DOUBLE;
+import static org.apache.atlas.model.typedef.AtlasBaseTypeDef.ATLAS_TYPE_FLOAT;
+import static org.apache.atlas.model.typedef.AtlasBaseTypeDef.ATLAS_TYPE_INT;
+import static org.apache.atlas.model.typedef.AtlasBaseTypeDef.ATLAS_TYPE_LONG;
+import static org.apache.atlas.model.typedef.AtlasBaseTypeDef.ATLAS_TYPE_SHORT;
+import static org.apache.atlas.model.typedef.AtlasBaseTypeDef.ATLAS_TYPE_STRING;
 
 
 /**
@@ -142,26 +154,17 @@ public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChang
             createIndexes(management, Constants.GUID_PROPERTY_KEY, String.class, true,
                     AtlasCardinality.SINGLE, true, true);
 
-            // Add creation_timestamp property to Vertex Index (mixed index)
-            createIndexes(management, Constants.TIMESTAMP_PROPERTY_KEY, Long.class, false, AtlasCardinality.SINGLE, false, false);
-
-            // Add modification_timestamp property to Vertex Index (mixed index)
-            createIndexes(management, Constants.MODIFICATION_TIMESTAMP_PROPERTY_KEY, Long.class, false,
-                    AtlasCardinality.SINGLE, false, false);
-
+            // create a composite index for entity creation timestamp
+            createIndexes(management, Constants.TIMESTAMP_PROPERTY_KEY, Long.class, false, AtlasCardinality.SINGLE, true, true);
 
             // create a mixed index for entity state. Set systemProperty flag deliberately to false
             // so that it doesnt create a composite index which has issues with
             // titan 0.5.4 - Refer https://groups.google.com/forum/#!searchin/aureliusgraphs/hemanth/aureliusgraphs/bx7T843mzXU/fjAsclx7GAAJ
             createIndexes(management, Constants.STATE_PROPERTY_KEY, String.class, false, AtlasCardinality.SINGLE, false, false);
 
-            // Create a composite and mixed index for created by property
-            createIndexes(management, Constants.CREATED_BY_KEY, String.class, false,
-                    AtlasCardinality.SINGLE, true, true);
-
-            // Create a composite and mixed index for modified by property
-            createIndexes(management, Constants.MODIFIED_BY_KEY, String.class, false,
-                    AtlasCardinality.SINGLE, true, true);
+            // create a composite index for entity modification timestamp
+            createIndexes(management, Constants.MODIFICATION_TIMESTAMP_PROPERTY_KEY, Long.class, false,
+                    AtlasCardinality.SINGLE, false, false);
 
             // create a composite and mixed index for type since it can be combined with other keys
             createIndexes(management, Constants.ENTITY_TYPE_PROPERTY_KEY, String.class, false, AtlasCardinality.SINGLE,
@@ -214,17 +217,14 @@ public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChang
      * This is upon adding a new type to Store.
      *
      * @param dataTypes data type
-     * @throws AtlasException
+     * @throws org.apache.atlas.AtlasException
      */
     @Override
     public void onAdd(Collection<? extends IDataType> dataTypes) throws AtlasException {
         AtlasGraphManagement management = provider.get().getManagementSystem();
                
         for (IDataType dataType : dataTypes) {
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Creating indexes for type name={}, definition={}", dataType.getName(), dataType.getClass());
-            }
-
+            LOG.debug("Creating indexes for type name={}, definition={}", dataType.getName(), dataType.getClass());
             try {
                 addIndexForType(management, dataType);
                 LOG.info("Index creation for type {} complete", dataType.getName());
@@ -267,8 +267,8 @@ public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChang
                                          AtlasAttributeDef attributeDef) {
         final String propertyName = GraphHelper.encodePropertyKey(typeName + "." + attributeDef.getName());
         AtlasCardinality cardinality = toAtlasCardinality(attributeDef.getCardinality());
-        boolean isUnique = attributeDef.getIsUnique();
-        boolean isIndexable = attributeDef.getIsIndexable();
+        boolean isUnique = attributeDef.isUnique();
+        boolean isIndexable = attributeDef.isIndexable();
         String attribTypeName = attributeDef.getTypeName();
         boolean isBuiltInType = AtlasTypeUtil.isBuiltInType(attribTypeName);
         boolean isArrayType = AtlasTypeUtil.isArrayType(attribTypeName);
@@ -497,17 +497,17 @@ public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChang
             AtlasPropertyKey propertyKey, boolean enforceUniqueness) {
         
         String propertyName = propertyKey.getName();
-
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("Creating composite index for property {} of type {}; isUnique={} ", propertyName, propertyClass.getName(), enforceUniqueness);
-        }
+        LOG.debug("Creating composite index for property {} of type {} ", propertyName, propertyClass.getName());
 
         AtlasGraphIndex existingIndex = management.getGraphIndex(propertyName);
         if (existingIndex == null) {
+            if (enforceUniqueness) {
+                LOG.debug("Enabling unique index for property {} of type {} ", propertyName, propertyClass.getName());
+            }
             management.createExactMatchIndex(propertyName, enforceUniqueness, Collections.singletonList(propertyKey));
-        }
 
-        LOG.info("Created composite index for property {} of type {}; isUnique={} ", propertyName, propertyClass.getName(), enforceUniqueness);
+        }
+        LOG.info("Created composite index for property {} of type {} ", propertyName, propertyClass.getName());
     }
     
 
@@ -527,10 +527,8 @@ public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChang
             Class propertyClass, AtlasPropertyKey propertyKey, final String systemPropertyKey,
             AtlasCardinality cardinality) {
 
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("Creating composite index for property {} of type {} and {}", propertyKey.getName(), propertyClass.getName(),
-                    systemPropertyKey);
-        }
+        LOG.debug("Creating composite index for property {} of type {} and {}", propertyKey.getName(), propertyClass.getName(),
+                systemPropertyKey);
 
         AtlasPropertyKey typePropertyKey = management.getPropertyKey(systemPropertyKey);
         if (typePropertyKey == null) {
@@ -542,7 +540,7 @@ public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChang
 
         if (existingIndex == null) {
             
-            List<AtlasPropertyKey> keys = new ArrayList<>(2);
+            List<AtlasPropertyKey> keys = new ArrayList<AtlasPropertyKey>(2);
             keys.add(propertyKey);
             keys.add(typePropertyKey);
             management.createExactMatchIndex(indexName, false, keys);
@@ -555,12 +553,9 @@ public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChang
     private void updateVertexIndex(AtlasGraphManagement management, String propertyName, Class propertyClass,
             AtlasCardinality cardinality, AtlasPropertyKey propertyKey) {
         if (checkIfVertexIndexApplicable(propertyClass, cardinality)) {
-            if (LOG.isDebugEnabled()) {
-                LOG.debug("Creating backing index for property {} of type {} ", propertyName, propertyClass.getName());
-            }
-
             // Use backing index
             management.addVertexIndexKey(Constants.VERTEX_INDEX, propertyKey);
+            LOG.debug("Creating backing index for property {} of type {} ", propertyName, propertyClass.getName());
 
             LOG.info("Created backing index for property {} of type {} ", propertyName, propertyClass.getName());
         }
@@ -612,9 +607,7 @@ public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChang
 
     @Override
     public void onChange(ChangedTypeDefs changedTypeDefs) throws AtlasBaseException {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("Processing changed typedefs {}", changedTypeDefs);
-        }
+        LOG.info("Adding indexes for changed typedefs");
         AtlasGraphManagement management = null;
         try {
             management = provider.get().getManagementSystem();
@@ -633,13 +626,6 @@ public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChang
                 }
             }
 
-            // Invalidate the property key for deleted types
-            if (CollectionUtils.isNotEmpty(changedTypeDefs.getDeletedTypeDefs())) {
-                for (AtlasBaseTypeDef typeDef : changedTypeDefs.getDeletedTypeDefs()) {
-                    cleanupIndices(management, typeDef);
-                }
-            }
-
             //Commit indexes
             commit(management);
         } catch (RepositoryException | IndexException e) {
@@ -649,60 +635,6 @@ public class GraphBackedSearchIndexer implements SearchIndexer, ActiveStateChang
 
     }
 
-    private void cleanupIndices(AtlasGraphManagement management, AtlasBaseTypeDef typeDef) {
-        Preconditions.checkNotNull(typeDef, "Cannot process null typedef");
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("Cleaning up index for {}", typeDef);
-        }
-
-        if (typeDef instanceof AtlasEnumDef) {
-            // Only handle complex types like Struct, Classification and Entity
-            return;
-        }
-
-        if (typeDef instanceof AtlasStructDef) {
-            AtlasStructDef structDef = (AtlasStructDef) typeDef;
-            List<AtlasAttributeDef> attributeDefs = structDef.getAttributeDefs();
-            if (CollectionUtils.isNotEmpty(attributeDefs)) {
-                for (AtlasAttributeDef attributeDef : attributeDefs) {
-                    cleanupIndexForAttribute(management, typeDef.getName(), attributeDef);
-                }
-            }
-        } else if (!AtlasTypeUtil.isBuiltInType(typeDef.getName())){
-            throw new IllegalArgumentException("bad data type" + typeDef.getName());
-        }
-    }
-
-    private void cleanupIndexForAttribute(AtlasGraphManagement management, String typeName, AtlasAttributeDef attributeDef) {
-        final String propertyName = GraphHelper.encodePropertyKey(typeName + "." + attributeDef.getName());
-        String attribTypeName = attributeDef.getTypeName();
-        boolean isBuiltInType = AtlasTypeUtil.isBuiltInType(attribTypeName);
-        boolean isArrayType = AtlasTypeUtil.isArrayType(attribTypeName);
-        boolean isMapType = AtlasTypeUtil.isMapType(attribTypeName);
-
-        try {
-            AtlasType atlasType = typeRegistry.getType(attribTypeName);
-
-            if (isMapType || isArrayType || isClassificationType(atlasType) || isEntityType(atlasType)) {
-                LOG.warn("Ignoring non-indexable attribute {}", attribTypeName);
-            } else if (isBuiltInType || isEnumType(atlasType)) {
-                cleanupIndex(management, propertyName);
-            } else if (isStructType(atlasType)) {
-                AtlasStructDef structDef = typeRegistry.getStructDefByName(attribTypeName);
-                cleanupIndices(management, structDef);
-            }
-        } catch (AtlasBaseException e) {
-            LOG.error("No type exists for {}", attribTypeName, e);
-        }
-    }
-
-    private void cleanupIndex(AtlasGraphManagement management, String propertyKey) {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("Invalidating property key = {}", propertyKey);
-        }
-        management.deletePropertyKey(propertyKey);
-    }
-
     private void attemptRollback(ChangedTypeDefs changedTypeDefs, AtlasGraphManagement management)
             throws AtlasBaseException {
         if (null != management) {