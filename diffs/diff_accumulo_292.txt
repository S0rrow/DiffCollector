diff --git a/server/tserver/src/main/java/org/apache/accumulo/tserver/log/TabletServerLogger.java b/server/tserver/src/main/java/org/apache/accumulo/tserver/log/TabletServerLogger.java
index 04f4e50fff..e6d71858b7 100644
--- a/server/tserver/src/main/java/org/apache/accumulo/tserver/log/TabletServerLogger.java
+++ b/server/tserver/src/main/java/org/apache/accumulo/tserver/log/TabletServerLogger.java
@@ -16,8 +16,6 @@
  */
 package org.apache.accumulo.tserver.log;
 
-import static com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly;
-
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -43,8 +41,6 @@ import org.apache.accumulo.core.protobuf.ProtobufUtil;
 import org.apache.accumulo.core.replication.ReplicationConfigurationUtil;
 import org.apache.accumulo.core.util.SimpleThreadPool;
 import org.apache.accumulo.fate.util.LoggingRunnable;
-import org.apache.accumulo.fate.zookeeper.Retry;
-import org.apache.accumulo.fate.zookeeper.RetryFactory;
 import org.apache.accumulo.server.conf.TableConfiguration;
 import org.apache.accumulo.server.fs.VolumeManager;
 import org.apache.accumulo.server.replication.StatusUtil;
@@ -61,6 +57,10 @@ import org.apache.hadoop.fs.Path;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.google.common.cache.Cache;
+import com.google.common.cache.CacheBuilder;
+import static com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly;
+
 /**
  * Central logging facility for the TServerInfo.
  *
@@ -99,8 +99,9 @@ public class TabletServerLogger {
   private final AtomicLong syncCounter;
   private final AtomicLong flushCounter;
 
-  private final RetryFactory retryFactory;
-  private Retry retry = null;
+  private final static int HALT_AFTER_ERROR_COUNT = 5;
+  // Die if we get 5 WAL creation errors in 10 seconds
+  private final Cache<Long,Object> walErrors = CacheBuilder.newBuilder().maximumSize(HALT_AFTER_ERROR_COUNT).expireAfterWrite(10, TimeUnit.SECONDS).build();
 
   static private abstract class TestCallWithWriteLock {
     abstract boolean test();
@@ -145,13 +146,11 @@ public class TabletServerLogger {
     }
   }
 
-  public TabletServerLogger(TabletServer tserver, long maxSize, AtomicLong syncCounter, AtomicLong flushCounter, RetryFactory retryFactory) {
+  public TabletServerLogger(TabletServer tserver, long maxSize, AtomicLong syncCounter, AtomicLong flushCounter) {
     this.tserver = tserver;
     this.maxSize = maxSize;
     this.syncCounter = syncCounter;
     this.flushCounter = flushCounter;
-    this.retryFactory = retryFactory;
-    this.retry = null;
   }
 
   private DfsLogger initializeLoggers(final AtomicInteger logIdOut) throws IOException {
@@ -218,40 +217,15 @@ public class TabletServerLogger {
         currentLog = (DfsLogger) next;
         logId.incrementAndGet();
         log.info("Using next log " + currentLog.getFileName());
-
-        // When we successfully create a WAL, make sure to reset the Retry.
-        if (null != retry) {
-          retry = null;
-        }
-
         return;
       } else {
         throw new RuntimeException("Error: unexpected type seen: " + next);
       }
     } catch (Exception t) {
-      if (null == retry) {
-        retry = retryFactory.create();
-      }
-
-      // We have more retries or we exceeded the maximum number of accepted failures
-      if (retry.canRetry()) {
-        // Use the retry and record the time in which we did so
-        retry.useRetry();
-
-        try {
-          // Backoff
-          retry.waitForNextAttempt();
-        } catch (InterruptedException e) {
-          Thread.currentThread().interrupt();
-          throw new RuntimeException(e);
-        }
-      } else {
-        log.error("Repeatedly failed to create WAL. Going to exit tabletserver.", t);
-        // We didn't have retries or we failed too many times.
+      walErrors.put(System.currentTimeMillis(), "");
+      if (walErrors.size() >= HALT_AFTER_ERROR_COUNT) {
         Halt.halt("Experienced too many errors creating WALs, giving up");
       }
-
-      // The exception will trigger the log creation to be re-attempted.
       throw new RuntimeException(t);
     }
   }
@@ -526,7 +500,8 @@ public class TabletServerLogger {
     int seq = write(commitSession, true, new Writer() {
       @Override
       public LoggerOperation write(DfsLogger logger, int ignored) throws Exception {
-        return logger.minorCompactionFinished(walogSeq, commitSession.getLogId(), fullyQualifiedFileName);
+        logger.minorCompactionFinished(walogSeq, commitSession.getLogId(), fullyQualifiedFileName).await();
+        return null;
       }
     });
 
@@ -539,7 +514,8 @@ public class TabletServerLogger {
     write(commitSession, false, new Writer() {
       @Override
       public LoggerOperation write(DfsLogger logger, int ignored) throws Exception {
-        return logger.minorCompactionStarted(seq, commitSession.getLogId(), fullyQualifiedFileName);
+        logger.minorCompactionStarted(seq, commitSession.getLogId(), fullyQualifiedFileName).await();
+        return null;
       }
     });
     return seq;