diff --git a/webapp/src/main/java/org/apache/atlas/web/resources/EntityResource.java b/webapp/src/main/java/org/apache/atlas/web/resources/EntityResource.java
index bbf01a6be..0d25af74e 100755
--- a/webapp/src/main/java/org/apache/atlas/web/resources/EntityResource.java
+++ b/webapp/src/main/java/org/apache/atlas/web/resources/EntityResource.java
@@ -25,7 +25,6 @@ import org.apache.atlas.AtlasConstants;
 import org.apache.atlas.AtlasException;
 import org.apache.atlas.EntityAuditEvent;
 import org.apache.atlas.services.MetadataService;
-import org.apache.atlas.typesystem.IStruct;
 import org.apache.atlas.typesystem.Referenceable;
 import org.apache.atlas.typesystem.exception.EntityExistsException;
 import org.apache.atlas.typesystem.exception.EntityNotFoundException;
@@ -340,7 +339,7 @@ public class EntityResource {
     private Response updateEntityPartialByGuid(String guid, HttpServletRequest request) {
         String entityJson = null;
         try {
-            guid = ParamChecker.notEmpty(guid, "Guid property cannot be null");
+            ParamChecker.notEmpty(guid, "Guid property cannot be null");
             entityJson = Servlets.getRequestPayload(request);
             LOG.info("partially updating entity for guid {} : {} ", guid, entityJson);
 
@@ -469,7 +468,7 @@ public class EntityResource {
             }
 
             LOG.debug("Fetching entity definition for guid={} ", guid);
-            guid = ParamChecker.notEmpty(guid, "guid cannot be null");
+            ParamChecker.notEmpty(guid, "guid cannot be null");
             final String entityDefinition = metadataService.getEntityDefinition(guid);
 
             JSONObject response = new JSONObject();
@@ -565,9 +564,9 @@ public class EntityResource {
     public Response getEntityDefinitionByAttribute(String entityType, String attribute, String value) {
         try {
             LOG.debug("Fetching entity definition for type={}, qualified name={}", entityType, value);
-            entityType = ParamChecker.notEmpty(entityType, "Entity type cannot be null");
-            attribute  = ParamChecker.notEmpty(attribute, "attribute name cannot be null");
-            value      = ParamChecker.notEmpty(value, "attribute value cannot be null");
+            ParamChecker.notEmpty(entityType, "Entity type cannot be null");
+            ParamChecker.notEmpty(attribute, "attribute name cannot be null");
+            ParamChecker.notEmpty(value, "attribute value cannot be null");
 
             final String entityDefinition = metadataService.getEntityDefinition(entityType, attribute, value);
 
@@ -639,88 +638,6 @@ public class EntityResource {
         }
     }
 
-    /**
-     * Fetches the trait definitions of all the traits associated to the given entity
-     * @param guid globally unique identifier for the entity
-     */
-    @GET
-    @Path("{guid}/traitDefinitions")
-    @Produces(Servlets.JSON_MEDIA_TYPE)
-    public Response getTraitDefinitionsForEntity(@PathParam("guid") String guid){
-        AtlasPerfTracer perf = null;
-        try {
-            if(AtlasPerfTracer.isPerfTraceEnabled(PERF_LOG)) {
-                perf = AtlasPerfTracer.getPerfTracer(PERF_LOG, "EntityResource.getTraitDefinitionsForEntity(" + guid + ")");
-            }
-            LOG.debug("Fetching all trait definitions for entity={}", guid);
-            final String entityDefinition = metadataService.getEntityDefinition(guid);
-
-            Referenceable entity = InstanceSerialization.fromJsonReferenceable(entityDefinition, true);
-            JSONArray traits = new JSONArray();
-            for (String traitName : entity.getTraits()) {
-                IStruct trait = entity.getTrait(traitName);
-                traits.put(new JSONObject(InstanceSerialization.toJson(trait, true)));
-            }
-
-            JSONObject response = new JSONObject();
-            response.put(AtlasClient.REQUEST_ID, Servlets.getRequestId());
-            response.put(AtlasClient.RESULTS, traits);
-            response.put(AtlasClient.COUNT, traits.length());
-
-            return Response.ok(response).build();
-        } catch (EntityNotFoundException e){
-            LOG.error("An entity with GUID={} does not exist", guid, e);
-            throw new WebApplicationException(Servlets.getErrorResponse(e, Response.Status.NOT_FOUND));
-        } catch (AtlasException | IllegalArgumentException e) {
-            LOG.error("Unable to get trait definitions for entity {}", guid, e);
-            throw new WebApplicationException(Servlets.getErrorResponse(e, Response.Status.BAD_REQUEST));
-        } catch (Throwable e) {
-            LOG.error("Unable to get trait definitions for entity {}", guid, e);
-            throw new WebApplicationException(Servlets.getErrorResponse(e, Response.Status.INTERNAL_SERVER_ERROR));
-        } finally {
-            AtlasPerfTracer.log(perf);
-        }
-
-    }
-
-    /**
-     * Fetches the trait definition for an entity given its guid and trait name
-     *
-     * @param guid globally unique identifier for the entity
-     * @param traitName name of the trait
-     */
-    @GET
-    @Path("{guid}/traitDefinitions/{traitName}")
-    @Produces(Servlets.JSON_MEDIA_TYPE)
-    public Response getTraitDefinitionForEntity(@PathParam("guid") String guid, @PathParam("traitName") String traitName){
-        AtlasPerfTracer perf = null;
-        try {
-            if(AtlasPerfTracer.isPerfTraceEnabled(PERF_LOG)) {
-                perf = AtlasPerfTracer.getPerfTracer(PERF_LOG, "EntityResource.getTraitDefinitionForEntity(" + guid + ", " + traitName + ")");
-            }
-            LOG.debug("Fetching trait definition for entity {} and trait name {}", guid, traitName);
-            final IStruct traitDefinition = metadataService.getTraitDefinition(guid, traitName);
-
-            JSONObject response = new JSONObject();
-            response.put(AtlasClient.REQUEST_ID, Servlets.getRequestId());
-            response.put(AtlasClient.RESULTS, new JSONObject(InstanceSerialization.toJson(traitDefinition, true)));
-
-            return Response.ok(response).build();
-
-        } catch (EntityNotFoundException e){
-            LOG.error("An entity with GUID={} does not exist", guid, e);
-            throw new WebApplicationException(Servlets.getErrorResponse(e, Response.Status.NOT_FOUND));
-        } catch (AtlasException | IllegalArgumentException e) {
-            LOG.error("Unable to get trait definition for entity {} and trait {}", guid, traitName, e);
-            throw new WebApplicationException(Servlets.getErrorResponse(e, Response.Status.BAD_REQUEST));
-        } catch (Throwable e) {
-            LOG.error("Unable to get trait definition for entity {} and trait {}", guid, traitName, e);
-            throw new WebApplicationException(Servlets.getErrorResponse(e, Response.Status.INTERNAL_SERVER_ERROR));
-        } finally {
-            AtlasPerfTracer.log(perf);
-        }
-    }
-
     /**
      * Adds a new trait to an existing entity represented by a guid.
      *