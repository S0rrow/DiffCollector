diff --git a/webapp/src/main/java/org/apache/atlas/web/service/SecureEmbeddedServer.java b/webapp/src/main/java/org/apache/atlas/web/service/SecureEmbeddedServer.java
index a6af5a22b..ca712933e 100755
--- a/webapp/src/main/java/org/apache/atlas/web/service/SecureEmbeddedServer.java
+++ b/webapp/src/main/java/org/apache/atlas/web/service/SecureEmbeddedServer.java
@@ -18,13 +18,11 @@
 
 package org.apache.atlas.web.service;
 
-import org.apache.atlas.ApplicationProperties;
-import org.apache.atlas.AtlasConfiguration;
-import org.apache.atlas.AtlasException;
+import org.apache.commons.configuration.ConfigurationException;
+import org.apache.commons.configuration.PropertiesConfiguration;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.security.alias.CredentialProvider;
 import org.apache.hadoop.security.alias.CredentialProviderFactory;
-import org.eclipse.jetty.http.HttpVersion;
 import org.eclipse.jetty.server.Connector;
 import org.eclipse.jetty.server.HttpConfiguration;
 import org.eclipse.jetty.server.HttpConnectionFactory;
@@ -32,17 +30,15 @@ import org.eclipse.jetty.server.SecureRequestCustomizer;
 import org.eclipse.jetty.server.ServerConnector;
 import org.eclipse.jetty.server.SslConnectionFactory;
 import org.eclipse.jetty.util.ssl.SslContextFactory;
+import org.eclipse.jetty.http.HttpVersion;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import java.io.IOException;
-import java.util.List;
 
-import static org.apache.atlas.security.SecurityProperties.ATLAS_SSL_EXCLUDE_CIPHER_SUITES;
 import static org.apache.atlas.security.SecurityProperties.CERT_STORES_CREDENTIAL_PROVIDER_PATH;
 import static org.apache.atlas.security.SecurityProperties.CLIENT_AUTH_KEY;
 import static org.apache.atlas.security.SecurityProperties.DEFATULT_TRUSTORE_FILE_LOCATION;
-import static org.apache.atlas.security.SecurityProperties.DEFAULT_CIPHER_SUITES;
 import static org.apache.atlas.security.SecurityProperties.DEFAULT_KEYSTORE_FILE_LOCATION;
 import static org.apache.atlas.security.SecurityProperties.KEYSTORE_FILE_KEY;
 import static org.apache.atlas.security.SecurityProperties.KEYSTORE_PASSWORD_KEY;
@@ -62,27 +58,23 @@ public class SecureEmbeddedServer extends EmbeddedServer {
     }
 
     protected Connector getConnector(int port) throws IOException {
-        org.apache.commons.configuration.Configuration config = getConfiguration();
+        PropertiesConfiguration config = getConfiguration();
 
         SslContextFactory sslContextFactory = new SslContextFactory();
         sslContextFactory.setKeyStorePath(config.getString(KEYSTORE_FILE_KEY,
-                System.getProperty(KEYSTORE_FILE_KEY, DEFAULT_KEYSTORE_FILE_LOCATION)));
+            System.getProperty(KEYSTORE_FILE_KEY, DEFAULT_KEYSTORE_FILE_LOCATION)));
         sslContextFactory.setKeyStorePassword(getPassword(config, KEYSTORE_PASSWORD_KEY));
         sslContextFactory.setKeyManagerPassword(getPassword(config, SERVER_CERT_PASSWORD_KEY));
         sslContextFactory.setTrustStorePath(config.getString(TRUSTSTORE_FILE_KEY,
-                System.getProperty(TRUSTSTORE_FILE_KEY, DEFATULT_TRUSTORE_FILE_LOCATION)));
+            System.getProperty(TRUSTSTORE_FILE_KEY, DEFATULT_TRUSTORE_FILE_LOCATION)));
         sslContextFactory.setTrustStorePassword(getPassword(config, TRUSTSTORE_PASSWORD_KEY));
         sslContextFactory.setWantClientAuth(config.getBoolean(CLIENT_AUTH_KEY, Boolean.getBoolean(CLIENT_AUTH_KEY)));
 
-        List<Object> cipherList = config.getList(ATLAS_SSL_EXCLUDE_CIPHER_SUITES, DEFAULT_CIPHER_SUITES);
-        sslContextFactory.setExcludeCipherSuites(cipherList.toArray(new String[cipherList.size()]));
-        sslContextFactory.setRenegotiationAllowed(false);
-
         // SSL HTTP Configuration
         // HTTP Configuration
         HttpConfiguration http_config = new HttpConfiguration();
         http_config.setSecureScheme("https");
-        final int bufferSize = AtlasConfiguration.WEBSERVER_REQUEST_BUFFER_SIZE.getInt();
+        final int bufferSize = getBufferSize();
         http_config.setSecurePort(port);
         http_config.setRequestHeaderSize(bufferSize);
         http_config.setResponseHeaderSize(bufferSize);
@@ -110,7 +102,7 @@ public class SecureEmbeddedServer extends EmbeddedServer {
      * @return the password.
      * @throws IOException
      */
-    private String getPassword(org.apache.commons.configuration.Configuration config, String key) throws IOException {
+    private String getPassword(PropertiesConfiguration config, String key) throws IOException {
 
         String password;
 
@@ -139,11 +131,11 @@ public class SecureEmbeddedServer extends EmbeddedServer {
      * Returns the application configuration.
      * @return
      */
-    protected org.apache.commons.configuration.Configuration getConfiguration() {
+    protected PropertiesConfiguration getConfiguration() {
         try {
-            return ApplicationProperties.get();
-        } catch (AtlasException e) {
-            throw new RuntimeException("Unable to load configuration: " + ApplicationProperties.APPLICATION_PROPERTIES);
+            return new PropertiesConfiguration("application.properties");
+        } catch (ConfigurationException e) {
+            throw new RuntimeException("Unable to load configuration: application.properties");
         }
     }
 }