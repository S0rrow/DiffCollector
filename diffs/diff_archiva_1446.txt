diff --git a/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/maven/archiva/webdav/ArchivaDavResourceFactory.java b/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/maven/archiva/webdav/ArchivaDavResourceFactory.java
index 3b4d0b27d..7e8c12958 100644
--- a/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/maven/archiva/webdav/ArchivaDavResourceFactory.java
+++ b/archiva-modules/archiva-web/archiva-webdav/src/main/java/org/apache/maven/archiva/webdav/ArchivaDavResourceFactory.java
@@ -56,7 +56,6 @@
 import org.codehaus.plexus.redback.policy.AccountLockedException;
 import org.codehaus.plexus.redback.policy.MustChangePasswordException;
 import org.codehaus.plexus.redback.system.SecuritySession;
-import org.codehaus.plexus.redback.system.SecuritySystemConstants;
 import org.codehaus.plexus.redback.xwork.filter.authentication.HttpAuthenticator;
 import org.codehaus.plexus.util.xml.pull.XmlPullParserException;
 import org.slf4j.Logger;
@@ -64,9 +63,7 @@
 
 import javax.servlet.http.HttpServletResponse;
 import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.List;
-import java.util.Map;
 import java.io.*;
 
 /**
@@ -126,7 +123,7 @@
     public DavResource createResource( final DavResourceLocator locator, final DavServletRequest request,
                                        final DavServletResponse response )
         throws DavException
-    {   
+    {        
         checkLocatorIsInstanceOfRepositoryLocator( locator );
         ArchivaDavResourceLocator archivaLocator = (ArchivaDavResourceLocator) locator;
         
@@ -639,7 +636,7 @@ protected boolean isAuthorized( DavServletRequest request, String repositoryId )
         {
             AuthenticationResult result = httpAuth.getAuthenticationResult( request, null );            
             SecuritySession securitySession = httpAuth.getSecuritySession();
-                       
+            
             return servletAuth.isAuthenticated( request, result ) &&
                 servletAuth.isAuthorized( request, securitySession, repositoryId,
                                           WebdavMethodUtil.isWriteMethod( request.getMethod() ) );
@@ -674,63 +671,36 @@ private DavResource getResource( DavServletRequest request, List<String> reposit
         LogicalResource logicalResource =
             new LogicalResource( RepositoryPathUtil.getLogicalResource( locator.getResourcePath() ) );
         
-        // flow: 
-        // if the current user logged in has permission to any of the repositories, allow user to
-        // browse the repo group but displaying only the repositories which the user has permission to access.
-        // otherwise, prompt for authentication.
-        
-        // put the current session in the session map which will be passed to ArchivaXworkUser
-        Map<String, Object> sessionMap = new HashMap<String, Object>();
-        if( request.getSession().getAttribute( SecuritySystemConstants.SECURITY_SESSION_KEY ) != null )
+        for( String repository : repositories )
         {
-            sessionMap.put( SecuritySystemConstants.SECURITY_SESSION_KEY, 
-                            request.getSession().getAttribute( SecuritySystemConstants.SECURITY_SESSION_KEY ) );
-        }
-        
-        String activePrincipal = ArchivaXworkUser.getActivePrincipal( sessionMap );        
-        boolean allow = isAllowedToContinue( request, repositories, activePrincipal );
-              
-        if( allow )
-        {            
-            for( String repository : repositories )
-            {    
-                // for prompted authentication
-                if( httpAuth.getSecuritySession() != null )
+            ManagedRepositoryContent managedRepository = null;
+
+            try
+            {
+                managedRepository = getManagedRepository( repository );
+            }
+            catch ( DavException de )
+            {
+                throw new DavException( HttpServletResponse.SC_NOT_FOUND, "Invalid managed repository <" +
+                    repository + ">" );
+            }
+            
+            if( isAuthorized( request, repository ) )
+            {
+                if ( !locator.getResourcePath().startsWith( ArchivaVirtualDavResource.HIDDEN_PATH_PREFIX ) )
                 {
-                    try
+                    if( managedRepository != null )
                     {   
-                        if( isAuthorized( request, repository ) )                        
+                        File resourceFile = new File( managedRepository.getRepoRoot(), logicalResource.getPath() );
+                        if( resourceFile.exists() )
                         {
-                            getResource( locator, mergedRepositoryContents, logicalResource, repository );
-                        }
-                    }                    
-                    catch ( DavException e )
-                    {                        
-                        continue;
+                            mergedRepositoryContents.add( resourceFile );
+                        }                    
                     }
                 }
-                else
-                {
-                    // for the current user logged in 
-                    try
-                    {
-                        if( servletAuth.isAuthorizedToAccessVirtualRepository( activePrincipal, repository ) )
-                        {
-                            getResource( locator, mergedRepositoryContents, logicalResource, repository );
-                        }
-                    }
-                    catch ( UnauthorizedException e )                    
-                    {                        
-                        continue;
-                    }
-                }                
             }
-        }
-        else
-        {
-            throw new UnauthorizedDavException( locator.getRepositoryId(), "User not authorized." );
-        }
-        
+        }      
+                
         ArchivaVirtualDavResource resource =
             new ArchivaVirtualDavResource( mergedRepositoryContents, logicalResource.getPath(), mimeTypes, locator, this );
        
@@ -742,88 +712,5 @@ private DavResource getResource( DavServletRequest request, List<String> reposit
         
         return resource;
     }
-
-    private void getResource( ArchivaDavResourceLocator locator, List<File> mergedRepositoryContents,
-                              LogicalResource logicalResource, String repository )
-        throws DavException
-    {
-        ManagedRepositoryContent managedRepository = null;
-
-        try
-        {
-            managedRepository = getManagedRepository( repository );
-        }
-        catch ( DavException de )
-        {
-            throw new DavException( HttpServletResponse.SC_NOT_FOUND, "Invalid managed repository <" +
-                repository + ">" );
-        }                            
-        
-        if ( !locator.getResourcePath().startsWith( ArchivaVirtualDavResource.HIDDEN_PATH_PREFIX ) )
-        {
-            if( managedRepository != null )
-            {   
-                File resourceFile = new File( managedRepository.getRepoRoot(), logicalResource.getPath() );
-                if( resourceFile.exists() )
-                {                    
-                    mergedRepositoryContents.add( resourceFile );
-                }                    
-            }
-        }
-    }
     
-    /**
-     * Check if the current user is authorized to access any of the repos
-     *  
-     * @param request
-     * @param repositories
-     * @param activePrincipal
-     * @return
-     */
-    private boolean isAllowedToContinue( DavServletRequest request, List<String> repositories, String activePrincipal )    
-    {
-        boolean allow = false;
-        
-              
-        // if securitySession != null, it means that the user was prompted for authentication
-        if( httpAuth.getSecuritySession() != null )
-        {
-            for( String repository : repositories )
-            {
-                try
-                {
-                    if( isAuthorized( request, repository ) )
-                    {
-                        allow = true;
-                        break;
-                    }
-                }
-                catch( DavException e )
-                {                    
-                    continue;
-                }
-            }  
-        }
-        else
-        {   
-            for( String repository : repositories )
-            {
-                try
-                {
-                    if( servletAuth.isAuthorizedToAccessVirtualRepository( activePrincipal, repository ) )
-                    {
-                        allow = true;
-                        break;
-                    }
-                }
-                catch ( UnauthorizedException e )
-                {                    
-                    continue;
-                }
-            }  
-        }
-        
-        return allow;
-    }
-        
 }