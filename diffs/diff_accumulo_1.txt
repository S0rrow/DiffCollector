diff --git a/src/server/src/main/java/org/apache/accumulo/server/tabletserver/TabletServer.java b/src/server/src/main/java/org/apache/accumulo/server/tabletserver/TabletServer.java
index d4c7bfb291..3a5caccb06 100644
--- a/src/server/src/main/java/org/apache/accumulo/server/tabletserver/TabletServer.java
+++ b/src/server/src/main/java/org/apache/accumulo/server/tabletserver/TabletServer.java
@@ -1,19 +1,3 @@
-/*
-* Licensed to the Apache Software Foundation (ASF) under one or more
-* contributor license agreements.  See the NOTICE file distributed with
-* this work for additional information regarding copyright ownership.
-* The ASF licenses this file to You under the Apache License, Version 2.0
-* (the "License"); you may not use this file except in compliance with
-* the License.  You may obtain a copy of the License at
-*
-*     http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
 package org.apache.accumulo.server.tabletserver;
 
 import static org.apache.accumulo.server.problems.ProblemType.TABLET_LOAD;
@@ -214,8 +198,6 @@ public class TabletServer extends AbstractMetricsImpl implements
     private static AtomicLong                            scanCount               = new AtomicLong();
     private static final Class<? extends LoggerStrategy> DEFAULT_LOGGER_STRATEGY = RoundRobinLoggerStrategy.class;
 
-    private static final long MAX_TIME_TO_WAIT_FOR_SCAN_RESULT_MILLIS = 1000;
-    
     private TabletServerLogger                           logger;
     private LoggerStrategy                               loggerStrategy;
 
@@ -844,16 +826,17 @@ public class TabletServer extends AbstractMetricsImpl implements
         @Override
         public List<TKeyExtent> bulkImport(TInfo tinfo, AuthInfo credentials, long tid, Map<TKeyExtent, Map<String, MapFileInfo>> files, boolean setTime)
                 throws ThriftSecurityException {
+            ArrayList<TKeyExtent> failures = new ArrayList<TKeyExtent>();
 
-            try {
-            	if (!authenticator.hasSystemPermission(credentials, credentials.user, SystemPermission.SYSTEM))
-            		throw new ThriftSecurityException(credentials.user, SecurityErrorCode.PERMISSION_DENIED);
-            } catch (AccumuloSecurityException e) {
-            	throw e.asThriftException();
+            for (Entry<TKeyExtent, Map<String, MapFileInfo>> entry : files.entrySet()) {
+                try {
+                    if (!authenticator.hasTablePermission(credentials, credentials.user, new String(entry.getKey().getTable()), TablePermission.BULK_IMPORT))
+                        throw new ThriftSecurityException(credentials.user, SecurityErrorCode.PERMISSION_DENIED);
+                } catch (AccumuloSecurityException e) {
+                    throw e.asThriftException();
+                }
             }
 
-            ArrayList<TKeyExtent> failures = new ArrayList<TKeyExtent>();
-            
             for (Entry<TKeyExtent, Map<String, MapFileInfo>> entry : files.entrySet()) {
                 TKeyExtent tke = entry.getKey();
                 Map<String, MapFileInfo> fileMap = entry.getValue();
@@ -1147,7 +1130,7 @@ public class TabletServer extends AbstractMetricsImpl implements
         private ScanResult continueScan(TInfo tinfo, long scanID, ScanSession scanSession)
                 throws NoSuchScanIDException, NotServingTabletException,
                 org.apache.accumulo.core.tabletserver.thrift.TooManyFilesException {
-        	
+
             if (scanSession.nextBatchTask == null) {
                 scanSession.nextBatchTask = new NextBatchTask(scanID, scanSession.interruptFlag);
                 resourceManager.executeReadAhead(scanSession.extent, scanSession.nextBatchTask);
@@ -1155,7 +1138,7 @@ public class TabletServer extends AbstractMetricsImpl implements
 
             ScanBatch bresult;
             try {
-                bresult = scanSession.nextBatchTask.get(MAX_TIME_TO_WAIT_FOR_SCAN_RESULT_MILLIS, TimeUnit.MILLISECONDS);
+                bresult = scanSession.nextBatchTask.get(3, TimeUnit.SECONDS);
                 scanSession.nextBatchTask = null;
             } catch (ExecutionException e) {
                 sessionManager.removeSession(scanID);
@@ -1174,8 +1157,7 @@ public class TabletServer extends AbstractMetricsImpl implements
                     throw new NoSuchScanIDException();
             } catch (TimeoutException e) {
                 List<TKeyValue> param = Collections.emptyList();
-                long timeout = acuConf.getTimeInMillis(Property.TSERV_CLIENT_TIMEOUT);
-                sessionManager.removeIfNotAccessed(scanID, timeout);
+                sessionManager.removeIfNotAccessed(scanID, 3000);
                 return new ScanResult(param, true);
             } catch (Throwable t) {
                 sessionManager.removeSession(scanID);
@@ -1322,12 +1304,11 @@ public class TabletServer extends AbstractMetricsImpl implements
             }
 
             try {
-                MultiScanResult scanResult = session.lookupTask.get(MAX_TIME_TO_WAIT_FOR_SCAN_RESULT_MILLIS, TimeUnit.MILLISECONDS);
+                MultiScanResult scanResult = session.lookupTask.get(3, TimeUnit.SECONDS);
                 session.lookupTask = null;
                 return scanResult;
             } catch (TimeoutException e1) {
-            	long timeout = acuConf.getTimeInMillis(Property.TSERV_CLIENT_TIMEOUT);
-                sessionManager.removeIfNotAccessed(scanID, timeout);
+                sessionManager.removeIfNotAccessed(scanID, 3000);
                 List<TKeyValue> results = Collections.emptyList();
                 Map<TKeyExtent, List<TRange>> failures = Collections.emptyMap();
                 List<TKeyExtent> fullScans = Collections.emptyList();