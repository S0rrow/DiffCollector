diff --git a/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/ActiveMQServerImpl.java b/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/ActiveMQServerImpl.java
index 3e71ded75b..e962aa0f3d 100644
--- a/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/ActiveMQServerImpl.java
+++ b/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/ActiveMQServerImpl.java
@@ -27,7 +27,6 @@ import java.net.URL;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
 import java.util.ArrayList;
-import java.util.Collection;
 import java.util.Date;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -49,6 +48,7 @@ import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
 import org.apache.activemq.artemis.api.config.ActiveMQDefaultConfiguration;
+import org.apache.activemq.artemis.api.core.ActiveMQAddressDoesNotExistException;
 import org.apache.activemq.artemis.api.core.ActiveMQDeleteAddressException;
 import org.apache.activemq.artemis.api.core.Pair;
 import org.apache.activemq.artemis.api.core.SimpleString;
@@ -601,9 +601,7 @@ public class ActiveMQServerImpl implements ActiveMQServer {
    }
 
    public void resetNodeManager() throws Exception {
-      if (nodeManager != null) {
-         nodeManager.stop();
-      }
+      nodeManager.stop();
       nodeManager = createNodeManager(configuration.getJournalLocation(), true);
    }
 
@@ -1503,45 +1501,79 @@ public class ActiveMQServerImpl implements ActiveMQServer {
                             final boolean durable,
                             final boolean temporary) throws Exception {
       AddressSettings as = getAddressSettingsRepository().getMatch(address.toString());
-      return createQueue(address, routingType, queueName, filterString, durable, temporary, as.getDefaultMaxConsumers(), as.isDefaultDeleteOnNoConsumers(), as.isAutoCreateAddresses());
+      return createQueue(address, routingType, queueName, filterString, null, durable, temporary, as.getDefaultMaxConsumers(), as.isDefaultDeleteOnNoConsumers(), as.isAutoCreateAddresses());
+   }
+
+   @Override
+   public Queue createQueue(final SimpleString address,
+                            final SimpleString queueName,
+                            final SimpleString filterString,
+                            final boolean durable,
+                            final boolean temporary) throws Exception {
+      return createQueue(address, getAddressSettingsRepository().getMatch(address.toString()).getDefaultQueueRoutingType(), queueName, filterString, durable, temporary);
    }
 
    @Override
    public Queue createQueue(final SimpleString address,
                             final RoutingType routingType,
                             final SimpleString queueName,
-                            final SimpleString filter,
+                            final SimpleString filterString,
                             final boolean durable,
                             final boolean temporary,
                             final int maxConsumers,
                             final boolean deleteOnNoConsumers,
                             final boolean autoCreateAddress) throws Exception {
-      return createQueue(address, routingType, queueName, filter, null, durable, temporary, false, maxConsumers, deleteOnNoConsumers, autoCreateAddress);
+      return createQueue(address, queueName, routingType, filterString, null, durable, temporary, false, false, false, maxConsumers, deleteOnNoConsumers, autoCreateAddress);
    }
 
    @Override
-   public Queue createQueue(SimpleString address,
-                            RoutingType routingType,
-                            SimpleString queueName,
-                            SimpleString filter,
+   public Queue createQueue(final SimpleString address,
+                            final RoutingType routingType,
+                            final SimpleString queueName,
+                            final SimpleString filterString,
+                            final SimpleString user,
+                            final boolean durable,
+                            final boolean temporary) throws Exception {
+      AddressSettings as = getAddressSettingsRepository().getMatch(address.toString());
+      return createQueue(address, routingType, queueName, filterString, user, durable, temporary, as.getDefaultMaxConsumers(), as.isDefaultDeleteOnNoConsumers(), as.isAutoCreateAddresses());
+   }
+
+   @Override
+   public Queue createQueue(SimpleString address, RoutingType routingType, SimpleString queueName, SimpleString filter,
                             SimpleString user,
                             boolean durable,
                             boolean temporary,
-                            boolean autoCreated,
-                            Integer maxConsumers,
-                            Boolean deleteOnNoConsumers,
+                            int maxConsumers,
+                            boolean deleteOnNoConsumers,
                             boolean autoCreateAddress) throws Exception {
-      return createQueue(address, routingType, queueName, filter, user, durable, temporary, false, false, autoCreated, maxConsumers, deleteOnNoConsumers, autoCreateAddress);
+      return createQueue(address, queueName, routingType, filter, user, durable, temporary, false, false, false, maxConsumers, deleteOnNoConsumers, autoCreateAddress);
    }
 
-   @Deprecated
    @Override
    public Queue createQueue(final SimpleString address,
+                            final RoutingType routingType,
                             final SimpleString queueName,
                             final SimpleString filterString,
+                            final SimpleString user,
                             final boolean durable,
-                            final boolean temporary) throws Exception {
-      return createQueue(address, getAddressSettingsRepository().getMatch(address.toString()).getDefaultQueueRoutingType(), queueName, filterString, durable, temporary);
+                            final boolean temporary,
+                            final boolean autoCreated) throws Exception {
+      AddressSettings as = getAddressSettingsRepository().getMatch(address.toString());
+      return createQueue(address, routingType, queueName, filterString, user, durable, temporary,
+                         as.getDefaultMaxConsumers(),
+                         as.isDefaultDeleteOnNoConsumers(), autoCreated);
+   }
+
+   @Override
+   public Queue createQueue(SimpleString address, RoutingType routingType, SimpleString queueName, SimpleString filter,
+                            SimpleString user,
+                            boolean durable,
+                            boolean temporary,
+                            boolean autoCreated,
+                            Integer maxConsumers,
+                            Boolean deleteOnNoConsumers,
+                            boolean autoCreateAddress) throws Exception {
+      return createQueue(address, queueName, routingType, filter, user, durable, temporary, false, false, autoCreated, maxConsumers, deleteOnNoConsumers, autoCreateAddress);
    }
 
    @Override
@@ -1564,7 +1596,19 @@ public class ActiveMQServerImpl implements ActiveMQServer {
          }
       }
 
-      final Queue queue = createQueue(address, routingType, name, filterString, user, durable, !durable, true, !durable, false, Queue.MAX_CONSUMERS_UNLIMITED, false, true);
+      final Queue queue = createQueue(address,
+                                      name,
+                                      routingType,
+                                      filterString,
+                                      user,
+                                      durable,
+                                      !durable,
+                                      true,
+                                      !durable,
+                                      false,
+                                      Queue.MAX_CONSUMERS_UNLIMITED,
+                                      false,
+                                      true);
 
       if (!queue.getAddress().equals(address)) {
          throw ActiveMQMessageBundle.BUNDLE.queueSubscriptionBelongsToDifferentAddress(name);
@@ -1597,17 +1641,15 @@ public class ActiveMQServerImpl implements ActiveMQServer {
       return (Queue) binding.getBindable();
    }
 
-   @Deprecated
    @Override
    public Queue deployQueue(final SimpleString address,
                             final SimpleString resourceName,
                             final SimpleString filterString,
                             final boolean durable,
                             final boolean temporary) throws Exception {
-      return createQueue(address, getAddressSettingsRepository().getMatch(address.toString()).getDefaultQueueRoutingType(), resourceName, filterString, durable, temporary);
+      return deployQueue(address, getAddressSettingsRepository().getMatch(address.toString()).getDefaultQueueRoutingType(), resourceName, filterString, durable, temporary);
    }
 
-   @Deprecated
    @Override
    public Queue deployQueue(final String address,
                             final String resourceName,
@@ -1617,6 +1659,45 @@ public class ActiveMQServerImpl implements ActiveMQServer {
       return deployQueue(SimpleString.toSimpleString(address), SimpleString.toSimpleString(resourceName), SimpleString.toSimpleString(filterString), durable, temporary);
    }
 
+   @Override
+   public Queue deployQueue(final SimpleString address,
+                            final RoutingType routingType,
+                            final SimpleString resourceName,
+                            final SimpleString filterString,
+                            final boolean durable,
+                            final boolean temporary) throws Exception {
+      return deployQueue(address, routingType, resourceName, filterString, durable, temporary, false);
+   }
+
+   @Override
+   public Queue deployQueue(final SimpleString address,
+                            final RoutingType routingType,
+                            final SimpleString queueName,
+                            final SimpleString filterString,
+                            final boolean durable,
+                            final boolean temporary,
+                            final boolean autoCreated) throws Exception {
+      AddressSettings as = getAddressSettingsRepository().getMatch(address.toString());
+      return deployQueue(address, routingType, queueName, filterString, durable, temporary, autoCreated, as.getDefaultMaxConsumers(), as.isDefaultDeleteOnNoConsumers(), as.isAutoCreateAddresses());
+   }
+
+   @Override
+   public Queue deployQueue(final SimpleString address,
+                            final RoutingType routingType,
+                            final SimpleString queueName,
+                            final SimpleString filterString,
+                            final boolean durable,
+                            final boolean temporary,
+                            final boolean autoCreated,
+                            final int maxConsumers,
+                            final boolean deleteOnNoConsumers,
+                            final boolean autoCreateAddress) throws Exception {
+
+      ActiveMQServerLogger.LOGGER.deployQueue(queueName);
+
+      return createQueue(address, queueName, routingType, filterString, null, durable, temporary, true, false, autoCreated, maxConsumers, deleteOnNoConsumers, autoCreateAddress);
+   }
+
    @Override
    public void destroyQueue(final SimpleString queueName) throws Exception {
       // The session is passed as an argument to verify if the user has authorization to delete the queue
@@ -1642,19 +1723,7 @@ public class ActiveMQServerImpl implements ActiveMQServer {
                             final SecurityAuth session,
                             final boolean checkConsumerCount,
                             final boolean removeConsumers) throws Exception {
-      if (postOffice == null) {
-         return;
-      }
-
-      Binding binding = postOffice.getBinding(queueName);
-
-      if (binding == null) {
-         throw ActiveMQMessageBundle.BUNDLE.noSuchQueue(queueName);
-      }
-
-      String address = binding.getAddress().toString();
-
-      destroyQueue(queueName, session, checkConsumerCount, removeConsumers, addressSettingsRepository.getMatch(address).isAutoDeleteAddresses());
+      destroyQueue(queueName, session, checkConsumerCount, removeConsumers, true);
    }
 
    @Override
@@ -1696,7 +1765,7 @@ public class ActiveMQServerImpl implements ActiveMQServer {
 
       queue.deleteQueue(removeConsumers);
 
-      if (autoDeleteAddress && postOffice != null && getAddressInfo(address).isAutoCreated()) {
+      if (autoDeleteAddress && postOffice != null) {
          try {
             removeAddressInfo(address, session);
          } catch (ActiveMQDeleteAddressException e) {
@@ -2066,7 +2135,7 @@ public class ActiveMQServerImpl implements ActiveMQServer {
       pagingManager = createPagingManager();
 
       resourceManager = new ResourceManagerImpl((int) (configuration.getTransactionTimeout() / 1000), configuration.getTransactionTimeoutScanPeriod(), scheduledPool);
-      postOffice = new PostOfficeImpl(this, storageManager, pagingManager, queueFactory, managementService, configuration.getMessageExpiryScanPeriod(), configuration.getMessageExpiryThreadPriority(), configuration.getWildcardConfiguration(), configuration.getIDCacheSize(), configuration.isPersistIDCache(), addressSettingsRepository);
+      postOffice = new PostOfficeImpl(this, storageManager, pagingManager, queueFactory, managementService, configuration.getMessageExpiryScanPeriod(), configuration.getMessageExpiryThreadPriority(), configuration.isWildcardRoutingEnabled(), configuration.getIDCacheSize(), configuration.isPersistIDCache(), addressSettingsRepository);
 
       // This can't be created until node id is set
       clusterManager = new ClusterManager(executorFactory, this, postOffice, scheduledPool, managementService, configuration, nodeManager, haPolicy.isBackup());
@@ -2221,16 +2290,14 @@ public class ActiveMQServerImpl implements ActiveMQServer {
    private void deployAddressesFromConfiguration() throws Exception {
       for (CoreAddressConfiguration config : configuration.getAddressConfigurations()) {
          AddressInfo info = new AddressInfo(SimpleString.toSimpleString(config.getName()), config.getRoutingTypes());
-         addOrUpdateAddressInfo(info);
+         createOrUpdateAddressInfo(info);
          deployQueuesFromListCoreQueueConfiguration(config.getQueueConfigurations());
       }
    }
 
    private void deployQueuesFromListCoreQueueConfiguration(List<CoreQueueConfiguration> queues) throws Exception {
       for (CoreQueueConfiguration config : queues) {
-         ActiveMQServerLogger.LOGGER.deployQueue(SimpleString.toSimpleString(config.getName()));
-
-         createQueue(SimpleString.toSimpleString(config.getAddress()), config.getRoutingType(), SimpleString.toSimpleString(config.getName()), SimpleString.toSimpleString(config.getFilterString()), null, config.isDurable(), false, true, false, false, config.getMaxConsumers(), config.getDeleteOnNoConsumers(), true);
+         deployQueue(SimpleString.toSimpleString(config.getAddress()), config.getRoutingType(), SimpleString.toSimpleString(config.getName()), SimpleString.toSimpleString(config.getFilterString()), config.isDurable(), false, false, config.getMaxConsumers(), config.getDeleteOnNoConsumers(), true);
       }
    }
 
@@ -2334,27 +2401,19 @@ public class ActiveMQServerImpl implements ActiveMQServer {
    }
 
    @Override
-   public boolean updateAddressInfo(SimpleString address, Collection<RoutingType> routingTypes) throws Exception {
-      if (getAddressInfo(address) == null) {
-         return false;
-      }
-
-      //after the postOffice call, updatedAddressInfo could change further (concurrently)!
-      final AddressInfo updatedAddressInfo = postOffice.updateAddressInfo(address, routingTypes);
-      //it change the address info without any lock!
-      final long txID = storageManager.generateID();
-      try {
-         storageManager.deleteAddressBinding(txID, updatedAddressInfo.getId());
-         storageManager.addAddressBinding(txID, updatedAddressInfo);
-      } finally {
-         storageManager.commitBindings(txID);
-      }
+   public void addRoutingType(String address, RoutingType routingType) throws ActiveMQAddressDoesNotExistException {
+      final SimpleString addressName = new SimpleString(address);
+      postOffice.addRoutingType(addressName,routingType);
+   }
 
-      return true;
+   @Override
+   public void removeRoutingType(String address, RoutingType routingType) throws Exception {
+      final SimpleString addressName = new SimpleString(address);
+      postOffice.removeRoutingType(addressName,routingType);
    }
 
    @Override
-   public boolean addAddressInfo(AddressInfo addressInfo) throws Exception {
+   public boolean createAddressInfo(AddressInfo addressInfo) throws Exception {
       boolean result = postOffice.addAddressInfo(addressInfo);
 
       if (result) {
@@ -2362,25 +2421,35 @@ public class ActiveMQServerImpl implements ActiveMQServer {
          storageManager.addAddressBinding(txID, addressInfo);
          storageManager.commitBindings(txID);
       } else {
-         result = false;
+         throw ActiveMQMessageBundle.BUNDLE.addressAlreadyExists(addressInfo.getName());
       }
 
       return result;
    }
 
    @Override
-   public AddressInfo addOrUpdateAddressInfo(AddressInfo addressInfo) throws Exception {
-      if (!addAddressInfo(addressInfo)) {
-         updateAddressInfo(addressInfo.getName(), addressInfo.getRoutingTypes());
+   public boolean createOrUpdateAddressInfo(AddressInfo addressInfo) throws Exception {
+      boolean result = postOffice.addOrUpdateAddressInfo(addressInfo);
+
+      long txID = storageManager.generateID();
+      if (result) {
+         storageManager.addAddressBinding(txID, addressInfo);
+         storageManager.commitBindings(txID);
+      } else {
+         AddressInfo updatedAddressInfo = getAddressInfo(addressInfo.getName());
+         storageManager.deleteAddressBinding(txID, updatedAddressInfo.getId());
+         storageManager.addAddressBinding(txID, updatedAddressInfo);
+         storageManager.commitBindings(txID);
       }
 
-      return getAddressInfo(addressInfo.getName());
+      return result;
    }
 
    @Override
-   public void removeAddressInfo(final SimpleString address, final SecurityAuth auth) throws Exception {
-      if (auth != null) {
-         securityStore.check(address, CheckType.DELETE_ADDRESS, auth);
+   public void removeAddressInfo(final SimpleString address,
+                                 final SecurityAuth session) throws Exception {
+      if (session != null) {
+         securityStore.check(address, CheckType.DELETE_ADDRESS, session);
       }
 
       AddressInfo addressInfo = getAddressInfo(address);
@@ -2404,9 +2473,9 @@ public class ActiveMQServerImpl implements ActiveMQServer {
    }
 
    @Override
-   public Queue createQueue(final SimpleString address,
-                            final RoutingType routingType,
+   public Queue createQueue(final SimpleString addressName,
                             final SimpleString queueName,
+                            final RoutingType routingType,
                             final SimpleString filterString,
                             final SimpleString user,
                             final boolean durable,
@@ -2433,36 +2502,38 @@ public class ActiveMQServerImpl implements ActiveMQServer {
       final long queueID = storageManager.generateID();
 
       final QueueConfig.Builder queueConfigBuilder;
-      if (address == null) {
+      if (addressName == null) {
          queueConfigBuilder = QueueConfig.builderWith(queueID, queueName);
       } else {
-         queueConfigBuilder = QueueConfig.builderWith(queueID, queueName, address);
+         queueConfigBuilder = QueueConfig.builderWith(queueID, queueName, addressName);
       }
 
-      AddressInfo info = postOffice.getAddressInfo(address);
+      AddressInfo defaultAddressInfo = new AddressInfo(addressName);
+      defaultAddressInfo.addRoutingType(routingType == null ? ActiveMQDefaultConfiguration.getDefaultRoutingType() : routingType);
+      AddressInfo info = postOffice.getAddressInfo(addressName);
+
+      boolean addressAlreadyExists = true;
 
       if (autoCreateAddress) {
-         RoutingType rt = (routingType == null ? ActiveMQDefaultConfiguration.getDefaultRoutingType() : routingType);
-         if (info == null) {
-            final AddressInfo addressInfo = new AddressInfo(address, rt);
-            addressInfo.setAutoCreated(true);
-            addAddressInfo(addressInfo);
-         } else if (!info.getRoutingTypes().contains(routingType)) {
-            Set<RoutingType> routingTypes = new HashSet<>();
-            routingTypes.addAll(info.getRoutingTypes());
-            routingTypes.add(routingType);
-            updateAddressInfo(info.getName(), routingTypes);
-         }
-      } else if (info == null) {
-         throw ActiveMQMessageBundle.BUNDLE.addressDoesNotExist(address);
-      } else if (!info.getRoutingTypes().contains(routingType)) {
-         throw ActiveMQMessageBundle.BUNDLE.invalidRoutingTypeForAddress(routingType, info.getName().toString(), info.getRoutingTypes());
+         if (info == null || !info.getRoutingTypes().contains(routingType)) {
+            createOrUpdateAddressInfo(defaultAddressInfo.setAutoCreated(true));
+            addressAlreadyExists = false;
+         }
       }
 
       final QueueConfig queueConfig = queueConfigBuilder.filter(filter).pagingManager(pagingManager).user(user).durable(durable).temporary(temporary).autoCreated(autoCreated).routingType(routingType).maxConsumers(maxConsumers).deleteOnNoConsumers(deleteOnNoConsumers).build();
 
       final Queue queue = queueFactory.createQueueWith(queueConfig);
 
+      AddressInfo addressInfo = postOffice.getAddressInfo(queue.getAddress());
+      if (addressInfo == null) {
+         createAddressInfo(new AddressInfo(queue.getAddress()));
+      } else {
+         if (!addressInfo.getRoutingTypes().contains(routingType)) {
+            throw ActiveMQMessageBundle.BUNDLE.invalidRoutingTypeForAddress(routingType, addressInfo.getName().toString(), addressInfo.getRoutingTypes());
+         }
+      }
+
       if (transientQueue) {
          queue.setConsumersRefCount(new TransientQueueManagerImpl(this, queue.getName()));
       } else if (queue.isAutoCreated()) {
@@ -2473,6 +2544,9 @@ public class ActiveMQServerImpl implements ActiveMQServer {
 
       if (queue.isDurable()) {
          storageManager.addQueueBinding(txID, localQueueBinding);
+         if (!addressAlreadyExists) {
+            storageManager.addAddressBinding(txID, getAddressInfo(queue.getAddress()));
+         }
       }
 
       try {
@@ -2506,31 +2580,6 @@ public class ActiveMQServerImpl implements ActiveMQServer {
       return queue;
    }
 
-   @Override
-   public Queue updateQueue(String name,
-                            RoutingType routingType,
-                            Integer maxConsumers,
-                            Boolean deleteOnNoConsumers) throws Exception {
-      final QueueBinding queueBinding = this.postOffice.updateQueue(new SimpleString(name), routingType, maxConsumers, deleteOnNoConsumers);
-      if (queueBinding != null) {
-         final Queue queue = queueBinding.getQueue();
-         if (queue.isDurable()) {
-            final long txID = storageManager.generateID();
-            try {
-               storageManager.deleteQueueBinding(txID, queueBinding.getID());
-               storageManager.addQueueBinding(txID, queueBinding);
-               storageManager.commitBindings(txID);
-            } catch (Throwable throwable) {
-               storageManager.rollbackBindings(txID);
-               throw throwable;
-            }
-         }
-         return queue;
-      } else {
-         return null;
-      }
-   }
-
    private void deployDiverts() throws Exception {
       for (DivertConfiguration config : configuration.getDivertConfigurations()) {
          deployDivert(config);