diff --git a/webapp/src/main/java/org/apache/hadoop/metadata/web/resources/EntityResource.java b/webapp/src/main/java/org/apache/hadoop/metadata/web/resources/EntityResource.java
index e6f3ffd0a..e7ece82d3 100644
--- a/webapp/src/main/java/org/apache/hadoop/metadata/web/resources/EntityResource.java
+++ b/webapp/src/main/java/org/apache/hadoop/metadata/web/resources/EntityResource.java
@@ -19,23 +19,21 @@
 package org.apache.hadoop.metadata.web.resources;
 
 import com.google.common.base.Preconditions;
-import org.apache.hadoop.metadata.MetadataException;
-import org.apache.hadoop.metadata.services.MetadataService;
+import org.apache.commons.io.IOUtils;
+import org.apache.hadoop.metadata.service.Services;
+import org.apache.hadoop.metadata.services.GraphBackedMetadataRepositoryService;
+import org.apache.hadoop.metadata.services.MetadataRepositoryService;
 import org.apache.hadoop.metadata.web.util.Servlets;
-import org.codehaus.jettison.json.JSONArray;
-import org.codehaus.jettison.json.JSONException;
 import org.codehaus.jettison.json.JSONObject;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import org.json.simple.JSONValue;
+import org.json.simple.parser.ParseException;
 
-import javax.inject.Inject;
-import javax.inject.Singleton;
 import javax.servlet.http.HttpServletRequest;
 import javax.ws.rs.Consumes;
+import javax.ws.rs.DELETE;
 import javax.ws.rs.DefaultValue;
 import javax.ws.rs.GET;
 import javax.ws.rs.POST;
-import javax.ws.rs.PUT;
 import javax.ws.rs.Path;
 import javax.ws.rs.PathParam;
 import javax.ws.rs.Produces;
@@ -45,250 +43,127 @@ import javax.ws.rs.core.Context;
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.Response;
 import java.io.IOException;
-import java.util.List;
+import java.io.StringWriter;
 
 /**
  * Entity management operations as REST API.
- *
- * An entity is an "instance" of a Type.  Entities conform to the definition
- * of the Type they correspond with.
  */
 @Path("entities")
-@Singleton
 public class EntityResource {
 
-    private static final Logger LOG = LoggerFactory.getLogger(EntityResource.class);
-
-    private static final String GUID = "GUID";
-    private static final String TRAIT_NAME = "traitName";
-
-    private final MetadataService metadataService;
+    private MetadataRepositoryService repositoryService;
 
-    /**
-     * Created by the Guice ServletModule and injected with the
-     * configured MetadataService.
-     *
-     * @param metadataService metadata service handle
-     */
-    @Inject
-    public EntityResource(MetadataService metadataService) {
-        this.metadataService = metadataService;
+    public EntityResource() {
+        repositoryService = Services.get().getService(GraphBackedMetadataRepositoryService.NAME);
+        if (repositoryService == null) {
+            throw new RuntimeException("graph service is not initialized");
+        }
     }
 
-    /**
-     * Submits an entity definition (instance) corresponding to a given type.
-     *
-     * @param typeName name of a type which is unique.
-     */
     @POST
-    @Path("submit/{typeName}")
+    @Path("submit/{entityType}")
     @Consumes(MediaType.APPLICATION_JSON)
     @Produces(MediaType.APPLICATION_JSON)
     public Response submit(@Context HttpServletRequest request,
-                           @PathParam("typeName") final String typeName) {
+                           @PathParam("entityType") final String entityType) {
         try {
-            final String entity = Servlets.getRequestPayload(request);
-            LOG.debug("submitting entity {} ", entity);
+            final String entity = getEntity(request, entityType);
+            System.out.println("entity = " + entity);
+            validateEntity(entity, entityType);
 
-            final String guid = metadataService.createEntity(typeName, entity);
+            final String guid = repositoryService.submitEntity(entity, entityType);
             JSONObject response = new JSONObject();
-            response.put(Servlets.REQUEST_ID, Servlets.getRequestId());
-            response.put(GUID, guid);
+            response.put("GUID", guid);
 
             return Response.ok(response).build();
-        } catch (MetadataException | IOException | IllegalArgumentException e) {
-            LOG.error("Unable to persist instance for type {}", typeName, e);
+        } catch (Exception e) {
             throw new WebApplicationException(
                     Servlets.getErrorResponse(e, Response.Status.BAD_REQUEST));
-        } catch (JSONException e) {
-            LOG.error("Unable to persist instance for type {}", typeName, e);
-            throw new WebApplicationException(
-                    Servlets.getErrorResponse(e, Response.Status.INTERNAL_SERVER_ERROR));
         }
     }
 
-    /**
-     * Fetch the complete definition of an entity given its GUID.
-     *
-     * @param guid GUID for the entity
-     */
-    @GET
-    @Path("definition/{guid}")
-    @Produces(MediaType.APPLICATION_JSON)
-    public Response getEntityDefinition(@PathParam("guid") String guid) {
-        Preconditions.checkNotNull(guid, "Entity GUID cannot be null");
-
-        try {
-            LOG.debug("Fetching entity definition for guid={} ", guid);
-            final String entityDefinition = metadataService.getEntityDefinition(guid);
-
-            JSONObject response = new JSONObject();
-            response.put(Servlets.REQUEST_ID, Servlets.getRequestId());
-            response.put(GUID, guid);
-
-            Response.Status status = Response.Status.NOT_FOUND;
-            if (entityDefinition != null) {
-                response.put("definition", entityDefinition);
-                status = Response.Status.OK;
-            }
-
-            return Response.status(status).entity(response).build();
+    private String getEntity(HttpServletRequest request,
+                             String entityType) throws IOException {
+        StringWriter writer = new StringWriter();
+        IOUtils.copy(request.getInputStream(), writer);
+        return writer.toString();
+    }
 
-        } catch (MetadataException | IllegalArgumentException e) {
-            LOG.error("An entity with GUID={} does not exist", guid, e);
-            throw new WebApplicationException(e, Response
-                    .status(Response.Status.NOT_FOUND)
-                    .entity(e.getMessage())
-                    .type(MediaType.APPLICATION_JSON)
-                    .build());
-        } catch (JSONException e) {
-            LOG.error("Unable to get instance definition for GUID {}", guid, e);
-            throw new WebApplicationException(e, Response
-                    .status(Response.Status.INTERNAL_SERVER_ERROR)
-                    .entity(e.getMessage())
-                    .type(MediaType.APPLICATION_JSON)
-                    .build());
-        }
+    private void validateEntity(String entity, String entityType) throws ParseException {
+        Preconditions.checkNotNull(entity, "entity cannot be null");
+        Preconditions.checkNotNull(entityType, "entity type cannot be null");
+        JSONValue.parseWithException(entity);
     }
 
-    /**
-     * Gets the list of entities for a given entity type.
-     *
-     * @param entityType     name of a type which is unique
-     * @param offset         starting offset for pagination
-     * @param resultsPerPage number of results for pagination
-     */
     @GET
-    @Path("list/{entityType}")
+    @Path("definition/{guid}")
     @Produces(MediaType.APPLICATION_JSON)
-    public Response getEntityList(@PathParam("entityType") String entityType,
-                                  @DefaultValue("0") @QueryParam("offset") Integer offset,
-                                  @QueryParam("numResults") Integer resultsPerPage) {
-        Preconditions.checkNotNull(entityType, "Entity type cannot be null");
-        try {
-            LOG.debug("Fetching entity list for type={} ", entityType);
-            final List<String> entityList = metadataService.getEntityList(entityType);
-
-            JSONObject response = new JSONObject();
-            response.put(Servlets.REQUEST_ID, Servlets.getRequestId());
-            response.put("type", entityType);
-            response.put("list", new JSONArray(entityList));
+    public Response getEntityDefinition(@PathParam("guid") String guid) {
 
-            return Response.ok(response).build();
-        } catch (MetadataException | IllegalArgumentException e) {
-            LOG.error("Unable to get entity list for type {}", entityType, e);
-            throw new WebApplicationException(
-                    Servlets.getErrorResponse(e, Response.Status.BAD_REQUEST));
-        } catch (JSONException e) {
-            LOG.error("Unable to get entity list for type {}", entityType, e);
-            throw new WebApplicationException(
-                    Servlets.getErrorResponse(e, Response.Status.INTERNAL_SERVER_ERROR));
-        }
+        return Response.ok().build();
     }
 
-    // Trait management functions
-    /**
-     * Gets the list of trait names for a given entity represented by a guid.
-     *
-     * @param guid globally unique identifier for the entity
-     * @return a list of trait names for the given entity guid
-     */
     @GET
-    @Path("traits/list/{guid}")
+    @Path("definition/{entityType}/{entityName}")
     @Produces(MediaType.APPLICATION_JSON)
-    public Response getTraitNames(@PathParam("guid") String guid) {
-        Preconditions.checkNotNull(guid, "Entity GUID cannot be null");
+    public Response getEntityDefinition(@PathParam("entityType") String entityType,
+                                        @PathParam("entityName") String entityName) {
 
-        try {
-            LOG.debug("Fetching trait names for entity={}", guid);
-            final List<String> traitNames = metadataService.getTraitNames(guid);
-
-            JSONObject response = new JSONObject();
-            response.put(Servlets.REQUEST_ID, Servlets.getRequestId());
-            response.put(GUID, guid);
-            response.put("list", new JSONArray(traitNames));
-
-            return Response.ok(response).build();
-        } catch (MetadataException | IllegalArgumentException e) {
-            LOG.error("Unable to get trait names for entity {}", guid, e);
-            throw new WebApplicationException(
-                    Servlets.getErrorResponse(e, Response.Status.BAD_REQUEST));
-        } catch (JSONException e) {
-            LOG.error("Unable to get trait names for entity {}", guid, e);
-            throw new WebApplicationException(
-                    Servlets.getErrorResponse(e, Response.Status.INTERNAL_SERVER_ERROR));
-        }
+        final String entityDefinition = repositoryService.getEntityDefinition(entityName, entityType);
+        return Response.ok(entityDefinition).build();
     }
 
-    /**
-     * Adds a new trait to an existing entity represented by a guid.
-     *
-     * @param guid globally unique identifier for the entity
-     */
     @POST
-    @Path("traits/add/{guid}")
+    @Path("validate/{entityType}")
     @Consumes(MediaType.APPLICATION_JSON)
     @Produces(MediaType.APPLICATION_JSON)
-    public Response addTrait(@Context HttpServletRequest request,
-                             @PathParam("guid") String guid) {
-        Preconditions.checkNotNull(guid, "Entity GUID cannot be null");
-
-        try {
-            final String traitDefinition = Servlets.getRequestPayload(request);
-            LOG.debug("Adding trait={} for entity={} ", traitDefinition, guid);
-            metadataService.addTrait(guid, traitDefinition);
-
-            JSONObject response = new JSONObject();
-            response.put(Servlets.REQUEST_ID, Servlets.getRequestId());
-            response.put(GUID, guid);
-            response.put("traitInstance", traitDefinition);
+    public Response validate(@Context HttpServletRequest request,
+                             @PathParam("entityType") String entityType) {
+        return Response.ok().build();
+    }
 
-            return Response.ok(response).build();
-        } catch (MetadataException | IOException | IllegalArgumentException e) {
-            LOG.error("Unable to add trait for entity={}", guid, e);
-            throw new WebApplicationException(
-                    Servlets.getErrorResponse(e, Response.Status.BAD_REQUEST));
-        } catch (JSONException e) {
-            LOG.error("Unable to add trait for entity={}", guid, e);
-            throw new WebApplicationException(
-                    Servlets.getErrorResponse(e, Response.Status.INTERNAL_SERVER_ERROR));
-        }
+    @DELETE
+    @Path("delete/{entityType}/{entityName}")
+    @Produces(MediaType.APPLICATION_JSON)
+    public Response delete(
+            @Context HttpServletRequest request,
+            @PathParam("entityType") final String entityType,
+            @PathParam("entityName") final String entityName) {
+        return Response.ok().build();
     }
 
-    /**
-     * Deletes a given trait from an existing entity represented by a guid.
-     *
-     * @param guid      globally unique identifier for the entity
-     * @param traitName name of the trait
-     */
-    @PUT
-    @Path("traits/delete/{guid}/{traitName}")
+    @POST
+    @Path("update/{entityType}/{entityName}")
     @Consumes(MediaType.APPLICATION_JSON)
     @Produces(MediaType.APPLICATION_JSON)
-    public Response deleteTrait(@Context HttpServletRequest request,
-                                @PathParam("guid") String guid,
-                                @PathParam(TRAIT_NAME) String traitName) {
-        Preconditions.checkNotNull(guid, "Entity GUID cannot be null");
-        Preconditions.checkNotNull(traitName, "Trait name cannot be null");
+    public Response update(@Context HttpServletRequest request,
+                           @PathParam("entityType") final String entityType,
+                           @PathParam("entityName") final String entityName) {
+        return Response.ok().build();
+    }
 
-        LOG.debug("Deleting trait={} from entity={} ", traitName, guid);
-        try {
-            metadataService.deleteTrait(guid, traitName);
+    @GET
+    @Path("status/{entityType}/{entityName}")
+    @Produces(MediaType.APPLICATION_JSON)
+    public Response getStatus(@PathParam("entityType") String entityType,
+                              @PathParam("entityName") String entityName) {
+        return Response.ok().build();
+    }
 
-            JSONObject response = new JSONObject();
-            response.put(Servlets.REQUEST_ID, Servlets.getRequestId());
-            response.put(GUID, guid);
-            response.put(TRAIT_NAME, traitName);
+    @GET
+    @Path("dependencies/{entityType}/{entityName}")
+    @Produces(MediaType.APPLICATION_JSON)
+    public Response getDependencies(@PathParam("entityType") String entityType,
+                                    @PathParam("entityName") String entityName) {
+        return Response.ok().build();
+    }
 
-            return Response.ok(response).build();
-        } catch (MetadataException | IllegalArgumentException e) {
-            LOG.error("Unable to add trait name={} for entity={}", traitName, guid, e);
-            throw new WebApplicationException(
-                    Servlets.getErrorResponse(e, Response.Status.BAD_REQUEST));
-        } catch (JSONException e) {
-            LOG.error("Unable to add trait name={} for entity={}", traitName, guid, e);
-            throw new WebApplicationException(
-                    Servlets.getErrorResponse(e, Response.Status.INTERNAL_SERVER_ERROR));
-        }
+    @GET
+    @Path("list/{entityType}")
+    @Produces(MediaType.APPLICATION_JSON)
+    public Response getEntityList(@PathParam("entityType") String entityType,
+                                  @DefaultValue("0") @QueryParam("offset") Integer offset,
+                                  @QueryParam("numResults") Integer resultsPerPage) {
+        return Response.ok().build();
     }
 }