diff --git a/artemis-cli/src/main/java/org/apache/activemq/artemis/cli/commands/Run.java b/artemis-cli/src/main/java/org/apache/activemq/artemis/cli/commands/Run.java
index a5b1487748..759815c2c8 100644
--- a/artemis-cli/src/main/java/org/apache/activemq/artemis/cli/commands/Run.java
+++ b/artemis-cli/src/main/java/org/apache/activemq/artemis/cli/commands/Run.java
@@ -19,7 +19,6 @@ package org.apache.activemq.artemis.cli.commands;
 import java.io.File;
 import java.util.Timer;
 import java.util.TimerTask;
-import java.util.concurrent.atomic.AtomicBoolean;
 
 import io.airlift.airline.Command;
 import io.airlift.airline.Option;
@@ -30,6 +29,7 @@ import org.apache.activemq.artemis.cli.factory.BrokerFactory;
 import org.apache.activemq.artemis.cli.factory.jmx.ManagementFactory;
 import org.apache.activemq.artemis.cli.factory.security.SecurityManagerFactory;
 import org.apache.activemq.artemis.components.ExternalComponent;
+import org.apache.activemq.artemis.core.server.ActivateCallback;
 import org.apache.activemq.artemis.core.server.management.ManagementContext;
 import org.apache.activemq.artemis.dto.BrokerDTO;
 import org.apache.activemq.artemis.dto.ComponentDTO;
@@ -51,8 +51,6 @@ public class Run extends LockAbstract {
 
    private ManagementContext managementContext;
 
-   private Timer shutdownTimer;
-
    /**
     * This will disable the System.exit at the end of the server.stop, as that means there are other things
     * happening on the same VM.
@@ -84,11 +82,17 @@ public class Run extends LockAbstract {
          server = BrokerFactory.createServer(broker.server, security);
 
          managementContext.start();
-         server.createComponents();
-         AtomicBoolean serverActivationFailed = new AtomicBoolean(false);
-         server.getServer().registerActivationFailureListener(exception -> serverActivationFailed.set(true));
          server.start();
-         server.getServer().addExternalComponent(managementContext);
+         server.getServer().registerActivateCallback(new ActivateCallback() {
+            @Override
+            public void deActivate() {
+               try {
+                  managementContext.stop();
+               } catch (Exception e) {
+                  e.printStackTrace();
+               }
+            }
+         });
 
          if (broker.web != null) {
             broker.components.add(broker.web);
@@ -98,12 +102,8 @@ public class Run extends LockAbstract {
             Class clazz = this.getClass().getClassLoader().loadClass(componentDTO.componentClassName);
             ExternalComponent component = (ExternalComponent) clazz.newInstance();
             component.configure(componentDTO, getBrokerInstance(), getBrokerHome());
-            server.getServer().addExternalComponent(component);
             component.start();
-         }
-
-         if (serverActivationFailed.get()) {
-            stop();
+            server.getServer().addExternalComponent(component);
          }
       } catch (Throwable t) {
          t.printStackTrace();
@@ -133,8 +133,8 @@ public class Run extends LockAbstract {
          }
       }
 
-      shutdownTimer = new Timer("ActiveMQ Artemis Server Shutdown Timer", true);
-      shutdownTimer.scheduleAtFixedRate(new TimerTask() {
+      final Timer timer = new Timer("ActiveMQ Artemis Server Shutdown Timer", true);
+      timer.scheduleAtFixedRate(new TimerTask() {
          @Override
          public void run() {
             if (allowKill && fileKill.exists()) {
@@ -148,7 +148,7 @@ public class Run extends LockAbstract {
             if (file.exists()) {
                try {
                   stop();
-                  shutdownTimer.cancel();
+                  timer.cancel();
                } finally {
                   System.out.println("Server stopped!");
                   System.out.flush();
@@ -178,9 +178,6 @@ public class Run extends LockAbstract {
          if (managementContext != null) {
             managementContext.stop();
          }
-         if (shutdownTimer != null) {
-            shutdownTimer.cancel();
-         }
       } catch (Exception e) {
          e.printStackTrace();
       }