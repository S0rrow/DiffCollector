diff --git a/repository/src/main/java/org/apache/atlas/util/SearchPredicateUtil.java b/repository/src/main/java/org/apache/atlas/util/SearchPredicateUtil.java
index 18d77ee7a..fc973e6f8 100644
--- a/repository/src/main/java/org/apache/atlas/util/SearchPredicateUtil.java
+++ b/repository/src/main/java/org/apache/atlas/util/SearchPredicateUtil.java
@@ -19,14 +19,13 @@ package org.apache.atlas.util;
 
 import org.apache.atlas.repository.graphdb.AtlasVertex;
 import org.apache.atlas.repository.store.graph.v1.AtlasGraphUtilsV1;
-import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.collections.Predicate;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import java.math.BigDecimal;
 import java.math.BigInteger;
-import java.util.Collection;
+import java.util.List;
 
 public class SearchPredicateUtil {
     private static final Logger LOG = LoggerFactory.getLogger(SearchPredicateUtil.class);
@@ -229,10 +228,6 @@ public class SearchPredicateUtil {
 
                 if (attrName == null || attrClass == null || attrVal == null) {
                     ret = ALWAYS_FALSE;
-                } else if (Boolean.class.isAssignableFrom(attrClass)) {
-                    ret = BooleanPredicate.getEQPredicate(attrName, attrClass, (Boolean)attrVal);
-                } else if (Byte.class.isAssignableFrom(attrClass)) {
-                    ret = BytePredicate.getEQPredicate(attrName, attrClass, (Byte)attrVal);
                 } else if (Short.class.isAssignableFrom(attrClass)) {
                     ret = ShortPredicate.getEQPredicate(attrName, attrClass, (Short)attrVal);
                 } else if (Integer.class.isAssignableFrom(attrClass)) {
@@ -243,6 +238,8 @@ public class SearchPredicateUtil {
                     ret = FloatPredicate.getEQPredicate(attrName, attrClass, (Float)attrVal);
                 } else if (Double.class.isAssignableFrom(attrClass)) {
                     ret = DoublePredicate.getEQPredicate(attrName, attrClass, (Double)attrVal);
+                } else if (Byte.class.isAssignableFrom(attrClass)) {
+                    ret = BytePredicate.getEQPredicate(attrName, attrClass, (Byte)attrVal);
                 } else if (BigInteger.class.isAssignableFrom(attrClass)) {
                     ret = BigIntegerPredicate.getEQPredicate(attrName, attrClass, (BigInteger)attrVal);
                 } else if (BigDecimal.class.isAssignableFrom(attrClass)) {
@@ -276,10 +273,6 @@ public class SearchPredicateUtil {
 
                 if (attrName == null || attrClass == null || attrVal == null) {
                     ret = ALWAYS_FALSE;
-                } else if (Boolean.class.isAssignableFrom(attrClass)) {
-                    ret = BooleanPredicate.getNEQPredicate(attrName, attrClass, (Boolean)attrVal);
-                } else if (Byte.class.isAssignableFrom(attrClass)) {
-                    ret = BytePredicate.getNEQPredicate(attrName, attrClass, (Byte)attrVal);
                 } else if (Short.class.isAssignableFrom(attrClass)) {
                     ret = ShortPredicate.getNEQPredicate(attrName, attrClass, (Short)attrVal);
                 } else if (Integer.class.isAssignableFrom(attrClass)) {
@@ -290,6 +283,8 @@ public class SearchPredicateUtil {
                     ret = FloatPredicate.getNEQPredicate(attrName, attrClass, (Float)attrVal);
                 } else if (Double.class.isAssignableFrom(attrClass)) {
                     ret = DoublePredicate.getNEQPredicate(attrName, attrClass, (Double)attrVal);
+                } else if (Byte.class.isAssignableFrom(attrClass)) {
+                    ret = BytePredicate.getNEQPredicate(attrName, attrClass, (Byte)attrVal);
                 } else if (BigInteger.class.isAssignableFrom(attrClass)) {
                     ret = BigIntegerPredicate.getNEQPredicate(attrName, attrClass, (BigInteger)attrVal);
                 } else if (BigDecimal.class.isAssignableFrom(attrClass)) {
@@ -311,76 +306,6 @@ public class SearchPredicateUtil {
         return ret;
     }
 
-    public static VertexAttributePredicateGenerator getContainsAnyPredicateGenerator() {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("==> getContainsAnyPredicateGenerator");
-        }
-
-        VertexAttributePredicateGenerator ret = new VertexAttributePredicateGenerator() {
-            @Override
-            public Predicate generatePredicate(final String attrName, final Object attrVal, final Class attrClass) {
-                final Predicate ret;
-
-                if (attrName == null || attrClass == null || attrVal == null || !isValid(attrVal, attrClass)) {
-                    ret = ALWAYS_FALSE;
-                } else {
-                    ret = new VertexAttributePredicate(attrName, attrClass) {
-                        @Override
-                        public boolean compareValue(final Object value) {
-                            return CollectionUtils.containsAny((Collection) attrVal, (Collection) value);
-                        }
-                    };
-                }
-                return ret;
-            }
-
-            private boolean isValid(final Object attrVal, final Class attrClass) {
-                return attrVal instanceof Collection && Collection.class.isAssignableFrom(attrClass);
-            }
-        };
-
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("<== getContainsAnyPredicateGenerator");
-        }
-
-        return ret;
-    }
-
-    public static VertexAttributePredicateGenerator getContainsAllPredicateGenerator() {
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("==> getContainsAllPredicateGenerator");
-        }
-
-        VertexAttributePredicateGenerator ret = new VertexAttributePredicateGenerator() {
-            @Override
-            public Predicate generatePredicate(final String attrName, final Object attrVal, final Class attrClass) {
-                final Predicate ret;
-
-                if (attrName == null || attrClass == null || attrVal == null || !isValid(attrVal, attrClass)) {
-                    ret = ALWAYS_FALSE;
-                } else {
-                    ret = new VertexAttributePredicate(attrName, attrClass) {
-                        @Override
-                        public boolean compareValue(final Object value) {
-                            return ((Collection) attrVal).containsAll((Collection) value);
-                        }
-                    };
-                }
-                return ret;
-            }
-
-            private boolean isValid(final Object attrVal, final Class attrClass) {
-                return attrVal instanceof Collection && Collection.class.isAssignableFrom(attrClass);
-            }
-        };
-
-        if (LOG.isDebugEnabled()) {
-            LOG.debug("<== getContainsAllPredicateGenerator");
-        }
-
-        return ret;
-    }
-
     public static VertexAttributePredicateGenerator getINPredicateGenerator() {
         if (LOG.isDebugEnabled()) {
             LOG.debug("==> getINPredicateGenerator");
@@ -391,23 +316,19 @@ public class SearchPredicateUtil {
             public Predicate generatePredicate(final String attrName, final Object attrVal, final Class attrClass) {
                 final Predicate ret;
 
-                if (attrName == null || attrClass == null || attrVal == null || !isValid(attrVal, attrClass)) {
+                if (attrName == null || attrClass == null || attrVal == null) {
                     ret = ALWAYS_FALSE;
                 } else {
                     ret = new VertexAttributePredicate(attrName, attrClass) {
                         @Override
                         public boolean compareValue(final Object value) {
-                            return ((Collection)attrVal).contains(value);
+                            return (value instanceof List) ? ((List) value).contains(attrVal) : false;
                         }
                     };
                 }
 
                 return ret;
             }
-
-            private boolean isValid(final Object attrVal, final Class attrClass) {
-                return attrVal instanceof Collection;
-            }
         };
 
         if (LOG.isDebugEnabled()) {
@@ -518,14 +439,6 @@ public class SearchPredicateUtil {
                     ret = ALWAYS_FALSE;
                 } else if (String.class.isAssignableFrom(attrClass)) {
                     ret = StringPredicate.getContainsPredicate(attrName, attrClass, (String)attrVal);
-                } else if (Collection.class.isAssignableFrom(attrClass)) {
-                    // Check if the provided value is present in the list of stored values
-                    ret = new VertexAttributePredicate(attrName, attrClass) {
-                        @Override
-                        protected boolean compareValue(final Object value) {
-                            return ((Collection) value).contains(attrVal);
-                        }
-                    };
                 } else {
                     ret = ALWAYS_FALSE;
                 }
@@ -561,14 +474,13 @@ public class SearchPredicateUtil {
             AtlasVertex vertex = (object instanceof AtlasVertex) ? (AtlasVertex)object : null;
 
             if (vertex != null) {
-                Object attrValue;
-                if (Collection.class.isAssignableFrom(attrClass)) {
-                    attrValue = vertex.getPropertyValues(attrName, attrClass);
+                Object attrValue = AtlasGraphUtilsV1.getProperty(vertex, attrName, attrClass);
+
+                if (attrValue != null) {
+                    ret = compareValue(attrValue);
                 } else {
-                    attrValue = AtlasGraphUtilsV1.getProperty(vertex, attrName, attrClass);
+                    ret = false;
                 }
-
-                ret = attrValue != null && compareValue(attrValue);
             } else {
                 ret = false;
             }
@@ -579,32 +491,6 @@ public class SearchPredicateUtil {
         protected abstract boolean compareValue(Object value);
     }
 
-    static abstract class BooleanPredicate extends VertexAttributePredicate {
-        final Boolean value;
-
-        BooleanPredicate(String attrName, Class attrClass, Boolean value) {
-            super(attrName, attrClass);
-
-            this.value = value;
-        }
-
-        static VertexAttributePredicate getEQPredicate(String attrName, Class attrClass, Boolean value) {
-            return new SearchPredicateUtil.BooleanPredicate(attrName, attrClass, value) {
-                protected boolean compareValue(Object value) {
-                    return ((Boolean) value).compareTo(this.value) == 0;
-                }
-            };
-        }
-
-        static VertexAttributePredicate getNEQPredicate(String attrName, Class attrClass, Boolean value) {
-            return new SearchPredicateUtil.BooleanPredicate(attrName, attrClass, value) {
-                protected boolean compareValue(Object value) {
-                    return ((Boolean) value).compareTo(this.value) != 0;
-                }
-            };
-        }
-    }
-
     static abstract class ShortPredicate extends VertexAttributePredicate {
         final Short value;
 