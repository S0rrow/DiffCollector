diff --git a/application/application-runtime-isolated/src/main/java/org/apache/aries/application/runtime/isolated/impl/ApplicationContextManagerImpl.java b/application/application-runtime-isolated/src/main/java/org/apache/aries/application/runtime/isolated/impl/ApplicationContextManagerImpl.java
index 75bea2a74..25cf00188 100644
--- a/application/application-runtime-isolated/src/main/java/org/apache/aries/application/runtime/isolated/impl/ApplicationContextManagerImpl.java
+++ b/application/application-runtime-isolated/src/main/java/org/apache/aries/application/runtime/isolated/impl/ApplicationContextManagerImpl.java
@@ -20,8 +20,8 @@
 package org.apache.aries.application.runtime.isolated.impl;
 
 import static org.apache.aries.application.utils.AppConstants.LOG_ENTRY;
-import static org.apache.aries.application.utils.AppConstants.LOG_EXCEPTION;
 import static org.apache.aries.application.utils.AppConstants.LOG_EXIT;
+import static org.apache.aries.application.utils.AppConstants.LOG_EXCEPTION;
 
 import java.util.HashSet;
 import java.util.Iterator;
@@ -30,15 +30,15 @@ import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
-import org.apache.aries.application.DeploymentMetadata;
 import org.apache.aries.application.management.AriesApplication;
 import org.apache.aries.application.management.AriesApplicationContext;
+import org.apache.aries.application.management.AriesApplicationContextManager;
+import org.apache.aries.application.management.BundleFramework;
+import org.apache.aries.application.management.BundleFrameworkManager;
+import org.apache.aries.application.management.BundleRepositoryManager;
 import org.apache.aries.application.management.ManagementException;
-import org.apache.aries.application.management.UpdateException;
-import org.apache.aries.application.management.spi.framework.BundleFrameworkManager;
-import org.apache.aries.application.management.spi.repository.BundleRepositoryManager;
-import org.apache.aries.application.management.spi.runtime.AriesApplicationContextManager;
-import org.apache.aries.application.utils.AppConstants;
+import org.apache.aries.application.management.AriesApplicationContext.ApplicationState;
+import org.osgi.framework.Bundle;
 import org.osgi.framework.BundleException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -47,7 +47,7 @@ public class ApplicationContextManagerImpl implements AriesApplicationContextMan
 {
   private static final Logger LOGGER = LoggerFactory.getLogger(ApplicationContextManagerImpl.class);
   
-  private ConcurrentMap<AriesApplication, AriesApplicationContext> _appToContextMap;
+  private ConcurrentMap<AriesApplication, ApplicationContextImpl> _appToContextMap;
   private BundleFrameworkManager _bundleFrameworkManager;  
   private BundleRepositoryManager _bundleRepositoryManager;
 
@@ -55,20 +55,16 @@ public class ApplicationContextManagerImpl implements AriesApplicationContextMan
   {
     LOGGER.debug(LOG_ENTRY, "ApplicationContextImpl");
     
-    _appToContextMap = new ConcurrentHashMap<AriesApplication, AriesApplicationContext>();
-    
-    // When doing isolated runtime support provisioning against the local repo is a really bad idea
-    // it can result in trying to install things into the shared framework into the local framework
-    // this doesn't work because we don't know how to install them into the shared framework and
-    // we can't just use them because they are in the local framework, so if this class is constructed
-    // we disable local provisioning.
-    System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "true");
+    _appToContextMap = new ConcurrentHashMap<AriesApplication, ApplicationContextImpl>();
     
     LOGGER.debug(LOG_EXIT, "ApplicationContextImpl", this);
   }
 
   public void setBundleFrameworkManager(BundleFrameworkManager bfm)
   {
+    LOGGER.debug(LOG_ENTRY, "setBundleFrameworkManager", bfm);
+    LOGGER.debug(LOG_EXIT, "setBundleFrameworkManager");
+    
     _bundleFrameworkManager = bfm;
   }
   
@@ -87,18 +83,18 @@ public class ApplicationContextManagerImpl implements AriesApplicationContextMan
     
     return _bundleRepositoryManager;
   }
-  
+
   public synchronized AriesApplicationContext getApplicationContext(AriesApplication app)
       throws BundleException, ManagementException
   {
     LOGGER.debug(LOG_ENTRY, "getApplicationContext", app);
         
-    AriesApplicationContext result;
+    ApplicationContextImpl result;
     if (_appToContextMap.containsKey(app)) {
       result = _appToContextMap.get(app);
     } else {
       result = new ApplicationContextImpl(app, this);
-      AriesApplicationContext previous = _appToContextMap.putIfAbsent(app, result);
+      ApplicationContextImpl previous = _appToContextMap.putIfAbsent(app, result);
       if (previous != null) {
         result = previous;
       }
@@ -114,7 +110,7 @@ public class ApplicationContextManagerImpl implements AriesApplicationContextMan
     LOGGER.debug(LOG_ENTRY, "getApplicationContexts");
     
     Set<AriesApplicationContext> result = new HashSet<AriesApplicationContext>();
-    for (Map.Entry<AriesApplication, AriesApplicationContext> entry : _appToContextMap.entrySet()) {
+    for (Map.Entry<AriesApplication, ApplicationContextImpl> entry : _appToContextMap.entrySet()) {
       result.add(entry.getValue());
     }
     
@@ -123,46 +119,49 @@ public class ApplicationContextManagerImpl implements AriesApplicationContextMan
     return result;
   }
 
-  public synchronized void remove(AriesApplicationContext app) throws BundleException
+  public synchronized void remove(AriesApplicationContext app)
   {
     LOGGER.debug(LOG_ENTRY, "remove", app);
     
-    Iterator<Map.Entry<AriesApplication, AriesApplicationContext>> it = _appToContextMap.entrySet()
+    Iterator<Map.Entry<AriesApplication, ApplicationContextImpl>> it = _appToContextMap.entrySet()
         .iterator();
 
     while (it.hasNext()) {
-      Map.Entry<AriesApplication, AriesApplicationContext> entry = it.next();
+      Map.Entry<AriesApplication, ApplicationContextImpl> entry = it.next();
 
-      ApplicationContextImpl potentialMatch = (ApplicationContextImpl) entry.getValue();
+      ApplicationContextImpl potentialMatch = entry.getValue();
 
       if (potentialMatch == app) {
         it.remove();
 
-        potentialMatch.uninstall();
+        uninstall(potentialMatch);
 
         break;
       }
     }
-        
+    
     LOGGER.debug(LOG_EXIT, "remove");
   }
-  
+
+  private void uninstall(ApplicationContextImpl app)
+  {
+    LOGGER.debug(LOG_ENTRY, "uninstall", app);
+    
+    if (app.uninstall())
+      app.setState(ApplicationState.UNINSTALLED);      
+    
+    LOGGER.debug(LOG_EXIT, "uninstall");
+  }
+
   public synchronized void close()
   {
     LOGGER.debug(LOG_ENTRY, "close");
     
-    Iterator<AriesApplicationContext> it = _appToContextMap.values().iterator();
-    while (it.hasNext())
-    {      
-      try {
-        ApplicationContextImpl ctx = (ApplicationContextImpl)it.next();
-        ctx.uninstall();
-        it.remove();
-      } catch (BundleException e)
-      {
-        LOGGER.debug(LOG_EXCEPTION,e);
-      }
+    for (ApplicationContextImpl ctx : _appToContextMap.values()) {
+      uninstall(ctx);
     }
+
+    _appToContextMap.clear();
     
     LOGGER.debug(LOG_EXIT, "close");
   }
@@ -175,56 +174,4 @@ public class ApplicationContextManagerImpl implements AriesApplicationContextMan
     return _bundleFrameworkManager;
   }
 
-  public AriesApplicationContext update(AriesApplication app, DeploymentMetadata oldMetadata) throws UpdateException {
-    ApplicationContextImpl ctx = (ApplicationContextImpl)_appToContextMap.get(app);
-    
-    if (ctx == null) {
-      throw new IllegalArgumentException("AriesApplication "+
-          app.getApplicationMetadata().getApplicationSymbolicName() + "/" + app.getApplicationMetadata().getApplicationVersion() + 
-          " cannot be updated because it is not installed");
-    }
-    
-    ctx.update(app.getDeploymentMetadata(), oldMetadata);
-    
-    return ctx;
-  }
-
-  public void bindBundleFrameworkManager(BundleFrameworkManager bfm)
-  {
-    LOGGER.debug(LOG_ENTRY, "setBundleFrameworkManager", bfm);
-    LOGGER.debug(LOG_EXIT, "setBundleFrameworkManager");
-    
-    Iterator<AriesApplicationContext> it = _appToContextMap.values().iterator();
-    while (it.hasNext())
-    {      
-      try {
-        ApplicationContextImpl ctx = (ApplicationContextImpl)it.next();
-        ctx.open();
-      } catch (BundleException e)
-      {
-        LOGGER.debug(LOG_EXCEPTION,e);
-      }
-    }
-  }
-
-  public void unbindBundleFrameworkManager(BundleFrameworkManager bfm)
-  {
-    LOGGER.debug(LOG_ENTRY, "unbindBundleFrameworkManager", bfm);
-    
-    Iterator<AriesApplicationContext> it = _appToContextMap.values().iterator();
-    while (it.hasNext())
-    {      
-      try {
-        ApplicationContextImpl ctx = (ApplicationContextImpl)it.next();
-        ctx.close();
-      } catch (BundleException e)
-      {
-        LOGGER.debug(LOG_EXCEPTION,e);
-      }
-    }
-    
-    LOGGER.debug(LOG_EXIT, "unbindBundleFrameworkManager");
-    
-    
-  }
 }
\ No newline at end of file