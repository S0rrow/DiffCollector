diff --git a/modules/orchestrator/airavata-orchestrator-service/src/main/java/org/apache/airavata/orchestrator/server/OrchestratorServerHandler.java b/modules/orchestrator/airavata-orchestrator-service/src/main/java/org/apache/airavata/orchestrator/server/OrchestratorServerHandler.java
index 2d9a90dd3..0ac4756d5 100644
--- a/modules/orchestrator/airavata-orchestrator-service/src/main/java/org/apache/airavata/orchestrator/server/OrchestratorServerHandler.java
+++ b/modules/orchestrator/airavata-orchestrator-service/src/main/java/org/apache/airavata/orchestrator/server/OrchestratorServerHandler.java
@@ -21,10 +21,6 @@
 
 package org.apache.airavata.orchestrator.server;
 
-import java.util.Arrays;
-import java.util.List;
-
-import org.apache.airavata.common.exception.ApplicationSettingsException;
 import org.apache.airavata.common.utils.Constants;
 import org.apache.airavata.common.utils.ServerSettings;
 import org.apache.airavata.commons.gfac.type.HostDescription;
@@ -36,7 +32,6 @@ import org.apache.airavata.job.monitor.core.Monitor;
 import org.apache.airavata.job.monitor.core.PullMonitor;
 import org.apache.airavata.job.monitor.core.PushMonitor;
 import org.apache.airavata.job.monitor.exception.AiravataMonitorException;
-import org.apache.airavata.job.monitor.impl.LocalJobMonitor;
 import org.apache.airavata.job.monitor.impl.pull.qstat.QstatMonitor;
 import org.apache.airavata.job.monitor.impl.push.amqp.AMQPMonitor;
 import org.apache.airavata.model.workspace.experiment.Experiment;
@@ -44,8 +39,8 @@ import org.apache.airavata.model.workspace.experiment.TaskDetails;
 import org.apache.airavata.orchestrator.core.exception.OrchestratorException;
 import org.apache.airavata.orchestrator.core.utils.OrchestratorUtils;
 import org.apache.airavata.orchestrator.cpi.OrchestratorService;
-import org.apache.airavata.orchestrator.cpi.orchestrator_cpi_serviceConstants;
 import org.apache.airavata.orchestrator.cpi.impl.SimpleOrchestratorImpl;
+import org.apache.airavata.orchestrator.cpi.orchestrator_cpi_serviceConstants;
 import org.apache.airavata.persistance.registry.jpa.impl.RegistryFactory;
 import org.apache.airavata.registry.cpi.DataType;
 import org.apache.airavata.registry.cpi.Registry;
@@ -53,6 +48,10 @@ import org.apache.airavata.schemas.gfac.GsisshHostType;
 import org.apache.thrift.TException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import java.lang.String;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Properties;
 
 public class OrchestratorServerHandler implements OrchestratorService.Iface {
     private static Logger log = LoggerFactory.getLogger(OrchestratorServerHandler.class);
@@ -75,6 +74,7 @@ public class OrchestratorServerHandler implements OrchestratorService.Iface {
 
 
     public OrchestratorServerHandler() {
+        Properties properties = ServerSettings.getProperties();
         try {
             // first constructing the monitorManager and orchestrator, then fill the required properties
             monitorManager = new MonitorManager();
@@ -83,23 +83,19 @@ public class OrchestratorServerHandler implements OrchestratorService.Iface {
 
             // Filling monitorManager properties
             // we can keep a single user to do all the monitoring authentication for required machine..
-            String myProxyUser = ServerSettings.getSetting("myproxy.user");
-            String myProxyPass = ServerSettings.getSetting("myproxy.pass");
-            String certPath = ServerSettings.getSetting("trusted.cert.location");
-            String myProxyServer = ServerSettings.getSetting("myproxy.server");
+            String myProxyUser = properties.getProperty("myproxy.user");
+            String myProxyPass = properties.getProperty("myproxy.pass");
+            String certPath = properties.getProperty("trusted.cert.location");
+            String myProxyServer = properties.getProperty("myproxy.server");
             authenticationInfo = new MyProxyAuthenticationInfo(myProxyUser, myProxyPass, myProxyServer,
                     7512, 17280000, certPath);
 
             // loading Monitor configuration
-            String monitors = ServerSettings.getSetting("monitors");
-            if(monitors == null) {
-                log.error("No Monitor is configured, so job monitoring will not monitor any job");
-                return;
-            }
+            String monitors = properties.getProperty("monitors");
             List<String> monitorList = Arrays.asList(monitors.split(","));
-            List<String> list = Arrays.asList(ServerSettings.getSetting("amqp.hosts").split(","));
-            String proxyPath = ServerSettings.getSetting("proxy.file.path");
-            String connectionName = ServerSettings.getSetting("connection.name");
+            List<String> list = Arrays.asList(properties.getProperty("amqp.hosts").split(","));
+            String proxyPath = properties.getProperty("proxy.file.path");
+            String connectionName = properties.getProperty("connection.name");
 
             if (monitors == null) {
                 log.error("Error loading primaryMonitor and there has to be a primary monitor");
@@ -116,8 +112,6 @@ public class OrchestratorServerHandler implements OrchestratorService.Iface {
                             ((AMQPMonitor) monitor).initialize(proxyPath, connectionName, list);
                             monitorManager.addAMQPMonitor((AMQPMonitor) monitor);
                         }
-                    } else if(monitor instanceof LocalJobMonitor){
-                        monitorManager.addLocalMonitor((LocalJobMonitor)monitor);
                     } else {
                         log.error("Wrong class is given to primary Monitor");
                     }
@@ -138,9 +132,7 @@ public class OrchestratorServerHandler implements OrchestratorService.Iface {
             e.printStackTrace();
         } catch (AiravataMonitorException e) {
             e.printStackTrace();
-        } catch (ApplicationSettingsException e) {
-			e.printStackTrace();
-		}
+        }
     }
 
     /**
@@ -165,7 +157,7 @@ public class OrchestratorServerHandler implements OrchestratorService.Iface {
             }
             for (TaskDetails taskID : tasks) {
                 //iterate through all the generated tasks and performs the job submisssion+monitoring
-                String jobID = null;
+
                 Experiment experiment = (Experiment) registry.get(DataType.EXPERIMENT, experimentId);
                 if (experiment == null) {
                     log.error("Error retrieving the Experiment by the given experimentID: " + experimentId);
@@ -179,28 +171,19 @@ public class OrchestratorServerHandler implements OrchestratorService.Iface {
                 // this is a special case because amqp has to be in place before submitting the job
                 if ((hostDescription instanceof GsisshHostType) &&
                         Constants.PUSH.equals(((GsisshHostType) hostDescription).getMonitorMode())) {
+
                     monitorID = new MonitorID(hostDescription, null, taskID.getTaskID(), experimentId, userName);
                     monitorManager.addAJobToMonitor(monitorID);
-                    jobID = orchestrator.launchExperiment(experimentId, taskID.getTaskID());
-                    if("none".equals(jobID)) {
-                        log.error("Job submission Failed, so we remove the job from monitoring");
-
-                    }else{
-                        log.info("Job Launched to the resource by GFAC and jobID returned : " + jobID);
-                    }
+                    String jobID = orchestrator.launchExperiment(experimentId, taskID.getTaskID());
+                    log.info("Job Launched to the resource by GFAC and jobID returned : " + jobID);
                 } else {
                     // Launching job for each task
                     // if the monitoring is pull mode then we add the monitorID for each task after submitting
                     // the job with the jobID, otherwise we don't need the jobID
-                    jobID = orchestrator.launchExperiment(experimentId, taskID.getTaskID());
+                    String jobID = orchestrator.launchExperiment(experimentId, taskID.getTaskID());
                     log.info("Job Launched to the resource by GFAC and jobID returned : " + jobID);
                     monitorID = new MonitorID(hostDescription, jobID, taskID.getTaskID(), experimentId, userName, authenticationInfo);
-                    if("none".equals(jobID)) {
-                        log.error("Job submission Failed, so we remove the job from monitoring");
-
-                    }else{
-                            monitorManager.addAJobToMonitor(monitorID);
-                    }
+                    monitorManager.addAJobToMonitor(monitorID);
                 }
             }
         } catch (Exception e) {
@@ -209,14 +192,7 @@ public class OrchestratorServerHandler implements OrchestratorService.Iface {
         return true;
     }
 
-    public MonitorManager getMonitorManager() {
-        return monitorManager;
-    }
-
-    public void setMonitorManager(MonitorManager monitorManager) {
-        this.monitorManager = monitorManager;
-    }
-
+    @Override
     public boolean terminateExperiment(String experimentId) throws TException {
         return false;
     }