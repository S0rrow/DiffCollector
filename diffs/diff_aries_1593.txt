diff --git a/application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java b/application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
index c74c887fd..c790fd48b 100644
--- a/application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
+++ b/application/application-management/src/main/java/org/apache/aries/application/management/impl/AriesApplicationManagerImpl.java
@@ -20,179 +20,99 @@
 package org.apache.aries.application.management.impl;
 
 import java.io.File;
-import java.io.FileOutputStream;
 import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
 import java.net.URL;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
+import java.util.Enumeration;
 import java.util.List;
-import java.util.Map;
 import java.util.Set;
 import java.util.jar.Manifest;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipFile;
 
 import org.apache.aries.application.ApplicationMetadata;
 import org.apache.aries.application.ApplicationMetadataManager;
-import org.apache.aries.application.DeploymentMetadata;
-import org.apache.aries.application.DeploymentMetadataFactory;
-import org.apache.aries.application.filesystem.IDirectory;
-import org.apache.aries.application.filesystem.IFile;
 import org.apache.aries.application.management.ApplicationContext;
 import org.apache.aries.application.management.ApplicationListener;
 import org.apache.aries.application.management.AriesApplication;
 import org.apache.aries.application.management.AriesApplicationManager;
-import org.apache.aries.application.management.AriesApplicationResolver;
-import org.apache.aries.application.management.BundleConverter;
-import org.apache.aries.application.management.BundleInfo;
-import org.apache.aries.application.management.LocalPlatform;
 import org.apache.aries.application.management.ManagementException;
-import org.apache.aries.application.management.ResolveConstraint;
 import org.apache.aries.application.utils.AppConstants;
-import org.apache.aries.application.utils.filesystem.FileSystem;
-import org.apache.aries.application.utils.filesystem.IOUtils;
-import org.apache.aries.application.utils.manifest.BundleManifest;
 import org.apache.aries.application.utils.manifest.ManifestDefaultsInjector;
 import org.apache.aries.application.utils.manifest.ManifestProcessor;
-import org.osgi.framework.ServiceException;
+import org.osgi.framework.Bundle;
 
 public class AriesApplicationManagerImpl implements AriesApplicationManager {
 
   private ApplicationMetadataManager _applicationMetadataManager;
-  private DeploymentMetadataFactory _deploymentMetadataFactory;
-  private List<BundleConverter> _bundleConverters;
-  private AriesApplicationResolver _resolver;
-  private LocalPlatform _localPlatform;
 
   public void setApplicationMetadataManager (ApplicationMetadataManager amm) { 
     _applicationMetadataManager = amm;
   }
   
-  public void setDeploymentMetadataFactory (DeploymentMetadataFactory dmf) { 
-    _deploymentMetadataFactory = dmf;
-  }
-  
-  public void setBundleConverters (List<BundleConverter> bcs) { 
-    _bundleConverters = bcs;
-  }
-  
-  public void setResolver (AriesApplicationResolver resolver) { 
-    _resolver = resolver;
-  }
-
-  public void setLocalPlatform (LocalPlatform lp) { 
-    _localPlatform = lp;
-  }
   
   
   /**
-   * Create an AriesApplication from a .eba file: a zip file with a '.eba' extension
-   * as per http://incubator.apache.org/aries/applications.html 
+   * Create an AriesApplication from a .eba file
    */
-  public AriesApplication createApplication(IDirectory ebaFile) throws ManagementException {
-    ApplicationMetadata applicationMetadata = null;
-    DeploymentMetadata deploymentMetadata = null;
-    Map<String, InputStream> modifiedBundles = new HashMap<String, InputStream>();
-    AriesApplicationImpl application = null;
+  public AriesApplication createApplication(File ebaFile) throws ManagementException {
+    /* 
+     * ebaFile should be a zip file with a '.eba' extension 
+     * as per http://incubator.apache.org/aries/applications.html
+     */    
+
+    ApplicationMetadata applicationMetadata;
+    List<Bundle> bundlesInEba;
     
     try { 
-      Manifest applicationManifest = parseApplicationManifest (ebaFile);
-      ManifestDefaultsInjector.updateManifest(applicationManifest, ebaFile.getName(), ebaFile); 
-      applicationMetadata = _applicationMetadataManager.createApplicationMetadata(applicationManifest);
-
-      IFile deploymentManifest = ebaFile.getFile(AppConstants.DEPLOYMENT_MF);
-      if (deploymentManifest != null) { 
-        deploymentMetadata = _deploymentMetadataFactory.createDeploymentMetadata(deploymentManifest);
+      if (!ebaFile.isFile()) { 
+        throw new ManagementException ("Cannot create .eba from directory yet");
       }
-      /* We require that all other .jar and .war files included by-value be valid bundles
-       * because a DEPLOYMENT.MF has been provided. If no DEPLOYMENT.MF, migrate 
-       * wars to wabs, plain jars to bundles
-       */
-        
-      Set<BundleInfo> extraBundlesInfo = new HashSet<BundleInfo>();
-      for (IFile f : ebaFile) { 
-        if (f.isDirectory()) { 
-          continue;
+      ZipFile zipFile = new ZipFile(ebaFile);
+      Manifest applicationManifest = new Manifest();
+      
+      // TODO: If there's a deployment.mf we can ignore the rest of the content
+      
+      // Locate META-INF/APPLICATION.MF
+      ZipEntry entry = null;
+      Enumeration<? extends ZipEntry> entries = zipFile.entries();
+      while (entries.hasMoreElements()) {
+        entry = entries.nextElement();
+        if (entry.getName().replace("\\", "/").equalsIgnoreCase(AppConstants.APPLICATION_MF)) {
+          applicationManifest = ManifestProcessor.parseManifest(zipFile.getInputStream(entry));
+          break;
         }
-        
-        BundleManifest bm = getBundleManifest (f);
-        if (bm != null) {
-          if (bm.isValid()) {
-            extraBundlesInfo.add(new BundleInfoImpl(bm, f.toURL().toExternalForm()));
-          } else if (deploymentMetadata != null) {
-            throw new ManagementException ("Invalid bundle " + f.getName() + " found when DEPLOYMENT.MF present");
-          } else { 
-            // We have a jar that needs converting to a bundle, or a war to migrate to a WAB
-            InputStream convertedBinary = null;
-            Iterator<BundleConverter> converters = _bundleConverters.iterator();
-            while (converters.hasNext() && convertedBinary == null) { 
-              try { 
-                // WarToWabConverter can extract application.xml via
-                // eba.getFile(AppConstants.APPLICATION_XML);
-                convertedBinary = converters.next().convert(ebaFile, f);
-              } catch (ServiceException sx) {
-                // We'll get this if our optional BundleConverter has not been injected. 
-              }
-            }
-            if (convertedBinary != null) { 
-              modifiedBundles.put (f.getName(), convertedBinary);
-              bm = BundleManifest.fromBundle(f);
-              extraBundlesInfo.add(new BundleInfoImpl(bm, f.getName()));
-            }
-          }
-        } 
-        if (deploymentMetadata != null) { 
-          application = new AriesApplicationImpl (applicationMetadata, deploymentMetadata, extraBundlesInfo, _localPlatform);
-        } else { 
-          application = new AriesApplicationImpl (applicationMetadata, extraBundlesInfo, _localPlatform);
-          Set<BundleInfo> additionalBundlesRequired = _resolver.resolve(application);
-          deploymentMetadata = _deploymentMetadataFactory.createDeploymentMetadata(application, additionalBundlesRequired);
-          application.setDeploymentMetadata(deploymentMetadata);
-        
-          // Store a reference to any modified bundles
-          application.setModifiedBundles (modifiedBundles);
-        }
-        
+        // Also look for application.xml to support .war file migration
       }
+
+      // Ensure that the manifest has the necessary fields set 
+      boolean manifestChanged = ManifestDefaultsInjector.updateManifest(applicationManifest, ebaFile.getName(), ebaFile); 
+      
+      applicationMetadata = _applicationMetadataManager.createApplicationMetadata(applicationManifest);
+      
+      // Process any other files in the .eba
+      // i.e. migrate wars to wabs
+      
+      // Validate contents
+      
+      // Perform provisioning
+      
+      // Create deployment.mf if missing
+      
+      // Write out updated .eba if we changed its contents
+      
     } catch (IOException iox) { 
-      // Log an error
       throw new ManagementException(iox);
     }
     
-    return application;
+    
+    // AriesApplication ariesApp = new AriesApplicationImpl (appMeta, bundlesInEba);
+    return null; // ariesApp
   }
 
-  /**
-   * Create an application from a URL. 
-   * The first version of this method isn't smart enough to check whether
-   * the input URL is file://
-   */
   public AriesApplication createApplication(URL url) throws ManagementException {
-    OutputStream os = null;
-    AriesApplication app = null;
-    try { 
-      File tempFile = _localPlatform.getTemporaryFile();
-      InputStream is = url.openStream();
-      os = new FileOutputStream (tempFile);
-      IOUtils.copy(is, os);
-      IDirectory downloadedSource = FileSystem.getFSRoot(tempFile);
-      app = createApplication (downloadedSource);
-    } catch (IOException iox) {
-      throw new ManagementException (iox);
-    }
-      finally { 
-      IOUtils.close(os);
-    }
-    return app;
+    return null;
   }
 
-  public AriesApplication resolve(AriesApplication originalApp,
-      ResolveConstraint... constraints) {
-    // TODO Auto-generated method stub
-    return null;
-  } 
-  
   public ApplicationContext getApplicationContext(AriesApplication app) {
     // TODO Auto-generated method stub
     return null;
@@ -224,45 +144,4 @@ public class AriesApplicationManagerImpl implements AriesApplicationManager {
 
 
 
-  /**
-   * Locate and parse an application.mf in an eba
-   * @param source An aries application file
-   * @return parsed manifest, or null
-   * @throws IOException
-   */
-  private Manifest parseApplicationManifest (IDirectory source) throws IOException {
-    Manifest result = null;
-    IFile f = source.getFile(AppConstants.APPLICATION_MF);
-    if (f != null) { 
-      InputStream is = null;
-      try { 
-        is = f.open();
-        result = ManifestProcessor.parseManifest(is);
-      } catch (IOException iox) { 
-        // TODO: log error
-        throw iox;
-      } finally { 
-        IOUtils.close(is);
-      }
-    }
-    return result;
-  }
-  
-  /**
-   * Extract a bundle manifest from an IFile representing a bundle
-   * @param file The bundle to extract the manifest from
-   * @return bundle manifest
-   */
-  private BundleManifest getBundleManifest(IFile file) throws IOException {
-    BundleManifest mf = null;
-    InputStream in = null;
-    try { 
-      in = file.open();
-      mf = BundleManifest.fromBundle(in);
-    } finally { 
-      IOUtils.close(in);
-    }    
-    return mf;
-  }
-
 }