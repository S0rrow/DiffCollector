diff --git a/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/MessageReferenceImpl.java b/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/MessageReferenceImpl.java
index 09b3650ffd..f01f65cfb3 100644
--- a/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/MessageReferenceImpl.java
+++ b/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/MessageReferenceImpl.java
@@ -1,4 +1,4 @@
-/*
+/**
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements. See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -16,312 +16,197 @@
  */
 package org.apache.activemq.artemis.core.server.impl;
 
-import java.util.Comparator;
-import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
-import java.util.function.Consumer;
+import java.util.concurrent.atomic.AtomicInteger;
 
-import org.apache.activemq.artemis.api.core.ActiveMQException;
-import org.apache.activemq.artemis.api.core.Message;
-import org.apache.activemq.artemis.api.core.SimpleString;
-import org.apache.activemq.artemis.core.paging.PagingStore;
 import org.apache.activemq.artemis.core.server.MessageReference;
 import org.apache.activemq.artemis.core.server.Queue;
-import org.apache.activemq.artemis.core.server.ServerConsumer;
-import org.apache.activemq.artemis.core.transaction.Transaction;
-import org.apache.activemq.artemis.utils.collections.LinkedListImpl;
+import org.apache.activemq.artemis.core.server.ServerMessage;
+import org.apache.activemq.artemis.utils.MemorySize;
 
 /**
  * Implementation of a MessageReference
  */
-public class MessageReferenceImpl extends LinkedListImpl.Node<MessageReferenceImpl> implements MessageReference, Runnable {
-
-   private static final MessageReferenceComparatorByID idComparator = new MessageReferenceComparatorByID();
-   private volatile PagingStore owner;
-
-   public static Comparator<MessageReference> getIDComparator() {
-      return idComparator;
-   }
-
-   private static class MessageReferenceComparatorByID implements Comparator<MessageReference> {
-
-      @Override
-      public int compare(MessageReference o1, MessageReference o2) {
-         long value = o2.getMessage().getMessageID() - o1.getMessage().getMessageID();
-         if (value > 0) {
-            return 1;
-         } else if (value < 0) {
-            return -1;
-         } else {
-            return 0;
-         }
-      }
-   }
-
-
-   private static final AtomicIntegerFieldUpdater<MessageReferenceImpl> DELIVERY_COUNT_UPDATER = AtomicIntegerFieldUpdater
-      .newUpdater(MessageReferenceImpl.class, "deliveryCount");
-
-   @SuppressWarnings("unused")
-   private volatile int deliveryCount = 0;
+public class MessageReferenceImpl implements MessageReference
+{
+   private final AtomicInteger deliveryCount = new AtomicInteger();
 
    private volatile int persistedCount;
 
    private volatile long scheduledDeliveryTime;
 
-   private final Message message;
+   private final ServerMessage message;
 
    private final Queue queue;
 
-   private long consumerID;
-
-   private boolean hasConsumerID = false;
+   private Long consumerID;
 
    private boolean alreadyAcked;
 
-   private boolean deliveredDirectly;
 
-   private Object protocolData;
+   // Static --------------------------------------------------------
 
-   private Consumer<? super MessageReference> onDelivery;
+   private static final int memoryOffset;
 
-   // Static --------------------------------------------------------
+   static
+   {
+      // This is an estimate of how much memory a ServerMessageImpl takes up, exclusing body and properties
+      // Note, it is only an estimate, it's not possible to be entirely sure with Java
+      // This figure is calculated using the test utilities in org.apache.activemq.tests.unit.util.sizeof
+      // The value is somewhat higher on 64 bit architectures, probably due to different alignment
 
-   private static final int memoryOffset = 64;
+      if (MemorySize.is64bitArch())
+      {
+         memoryOffset = 48;
+      }
+      else
+      {
+         memoryOffset = 32;
+      }
+   }
 
    // Constructors --------------------------------------------------
 
-   public MessageReferenceImpl() {
+   public MessageReferenceImpl()
+   {
       queue = null;
 
       message = null;
    }
 
-   public MessageReferenceImpl(final MessageReferenceImpl other, final Queue queue) {
-      DELIVERY_COUNT_UPDATER.set(this, other.getDeliveryCount());
+   public MessageReferenceImpl(final MessageReferenceImpl other, final Queue queue)
+   {
+      deliveryCount.set(other.deliveryCount.get());
 
       scheduledDeliveryTime = other.scheduledDeliveryTime;
 
       message = other.message;
 
       this.queue = queue;
-
-      this.owner = other.owner;
    }
 
-   public MessageReferenceImpl(final Message message, final Queue queue, final PagingStore owner) {
+   protected MessageReferenceImpl(final ServerMessage message, final Queue queue)
+   {
       this.message = message;
 
       this.queue = queue;
-
-      this.owner = owner;
    }
 
    // MessageReference implementation -------------------------------
 
-   @Override
-   public void onDelivery(Consumer<? super MessageReference> onDelivery) {
-      // I am keeping this commented out as a documentation feature:
-      // a Message reference may eventually be taken back before the connection.run was finished.
-      // as a result it may be possible to have this.onDelivery != null here due to cancellations.
-      // assert this.onDelivery == null;
-      this.onDelivery = onDelivery;
-   }
-
-   /**
-    * It will call {@link Consumer#accept(Object)} on {@code this} of the {@link Consumer} registered in {@link #onDelivery(Consumer)}, if any.
-    */
-   @Override
-   public void run() {
-      final Consumer<? super MessageReference> onDelivery = this.onDelivery;
-      if (onDelivery != null) {
-         try {
-            onDelivery.accept(this);
-         } finally {
-            this.onDelivery = null;
-         }
-      }
-   }
-
-   @Override
-   public Object getProtocolData() {
-      return protocolData;
-   }
-
-   @Override
-   public void setProtocolData(Object protocolData) {
-      this.protocolData = protocolData;
-   }
-
    /**
     * @return the persistedCount
     */
-   @Override
-   public int getPersistedCount() {
+   public int getPersistedCount()
+   {
       return persistedCount;
    }
 
    /**
     * @param persistedCount the persistedCount to set
     */
-   @Override
-   public void setPersistedCount(int persistedCount) {
+   public void setPersistedCount(int persistedCount)
+   {
       this.persistedCount = persistedCount;
    }
 
-   @Override
-   public MessageReference copy(final Queue queue) {
+   public MessageReference copy(final Queue queue)
+   {
       return new MessageReferenceImpl(this, queue);
    }
 
-   public static int getMemoryEstimate() {
+   public static int getMemoryEstimate()
+   {
       return MessageReferenceImpl.memoryOffset;
    }
 
-   @Override
-   public int getDeliveryCount() {
-      return DELIVERY_COUNT_UPDATER.get(this);
+   public int getDeliveryCount()
+   {
+      return deliveryCount.get();
    }
 
-   @Override
-   public void setDeliveryCount(final int deliveryCount) {
-      DELIVERY_COUNT_UPDATER.set(this, deliveryCount);
-      this.persistedCount = deliveryCount;
+   public void setDeliveryCount(final int deliveryCount)
+   {
+      this.deliveryCount.set(deliveryCount);
+      this.persistedCount = this.deliveryCount.get();
    }
 
-   @Override
-   public void incrementDeliveryCount() {
-      DELIVERY_COUNT_UPDATER.incrementAndGet(this);
+   public void incrementDeliveryCount()
+   {
+      deliveryCount.incrementAndGet();
    }
 
-   @Override
-   public void decrementDeliveryCount() {
-      DELIVERY_COUNT_UPDATER.decrementAndGet(this);
+   public void decrementDeliveryCount()
+   {
+      deliveryCount.decrementAndGet();
    }
 
-   @Override
-   public long getScheduledDeliveryTime() {
+   public long getScheduledDeliveryTime()
+   {
       return scheduledDeliveryTime;
    }
 
-   @Override
-   public void setScheduledDeliveryTime(final long scheduledDeliveryTime) {
+   public void setScheduledDeliveryTime(final long scheduledDeliveryTime)
+   {
       this.scheduledDeliveryTime = scheduledDeliveryTime;
    }
 
-   @Override
-   public Message getMessage() {
+   public ServerMessage getMessage()
+   {
       return message;
    }
 
-   @Override
-   public long getMessageID() {
-      return getMessage().getMessageID();
-   }
-
-   @Override
-   public Queue getQueue() {
+   public Queue getQueue()
+   {
       return queue;
    }
 
-   @Override
-   public boolean isDurable() {
-      return getMessage().isDurable();
-   }
-
-   @Override
-   public void handled() {
-      queue.referenceHandled(this);
-   }
-
-   @Override
-   public void setInDelivery(boolean inDelivery) {
-      this.deliveredDirectly = inDelivery;
-   }
-
-   @Override
-   public boolean isInDelivery() {
-      return deliveredDirectly;
+   public void handled()
+   {
+      queue.referenceHandled();
    }
 
    @Override
-   public void setAlreadyAcked() {
+   public void setAlreadyAcked()
+   {
       alreadyAcked = true;
    }
 
    @Override
-   public boolean isAlreadyAcked() {
+   public boolean isAlreadyAcked()
+   {
       return alreadyAcked;
    }
 
-   @Override
-   public boolean isPaged() {
+   public boolean isPaged()
+   {
       return false;
    }
 
-   @Override
-   public void acknowledge() throws Exception {
-      this.acknowledge(null);
-   }
-
-   @Override
-   public void acknowledge(Transaction tx) throws Exception {
-      acknowledge(tx, null);
+   public void acknowledge() throws Exception
+   {
+      queue.acknowledge(this);
    }
 
    @Override
-   public void acknowledge(Transaction tx, ServerConsumer consumer) throws Exception {
-      acknowledge(tx, AckReason.NORMAL, consumer);
-   }
-
-   @Override
-   public void acknowledge(Transaction tx, AckReason reason, ServerConsumer consumer) throws Exception {
-      if (tx == null) {
-         getQueue().acknowledge(this, reason, consumer);
-      } else {
-         getQueue().acknowledge(tx, this, reason, consumer);
-      }
-   }
-
-   @Override
-   public void emptyConsumerID() {
-      this.hasConsumerID = false;
-   }
-
-   @Override
-   public void setConsumerId(long consumerID) {
-      this.hasConsumerID = true;
+   public void setConsumerId(Long consumerID)
+   {
       this.consumerID = consumerID;
    }
 
    @Override
-   public boolean hasConsumerId() {
-      return hasConsumerID;
-   }
-
-   @Override
-   public long getConsumerId() {
-      if (!this.hasConsumerID) {
-         throw new IllegalStateException("consumerID isn't specified: please check hasConsumerId first");
-      }
+   public Long getConsumerId()
+   {
       return this.consumerID;
    }
 
-   @Override
-   public SimpleString getLastValueProperty() {
-      SimpleString lastValue = message.getSimpleStringProperty(queue.getLastValueKey());
-      if (lastValue == null) {
-         lastValue = message.getLastValueProperty();
-      }
-      return lastValue;
-   }
-
-   @Override
-   public int getMessageMemoryEstimate() {
+   public int getMessageMemoryEstimate()
+   {
       return message.getMemoryEstimate();
    }
 
    @Override
-   public String toString() {
+   public String toString()
+   {
       return "Reference[" + getMessage().getMessageID() +
          "]:" +
          (getMessage().isDurable() ? "RELIABLE" : "NON-RELIABLE") +
@@ -330,13 +215,16 @@ public class MessageReferenceImpl extends LinkedListImpl.Node<MessageReferenceIm
    }
 
    @Override
-   public boolean equals(Object other) {
-      if (this == other) {
+   public boolean equals(Object other)
+   {
+      if (this == other)
+      {
          return true;
       }
 
-      if (other instanceof MessageReferenceImpl) {
-         MessageReferenceImpl reference = (MessageReferenceImpl) other;
+      if (other instanceof MessageReferenceImpl)
+      {
+         MessageReference reference = (MessageReferenceImpl) other;
 
          if (this.getMessage().equals(reference.getMessage()))
             return true;
@@ -346,22 +234,8 @@ public class MessageReferenceImpl extends LinkedListImpl.Node<MessageReferenceIm
    }
 
    @Override
-   public int hashCode() {
+   public int hashCode()
+   {
       return this.getMessage().hashCode();
    }
-
-   @Override
-   public long getPersistentSize() throws ActiveMQException {
-      return this.getMessage().getPersistentSize();
-   }
-
-   @Override
-   public PagingStore getOwner() {
-      return this.owner;
-   }
-
-   @Override
-   public void setOwner(PagingStore owner) {
-      this.owner = owner;
-   }
-}
+}
\ No newline at end of file