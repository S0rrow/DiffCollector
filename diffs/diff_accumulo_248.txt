diff --git a/core/src/main/java/org/apache/accumulo/core/util/format/DefaultFormatter.java b/core/src/main/java/org/apache/accumulo/core/util/format/DefaultFormatter.java
index 5a2f43fb93..ee4a2200a4 100644
--- a/core/src/main/java/org/apache/accumulo/core/util/format/DefaultFormatter.java
+++ b/core/src/main/java/org/apache/accumulo/core/util/format/DefaultFormatter.java
@@ -31,132 +31,123 @@ import org.apache.hadoop.io.Text;
 public class DefaultFormatter implements Formatter {
   private Iterator<Entry<Key,Value>> si;
   private boolean doTimestamps;
-
-  public static class DefaultDateFormat extends DateFormat {
-    private static final long serialVersionUID = 1L;
-
-    @Override
-    public StringBuffer format(Date date, StringBuffer toAppendTo, FieldPosition fieldPosition) {
-      toAppendTo.append(Long.toString(date.getTime()));
-      return toAppendTo;
-    }
-
-    @Override
-    public Date parse(String source, ParsePosition pos) {
-      return new Date(Long.parseLong(source));
-    }
-  }
-
   private static final ThreadLocal<DateFormat> formatter = new ThreadLocal<DateFormat>() {
     @Override
     protected DateFormat initialValue() {
       return new DefaultDateFormat();
     }
+    
+    class DefaultDateFormat extends DateFormat {
+      private static final long serialVersionUID = 1L;
+
+      @Override
+      public StringBuffer format(Date date, StringBuffer toAppendTo, FieldPosition fieldPosition) {
+        toAppendTo.append(Long.toString(date.getTime()));
+        return toAppendTo;
+      }
+
+      @Override
+      public Date parse(String source, ParsePosition pos) {
+        return new Date(Long.parseLong(source));
+      }
+      
+    }
   };
-
+  
   @Override
   public void initialize(Iterable<Entry<Key,Value>> scanner, boolean printTimestamps) {
-    checkState(false);
+    checkState(si, false);
     si = scanner.iterator();
     doTimestamps = printTimestamps;
   }
-
-  @Override
+  
   public boolean hasNext() {
-    checkState(true);
+    checkState(si, true);
     return si.hasNext();
   }
-
-  @Override
+  
   public String next() {
     DateFormat timestampFormat = null;
-
-    if (doTimestamps) {
+    
+    if(doTimestamps) {
       timestampFormat = formatter.get();
     }
-
+    
     return next(timestampFormat);
   }
-
+  
   protected String next(DateFormat timestampFormat) {
-    checkState(true);
+    checkState(si, true);
     return formatEntry(si.next(), timestampFormat);
   }
-
-  @Override
+  
   public void remove() {
-    checkState(true);
+    checkState(si, true);
     si.remove();
   }
-
-  protected void checkState(boolean expectInitialized) {
+  
+  static void checkState(Iterator<Entry<Key,Value>> si, boolean expectInitialized) {
     if (expectInitialized && si == null)
       throw new IllegalStateException("Not initialized");
     if (!expectInitialized && si != null)
       throw new IllegalStateException("Already initialized");
   }
-
+  
   // this should be replaced with something like Record.toString();
   public static String formatEntry(Entry<Key,Value> entry, boolean showTimestamps) {
     DateFormat timestampFormat = null;
-
-    if (showTimestamps) {
+    
+    if(showTimestamps) {
       timestampFormat = formatter.get();
     }
-
+    
     return formatEntry(entry, timestampFormat);
   }
-
+  
   /* so a new date object doesn't get created for every record in the scan result */
   private static ThreadLocal<Date> tmpDate = new ThreadLocal<Date>() {
-    @Override
-    protected Date initialValue() {
+    protected Date initialValue() { 
       return new Date();
     }
   };
-
+  
   public static String formatEntry(Entry<Key,Value> entry, DateFormat timestampFormat) {
     StringBuilder sb = new StringBuilder();
-    Key key = entry.getKey();
-    Text buffer = new Text();
-
+    
     // append row
-    appendText(sb, key.getRow(buffer)).append(" ");
-
+    appendText(sb, entry.getKey().getRow()).append(" ");
+    
     // append column family
-    appendText(sb, key.getColumnFamily(buffer)).append(":");
-
+    appendText(sb, entry.getKey().getColumnFamily()).append(":");
+    
     // append column qualifier
-    appendText(sb, key.getColumnQualifier(buffer)).append(" ");
-
+    appendText(sb, entry.getKey().getColumnQualifier()).append(" ");
+    
     // append visibility expression
-    sb.append(new ColumnVisibility(key.getColumnVisibility(buffer)));
-
+    sb.append(new ColumnVisibility(entry.getKey().getColumnVisibility()));
+    
     // append timestamp
     if (timestampFormat != null) {
       tmpDate.get().setTime(entry.getKey().getTimestamp());
       sb.append(" ").append(timestampFormat.format(tmpDate.get()));
     }
-
-    Value value = entry.getValue();
-
     // append value
-    if (value != null && value.getSize() > 0) {
+    if (entry.getValue() != null && entry.getValue().getSize() > 0) {
       sb.append("\t");
-      appendValue(sb, value);
+      appendValue(sb, entry.getValue());
     }
-
+    
     return sb.toString();
   }
-
+  
   static StringBuilder appendText(StringBuilder sb, Text t) {
     return appendBytes(sb, t.getBytes(), 0, t.getLength());
   }
-
+  
   static StringBuilder appendValue(StringBuilder sb, Value value) {
     return appendBytes(sb, value.get(), 0, value.get().length);
   }
-
+  
   static StringBuilder appendBytes(StringBuilder sb, byte ba[], int offset, int len) {
     for (int i = 0; i < len; i++) {
       int c = 0xff & ba[offset + i];
@@ -169,12 +160,8 @@ public class DefaultFormatter implements Formatter {
     }
     return sb;
   }
-
+  
   public Iterator<Entry<Key,Value>> getScannerIterator() {
     return si;
   }
-
-  protected boolean isDoTimestamps() {
-    return doTimestamps;
-  }
 }