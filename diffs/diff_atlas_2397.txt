diff --git a/webapp/src/main/java/org/apache/atlas/examples/QuickStart.java b/webapp/src/main/java/org/apache/atlas/examples/QuickStart.java
index 0a6b7b9eb..3da7b0469 100755
--- a/webapp/src/main/java/org/apache/atlas/examples/QuickStart.java
+++ b/webapp/src/main/java/org/apache/atlas/examples/QuickStart.java
@@ -20,9 +20,7 @@ package org.apache.atlas.examples;
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
-import org.apache.atlas.ApplicationProperties;
 import org.apache.atlas.AtlasClient;
-import org.apache.atlas.AtlasException;
 import org.apache.atlas.typesystem.Referenceable;
 import org.apache.atlas.typesystem.TypesDef;
 import org.apache.atlas.typesystem.json.InstanceSerialization;
@@ -39,8 +37,8 @@ import org.apache.atlas.typesystem.types.StructTypeDefinition;
 import org.apache.atlas.typesystem.types.TraitType;
 import org.apache.atlas.typesystem.types.TypeUtils;
 import org.apache.atlas.typesystem.types.utils.TypesUtil;
-import org.apache.commons.configuration.Configuration;
 import org.codehaus.jettison.json.JSONArray;
+import org.codehaus.jettison.json.JSONObject;
 
 import java.util.List;
 
@@ -50,64 +48,40 @@ import java.util.List;
  * todo - move this to examples module.
  */
 public class QuickStart {
-    public static final String ATLAS_REST_ADDRESS = "atlas.rest.address";
-    public static final String SALES_DB = "Sales";
-    public static final String SALES_DB_DESCRIPTION = "Sales Database";
-    public static final String SALES_FACT_TABLE = "sales_fact";
-    public static final String FACT_TRAIT = "Fact";
-    public static final String COLUMNS_ATTRIBUTE = "columns";
-    public static final String TIME_ID_COLUMN = "time_id";
-    public static final String DB_ATTRIBUTE = "db";
-    public static final String SALES_FACT_TABLE_DESCRIPTION = "sales fact table";
-    public static final String LOAD_SALES_DAILY_PROCESS = "loadSalesDaily";
-    public static final String LOAD_SALES_DAILY_PROCESS_DESCRIPTION = "hive query for daily summary";
-    public static final String INPUTS_ATTRIBUTE = "inputs";
-    public static final String OUTPUTS_ATTRIBUTE = "outputs";
-    public static final String TIME_DIM_TABLE = "time_dim";
-    public static final String SALES_FACT_DAILY_MV_TABLE = "sales_fact_daily_mv";
-    public static final String PRODUCT_DIM_VIEW = "product_dim_view";
-    public static final String PRODUCT_DIM_TABLE = "product_dim";
-    public static final String INPUT_TABLES_ATTRIBUTE = "inputTables";
 
     public static void main(String[] args) throws Exception {
         String baseUrl = getServerUrl(args);
         QuickStart quickStart = new QuickStart(baseUrl);
 
-        // Shows how to create types in Atlas for your meta model
+        // Shows how to create types in DGI for your meta model
         quickStart.createTypes();
 
-        // Shows how to create entities (instances) for the added types in Atlas
+        // Shows how to create entities (instances) for the added types in DGI
         quickStart.createEntities();
 
         // Shows some search queries using DSL based on types
         quickStart.search();
     }
 
-    static String getServerUrl(String[] args) throws AtlasException {
+    static String getServerUrl(String[] args) {
+        String baseUrl = "http://localhost:21000";
         if (args.length > 0) {
-            return args[0];
-        }
-
-        Configuration configuration = ApplicationProperties.get();
-        String baseUrl = configuration.getString(ATLAS_REST_ADDRESS);
-        if (baseUrl == null) {
-            System.out.println("Usage: quick_start.py <atlas endpoint of format <http/https>://<atlas-fqdn>:<atlas port> like http://localhost:21000>");
-            System.exit(-1);
+            baseUrl = args[0];
         }
 
         return baseUrl;
     }
 
-    static final String DATABASE_TYPE = "DB";
-    static final String COLUMN_TYPE = "Column";
-    static final String TABLE_TYPE = "Table";
-    static final String VIEW_TYPE = "View";
-    static final String LOAD_PROCESS_TYPE = "LoadProcess";
-    static final String STORAGE_DESC_TYPE = "StorageDesc";
+    private static final String DATABASE_TYPE = "DB";
+    private static final String COLUMN_TYPE = "Column";
+    private static final String TABLE_TYPE = "Table";
+    private static final String VIEW_TYPE = "View";
+    private static final String LOAD_PROCESS_TYPE = "LoadProcess";
+    private static final String STORAGE_DESC_TYPE = "StorageDesc";
 
     private static final String[] TYPES =
             {DATABASE_TYPE, TABLE_TYPE, STORAGE_DESC_TYPE, COLUMN_TYPE, LOAD_PROCESS_TYPE, VIEW_TYPE, "JdbcAccess",
-                    "ETL", "Metric", "PII", "Fact", "Dimension", "Log Data"};
+                    "ETL", "Metric", "PII", "Fact", "Dimension"};
 
     private final AtlasClient metadataServiceClient;
 
@@ -128,10 +102,9 @@ public class QuickStart {
 
     TypesDef createTypeDefinitions() throws Exception {
         HierarchicalTypeDefinition<ClassType> dbClsDef = TypesUtil
-                .createClassTypeDef(DATABASE_TYPE, null,
-                        TypesUtil.createUniqueRequiredAttrDef("name", DataTypes.STRING_TYPE),
+                .createClassTypeDef(DATABASE_TYPE, null, attrDef("name", DataTypes.STRING_TYPE),
                         attrDef("description", DataTypes.STRING_TYPE), attrDef("locationUri", DataTypes.STRING_TYPE),
-                        attrDef("owner", DataTypes.STRING_TYPE), attrDef("createTime", DataTypes.LONG_TYPE));
+                        attrDef("owner", DataTypes.STRING_TYPE), attrDef("createTime", DataTypes.INT_TYPE));
 
         HierarchicalTypeDefinition<ClassType> storageDescClsDef = TypesUtil
                 .createClassTypeDef(STORAGE_DESC_TYPE, null, attrDef("location", DataTypes.STRING_TYPE),
@@ -144,28 +117,27 @@ public class QuickStart {
 
         HierarchicalTypeDefinition<ClassType> tblClsDef = TypesUtil
                 .createClassTypeDef(TABLE_TYPE, ImmutableList.of("DataSet"),
-                        new AttributeDefinition(DB_ATTRIBUTE, DATABASE_TYPE, Multiplicity.REQUIRED, false, null),
+                        new AttributeDefinition("db", DATABASE_TYPE, Multiplicity.REQUIRED, false, null),
                         new AttributeDefinition("sd", STORAGE_DESC_TYPE, Multiplicity.REQUIRED, true, null),
-                        attrDef("owner", DataTypes.STRING_TYPE), attrDef("createTime", DataTypes.LONG_TYPE),
-                        attrDef("lastAccessTime", DataTypes.LONG_TYPE), attrDef("retention", DataTypes.LONG_TYPE),
+                        attrDef("owner", DataTypes.STRING_TYPE), attrDef("createTime", DataTypes.INT_TYPE),
+                        attrDef("lastAccessTime", DataTypes.INT_TYPE), attrDef("retention", DataTypes.INT_TYPE),
                         attrDef("viewOriginalText", DataTypes.STRING_TYPE),
                         attrDef("viewExpandedText", DataTypes.STRING_TYPE), attrDef("tableType", DataTypes.STRING_TYPE),
                         attrDef("temporary", DataTypes.BOOLEAN_TYPE),
-                        new AttributeDefinition(COLUMNS_ATTRIBUTE, DataTypes.arrayTypeName(COLUMN_TYPE),
+                        new AttributeDefinition("columns", DataTypes.arrayTypeName(COLUMN_TYPE),
                                 Multiplicity.COLLECTION, true, null));
 
         HierarchicalTypeDefinition<ClassType> loadProcessClsDef = TypesUtil
                 .createClassTypeDef(LOAD_PROCESS_TYPE, ImmutableList.of("Process"),
-                        attrDef("userName", DataTypes.STRING_TYPE), attrDef("startTime", DataTypes.LONG_TYPE),
-                        attrDef("endTime", DataTypes.LONG_TYPE),
+                        attrDef("userName", DataTypes.STRING_TYPE), attrDef("startTime", DataTypes.INT_TYPE),
+                        attrDef("endTime", DataTypes.INT_TYPE),
                         attrDef("queryText", DataTypes.STRING_TYPE, Multiplicity.REQUIRED),
                         attrDef("queryPlan", DataTypes.STRING_TYPE, Multiplicity.REQUIRED),
                         attrDef("queryId", DataTypes.STRING_TYPE, Multiplicity.REQUIRED),
                         attrDef("queryGraph", DataTypes.STRING_TYPE, Multiplicity.REQUIRED));
 
         HierarchicalTypeDefinition<ClassType> viewClsDef = TypesUtil
-                .createClassTypeDef(VIEW_TYPE, null,
-                        TypesUtil.createUniqueRequiredAttrDef("name", DataTypes.STRING_TYPE),
+                .createClassTypeDef(VIEW_TYPE, null, attrDef("name", DataTypes.STRING_TYPE),
                         new AttributeDefinition("db", DATABASE_TYPE, Multiplicity.REQUIRED, false, null),
                         new AttributeDefinition("inputTables", DataTypes.arrayTypeName(TABLE_TYPE),
                                 Multiplicity.COLLECTION, false, null));
@@ -182,10 +154,8 @@ public class QuickStart {
 
         HierarchicalTypeDefinition<TraitType> jdbcTraitDef = TypesUtil.createTraitTypeDef("JdbcAccess", null);
 
-        HierarchicalTypeDefinition<TraitType> logTraitDef = TypesUtil.createTraitTypeDef("Log Data", null);
-
-        return TypesUtil.getTypesDef(ImmutableList.<EnumTypeDefinition>of(), ImmutableList.<StructTypeDefinition>of(),
-                ImmutableList.of(dimTraitDef, factTraitDef, piiTraitDef, metricTraitDef, etlTraitDef, jdbcTraitDef, logTraitDef),
+        return TypeUtils.getTypesDef(ImmutableList.<EnumTypeDefinition>of(), ImmutableList.<StructTypeDefinition>of(),
+                ImmutableList.of(dimTraitDef, factTraitDef, piiTraitDef, metricTraitDef, etlTraitDef, jdbcTraitDef),
                 ImmutableList.of(dbClsDef, storageDescClsDef, columnClsDef, tblClsDef, loadProcessClsDef, viewClsDef));
     }
 
@@ -205,7 +175,7 @@ public class QuickStart {
     }
 
     void createEntities() throws Exception {
-        Id salesDB = database(SALES_DB, SALES_DB_DESCRIPTION, "John ETL", "hdfs://host:8000/apps/warehouse/sales");
+        Id salesDB = database("Sales", "Sales Database", "John ETL", "hdfs://host:8000/apps/warehouse/sales");
 
 
         Referenceable sd =
@@ -213,30 +183,25 @@ public class QuickStart {
                         true);
 
         List<Referenceable> salesFactColumns = ImmutableList
-                .of(rawColumn(TIME_ID_COLUMN, "int", "time id"), rawColumn("product_id", "int", "product id"),
+                .of(rawColumn("time_id", "int", "time id"), rawColumn("product_id", "int", "product id"),
                         rawColumn("customer_id", "int", "customer id", "PII"),
                         rawColumn("sales", "double", "product id", "Metric"));
 
-        List<Referenceable> logFactColumns = ImmutableList
-                .of(rawColumn("time_id", "int", "time id"), rawColumn("app_id", "int", "app id"),
-                        rawColumn("machine_id", "int", "machine id"), rawColumn("log", "string", "log data", "Log Data"));
-
-        Id salesFact = table(SALES_FACT_TABLE, SALES_FACT_TABLE_DESCRIPTION, salesDB, sd, "Joe", "Managed",
-                salesFactColumns, FACT_TRAIT);
+        Id salesFact = table("sales_fact", "sales fact table", salesDB, sd, "Joe", "Managed", salesFactColumns, "Fact");
 
         List<Referenceable> productDimColumns = ImmutableList
                 .of(rawColumn("product_id", "int", "product id"), rawColumn("product_name", "string", "product name"),
                         rawColumn("brand_name", "int", "brand name"));
 
         Id productDim =
-                table(PRODUCT_DIM_TABLE, "product dimension table", salesDB, sd, "John Doe", "Managed",
-                        productDimColumns, "Dimension");
+                table("product_dim", "product dimension table", salesDB, sd, "John Doe", "Managed", productDimColumns,
+                        "Dimension");
 
         List<Referenceable> timeDimColumns = ImmutableList
                 .of(rawColumn("time_id", "int", "time id"), rawColumn("dayOfYear", "int", "day Of Year"),
                         rawColumn("weekDay", "int", "week Day"));
 
-        Id timeDim = table(TIME_DIM_TABLE, "time dimension table", salesDB, sd, "John Doe", "External", timeDimColumns,
+        Id timeDim = table("time_dim", "time dimension table", salesDB, sd, "John Doe", "External", timeDimColumns,
                 "Dimension");
 
 
@@ -252,21 +217,14 @@ public class QuickStart {
         Id reportingDB =
                 database("Reporting", "reporting database", "Jane BI", "hdfs://host:8000/apps/warehouse/reporting");
 
-        Id logDB = database("Logging", "logging database", "Tim ETL", "hdfs://host:8000/apps/warehouse/logging");
-
         Id salesFactDaily =
-                table(SALES_FACT_DAILY_MV_TABLE, "sales fact daily materialized view", reportingDB, sd, "Joe BI",
-                        "Managed", salesFactColumns, "Metric");
-
-        Id loggingFactDaily =
-                table("log_fact_daily_mv", "log fact daily materialized view", logDB, sd, "Tim ETL", "Managed",
-                        logFactColumns, "Log Data");
+                table("sales_fact_daily_mv", "sales fact daily materialized view", reportingDB, sd, "Joe BI", "Managed",
+                        salesFactColumns, "Metric");
 
-        loadProcess(LOAD_SALES_DAILY_PROCESS, LOAD_SALES_DAILY_PROCESS_DESCRIPTION, "John ETL",
-                ImmutableList.of(salesFact, timeDim),
+        loadProcess("loadSalesDaily", "hive query for daily summary", "John ETL", ImmutableList.of(salesFact, timeDim),
                 ImmutableList.of(salesFactDaily), "create table as select ", "plan", "id", "graph", "ETL");
 
-        view(PRODUCT_DIM_VIEW, reportingDB, ImmutableList.of(productDim), "Dimension", "JdbcAccess");
+        view("product_dim_view", reportingDB, ImmutableList.of(productDim), "Dimension", "JdbcAccess");
 
         view("customer_dim_view", reportingDB, ImmutableList.of(customerDim), "Dimension", "JdbcAccess");
 
@@ -276,13 +234,6 @@ public class QuickStart {
 
         loadProcess("loadSalesMonthly", "hive query for monthly summary", "John ETL", ImmutableList.of(salesFactDaily),
                 ImmutableList.of(salesFactMonthly), "create table as select ", "plan", "id", "graph", "ETL");
-
-        Id loggingFactMonthly =
-                table("logging_fact_monthly_mv", "logging fact monthly materialized view", logDB, sd, "Tim ETL",
-                        "Managed", logFactColumns, "Log Data");
-
-        loadProcess("loadLogsMonthly", "hive query for monthly summary", "Tim ETL", ImmutableList.of(loggingFactDaily),
-                ImmutableList.of(loggingFactMonthly), "create table as select ", "plan", "id", "graph", "ETL");
     }
 
     private Id createInstance(Referenceable referenceable) throws Exception {
@@ -290,12 +241,12 @@ public class QuickStart {
 
         String entityJSON = InstanceSerialization.toJson(referenceable, true);
         System.out.println("Submitting new entity= " + entityJSON);
-        JSONArray guids = metadataServiceClient.createEntity(entityJSON);
-        System.out.println("created instance for type " + typeName + ", guid: " + guids);
+        JSONObject jsonObject = metadataServiceClient.createEntity(entityJSON);
+        String guid = jsonObject.getString(AtlasClient.GUID);
+        System.out.println("created instance for type " + typeName + ", guid: " + guid);
 
         // return the Id for created instance with guid
-        return new Id(guids.getString(guids.length()-1), referenceable.getId().getVersion(),
-                referenceable.getTypeName());
+        return new Id(guid, referenceable.getId().getVersion(), referenceable.getTypeName());
     }
 
     Id database(String name, String description, String owner, String locationUri, String... traitNames)
@@ -354,8 +305,8 @@ public class QuickStart {
         // super type attributes
         referenceable.set("name", name);
         referenceable.set("description", description);
-        referenceable.set(INPUTS_ATTRIBUTE, inputTables);
-        referenceable.set(OUTPUTS_ATTRIBUTE, outputTables);
+        referenceable.set("inputs", inputTables);
+        referenceable.set("outputs", outputTables);
 
         referenceable.set("user", user);
         referenceable.set("startTime", System.currentTimeMillis());
@@ -374,7 +325,7 @@ public class QuickStart {
         referenceable.set("name", name);
         referenceable.set("db", dbId);
 
-        referenceable.set(INPUT_TABLES_ATTRIBUTE, inputTables);
+        referenceable.set("inputTables", inputTables);
 
         return createInstance(referenceable);
     }
@@ -419,7 +370,7 @@ public class QuickStart {
                 // trait searches
                 "Dimension",
             /*"Fact", - todo: does not work*/
-                "JdbcAccess", "ETL", "Metric", "PII", "`Log Data`",
+                "JdbcAccess", "ETL", "Metric", "PII",
             /*
             // Lineage - todo - fix this, its not working
             "Table hive_process outputTables",
@@ -436,9 +387,11 @@ public class QuickStart {
 
     private void search() throws Exception {
         for (String dslQuery : getDSLQueries()) {
-            JSONArray results = metadataServiceClient.search(dslQuery);
-            if (results != null) {
-                System.out.println("query [" + dslQuery + "] returned [" + results.length() + "] rows");
+            JSONObject response = metadataServiceClient.searchEntity(dslQuery);
+            JSONObject results = response.getJSONObject(AtlasClient.RESULTS);
+            if (!results.isNull("rows")) {
+                JSONArray rows = results.getJSONArray("rows");
+                System.out.println("query [" + dslQuery + "] returned [" + rows.length() + "] rows");
             } else {
                 System.out.println("query [" + dslQuery + "] failed, results:" + results.toString());
             }