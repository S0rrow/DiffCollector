diff --git a/artemis-protocols/artemis-stomp-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/stomp/VersionedStompFrameHandler.java b/artemis-protocols/artemis-stomp-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/stomp/VersionedStompFrameHandler.java
index bdae6fc0be..1e0206a0a8 100644
--- a/artemis-protocols/artemis-stomp-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/stomp/VersionedStompFrameHandler.java
+++ b/artemis-protocols/artemis-stomp-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/stomp/VersionedStompFrameHandler.java
@@ -17,19 +17,18 @@
 package org.apache.activemq.artemis.core.protocol.stomp;
 
 import java.nio.charset.StandardCharsets;
-import java.util.concurrent.ScheduledExecutorService;
 
 import org.apache.activemq.artemis.api.core.ActiveMQBuffer;
-import org.apache.activemq.artemis.api.core.ICoreMessage;
 import org.apache.activemq.artemis.api.core.Message;
-import org.apache.activemq.artemis.api.core.RoutingType;
 import org.apache.activemq.artemis.api.core.SimpleString;
-import org.apache.activemq.artemis.core.message.impl.CoreMessage;
+import org.apache.activemq.artemis.core.message.impl.MessageImpl;
 import org.apache.activemq.artemis.core.protocol.stomp.Stomp.Headers;
 import org.apache.activemq.artemis.core.protocol.stomp.v10.StompFrameHandlerV10;
 import org.apache.activemq.artemis.core.protocol.stomp.v11.StompFrameHandlerV11;
 import org.apache.activemq.artemis.core.protocol.stomp.v12.StompFrameHandlerV12;
-import org.apache.activemq.artemis.utils.ExecutorFactory;
+import org.apache.activemq.artemis.core.server.ServerMessage;
+import org.apache.activemq.artemis.core.server.impl.ServerMessageImpl;
+import org.apache.activemq.artemis.utils.DataConstants;
 
 import static org.apache.activemq.artemis.core.protocol.stomp.ActiveMQStompProtocolMessageBundle.BUNDLE;
 
@@ -38,34 +37,21 @@ public abstract class VersionedStompFrameHandler {
    protected StompConnection connection;
    protected StompDecoder decoder;
 
-   protected final ScheduledExecutorService scheduledExecutorService;
-   protected final ExecutorFactory executorFactory;
-
-   protected void disconnect() {
-   }
-
-   public static VersionedStompFrameHandler getHandler(StompConnection connection,
-                                                       StompVersions version,
-                                                       ScheduledExecutorService scheduledExecutorService,
-                                                       ExecutorFactory executorFactory) {
+   public static VersionedStompFrameHandler getHandler(StompConnection connection, StompVersions version) {
       if (version == StompVersions.V1_0) {
-         return new StompFrameHandlerV10(connection, scheduledExecutorService, executorFactory);
+         return new StompFrameHandlerV10(connection);
       }
       if (version == StompVersions.V1_1) {
-         return new StompFrameHandlerV11(connection, scheduledExecutorService, executorFactory);
+         return new StompFrameHandlerV11(connection);
       }
       if (version == StompVersions.V1_2) {
-         return new StompFrameHandlerV12(connection, scheduledExecutorService, executorFactory);
+         return new StompFrameHandlerV12(connection);
       }
       return null;
    }
 
-   protected VersionedStompFrameHandler(StompConnection connection,
-                                        ScheduledExecutorService scheduledExecutorService,
-                                        ExecutorFactory executorFactory) {
+   protected VersionedStompFrameHandler(StompConnection connection) {
       this.connection = connection;
-      this.scheduledExecutorService = scheduledExecutorService;
-      this.executorFactory = executorFactory;
    }
 
    public StompFrame decode(ActiveMQBuffer buffer) throws ActiveMQStompException {
@@ -85,33 +71,45 @@ public abstract class VersionedStompFrameHandler {
 
       if (Stomp.Commands.SEND.equals(request.getCommand())) {
          response = onSend(request);
-      } else if (Stomp.Commands.ACK.equals(request.getCommand())) {
+      }
+      else if (Stomp.Commands.ACK.equals(request.getCommand())) {
          response = onAck(request);
-      } else if (Stomp.Commands.NACK.equals(request.getCommand())) {
+      }
+      else if (Stomp.Commands.NACK.equals(request.getCommand())) {
          response = onNack(request);
-      } else if (Stomp.Commands.BEGIN.equals(request.getCommand())) {
+      }
+      else if (Stomp.Commands.BEGIN.equals(request.getCommand())) {
          response = onBegin(request);
-      } else if (Stomp.Commands.COMMIT.equals(request.getCommand())) {
+      }
+      else if (Stomp.Commands.COMMIT.equals(request.getCommand())) {
          response = onCommit(request);
-      } else if (Stomp.Commands.ABORT.equals(request.getCommand())) {
+      }
+      else if (Stomp.Commands.ABORT.equals(request.getCommand())) {
          response = onAbort(request);
-      } else if (Stomp.Commands.SUBSCRIBE.equals(request.getCommand())) {
-         return handleSubscribe(request);
-      } else if (Stomp.Commands.UNSUBSCRIBE.equals(request.getCommand())) {
+      }
+      else if (Stomp.Commands.SUBSCRIBE.equals(request.getCommand())) {
+         response = onSubscribe(request);
+      }
+      else if (Stomp.Commands.UNSUBSCRIBE.equals(request.getCommand())) {
          response = onUnsubscribe(request);
-      } else if (Stomp.Commands.CONNECT.equals(request.getCommand())) {
+      }
+      else if (Stomp.Commands.CONNECT.equals(request.getCommand())) {
          response = onConnect(request);
-      } else if (Stomp.Commands.STOMP.equals(request.getCommand())) {
+      }
+      else if (Stomp.Commands.STOMP.equals(request.getCommand())) {
          response = onStomp(request);
-      } else if (Stomp.Commands.DISCONNECT.equals(request.getCommand())) {
+      }
+      else if (Stomp.Commands.DISCONNECT.equals(request.getCommand())) {
          response = onDisconnect(request);
-      } else {
+      }
+      else {
          response = onUnknown(request.getCommand());
       }
 
       if (response == null) {
          response = postprocess(request);
-      } else {
+      }
+      else {
          if (request.hasHeader(Stomp.Headers.RECEIPT_REQUESTED)) {
             response.addHeader(Stomp.Headers.Response.RECEIPT_ID, request.getHeader(Stomp.Headers.RECEIPT_REQUESTED));
          }
@@ -120,21 +118,6 @@ public abstract class VersionedStompFrameHandler {
       return response;
    }
 
-   private StompFrame handleSubscribe(StompFrame request) {
-      StompFrame response = null;
-      try {
-         StompPostReceiptFunction postProcessFunction = onSubscribe(request);
-         response = postprocess(request);
-         if (request.hasHeader(Stomp.Headers.RECEIPT_REQUESTED)) {
-            response.addHeader(Stomp.Headers.Response.RECEIPT_ID, request.getHeader(Stomp.Headers.RECEIPT_REQUESTED));
-         }
-         connection.sendFrame(response, postProcessFunction);
-         return null;
-      } catch (ActiveMQStompException e) {
-         return e.getFrame();
-      }
-
-   }
    public abstract StompFrame onConnect(StompFrame frame);
 
    public abstract StompFrame onDisconnect(StompFrame frame);
@@ -174,7 +157,8 @@ public abstract class VersionedStompFrameHandler {
 
       try {
          connection.commitTransaction(txID);
-      } catch (ActiveMQStompException e) {
+      }
+      catch (ActiveMQStompException e) {
          response = e.getFrame();
       }
       return response;
@@ -184,35 +168,32 @@ public abstract class VersionedStompFrameHandler {
       StompFrame response = null;
       try {
          connection.validate();
-         String destination = getDestination(frame);
-         RoutingType routingType = getRoutingType(frame.getHeader(Headers.Send.DESTINATION_TYPE), frame.getHeader(Headers.Send.DESTINATION));
-         connection.autoCreateDestinationIfPossible(destination, routingType);
-         connection.checkDestination(destination);
-         connection.checkRoutingSemantics(destination, routingType);
+         String destination = frame.getHeader(Stomp.Headers.Send.DESTINATION);
+         checkDestination(destination);
          String txID = frame.getHeader(Stomp.Headers.TRANSACTION);
 
          long timestamp = System.currentTimeMillis();
 
-         CoreMessage message = connection.createServerMessage();
-         if (routingType != null) {
-            message.setRoutingType(routingType);
-         }
+         ServerMessageImpl message = connection.createServerMessage();
          message.setTimestamp(timestamp);
          message.setAddress(SimpleString.toSimpleString(destination));
          StompUtils.copyStandardHeadersFromFrameToMessage(frame, message);
          if (frame.hasHeader(Stomp.Headers.CONTENT_LENGTH)) {
             message.setType(Message.BYTES_TYPE);
             message.getBodyBuffer().writeBytes(frame.getBodyAsBytes());
-         } else {
+         }
+         else {
             message.setType(Message.TEXT_TYPE);
             String text = frame.getBody();
             message.getBodyBuffer().writeNullableSimpleString(SimpleString.toSimpleString(text));
          }
 
          connection.sendServerMessage(message, txID);
-      } catch (ActiveMQStompException e) {
+      }
+      catch (ActiveMQStompException e) {
          response = e.getFrame();
-      } catch (Exception e) {
+      }
+      catch (Exception e) {
          ActiveMQStompException error = BUNDLE.errorHandleSend(e).setHandler(this);
          response = error.getFrame();
       }
@@ -220,16 +201,22 @@ public abstract class VersionedStompFrameHandler {
       return response;
    }
 
+   private void checkDestination(String destination) throws ActiveMQStompException {
+      connection.checkDestination(destination);
+   }
+
    public StompFrame onBegin(StompFrame frame) {
       StompFrame response = null;
       String txID = frame.getHeader(Stomp.Headers.TRANSACTION);
       if (txID == null) {
          ActiveMQStompException error = BUNDLE.beginTxNoID().setHandler(this);
          response = error.getFrame();
-      } else {
+      }
+      else {
          try {
             connection.beginTransaction(txID);
-         } catch (ActiveMQStompException e) {
+         }
+         catch (ActiveMQStompException e) {
             response = e.getFrame();
          }
       }
@@ -248,33 +235,36 @@ public abstract class VersionedStompFrameHandler {
 
       try {
          connection.abortTransaction(txID);
-      } catch (ActiveMQStompException e) {
+      }
+      catch (ActiveMQStompException e) {
          response = e.getFrame();
       }
 
       return response;
    }
 
-   public StompPostReceiptFunction onSubscribe(StompFrame frame) throws ActiveMQStompException {
-      String destination = getDestination(frame);
+   public StompFrame onSubscribe(StompFrame request) {
+      StompFrame response = null;
+      String destination = request.getHeader(Stomp.Headers.Subscribe.DESTINATION);
 
-      String selector = frame.getHeader(Stomp.Headers.Subscribe.SELECTOR);
-      String ack = frame.getHeader(Stomp.Headers.Subscribe.ACK_MODE);
-      String id = frame.getHeader(Stomp.Headers.Subscribe.ID);
-      String durableSubscriptionName = frame.getHeader(Stomp.Headers.Subscribe.DURABLE_SUBSCRIBER_NAME);
-      if (durableSubscriptionName == null) {
-         durableSubscriptionName = frame.getHeader(Stomp.Headers.Subscribe.DURABLE_SUBSCRIPTION_NAME);
-      }
-      RoutingType routingType = getRoutingType(frame.getHeader(Headers.Subscribe.SUBSCRIPTION_TYPE), frame.getHeader(Headers.Subscribe.DESTINATION));
+      String selector = request.getHeader(Stomp.Headers.Subscribe.SELECTOR);
+      String ack = request.getHeader(Stomp.Headers.Subscribe.ACK_MODE);
+      String id = request.getHeader(Stomp.Headers.Subscribe.ID);
+      String durableSubscriptionName = request.getHeader(Stomp.Headers.Subscribe.DURABLE_SUBSCRIBER_NAME);
       boolean noLocal = false;
-      if (frame.hasHeader(Stomp.Headers.Subscribe.NO_LOCAL)) {
-         noLocal = Boolean.parseBoolean(frame.getHeader(Stomp.Headers.Subscribe.NO_LOCAL));
+
+      if (request.hasHeader(Stomp.Headers.Subscribe.NO_LOCAL)) {
+         noLocal = Boolean.parseBoolean(request.getHeader(Stomp.Headers.Subscribe.NO_LOCAL));
+      }
+
+      try {
+         connection.subscribe(destination, selector, ack, id, durableSubscriptionName, noLocal);
+      }
+      catch (ActiveMQStompException e) {
+         response = e.getFrame();
       }
-      return connection.subscribe(destination, selector, ack, id, durableSubscriptionName, noLocal, routingType);
-   }
 
-   public String getDestination(StompFrame request) {
-      return request.getHeader(Headers.Subscribe.DESTINATION);
+      return response;
    }
 
    public StompFrame postprocess(StompFrame request) {
@@ -284,7 +274,8 @@ public abstract class VersionedStompFrameHandler {
          if (request.getCommand().equals(Stomp.Commands.DISCONNECT)) {
             response.setNeedsDisconnect(true);
          }
-      } else {
+      }
+      else {
          //request null, disconnect if so.
          if (request.getCommand().equals(Stomp.Commands.DISCONNECT)) {
             this.connection.disconnect(false);
@@ -293,8 +284,7 @@ public abstract class VersionedStompFrameHandler {
       return response;
    }
 
-   public StompFrame createMessageFrame(ICoreMessage serverMessage,
-                                        ActiveMQBuffer bodyBuffer,
+   public StompFrame createMessageFrame(ServerMessage serverMessage,
                                         StompSubscription subscription,
                                         int deliveryCount) throws Exception {
       StompFrame frame = createStompFrame(Stomp.Responses.MESSAGE);
@@ -303,26 +293,32 @@ public abstract class VersionedStompFrameHandler {
          frame.addHeader(Stomp.Headers.Message.SUBSCRIPTION, subscription.getID());
       }
 
-      ActiveMQBuffer buffer = bodyBuffer != null ? bodyBuffer : serverMessage.getReadOnlyBodyBuffer();
+      ActiveMQBuffer buffer = serverMessage.getBodyBufferCopy();
+
+      int bodyPos = serverMessage.getEndOfBodyPosition() == -1 ? buffer.writerIndex() : serverMessage.getEndOfBodyPosition();
 
-      int size = buffer.writerIndex();
+      buffer.readerIndex(MessageImpl.BUFFER_HEADER_SPACE + DataConstants.SIZE_INT);
+
+      int size = bodyPos - buffer.readerIndex();
 
       byte[] data = new byte[size];
 
       if (serverMessage.containsProperty(Stomp.Headers.CONTENT_LENGTH) || serverMessage.getType() == Message.BYTES_TYPE) {
          frame.addHeader(Headers.CONTENT_LENGTH, String.valueOf(data.length));
          buffer.readBytes(data);
-      } else {
+      }
+      else {
          SimpleString text = buffer.readNullableSimpleString();
          if (text != null) {
             data = text.toString().getBytes(StandardCharsets.UTF_8);
-         } else {
+         }
+         else {
             data = new byte[0];
          }
       }
       frame.setByteBody(data);
 
-      StompUtils.copyStandardHeadersFromMessageToFrame((serverMessage), frame, deliveryCount);
+      StompUtils.copyStandardHeadersFromMessageToFrame(serverMessage, frame, deliveryCount);
 
       return frame;
    }
@@ -340,19 +336,8 @@ public abstract class VersionedStompFrameHandler {
 
    //sends an ERROR frame back to client if possible then close the connection
    public void onError(ActiveMQStompException e) {
-      this.connection.sendFrame(e.getFrame(), null);
+      this.connection.sendFrame(e.getFrame());
       connection.destroy();
    }
 
-   private RoutingType getRoutingType(String typeHeader, String destination) throws ActiveMQStompException {
-      // null is valid to return here so we know when the user didn't provide any routing info
-      RoutingType routingType;
-      if (typeHeader != null) {
-         routingType = RoutingType.valueOf(typeHeader);
-      } else {
-         routingType = connection.getSession().getCoreSession().getAddressAndRoutingType(SimpleString.toSimpleString(destination), null).getB();
-      }
-      return routingType;
-   }
-
 }