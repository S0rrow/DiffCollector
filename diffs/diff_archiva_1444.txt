diff --git a/archiva-base/archiva-configuration/src/main/java/org/apache/maven/archiva/configuration/DefaultArchivaConfiguration.java b/archiva-base/archiva-configuration/src/main/java/org/apache/maven/archiva/configuration/DefaultArchivaConfiguration.java
index a80015c37..95d85ad1d 100644
--- a/archiva-base/archiva-configuration/src/main/java/org/apache/maven/archiva/configuration/DefaultArchivaConfiguration.java
+++ b/archiva-base/archiva-configuration/src/main/java/org/apache/maven/archiva/configuration/DefaultArchivaConfiguration.java
@@ -19,75 +19,52 @@
  * under the License.
  */
 
-import java.io.File;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.Map.Entry;
-
-import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.collections.MapUtils;
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang.StringUtils;
 import org.apache.maven.archiva.configuration.functors.ProxyConnectorConfigurationOrderComparator;
 import org.apache.maven.archiva.configuration.io.registry.ConfigurationRegistryReader;
 import org.apache.maven.archiva.configuration.io.registry.ConfigurationRegistryWriter;
-import org.apache.maven.archiva.policies.AbstractUpdatePolicy;
-import org.apache.maven.archiva.policies.CachedFailuresPolicy;
-import org.apache.maven.archiva.policies.ChecksumPolicy;
-import org.apache.maven.archiva.policies.DownloadPolicy;
-import org.apache.maven.archiva.policies.PostDownloadPolicy;
-import org.apache.maven.archiva.policies.PreDownloadPolicy;
-import org.codehaus.plexus.evaluator.DefaultExpressionEvaluator;
-import org.codehaus.plexus.evaluator.EvaluatorException;
-import org.codehaus.plexus.evaluator.ExpressionEvaluator;
-import org.codehaus.plexus.evaluator.sources.SystemPropertyExpressionSource;
+import org.codehaus.plexus.logging.AbstractLogEnabled;
 import org.codehaus.plexus.personality.plexus.lifecycle.phase.Initializable;
 import org.codehaus.plexus.personality.plexus.lifecycle.phase.InitializationException;
 import org.codehaus.plexus.registry.Registry;
 import org.codehaus.plexus.registry.RegistryException;
 import org.codehaus.plexus.registry.RegistryListener;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+import org.codehaus.plexus.util.StringUtils;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
 
 /**
- * <p>
  * Implementation of configuration holder that retrieves it from the registry.
- * </p>
- * <p>
+ * <p/>
  * The registry layers and merges the 2 configuration files: user, and application server.
- * </p>
- * <p>
+ * <p/>
  * Instead of relying on the model defaults, if the registry is empty a default configuration file is loaded and
  * applied from a resource. The defaults are not loaded into the registry as the lists (eg repositories) could no longer
  * be removed if that was the case.
- * </p>
- * <p>
+ * <p/>
  * When saving the configuration, it is saved to the location it was read from. If it was read from the defaults, it
  * will be saved to the user location.
  * However, if the configuration contains information from both sources, an exception is raised as this is currently
  * unsupported. The reason for this is that it is not possible to identify where to re-save elements, and can result
  * in list configurations (eg repositories) becoming inconsistent.
- * </p>
- * <p>
+ * <p/>
  * If the configuration is outdated, it will be upgraded when it is loaded. This is done by checking the version flag
  * before reading it from the registry.
- * </p>
  *
  * @plexus.component role="org.apache.maven.archiva.configuration.ArchivaConfiguration"
  */
 public class DefaultArchivaConfiguration
+    extends AbstractLogEnabled
     implements ArchivaConfiguration, RegistryListener, Initializable
 {
-    private Logger log = LoggerFactory.getLogger( DefaultArchivaConfiguration.class );
-
     /**
      * Plexus registry to read the configuration from.
      *
@@ -100,43 +77,27 @@
      */
     private Configuration configuration;
 
-    /**
-     * @plexus.requirement role="org.apache.maven.archiva.policies.PreDownloadPolicy"
-     */
-    private Map<String, PreDownloadPolicy> prePolicies;
-
-    /**
-     * @plexus.requirement role="org.apache.maven.archiva.policies.PostDownloadPolicy"
-     */
-    private Map<String, PostDownloadPolicy> postPolicies;
+    private static final String KEY = "org.apache.maven.archiva";
 
     /**
      * @plexus.configuration default-value="${user.home}/.m2/archiva.xml"
      */
     private String userConfigFilename;
 
-    /**
-     * @plexus.configuration default-value="${appserver.base}/conf/archiva.xml"
-     */
-    private String altConfigFilename;
-
     /**
      * Configuration Listeners we've registered.
      */
     private Set<ConfigurationListener> listeners = new HashSet<ConfigurationListener>();
-
+    
     /**
      * Registry Listeners we've registered.
      */
     private Set<RegistryListener> registryListeners = new HashSet<RegistryListener>();
 
-    /**
-     * Boolean to help determine if the configuration exists as a result of pulling in
-     * the default-archiva.xml
-     */
-    private boolean isConfigurationDefaulted = false;
-
-    private static final String KEY = "org.apache.maven.archiva";
+    public String getFilteredUserConfigFilename()
+    {
+        return StringUtils.replace( userConfigFilename, "${user.home}", System.getProperty( "user.home" ) );
+    }
 
     public synchronized Configuration getConfiguration()
     {
@@ -192,114 +153,11 @@ else if ( r.getUrl().startsWith( "file:" ) )
                     config.addRemoteRepository( repo );
                 }
             }
-
-            // Prevent duplicate repositories from showing up.
-            config.getRepositories().clear();
-
-            registry.removeSubset( KEY + ".repositories" );
-        }
-
-        if ( !CollectionUtils.isEmpty( config.getRemoteRepositories() ) )
-        {
-            List<RemoteRepositoryConfiguration> remoteRepos = config.getRemoteRepositories();
-            for ( RemoteRepositoryConfiguration repo : remoteRepos )
-            {
-                // [MRM-582] Remote Repositories with empty <username> and <password> fields shouldn't be created in configuration.
-                if ( StringUtils.isBlank( repo.getUsername() ) )
-                {
-                    repo.setUsername( null );
-                }
-
-                if ( StringUtils.isBlank( repo.getPassword() ) )
-                {
-                    repo.setPassword( null );
-                }
-            }
         }
 
+        // Normalize the order fields in the proxy connectors.
         if ( !config.getProxyConnectors().isEmpty() )
         {
-            // Fix Proxy Connector Settings.
-
-            List<ProxyConnectorConfiguration> proxyConnectorList = new ArrayList<ProxyConnectorConfiguration>();
-            // Create a copy of the list to read from (to prevent concurrent modification exceptions)
-            proxyConnectorList.addAll( config.getProxyConnectors() );
-            // Remove the old connector list.
-            config.getProxyConnectors().clear();
-
-            for ( ProxyConnectorConfiguration connector : proxyConnectorList )
-            {
-                // Fix policies
-                boolean connectorValid = true;
-
-                Map<String, String> policies = new HashMap<String, String>();
-                // Make copy of policies
-                policies.putAll( connector.getPolicies() );
-                // Clear out policies
-                connector.getPolicies().clear();
-
-                // Work thru policies. cleaning them up.
-                for ( Entry<String, String> entry : policies.entrySet() )
-                {
-                    String policyId = entry.getKey();
-                    String setting = entry.getValue();
-
-                    // Upgrade old policy settings.
-                    if ( "releases".equals( policyId ) || "snapshots".equals( policyId ) )
-                    {
-                        if ( "ignored".equals( setting ) )
-                        {
-                            setting = AbstractUpdatePolicy.ALWAYS;
-                        }
-                        else if ( "disabled".equals( setting ) )
-                        {
-                            setting = AbstractUpdatePolicy.NEVER;
-                        }
-                    }
-                    else if ( "cache-failures".equals( policyId ) )
-                    {
-                        if ( "ignored".equals( setting ) )
-                        {
-                            setting = CachedFailuresPolicy.NO;
-                        }
-                        else if ( "cached".equals( setting ) )
-                        {
-                            setting = CachedFailuresPolicy.YES;
-                        }
-                    }
-                    else if ( "checksum".equals( policyId ) )
-                    {
-                        if ( "ignored".equals( setting ) )
-                        {
-                            setting = ChecksumPolicy.IGNORE;
-                        }
-                    }
-
-                    // Validate existance of policy key.
-                    if ( policyExists( policyId ) )
-                    {
-                        DownloadPolicy policy = findPolicy( policyId );
-                        // Does option exist?
-                        if ( !policy.getOptions().contains( setting ) )
-                        {
-                            setting = policy.getDefaultOption();
-                        }
-                        connector.addPolicy( policyId, setting );
-                    }
-                    else
-                    {
-                        // Policy key doesn't exist. Don't add it to golden version.
-                        log.warn( "Policy [" + policyId + "] does not exist." );
-                    }
-                }
-
-                if ( connectorValid )
-                {
-                    config.addProxyConnector( connector );
-                }
-            }
-
-            // Normalize the order fields in the proxy connectors.
             Map<String, java.util.List<ProxyConnectorConfiguration>> proxyConnectorMap = config
                 .getProxyConnectorAsMap();
 
@@ -321,54 +179,6 @@ else if ( "checksum".equals( policyId ) )
         return config;
     }
 
-    private DownloadPolicy findPolicy( String policyId )
-    {
-        if ( MapUtils.isEmpty( prePolicies ) )
-        {
-            log.error( "No PreDownloadPolicies found!" );
-            return null;
-        }
-
-        if ( MapUtils.isEmpty( postPolicies ) )
-        {
-            log.error( "No PostDownloadPolicies found!" );
-            return null;
-        }
-
-        DownloadPolicy policy;
-
-        policy = prePolicies.get( policyId );
-        if ( policy != null )
-        {
-            return policy;
-        }
-
-        policy = postPolicies.get( policyId );
-        if ( policy != null )
-        {
-            return policy;
-        }
-
-        return null;
-    }
-
-    private boolean policyExists( String policyId )
-    {
-        if ( MapUtils.isEmpty( prePolicies ) )
-        {
-            log.error( "No PreDownloadPolicies found!" );
-            return false;
-        }
-
-        if ( MapUtils.isEmpty( postPolicies ) )
-        {
-            log.error( "No PostDownloadPolicies found!" );
-            return false;
-        }
-
-        return ( prePolicies.containsKey( policyId ) || postPolicies.containsKey( policyId ) );
-    }
-
     private Registry readDefaultConfiguration()
     {
         // if it contains some old configuration, remove it (Archiva 0.9)
@@ -377,7 +187,6 @@ private Registry readDefaultConfiguration()
         try
         {
             registry.addConfigurationFromResource( "org/apache/maven/archiva/configuration/default-archiva.xml", KEY );
-            this.isConfigurationDefaulted = true;
         }
         catch ( RegistryException e )
         {
@@ -446,7 +255,7 @@ else if ( baseSection != null )
 
         new ConfigurationRegistryWriter().write( configuration, section );
         section.save();
-
+        
         triggerEvent( ConfigurationEvent.SAVED );
 
         this.configuration = processExpressions( configuration );
@@ -456,24 +265,21 @@ private Registry createDefaultConfigurationFile()
         throws RegistryException
     {
         // TODO: may not be needed under commons-configuration 1.4 - check
-        // UPDATE: Upgrading to commons-configuration 1.4 breaks half the unit tests. 2007-10-11 (joakime)
-
-        String contents = "<configuration />";
-        if ( !writeFile( "user configuration", userConfigFilename, contents ) )
+        File file = new File( getFilteredUserConfigFilename() );
+        try
         {
-            if ( !writeFile( "alternative configuration", altConfigFilename, contents ) )
-            {
-                throw new RegistryException( "Unable to create configuration file in either user ["
-                    + userConfigFilename + "] or alternative [" + altConfigFilename
-                    + "] locations on disk, usually happens when not allowed to write to those locations." );
-            }
+            FileUtils.writeStringToFile( file, "<configuration/>", "UTF-8" );
+        }
+        catch ( IOException e )
+        {
+            throw new RegistryException( "Unable to create configuration file: " + e.getMessage(), e );
         }
 
         try
         {
             ( (Initializable) registry ).initialize();
-
-            for ( RegistryListener regListener : registryListeners )
+            
+            for ( RegistryListener regListener: registryListeners )
             {
                 addRegistryChangeListener( regListener );
             }
@@ -482,49 +288,12 @@ private Registry createDefaultConfigurationFile()
         {
             throw new RegistryException( "Unable to reinitialize configuration: " + e.getMessage(), e );
         }
-
+        
         triggerEvent( ConfigurationEvent.SAVED );
 
         return registry.getSection( KEY + ".user" );
     }
 
-    /**
-     * Attempts to write the contents to a file, if an IOException occurs, return false.
-     * 
-     * The file will be created if the directory to the file exists, otherwise this will return false.
-     * 
-     * @param filetype the filetype (freeform text) to use in logging messages when failure to write.
-     * @param path the path to write to.
-     * @param contents the contents to write.
-     * @return true if write successful.
-     */
-    private boolean writeFile( String filetype, String path, String contents )
-    {
-        File file = new File( path );
-
-        try
-        {
-            // Check parent directory (if it is declared)
-            if ( file.getParentFile() != null )
-            {
-                // Check that directory exists
-                if ( ( file.getParentFile().exists() == false ) || ( file.getParentFile().isDirectory() == false ) )
-                {
-                    // Directory to file must exist for file to be created
-                    return false;
-                }
-            }
-
-            FileUtils.writeStringToFile( file, contents, "UTF-8" );
-            return true;
-        }
-        catch ( IOException e )
-        {
-            log.error( "Unable to create " + filetype + " file: " + e.getMessage(), e );
-            return false;
-        }
-    }
-
     private void triggerEvent( int type )
     {
         ConfigurationEvent evt = new ConfigurationEvent( type );
@@ -536,7 +305,7 @@ private void triggerEvent( int type )
             }
             catch ( Throwable t )
             {
-                log.warn( "Unable to notify of saved configuration event.", t );
+                getLogger().warn( "Unable to notify of saved configuration event.", t );
             }
         }
     }
@@ -560,7 +329,7 @@ public void removeListener( ConfigurationListener listener )
 
         listeners.remove( listener );
     }
-
+    
     public void addChangeListener( RegistryListener listener )
     {
         addRegistryChangeListener( listener );
@@ -583,23 +352,10 @@ private void addRegistryChangeListener( RegistryListener listener )
         }
     }
 
+
     public void initialize()
         throws InitializationException
     {
-        // Resolve expressions in the userConfigFilename and altConfigFilename
-        try
-        {
-            ExpressionEvaluator expressionEvaluator = new DefaultExpressionEvaluator();
-            expressionEvaluator.addExpressionSource( new SystemPropertyExpressionSource() );
-            userConfigFilename = expressionEvaluator.expand( userConfigFilename );
-            altConfigFilename = expressionEvaluator.expand( altConfigFilename );
-        }
-        catch ( EvaluatorException e )
-        {
-            throw new InitializationException( "Unable to evaluate expressions found in "
-                + "userConfigFilename or altConfigFilename." );
-        }
-
         registry.addChangeListener( this );
     }
 
@@ -651,19 +407,4 @@ private Configuration processExpressions( Configuration config )
 
         return config;
     }
-
-    public String getUserConfigFilename()
-    {
-        return userConfigFilename;
-    }
-
-    public String getAltConfigFilename()
-    {
-        return altConfigFilename;
-    }
-
-    public boolean isDefaulted()
-    {
-        return this.isConfigurationDefaulted;
-    }
 }