diff --git a/src/main/java/org/apache/geronimo/blueprint/compendium/cm/CmNamespaceHandler.java b/src/main/java/org/apache/geronimo/blueprint/compendium/cm/CmNamespaceHandler.java
index bb102adfd..e42be5662 100644
--- a/src/main/java/org/apache/geronimo/blueprint/compendium/cm/CmNamespaceHandler.java
+++ b/src/main/java/org/apache/geronimo/blueprint/compendium/cm/CmNamespaceHandler.java
@@ -23,21 +23,14 @@ import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
-import org.w3c.dom.CharacterData;
-import org.w3c.dom.Comment;
-import org.w3c.dom.Element;
-import org.w3c.dom.EntityReference;
-import org.w3c.dom.Node;
-import org.w3c.dom.NodeList;
-
 import org.apache.geronimo.blueprint.ComponentDefinitionRegistry;
 import org.apache.geronimo.blueprint.NamespaceHandler;
 import org.apache.geronimo.blueprint.ParserContext;
 import org.apache.geronimo.blueprint.container.Parser;
 import org.apache.geronimo.blueprint.container.ParserContextImpl;
 import org.apache.geronimo.blueprint.container.ServiceListener;
-import org.apache.geronimo.blueprint.ext.ExtNamespaceHandler;
 import org.apache.geronimo.blueprint.ext.PlaceholdersUtils;
+import org.apache.geronimo.blueprint.ext.ExtNamespaceHandler;
 import org.apache.geronimo.blueprint.mutable.MutableBeanMetadata;
 import org.apache.geronimo.blueprint.mutable.MutableCollectionMetadata;
 import org.apache.geronimo.blueprint.mutable.MutableComponentMetadata;
@@ -62,6 +55,12 @@ import org.osgi.service.blueprint.reflect.ValueMetadata;
 import org.osgi.service.cm.ConfigurationAdmin;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+import org.w3c.dom.NodeList;
+import org.w3c.dom.CharacterData;
+import org.w3c.dom.Comment;
+import org.w3c.dom.EntityReference;
 
 /**
  * Namespace handler for the Config Admin service.
@@ -118,7 +117,7 @@ public class CmNamespaceHandler implements NamespaceHandler {
     private static final Logger LOGGER = LoggerFactory.getLogger(CmNamespaceHandler.class);
 
     private int idCounter;
-
+    
     public URL getSchemaLocation(String namespace) {
         return getClass().getResource("blueprint-cm.xsd");
     }
@@ -244,8 +243,8 @@ public class CmNamespaceHandler implements NamespaceHandler {
         factoryMetadata.addProperty("id", createValue(context, factoryMetadata.getId()));
         factoryMetadata.setScope(BeanMetadata.SCOPE_SINGLETON);
         factoryMetadata.setRuntimeClass(CmManagedServiceFactory.class);
-        factoryMetadata.setInitMethod("init");
-        factoryMetadata.setDestroyMethod("destroy");
+        factoryMetadata.setInitMethodName("init");
+        factoryMetadata.setDestroyMethodName("destroy");
         factoryMetadata.addProperty("configAdmin", createRef(context, CONFIG_ADMIN_REFERENCE_NAME));
         factoryMetadata.addProperty("blueprintContainer", createRef(context, "blueprintContainer"));
         factoryMetadata.addProperty("factoryPid", createValue(context, element.getAttribute(FACTORY_PID_ATTRIBUTE)));
@@ -281,11 +280,11 @@ public class CmNamespaceHandler implements NamespaceHandler {
             if (node instanceof Element) {
                 Element e = (Element) node;
                 if (isBlueprintNamespace(e.getNamespaceURI())) {
-                    if (nodeNameEquals(e, INTERFACES_ELEMENT)) {
+                    if (nodeNameEquals(e, Parser.INTERFACES_ELEMENT)) {
                         if (interfaces != null) {
                             throw new ComponentDefinitionException("Only one of " + Parser.INTERFACE_ATTRIBUTE + " attribute or " + INTERFACES_ELEMENT + " element must be used");
                         }
-                        interfaces = parseInterfaceNames(e);
+                        interfaces = parser.parseInterfaceNames(e);
                         factoryMetadata.addProperty("interfaces", createList(context, interfaces));                    
                     } else if (nodeNameEquals(e, Parser.SERVICE_PROPERTIES_ELEMENT)) { 
                         MapMetadata map = parser.parseServiceProperties(e, factoryMetadata);
@@ -300,10 +299,10 @@ public class CmNamespaceHandler implements NamespaceHandler {
                         managedComponent.setScope(BeanMetadata.SCOPE_PROTOTYPE);
                         // destroy-method on managed-component has different signature than on regular beans
                         // so we'll handle it differently
-                        String destroyMethod = managedComponent.getDestroyMethod();
+                        String destroyMethod = managedComponent.getDestroyMethodName();
                         if (destroyMethod != null) {
                             factoryMetadata.addProperty("componentDestroyMethod", createValue(context, destroyMethod));
-                            managedComponent.setDestroyMethod(null);
+                            managedComponent.setDestroyMethodName(null);
                         }
                         context.getComponentDefinitionRegistry().registerComponentDefinition(managedComponent);
                         factoryMetadata.addProperty("managedComponentName", createIdRef(context, managedComponent.getId()));
@@ -318,8 +317,8 @@ public class CmNamespaceHandler implements NamespaceHandler {
             MutableBeanMetadata bean = context.createMetadata(MutableBeanMetadata.class);
             bean.setRuntimeClass(ServiceListener.class);
             bean.addProperty("listener", listener.getListenerComponent());
-            bean.addProperty("registerMethod", createValue(context, listener.getRegistrationMethod()));
-            bean.addProperty("unregisterMethod", createValue(context, listener.getUnregistrationMethod()));
+            bean.addProperty("registerMethod", createValue(context, listener.getRegistrationMethodName()));
+            bean.addProperty("unregisterMethod", createValue(context, listener.getUnregistrationMethodName()));
             listenerCollection.addValue(bean);
         }
         factoryMetadata.addProperty("listeners", listenerCollection);
@@ -330,7 +329,7 @@ public class CmNamespaceHandler implements NamespaceHandler {
         mapMetadata.setScope(BeanMetadata.SCOPE_SINGLETON);
         mapMetadata.setId(id);
         mapMetadata.setFactoryComponent(createRef(context, factoryMetadata.getId()));
-        mapMetadata.setFactoryMethod("getServiceMap");
+        mapMetadata.setFactoryMethodName("getServiceMap");
         return mapMetadata;
     }
 
@@ -345,8 +344,8 @@ public class CmNamespaceHandler implements NamespaceHandler {
         // and the configuration object will come from the factory. So we only really need to register
         // ManagedService if the persistentId is not an empty string.
         if (persistentId.length() > 0) {
-            metadata.setInitMethod("init");
-            metadata.setDestroyMethod("destroy");
+            metadata.setInitMethodName("init");
+            metadata.setDestroyMethodName("destroy");
         }
         metadata.addProperty("blueprintContainer", createRef(context, "blueprintContainer"));
         metadata.addProperty("configAdmin", createRef(context, CONFIG_ADMIN_REFERENCE_NAME));
@@ -374,21 +373,18 @@ public class CmNamespaceHandler implements NamespaceHandler {
         // and the configuration object will come from the factory. So we only really need to register
         // ManagedService if the persistentId is not an empty string.
         if (persistentId.length() > 0) {
-            metadata.setInitMethod("init");
-            metadata.setDestroyMethod("destroy");
+            metadata.setInitMethodName("init");
+            metadata.setDestroyMethodName("destroy");
         }
         metadata.addProperty("blueprintContainer", createRef(context, "blueprintContainer"));
         metadata.addProperty("configAdmin", createRef(context, CONFIG_ADMIN_REFERENCE_NAME));
         metadata.addProperty("managedObjectManager", createRef(context, MANAGED_OBJECT_MANAGER_NAME));
         metadata.addProperty("persistentId", createValue(context, persistentId));
-        String updateStrategy = element.getAttribute(UPDATE_STRATEGY_ATTRIBUTE);
-        if (updateStrategy != null) {
-            metadata.addProperty("updateStrategy", createValue(context, updateStrategy));
+        if (element.hasAttribute(UPDATE_STRATEGY_ATTRIBUTE)) {
+            metadata.addProperty("updateStrategy", createValue(context, element.getAttribute(UPDATE_STRATEGY_ATTRIBUTE)));
         }
         if (element.hasAttribute(UPDATE_METHOD_ATTRIBUTE)) {
             metadata.addProperty("updateMethod", createValue(context, element.getAttribute(UPDATE_METHOD_ATTRIBUTE)));
-        } else if ("component-managed".equals(updateStrategy)) {
-            throw new ComponentDefinitionException(UPDATE_METHOD_ATTRIBUTE + " attribute must be set when " + UPDATE_STRATEGY_ATTRIBUTE + " is set to 'component-managed'");
         }
         metadata.addProperty("beanName", createIdRef(context, component.getId()));
         context.getComponentDefinitionRegistry().registerComponentDefinition(metadata);
@@ -405,13 +401,13 @@ public class CmNamespaceHandler implements NamespaceHandler {
         if (registry.getComponentDefinition(CONFIG_ADMIN_REFERENCE_NAME) == null) {
             MutableReferenceMetadata reference = context.createMetadata(MutableReferenceMetadata.class);
             reference.setId(CONFIG_ADMIN_REFERENCE_NAME);
-            reference.setInterface(ConfigurationAdmin.class.getName());
+            reference.addInterfaceName(ConfigurationAdmin.class.getName());
             reference.setAvailability(ReferenceMetadata.AVAILABILITY_MANDATORY);
             reference.setTimeout(300000);
             registry.registerComponentDefinition(reference);
         }
     }
-
+    
     private void registerManagedObjectManager(ParserContext context, ComponentDefinitionRegistry registry) {
         if (registry.getComponentDefinition(MANAGED_OBJECT_MANAGER_NAME) == null) {
             MutableBeanMetadata beanMetadata = context.createMetadata(MutableBeanMetadata.class);
@@ -429,7 +425,7 @@ public class CmNamespaceHandler implements NamespaceHandler {
     private static ValueMetadata createValue(ParserContext context, String value, String type) {
         MutableValueMetadata m = context.createMetadata(MutableValueMetadata.class);
         m.setStringValue(value);
-        m.setType(type);
+        m.setTypeName(type);
         return m;
     }
 
@@ -448,7 +444,7 @@ public class CmNamespaceHandler implements NamespaceHandler {
     private static CollectionMetadata createList(ParserContext context, List<String> list) {
         MutableCollectionMetadata m = context.createMetadata(MutableCollectionMetadata.class);
         m.setCollectionClass(List.class);
-        m.setValueType(String.class.getName());
+        m.setValueTypeName(String.class.getName());
         for (String v : list) {
             m.addValue(createValue(context, v, String.class.getName()));
         }
@@ -504,25 +500,4 @@ public class CmNamespaceHandler implements NamespaceHandler {
         throw new RuntimeException("Unable to get parser");
     }
 
-    public List<String> parseInterfaceNames(Element element) {
-        List<String> interfaceNames = new ArrayList<String>();
-        NodeList nl = element.getChildNodes();
-        for (int i = 0; i < nl.getLength(); i++) {
-            Node node = nl.item(i);
-            if (node instanceof Element) {
-                Element e = (Element) node;
-                if (nodeNameEquals(e, VALUE_ELEMENT)) {
-                    String v = getTextValue(e).trim();
-                    if (interfaceNames.contains(v)) {
-                        throw new ComponentDefinitionException("The element " + INTERFACES_ELEMENT + " should not contain the same interface twice");
-                    }
-                    interfaceNames.add(getTextValue(e));
-                } else {
-                    throw new ComponentDefinitionException("Unsupported element " + e.getNodeName() + " inside an " + INTERFACES_ELEMENT + " element");
-                }
-            }
-        }
-        return interfaceNames;
-    }
-
 }