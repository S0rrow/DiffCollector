diff --git a/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/ReplicationError.java b/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/ReplicationError.java
index 7c333a5a63..b1b9fd84af 100644
--- a/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/ReplicationError.java
+++ b/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/ReplicationError.java
@@ -1,4 +1,4 @@
-/*
+/**
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements. See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
@@ -22,8 +22,8 @@ import org.apache.activemq.artemis.api.core.Interceptor;
 import org.apache.activemq.artemis.core.protocol.core.Packet;
 import org.apache.activemq.artemis.core.protocol.core.impl.PacketImpl;
 import org.apache.activemq.artemis.core.protocol.core.impl.wireformat.BackupReplicationStartFailedMessage;
-import org.apache.activemq.artemis.core.server.ActiveMQServer;
 import org.apache.activemq.artemis.core.server.ActiveMQServerLogger;
+import org.apache.activemq.artemis.core.server.ActiveMQServer;
 import org.apache.activemq.artemis.core.server.LiveNodeLocator;
 import org.apache.activemq.artemis.spi.core.protocol.RemotingConnection;
 
@@ -34,22 +34,25 @@ import org.apache.activemq.artemis.spi.core.protocol.RemotingConnection;
  * handler at {@link org.apache.activemq.artemis.core.protocol.core.impl.ActiveMQClientProtocolManager.Channel0Handler}. As {@link org.apache.activemq.artemis.core.protocol.core.impl.ActiveMQClientProtocolManager}
  * is also shipped in the activemq-core-client JAR (which does not include {@link org.apache.activemq.artemis.core.server.ActiveMQServer}).
  */
-final class ReplicationError implements Interceptor {
-
+final class ReplicationError implements Interceptor
+{
    private final ActiveMQServer server;
    private LiveNodeLocator nodeLocator;
 
-   ReplicationError(ActiveMQServer server, LiveNodeLocator nodeLocator) {
+   public ReplicationError(ActiveMQServer server, LiveNodeLocator nodeLocator)
+   {
       this.server = server;
       this.nodeLocator = nodeLocator;
    }
 
    @Override
-   public boolean intercept(Packet packet, RemotingConnection connection) throws ActiveMQException {
+   public boolean intercept(Packet packet, RemotingConnection connection) throws ActiveMQException
+   {
       if (packet.getType() != PacketImpl.BACKUP_REGISTRATION_FAILED)
          return true;
       BackupReplicationStartFailedMessage message = (BackupReplicationStartFailedMessage) packet;
-      switch (message.getRegistrationProblem()) {
+      switch (message.getRegistrationProblem())
+      {
          case ALREADY_REPLICATING:
             tryNext();
             break;
@@ -66,12 +69,14 @@ final class ReplicationError implements Interceptor {
       return false;
    }
 
-   private void failed() throws ActiveMQInternalErrorException {
+   private void failed() throws ActiveMQInternalErrorException
+   {
       ActiveMQServerLogger.LOGGER.errorRegisteringBackup();
       nodeLocator.notifyRegistrationFailed(false);
    }
 
-   private void tryNext() {
+   private void tryNext()
+   {
       nodeLocator.notifyRegistrationFailed(true);
    }
 