diff --git a/repository/src/main/java/org/apache/atlas/discovery/DataSetLineageService.java b/repository/src/main/java/org/apache/atlas/discovery/DataSetLineageService.java
index 43592647b..39dde2af0 100644
--- a/repository/src/main/java/org/apache/atlas/discovery/DataSetLineageService.java
+++ b/repository/src/main/java/org/apache/atlas/discovery/DataSetLineageService.java
@@ -18,35 +18,31 @@
 
 package org.apache.atlas.discovery;
 
-import javax.inject.Inject;
-import javax.inject.Singleton;
-
+import com.thinkaurelius.titan.core.TitanGraph;
 import org.apache.atlas.ApplicationProperties;
 import org.apache.atlas.AtlasClient;
 import org.apache.atlas.AtlasException;
-import org.apache.atlas.AtlasProperties;
 import org.apache.atlas.GraphTransaction;
 import org.apache.atlas.discovery.graph.DefaultGraphPersistenceStrategy;
 import org.apache.atlas.discovery.graph.GraphBackedDiscoveryService;
 import org.apache.atlas.query.GremlinQueryResult;
 import org.apache.atlas.query.InputLineageClosureQuery;
 import org.apache.atlas.query.OutputLineageClosureQuery;
-import org.apache.atlas.query.QueryParams;
 import org.apache.atlas.repository.MetadataRepository;
-import org.apache.atlas.repository.graph.AtlasGraphProvider;
-import org.apache.atlas.repository.graphdb.AtlasGraph;
+import org.apache.atlas.repository.graph.GraphProvider;
 import org.apache.atlas.typesystem.exception.EntityNotFoundException;
-import org.apache.atlas.typesystem.exception.SchemaNotFoundException;
 import org.apache.atlas.typesystem.persistence.ReferenceableInstance;
 import org.apache.atlas.utils.ParamChecker;
 import org.apache.commons.configuration.Configuration;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-
 import scala.Option;
 import scala.Some;
 import scala.collection.immutable.List;
 
+import javax.inject.Inject;
+import javax.inject.Singleton;
+
 /**
  * Hive implementation of Lineage service interface.
  */
@@ -56,8 +52,7 @@ public class DataSetLineageService implements LineageService {
     private static final Logger LOG = LoggerFactory.getLogger(DataSetLineageService.class);
 
     private static final Option<List<String>> SELECT_ATTRIBUTES =
-            Some.<List<String>>apply(List.<String>fromArray(new String[]{AtlasClient.NAME,
-                    AtlasClient.REFERENCEABLE_ATTRIBUTE_NAME}));
+            Some.<List<String>>apply(List.<String>fromArray(new String[]{"name"}));
     public static final String SELECT_INSTANCE_GUID = "__guid";
 
     public static final String DATASET_SCHEMA_QUERY_PREFIX = "atlas.lineage.schema.query.";
@@ -68,7 +63,7 @@ public class DataSetLineageService implements LineageService {
 
     private static final String DATASET_EXISTS_QUERY = AtlasClient.DATA_SET_SUPER_TYPE + " where __guid = '%s'";
     private static final String DATASET_NAME_EXISTS_QUERY =
-            AtlasClient.DATA_SET_SUPER_TYPE + " where " + AtlasClient.REFERENCEABLE_ATTRIBUTE_NAME + "='%s' and __state = 'ACTIVE'";
+            AtlasClient.DATA_SET_SUPER_TYPE + " where name = '%s' and __state = 'ACTIVE'";
 
     private static final Configuration propertiesConf;
 
@@ -81,14 +76,14 @@ public class DataSetLineageService implements LineageService {
     }
 
 
-    private final AtlasGraph graph;
+    private final TitanGraph titanGraph;
     private final DefaultGraphPersistenceStrategy graphPersistenceStrategy;
     private final GraphBackedDiscoveryService discoveryService;
 
     @Inject
-    DataSetLineageService(MetadataRepository metadataRepository,
+    DataSetLineageService(GraphProvider<TitanGraph> graphProvider, MetadataRepository metadataRepository,
                           GraphBackedDiscoveryService discoveryService) throws DiscoveryException {
-        this.graph = AtlasGraphProvider.getGraphInstance();
+        this.titanGraph = graphProvider.get();
         this.graphPersistenceStrategy = new DefaultGraphPersistenceStrategy(metadataRepository);
         this.discoveryService = discoveryService;
     }
@@ -103,7 +98,7 @@ public class DataSetLineageService implements LineageService {
     @GraphTransaction
     public String getOutputsGraph(String datasetName) throws AtlasException {
         LOG.info("Fetching lineage outputs graph for datasetName={}", datasetName);
-        datasetName = ParamChecker.notEmpty(datasetName, "dataset name");
+        ParamChecker.notEmpty(datasetName, "dataset name");
         ReferenceableInstance datasetInstance = validateDatasetNameExists(datasetName);
         return getOutputsGraphForId(datasetInstance.getId()._getId());
     }
@@ -118,16 +113,15 @@ public class DataSetLineageService implements LineageService {
     @GraphTransaction
     public String getInputsGraph(String tableName) throws AtlasException {
         LOG.info("Fetching lineage inputs graph for tableName={}", tableName);
-        tableName = ParamChecker.notEmpty(tableName, "table name");
+        ParamChecker.notEmpty(tableName, "table name");
         ReferenceableInstance datasetInstance = validateDatasetNameExists(tableName);
         return getInputsGraphForId(datasetInstance.getId()._getId());
     }
 
     @Override
-    @GraphTransaction
     public String getInputsGraphForEntity(String guid) throws AtlasException {
         LOG.info("Fetching lineage inputs graph for entity={}", guid);
-        guid = ParamChecker.notEmpty(guid, "Entity id");
+        ParamChecker.notEmpty(guid, "Entity id");
         validateDatasetExists(guid);
         return getInputsGraphForId(guid);
     }
@@ -137,15 +131,14 @@ public class DataSetLineageService implements LineageService {
                 inputsQuery = new InputLineageClosureQuery(AtlasClient.DATA_SET_SUPER_TYPE, SELECT_INSTANCE_GUID,
                 guid, HIVE_PROCESS_TYPE_NAME,
                 HIVE_PROCESS_INPUT_ATTRIBUTE_NAME, HIVE_PROCESS_OUTPUT_ATTRIBUTE_NAME, Option.empty(),
-                SELECT_ATTRIBUTES, true, graphPersistenceStrategy, graph);
+                SELECT_ATTRIBUTES, true, graphPersistenceStrategy, titanGraph);
         return inputsQuery.graph().toInstanceJson();
     }
 
     @Override
-    @GraphTransaction
     public String getOutputsGraphForEntity(String guid) throws AtlasException {
         LOG.info("Fetching lineage outputs graph for entity guid={}", guid);
-        guid = ParamChecker.notEmpty(guid, "Entity id");
+        ParamChecker.notEmpty(guid, "Entity id");
         validateDatasetExists(guid);
         return getOutputsGraphForId(guid);
     }
@@ -154,7 +147,7 @@ public class DataSetLineageService implements LineageService {
         OutputLineageClosureQuery outputsQuery =
                 new OutputLineageClosureQuery(AtlasClient.DATA_SET_SUPER_TYPE, SELECT_INSTANCE_GUID, guid, HIVE_PROCESS_TYPE_NAME,
                         HIVE_PROCESS_INPUT_ATTRIBUTE_NAME, HIVE_PROCESS_OUTPUT_ATTRIBUTE_NAME, Option.empty(),
-                        SELECT_ATTRIBUTES, true, graphPersistenceStrategy, graph);
+                        SELECT_ATTRIBUTES, true, graphPersistenceStrategy, titanGraph);
         return outputsQuery.graph().toInstanceJson();
     }
 
@@ -167,28 +160,22 @@ public class DataSetLineageService implements LineageService {
     @Override
     @GraphTransaction
     public String getSchema(String datasetName) throws AtlasException {
-        datasetName = ParamChecker.notEmpty(datasetName, "table name");
+        ParamChecker.notEmpty(datasetName, "table name");
         LOG.info("Fetching schema for tableName={}", datasetName);
         ReferenceableInstance datasetInstance = validateDatasetNameExists(datasetName);
 
         return getSchemaForId(datasetInstance.getTypeName(), datasetInstance.getId()._getId());
     }
 
-    private String getSchemaForId(String typeName, String guid) throws DiscoveryException, SchemaNotFoundException {
-        String configName = DATASET_SCHEMA_QUERY_PREFIX + typeName;
-        if (propertiesConf.getString(configName) != null) {
-            final String schemaQuery =
-                String.format(propertiesConf.getString(configName), guid);
-            int limit = AtlasProperties.getProperty(AtlasProperties.AtlasProperty.SEARCH_MAX_LIMIT);
-            return discoveryService.searchByDSL(schemaQuery, new QueryParams(limit, 0));
-        }
-        throw new SchemaNotFoundException("Schema is not configured for type " + typeName + ". Configure " + configName);
+    private String getSchemaForId(String typeName, String guid) throws DiscoveryException {
+        final String schemaQuery =
+                String.format(propertiesConf.getString(DATASET_SCHEMA_QUERY_PREFIX + typeName), guid);
+        return discoveryService.searchByDSL(schemaQuery);
     }
 
     @Override
-    @GraphTransaction
     public String getSchemaForEntity(String guid) throws AtlasException {
-        guid = ParamChecker.notEmpty(guid, "Entity id");
+        ParamChecker.notEmpty(guid, "Entity id");
         LOG.info("Fetching schema for entity guid={}", guid);
         String typeName = validateDatasetExists(guid);
         return getSchemaForId(typeName, guid);
@@ -201,7 +188,7 @@ public class DataSetLineageService implements LineageService {
      */
     private ReferenceableInstance validateDatasetNameExists(String datasetName) throws AtlasException {
         final String tableExistsQuery = String.format(DATASET_NAME_EXISTS_QUERY, datasetName);
-        GremlinQueryResult queryResult = discoveryService.evaluate(tableExistsQuery, new QueryParams(1, 0));
+        GremlinQueryResult queryResult = discoveryService.evaluate(tableExistsQuery);
         if (!(queryResult.rows().length() > 0)) {
             throw new EntityNotFoundException(datasetName + " does not exist");
         }
@@ -216,7 +203,7 @@ public class DataSetLineageService implements LineageService {
      */
     private String validateDatasetExists(String guid) throws AtlasException {
         final String datasetExistsQuery = String.format(DATASET_EXISTS_QUERY, guid);
-        GremlinQueryResult queryResult = discoveryService.evaluate(datasetExistsQuery, new QueryParams(1, 0));
+        GremlinQueryResult queryResult = discoveryService.evaluate(datasetExistsQuery);
         if (!(queryResult.rows().length() > 0)) {
             throw new EntityNotFoundException("Dataset with guid = " + guid + " does not exist");
         }
@@ -224,4 +211,5 @@ public class DataSetLineageService implements LineageService {
         ReferenceableInstance referenceable = (ReferenceableInstance)queryResult.rows().apply(0);
         return referenceable.getTypeName();
     }
+
 }